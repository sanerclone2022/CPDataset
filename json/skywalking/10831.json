[{"authorTime":"2018-10-22 20:20:29","codes":[{"authorDate":"2018-10-28 10:31:58","commitOrder":8,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new H2RegisterLockDAO());\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO());\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO());\n    }\n","date":"2018-10-28 10:31:58","endLine":119,"groupId":"143","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c6/c52df6d240612658009cfe4169056e9e7bf8a2.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new H2RegisterLockDAO());\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO());\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO());\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2018-10-22 20:20:29","commitOrder":8,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), nameSpace);\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient, 1000));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n    }\n","date":"2018-10-22 20:20:29","endLine":85,"groupId":"143","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/40/d5416e21060a260e5bf1d0d7da00ff44851b9f.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), nameSpace);\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient, 1000));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"NB"}],"commitId":"a9489b706739d9ca994997ac071013c9e4afd0ce","commitMessage":"@@@H2 storage (#1712)\n\n* H2 storage code skeleton.\n\n* Add batch dao for H2.\n\n* Fix wrong refactor.\n\n* Add codes of other dao. No metric dao.  wait for @peng-yongsheng new PR.\n\n* Change license of distribution\n\n* Add topology query in H2.\n\n* Add more daos.\n\n* Add some daos.\n\n* Commit all H2 daos. Wait @peng-yongsheng to submit new IAggregationQueryDAO interface.\n\n* Fix some CIs\n\n* Fix wrong refactor.  which causes h2 plugin failure.\n\n* Fix all codes of H2 storage. :) and CI should pass. No test.\n\n* Fix CI and typo\n\n* Fix connection closed.\n\n* Fix register bug\n\n* no message\n\n* Fixed service inventory register bug.\n\n* Fix a compile issue.\n\n* Sync change\n\n* Reset es as default storage.\n\n* Fix rat\n\n* Fix H2 compile issue.\n\n* Fix bugs for H2 storage.\n\n* Fix bug in mesh.\n\n* 1. Fix Thermodynamic query bug\n2. Fix service inventory query bug\n3. Fix missing traceid in trace query bug\n\n* Fix query bug.\n\n* Submit reverse caused by prev PR.\n\n* Fix duplicate spans.\n\n* Use H2 as default storage implementor.\n\n* Fix bug in topology query.\n\n* Fix CI\n\n* Fix rat\n\n* Fix two query in H2 storage.\n\n* Fix H2 query\n\n* Make release running in H2 mode and develop mode running is ES mode in default\n","date":"2018-10-28 10:31:58","modifiedFileCount":"17","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2018-10-22 20:20:29","codes":[{"authorDate":"2018-11-28 22:59:02","commitOrder":9,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new H2RegisterLockDAO());\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n    }\n","date":"2018-11-28 22:59:02","endLine":117,"groupId":"143","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/16/9b81f444b9dccc1fac8d02ae093af3fb2ae625.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new H2RegisterLockDAO());\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO());\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO());\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2018-10-22 20:20:29","commitOrder":9,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), nameSpace);\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient, 1000));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n    }\n","date":"2018-10-22 20:20:29","endLine":85,"groupId":"143","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/40/d5416e21060a260e5bf1d0d7da00ff44851b9f.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), nameSpace);\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient, 1000));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"215eab74288328e13f2c0fecf222168632685ff9","commitMessage":"@@@Mysql style storage implementation (#1964)\n\nAlso fixed several bugs in this merge.","date":"2018-11-28 22:59:02","modifiedFileCount":"33","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2018-12-06 21:03:00","codes":[{"authorDate":"2018-11-28 22:59:02","commitOrder":10,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new H2RegisterLockDAO());\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n    }\n","date":"2018-11-28 22:59:02","endLine":117,"groupId":"143","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/16/9b81f444b9dccc1fac8d02ae093af3fb2ae625.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new H2RegisterLockDAO());\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"},{"authorDate":"2018-12-06 21:03:00","commitOrder":10,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient, 1000));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n    }\n","date":"2018-12-06 21:03:00","endLine":82,"groupId":"143","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e0/1606e2b696ba4fabe771fddd8cd704e9fd8ac7.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), nameSpace);\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient, 1000));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"27c475f74c9e5ea4e1d6052934686de68743fd1a","commitMessage":"@@@1. Make storage and cluster using same name space. (#2014)\n\n2. Zookeeper implementation of the cluster module using name space to support using same zookeeper cluster by different OAP clusters.","date":"2018-12-06 21:03:00","modifiedFileCount":"6","status":"M","submitter":"??? pengys"},{"authorTime":"2019-01-20 16:41:06","codes":[{"authorDate":"2019-01-20 16:41:06","commitOrder":11,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n    }\n","date":"2019-01-20 16:41:06","endLine":89,"groupId":"143","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a7/6fb49a7d9518e68a86f82850ca7861fc49dd10.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new H2RegisterLockDAO());\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-01-20 16:41:06","commitOrder":11,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient, 10 * 60 * 1000));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-01-20 16:41:06","endLine":83,"groupId":"143","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ba/133d1a4d63ad7d1b785b116091e29b7752ab5a.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient, 1000));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"33f5cc19b54d0988304a3ed9e4477cdc3314cd6d","commitMessage":"@@@Fixed the inventory register lock invalid bug. (#2184)\n\n* #2183\n\nMerge commit into master.\n\n* Make the h2 register lock same as mysql.\n","date":"2019-01-20 16:41:06","modifiedFileCount":"17","status":"M","submitter":"??? pengys"},{"authorTime":"2019-01-23 23:21:36","codes":[{"authorDate":"2019-01-20 16:41:06","commitOrder":12,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n    }\n","date":"2019-01-20 16:41:06","endLine":89,"groupId":"143","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a7/6fb49a7d9518e68a86f82850ca7861fc49dd10.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2019-01-23 23:21:36","commitOrder":12,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-01-23 23:21:36","endLine":83,"groupId":"143","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8f/31dbaa503912adbe1b0c21637aa9907f741ec4.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient, 10 * 60 * 1000));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"2e0104e5999fd277c12d2de3027ec6dfe0edc4fc","commitMessage":"@@@Register lock refactor (#2195)\n\n* Refactor register and reduce the lock time.\n\n* Refactor es id generation mechanism.\n\n* Wrong commit place.\n","date":"2019-01-23 23:21:36","modifiedFileCount":"8","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-02-12 23:13:02","codes":[{"authorDate":"2019-02-12 23:13:02","commitOrder":13,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n    }\n","date":"2019-02-12 23:13:02","endLine":90,"groupId":"143","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ad/dd6a0ff346870b55c09f29e36f4dfd0d2e85f6.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-02-12 23:13:02","commitOrder":13,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-02-12 23:13:02","endLine":84,"groupId":"143","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/cf/10758db1d3e941ea66e36dab3eed670af15411.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"4babd6ff73ee32535f09eb31ecbda736e3052a32","commitMessage":"@@@Support Top sql (#2239)\n\n* The prototype of topN sql worker.\n\n* Add scope and new manual dispatcher.\n\n* no message\n\n* Finish topN persistence codes. Not test yet. And query have not added.\n\n* Finish the top n database statement persistent.\n\n* Support different slow thresholds for different db types.\n\n* Fix wrong db default threshold\n\n* Finish new query protocol binding.\n\n* Provide query empty implementation and sync ui.\n\n* Finish all codes.  hope it works :P\nI will run the tests tonight.\n\n* Fix\n\n* Fix\n\n* Fix a startup issue.\n\n* Add time bucket to persistent.\n\n* Fix wrong query result column name.\n\n* Fix Database query.\n\n* Fix checkstyle.\n\n* Fix wrong order logic.  and add a test case to verify.  to fix https://github.com/apache/incubator-skywalking/pull/2239#discussion_r255948249\n","date":"2019-02-12 23:13:02","modifiedFileCount":"21","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-03-12 07:17:00","codes":[{"authorDate":"2019-02-12 23:13:02","commitOrder":14,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n    }\n","date":"2019-02-12 23:13:02","endLine":90,"groupId":"143","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ad/dd6a0ff346870b55c09f29e36f4dfd0d2e85f6.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2019-03-12 07:17:00","commitOrder":14,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-03-12 07:17:00","endLine":120,"groupId":"143","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a0/16a9c6580ebe8372af60b26ab390fe29fcb550.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"eb19715f990821825759244a7543815a3ebdc8c8","commitMessage":"@@@set es storage namespace to lower case. (#2348)\n\n","date":"2019-03-12 07:17:00","modifiedFileCount":"1","status":"M","submitter":"Jared Tan"},{"authorTime":"2019-03-21 12:09:29","codes":[{"authorDate":"2019-02-12 23:13:02","commitOrder":15,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n    }\n","date":"2019-02-12 23:13:02","endLine":90,"groupId":"143","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ad/dd6a0ff346870b55c09f29e36f4dfd0d2e85f6.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2019-03-21 12:09:29","commitOrder":15,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-03-21 12:09:29","endLine":120,"groupId":"143","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/7d/1a7135ca9737a62778cde08a7c1e77da20cd09.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"c69eafefad31a05ed5620db6bdcc4e63d3f741ef","commitMessage":"@@@Added elasticsearch warehouse certification support (#2384)\n\n* Added elasticsearch warehouse certification support\n\n* Add the elasticsearch service for Http Basic instructions\n\n* Update backend-storage.md\n\nChange document.\n","date":"2019-03-21 12:09:29","modifiedFileCount":"4","status":"M","submitter":"kl"},{"authorTime":"2019-04-08 07:53:06","codes":[{"authorDate":"2019-04-08 07:53:06","commitOrder":16,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-04-08 07:53:06","endLine":91,"groupId":"143","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/28/1c30ce0124404c2e1dbdb49adca87beb770992.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-04-08 07:53:06","commitOrder":16,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-04-08 07:53:06","endLine":89,"groupId":"143","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/f66df07c87c487e8619f4df97bb3ab2e91ed2c.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"df362b18f0e3b7498a0a4f252630e6204d539bba","commitMessage":"@@@Query protocol and codebase for log type record (#2449)\n\n* New query graphql protocol added.\n\n* Finish a new metric.  log(abstract) with HTTP Access Log.\n\n* Submit the draft codes of logs.\n\n* Remove @IDColumn\n\n* Fix startup issue.\n\n* Add http_access_log to disable list.\n\n* Finish a wrong service implementation.\n\n* Add trace id in log query condition and result.\n\n* Fix style\n","date":"2019-04-08 07:53:06","modifiedFileCount":"11","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-04-17 19:25:46","codes":[{"authorDate":"2019-04-17 19:25:46","commitOrder":17,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-04-17 19:25:46","endLine":128,"groupId":"143","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fc/8c16dd823e97c89b496938d134dbca5778bdce.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2019-04-17 19:25:46","commitOrder":17,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-04-17 19:25:46","endLine":124,"groupId":"143","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f6/5fdeaebafcc4a59db8d0bede1657b4e9d61a2a.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"0b2e355b52cd5f3735d113720af73b3de244d2b8","commitMessage":"@@@extend Metadata limit (#2492)\n\n* fix default MetadataQuery Max size.\n\n* revert mysql\n","date":"2019-04-17 19:25:46","modifiedFileCount":"7","status":"M","submitter":"Jared Tan"},{"authorTime":"2019-04-26 23:39:40","codes":[{"authorDate":"2019-04-17 19:25:46","commitOrder":18,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-04-17 19:25:46","endLine":128,"groupId":"143","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fc/8c16dd823e97c89b496938d134dbca5778bdce.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"},{"authorDate":"2019-04-26 23:39:40","commitOrder":18,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-04-26 23:39:40","endLine":124,"groupId":"143","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a7/79921154034f348d25de02a4c93437821925c2.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"5b0419b7c2d5cbc4f913bdc5e4dc013c82eaafba","commitMessage":"@@@support es query segment max size. (#2540)\n\n* support es query span max size.\n\n* refactoring segmentQueryMaxSize.\n\n* fix\n\n* fix\n","date":"2019-04-26 23:39:40","modifiedFileCount":"3","status":"M","submitter":"Jared Tan"},{"authorTime":"2019-05-10 08:05:37","codes":[{"authorDate":"2019-05-10 08:05:37","commitOrder":19,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-05-10 08:05:37","endLine":128,"groupId":"143","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e2/135f51d025435545b11b3737c7a67a5eeab039.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2019-05-10 08:05:37","commitOrder":19,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-05-10 08:05:37","endLine":124,"groupId":"143","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/53/82955e989c87b9f5832ba8f302a9dd25429f42.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new MetricQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"ed78dabe8b142be3d546d349046768135f0a752a","commitMessage":"@@@Rename metric and indicator to metrics. (#2643)\n\n* Rename metric to metrics.\n\n* Fixed test case execute failure issues.\n","date":"2019-05-10 08:05:37","modifiedFileCount":"102","status":"M","submitter":"??? pengys"},{"authorTime":"2019-06-03 18:46:42","codes":[{"authorDate":"2019-06-03 18:46:42","commitOrder":20,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-06-03 18:46:42","endLine":92,"groupId":"143","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/26/bf2c6b641d54b0bdcf02348af9454a4db4f819.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2019-06-03 18:46:42","commitOrder":20,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-06-03 18:46:42","endLine":89,"groupId":"143","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6b/90910160a3289ba0971d6eaae93e22b1e92ed2.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"5036e8334301322d49973005cd98513c17b0f28f","commitMessage":"@@@Good news of an important feature: time series implementation in Elasticsearch storage. (#2808)\n\n* The new feature of Elasticsearch storage with the time series implementation.\n\n* Time bucket util improve.\n\n* Fixed some Gramma error.\n\n* Update ttl.md\n\nPolish English a little.\n\n* Update ttl.md\n\nAdd more explicit description of TTL\n\n* Update ttl.md\n\n* Update StorageModuleElasticsearchConfig.java\n\nSet otherMetricsDataTTL = 0 as default.  make user more clear.\n\n* Rename the timeSeriesAble to capableOfTimeSeries\n\n* Fixed a test case failure.\n","date":"2019-06-03 18:46:42","modifiedFileCount":"46","status":"M","submitter":"??? pengys"},{"authorTime":"2019-07-20 22:59:52","codes":[{"authorDate":"2019-06-03 18:46:42","commitOrder":21,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-06-03 18:46:42","endLine":92,"groupId":"143","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/26/bf2c6b641d54b0bdcf02348af9454a4db4f819.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2019-07-20 22:59:52","commitOrder":21,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-07-20 22:59:52","endLine":89,"groupId":"143","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/63/d936b14401bbe1895b5882e6a964bb6cf51818.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getBulkSize(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"6338de392fe988e4bf46e8a6c5aadb92b946ddab","commitMessage":"@@@Improve OAP server performance. (#3127)\n\n* Improve OAP server performance.","date":"2019-07-20 22:59:52","modifiedFileCount":"23","status":"M","submitter":"??? pengys"},{"authorTime":"2019-08-09 19:15:04","codes":[{"authorDate":"2019-06-03 18:46:42","commitOrder":22,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-06-03 18:46:42","endLine":92,"groupId":"143","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/26/bf2c6b641d54b0bdcf02348af9454a4db4f819.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2019-08-09 19:15:04","commitOrder":22,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-08-09 19:15:04","endLine":89,"groupId":"143","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/20/d7fd4405b5838fa416646bf2ceeddd3ada9a2e.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"02affffa5044ca57e81ab56f6bf83e43b91458f4","commitMessage":"@@@support elasticsearch address configuration with http scheme. (#3236)\n\n* support elasticsearch address configuration with http scheme.\n\n* update logical.\n","date":"2019-08-09 19:15:04","modifiedFileCount":"4","status":"M","submitter":"Jared Tan"},{"authorTime":"2019-09-02 11:15:43","codes":[{"authorDate":"2019-06-03 18:46:42","commitOrder":23,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-06-03 18:46:42","endLine":92,"groupId":"143","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/26/bf2c6b641d54b0bdcf02348af9454a4db4f819.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2019-09-02 11:15:43","commitOrder":23,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config.getTrustStorePass(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-09-02 11:15:43","endLine":126,"groupId":"143","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d0/766b58c64bdeeaea9220c15f28cd73a23fd357.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"dbbf22a177d4bcc9cda9069b6d7054b4ad8b06bd","commitMessage":"@@@support es https ssl config. (#3370)\n\n* support es https ssl config.\n\n* update\n\n* update docs.\n\n* refactoring var name.\n\n* fix\n\n* update docs.\n\n* add config in es section.\n\n* fix logical.\n","date":"2019-09-02 11:15:43","modifiedFileCount":"5","status":"M","submitter":"Jared Tan"},{"authorTime":"2019-11-01 18:32:06","codes":[{"authorDate":"2019-06-03 18:46:42","commitOrder":24,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-06-03 18:46:42","endLine":92,"groupId":"143","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/26/bf2c6b641d54b0bdcf02348af9454a4db4f819.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2019-11-01 18:32:06","commitOrder":24,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config.getTrustStorePass(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-11-01 18:32:06","endLine":126,"groupId":"143","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a0/25900e9fb788c40d602635b43a125e4fe0df6e.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config.getTrustStorePass(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"fbabcb1782762a8a14afaa6136e3c82cb5e5666a","commitMessage":"@@@make query max window size configurable. (#3765)\n\n* fix elasticsearch query data window size too large error.\n\n* make query max window size configurable.\n","date":"2019-11-01 18:32:06","modifiedFileCount":"4","status":"M","submitter":"Jared Tan"},{"authorTime":"2019-12-09 08:23:21","codes":[{"authorDate":"2019-06-03 18:46:42","commitOrder":25,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-06-03 18:46:42","endLine":92,"groupId":"143","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/26/bf2c6b641d54b0bdcf02348af9454a4db4f819.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2019-12-09 08:23:21","commitOrder":25,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config.getTrustStorePass(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","date":"2019-12-09 08:23:21","endLine":126,"groupId":"5821","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/82/1cd838fe7bab35b9587ffbf1a0848e06a1994b.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config.getTrustStorePass(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"3741f4e386eb4899492cf09273b57a14cde453ef","commitMessage":"@@@[Feature] Service instance dependency (#3978)\n\n* dispatcher\n\n* getServiceInstanceTopology implementation\n\n* CacheUpdateTimer\n\n* fix compilation failure\n\n* fix compilation failure\n\n* fix esDao\n\n* Update dao list\n\n* dispatcher\n\n* getServiceInstanceTopology implementation\n\n* CacheUpdateTimer\n\n* fix compilation failure\n\n* fix compilation failure\n\n* fix esDao\n\n* Update dao list\n\n* test e2e\n\n* add official_analysis.oal & update getServiceInstanceTopology\n\n* test instance topo for single service\n\n* fix gql\n\n* fix verifyServiceInstances\n\n* verifyServiceInstanceTopo\n\n* fix verifyServiceInstanceTopo\n\n* fix ServiceInstanceInventory#name\n\n* fix ServiceInstanceInventory#name\n\n* e2e test\n\n* fix action\n\n* fix provider port\n\n* fix Instance Node Type\n\n* re run\n\n* fix expected-data\n\n* add e2e mysql\n\n* set @Test timeout\n\n* fix ci\n\n* increase timeout\n\n* re check\n\n* test ttl es7\n\n* test ttl\n\n* fix action\n\n* merge group\n\n* test ttl es7\n\n* replace official_analysis.oal\n\n* replace official_analysis.oal\n\n* comments\n\n* add TODO\n\n* add TODO\n\n* fix filed name\n","date":"2019-12-09 08:23:21","modifiedFileCount":"26","status":"M","submitter":"zhang-wei"},{"authorTime":"2019-12-31 20:49:45","codes":[{"authorDate":"2019-12-31 20:49:45","commitOrder":26,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n    }\n","date":"2019-12-31 20:49:45","endLine":95,"groupId":"143","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/46/63ad23edfaa1e3f6f4a4c7be3787b70b14de75.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2019-12-31 20:49:45","commitOrder":26,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config.getTrustStorePass(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n    }\n","date":"2019-12-31 20:49:45","endLine":122,"groupId":"5821","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3a/9dd34f61825fa68f0634321577984792ae0b1a.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config.getTrustStorePass(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"d38a8eaaa7e7193bff292cd03016c6a9320c8c9a","commitMessage":"@@@Provide thread monitor create task feature (#4145)\n\n* provide thread monitor task service to create\n\n* provide thread monitor task GraphQL implements\n\n* 1. change thread monitor field names\n2. fix `getThreadMonitorTaskList` query time bucket error\n\n* provide config stream processor\n\n* update submodule `query-protocol`\n\n* resolve e2e-mysql error\n\n* remove useless storage interface method.\n\n* rename `ThreadMonitorTask` to `ProfileTask`\n\n* change e2e-profile to the top level\n\n* fix profile test analyze error\n\n* remove StringUtil#isBlank.\n\n* 1. remove create profile task duration unit\n2. remove GraphQL getTask list duration field\n3. add `profileTaskQueryMaxSize` in `storage` -> `elasticsearch(7)` configuration.  default get 200 profile task\n\n* provide e2e different storage tests\n\n* 1. fix rat check\n2. remove DurationUtils.java#toSecond\n3. remove ProfileTaskQueryEs7DAO\n\n* fix e2e code format error\n\n* provide es6 and es7 storage e2e tests\n\n* change e2e profile es module artifactId\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>\n","date":"2019-12-31 20:49:45","modifiedFileCount":"12","status":"M","submitter":"mrproliu"},{"authorTime":"2020-01-09 09:35:40","codes":[{"authorDate":"2020-01-09 09:35:40","commitOrder":27,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n    }\n","date":"2020-01-09 09:35:39","endLine":97,"groupId":"143","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/6264881d26c16552892346f4e0fb49934f3548.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-01-09 09:35:40","commitOrder":27,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config.getTrustStorePass(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n    }\n","date":"2020-01-09 09:35:39","endLine":124,"groupId":"5821","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e4/51ac6d675612cc3d28ad81c2f42a3274b2c5f1.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config.getTrustStorePass(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"4cf0600f351f9c99af804bc90bcb54d3b778c7b8","commitMessage":"@@@Provide profile task downstream to sniffer (#4172)\n\n* Provide profile task downstream to sniffer\n\n* fix agent unit testcase issue\n\n* add profile switch config on sniffer\n\n* fix es error\n\n* 1. add @DefaultImplementor on the sniffer profile task service\n2. change ProfileTaskExecutionService#PROFILE_TASK_READY_SCHEDULE to final and remove volatile\n2. fix style error\n\n* change timeFromStartMills use `<` to compare\n\n* 1. add `maxSamplingCount` to profile task\n2. make profile task limit to the common package\n\n* 1. change `agent.active_profile` to `profile.active` and make true on default\n2. add `maxSamplingCount` in profile task\n3. use `createTime` to check has new command list\n4. add task re-check before process profile task\n\n* 1. add `profile-receiver` document\n2. change `ProfileTaskExecutionService` use single schedule thread pool\n3. cache dont need fetch data when no data.  use auto-fresh mechanism only\n\n* remove navigate time judge.  fix comment wrong meaning\n","date":"2020-01-09 09:35:39","modifiedFileCount":"30","status":"M","submitter":"mrproliu"},{"authorTime":"2020-02-06 21:02:08","codes":[{"authorDate":"2020-02-06 21:02:08","commitOrder":28,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","date":"2020-02-06 21:02:08","endLine":99,"groupId":"143","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/11/783a41ef532b11c83bd4168e598a09ba2b945d.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-02-06 21:02:08","commitOrder":28,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config.getTrustStorePass(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n    }\n","date":"2020-02-06 21:02:08","endLine":126,"groupId":"5821","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c0/1679f0d243d640a65bfbd659b1321f87cbc26f.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config.getTrustStorePass(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"e44bc36281cc0c79f263906464c62698bbf5959d","commitMessage":"@@@provide profiled segment list query (#4322)\n\n* provide profiled segment query\n\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>\nCo-authored-by: AirTrioa <44222967+AirTrioa@users.noreply.github.com>\n","date":"2020-02-06 21:02:08","modifiedFileCount":"12","status":"M","submitter":"mrproliu"},{"authorTime":"2020-02-06 21:02:08","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":29,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","date":"2020-02-11 17:10:49","endLine":141,"groupId":"143","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5b/468ced6c926fb09e2e5ee456b99857fae1b1db.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2020-02-06 21:02:08","commitOrder":29,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config.getTrustStorePass(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n    }\n","date":"2020-02-06 21:02:08","endLine":126,"groupId":"5821","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c0/1679f0d243d640a65bfbd659b1321f87cbc26f.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config.getTrustStorePass(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config.getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config.getProfileTaskQueryMaxSize()));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"N"}],"commitId":"5b255ba3e3b50e0e0196b28cdca21dcd5c9c3da2","commitMessage":"@@@Set up more strict code styles and fix existing issues (#4337)\n\nMotivation:\n\nReview code styles with some bots automatically.\n\nModifications:\n\nSet up ReviewDog in GitHub Action to review code style.\n\nAdd more check rules to checkstyle plugin.\n\nResult:\n\nObvious code styles can be reviewed and commented automatically.","date":"2020-02-11 17:10:49","modifiedFileCount":"2429","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-02-16 09:03:30","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":30,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","date":"2020-02-11 17:10:49","endLine":141,"groupId":"143","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5b/468ced6c926fb09e2e5ee456b99857fae1b1db.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"N"},{"authorDate":"2020-02-16 09:03:30","commitOrder":30,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace(), config.isEnablePackedDownsampling())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient,\n                                                            new ElasticsearchStorageTTL()\n            ));\n\n        this.registerServiceImplementation(\n            IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n    }\n","date":"2020-02-16 09:03:30","endLine":164,"groupId":"5821","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/79/f2625d62c9f070de84a880dd14a3d7bcea518d.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getNameSpace(), config.getUser(), config.getPassword());\n\n        this.registerServiceImplementation(IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n            .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient, new ElasticsearchStorageTTL()));\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config\n            .getResultWindowMaxSize()));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config\n            .getResultWindowMaxSize()));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config\n            .getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n            .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n            .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n            .getProfileTaskQueryMaxSize()));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"329f7e150b9cb25624d627497a7a8c620cf92f68","commitMessage":"@@@Support Downsampling Data Packing feature in ES storage implementation (#4364)\n\n* Support day/hour/minute metrics merging into one index. Reduce the number of index 50%.\n\n","date":"2020-02-16 09:03:30","modifiedFileCount":"6","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-02-16 20:48:04","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":31,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","date":"2020-02-11 17:10:49","endLine":141,"groupId":"143","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5b/468ced6c926fb09e2e5ee456b99857fae1b1db.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"N"},{"authorDate":"2020-02-16 20:48:04","commitOrder":31,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n        }\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace(), config.isEnablePackedDownsampling())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient,\n                                                            new ElasticsearchStorageTTL(),\n                                                            config.isEnablePackedDownsampling()\n            ));\n\n        this.registerServiceImplementation(\n            IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n    }\n","date":"2020-02-16 20:48:04","endLine":169,"groupId":"5821","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/64/48a9a81a818fdb1bcb3e151075114e8041e3a7.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace(), config.isEnablePackedDownsampling())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient,\n                                                            new ElasticsearchStorageTTL()\n            ));\n\n        this.registerServiceImplementation(\n            IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"334239388ab57c7884060644716c647073c4876f","commitMessage":"@@@Support Daily Index Step feature in the OAP (#4368)\n\n* Support Daily Index Step.\n\n* Fix format.\n\n* Fix mischanged ES.\n","date":"2020-02-16 20:48:04","modifiedFileCount":"9","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-03-13 20:50:14","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":32,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","date":"2020-02-11 17:10:49","endLine":141,"groupId":"143","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5b/468ced6c926fb09e2e5ee456b99857fae1b1db.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"N"},{"authorDate":"2020-03-13 20:50:14","commitOrder":32,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace(), config.isEnablePackedDownsampling())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient,\n                                                            new ElasticsearchStorageTTL(),\n                                                            config.isEnablePackedDownsampling()\n            ));\n\n        this.registerServiceImplementation(\n            IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n    }\n","date":"2020-03-13 20:50:14","endLine":205,"groupId":"5821","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/af/7c4bb40175c3e926fa9fe3cb58d34425923807.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n        }\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace(), config.isEnablePackedDownsampling())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient,\n                                                            new ElasticsearchStorageTTL(),\n                                                            config.isEnablePackedDownsampling()\n            ));\n\n        this.registerServiceImplementation(\n            IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"e69391a207175d7c22f9b326f0f18e5cdf28bd43","commitMessage":"@@@Support Secrets Management File in the ElasticSearch 6/7 storage (#4493)\n\n* Temp commit\n\n* Support secretsManagementFile file.\n\n* Update doc.\n\n* 1. Support JKS/pass runtime change too.\n2. Follow review.\n\n* Fix format.\n\n* Fix username/password/trustPass haven't been updated in the es client.\n\n* Fix doc issue.\n\nCo-authored-by: Jared Tan <jian.tan@daocloud.io>","date":"2020-03-13 20:50:14","modifiedFileCount":"6","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-03-28 22:51:41","codes":[{"authorDate":"2020-03-28 22:51:41","commitOrder":33,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","date":"2020-03-28 22:51:41","endLine":143,"groupId":"143","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/59/7748f431d12f619d045f26af3cfdf9ed3aaacc.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-03-28 22:51:41","commitOrder":33,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace(), config.isEnablePackedDownsampling())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient,\n                                                            new ElasticsearchStorageTTL(),\n                                                            config.isEnablePackedDownsampling()\n            ));\n\n        this.registerServiceImplementation(\n            IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n    }\n","date":"2020-03-28 22:51:41","endLine":201,"groupId":"5821","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e8/9eb09d046ec20d0566faebbc59ab999fd067d8.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace(), config.isEnablePackedDownsampling())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient,\n                                                            new ElasticsearchStorageTTL(),\n                                                            config.isEnablePackedDownsampling()\n            ));\n\n        this.registerServiceImplementation(\n            IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            IEndpointInventoryCacheDAO.class, new EndpointInventoryCacheEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"4474907fef809e2342b644a324da011834a55420","commitMessage":"@@@[Inventory Design Change] Remove endpoint register and endpoint inventory (#4570)\n\n* Finish step one.  source and entity changed.\n\n* Step 2.  finish the basic and core DAO changes.\n\n* Step 3. Change all source codes of backend.  and make project compiling successfully.\n\n* Make startup successful and persistence works.\n\n* Fix dead codes in the MySQLTableInstaller.\n\n* Fix mischange.\n\n* Fix MySQL storage bootstrap error.\n\n* Rollback dependency change.\n\n* Simply enable tailing logs from container no mater it's in CI or not\n\n* Fix segment table issue.\n\n* Fix MySQL Instanller.\n\n* Support Influxdb implementation of new endpoint traffic.\n\n* Set and modify timeout to 90mins\n\n* Remove unnecessary entity in the EndpointTraffic.\n\n* Fix wrong entity builder and make name more clear.\n\n* Fix 2 equal methods bug.\n\n* Fix InfluxDB identifier(name) conflict issue.\n\n* Fix endpoint topology query.  endpoint id should be changed as a string.\n\n* Fix a missing change.\n\n* Fix a wrong commit.\n\n* Column name can't be changed.  due to it affect the hybrid metadb(h2/mysql) query.  change it explicitly with double quotation marks.\n\n* Fix formats.\n\n* Remove endpoint/operation register from the agent. and change the plugin tests(without local tests). operationId relation codes have been removed from agent too.\n\n* Try to fix the hytrix case.\n\n* Fix 3 cases.\n\n* Try to fix cases.\n\n* Fix 2.\n\n* Fix one.\n\n* Fix the serviceId type mis-change.\n\n* Fix int query\n\n* Fix hystrix case.\n\n* Fix a case.\n\n* Fix EndpointCallRelationDispatcher set the source/dest endpoint without id encoding.\n\n* Update documentation and add 2 test cases.\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>","date":"2020-03-28 22:51:41","modifiedFileCount":"121","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":34,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","date":"2020-04-10 11:03:24","endLine":128,"groupId":"143","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/34/6077818fc5da9019a0e50f8ee559e35b56ed61.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":34,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n    }\n","date":"2020-04-10 11:03:24","endLine":175,"groupId":"1353","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6d/6023f90b9631e07d9838190d8f0b1ec72e7479.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace(), config.isEnablePackedDownsampling())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new RegisterLockDAOImpl(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(getManager(), elasticSearchClient,\n                                                            new ElasticsearchStorageTTL(),\n                                                            config.isEnablePackedDownsampling()\n            ));\n\n        this.registerServiceImplementation(\n            IServiceInventoryCacheDAO.class, new ServiceInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryCacheDAO.class, new ServiceInstanceInventoryCacheDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryCacheDAO.class, new NetworkAddressInventoryCacheEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-06-01 23:06:14","codes":[{"authorDate":"2020-06-01 23:06:14","commitOrder":35,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        this.registerServiceImplementation(\n                INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","date":"2020-06-01 23:06:14","endLine":130,"groupId":"143","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/af/5b6e57a2c47d9d68526c2327f3209ef2ce6abe.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2020-06-01 23:06:14","commitOrder":35,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                    10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n                config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n                .getTrustStorePass(), config.getUser(), config.getPassword(),\n                indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n                IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                        .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n                IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n                INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                        .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n                ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n                IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n                IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                        .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n                IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                        .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n                IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                        .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n                UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","date":"2020-06-01 23:06:14","endLine":180,"groupId":"1353","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9f/591cbc8a2f4fe19de84eb7bcbe61c21d7d0f27.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"d094a0f7c0b4a2cf0de38735128b5c07181e30d2","commitMessage":"@@@Support UI template management. (#4843)\n\n","date":"2020-06-01 23:06:14","modifiedFileCount":"32","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-08-10 14:49:11","codes":[{"authorDate":"2020-06-01 23:06:14","commitOrder":36,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        this.registerServiceImplementation(\n                INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","date":"2020-06-01 23:06:14","endLine":130,"groupId":"143","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/af/5b6e57a2c47d9d68526c2327f3209ef2ce6abe.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        this.registerServiceImplementation(\n                INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"N"},{"authorDate":"2020-08-10 14:49:11","commitOrder":36,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","date":"2020-08-10 14:49:11","endLine":188,"groupId":"1353","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/03/0b965ac66eb6ab6084a4a7b81897e9d8575815.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                    10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n                config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n                .getTrustStorePass(), config.getUser(), config.getPassword(),\n                indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n                IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                        .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n                IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n                INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                        .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n                ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n                IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n                IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                        .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n                IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                        .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n                IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                        .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n                UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"}],"commitId":"2df3c683baede7a0b7f24885ce1bbe48b13c7dac","commitMessage":"@@@Super Size Dataset record index  es rolling step (#5282)\n\n","date":"2020-08-10 14:49:11","modifiedFileCount":"5","status":"M","submitter":"Evan"},{"authorTime":"2020-08-10 14:49:11","codes":[{"authorDate":"2020-08-11 07:24:40","commitOrder":37,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","date":"2020-08-11 07:24:40","endLine":146,"groupId":"143","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/82/db55355da961e76002418cb65d748983d29968.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        this.registerServiceImplementation(\n                INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2020-08-10 14:49:11","commitOrder":37,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","date":"2020-08-10 14:49:11","endLine":188,"groupId":"1353","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/03/0b965ac66eb6ab6084a4a7b81897e9d8575815.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"N"}],"commitId":"7f7e96b088d3cb0a19f8ddeafe5ede9764ec2eda","commitMessage":"@@@[IMPORTANT] Query traces with tags as condition (#5270)\n\n","date":"2020-08-11 07:24:40","modifiedFileCount":"39","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-08-31 15:46:37","codes":[{"authorDate":"2020-08-31 15:46:37","commitOrder":38,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","date":"2020-08-31 15:46:37","endLine":149,"groupId":"143","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b6/f82ce8153a35470777082e049e6cac2aaf97a6.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-08-31 15:46:37","commitOrder":38,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","date":"2020-08-31 15:46:37","endLine":191,"groupId":"1353","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/55/15e3d78102a913a09bb08f260c7f3d610566db.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"7ef8b3e476001154ba5d600f7206add0277d4d24","commitMessage":"@@@Support Browser protocol at OAP (#4228)\n\n","date":"2020-08-31 15:46:37","modifiedFileCount":"24","status":"M","submitter":"zhang-wei"},{"authorTime":"2020-10-21 12:23:32","codes":[{"authorDate":"2020-08-31 15:46:37","commitOrder":39,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","date":"2020-08-31 15:46:37","endLine":149,"groupId":"143","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b6/f82ce8153a35470777082e049e6cac2aaf97a6.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"N"},{"authorDate":"2020-10-21 12:23:32","commitOrder":39,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","date":"2020-10-21 12:23:32","endLine":191,"groupId":"2806","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/58/67bae80c62bffb342ac18fa8ee075f4992f870.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"287b8b9be5cef8f49205f34bafef694284022645","commitMessage":"@@@Add syncBulkActions config to avoid the large amount of metrics data written ES in a single sync bulk request. (#5699)\n\n","date":"2020-10-21 12:23:32","modifiedFileCount":"4","status":"M","submitter":"Ax1an"},{"authorTime":"2020-10-21 12:23:32","codes":[{"authorDate":"2021-01-14 09:49:11","commitOrder":40,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","date":"2021-01-14 09:49:11","endLine":157,"groupId":"143","id":65,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e4/c281a8be971f396a72542024ff0d9a767a678d.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-10-21 12:23:32","commitOrder":40,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","date":"2020-10-21 12:23:32","endLine":191,"groupId":"2806","id":66,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/58/67bae80c62bffb342ac18fa8ee075f4992f870.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"N"}],"commitId":"15452025c65dd6934bd9d6c8a930961b0f960594","commitMessage":"@@@Log collecting and query implementation (#6120)\n\n","date":"2021-01-14 09:49:11","modifiedFileCount":"51","status":"M","submitter":"zhang-wei"},{"authorTime":"2021-02-05 18:37:18","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":41,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","date":"2021-02-05 18:37:18","endLine":161,"groupId":"143","id":67,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/63/fa518d10061ba816f74db293e07bc02648280a.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2021-02-05 18:37:18","commitOrder":41,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-02-05 18:37:18","endLine":195,"groupId":"2806","id":68,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b7/72e575a941db3302c7235b8d1e5dae0e331d62.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"b92eac2cd6bf8774860b921ea04bafd59550a607","commitMessage":"@@@Add a new concept \"Event\" and its implementations to collect events (#6183)\n\n","date":"2021-02-05 18:37:18","modifiedFileCount":"15","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-02-07 10:37:14","codes":[{"authorDate":"2021-02-07 10:37:14","commitOrder":42,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","date":"2021-02-07 10:37:14","endLine":164,"groupId":"143","id":69,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/98/c0612e50e20d005abe0ab7c9f3ff7148fb3c20.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2021-02-07 10:37:14","commitOrder":42,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-02-07 10:37:14","endLine":198,"groupId":"2806","id":70,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9a/3f6ae275461a5cf73c79f3edb085ca4dd210de.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"5e8f1eb5528911f924ffca451af20dcdf6151971","commitMessage":"@@@Support multiple implementations of StorageBuilder in different storage implementations - stage 2 (#6336)\n\n","date":"2021-02-07 10:37:14","modifiedFileCount":"16","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-03-11 15:11:37","codes":[{"authorDate":"2021-02-07 10:37:14","commitOrder":43,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","date":"2021-02-07 10:37:14","endLine":164,"groupId":"143","id":71,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/98/c0612e50e20d005abe0ab7c9f3ff7148fb3c20.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"},{"authorDate":"2021-03-11 15:11:37","commitOrder":43,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-03-11 15:11:37","endLine":203,"groupId":"2806","id":72,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c8/875a0cb2644c560b9806fe2938934af5ee2468.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"fd1d21021f8f3abd66f957ff8484a0e2c29ceb36","commitMessage":"@@@[Incompatible Enhancement]New index policy of ElasticSearch storage option (#6499)\n\n","date":"2021-03-11 15:11:37","modifiedFileCount":"39","status":"M","submitter":"Evan"},{"authorTime":"2021-04-02 11:33:46","codes":[{"authorDate":"2021-02-07 10:37:14","commitOrder":44,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","date":"2021-02-07 10:37:14","endLine":164,"groupId":"143","id":73,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/98/c0612e50e20d005abe0ab7c9f3ff7148fb3c20.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"},{"authorDate":"2021-04-02 11:33:46","commitOrder":44,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(),  config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-04-02 11:33:46","endLine":203,"groupId":"1353","id":74,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5b/8019f457a656424c39c1106db32e16369882b3.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"2af77d4d039d23e64ae92303a46c6c3f9c4c861d","commitMessage":"@@@make sync metrics concurrency (#6642)\n\n* make sync metrics concurrency\n\n* add changelog\n\n* add changelog\n\n* polish codes\n\n* change default value\n\n* remove unnecessary codes\n\nCo-authored-by: Evan <evanljp@outlook.com>\nCo-authored-by: Zhenxu Ke <kezhenxu94@apache.org>\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>","date":"2021-04-02 11:33:46","modifiedFileCount":"6","status":"M","submitter":"Evan"},{"authorTime":"2021-04-02 11:33:46","codes":[{"authorDate":"2021-04-25 17:22:43","commitOrder":45,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n        ));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","date":"2021-04-25 17:22:43","endLine":169,"groupId":"5208","id":75,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b0/74566ff8a6db319942075d59ac3ac78546724c.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2021-04-02 11:33:46","commitOrder":45,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(),  config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-04-02 11:33:46","endLine":203,"groupId":"1353","id":76,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5b/8019f457a656424c39c1106db32e16369882b3.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(),  config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"}],"commitId":"7a533313676579da1321c0177c10fc237a052cbe","commitMessage":"@@@Support alarm tags (#6820)\n\n","date":"2021-04-25 17:22:43","modifiedFileCount":"42","status":"M","submitter":"liqiangz"},{"authorTime":"2021-07-01 08:20:59","codes":[{"authorDate":"2021-04-25 17:22:43","commitOrder":46,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n        ));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","date":"2021-04-25 17:22:43","endLine":169,"groupId":"5208","id":77,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b0/74566ff8a6db319942075d59ac3ac78546724c.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n        ));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"},{"authorDate":"2021-07-01 08:20:59","commitOrder":46,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace()), config.getConnectTimeout(), config.getSocketTimeout()\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-07-01 08:20:59","endLine":203,"groupId":"4175","id":78,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ce/76619b97c023604cd2de9fb0df071f6e389dfc.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(),  config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"536b7d2328e836b3ba82347aa9a907d4944ece6b","commitMessage":"@@@Support connectTimeout and socketTimeout settings (#7214)\n\n","date":"2021-07-01 08:20:59","modifiedFileCount":"6","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-09-06 15:21:35","codes":[{"authorDate":"2021-04-25 17:22:43","commitOrder":47,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n        ));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","date":"2021-04-25 17:22:43","endLine":169,"groupId":"5208","id":79,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b0/74566ff8a6db319942075d59ac3ac78546724c.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n        ));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"},{"authorDate":"2021-09-06 15:21:35","commitOrder":47,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverter(config.getNameSpace()), config.getConnectTimeout(),\n            config.getSocketTimeout(), config.getNumHttpClientThread()\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-09-06 15:21:35","endLine":196,"groupId":"4175","id":80,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/88/b863598747fc41607b929303c7cd64b90d434a.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace()), config.getConnectTimeout(), config.getSocketTimeout()\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"26b81a2e5991ecdd2bde0f7071264cb80bb235cf","commitMessage":"@@@Rebuilt ElasticSearch client on top of their REST API (#7634)\n\n","date":"2021-09-06 15:21:35","modifiedFileCount":"60","status":"M","submitter":"kezhenxu94"},{"authorTime":"2021-09-08 12:00:19","codes":[{"authorDate":"2021-04-25 17:22:43","commitOrder":48,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n        ));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","date":"2021-04-25 17:22:43","endLine":169,"groupId":"5208","id":81,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b0/74566ff8a6db319942075d59ac3ac78546724c.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n        ));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"},{"authorDate":"2021-09-08 12:00:19","commitOrder":48,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNamespace())) {\n            config.setNamespace(\"sw\");\n        } else {\n            config.setNamespace(config.getNamespace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverter(config.getNamespace()), config.getConnectTimeout(),\n            config.getSocketTimeout(), config.getNumHttpClientThread()\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-09-08 12:00:19","endLine":196,"groupId":"4175","id":82,"instanceNumber":2,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b7/1246e7df4b372aca3232d6a5800f44bdf9c034.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverter(config.getNameSpace()), config.getConnectTimeout(),\n            config.getSocketTimeout(), config.getNumHttpClientThread()\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"4a344b01e9ad103b1cfda3e56d774dd4778c77de","commitMessage":"@@@Unified the config word `namespace` in the project (#7676)\n\n","date":"2021-09-08 12:00:19","modifiedFileCount":"12","status":"M","submitter":"wankai123"},{"authorTime":"2021-09-08 12:00:19","codes":[{"authorDate":"2021-09-17 00:05:18","commitOrder":49,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client, config.getMaxSizeOfBatchSql(), config.getAsyncBatchPersistentPoolSize()));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n        ));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","date":"2021-09-17 00:05:18","endLine":169,"groupId":"10831","id":83,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1a/93880c517c8e81f5c7f044a9329ae1adc66ca5.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n        ));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2021-09-08 12:00:19","commitOrder":49,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNamespace())) {\n            config.setNamespace(\"sw\");\n        } else {\n            config.setNamespace(config.getNamespace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverter(config.getNamespace()), config.getConnectTimeout(),\n            config.getSocketTimeout(), config.getNumHttpClientThread()\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-09-08 12:00:19","endLine":196,"groupId":"10831","id":84,"instanceNumber":2,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b7/1246e7df4b372aca3232d6a5800f44bdf9c034.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNamespace())) {\n            config.setNamespace(\"sw\");\n        } else {\n            config.setNamespace(config.getNamespace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverter(config.getNamespace()), config.getConnectTimeout(),\n            config.getSocketTimeout(), config.getNumHttpClientThread()\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"}],"commitId":"224b6c6b3a7f72ef02d4dca5f73b32c76767d08e","commitMessage":"@@@Improve the speed of writing TiDB by batching the SQL execution (#7691)\n\n","date":"2021-09-17 00:05:18","modifiedFileCount":"10","status":"M","submitter":"nicolchen"}]
