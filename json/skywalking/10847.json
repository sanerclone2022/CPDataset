[{"authorTime":"2018-09-23 12:42:46","codes":[{"authorDate":"2018-09-23 12:42:46","commitOrder":2,"curCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(100);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","date":"2018-09-23 12:42:46","endLine":106,"groupId":"3402","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllServices","params":"(longstartTimestamp@longendTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/e37f3cfb76e2f81fb1148879194ed37e1e3f35.src","preCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(100);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"MB"},{"authorDate":"2018-09-23 12:42:46","commitOrder":2,"curCode":"    @Override public List<Service> searchServices(long startTimestamp, long endTimestamp,\n        String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n        boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(100);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","date":"2018-09-23 12:42:46","endLine":123,"groupId":"2052","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"searchServices","params":"(longstartTimestamp@longendTimestamp@Stringkeyword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/e37f3cfb76e2f81fb1148879194ed37e1e3f35.src","preCode":"    @Override public List<Service> searchServices(long startTimestamp, long endTimestamp,\n        String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n        boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(100);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"}],"commitId":"e83e175a42ab84f51b7d94030d3384d399be7ca4","commitMessage":"@@@Meta data query implementation are all finished. (#1692)\n\n","date":"2018-09-23 12:42:46","modifiedFileCount":"14","status":"M","submitter":"??? pengys"},{"authorTime":"2018-10-17 22:44:21","codes":[{"authorDate":"2018-09-23 12:42:46","commitOrder":3,"curCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(100);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","date":"2018-09-23 12:42:46","endLine":106,"groupId":"3402","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllServices","params":"(longstartTimestamp@longendTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/e37f3cfb76e2f81fb1148879194ed37e1e3f35.src","preCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(100);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"},{"authorDate":"2018-10-17 22:44:21","commitOrder":3,"curCode":"    @Override public List<Service> searchServices(long startTimestamp, long endTimestamp,\n        String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        if (StringUtils.isNotEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(100);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","date":"2018-10-17 22:44:21","endLine":126,"groupId":"3404","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"searchServices","params":"(longstartTimestamp@longendTimestamp@Stringkeyword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d0/058e2dccea5156a49f057a574131f8675872fb.src","preCode":"    @Override public List<Service> searchServices(long startTimestamp, long endTimestamp,\n        String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n        boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(100);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"406339798849e96b593b8262d8544b194d78c1df","commitMessage":"@@@Trigger service heartbeat when received service instance heartbeat. (#1785)\n\nFixed some meta query bugs.","date":"2018-10-17 22:44:21","modifiedFileCount":"5","status":"M","submitter":"??? pengys"},{"authorTime":"2018-12-13 00:14:41","codes":[{"authorDate":"2018-09-23 12:42:46","commitOrder":4,"curCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(100);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","date":"2018-09-23 12:42:46","endLine":106,"groupId":"3402","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllServices","params":"(longstartTimestamp@longendTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/e37f3cfb76e2f81fb1148879194ed37e1e3f35.src","preCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(100);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"},{"authorDate":"2018-12-13 00:14:41","commitOrder":4,"curCode":"    @Override public List<Service> searchServices(long startTimestamp, long endTimestamp,\n        String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(100);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","date":"2018-12-13 00:14:41","endLine":121,"groupId":"2814","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"searchServices","params":"(longstartTimestamp@longendTimestamp@Stringkeyword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f4/a296cb868114dc4a009a772702d1f5ee10ea0e.src","preCode":"    @Override public List<Service> searchServices(long startTimestamp, long endTimestamp,\n        String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        if (StringUtils.isNotEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(100);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"dfe2b08599d37f4f6fb0fdd53763565c9918ca2c","commitMessage":"@@@[OAP Server][Cluster Plugin] Provide consul cluster plugin (#2036)\n\n* Provide consul cluster plugin.\n\n* Change log and application config file.\n\n* Add consul's config item into the docker's application.yml.\n\n* Fixed bug.\n\n* Add consul description into  readme.\n\n* Add okhttp component license.\n","date":"2018-12-13 00:14:41","modifiedFileCount":"25","status":"M","submitter":"??? pengys"},{"authorTime":"2019-04-17 19:25:46","codes":[{"authorDate":"2019-04-17 19:25:46","commitOrder":5,"curCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","date":"2019-04-17 19:25:46","endLine":128,"groupId":"3402","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllServices","params":"(longstartTimestamp@longendTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ca/f4f29bf9d745ab02928be087d399d7dfd37792.src","preCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(100);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2019-04-17 19:25:46","commitOrder":5,"curCode":"    @Override public List<Service> searchServices(long startTimestamp, long endTimestamp,\n        String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","date":"2019-04-17 19:25:46","endLine":180,"groupId":"2814","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"searchServices","params":"(longstartTimestamp@longendTimestamp@Stringkeyword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ca/f4f29bf9d745ab02928be087d399d7dfd37792.src","preCode":"    @Override public List<Service> searchServices(long startTimestamp, long endTimestamp,\n        String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(100);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"0b2e355b52cd5f3735d113720af73b3de244d2b8","commitMessage":"@@@extend Metadata limit (#2492)\n\n* fix default MetadataQuery Max size.\n\n* revert mysql\n","date":"2019-04-17 19:25:46","modifiedFileCount":"7","status":"M","submitter":"Jared Tan"},{"authorTime":"2019-05-15 22:42:38","codes":[{"authorDate":"2019-05-15 22:42:38","commitOrder":6,"curCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","date":"2019-05-15 22:42:38","endLine":128,"groupId":"3402","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllServices","params":"(longstartTimestamp@longendTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6c/06f3ac104f4261bb1406c08124cf3fb07e88bc.src","preCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2019-05-15 22:42:38","commitOrder":6,"curCode":"    @Override public List<Service> searchServices(long startTimestamp, long endTimestamp,\n        String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","date":"2019-05-15 22:42:38","endLine":180,"groupId":"2814","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"searchServices","params":"(longstartTimestamp@longendTimestamp@Stringkeyword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6c/06f3ac104f4261bb1406c08124cf3fb07e88bc.src","preCode":"    @Override public List<Service> searchServices(long startTimestamp, long endTimestamp,\n        String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.MODEL_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"63fb961c0d1de02f053045c3bf80361ebd7bd58d","commitMessage":"@@@New OAP annotations.  they are friendly for streaming loader. (#2670)\n\n* New stream annotation.\n- Inventory annotation example:\n@Stream(name = ServiceInventory.INDEX_NAME.  scopeId = DefaultScopeDefine.SERVICE_INVENTORY.  storage = @Storage(builder = ServiceInventory.Builder.class.  deleteHistory = false).  kind = StreamKind.Inventory)\n\n- Metrics annotation example:\n@Stream(name = ServiceRelationClientSideMetrics.INDEX_NAME.  scopeId = DefaultScopeDefine.SERVICE_RELATION.  storage = @Storage(builder = ServiceRelationClientSideMetrics.Builder.class).  kind = StreamKind.Metrics)\n\n- Record annotation example:\n@Stream(name = SegmentRecord.INDEX_NAME.  scopeId = DefaultScopeDefine.SEGMENT.  storage = @Storage(builder = SegmentRecord.Builder.class).  kind = StreamKind.Record)\n\n- TopN annotation example:\n@Stream(name = TopNDatabaseStatement.INDEX_NAME.  scopeId = DefaultScopeDefine.DATABASE_SLOW_STATEMENT.  storage = @Storage(builder = TopNDatabaseStatement.Builder.class).  kind = StreamKind.TopN)\n\n* no message\n\n* Stream annotation finish.\n\n* Make stream processors to be the singleton class.\n\n* Fixed the compile errors.\n\n* Modify the OAL module for this annotation refactor.\n\n* Add apache license header.\n\n* Duplicate import.\n\n* Fixed check style error.\n","date":"2019-05-15 22:42:38","modifiedFileCount":"55","status":"M","submitter":"??? pengys"},{"authorTime":"2020-01-01 18:01:41","codes":[{"authorDate":"2020-01-01 18:01:41","commitOrder":7,"curCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.NODE_TYPE, NodeType.Normal.value()));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","date":"2020-01-01 18:01:41","endLine":130,"groupId":"308","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllServices","params":"(longstartTimestamp@longendTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/91/40959f9a7f32bf61425745bf5a5aba174f383a.src","preCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2020-01-01 18:01:41","commitOrder":7,"curCode":"    @Override public List<Service> searchServices(long startTimestamp, long endTimestamp,\n        String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.NODE_TYPE, NodeType.Normal.value()));\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","date":"2020-01-01 18:01:41","endLine":201,"groupId":"3404","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"searchServices","params":"(longstartTimestamp@longendTimestamp@Stringkeyword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/91/40959f9a7f32bf61425745bf5a5aba174f383a.src","preCode":"    @Override public List<Service> searchServices(long startTimestamp, long endTimestamp,\n        String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"}],"commitId":"6c20f4a41bf9c56f0e3916061c286c23bcccdc62","commitMessage":"@@@Add service type from register and support browser as service type (#4157)\n\n* Add service type from register and support browser as service type\n\n* Add service type at agent side.\n\n* Fix format.\n\n* Fix a test.\n\n* Fix formats.\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>\n","date":"2020-01-01 18:01:41","modifiedFileCount":"13","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-01-01 18:01:41","commitOrder":8,"curCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.NODE_TYPE, NodeType.Normal.value()));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","date":"2020-01-01 18:01:41","endLine":130,"groupId":"308","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllServices","params":"(longstartTimestamp@longendTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/91/40959f9a7f32bf61425745bf5a5aba174f383a.src","preCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.NODE_TYPE, NodeType.Normal.value()));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"},{"authorDate":"2020-02-11 17:10:49","commitOrder":8,"curCode":"    public List<Service> searchServices(long startTimestamp, long endTimestamp, String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.NODE_TYPE, NodeType.Normal.value()));\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","date":"2020-02-11 17:10:49","endLine":201,"groupId":"3404","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"searchServices","params":"(longstartTimestamp@longendTimestamp@Stringkeyword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8e/2369423a45ca00727db0f5fdd2c66366028dd8.src","preCode":"    @Override public List<Service> searchServices(long startTimestamp, long endTimestamp,\n        String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.NODE_TYPE, NodeType.Normal.value()));\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"5b255ba3e3b50e0e0196b28cdca21dcd5c9c3da2","commitMessage":"@@@Set up more strict code styles and fix existing issues (#4337)\n\nMotivation:\n\nReview code styles with some bots automatically.\n\nModifications:\n\nSet up ReviewDog in GitHub Action to review code style.\n\nAdd more check rules to checkstyle plugin.\n\nResult:\n\nObvious code styles can be reviewed and commented automatically.","date":"2020-02-11 17:10:49","modifiedFileCount":"2429","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":9,"curCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceTraffic.INDEX_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","date":"2020-04-10 11:03:24","endLine":119,"groupId":"3581","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllServices","params":"(longstartTimestamp@longendTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6b/d9c160ca721b1a3305b6e13823c02d8add34c9.src","preCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.NODE_TYPE, NodeType.Normal.value()));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":9,"curCode":"    public List<Service> searchServices(long startTimestamp, long endTimestamp, String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceTraffic.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceTraffic.INDEX_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","date":"2020-04-10 11:03:24","endLine":175,"groupId":"6240","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"searchServices","params":"(longstartTimestamp@longendTimestamp@Stringkeyword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6b/d9c160ca721b1a3305b6e13823c02d8add34c9.src","preCode":"    public List<Service> searchServices(long startTimestamp, long endTimestamp, String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(timeRangeQueryBuild(startTimestamp, endTimestamp));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.IS_ADDRESS, BooleanUtils.FALSE));\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceInventory.NODE_TYPE, NodeType.Normal.value()));\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceInventory.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceInventory.INDEX_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-05-25 22:17:10","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":10,"curCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceTraffic.INDEX_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","date":"2020-04-10 11:03:24","endLine":119,"groupId":"3581","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllServices","params":"(longstartTimestamp@longendTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6b/d9c160ca721b1a3305b6e13823c02d8add34c9.src","preCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceTraffic.INDEX_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"N"},{"authorDate":"2020-05-25 22:17:10","commitOrder":10,"curCode":"    public List<Service> searchServices(long startTimestamp, long endTimestamp, String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceTraffic.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceTraffic.INDEX_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","date":"2020-05-25 22:17:10","endLine":131,"groupId":"6240","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"searchServices","params":"(longstartTimestamp@longendTimestamp@Stringkeyword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ea/fece24b267f2026b60a2e9729d3cc5e585a360.src","preCode":"    public List<Service> searchServices(long startTimestamp, long endTimestamp, String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceTraffic.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceTraffic.INDEX_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"ec175f5655512757fd5c31756b5757169264b14f","commitMessage":"@@@Miss the node type condition in the es searchServices query. (#4821)\n\n","date":"2020-05-25 22:17:10","modifiedFileCount":"1","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-11-17 22:45:32","codes":[{"authorDate":"2020-11-17 22:45:32","commitOrder":11,"curCode":"    public List<Service> getAllServices(final String group) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n        if (StringUtil.isNotEmpty(group)) {\n            boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.GROUP, group));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceTraffic.INDEX_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","date":"2020-11-17 22:45:32","endLine":76,"groupId":"3579","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllServices","params":"(finalStringgroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c0/44818fca1b946fa8b8c0b9d353b78559b7e590.src","preCode":"    public List<Service> getAllServices(long startTimestamp, long endTimestamp) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceTraffic.INDEX_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-11-17 22:45:32","commitOrder":11,"curCode":"    public List<Service> searchServices(String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceTraffic.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceTraffic.INDEX_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","date":"2020-11-17 22:45:32","endLine":133,"groupId":"6240","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"searchServices","params":"(Stringkeyword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c0/44818fca1b946fa8b8c0b9d353b78559b7e590.src","preCode":"    public List<Service> searchServices(long startTimestamp, long endTimestamp, String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceTraffic.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceTraffic.INDEX_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"c9202af1ee4f48acaa20814788da8b224bfcfe0d","commitMessage":"@@@Support group in the service traffic and service list query. (#5851)\n\n* Support group in the service traffic and service list query.\n","date":"2020-11-17 22:45:32","modifiedFileCount":"11","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-03-11 15:11:37","codes":[{"authorDate":"2021-03-11 15:11:37","commitOrder":12,"curCode":"    public List<Service> getAllServices(final String group) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n        if (StringUtil.isNotEmpty(group)) {\n            boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.GROUP, group));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient()\n            .search(IndexController.LogicIndicesRegister.getPhysicalTableName(ServiceTraffic.INDEX_NAME), sourceBuilder);\n\n        return buildServices(response);\n    }\n","date":"2021-03-11 15:11:37","endLine":78,"groupId":"3579","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"getAllServices","params":"(finalStringgroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/84/64d3b2bd2c9a0a2504ca6878ae99f27cbc3de4.src","preCode":"    public List<Service> getAllServices(final String group) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n        if (StringUtil.isNotEmpty(group)) {\n            boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.GROUP, group));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceTraffic.INDEX_NAME, sourceBuilder);\n\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2021-03-11 15:11:37","commitOrder":12,"curCode":"    public List<Service> searchServices(String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceTraffic.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient()\n            .search(IndexController.LogicIndicesRegister.getPhysicalTableName(ServiceTraffic.INDEX_NAME), sourceBuilder);\n        return buildServices(response);\n    }\n","date":"2021-03-11 15:11:37","endLine":138,"groupId":"6240","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"searchServices","params":"(Stringkeyword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/84/64d3b2bd2c9a0a2504ca6878ae99f27cbc3de4.src","preCode":"    public List<Service> searchServices(String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceTraffic.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient().search(ServiceTraffic.INDEX_NAME, sourceBuilder);\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"fd1d21021f8f3abd66f957ff8484a0e2c29ceb36","commitMessage":"@@@[Incompatible Enhancement]New index policy of ElasticSearch storage option (#6499)\n\n","date":"2021-03-11 15:11:37","modifiedFileCount":"39","status":"M","submitter":"Evan"},{"authorTime":"2021-09-06 15:21:35","codes":[{"authorDate":"2021-09-06 15:21:35","commitOrder":13,"curCode":"    public List<Service> getAllServices(final String group) throws IOException {\n        final String index =\n            IndexController.LogicIndicesRegister.getPhysicalTableName(ServiceTraffic.INDEX_NAME);\n\n        final BoolQueryBuilder query =\n            Query.bool()\n                 .must(Query.term(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n        final SearchBuilder search = Search.builder().query(query).size(queryMaxSize);\n        if (StringUtil.isNotEmpty(group)) {\n            query.must(Query.term(ServiceTraffic.GROUP, group));\n        }\n        final SearchResponse results = getClient().search(index, search.build());\n\n        return buildServices(results);\n    }\n","date":"2021-09-06 15:21:35","endLine":78,"groupId":"10847","id":23,"instanceNumber":1,"isCurCommit":1,"methodName":"getAllServices","params":"(finalStringgroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b3/4e971712b353c8488f90b356ba1f5235c65047.src","preCode":"    public List<Service> getAllServices(final String group) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n        if (StringUtil.isNotEmpty(group)) {\n            boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.GROUP, group));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient()\n            .search(IndexController.LogicIndicesRegister.getPhysicalTableName(ServiceTraffic.INDEX_NAME), sourceBuilder);\n\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2021-09-06 15:21:35","commitOrder":13,"curCode":"    public List<Service> searchServices(String keyword) throws IOException {\n        final String index =\n            IndexController.LogicIndicesRegister.getPhysicalTableName(ServiceTraffic.INDEX_NAME);\n\n        final BoolQueryBuilder query =\n            Query.bool()\n                 .must(Query.term(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n        final SearchBuilder search = Search.builder().query(query).size(queryMaxSize);\n\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceTraffic.NAME);\n            query.must(Query.match(matchCName, keyword));\n        }\n\n        SearchResponse response = getClient().search(index, search.build());\n        return buildServices(response);\n    }\n","date":"2021-09-06 15:21:35","endLine":128,"groupId":"10847","id":24,"instanceNumber":2,"isCurCommit":1,"methodName":"searchServices","params":"(Stringkeyword)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b3/4e971712b353c8488f90b356ba1f5235c65047.src","preCode":"    public List<Service> searchServices(String keyword) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n\n        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\n        boolQueryBuilder.must().add(QueryBuilders.termQuery(ServiceTraffic.NODE_TYPE, NodeType.Normal.value()));\n        if (!Strings.isNullOrEmpty(keyword)) {\n            String matchCName = MatchCNameBuilder.INSTANCE.build(ServiceTraffic.NAME);\n            boolQueryBuilder.must().add(QueryBuilders.matchQuery(matchCName, keyword));\n        }\n\n        sourceBuilder.query(boolQueryBuilder);\n        sourceBuilder.size(queryMaxSize);\n\n        SearchResponse response = getClient()\n            .search(IndexController.LogicIndicesRegister.getPhysicalTableName(ServiceTraffic.INDEX_NAME), sourceBuilder);\n        return buildServices(response);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetadataQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"26b81a2e5991ecdd2bde0f7071264cb80bb235cf","commitMessage":"@@@Rebuilt ElasticSearch client on top of their REST API (#7634)\n\n","date":"2021-09-06 15:21:35","modifiedFileCount":"60","status":"M","submitter":"kezhenxu94"}]
