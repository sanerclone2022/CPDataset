[{"authorTime":"2018-10-28 10:31:58","codes":[{"authorDate":"2018-10-28 10:31:58","commitOrder":1,"curCode":"    protected SQLExecutor getInsertExecutor(String modelName, StorageData indicator,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(indicator);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"INSERT INTO \" + modelName + \" VALUES\");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        sqlBuilder.append(\"(?,\");\n        param.add(indicator.id());\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(\"?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataType) {\n                param.add(((StorageDataType)value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\")\");\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","date":"2018-10-28 10:31:58","endLine":141,"groupId":"5865","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getInsertExecutor","params":"(StringmodelName@StorageDataindicator@StorageBuilderstorageBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/53/729d6a43c3afb45fb9e33772aeee0043cd785a.src","preCode":"    protected SQLExecutor getInsertExecutor(String modelName, StorageData indicator,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(indicator);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"INSERT INTO \" + modelName + \" VALUES\");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        sqlBuilder.append(\"(?,\");\n        param.add(indicator.id());\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(\"?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataType) {\n                param.add(((StorageDataType)value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\")\");\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"},{"authorDate":"2018-10-28 10:31:58","commitOrder":1,"curCode":"    protected SQLExecutor getUpdateExecutor(String modelName, StorageData indicator,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(indicator);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"UPDATE \" + modelName + \" SET \");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(column.getColumnName().getName() + \"= ?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataType) {\n                param.add(((StorageDataType)value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\" WHERE id = ?\");\n        param.add(indicator.id());\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","date":"2018-10-28 10:31:58","endLine":168,"groupId":"3153","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getUpdateExecutor","params":"(StringmodelName@StorageDataindicator@StorageBuilderstorageBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/53/729d6a43c3afb45fb9e33772aeee0043cd785a.src","preCode":"    protected SQLExecutor getUpdateExecutor(String modelName, StorageData indicator,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(indicator);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"UPDATE \" + modelName + \" SET \");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(column.getColumnName().getName() + \"= ?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataType) {\n                param.add(((StorageDataType)value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\" WHERE id = ?\");\n        param.add(indicator.id());\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"B"}],"commitId":"a9489b706739d9ca994997ac071013c9e4afd0ce","commitMessage":"@@@H2 storage (#1712)\n\n* H2 storage code skeleton.\n\n* Add batch dao for H2.\n\n* Fix wrong refactor.\n\n* Add codes of other dao. No metric dao.  wait for @peng-yongsheng new PR.\n\n* Change license of distribution\n\n* Add topology query in H2.\n\n* Add more daos.\n\n* Add some daos.\n\n* Commit all H2 daos. Wait @peng-yongsheng to submit new IAggregationQueryDAO interface.\n\n* Fix some CIs\n\n* Fix wrong refactor.  which causes h2 plugin failure.\n\n* Fix all codes of H2 storage. :) and CI should pass. No test.\n\n* Fix CI and typo\n\n* Fix connection closed.\n\n* Fix register bug\n\n* no message\n\n* Fixed service inventory register bug.\n\n* Fix a compile issue.\n\n* Sync change\n\n* Reset es as default storage.\n\n* Fix rat\n\n* Fix H2 compile issue.\n\n* Fix bugs for H2 storage.\n\n* Fix bug in mesh.\n\n* 1. Fix Thermodynamic query bug\n2. Fix service inventory query bug\n3. Fix missing traceid in trace query bug\n\n* Fix query bug.\n\n* Submit reverse caused by prev PR.\n\n* Fix duplicate spans.\n\n* Use H2 as default storage implementor.\n\n* Fix bug in topology query.\n\n* Fix CI\n\n* Fix rat\n\n* Fix two query in H2 storage.\n\n* Fix H2 query\n\n* Make release running in H2 mode and develop mode running is ES mode in default\n","date":"2018-10-28 10:31:58","modifiedFileCount":"17","status":"B","submitter":"?? Wu Sheng"},{"authorTime":"2018-11-28 22:59:02","codes":[{"authorDate":"2018-10-28 10:31:58","commitOrder":2,"curCode":"    protected SQLExecutor getInsertExecutor(String modelName, StorageData indicator,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(indicator);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"INSERT INTO \" + modelName + \" VALUES\");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        sqlBuilder.append(\"(?,\");\n        param.add(indicator.id());\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(\"?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataType) {\n                param.add(((StorageDataType)value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\")\");\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","date":"2018-10-28 10:31:58","endLine":141,"groupId":"5865","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getInsertExecutor","params":"(StringmodelName@StorageDataindicator@StorageBuilderstorageBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/53/729d6a43c3afb45fb9e33772aeee0043cd785a.src","preCode":"    protected SQLExecutor getInsertExecutor(String modelName, StorageData indicator,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(indicator);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"INSERT INTO \" + modelName + \" VALUES\");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        sqlBuilder.append(\"(?,\");\n        param.add(indicator.id());\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(\"?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataType) {\n                param.add(((StorageDataType)value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\")\");\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"},{"authorDate":"2018-11-28 22:59:02","commitOrder":2,"curCode":"    protected SQLExecutor getUpdateExecutor(String modelName, StorageData indicator,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(indicator);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"UPDATE \" + modelName + \" SET \");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(column.getColumnName().getStorageName() + \"= ?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataType) {\n                param.add(((StorageDataType)value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\" WHERE id = ?\");\n        param.add(indicator.id());\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","date":"2018-11-28 22:59:02","endLine":156,"groupId":"3153","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getUpdateExecutor","params":"(StringmodelName@StorageDataindicator@StorageBuilderstorageBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8c/d2175321db9948757c1a2ddded7dfe90acef32.src","preCode":"    protected SQLExecutor getUpdateExecutor(String modelName, StorageData indicator,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(indicator);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"UPDATE \" + modelName + \" SET \");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(column.getColumnName().getName() + \"= ?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataType) {\n                param.add(((StorageDataType)value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\" WHERE id = ?\");\n        param.add(indicator.id());\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"215eab74288328e13f2c0fecf222168632685ff9","commitMessage":"@@@Mysql style storage implementation (#1964)\n\nAlso fixed several bugs in this merge.","date":"2018-11-28 22:59:02","modifiedFileCount":"33","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-05-10 08:05:37","codes":[{"authorDate":"2019-05-10 08:05:37","commitOrder":3,"curCode":"    protected SQLExecutor getInsertExecutor(String modelName, StorageData metrics,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"INSERT INTO \" + modelName + \" VALUES\");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        sqlBuilder.append(\"(?,\");\n        param.add(metrics.id());\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(\"?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataType) {\n                param.add(((StorageDataType)value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\")\");\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","date":"2019-05-10 08:05:37","endLine":129,"groupId":"3152","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getInsertExecutor","params":"(StringmodelName@StorageDatametrics@StorageBuilderstorageBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/21/d3d3c26f933b31c8b181f375b098931147404a.src","preCode":"    protected SQLExecutor getInsertExecutor(String modelName, StorageData indicator,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(indicator);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"INSERT INTO \" + modelName + \" VALUES\");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        sqlBuilder.append(\"(?,\");\n        param.add(indicator.id());\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(\"?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataType) {\n                param.add(((StorageDataType)value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\")\");\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2019-05-10 08:05:37","commitOrder":3,"curCode":"    protected SQLExecutor getUpdateExecutor(String modelName, StorageData metrics,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"UPDATE \" + modelName + \" SET \");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(column.getColumnName().getStorageName() + \"= ?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataType) {\n                param.add(((StorageDataType)value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\" WHERE id = ?\");\n        param.add(metrics.id());\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","date":"2019-05-10 08:05:37","endLine":156,"groupId":"3153","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getUpdateExecutor","params":"(StringmodelName@StorageDatametrics@StorageBuilderstorageBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/21/d3d3c26f933b31c8b181f375b098931147404a.src","preCode":"    protected SQLExecutor getUpdateExecutor(String modelName, StorageData indicator,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(indicator);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"UPDATE \" + modelName + \" SET \");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(column.getColumnName().getStorageName() + \"= ?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataType) {\n                param.add(((StorageDataType)value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\" WHERE id = ?\");\n        param.add(indicator.id());\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"ed78dabe8b142be3d546d349046768135f0a752a","commitMessage":"@@@Rename metric and indicator to metrics. (#2643)\n\n* Rename metric to metrics.\n\n* Fixed test case execute failure issues.\n","date":"2019-05-10 08:05:37","modifiedFileCount":"102","status":"M","submitter":"??? pengys"},{"authorTime":"2020-03-30 18:56:26","codes":[{"authorDate":"2020-03-30 18:56:26","commitOrder":4,"curCode":"    protected SQLExecutor getInsertExecutor(String modelName, StorageData metrics,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"INSERT INTO \" + modelName + \" VALUES\");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        sqlBuilder.append(\"(?,\");\n        param.add(metrics.id());\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(\"?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataComplexObject) {\n                param.add(((StorageDataComplexObject) value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\")\");\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","date":"2020-03-30 18:56:26","endLine":150,"groupId":"3152","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getInsertExecutor","params":"(StringmodelName@StorageDatametrics@StorageBuilderstorageBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/49/4f17a04b124f21c8add69b3770b49990feb2e1.src","preCode":"    protected SQLExecutor getInsertExecutor(String modelName, StorageData metrics,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"INSERT INTO \" + modelName + \" VALUES\");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        sqlBuilder.append(\"(?,\");\n        param.add(metrics.id());\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(\"?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataType) {\n                param.add(((StorageDataType) value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\")\");\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2020-03-30 18:56:26","commitOrder":4,"curCode":"    protected SQLExecutor getUpdateExecutor(String modelName, StorageData metrics,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"UPDATE \" + modelName + \" SET \");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(column.getColumnName().getStorageName() + \"= ?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataComplexObject) {\n                param.add(((StorageDataComplexObject) value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\" WHERE id = ?\");\n        param.add(metrics.id());\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","date":"2020-03-30 18:56:26","endLine":177,"groupId":"3153","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getUpdateExecutor","params":"(StringmodelName@StorageDatametrics@StorageBuilderstorageBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/49/4f17a04b124f21c8add69b3770b49990feb2e1.src","preCode":"    protected SQLExecutor getUpdateExecutor(String modelName, StorageData metrics,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"UPDATE \" + modelName + \" SET \");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(column.getColumnName().getStorageName() + \"= ?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataType) {\n                param.add(((StorageDataType) value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\" WHERE id = ?\");\n        param.add(metrics.id());\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"e55073e51970ecb50d014094e4e9b8dcc7d8c0d9","commitMessage":"@@@OAP Core polish.  especially storage level (#4587)\n\n- Add length definition with reasonable default value.\n- #content of @Column has been renamed to storageOnly . I add this to many fields as they are not being query in any case.\n- Merge H2 and MySQL columntype mapping back to consistent.\n- Remove @IDColumn.\n- Support @QueryUnifiedIndex.\n- Refactor the MySQL and H2 installers to use @Column and @QueryUnifiedIndex definitions to create indices automatically. But the index naming rule has been changed to entityseqIDX. seq is the Increment Interger for every entity.\n- Support @MetricsExtension and insertOnly in the MetricsPersistentWorker worker.\n- Optimize MetricsStreamProcessor","date":"2020-03-30 18:56:26","modifiedFileCount":"58","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-03-31 00:04:17","codes":[{"authorDate":"2020-03-31 00:04:17","commitOrder":5,"curCode":"    protected <T extends StorageData> SQLExecutor getInsertExecutor(String modelName, T metrics,\n                                                                    StorageBuilder<T> storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"INSERT INTO \" + modelName + \" VALUES\");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        sqlBuilder.append(\"(?,\");\n        param.add(metrics.id());\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(\"?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataComplexObject) {\n                param.add(((StorageDataComplexObject) value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\")\");\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","date":"2020-03-31 00:04:17","endLine":150,"groupId":"3152","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getInsertExecutor","params":"(StringmodelName@Tmetrics@StorageBuilder<T>storageBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bd/26cd33bdd70b9b892fa3a6e4d86f76aed1cfce.src","preCode":"    protected SQLExecutor getInsertExecutor(String modelName, StorageData metrics,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"INSERT INTO \" + modelName + \" VALUES\");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        sqlBuilder.append(\"(?,\");\n        param.add(metrics.id());\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(\"?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataComplexObject) {\n                param.add(((StorageDataComplexObject) value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\")\");\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2020-03-31 00:04:17","commitOrder":5,"curCode":"    protected <T extends StorageData> SQLExecutor getUpdateExecutor(String modelName, T metrics,\n                                                                    StorageBuilder<T> storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"UPDATE \" + modelName + \" SET \");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(column.getColumnName().getStorageName() + \"= ?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataComplexObject) {\n                param.add(((StorageDataComplexObject) value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\" WHERE id = ?\");\n        param.add(metrics.id());\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","date":"2020-03-31 00:04:17","endLine":177,"groupId":"3153","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getUpdateExecutor","params":"(StringmodelName@Tmetrics@StorageBuilder<T>storageBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bd/26cd33bdd70b9b892fa3a6e4d86f76aed1cfce.src","preCode":"    protected SQLExecutor getUpdateExecutor(String modelName, StorageData metrics,\n        StorageBuilder storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"UPDATE \" + modelName + \" SET \");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(column.getColumnName().getStorageName() + \"= ?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataComplexObject) {\n                param.add(((StorageDataComplexObject) value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\" WHERE id = ?\");\n        param.add(metrics.id());\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"b28b811af79af504abd5dede1e4605843d887ec3","commitMessage":"@@@[BugFix] Fix wrong H2 column type (#4593)\n\nMEDIUMTEXT in H2 is CLOB in JDBC type.  and casting it to `String` causes `ClassCastException`","date":"2020-03-31 00:04:17","modifiedFileCount":"5","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-03-31 00:04:17","codes":[{"authorDate":"2020-08-11 07:24:40","commitOrder":6,"curCode":"    protected <T extends StorageData> SQLExecutor getInsertExecutor(String modelName, T metrics,\n                                                                    StorageBuilder<T> storageBuilder,\n                                                                    int maxSizeOfArrayColumn) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"INSERT INTO \" + modelName + \" VALUES\");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        sqlBuilder.append(\"(?,\");\n        param.add(metrics.id());\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            if (List.class.isAssignableFrom(column.getType())) {\n                for (int physicalColumnIdx = 0; physicalColumnIdx < maxSizeOfArrayColumn; physicalColumnIdx++) {\n                    sqlBuilder.append(\"?\");\n                    param.add(objectMap.get(column.getColumnName().getName() + \"_\" + physicalColumnIdx));\n                    if (physicalColumnIdx != maxSizeOfArrayColumn - 1) {\n                        sqlBuilder.append(\",\");\n                    }\n                }\n            } else {\n                sqlBuilder.append(\"?\");\n\n                Object value = objectMap.get(column.getColumnName().getName());\n                if (value instanceof StorageDataComplexObject) {\n                    param.add(((StorageDataComplexObject) value).toStorageData());\n                } else {\n                    param.add(value);\n                }\n            }\n\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n        }\n        sqlBuilder.append(\")\");\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","date":"2020-08-11 07:24:40","endLine":149,"groupId":"5299","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getInsertExecutor","params":"(StringmodelName@Tmetrics@StorageBuilder<T>storageBuilder@intmaxSizeOfArrayColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b6/3e910fa286b976633e12a06cc6a7c836532a79.src","preCode":"    protected <T extends StorageData> SQLExecutor getInsertExecutor(String modelName, T metrics,\n                                                                    StorageBuilder<T> storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"INSERT INTO \" + modelName + \" VALUES\");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        sqlBuilder.append(\"(?,\");\n        param.add(metrics.id());\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(\"?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataComplexObject) {\n                param.add(((StorageDataComplexObject) value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\")\");\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2020-03-31 00:04:17","commitOrder":6,"curCode":"    protected <T extends StorageData> SQLExecutor getUpdateExecutor(String modelName, T metrics,\n                                                                    StorageBuilder<T> storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"UPDATE \" + modelName + \" SET \");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(column.getColumnName().getStorageName() + \"= ?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataComplexObject) {\n                param.add(((StorageDataComplexObject) value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\" WHERE id = ?\");\n        param.add(metrics.id());\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","date":"2020-03-31 00:04:17","endLine":177,"groupId":"3153","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getUpdateExecutor","params":"(StringmodelName@Tmetrics@StorageBuilder<T>storageBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bd/26cd33bdd70b9b892fa3a6e4d86f76aed1cfce.src","preCode":"    protected <T extends StorageData> SQLExecutor getUpdateExecutor(String modelName, T metrics,\n                                                                    StorageBuilder<T> storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"UPDATE \" + modelName + \" SET \");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(column.getColumnName().getStorageName() + \"= ?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataComplexObject) {\n                param.add(((StorageDataComplexObject) value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\" WHERE id = ?\");\n        param.add(metrics.id());\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"N"}],"commitId":"7f7e96b088d3cb0a19f8ddeafe5ede9764ec2eda","commitMessage":"@@@[IMPORTANT] Query traces with tags as condition (#5270)\n\n","date":"2020-08-11 07:24:40","modifiedFileCount":"39","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-02-06 21:22:58","codes":[{"authorDate":"2021-02-06 21:22:58","commitOrder":7,"curCode":"    protected <T extends StorageData> SQLExecutor getInsertExecutor(String modelName, T metrics,\n                                                                    StorageHashMapBuilder<T> storageBuilder,\n                                                                    int maxSizeOfArrayColumn) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.entity2Storage(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"INSERT INTO \" + modelName + \" VALUES\");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        sqlBuilder.append(\"(?,\");\n        param.add(metrics.id());\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            if (List.class.isAssignableFrom(column.getType())) {\n                for (int physicalColumnIdx = 0; physicalColumnIdx < maxSizeOfArrayColumn; physicalColumnIdx++) {\n                    sqlBuilder.append(\"?\");\n                    param.add(objectMap.get(column.getColumnName().getName() + \"_\" + physicalColumnIdx));\n                    if (physicalColumnIdx != maxSizeOfArrayColumn - 1) {\n                        sqlBuilder.append(\",\");\n                    }\n                }\n            } else {\n                sqlBuilder.append(\"?\");\n\n                Object value = objectMap.get(column.getColumnName().getName());\n                if (value instanceof StorageDataComplexObject) {\n                    param.add(((StorageDataComplexObject) value).toStorageData());\n                } else {\n                    param.add(value);\n                }\n            }\n\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n        }\n        sqlBuilder.append(\")\");\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","date":"2021-02-06 21:22:58","endLine":149,"groupId":"10790","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"getInsertExecutor","params":"(StringmodelName@Tmetrics@StorageHashMapBuilder<T>storageBuilder@intmaxSizeOfArrayColumn)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5d/4b1c13a0b8bcf631af9bf47727b08d1dfefce0.src","preCode":"    protected <T extends StorageData> SQLExecutor getInsertExecutor(String modelName, T metrics,\n                                                                    StorageBuilder<T> storageBuilder,\n                                                                    int maxSizeOfArrayColumn) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"INSERT INTO \" + modelName + \" VALUES\");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        sqlBuilder.append(\"(?,\");\n        param.add(metrics.id());\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            if (List.class.isAssignableFrom(column.getType())) {\n                for (int physicalColumnIdx = 0; physicalColumnIdx < maxSizeOfArrayColumn; physicalColumnIdx++) {\n                    sqlBuilder.append(\"?\");\n                    param.add(objectMap.get(column.getColumnName().getName() + \"_\" + physicalColumnIdx));\n                    if (physicalColumnIdx != maxSizeOfArrayColumn - 1) {\n                        sqlBuilder.append(\",\");\n                    }\n                }\n            } else {\n                sqlBuilder.append(\"?\");\n\n                Object value = objectMap.get(column.getColumnName().getName());\n                if (value instanceof StorageDataComplexObject) {\n                    param.add(((StorageDataComplexObject) value).toStorageData());\n                } else {\n                    param.add(value);\n                }\n            }\n\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n        }\n        sqlBuilder.append(\")\");\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2021-02-06 21:22:58","commitOrder":7,"curCode":"    protected <T extends StorageData> SQLExecutor getUpdateExecutor(String modelName, T metrics,\n                                                                    StorageHashMapBuilder<T> storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.entity2Storage(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"UPDATE \" + modelName + \" SET \");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(column.getColumnName().getStorageName() + \"= ?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataComplexObject) {\n                param.add(((StorageDataComplexObject) value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\" WHERE id = ?\");\n        param.add(metrics.id());\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","date":"2021-02-06 21:22:58","endLine":176,"groupId":"10790","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"getUpdateExecutor","params":"(StringmodelName@Tmetrics@StorageHashMapBuilder<T>storageBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5d/4b1c13a0b8bcf631af9bf47727b08d1dfefce0.src","preCode":"    protected <T extends StorageData> SQLExecutor getUpdateExecutor(String modelName, T metrics,\n                                                                    StorageBuilder<T> storageBuilder) throws IOException {\n        Map<String, Object> objectMap = storageBuilder.data2Map(metrics);\n\n        SQLBuilder sqlBuilder = new SQLBuilder(\"UPDATE \" + modelName + \" SET \");\n        List<ModelColumn> columns = TableMetaInfo.get(modelName).getColumns();\n        List<Object> param = new ArrayList<>();\n        for (int i = 0; i < columns.size(); i++) {\n            ModelColumn column = columns.get(i);\n            sqlBuilder.append(column.getColumnName().getStorageName() + \"= ?\");\n            if (i != columns.size() - 1) {\n                sqlBuilder.append(\",\");\n            }\n\n            Object value = objectMap.get(column.getColumnName().getName());\n            if (value instanceof StorageDataComplexObject) {\n                param.add(((StorageDataComplexObject) value).toStorageData());\n            } else {\n                param.add(value);\n            }\n        }\n        sqlBuilder.append(\" WHERE id = ?\");\n        param.add(metrics.id());\n\n        return new SQLExecutor(sqlBuilder.toString(), param);\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2SQLExecutor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"}],"commitId":"fc23dabf37a85cfc27482dbaf25b0109114f6ef7","commitMessage":"@@@Support multiple implementations of StorageBuilder in different storage implementations - stage 1. (#6334)\n\n","date":"2021-02-06 21:22:58","modifiedFileCount":"74","status":"M","submitter":"?? Wu Sheng"}]
