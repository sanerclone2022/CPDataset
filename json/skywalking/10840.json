[{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":2,"curCode":"    private List<Call.CallDetail> buildInstanceRelation(SearchSourceBuilder sourceBuilder, String indexName,\n                                                        DetectPoint detectPoint) throws IOException {\n        sourceBuilder.aggregation(\n            AggregationBuilders\n                .terms(Metrics.ENTITY_ID).field(Metrics.ENTITY_ID)\n                .subAggregation(\n                    AggregationBuilders.terms(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID)\n                                       .field(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID))\n                .size(1000));\n\n        SearchResponse response = getClient().search(indexName, sourceBuilder);\n\n        List<Call.CallDetail> calls = new ArrayList<>();\n        Terms entityTerms = response.getAggregations().get(Metrics.ENTITY_ID);\n        for (Terms.Bucket entityBucket : entityTerms.getBuckets()) {\n            String entityId = entityBucket.getKeyAsString();\n            Terms componentTerms = entityBucket.getAggregations()\n                                               .get(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID);\n            final int componentId = componentTerms.getBuckets().get(0).getKeyAsNumber().intValue();\n\n            Call.CallDetail call = new Call.CallDetail();\n            call.buildFromInstanceRelation(entityId, componentId, detectPoint);\n            calls.add(call);\n        }\n        return calls;\n    }\n","date":"2020-04-10 11:03:24","endLine":242,"groupId":"248","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildInstanceRelation","params":"(SearchSourceBuildersourceBuilder@StringindexName@DetectPointdetectPoint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8e/d2d45158eb8c9008718609445fe352aaaba906.src","preCode":"    private List<Call.CallDetail> buildInstanceRelation(SearchSourceBuilder sourceBuilder, String indexName,\n                                                        DetectPoint detectPoint) throws IOException {\n        sourceBuilder.aggregation(\n            AggregationBuilders\n                .terms(Metrics.ENTITY_ID).field(Metrics.ENTITY_ID)\n                .subAggregation(\n                    AggregationBuilders.terms(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID)\n                                       .field(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID))\n                .size(1000));\n\n        SearchResponse response = getClient().search(indexName, sourceBuilder);\n\n        List<Call.CallDetail> calls = new ArrayList<>();\n        Terms entityTerms = response.getAggregations().get(Metrics.ENTITY_ID);\n        for (Terms.Bucket entityBucket : entityTerms.getBuckets()) {\n            String entityId = entityBucket.getKeyAsString();\n            Terms componentTerms = entityBucket.getAggregations()\n                                               .get(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID);\n            final int componentId = componentTerms.getBuckets().get(0).getKeyAsNumber().intValue();\n\n            Call.CallDetail call = new Call.CallDetail();\n            call.buildFromInstanceRelation(entityId, componentId, detectPoint);\n            calls.add(call);\n        }\n        return calls;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TopologyQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"B"},{"authorDate":"2020-04-10 11:03:24","commitOrder":2,"curCode":"    private List<Call.CallDetail> loadEndpoint(SearchSourceBuilder sourceBuilder, String indexName,\n                                               DetectPoint detectPoint) throws IOException {\n        sourceBuilder.aggregation(AggregationBuilders.terms(Metrics.ENTITY_ID).field(Metrics.ENTITY_ID).size(1000));\n\n        SearchResponse response = getClient().search(indexName, sourceBuilder);\n\n        List<Call.CallDetail> calls = new ArrayList<>();\n        Terms entityTerms = response.getAggregations().get(Metrics.ENTITY_ID);\n        for (Terms.Bucket entityBucket : entityTerms.getBuckets()) {\n            String entityId = entityBucket.getKeyAsString();\n\n            Call.CallDetail call = new Call.CallDetail();\n            call.buildFromEndpointRelation(entityId, detectPoint);\n            calls.add(call);\n        }\n        return calls;\n    }\n","date":"2020-04-10 11:03:24","endLine":260,"groupId":"249","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadEndpoint","params":"(SearchSourceBuildersourceBuilder@StringindexName@DetectPointdetectPoint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8e/d2d45158eb8c9008718609445fe352aaaba906.src","preCode":"    private List<Call.CallDetail> loadEndpoint(SearchSourceBuilder sourceBuilder, String indexName,\n                                               DetectPoint detectPoint) throws IOException {\n        sourceBuilder.aggregation(AggregationBuilders.terms(Metrics.ENTITY_ID).field(Metrics.ENTITY_ID).size(1000));\n\n        SearchResponse response = getClient().search(indexName, sourceBuilder);\n\n        List<Call.CallDetail> calls = new ArrayList<>();\n        Terms entityTerms = response.getAggregations().get(Metrics.ENTITY_ID);\n        for (Terms.Bucket entityBucket : entityTerms.getBuckets()) {\n            String entityId = entityBucket.getKeyAsString();\n\n            Call.CallDetail call = new Call.CallDetail();\n            call.buildFromEndpointRelation(entityId, detectPoint);\n            calls.add(call);\n        }\n        return calls;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TopologyQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"MB"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-03-11 15:11:37","codes":[{"authorDate":"2021-03-11 15:11:37","commitOrder":3,"curCode":"    private List<Call.CallDetail> buildInstanceRelation(SearchSourceBuilder sourceBuilder, String indexName,\n                                                        DetectPoint detectPoint) throws IOException {\n        sourceBuilder.aggregation(\n            AggregationBuilders\n                .terms(Metrics.ENTITY_ID).field(Metrics.ENTITY_ID)\n                .subAggregation(\n                    AggregationBuilders.terms(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID)\n                                       .field(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID))\n                .size(1000));\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(indexName), sourceBuilder);\n\n        List<Call.CallDetail> calls = new ArrayList<>();\n        Terms entityTerms = response.getAggregations().get(Metrics.ENTITY_ID);\n        for (Terms.Bucket entityBucket : entityTerms.getBuckets()) {\n            String entityId = entityBucket.getKeyAsString();\n            Terms componentTerms = entityBucket.getAggregations()\n                                               .get(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID);\n            final int componentId = componentTerms.getBuckets().get(0).getKeyAsNumber().intValue();\n\n            Call.CallDetail call = new Call.CallDetail();\n            call.buildFromInstanceRelation(entityId, componentId, detectPoint);\n            calls.add(call);\n        }\n        return calls;\n    }\n","date":"2021-03-11 15:11:37","endLine":239,"groupId":"5370","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildInstanceRelation","params":"(SearchSourceBuildersourceBuilder@StringindexName@DetectPointdetectPoint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b1/8317bd2a2fe388a39758082edecb5051a511fa.src","preCode":"    private List<Call.CallDetail> buildInstanceRelation(SearchSourceBuilder sourceBuilder, String indexName,\n                                                        DetectPoint detectPoint) throws IOException {\n        sourceBuilder.aggregation(\n            AggregationBuilders\n                .terms(Metrics.ENTITY_ID).field(Metrics.ENTITY_ID)\n                .subAggregation(\n                    AggregationBuilders.terms(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID)\n                                       .field(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID))\n                .size(1000));\n\n        SearchResponse response = getClient().search(indexName, sourceBuilder);\n\n        List<Call.CallDetail> calls = new ArrayList<>();\n        Terms entityTerms = response.getAggregations().get(Metrics.ENTITY_ID);\n        for (Terms.Bucket entityBucket : entityTerms.getBuckets()) {\n            String entityId = entityBucket.getKeyAsString();\n            Terms componentTerms = entityBucket.getAggregations()\n                                               .get(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID);\n            final int componentId = componentTerms.getBuckets().get(0).getKeyAsNumber().intValue();\n\n            Call.CallDetail call = new Call.CallDetail();\n            call.buildFromInstanceRelation(entityId, componentId, detectPoint);\n            calls.add(call);\n        }\n        return calls;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TopologyQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2021-03-11 15:11:37","commitOrder":3,"curCode":"    private List<Call.CallDetail> loadEndpoint(SearchSourceBuilder sourceBuilder, String indexName,\n                                               DetectPoint detectPoint) throws IOException {\n        sourceBuilder.aggregation(AggregationBuilders.terms(Metrics.ENTITY_ID).field(Metrics.ENTITY_ID).size(1000));\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(indexName), sourceBuilder);\n\n        List<Call.CallDetail> calls = new ArrayList<>();\n        Terms entityTerms = response.getAggregations().get(Metrics.ENTITY_ID);\n        for (Terms.Bucket entityBucket : entityTerms.getBuckets()) {\n            String entityId = entityBucket.getKeyAsString();\n\n            Call.CallDetail call = new Call.CallDetail();\n            call.buildFromEndpointRelation(entityId, detectPoint);\n            calls.add(call);\n        }\n        return calls;\n    }\n","date":"2021-03-11 15:11:37","endLine":258,"groupId":"249","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadEndpoint","params":"(SearchSourceBuildersourceBuilder@StringindexName@DetectPointdetectPoint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b1/8317bd2a2fe388a39758082edecb5051a511fa.src","preCode":"    private List<Call.CallDetail> loadEndpoint(SearchSourceBuilder sourceBuilder, String indexName,\n                                               DetectPoint detectPoint) throws IOException {\n        sourceBuilder.aggregation(AggregationBuilders.terms(Metrics.ENTITY_ID).field(Metrics.ENTITY_ID).size(1000));\n\n        SearchResponse response = getClient().search(indexName, sourceBuilder);\n\n        List<Call.CallDetail> calls = new ArrayList<>();\n        Terms entityTerms = response.getAggregations().get(Metrics.ENTITY_ID);\n        for (Terms.Bucket entityBucket : entityTerms.getBuckets()) {\n            String entityId = entityBucket.getKeyAsString();\n\n            Call.CallDetail call = new Call.CallDetail();\n            call.buildFromEndpointRelation(entityId, detectPoint);\n            calls.add(call);\n        }\n        return calls;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TopologyQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"}],"commitId":"fd1d21021f8f3abd66f957ff8484a0e2c29ceb36","commitMessage":"@@@[Incompatible Enhancement]New index policy of ElasticSearch storage option (#6499)\n\n","date":"2021-03-11 15:11:37","modifiedFileCount":"39","status":"M","submitter":"Evan"},{"authorTime":"2021-09-06 15:21:35","codes":[{"authorDate":"2021-09-06 15:21:35","commitOrder":4,"curCode":"    private List<Call.CallDetail> buildInstanceRelation(SearchBuilder sourceBuilder,\n                                                        String indexName,\n                                                        DetectPoint detectPoint) {\n        sourceBuilder.aggregation(\n            Aggregation\n                .terms(Metrics.ENTITY_ID).field(Metrics.ENTITY_ID)\n                .subAggregation(\n                    Aggregation.terms(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID)\n                               .field(\n                                   ServiceInstanceRelationServerSideMetrics.COMPONENT_ID))\n                .size(1000));\n\n        final String index =\n            IndexController.LogicIndicesRegister.getPhysicalTableName(indexName);\n        SearchResponse response = getClient().search(index, sourceBuilder.build());\n\n        List<Call.CallDetail> calls = new ArrayList<>();\n        final Map<String, Object> entityTerms =\n            (Map<String, Object>) response.getAggregations().get(Metrics.ENTITY_ID);\n        final List<Map<String, Object>> buckets =\n            (List<Map<String, Object>>) entityTerms.get(\"buckets\");\n        for (Map<String, Object> entityBucket : buckets) {\n            final String entityId = (String) entityBucket.get(\"key\");\n            final Map<String, Object> componentTerms = (Map<String, Object>) entityBucket.get(\n                ServiceInstanceRelationServerSideMetrics.COMPONENT_ID);\n            final List<Map<String, Object>> subAgg =\n                (List<Map<String, Object>>) componentTerms.get(\"buckets\");\n            final int componentId = ((Number) subAgg.iterator().next().get(\"key\")).intValue();\n\n            Call.CallDetail call = new Call.CallDetail();\n            call.buildFromInstanceRelation(entityId, componentId, detectPoint);\n            calls.add(call);\n        }\n        return calls;\n    }\n","date":"2021-09-06 15:21:35","endLine":271,"groupId":"10840","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"buildInstanceRelation","params":"(SearchBuildersourceBuilder@StringindexName@DetectPointdetectPoint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9b/8b31924d64d06c554ba22709e0266ebe6d4480.src","preCode":"    private List<Call.CallDetail> buildInstanceRelation(SearchSourceBuilder sourceBuilder, String indexName,\n                                                        DetectPoint detectPoint) throws IOException {\n        sourceBuilder.aggregation(\n            AggregationBuilders\n                .terms(Metrics.ENTITY_ID).field(Metrics.ENTITY_ID)\n                .subAggregation(\n                    AggregationBuilders.terms(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID)\n                                       .field(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID))\n                .size(1000));\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(indexName), sourceBuilder);\n\n        List<Call.CallDetail> calls = new ArrayList<>();\n        Terms entityTerms = response.getAggregations().get(Metrics.ENTITY_ID);\n        for (Terms.Bucket entityBucket : entityTerms.getBuckets()) {\n            String entityId = entityBucket.getKeyAsString();\n            Terms componentTerms = entityBucket.getAggregations()\n                                               .get(ServiceInstanceRelationServerSideMetrics.COMPONENT_ID);\n            final int componentId = componentTerms.getBuckets().get(0).getKeyAsNumber().intValue();\n\n            Call.CallDetail call = new Call.CallDetail();\n            call.buildFromInstanceRelation(entityId, componentId, detectPoint);\n            calls.add(call);\n        }\n        return calls;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TopologyQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2021-09-06 15:21:35","commitOrder":4,"curCode":"    private List<Call.CallDetail> loadEndpoint(SearchBuilder sourceBuilder, String indexName,\n                                               DetectPoint detectPoint) {\n        sourceBuilder.aggregation(\n            Aggregation.terms(Metrics.ENTITY_ID).field(Metrics.ENTITY_ID).size(1000));\n\n        final String index =\n            IndexController.LogicIndicesRegister.getPhysicalTableName(indexName);\n        final SearchResponse response = getClient().search(index, sourceBuilder.build());\n\n        final List<Call.CallDetail> calls = new ArrayList<>();\n        final Map<String, Object> entityTerms =\n            (Map<String, Object>) response.getAggregations().get(Metrics.ENTITY_ID);\n        final List<Map<String, Object>> buckets =\n            (List<Map<String, Object>>) entityTerms.get(\"buckets\");\n        for (final Map<String, Object> entityBucket : buckets) {\n            String entityId = (String) entityBucket.get(\"key\");\n\n            Call.CallDetail call = new Call.CallDetail();\n            call.buildFromEndpointRelation(entityId, detectPoint);\n            calls.add(call);\n        }\n        return calls;\n    }\n","date":"2021-09-06 15:21:35","endLine":295,"groupId":"10840","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"loadEndpoint","params":"(SearchBuildersourceBuilder@StringindexName@DetectPointdetectPoint)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9b/8b31924d64d06c554ba22709e0266ebe6d4480.src","preCode":"    private List<Call.CallDetail> loadEndpoint(SearchSourceBuilder sourceBuilder, String indexName,\n                                               DetectPoint detectPoint) throws IOException {\n        sourceBuilder.aggregation(AggregationBuilders.terms(Metrics.ENTITY_ID).field(Metrics.ENTITY_ID).size(1000));\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(indexName), sourceBuilder);\n\n        List<Call.CallDetail> calls = new ArrayList<>();\n        Terms entityTerms = response.getAggregations().get(Metrics.ENTITY_ID);\n        for (Terms.Bucket entityBucket : entityTerms.getBuckets()) {\n            String entityId = entityBucket.getKeyAsString();\n\n            Call.CallDetail call = new Call.CallDetail();\n            call.buildFromEndpointRelation(entityId, detectPoint);\n            calls.add(call);\n        }\n        return calls;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TopologyQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"}],"commitId":"26b81a2e5991ecdd2bde0f7071264cb80bb235cf","commitMessage":"@@@Rebuilt ElasticSearch client on top of their REST API (#7634)\n\n","date":"2021-09-06 15:21:35","modifiedFileCount":"60","status":"M","submitter":"kezhenxu94"}]
