[{"authorTime":"2020-02-25 10:12:16","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":6,"curCode":"    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.TRACE_ID, traceId));\n        sourceBuilder.size(segmentQueryMaxSize);\n\n        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n\n        List<SegmentRecord> segmentRecords = new ArrayList<>();\n        for (SearchHit searchHit : response.getHits().getHits()) {\n            SegmentRecord segmentRecord = new SegmentRecord();\n            segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n            segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n            segmentRecord.setServiceId(((Number) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID)).intValue());\n            segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n            segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n            segmentRecord.setEndTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.END_TIME)).longValue());\n            segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n            segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n            String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n            if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n                segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n            }\n            segmentRecord.setVersion(((Number) searchHit.getSourceAsMap().get(SegmentRecord.VERSION)).intValue());\n            segmentRecords.add(segmentRecord);\n        }\n        return segmentRecords;\n    }\n","date":"2020-02-11 17:10:49","endLine":163,"groupId":"141","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"queryByTraceId","params":"(StringtraceId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/65/ca71333d00842bb45be63dafbc5a106fac925a.src","preCode":"    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.TRACE_ID, traceId));\n        sourceBuilder.size(segmentQueryMaxSize);\n\n        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n\n        List<SegmentRecord> segmentRecords = new ArrayList<>();\n        for (SearchHit searchHit : response.getHits().getHits()) {\n            SegmentRecord segmentRecord = new SegmentRecord();\n            segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n            segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n            segmentRecord.setServiceId(((Number) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID)).intValue());\n            segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n            segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n            segmentRecord.setEndTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.END_TIME)).longValue());\n            segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n            segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n            String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n            if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n                segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n            }\n            segmentRecord.setVersion(((Number) searchHit.getSourceAsMap().get(SegmentRecord.VERSION)).intValue());\n            segmentRecords.add(segmentRecord);\n        }\n        return segmentRecords;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"NB"},{"authorDate":"2020-02-25 10:12:16","commitOrder":6,"curCode":"    public SegmentRecord getProfiledSegment(String segmentId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.SEGMENT_ID, segmentId));\n        sourceBuilder.size(1);\n\n        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n\n        if (response.getHits().getHits().length == 0) {\n            return null;\n        }\n        SearchHit searchHit = response.getHits().getHits()[0];\n        SegmentRecord segmentRecord = new SegmentRecord();\n        segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n        segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n        segmentRecord.setServiceId(((Number) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID)).intValue());\n        segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n        segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n        segmentRecord.setEndTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.END_TIME)).longValue());\n        segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n        segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n        String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n        if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n            segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n        }\n        segmentRecord.setVersion(((Number) searchHit.getSourceAsMap().get(SegmentRecord.VERSION)).intValue());\n        return segmentRecord;\n    }\n","date":"2020-02-25 10:12:16","endLine":178,"groupId":"141","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getProfiledSegment","params":"(StringsegmentId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ce/17d57081c1ef2d47f1db456702a846ae7f2842.src","preCode":"    public SegmentRecord getProfiledSegment(String segmentId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.SEGMENT_ID, segmentId));\n        sourceBuilder.size(1);\n\n        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n\n        if (response.getHits().getHits().length == 0) {\n            return null;\n        }\n        SearchHit searchHit = response.getHits().getHits()[0];\n        SegmentRecord segmentRecord = new SegmentRecord();\n        segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n        segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n        segmentRecord.setServiceId(((Number) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID)).intValue());\n        segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n        segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n        segmentRecord.setEndTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.END_TIME)).longValue());\n        segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n        segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n        String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n        if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n            segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n        }\n        segmentRecord.setVersion(((Number) searchHit.getSourceAsMap().get(SegmentRecord.VERSION)).intValue());\n        return segmentRecord;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/ProfileThreadSnapshotQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"B"}],"commitId":"2ea341b890b3c89bc6420e1a59be2b4aa0c8ec75","commitMessage":"@@@Add missed profiled segment query (#4413)\n\n* add profiled segment query\n\n* fix query field error\n","date":"2020-02-25 10:12:16","modifiedFileCount":"9","status":"M","submitter":"mrproliu"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":7,"curCode":"    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.TRACE_ID, traceId));\n        sourceBuilder.size(segmentQueryMaxSize);\n\n        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n\n        List<SegmentRecord> segmentRecords = new ArrayList<>();\n        for (SearchHit searchHit : response.getHits().getHits()) {\n            SegmentRecord segmentRecord = new SegmentRecord();\n            segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n            segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n            segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n            segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n            segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n            segmentRecord.setEndTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.END_TIME)).longValue());\n            segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n            segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n            String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n            if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n                segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n            }\n            segmentRecord.setVersion(((Number) searchHit.getSourceAsMap().get(SegmentRecord.VERSION)).intValue());\n            segmentRecords.add(segmentRecord);\n        }\n        return segmentRecords;\n    }\n","date":"2020-04-10 11:03:24","endLine":175,"groupId":"141","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"queryByTraceId","params":"(StringtraceId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/46/17a73585f559f06878a89213b6af126e6f59ca.src","preCode":"    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.TRACE_ID, traceId));\n        sourceBuilder.size(segmentQueryMaxSize);\n\n        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n\n        List<SegmentRecord> segmentRecords = new ArrayList<>();\n        for (SearchHit searchHit : response.getHits().getHits()) {\n            SegmentRecord segmentRecord = new SegmentRecord();\n            segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n            segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n            segmentRecord.setServiceId(((Number) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID)).intValue());\n            segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n            segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n            segmentRecord.setEndTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.END_TIME)).longValue());\n            segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n            segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n            String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n            if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n                segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n            }\n            segmentRecord.setVersion(((Number) searchHit.getSourceAsMap().get(SegmentRecord.VERSION)).intValue());\n            segmentRecords.add(segmentRecord);\n        }\n        return segmentRecords;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":7,"curCode":"    public SegmentRecord getProfiledSegment(String segmentId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.SEGMENT_ID, segmentId));\n        sourceBuilder.size(1);\n\n        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n\n        if (response.getHits().getHits().length == 0) {\n            return null;\n        }\n        SearchHit searchHit = response.getHits().getHits()[0];\n        SegmentRecord segmentRecord = new SegmentRecord();\n        segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n        segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n        segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n        segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n        segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n        segmentRecord.setEndTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.END_TIME)).longValue());\n        segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n        segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n        String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n        if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n            segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n        }\n        segmentRecord.setVersion(((Number) searchHit.getSourceAsMap().get(SegmentRecord.VERSION)).intValue());\n        return segmentRecord;\n    }\n","date":"2020-04-10 11:03:24","endLine":178,"groupId":"141","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getProfiledSegment","params":"(StringsegmentId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/09/e081752bb36add1acda10b8c4ac6a5eda6b497.src","preCode":"    public SegmentRecord getProfiledSegment(String segmentId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.SEGMENT_ID, segmentId));\n        sourceBuilder.size(1);\n\n        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n\n        if (response.getHits().getHits().length == 0) {\n            return null;\n        }\n        SearchHit searchHit = response.getHits().getHits()[0];\n        SegmentRecord segmentRecord = new SegmentRecord();\n        segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n        segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n        segmentRecord.setServiceId(((Number) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID)).intValue());\n        segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n        segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n        segmentRecord.setEndTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.END_TIME)).longValue());\n        segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n        segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n        String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n        if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n            segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n        }\n        segmentRecord.setVersion(((Number) searchHit.getSourceAsMap().get(SegmentRecord.VERSION)).intValue());\n        return segmentRecord;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/ProfileThreadSnapshotQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-03-11 15:11:37","codes":[{"authorDate":"2021-03-11 15:11:37","commitOrder":8,"curCode":"    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.TRACE_ID, traceId));\n        sourceBuilder.size(segmentQueryMaxSize);\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME), sourceBuilder);\n\n        List<SegmentRecord> segmentRecords = new ArrayList<>();\n        for (SearchHit searchHit : response.getHits().getHits()) {\n            SegmentRecord segmentRecord = new SegmentRecord();\n            segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n            segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n            segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n            segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n            segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n            segmentRecord.setEndTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.END_TIME)).longValue());\n            segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n            segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n            String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n            if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n                segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n            }\n            segmentRecord.setVersion(((Number) searchHit.getSourceAsMap().get(SegmentRecord.VERSION)).intValue());\n            segmentRecords.add(segmentRecord);\n        }\n        return segmentRecords;\n    }\n","date":"2021-03-11 15:11:37","endLine":190,"groupId":"141","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"queryByTraceId","params":"(StringtraceId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e1/948f6d62bad986bc47da2f7ed151c6eda2d93d.src","preCode":"    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.TRACE_ID, traceId));\n        sourceBuilder.size(segmentQueryMaxSize);\n\n        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n\n        List<SegmentRecord> segmentRecords = new ArrayList<>();\n        for (SearchHit searchHit : response.getHits().getHits()) {\n            SegmentRecord segmentRecord = new SegmentRecord();\n            segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n            segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n            segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n            segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n            segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n            segmentRecord.setEndTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.END_TIME)).longValue());\n            segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n            segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n            String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n            if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n                segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n            }\n            segmentRecord.setVersion(((Number) searchHit.getSourceAsMap().get(SegmentRecord.VERSION)).intValue());\n            segmentRecords.add(segmentRecord);\n        }\n        return segmentRecords;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2021-03-11 15:11:37","commitOrder":8,"curCode":"    public SegmentRecord getProfiledSegment(String segmentId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.SEGMENT_ID, segmentId));\n        sourceBuilder.size(1);\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME), sourceBuilder);\n\n        if (response.getHits().getHits().length == 0) {\n            return null;\n        }\n        SearchHit searchHit = response.getHits().getHits()[0];\n        SegmentRecord segmentRecord = new SegmentRecord();\n        segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n        segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n        segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n        segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n        segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n        segmentRecord.setEndTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.END_TIME)).longValue());\n        segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n        segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n        String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n        if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n            segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n        }\n        segmentRecord.setVersion(((Number) searchHit.getSourceAsMap().get(SegmentRecord.VERSION)).intValue());\n        return segmentRecord;\n    }\n","date":"2021-03-11 15:11:37","endLine":195,"groupId":"141","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getProfiledSegment","params":"(StringsegmentId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b3/ec95d0c23cdebb1ae1bcffc50e91a29e16e952.src","preCode":"    public SegmentRecord getProfiledSegment(String segmentId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.SEGMENT_ID, segmentId));\n        sourceBuilder.size(1);\n\n        SearchResponse response = getClient().search(SegmentRecord.INDEX_NAME, sourceBuilder);\n\n        if (response.getHits().getHits().length == 0) {\n            return null;\n        }\n        SearchHit searchHit = response.getHits().getHits()[0];\n        SegmentRecord segmentRecord = new SegmentRecord();\n        segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n        segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n        segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n        segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n        segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n        segmentRecord.setEndTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.END_TIME)).longValue());\n        segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n        segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n        String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n        if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n            segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n        }\n        segmentRecord.setVersion(((Number) searchHit.getSourceAsMap().get(SegmentRecord.VERSION)).intValue());\n        return segmentRecord;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/ProfileThreadSnapshotQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"fd1d21021f8f3abd66f957ff8484a0e2c29ceb36","commitMessage":"@@@[Incompatible Enhancement]New index policy of ElasticSearch storage option (#6499)\n\n","date":"2021-03-11 15:11:37","modifiedFileCount":"39","status":"M","submitter":"Evan"},{"authorTime":"2021-08-10 00:05:06","codes":[{"authorDate":"2021-08-10 00:05:06","commitOrder":9,"curCode":"    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.TRACE_ID, traceId));\n        sourceBuilder.size(segmentQueryMaxSize);\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME), sourceBuilder);\n\n        List<SegmentRecord> segmentRecords = new ArrayList<>();\n        for (SearchHit searchHit : response.getHits().getHits()) {\n            SegmentRecord segmentRecord = new SegmentRecord();\n            segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n            segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n            segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n            segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n            segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n            segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n            segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n            String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n            if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n                segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n            }\n            segmentRecords.add(segmentRecord);\n        }\n        return segmentRecords;\n    }\n","date":"2021-08-10 00:05:06","endLine":188,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"queryByTraceId","params":"(StringtraceId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/01/27969ae88ea45dbd064093717edcac27479593.src","preCode":"    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.TRACE_ID, traceId));\n        sourceBuilder.size(segmentQueryMaxSize);\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME), sourceBuilder);\n\n        List<SegmentRecord> segmentRecords = new ArrayList<>();\n        for (SearchHit searchHit : response.getHits().getHits()) {\n            SegmentRecord segmentRecord = new SegmentRecord();\n            segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n            segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n            segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n            segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n            segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n            segmentRecord.setEndTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.END_TIME)).longValue());\n            segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n            segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n            String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n            if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n                segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n            }\n            segmentRecord.setVersion(((Number) searchHit.getSourceAsMap().get(SegmentRecord.VERSION)).intValue());\n            segmentRecords.add(segmentRecord);\n        }\n        return segmentRecords;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2021-08-10 00:05:06","commitOrder":9,"curCode":"    public SegmentRecord getProfiledSegment(String segmentId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.SEGMENT_ID, segmentId));\n        sourceBuilder.size(1);\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME), sourceBuilder);\n\n        if (response.getHits().getHits().length == 0) {\n            return null;\n        }\n        SearchHit searchHit = response.getHits().getHits()[0];\n        SegmentRecord segmentRecord = new SegmentRecord();\n        segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n        segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n        segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n        segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n        segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n        segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n        segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n        String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n        if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n            segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n        }\n        return segmentRecord;\n    }\n","date":"2021-08-10 00:05:06","endLine":193,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getProfiledSegment","params":"(StringsegmentId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0a/86efde3b484323cffdc3c20110ec7b72573ac4.src","preCode":"    public SegmentRecord getProfiledSegment(String segmentId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.SEGMENT_ID, segmentId));\n        sourceBuilder.size(1);\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME), sourceBuilder);\n\n        if (response.getHits().getHits().length == 0) {\n            return null;\n        }\n        SearchHit searchHit = response.getHits().getHits()[0];\n        SegmentRecord segmentRecord = new SegmentRecord();\n        segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n        segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n        segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n        segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n        segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n        segmentRecord.setEndTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.END_TIME)).longValue());\n        segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n        segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n        String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n        if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n            segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n        }\n        segmentRecord.setVersion(((Number) searchHit.getSourceAsMap().get(SegmentRecord.VERSION)).intValue());\n        return segmentRecord;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/ProfileThreadSnapshotQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"cc66254729f74d739ff2a85c72ded44fdaeb1cd4","commitMessage":"@@@Remove statement.  version.  and endtime from segment entity. (#7427)\n\n","date":"2021-08-10 00:05:06","modifiedFileCount":"11","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-08-11 16:27:10","codes":[{"authorDate":"2021-08-11 16:27:10","commitOrder":10,"curCode":"    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.TRACE_ID, traceId));\n        sourceBuilder.size(segmentQueryMaxSize);\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME), sourceBuilder);\n\n        List<SegmentRecord> segmentRecords = new ArrayList<>();\n        for (SearchHit searchHit : response.getHits().getHits()) {\n            SegmentRecord segmentRecord = new SegmentRecord();\n            segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n            segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n            segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n            segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n            segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n            segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n            String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n            if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n                segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n            }\n            segmentRecords.add(segmentRecord);\n        }\n        return segmentRecords;\n    }\n","date":"2021-08-11 16:27:10","endLine":185,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"queryByTraceId","params":"(StringtraceId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/84/68b5420a1dc5dd7575b55f5098adf20d1d23cd.src","preCode":"    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.TRACE_ID, traceId));\n        sourceBuilder.size(segmentQueryMaxSize);\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME), sourceBuilder);\n\n        List<SegmentRecord> segmentRecords = new ArrayList<>();\n        for (SearchHit searchHit : response.getHits().getHits()) {\n            SegmentRecord segmentRecord = new SegmentRecord();\n            segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n            segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n            segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n            segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n            segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n            segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n            segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n            String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n            if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n                segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n            }\n            segmentRecords.add(segmentRecord);\n        }\n        return segmentRecords;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2021-08-11 16:27:10","commitOrder":10,"curCode":"    public SegmentRecord getProfiledSegment(String segmentId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.SEGMENT_ID, segmentId));\n        sourceBuilder.size(1);\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME), sourceBuilder);\n\n        if (response.getHits().getHits().length == 0) {\n            return null;\n        }\n        SearchHit searchHit = response.getHits().getHits()[0];\n        SegmentRecord segmentRecord = new SegmentRecord();\n        segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n        segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n        segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n        segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n        segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n        segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n        String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n        if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n            segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n        }\n        return segmentRecord;\n    }\n","date":"2021-08-11 16:27:10","endLine":196,"groupId":"141","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getProfiledSegment","params":"(StringsegmentId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/08/921fe86667024c9e62cf3e6c9650860facbcee.src","preCode":"    public SegmentRecord getProfiledSegment(String segmentId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.SEGMENT_ID, segmentId));\n        sourceBuilder.size(1);\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME), sourceBuilder);\n\n        if (response.getHits().getHits().length == 0) {\n            return null;\n        }\n        SearchHit searchHit = response.getHits().getHits()[0];\n        SegmentRecord segmentRecord = new SegmentRecord();\n        segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n        segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n        segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n        segmentRecord.setEndpointName((String) searchHit.getSourceAsMap().get(SegmentRecord.ENDPOINT_NAME));\n        segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n        segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n        segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n        String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n        if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n            segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n        }\n        return segmentRecord;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/ProfileThreadSnapshotQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"de6cae34295f1558a92430323accc617202c754d","commitMessage":"@@@[Break Change] Remove endpoint name in the trace query condition. (#7438)\n\n* [Break Change] Remove endpoint name in the trace query condition.\n\n* Fix a local UT error(MacOS only)","date":"2021-08-11 16:27:10","modifiedFileCount":"19","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-09-06 15:21:35","codes":[{"authorDate":"2021-09-06 15:21:35","commitOrder":11,"curCode":"    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n        final String index =\n            IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME);\n\n        final SearchBuilder search =\n            Search.builder()\n                  .query(Query.term(SegmentRecord.TRACE_ID, traceId))\n                  .size(segmentQueryMaxSize);\n\n        final SearchResponse response = getClient().search(index, search.build());\n\n        List<SegmentRecord> segmentRecords = new ArrayList<>();\n        for (SearchHit searchHit : response.getHits().getHits()) {\n            SegmentRecord segmentRecord = new SegmentRecord();\n            segmentRecord.setSegmentId((String) searchHit.getSource().get(SegmentRecord.SEGMENT_ID));\n            segmentRecord.setTraceId((String) searchHit.getSource().get(SegmentRecord.TRACE_ID));\n            segmentRecord.setServiceId((String) searchHit.getSource().get(SegmentRecord.SERVICE_ID));\n            segmentRecord.setStartTime(((Number) searchHit.getSource().get(SegmentRecord.START_TIME)).longValue());\n            segmentRecord.setLatency(((Number) searchHit.getSource().get(SegmentRecord.LATENCY)).intValue());\n            segmentRecord.setIsError(((Number) searchHit.getSource().get(SegmentRecord.IS_ERROR)).intValue());\n            String dataBinaryBase64 = (String) searchHit.getSource().get(SegmentRecord.DATA_BINARY);\n            if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n                segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n            }\n            segmentRecords.add(segmentRecord);\n        }\n        return segmentRecords;\n    }\n","date":"2021-09-06 15:21:35","endLine":188,"groupId":"10843","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"queryByTraceId","params":"(StringtraceId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/61/576459b80f98f0c5d59ec842c2887a619168be.src","preCode":"    public List<SegmentRecord> queryByTraceId(String traceId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.TRACE_ID, traceId));\n        sourceBuilder.size(segmentQueryMaxSize);\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME), sourceBuilder);\n\n        List<SegmentRecord> segmentRecords = new ArrayList<>();\n        for (SearchHit searchHit : response.getHits().getHits()) {\n            SegmentRecord segmentRecord = new SegmentRecord();\n            segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n            segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n            segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n            segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n            segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n            segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n            String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n            if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n                segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n            }\n            segmentRecords.add(segmentRecord);\n        }\n        return segmentRecords;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/TraceQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2021-09-06 15:21:35","commitOrder":11,"curCode":"    public SegmentRecord getProfiledSegment(String segmentId) {\n        final String index =\n            IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME);\n        final SearchBuilder search =\n            Search.builder()\n                  .query(Query.term(SegmentRecord.SEGMENT_ID, segmentId))\n                  .size(1);\n\n        final SearchResponse response = getClient().search(index, search.build());\n\n        if (response.getHits().getHits().isEmpty()) {\n            return null;\n        }\n        final SearchHit searchHit = response.getHits().iterator().next();\n        final SegmentRecord segmentRecord = new SegmentRecord();\n        segmentRecord.setSegmentId((String) searchHit.getSource().get(SegmentRecord.SEGMENT_ID));\n        segmentRecord.setTraceId((String) searchHit.getSource().get(SegmentRecord.TRACE_ID));\n        segmentRecord.setServiceId((String) searchHit.getSource().get(SegmentRecord.SERVICE_ID));\n        segmentRecord.setStartTime(\n            ((Number) searchHit.getSource().get(SegmentRecord.START_TIME)).longValue());\n        segmentRecord.setLatency(\n            ((Number) searchHit.getSource().get(SegmentRecord.LATENCY)).intValue());\n        segmentRecord.setIsError(\n            ((Number) searchHit.getSource().get(SegmentRecord.IS_ERROR)).intValue());\n        String dataBinaryBase64 = (String) searchHit.getSource().get(SegmentRecord.DATA_BINARY);\n        if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n            segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n        }\n        return segmentRecord;\n    }\n","date":"2021-09-06 15:21:35","endLine":205,"groupId":"10843","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"getProfiledSegment","params":"(StringsegmentId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/be/a1fdff54b5b8b8b7905f97f18b8d0c1e13baf0.src","preCode":"    public SegmentRecord getProfiledSegment(String segmentId) throws IOException {\n        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource();\n        sourceBuilder.query(QueryBuilders.termQuery(SegmentRecord.SEGMENT_ID, segmentId));\n        sourceBuilder.size(1);\n\n        SearchResponse response = getClient().search(\n            IndexController.LogicIndicesRegister.getPhysicalTableName(SegmentRecord.INDEX_NAME), sourceBuilder);\n\n        if (response.getHits().getHits().length == 0) {\n            return null;\n        }\n        SearchHit searchHit = response.getHits().getHits()[0];\n        SegmentRecord segmentRecord = new SegmentRecord();\n        segmentRecord.setSegmentId((String) searchHit.getSourceAsMap().get(SegmentRecord.SEGMENT_ID));\n        segmentRecord.setTraceId((String) searchHit.getSourceAsMap().get(SegmentRecord.TRACE_ID));\n        segmentRecord.setServiceId((String) searchHit.getSourceAsMap().get(SegmentRecord.SERVICE_ID));\n        segmentRecord.setStartTime(((Number) searchHit.getSourceAsMap().get(SegmentRecord.START_TIME)).longValue());\n        segmentRecord.setLatency(((Number) searchHit.getSourceAsMap().get(SegmentRecord.LATENCY)).intValue());\n        segmentRecord.setIsError(((Number) searchHit.getSourceAsMap().get(SegmentRecord.IS_ERROR)).intValue());\n        String dataBinaryBase64 = (String) searchHit.getSourceAsMap().get(SegmentRecord.DATA_BINARY);\n        if (!Strings.isNullOrEmpty(dataBinaryBase64)) {\n            segmentRecord.setDataBinary(Base64.getDecoder().decode(dataBinaryBase64));\n        }\n        return segmentRecord;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/ProfileThreadSnapshotQueryEsDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"}],"commitId":"26b81a2e5991ecdd2bde0f7071264cb80bb235cf","commitMessage":"@@@Rebuilt ElasticSearch client on top of their REST API (#7634)\n\n","date":"2021-09-06 15:21:35","modifiedFileCount":"60","status":"M","submitter":"kezhenxu94"}]
