[{"authorTime":"2018-10-25 11:19:31","codes":[{"authorDate":"2018-10-25 11:19:31","commitOrder":1,"curCode":"    private SpanObject.Builder createLocalSpan(long startTimestamp, boolean isPrepare) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Local);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 100);\n        span.setEndTime(startTimestamp + 500);\n        if (isPrepare) {\n            span.setOperationName(\"org.apache.skywalking.Local.do\");\n        } else {\n            span.setOperationNameId(3);\n        }\n        span.setIsError(false);\n        return span;\n    }\n","date":"2018-10-25 11:19:31","endLine":100,"groupId":"6456","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createLocalSpan","params":"(longstartTimestamp@booleanisPrepare)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/4d/a1f80f581004f67310f6822df7d11fd706e707.src","preCode":"    private SpanObject.Builder createLocalSpan(long startTimestamp, boolean isPrepare) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Local);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 100);\n        span.setEndTime(startTimestamp + 500);\n        if (isPrepare) {\n            span.setOperationName(\"org.apache.skywalking.Local.do\");\n        } else {\n            span.setOperationNameId(3);\n        }\n        span.setIsError(false);\n        return span;\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceAMock.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"},{"authorDate":"2018-10-25 11:19:31","commitOrder":1,"curCode":"    private SpanObject.Builder createExitSpan(long startTimestamp, boolean isPrepare) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Exit);\n        span.setSpanLayer(SpanLayer.Database);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 550);\n        span.setEndTime(startTimestamp + 1000);\n        span.setComponentId(ComponentsDefine.MONGO_DRIVER.getId());\n        span.setIsError(true);\n\n        if (isPrepare) {\n            span.setOperationName(\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\");\n            span.setPeer(\"localhost:27017\");\n        } else {\n            span.setOperationNameId(7);\n            span.setPeerId(3);\n        }\n        return span;\n    }\n","date":"2018-10-25 11:19:31","endLine":127,"groupId":"3578","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createExitSpan","params":"(longstartTimestamp@booleanisPrepare)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/66/023b4c7cbefa22102e286c4c05c2228ad192a3.src","preCode":"    private SpanObject.Builder createExitSpan(long startTimestamp, boolean isPrepare) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Exit);\n        span.setSpanLayer(SpanLayer.Database);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 550);\n        span.setEndTime(startTimestamp + 1000);\n        span.setComponentId(ComponentsDefine.MONGO_DRIVER.getId());\n        span.setIsError(true);\n\n        if (isPrepare) {\n            span.setOperationName(\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\");\n            span.setPeer(\"localhost:27017\");\n        } else {\n            span.setOperationNameId(7);\n            span.setPeerId(3);\n        }\n        return span;\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceBMock.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"}],"commitId":"6c92fc548459deb7a365020bd02bcc54fc56a593","commitMessage":"@@@1. Delete service component indicator. (#1809)\n\n2. Make service relation and endpoint relation to record component id.\n3. Delete service mapping indicator.\n4. Make service inventory to record mapping service id.\n5. Refactor global topology query and service topology query.","date":"2018-10-25 11:19:31","modifiedFileCount":"36","status":"B","submitter":"??? pengys"},{"authorTime":"2019-02-12 23:13:02","codes":[{"authorDate":"2018-10-25 11:19:31","commitOrder":2,"curCode":"    private SpanObject.Builder createLocalSpan(long startTimestamp, boolean isPrepare) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Local);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 100);\n        span.setEndTime(startTimestamp + 500);\n        if (isPrepare) {\n            span.setOperationName(\"org.apache.skywalking.Local.do\");\n        } else {\n            span.setOperationNameId(3);\n        }\n        span.setIsError(false);\n        return span;\n    }\n","date":"2018-10-25 11:19:31","endLine":100,"groupId":"6456","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createLocalSpan","params":"(longstartTimestamp@booleanisPrepare)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/4d/a1f80f581004f67310f6822df7d11fd706e707.src","preCode":"    private SpanObject.Builder createLocalSpan(long startTimestamp, boolean isPrepare) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Local);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 100);\n        span.setEndTime(startTimestamp + 500);\n        if (isPrepare) {\n            span.setOperationName(\"org.apache.skywalking.Local.do\");\n        } else {\n            span.setOperationNameId(3);\n        }\n        span.setIsError(false);\n        return span;\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceAMock.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"N"},{"authorDate":"2019-02-12 23:13:02","commitOrder":2,"curCode":"    private SpanObject.Builder createExitSpan(long startTimestamp, boolean isPrepare) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Exit);\n        span.setSpanLayer(SpanLayer.Database);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 550);\n        span.setEndTime(startTimestamp + 1500);\n        span.setComponentId(ComponentsDefine.MONGO_DRIVER.getId());\n        span.setIsError(true);\n        span.addTags(KeyWithStringValue.newBuilder().setKey(\"db.statement\").setValue(\"select * from database where complex = 1;\").build());\n        span.addTags(KeyWithStringValue.newBuilder().setKey(\"db.type\").setValue(\"mongodb\").build());\n\n        if (isPrepare) {\n            span.setOperationName(\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\");\n            span.setPeer(\"localhost:27017\");\n        } else {\n            span.setOperationNameId(7);\n            span.setPeerId(3);\n        }\n        return span;\n    }\n","date":"2019-02-12 23:13:02","endLine":130,"groupId":"5470","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createExitSpan","params":"(longstartTimestamp@booleanisPrepare)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/94/9681552120bd5a4a51b80a8a8e188b7a49229b.src","preCode":"    private SpanObject.Builder createExitSpan(long startTimestamp, boolean isPrepare) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Exit);\n        span.setSpanLayer(SpanLayer.Database);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 550);\n        span.setEndTime(startTimestamp + 1000);\n        span.setComponentId(ComponentsDefine.MONGO_DRIVER.getId());\n        span.setIsError(true);\n\n        if (isPrepare) {\n            span.setOperationName(\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\");\n            span.setPeer(\"localhost:27017\");\n        } else {\n            span.setOperationNameId(7);\n            span.setPeerId(3);\n        }\n        return span;\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceBMock.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"4babd6ff73ee32535f09eb31ecbda736e3052a32","commitMessage":"@@@Support Top sql (#2239)\n\n* The prototype of topN sql worker.\n\n* Add scope and new manual dispatcher.\n\n* no message\n\n* Finish topN persistence codes. Not test yet. And query have not added.\n\n* Finish the top n database statement persistent.\n\n* Support different slow thresholds for different db types.\n\n* Fix wrong db default threshold\n\n* Finish new query protocol binding.\n\n* Provide query empty implementation and sync ui.\n\n* Finish all codes.  hope it works :P\nI will run the tests tonight.\n\n* Fix\n\n* Fix\n\n* Fix a startup issue.\n\n* Add time bucket to persistent.\n\n* Fix wrong query result column name.\n\n* Fix Database query.\n\n* Fix checkstyle.\n\n* Fix wrong order logic.  and add a test case to verify.  to fix https://github.com/apache/incubator-skywalking/pull/2239#discussion_r255948249\n","date":"2019-02-12 23:13:02","modifiedFileCount":"21","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-12-15 19:15:47","codes":[{"authorDate":"2019-12-15 19:15:47","commitOrder":3,"curCode":"    private SpanObject.Builder createLocalSpan(long startTimestamp, boolean isPrepare) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Local);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 100);\n        span.setEndTime(startTimestamp + 500);\n        span.setOperationName(\"org.apache.skywalking.Local.do\");\n        span.setIsError(false);\n        return span;\n    }\n","date":"2019-12-15 19:15:47","endLine":96,"groupId":"6456","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createLocalSpan","params":"(longstartTimestamp@booleanisPrepare)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/dd/6d25ada7e2c18ba241a74002288742cbd4d246.src","preCode":"    private SpanObject.Builder createLocalSpan(long startTimestamp, boolean isPrepare) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Local);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 100);\n        span.setEndTime(startTimestamp + 500);\n        if (isPrepare) {\n            span.setOperationName(\"org.apache.skywalking.Local.do\");\n        } else {\n            span.setOperationNameId(3);\n        }\n        span.setIsError(false);\n        return span;\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceAMock.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2019-12-15 19:15:47","commitOrder":3,"curCode":"    private SpanObject.Builder createExitSpan(long startTimestamp, boolean isPrepare) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Exit);\n        span.setSpanLayer(SpanLayer.Database);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 550);\n        span.setEndTime(startTimestamp + 1500);\n        span.setComponentId(ComponentsDefine.MONGO_DRIVER.getId());\n        span.setIsError(true);\n        span.addTags(KeyWithStringValue.newBuilder().setKey(\"db.statement\").setValue(\"select * from database where complex = 1;\").build());\n        span.addTags(KeyWithStringValue.newBuilder().setKey(\"db.type\").setValue(\"mongodb\").build());\n\n        span.setOperationName(\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\");\n        if (isPrepare) {\n            span.setPeer(\"localhost:27017\");\n        } else {\n            span.setPeerId(3);\n        }\n        return span;\n    }\n","date":"2019-12-15 19:15:47","endLine":129,"groupId":"5470","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createExitSpan","params":"(longstartTimestamp@booleanisPrepare)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/73/893ee1e0202943a2803f0467e2732d1b7bedb4.src","preCode":"    private SpanObject.Builder createExitSpan(long startTimestamp, boolean isPrepare) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Exit);\n        span.setSpanLayer(SpanLayer.Database);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 550);\n        span.setEndTime(startTimestamp + 1500);\n        span.setComponentId(ComponentsDefine.MONGO_DRIVER.getId());\n        span.setIsError(true);\n        span.addTags(KeyWithStringValue.newBuilder().setKey(\"db.statement\").setValue(\"select * from database where complex = 1;\").build());\n        span.addTags(KeyWithStringValue.newBuilder().setKey(\"db.type\").setValue(\"mongodb\").build());\n\n        if (isPrepare) {\n            span.setOperationName(\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\");\n            span.setPeer(\"localhost:27017\");\n        } else {\n            span.setOperationNameId(7);\n            span.setPeerId(3);\n        }\n        return span;\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceBMock.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"4e501328171f434c74144d373be6df0264f43a24","commitMessage":"@@@Remove the local/exit span register mechanism in Java agent scenario (#4059)\n\n* Remove the local span and exit span register mechanism in Java agent scenario.\n\n* Fix config.  plugin.  and document.  as exit span is not required register anymore.\n\n* Try to fix the test case expected data due to no register for exit span.\n\n* Fix toolkit case.\n\n* Remove exit span from plugin test framework document.\n\n* Update protocol.  FAQ.  and CHANGELOG documents to highlight this change.\n\n* Fix NPE when no entry span in the whole segment. Set endpoint to null in segment entity.\n\n* Fix the snapshot and add inexistence operation name id.\n\n* Fix several async cases.\n\n* Fix undertow test case.\n\n* Fix wrong error log name.\n\n* Keep name consistent with 6.x concepts.\n\n* Try to fix 3 async scenarios.\n\n* Fix okhttp case.\n\n* Fix Spring Async case.\n\n* Fix another NPE\n\n* Fix NPE when first span has no endpoint id when it is local or exit span.\n\n* Still fill first operation name when no endpoint id.\n","date":"2019-12-15 19:15:47","modifiedFileCount":"21","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-02-16 09:03:30","codes":[{"authorDate":"2020-02-16 09:03:30","commitOrder":4,"curCode":"    private SpanObjectV2.Builder createLocalSpan(long startTimestamp, boolean isPrepare) {\n        SpanObjectV2.Builder span = SpanObjectV2.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Local);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 100);\n        span.setEndTime(startTimestamp + 500);\n        span.setOperationName(\"org.apache.skywalking.Local.do\");\n        span.setIsError(false);\n        return span;\n    }\n","date":"2020-02-16 09:03:30","endLine":98,"groupId":"6456","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createLocalSpan","params":"(longstartTimestamp@booleanisPrepare)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ba/6660a31fcc512cac4373613142dabdc462067f.src","preCode":"    private SpanObject.Builder createLocalSpan(long startTimestamp, boolean isPrepare) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Local);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 100);\n        span.setEndTime(startTimestamp + 500);\n        span.setOperationName(\"org.apache.skywalking.Local.do\");\n        span.setIsError(false);\n        return span;\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceAMock.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-02-16 09:03:30","commitOrder":4,"curCode":"    private SpanObjectV2.Builder createExitSpan(long startTimestamp, boolean isPrepare) {\n        SpanObjectV2.Builder span = SpanObjectV2.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Exit);\n        span.setSpanLayer(SpanLayer.Database);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 550);\n        span.setEndTime(startTimestamp + 1500);\n        span.setComponentId(ComponentsDefine.MONGO_DRIVER.getId());\n        span.setIsError(true);\n        span.addTags(KeyStringValuePair.newBuilder()\n                                       .setKey(\"db.statement\")\n                                       .setValue(\"select * from database where complex = 1;\")\n                                       .build());\n        span.addTags(KeyStringValuePair.newBuilder().setKey(\"db.type\").setValue(\"mongodb\").build());\n\n        span.setOperationName(\n            \"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\");\n        if (isPrepare) {\n            span.setPeer(\"localhost:27017\");\n        } else {\n            span.setPeerId(3);\n        }\n        return span;\n    }\n","date":"2020-02-16 09:03:30","endLine":142,"groupId":"5470","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createExitSpan","params":"(longstartTimestamp@booleanisPrepare)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/da/26ab7f0624ba61bdf5dcd1735f18870d3a3861.src","preCode":"    private SpanObject.Builder createExitSpan(long startTimestamp, boolean isPrepare) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Exit);\n        span.setSpanLayer(SpanLayer.Database);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 550);\n        span.setEndTime(startTimestamp + 1500);\n        span.setComponentId(ComponentsDefine.MONGO_DRIVER.getId());\n        span.setIsError(true);\n        span.addTags(KeyWithStringValue.newBuilder().setKey(\"db.statement\").setValue(\"select * from database where complex = 1;\").build());\n        span.addTags(KeyWithStringValue.newBuilder().setKey(\"db.type\").setValue(\"mongodb\").build());\n\n        span.setOperationName(\"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\");\n        if (isPrepare) {\n            span.setPeer(\"localhost:27017\");\n        } else {\n            span.setPeerId(3);\n        }\n        return span;\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceBMock.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"329f7e150b9cb25624d627497a7a8c620cf92f68","commitMessage":"@@@Support Downsampling Data Packing feature in ES storage implementation (#4364)\n\n* Support day/hour/minute metrics merging into one index. Reduce the number of index 50%.\n\n","date":"2020-02-16 09:03:30","modifiedFileCount":"6","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":5,"curCode":"    private SpanObject.Builder createLocalSpan(long startTimestamp) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Local);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 100);\n        span.setEndTime(startTimestamp + 500);\n        span.setOperationName(\"org.apache.skywalking.Local.do\");\n        span.setIsError(false);\n        return span;\n    }\n","date":"2020-04-10 11:03:24","endLine":78,"groupId":"10894","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createLocalSpan","params":"(longstartTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f7/2ec1b14ecb59bf5931363ec1b736afa9544438.src","preCode":"    private SpanObjectV2.Builder createLocalSpan(long startTimestamp, boolean isPrepare) {\n        SpanObjectV2.Builder span = SpanObjectV2.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Local);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 100);\n        span.setEndTime(startTimestamp + 500);\n        span.setOperationName(\"org.apache.skywalking.Local.do\");\n        span.setIsError(false);\n        return span;\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceAMock.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":5,"curCode":"    private SpanObject.Builder createExitSpan(long startTimestamp) {\n        SpanObject.Builder span = SpanObject.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Exit);\n        span.setSpanLayer(SpanLayer.Database);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 550);\n        span.setEndTime(startTimestamp + 1500);\n        span.setComponentId(ComponentsDefine.MONGO_DRIVER.getId());\n        span.setIsError(true);\n        span.addTags(KeyStringValuePair.newBuilder()\n                                       .setKey(\"db.statement\")\n                                       .setValue(\"select * from database where complex = 1;\")\n                                       .build());\n        span.addTags(KeyStringValuePair.newBuilder().setKey(\"db.type\").setValue(\"mongodb\").build());\n\n        span.setOperationName(\n            \"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\");\n        span.setPeer(\"localhost:27017\");\n        return span;\n    }\n","date":"2020-04-10 11:03:24","endLine":110,"groupId":"10894","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"createExitSpan","params":"(longstartTimestamp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/78/c160c90907b0782368e586df3f3019565f4499.src","preCode":"    private SpanObjectV2.Builder createExitSpan(long startTimestamp, boolean isPrepare) {\n        SpanObjectV2.Builder span = SpanObjectV2.newBuilder();\n        span.setSpanId(1);\n        span.setSpanType(SpanType.Exit);\n        span.setSpanLayer(SpanLayer.Database);\n        span.setParentSpanId(0);\n        span.setStartTime(startTimestamp + 550);\n        span.setEndTime(startTimestamp + 1500);\n        span.setComponentId(ComponentsDefine.MONGO_DRIVER.getId());\n        span.setIsError(true);\n        span.addTags(KeyStringValuePair.newBuilder()\n                                       .setKey(\"db.statement\")\n                                       .setValue(\"select * from database where complex = 1;\")\n                                       .build());\n        span.addTags(KeyStringValuePair.newBuilder().setKey(\"db.type\").setValue(\"mongodb\").build());\n\n        span.setOperationName(\n            \"mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]\");\n        if (isPrepare) {\n            span.setPeer(\"localhost:27017\");\n        } else {\n            span.setPeerId(3);\n        }\n        return span;\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/mock/ServiceBMock.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"}]
