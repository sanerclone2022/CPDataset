[{"authorTime":"2021-05-30 22:35:55","codes":[{"authorDate":"2021-01-14 09:49:11","commitOrder":5,"curCode":"    public StreamObserver<SegmentObject> collect(StreamObserver<Commands> responseObserver) {\n        return new StreamObserver<SegmentObject>() {\n            @Override\n            public void onNext(SegmentObject segment) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"received segment in streaming\");\n                }\n\n                HistogramMetrics.Timer timer = histogram.createTimer();\n                try {\n                    segmentParserService.send(segment);\n                } catch (Exception e) {\n                    errorCounter.inc();\n                    log.error(e.getMessage(), e);\n                } finally {\n                    timer.finish();\n                }\n            }\n\n            @Override\n            public void onError(Throwable throwable) {\n                log.error(throwable.getMessage(), throwable);\n                responseObserver.onCompleted();\n            }\n\n            @Override\n            public void onCompleted() {\n                responseObserver.onNext(Commands.newBuilder().build());\n                responseObserver.onCompleted();\n            }\n        };\n    }\n","date":"2021-01-14 09:49:11","endLine":95,"groupId":"5498","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"collect","params":"(StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/19/4cbe1958df94ad2691a75d4b847823baccdf1a.src","preCode":"    public StreamObserver<SegmentObject> collect(StreamObserver<Commands> responseObserver) {\n        return new StreamObserver<SegmentObject>() {\n            @Override\n            public void onNext(SegmentObject segment) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"received segment in streaming\");\n                }\n\n                HistogramMetrics.Timer timer = histogram.createTimer();\n                try {\n                    segmentParserService.send(segment);\n                } catch (Exception e) {\n                    errorCounter.inc();\n                    log.error(e.getMessage(), e);\n                } finally {\n                    timer.finish();\n                }\n            }\n\n            @Override\n            public void onError(Throwable throwable) {\n                log.error(throwable.getMessage(), throwable);\n                responseObserver.onCompleted();\n            }\n\n            @Override\n            public void onCompleted() {\n                responseObserver.onNext(Commands.newBuilder().build());\n                responseObserver.onCompleted();\n            }\n        };\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/grpc/TraceSegmentReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"NB"},{"authorDate":"2021-05-30 22:35:55","commitOrder":5,"curCode":"    public StreamObserver<LogData> collect(final StreamObserver<Commands> responseObserver) {\n        return new StreamObserver<LogData>() {\n\n            private String serviceName;\n\n            \r\n\r\n\n            private void setServiceName(LogData.Builder builder) {\n                if (StringUtil.isEmpty(serviceName) && StringUtil.isNotEmpty(builder.getService())) {\n                    serviceName = builder.getService();\n                } else if (StringUtil.isNotEmpty(serviceName)) {\n                    builder.setService(serviceName);\n                }\n            }\n\n            @Override\n            public void onNext(final LogData logData) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"received log in streaming\");\n                }\n                HistogramMetrics.Timer timer = histogram.createTimer();\n                try {\n                    LogData.Builder builder = logData.toBuilder();\n                    setServiceName(builder);\n                    logAnalyzerService.doAnalysis(builder);\n                } catch (Exception e) {\n                    errorCounter.inc();\n                    log.error(e.getMessage(), e);\n                } finally {\n                    timer.finish();\n                }\n            }\n\n            @Override\n            public void onError(final Throwable throwable) {\n                log.error(throwable.getMessage(), throwable);\n                responseObserver.onCompleted();\n            }\n\n            @Override\n            public void onCompleted() {\n                responseObserver.onNext(Commands.newBuilder().build());\n                responseObserver.onCompleted();\n            }\n        };\n    }\n","date":"2021-05-30 22:35:55","endLine":113,"groupId":"5802","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"collect","params":"(finalStreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e4/7b363f10537582d46513d221f70f0a972583d8.src","preCode":"    public StreamObserver<LogData> collect(final StreamObserver<Commands> responseObserver) {\n        return new StreamObserver<LogData>() {\n\n            private String serviceName;\n\n            \r\n\r\n\n            private void setServiceName(LogData.Builder builder) {\n                if (StringUtil.isEmpty(serviceName) && StringUtil.isNotEmpty(builder.getService())) {\n                    serviceName = builder.getService();\n                } else if (StringUtil.isNotEmpty(serviceName)) {\n                    builder.setService(serviceName);\n                }\n            }\n\n            @Override\n            public void onNext(final LogData logData) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"received log in streaming\");\n                }\n                HistogramMetrics.Timer timer = histogram.createTimer();\n                try {\n                    LogData.Builder builder = logData.toBuilder();\n                    setServiceName(builder);\n                    logAnalyzerService.doAnalysis(builder);\n                } catch (Exception e) {\n                    errorCounter.inc();\n                    log.error(e.getMessage(), e);\n                } finally {\n                    timer.finish();\n                }\n            }\n\n            @Override\n            public void onError(final Throwable throwable) {\n                log.error(throwable.getMessage(), throwable);\n                responseObserver.onCompleted();\n            }\n\n            @Override\n            public void onCompleted() {\n                responseObserver.onNext(Commands.newBuilder().build());\n                responseObserver.onCompleted();\n            }\n        };\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-log-recevier-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/log/provider/handler/grpc/LogReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"bd38ec492e013fec7ffc1359c9c8a7e9e1d52389","commitMessage":"@@@Add HTTP implementation of logs reporting protocol (#7038)\n\n","date":"2021-05-30 22:35:55","modifiedFileCount":"1","status":"M","submitter":"Zhenxu"},{"authorTime":"2021-07-13 18:44:52","codes":[{"authorDate":"2021-01-14 09:49:11","commitOrder":6,"curCode":"    public StreamObserver<SegmentObject> collect(StreamObserver<Commands> responseObserver) {\n        return new StreamObserver<SegmentObject>() {\n            @Override\n            public void onNext(SegmentObject segment) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"received segment in streaming\");\n                }\n\n                HistogramMetrics.Timer timer = histogram.createTimer();\n                try {\n                    segmentParserService.send(segment);\n                } catch (Exception e) {\n                    errorCounter.inc();\n                    log.error(e.getMessage(), e);\n                } finally {\n                    timer.finish();\n                }\n            }\n\n            @Override\n            public void onError(Throwable throwable) {\n                log.error(throwable.getMessage(), throwable);\n                responseObserver.onCompleted();\n            }\n\n            @Override\n            public void onCompleted() {\n                responseObserver.onNext(Commands.newBuilder().build());\n                responseObserver.onCompleted();\n            }\n        };\n    }\n","date":"2021-01-14 09:49:11","endLine":95,"groupId":"10899","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"collect","params":"(StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/19/4cbe1958df94ad2691a75d4b847823baccdf1a.src","preCode":"    public StreamObserver<SegmentObject> collect(StreamObserver<Commands> responseObserver) {\n        return new StreamObserver<SegmentObject>() {\n            @Override\n            public void onNext(SegmentObject segment) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"received segment in streaming\");\n                }\n\n                HistogramMetrics.Timer timer = histogram.createTimer();\n                try {\n                    segmentParserService.send(segment);\n                } catch (Exception e) {\n                    errorCounter.inc();\n                    log.error(e.getMessage(), e);\n                } finally {\n                    timer.finish();\n                }\n            }\n\n            @Override\n            public void onError(Throwable throwable) {\n                log.error(throwable.getMessage(), throwable);\n                responseObserver.onCompleted();\n            }\n\n            @Override\n            public void onCompleted() {\n                responseObserver.onNext(Commands.newBuilder().build());\n                responseObserver.onCompleted();\n            }\n        };\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/grpc/TraceSegmentReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2021-07-13 18:44:52","commitOrder":6,"curCode":"    public StreamObserver<LogData> collect(final StreamObserver<Commands> responseObserver) {\n        return new StreamObserver<LogData>() {\n\n            private String serviceName;\n\n            \r\n\r\n\n            private void setServiceName(LogData.Builder builder) {\n                if (StringUtil.isEmpty(serviceName) && StringUtil.isNotEmpty(builder.getService())) {\n                    serviceName = builder.getService();\n                } else if (StringUtil.isNotEmpty(serviceName)) {\n                    builder.setService(serviceName);\n                }\n            }\n\n            @Override\n            public void onNext(final LogData logData) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"received log in streaming\");\n                }\n                HistogramMetrics.Timer timer = histogram.createTimer();\n                try {\n                    LogData.Builder builder = logData.toBuilder();\n                    setServiceName(builder);\n                    logAnalyzerService.doAnalysis(builder, null);\n                } catch (Exception e) {\n                    errorCounter.inc();\n                    log.error(e.getMessage(), e);\n                } finally {\n                    timer.finish();\n                }\n            }\n\n            @Override\n            public void onError(final Throwable throwable) {\n                log.error(throwable.getMessage(), throwable);\n                responseObserver.onCompleted();\n            }\n\n            @Override\n            public void onCompleted() {\n                responseObserver.onNext(Commands.newBuilder().build());\n                responseObserver.onCompleted();\n            }\n        };\n    }\n","date":"2021-07-13 18:44:52","endLine":113,"groupId":"10899","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"collect","params":"(finalStreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/27/6037683830bd5de0791b94951dbeb33d2b7e4e.src","preCode":"    public StreamObserver<LogData> collect(final StreamObserver<Commands> responseObserver) {\n        return new StreamObserver<LogData>() {\n\n            private String serviceName;\n\n            \r\n\r\n\n            private void setServiceName(LogData.Builder builder) {\n                if (StringUtil.isEmpty(serviceName) && StringUtil.isNotEmpty(builder.getService())) {\n                    serviceName = builder.getService();\n                } else if (StringUtil.isNotEmpty(serviceName)) {\n                    builder.setService(serviceName);\n                }\n            }\n\n            @Override\n            public void onNext(final LogData logData) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"received log in streaming\");\n                }\n                HistogramMetrics.Timer timer = histogram.createTimer();\n                try {\n                    LogData.Builder builder = logData.toBuilder();\n                    setServiceName(builder);\n                    logAnalyzerService.doAnalysis(builder);\n                } catch (Exception e) {\n                    errorCounter.inc();\n                    log.error(e.getMessage(), e);\n                } finally {\n                    timer.finish();\n                }\n            }\n\n            @Override\n            public void onError(final Throwable throwable) {\n                log.error(throwable.getMessage(), throwable);\n                responseObserver.onCompleted();\n            }\n\n            @Override\n            public void onCompleted() {\n                responseObserver.onNext(Commands.newBuilder().build());\n                responseObserver.onCompleted();\n            }\n        };\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-log-recevier-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/log/provider/handler/grpc/LogReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"982001c63aed54623c94b017afb873df0d679002","commitMessage":"@@@perf: optimize Envoy access log persistence performance (#7290)\n\n","date":"2021-07-13 18:44:52","modifiedFileCount":"15","status":"M","submitter":"kezhenxu94"}]
