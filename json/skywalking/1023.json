[{"authorTime":"2020-03-16 23:45:14","codes":[{"authorDate":"2020-03-16 23:45:14","commitOrder":1,"curCode":"    private void verifyNodes(Topology topology) {\n        for (int i = 0; i < getNodes().size(); i++) {\n            boolean matched = false;\n            for (int j = 0; j < topology.getNodes().size(); j++) {\n                try {\n                    getNodes().get(i).verify(topology.getNodes().get(j));\n                    matched = true;\n                } catch (Throwable ignored) {\n                }\n            }\n            if (!matched) {\n                fail(\"\\nExpected: %s\\nActual: %s\", getNodes(), topology.getNodes());\n            }\n        }\n    }\n","date":"2020-03-16 23:45:14","endLine":65,"groupId":"2911","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyNodes","params":"(Topologytopology)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/e4a45222e65c6b4276f9eb30bfb55ffe8a2974.src","preCode":"    private void verifyNodes(Topology topology) {\n        for (int i = 0; i < getNodes().size(); i++) {\n            boolean matched = false;\n            for (int j = 0; j < topology.getNodes().size(); j++) {\n                try {\n                    getNodes().get(i).verify(topology.getNodes().get(j));\n                    matched = true;\n                } catch (Throwable ignored) {\n                }\n            }\n            if (!matched) {\n                fail(\"\\nExpected: %s\\nActual: %s\", getNodes(), topology.getNodes());\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/topo/TopoMatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2020-03-16 23:45:14","commitOrder":1,"curCode":"    private void verifyNodes(ServiceInstanceTopology topoData) {\n        for (int i = 0; i < getNodes().size(); i++) {\n            boolean matched = false;\n            for (int j = 0; j < topoData.getNodes().size(); j++) {\n                try {\n                    getNodes().get(i).verify(topoData.getNodes().get(j));\n                    matched = true;\n                } catch (Throwable ignored) {\n                }\n            }\n            if (!matched) {\n                fail(\"\\nExpected: %s\\nActual: %s\", getNodes(), topoData.getNodes());\n            }\n        }\n    }\n","date":"2020-03-16 23:45:14","endLine":65,"groupId":"2911","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyNodes","params":"(ServiceInstanceTopologytopoData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/64/02cc5ee525d959f7d51a55585d827966b1fba5.src","preCode":"    private void verifyNodes(ServiceInstanceTopology topoData) {\n        for (int i = 0; i < getNodes().size(); i++) {\n            boolean matched = false;\n            for (int j = 0; j < topoData.getNodes().size(); j++) {\n                try {\n                    getNodes().get(i).verify(topoData.getNodes().get(j));\n                    matched = true;\n                } catch (Throwable ignored) {\n                }\n            }\n            if (!matched) {\n                fail(\"\\nExpected: %s\\nActual: %s\", getNodes(), topoData.getNodes());\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/topo/ServiceInstanceTopologyMatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"}],"commitId":"dcd66ee6e940bdc9a7ecf90415929bfd48a3a284","commitMessage":"@@@Rewrite the E2E test framework and tests (#4510)\n\nMotivation:\n\nAccording the feedback from the community.  the e2e tests are hard for\nthem to understand and get them started.  so this pull request aims to\nrewrite the e2e tests with some improvements:\n\n- debuggable locally.  now you can run every individual case directly\ninside the IDE.  just like running a plain unit test.\n\n- same functionalities of multiple counterparts share the same codes. \ncases like different storages and cluster coordinators share the same\ncodes.  easy to add more similar cases.\n\n- the \"end\" now extends to the Doccker images.  meaning that some bugs\nlike #4483 and #4471 can be more easily and early to be discovered.\n\n- codes style and license headers are checked\n\nModifications:\n\n- adopt jupeter (a.k.a junit 5).  testcontainers as the new test\nframework.  all containers are orchestrated by docker-compose.yml. \nwell-known technology that developers should be familiar with.\n\n- rewrite all test cases and verify them.\n\n- reorganize the workflows in GitHub Actions.\n\nResult:\n\n- new e2e test should be easy to add.\n\n- closes https://github.com/apache/skywalking/issues/4472","date":"2020-03-16 23:45:14","modifiedFileCount":"3","status":"B","submitter":"kezhenxu94"},{"authorTime":"2020-03-16 23:45:14","codes":[{"authorDate":"2020-12-24 16:07:07","commitOrder":2,"curCode":"    private void verifyNodes(Topology topology) {\n        for (int i = 0; i < getNodes().size(); i++) {\n            boolean matched = false;\n            for (int j = 0; j < topology.getNodes().size(); j++) {\n                try {\n                    getNodes().get(i).verify(topology.getNodes().get(j));\n                    matched = true;\n                } catch (Throwable e) {\n                    e.printStackTrace();\n                }\n            }\n            if (!matched) {\n                fail(\"\\nExpected: %s\\nActual: %s\", getNodes(), topology.getNodes());\n            }\n        }\n    }\n","date":"2020-12-24 16:07:07","endLine":66,"groupId":"2911","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyNodes","params":"(Topologytopology)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/dc/6ab3dc4e060e35ea1e9c4c979c8c4027a5eab1.src","preCode":"    private void verifyNodes(Topology topology) {\n        for (int i = 0; i < getNodes().size(); i++) {\n            boolean matched = false;\n            for (int j = 0; j < topology.getNodes().size(); j++) {\n                try {\n                    getNodes().get(i).verify(topology.getNodes().get(j));\n                    matched = true;\n                } catch (Throwable ignored) {\n                }\n            }\n            if (!matched) {\n                fail(\"\\nExpected: %s\\nActual: %s\", getNodes(), topology.getNodes());\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/topo/TopoMatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-03-16 23:45:14","commitOrder":2,"curCode":"    private void verifyNodes(ServiceInstanceTopology topoData) {\n        for (int i = 0; i < getNodes().size(); i++) {\n            boolean matched = false;\n            for (int j = 0; j < topoData.getNodes().size(); j++) {\n                try {\n                    getNodes().get(i).verify(topoData.getNodes().get(j));\n                    matched = true;\n                } catch (Throwable ignored) {\n                }\n            }\n            if (!matched) {\n                fail(\"\\nExpected: %s\\nActual: %s\", getNodes(), topoData.getNodes());\n            }\n        }\n    }\n","date":"2020-03-16 23:45:14","endLine":65,"groupId":"2911","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyNodes","params":"(ServiceInstanceTopologytopoData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/64/02cc5ee525d959f7d51a55585d827966b1fba5.src","preCode":"    private void verifyNodes(ServiceInstanceTopology topoData) {\n        for (int i = 0; i < getNodes().size(); i++) {\n            boolean matched = false;\n            for (int j = 0; j < topoData.getNodes().size(); j++) {\n                try {\n                    getNodes().get(i).verify(topoData.getNodes().get(j));\n                    matched = true;\n                } catch (Throwable ignored) {\n                }\n            }\n            if (!matched) {\n                fail(\"\\nExpected: %s\\nActual: %s\", getNodes(), topoData.getNodes());\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/topo/ServiceInstanceTopologyMatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"d4175d84b18eb8dba5407e30aa20ec6dfe117bdc","commitMessage":"@@@test: add e2e for NodeJS agent (#6073)\n\n","date":"2020-12-24 16:07:07","modifiedFileCount":"1","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2020-03-16 23:45:14","codes":[{"authorDate":"2021-01-14 09:49:11","commitOrder":3,"curCode":"    private void verifyNodes(Topology topology) {\n        for (int i = 0; i < getNodes().size(); i++) {\n            boolean matched = false;\n            for (int j = 0; j < topology.getNodes().size(); j++) {\n                try {\n                    getNodes().get(i).verify(topology.getNodes().get(j));\n                    matched = true;\n                } catch (Throwable ignore) {\n                }\n            }\n            if (!matched) {\n                fail(\"\\nExpected: %s\\nActual: %s\", getNodes(), topology.getNodes());\n            }\n        }\n    }\n","date":"2021-01-14 09:49:11","endLine":65,"groupId":"1023","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"verifyNodes","params":"(Topologytopology)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e0/1cab97fc15ac40b72786950a992bc413afa587.src","preCode":"    private void verifyNodes(Topology topology) {\n        for (int i = 0; i < getNodes().size(); i++) {\n            boolean matched = false;\n            for (int j = 0; j < topology.getNodes().size(); j++) {\n                try {\n                    getNodes().get(i).verify(topology.getNodes().get(j));\n                    matched = true;\n                } catch (Throwable e) {\n                    e.printStackTrace();\n                }\n            }\n            if (!matched) {\n                fail(\"\\nExpected: %s\\nActual: %s\", getNodes(), topology.getNodes());\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/topo/TopoMatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-03-16 23:45:14","commitOrder":3,"curCode":"    private void verifyNodes(ServiceInstanceTopology topoData) {\n        for (int i = 0; i < getNodes().size(); i++) {\n            boolean matched = false;\n            for (int j = 0; j < topoData.getNodes().size(); j++) {\n                try {\n                    getNodes().get(i).verify(topoData.getNodes().get(j));\n                    matched = true;\n                } catch (Throwable ignored) {\n                }\n            }\n            if (!matched) {\n                fail(\"\\nExpected: %s\\nActual: %s\", getNodes(), topoData.getNodes());\n            }\n        }\n    }\n","date":"2020-03-16 23:45:14","endLine":65,"groupId":"1023","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyNodes","params":"(ServiceInstanceTopologytopoData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/64/02cc5ee525d959f7d51a55585d827966b1fba5.src","preCode":"    private void verifyNodes(ServiceInstanceTopology topoData) {\n        for (int i = 0; i < getNodes().size(); i++) {\n            boolean matched = false;\n            for (int j = 0; j < topoData.getNodes().size(); j++) {\n                try {\n                    getNodes().get(i).verify(topoData.getNodes().get(j));\n                    matched = true;\n                } catch (Throwable ignored) {\n                }\n            }\n            if (!matched) {\n                fail(\"\\nExpected: %s\\nActual: %s\", getNodes(), topoData.getNodes());\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/topo/ServiceInstanceTopologyMatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"}],"commitId":"15452025c65dd6934bd9d6c8a930961b0f960594","commitMessage":"@@@Log collecting and query implementation (#6120)\n\n","date":"2021-01-14 09:49:11","modifiedFileCount":"51","status":"M","submitter":"zhang-wei"}]
