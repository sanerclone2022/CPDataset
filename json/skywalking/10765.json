[{"authorTime":"2021-02-10 22:40:07","codes":[{"authorDate":"2020-11-30 17:28:21","commitOrder":4,"curCode":"    public static List<MeterConfig> loadConfig(String path, String[] fileNames) throws ModuleStartException {\n        if (fileNames == null || fileNames.length == 0) {\n            return Collections.emptyList();\n        }\n\n        File[] configs;\n        try {\n            configs = ResourceUtils.getPathFiles(path, fileNames);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(\"Load meter configs failed\", e);\n        }\n\n        return Arrays.stream(configs)\n            .map(f -> {\n                try (Reader r = new FileReader(f)) {\n                    return new Yaml().loadAs(r, MeterConfig.class);\n                } catch (IOException e) {\n                    log.warn(\"Reading file {} failed\", f, e);\n                }\n                return null;\n            })\n            .filter(Objects::nonNull)\n            .collect(Collectors.toList());\n    }\n","date":"2020-11-30 17:28:21","endLine":69,"groupId":"6521","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loadConfig","params":"(Stringpath@String[]fileNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/09/b5399198f8a498efa86ed7a2e2b3b5fd1cf5a3.src","preCode":"    public static List<MeterConfig> loadConfig(String path, String[] fileNames) throws ModuleStartException {\n        if (fileNames == null || fileNames.length == 0) {\n            return Collections.emptyList();\n        }\n\n        File[] configs;\n        try {\n            configs = ResourceUtils.getPathFiles(path, fileNames);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(\"Load meter configs failed\", e);\n        }\n\n        return Arrays.stream(configs)\n            .map(f -> {\n                try (Reader r = new FileReader(f)) {\n                    return new Yaml().loadAs(r, MeterConfig.class);\n                } catch (IOException e) {\n                    log.warn(\"Reading file {} failed\", f, e);\n                }\n                return null;\n            })\n            .filter(Objects::nonNull)\n            .collect(Collectors.toList());\n    }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/meter/config/MeterConfigs.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"NB"},{"authorDate":"2021-02-10 22:40:07","commitOrder":4,"curCode":"    public static List<ZabbixConfig> loadConfigs(String path, List<String> fileNames) throws ModuleStartException {\n        if (CollectionUtils.isEmpty(fileNames)) {\n            return Collections.emptyList();\n        }\n\n        File[] configs;\n        try {\n            configs = ResourceUtils.getPathFiles(path);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(\"Load zabbix configs failed\", e);\n        }\n\n        return Arrays.stream(configs).filter(File::isFile)\n            .map(f -> {\n                String fileName = f.getName();\n                int dotIndex = fileName.lastIndexOf('.');\n                fileName = (dotIndex == -1) ? fileName : fileName.substring(0, dotIndex);\n                if (!fileNames.contains(fileName)) {\n                    return null;\n                }\n                try (Reader r = new FileReader(f)) {\n                    return new Yaml().loadAs(r, ZabbixConfig.class);\n                } catch (IOException e) {\n                    log.warn(\"Reading file {} failed\", f, e);\n                }\n                return null;\n            })\n            .filter(Objects::nonNull)\n            .collect(Collectors.toList());\n    }\n","date":"2021-02-10 22:40:07","endLine":70,"groupId":"1829","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"loadConfigs","params":"(Stringpath@List<String>fileNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9d/5c5730f058b01d9c21422dd829df855374a091.src","preCode":"    public static List<ZabbixConfig> loadConfigs(String path, List<String> fileNames) throws ModuleStartException {\n        if (CollectionUtils.isEmpty(fileNames)) {\n            return Collections.emptyList();\n        }\n\n        File[] configs;\n        try {\n            configs = ResourceUtils.getPathFiles(path);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(\"Load zabbix configs failed\", e);\n        }\n\n        return Arrays.stream(configs).filter(File::isFile)\n            .map(f -> {\n                String fileName = f.getName();\n                int dotIndex = fileName.lastIndexOf('.');\n                fileName = (dotIndex == -1) ? fileName : fileName.substring(0, dotIndex);\n                if (!fileNames.contains(fileName)) {\n                    return null;\n                }\n                try (Reader r = new FileReader(f)) {\n                    return new Yaml().loadAs(r, ZabbixConfig.class);\n                } catch (IOException e) {\n                    log.warn(\"Reading file {} failed\", f, e);\n                }\n                return null;\n            })\n            .filter(Objects::nonNull)\n            .collect(Collectors.toList());\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-zabbix-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zabbix/provider/config/ZabbixConfigs.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"}],"commitId":"75f03acba7c6192aab6f008a0c1acc07c0560bd5","commitMessage":"@@@Adopt Zabbix protocol (#6176)\n\nHappy Chinese New Year !!","date":"2021-02-10 22:40:07","modifiedFileCount":"5","status":"M","submitter":"mrproliu"},{"authorTime":"2021-02-10 22:40:07","codes":[{"authorDate":"2021-02-21 08:35:38","commitOrder":5,"curCode":"    public static List<MeterConfig> loadConfig(String path, List<String> fileNames) throws ModuleStartException {\n        if (CollectionUtils.isEmpty(fileNames)) {\n            return Collections.emptyList();\n        }\n\n        File[] configs;\n        try {\n            configs = ResourceUtils.getPathFiles(path);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(\"Load meter configs failed\", e);\n        }\n\n        return Arrays.stream(configs)\n            .map(f -> {\n                String fileName = f.getName();\n                int dotIndex = fileName.lastIndexOf('.');\n                fileName = (dotIndex == -1) ? fileName : fileName.substring(0, dotIndex);\n                if (!fileNames.contains(fileName)) {\n                    return null;\n                }\n                try (Reader r = new FileReader(f)) {\n                    return new Yaml().loadAs(r, MeterConfig.class);\n                } catch (IOException e) {\n                    log.warn(\"Reading file {} failed\", f, e);\n                }\n                return null;\n            })\n            .filter(Objects::nonNull)\n            .collect(Collectors.toList());\n    }\n","date":"2021-02-21 08:35:38","endLine":76,"groupId":"10765","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"loadConfig","params":"(Stringpath@List<String>fileNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ac/53413e780c16e4937544180b88eeaeff8c3072.src","preCode":"    public static List<MeterConfig> loadConfig(String path, String[] fileNames) throws ModuleStartException {\n        if (fileNames == null || fileNames.length == 0) {\n            return Collections.emptyList();\n        }\n\n        File[] configs;\n        try {\n            configs = ResourceUtils.getPathFiles(path, fileNames);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(\"Load meter configs failed\", e);\n        }\n\n        return Arrays.stream(configs)\n            .map(f -> {\n                try (Reader r = new FileReader(f)) {\n                    return new Yaml().loadAs(r, MeterConfig.class);\n                } catch (IOException e) {\n                    log.warn(\"Reading file {} failed\", f, e);\n                }\n                return null;\n            })\n            .filter(Objects::nonNull)\n            .collect(Collectors.toList());\n    }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/meter/config/MeterConfigs.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2021-02-10 22:40:07","commitOrder":5,"curCode":"    public static List<ZabbixConfig> loadConfigs(String path, List<String> fileNames) throws ModuleStartException {\n        if (CollectionUtils.isEmpty(fileNames)) {\n            return Collections.emptyList();\n        }\n\n        File[] configs;\n        try {\n            configs = ResourceUtils.getPathFiles(path);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(\"Load zabbix configs failed\", e);\n        }\n\n        return Arrays.stream(configs).filter(File::isFile)\n            .map(f -> {\n                String fileName = f.getName();\n                int dotIndex = fileName.lastIndexOf('.');\n                fileName = (dotIndex == -1) ? fileName : fileName.substring(0, dotIndex);\n                if (!fileNames.contains(fileName)) {\n                    return null;\n                }\n                try (Reader r = new FileReader(f)) {\n                    return new Yaml().loadAs(r, ZabbixConfig.class);\n                } catch (IOException e) {\n                    log.warn(\"Reading file {} failed\", f, e);\n                }\n                return null;\n            })\n            .filter(Objects::nonNull)\n            .collect(Collectors.toList());\n    }\n","date":"2021-02-10 22:40:07","endLine":70,"groupId":"10765","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"loadConfigs","params":"(Stringpath@List<String>fileNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9d/5c5730f058b01d9c21422dd829df855374a091.src","preCode":"    public static List<ZabbixConfig> loadConfigs(String path, List<String> fileNames) throws ModuleStartException {\n        if (CollectionUtils.isEmpty(fileNames)) {\n            return Collections.emptyList();\n        }\n\n        File[] configs;\n        try {\n            configs = ResourceUtils.getPathFiles(path);\n        } catch (FileNotFoundException e) {\n            throw new ModuleStartException(\"Load zabbix configs failed\", e);\n        }\n\n        return Arrays.stream(configs).filter(File::isFile)\n            .map(f -> {\n                String fileName = f.getName();\n                int dotIndex = fileName.lastIndexOf('.');\n                fileName = (dotIndex == -1) ? fileName : fileName.substring(0, dotIndex);\n                if (!fileNames.contains(fileName)) {\n                    return null;\n                }\n                try (Reader r = new FileReader(f)) {\n                    return new Yaml().loadAs(r, ZabbixConfig.class);\n                } catch (IOException e) {\n                    log.warn(\"Reading file {} failed\", f, e);\n                }\n                return null;\n            })\n            .filter(Objects::nonNull)\n            .collect(Collectors.toList());\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-zabbix-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zabbix/provider/config/ZabbixConfigs.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"}],"commitId":"317a6580f3364e6d8bb2548670b286c3457114c8","commitMessage":"@@@Remove filename suffix in the meter active file config (#6413)\n\n","date":"2021-02-21 08:35:38","modifiedFileCount":"2","status":"M","submitter":"mrproliu"}]
