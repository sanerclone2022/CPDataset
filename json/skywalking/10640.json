[{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":3,"curCode":"    private EtcdEndpoint buildEndpoint(RemoteInstance instance) {\n        Address address = instance.getAddress();\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().host(address.getHost())\n                                                          .port(address.getPort())\n                                                          .serviceName(SERVICE_NAME)\n                                                          .build();\n        return endpoint;\n    }\n","date":"2020-02-11 17:10:49","endLine":146,"groupId":"3994","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildEndpoint","params":"(RemoteInstanceinstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0f/d14b1bf547b1977e8c2d8436de11ee6bf653fe.src","preCode":"    private EtcdEndpoint buildEndpoint(RemoteInstance instance) {\n        Address address = instance.getAddress();\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().host(address.getHost())\n                                                          .port(address.getPort())\n                                                          .serviceName(SERVICE_NAME)\n                                                          .build();\n        return endpoint;\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-etcd-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/etcd/ITClusterEtcdPluginTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"},{"authorDate":"2020-02-11 17:10:49","commitOrder":3,"curCode":"    public void registerRemote(RemoteInstance remoteInstance) throws ServiceRegisterException {\n\n        if (needUsingInternalAddr()) {\n            remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n        }\n\n        this.selfAddress = remoteInstance.getAddress();\n        TelemetryRelatedContext.INSTANCE.setId(selfAddress.toString());\n\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().serviceName(serviceName)\n                                                          .host(selfAddress.getHost())\n                                                          .port(selfAddress.getPort())\n                                                          .build();\n        try {\n            client.putDir(serviceName).send();\n            String key = buildKey(serviceName, selfAddress, remoteInstance);\n            String json = new Gson().toJson(endpoint);\n            EtcdResponsePromise<EtcdKeysResponse> promise = client.put(key, json).ttl(KEY_TTL).send();\n            \r\n            promise.get();\n            renew(client, key, json);\n        } catch (Exception e) {\n            throw new ServiceRegisterException(e.getMessage());\n        }\n\n    }\n","date":"2020-02-11 17:10:49","endLine":114,"groupId":"1023","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"registerRemote","params":"(RemoteInstanceremoteInstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/57/4adf6e1cb490fba1d0af9aebf592ed0d646d9d.src","preCode":"    public void registerRemote(RemoteInstance remoteInstance) throws ServiceRegisterException {\n\n        if (needUsingInternalAddr()) {\n            remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n        }\n\n        this.selfAddress = remoteInstance.getAddress();\n        TelemetryRelatedContext.INSTANCE.setId(selfAddress.toString());\n\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().serviceName(serviceName)\n                                                          .host(selfAddress.getHost())\n                                                          .port(selfAddress.getPort())\n                                                          .build();\n        try {\n            client.putDir(serviceName).send();\n            String key = buildKey(serviceName, selfAddress, remoteInstance);\n            String json = new Gson().toJson(endpoint);\n            EtcdResponsePromise<EtcdKeysResponse> promise = client.put(key, json).ttl(KEY_TTL).send();\n            \r\n            promise.get();\n            renew(client, key, json);\n        } catch (Exception e) {\n            throw new ServiceRegisterException(e.getMessage());\n        }\n\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-etcd-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/etcd/EtcdCoordinator.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"MB"}],"commitId":"5b255ba3e3b50e0e0196b28cdca21dcd5c9c3da2","commitMessage":"@@@Set up more strict code styles and fix existing issues (#4337)\n\nMotivation:\n\nReview code styles with some bots automatically.\n\nModifications:\n\nSet up ReviewDog in GitHub Action to review code style.\n\nAdd more check rules to checkstyle plugin.\n\nResult:\n\nObvious code styles can be reviewed and commented automatically.","date":"2020-02-11 17:10:49","modifiedFileCount":"2429","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-07-06 18:50:14","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":4,"curCode":"    private EtcdEndpoint buildEndpoint(RemoteInstance instance) {\n        Address address = instance.getAddress();\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().host(address.getHost())\n                                                          .port(address.getPort())\n                                                          .serviceName(SERVICE_NAME)\n                                                          .build();\n        return endpoint;\n    }\n","date":"2020-02-11 17:10:49","endLine":146,"groupId":"3994","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildEndpoint","params":"(RemoteInstanceinstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0f/d14b1bf547b1977e8c2d8436de11ee6bf653fe.src","preCode":"    private EtcdEndpoint buildEndpoint(RemoteInstance instance) {\n        Address address = instance.getAddress();\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().host(address.getHost())\n                                                          .port(address.getPort())\n                                                          .serviceName(SERVICE_NAME)\n                                                          .build();\n        return endpoint;\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-etcd-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/etcd/ITClusterEtcdPluginTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"N"},{"authorDate":"2020-07-06 18:50:14","commitOrder":4,"curCode":"    public void registerRemote(RemoteInstance remoteInstance) throws ServiceRegisterException {\n\n        if (needUsingInternalAddr()) {\n            remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n        }\n\n        this.selfAddress = remoteInstance.getAddress();\n\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().serviceName(serviceName)\n                                                          .host(selfAddress.getHost())\n                                                          .port(selfAddress.getPort())\n                                                          .build();\n        try {\n            client.putDir(serviceName).send();\n            String key = buildKey(serviceName, selfAddress, remoteInstance);\n            String json = new Gson().toJson(endpoint);\n            EtcdResponsePromise<EtcdKeysResponse> promise = client.put(key, json).ttl(KEY_TTL).send();\n            \r\n            promise.get();\n            renew(client, key, json);\n        } catch (Exception e) {\n            throw new ServiceRegisterException(e.getMessage());\n        }\n\n    }\n","date":"2020-07-06 18:50:14","endLine":112,"groupId":"1023","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"registerRemote","params":"(RemoteInstanceremoteInstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/70/6cc6d786b2ebd757eb7a6ec63192caa0b61585.src","preCode":"    public void registerRemote(RemoteInstance remoteInstance) throws ServiceRegisterException {\n\n        if (needUsingInternalAddr()) {\n            remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n        }\n\n        this.selfAddress = remoteInstance.getAddress();\n        TelemetryRelatedContext.INSTANCE.setId(selfAddress.toString());\n\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().serviceName(serviceName)\n                                                          .host(selfAddress.getHost())\n                                                          .port(selfAddress.getPort())\n                                                          .build();\n        try {\n            client.putDir(serviceName).send();\n            String key = buildKey(serviceName, selfAddress, remoteInstance);\n            String json = new Gson().toJson(endpoint);\n            EtcdResponsePromise<EtcdKeysResponse> promise = client.put(key, json).ttl(KEY_TTL).send();\n            \r\n            promise.get();\n            renew(client, key, json);\n        } catch (Exception e) {\n            throw new ServiceRegisterException(e.getMessage());\n        }\n\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-etcd-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/etcd/EtcdCoordinator.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"3df2e8ddcebb00eccb1747919f5352c9909c15df","commitMessage":"@@@Fix no telemetry metrics when the oap role is receiver. (#5038)\n\n","date":"2020-07-06 18:50:14","modifiedFileCount":"7","status":"M","submitter":"Ax1an"},{"authorTime":"2020-11-04 10:04:24","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":5,"curCode":"    private EtcdEndpoint buildEndpoint(RemoteInstance instance) {\n        Address address = instance.getAddress();\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().host(address.getHost())\n                                                          .port(address.getPort())\n                                                          .serviceName(SERVICE_NAME)\n                                                          .build();\n        return endpoint;\n    }\n","date":"2020-02-11 17:10:49","endLine":146,"groupId":"3994","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"buildEndpoint","params":"(RemoteInstanceinstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0f/d14b1bf547b1977e8c2d8436de11ee6bf653fe.src","preCode":"    private EtcdEndpoint buildEndpoint(RemoteInstance instance) {\n        Address address = instance.getAddress();\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().host(address.getHost())\n                                                          .port(address.getPort())\n                                                          .serviceName(SERVICE_NAME)\n                                                          .build();\n        return endpoint;\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-etcd-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/etcd/ITClusterEtcdPluginTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"N"},{"authorDate":"2020-11-04 10:04:24","commitOrder":5,"curCode":"    public void registerRemote(RemoteInstance remoteInstance) throws ServiceRegisterException {\n\n        if (needUsingInternalAddr()) {\n            remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n        }\n\n        this.selfAddress = remoteInstance.getAddress();\n\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().serviceName(serviceName)\n                                                          .host(selfAddress.getHost())\n                                                          .port(selfAddress.getPort())\n                                                          .build();\n        try {\n            initHealthChecker();\n            client.putDir(serviceName).send();\n            String key = buildKey(serviceName, selfAddress, remoteInstance);\n            String json = new Gson().toJson(endpoint);\n            EtcdResponsePromise<EtcdKeysResponse> promise = client.put(key, json).ttl(KEY_TTL).send();\n            \r\n            promise.get();\n            renew(client, key, json);\n            healthChecker.health();\n        } catch (Throwable e) {\n            healthChecker.unHealth(e);\n            throw new ServiceRegisterException(e.getMessage());\n        }\n\n    }\n","date":"2020-11-04 10:04:24","endLine":126,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"registerRemote","params":"(RemoteInstanceremoteInstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8d/20d475d6b95fb38a98011811c8bdbe14da7ee9.src","preCode":"    public void registerRemote(RemoteInstance remoteInstance) throws ServiceRegisterException {\n\n        if (needUsingInternalAddr()) {\n            remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n        }\n\n        this.selfAddress = remoteInstance.getAddress();\n\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().serviceName(serviceName)\n                                                          .host(selfAddress.getHost())\n                                                          .port(selfAddress.getPort())\n                                                          .build();\n        try {\n            client.putDir(serviceName).send();\n            String key = buildKey(serviceName, selfAddress, remoteInstance);\n            String json = new Gson().toJson(endpoint);\n            EtcdResponsePromise<EtcdKeysResponse> promise = client.put(key, json).ttl(KEY_TTL).send();\n            \r\n            promise.get();\n            renew(client, key, json);\n        } catch (Exception e) {\n            throw new ServiceRegisterException(e.getMessage());\n        }\n\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-etcd-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/etcd/EtcdCoordinator.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"56fe8a4b41236dd826f4ede97cd25b435d062803","commitMessage":"@@@Cluster manager health v2 (#5784)\n\n","date":"2020-11-04 10:04:24","modifiedFileCount":"25","status":"M","submitter":"xbkaishui"},{"authorTime":"2021-07-05 11:23:11","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":6,"curCode":"    private EtcdEndpoint buildEndpoint(RemoteInstance instance) {\n        Address address = instance.getAddress();\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().host(address.getHost())\n                                                          .port(address.getPort())\n                                                          .serviceName(SERVICE_NAME)\n                                                          .build();\n        return endpoint;\n    }\n","date":"2020-02-11 17:10:49","endLine":146,"groupId":"3994","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"buildEndpoint","params":"(RemoteInstanceinstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0f/d14b1bf547b1977e8c2d8436de11ee6bf653fe.src","preCode":"    private EtcdEndpoint buildEndpoint(RemoteInstance instance) {\n        Address address = instance.getAddress();\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().host(address.getHost())\n                                                          .port(address.getPort())\n                                                          .serviceName(SERVICE_NAME)\n                                                          .build();\n        return endpoint;\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-etcd-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/etcd/ITClusterEtcdPluginTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"N"},{"authorDate":"2021-07-05 11:23:11","commitOrder":6,"curCode":"    public void registerRemote(RemoteInstance remoteInstance) throws ServiceRegisterException {\n        if (needUsingInternalAddr()) {\n            remoteInstance = new RemoteInstance(\n                new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n        }\n\n        this.selfAddress = remoteInstance.getAddress();\n        final EtcdEndpoint endpoint = new EtcdEndpoint.Builder().serviceName(serviceName)\n                                                                .host(selfAddress.getHost())\n                                                                .port(selfAddress.getPort())\n                                                                .build();\n        try {\n            initHealthChecker();\n\n            final Lease leaseClient = client.getLeaseClient();\n            final long leaseID = leaseClient.grant(30L).get().getID();\n\n            ByteSequence instance = ByteSequence.from(GSON.toJson(endpoint), Charset.defaultCharset());\n            client.getKVClient()\n                  .put(\n                      buildKey(serviceName, selfAddress, remoteInstance),\n                      instance,\n                      PutOption.newBuilder().withLeaseId(leaseID).build()\n                  )\n                  .get();\n            healthChecker.health();\n\n            client.getLeaseClient().keepAlive(leaseID, new StreamObserver<LeaseKeepAliveResponse>() {\n                @Override\n                public void onNext(final LeaseKeepAliveResponse response) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"Refresh lease id = {}, ttl = {}\", response.getID(), response.getTTL());\n                    }\n                }\n\n                @Override\n                public void onError(final Throwable throwable) {\n                    log.error(\"Failed to keep alive in Etcd coordinator\", throwable);\n                    healthChecker.unHealth(throwable);\n                }\n\n                @Override\n                public void onCompleted() {\n\n                }\n            });\n        } catch (Throwable e) {\n            healthChecker.unHealth(e);\n            throw new ServiceRegisterException(e.getMessage());\n        }\n    }\n","date":"2021-07-05 11:23:11","endLine":178,"groupId":"5960","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"registerRemote","params":"(RemoteInstanceremoteInstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ac/eb581b12a10b55672392c96052bcd046d7aece.src","preCode":"    public void registerRemote(RemoteInstance remoteInstance) throws ServiceRegisterException {\n\n        if (needUsingInternalAddr()) {\n            remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n        }\n\n        this.selfAddress = remoteInstance.getAddress();\n\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().serviceName(serviceName)\n                                                          .host(selfAddress.getHost())\n                                                          .port(selfAddress.getPort())\n                                                          .build();\n        try {\n            initHealthChecker();\n            client.putDir(serviceName).send();\n            String key = buildKey(serviceName, selfAddress, remoteInstance);\n            String json = new Gson().toJson(endpoint);\n            EtcdResponsePromise<EtcdKeysResponse> promise = client.put(key, json).ttl(KEY_TTL).send();\n            \r\n            promise.get();\n            renew(client, key, json);\n            healthChecker.health();\n        } catch (Throwable e) {\n            healthChecker.unHealth(e);\n            throw new ServiceRegisterException(e.getMessage());\n        }\n\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-etcd-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/etcd/EtcdCoordinator.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"5dd56a5ca45c1bc423af71dc0829aed1221621ac","commitMessage":"@@@Upgrade etcd cluster coordinator and dynamic configuration to v3.x (#7215)\n\n","date":"2021-07-05 11:23:11","modifiedFileCount":"10","status":"M","submitter":"Daming"},{"authorTime":"2021-09-06 15:21:35","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":7,"curCode":"    private EtcdEndpoint buildEndpoint(RemoteInstance instance) {\n        Address address = instance.getAddress();\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().host(address.getHost())\n                                                          .port(address.getPort())\n                                                          .serviceName(SERVICE_NAME)\n                                                          .build();\n        return endpoint;\n    }\n","date":"2020-02-11 17:10:49","endLine":146,"groupId":"10640","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"buildEndpoint","params":"(RemoteInstanceinstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0f/d14b1bf547b1977e8c2d8436de11ee6bf653fe.src","preCode":"    private EtcdEndpoint buildEndpoint(RemoteInstance instance) {\n        Address address = instance.getAddress();\n        EtcdEndpoint endpoint = new EtcdEndpoint.Builder().host(address.getHost())\n                                                          .port(address.getPort())\n                                                          .serviceName(SERVICE_NAME)\n                                                          .build();\n        return endpoint;\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-etcd-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/etcd/ITClusterEtcdPluginTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"N"},{"authorDate":"2021-09-06 15:21:35","commitOrder":7,"curCode":"    public void registerRemote(RemoteInstance remoteInstance) throws ServiceRegisterException {\n        if (needUsingInternalAddr()) {\n            remoteInstance = new RemoteInstance(\n                new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n        }\n\n        this.selfAddress = remoteInstance.getAddress();\n        final EtcdEndpoint endpoint = new EtcdEndpoint.Builder().serviceName(serviceName)\n                                                                .host(selfAddress.getHost())\n                                                                .port(selfAddress.getPort())\n                                                                .build();\n        try {\n            initHealthChecker();\n\n            final Lease leaseClient = client.getLeaseClient();\n            final long leaseID = leaseClient.grant(30L).get().getID();\n\n            ByteSequence instance = ByteSequence.from(GSON.toJson(endpoint), Charset.defaultCharset());\n            client.getKVClient()\n                  .put(\n                      buildKey(serviceName, selfAddress, remoteInstance),\n                      instance,\n                      PutOption.newBuilder().withLeaseId(leaseID).build()\n                  )\n                  .get();\n            healthChecker.health();\n\n            client.getLeaseClient().keepAlive(leaseID, new StreamObserver<LeaseKeepAliveResponse>() {\n                @Override\n                public void onNext(final LeaseKeepAliveResponse response) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"Refresh lease id = {}, ttl = {}\", response.getID(), response.getTTL());\n                    }\n                }\n\n                @Override\n                public void onError(final Throwable throwable) {\n                    log.error(\"Failed to keep alive in Etcd coordinator\", throwable);\n                    healthChecker.unHealth(throwable);\n                }\n\n                @Override\n                public void onCompleted() {\n\n                }\n            });\n        } catch (Throwable e) {\n            healthChecker.unHealth(e);\n            throw new ServiceRegisterException(e);\n        }\n    }\n","date":"2021-09-06 15:21:35","endLine":178,"groupId":"10640","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"registerRemote","params":"(RemoteInstanceremoteInstance)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/49/ada8f410fbeb2bd52e294379487c452d958c53.src","preCode":"    public void registerRemote(RemoteInstance remoteInstance) throws ServiceRegisterException {\n        if (needUsingInternalAddr()) {\n            remoteInstance = new RemoteInstance(\n                new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n        }\n\n        this.selfAddress = remoteInstance.getAddress();\n        final EtcdEndpoint endpoint = new EtcdEndpoint.Builder().serviceName(serviceName)\n                                                                .host(selfAddress.getHost())\n                                                                .port(selfAddress.getPort())\n                                                                .build();\n        try {\n            initHealthChecker();\n\n            final Lease leaseClient = client.getLeaseClient();\n            final long leaseID = leaseClient.grant(30L).get().getID();\n\n            ByteSequence instance = ByteSequence.from(GSON.toJson(endpoint), Charset.defaultCharset());\n            client.getKVClient()\n                  .put(\n                      buildKey(serviceName, selfAddress, remoteInstance),\n                      instance,\n                      PutOption.newBuilder().withLeaseId(leaseID).build()\n                  )\n                  .get();\n            healthChecker.health();\n\n            client.getLeaseClient().keepAlive(leaseID, new StreamObserver<LeaseKeepAliveResponse>() {\n                @Override\n                public void onNext(final LeaseKeepAliveResponse response) {\n                    if (log.isDebugEnabled()) {\n                        log.debug(\"Refresh lease id = {}, ttl = {}\", response.getID(), response.getTTL());\n                    }\n                }\n\n                @Override\n                public void onError(final Throwable throwable) {\n                    log.error(\"Failed to keep alive in Etcd coordinator\", throwable);\n                    healthChecker.unHealth(throwable);\n                }\n\n                @Override\n                public void onCompleted() {\n\n                }\n            });\n        } catch (Throwable e) {\n            healthChecker.unHealth(e);\n            throw new ServiceRegisterException(e.getMessage());\n        }\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-etcd-plugin/src/main/java/org/apache/skywalking/oap/server/cluster/plugin/etcd/EtcdCoordinator.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"26b81a2e5991ecdd2bde0f7071264cb80bb235cf","commitMessage":"@@@Rebuilt ElasticSearch client on top of their REST API (#7634)\n\n","date":"2021-09-06 15:21:35","modifiedFileCount":"60","status":"M","submitter":"kezhenxu94"}]
