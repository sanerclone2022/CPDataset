[{"authorTime":"2020-03-23 23:16:28","codes":[{"authorDate":"2020-10-15 23:20:46","commitOrder":2,"curCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","date":"2020-10-15 23:20:46","endLine":220,"groupId":"7008","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(finalEndpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/34/42ee17537da1cb336d2c9c7d16e1dcd8562101.src","preCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/mesh/ALSE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"B"},{"authorDate":"2020-03-23 23:16:28","commitOrder":2,"curCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/php/call\") || !endpoint.getLabel().equals(\"/php/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","date":"2020-03-23 23:16:28","endLine":242,"groupId":"7008","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(Endpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/92/8504a3b9667b087b20c760a5d14b021641ac03.src","preCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/php/call\") || !endpoint.getLabel().equals(\"/php/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/PHPE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"NB"}],"commitId":"239eaa01fdf0da2612c5245fe479b7f765408afb","commitMessage":"@@@test: set up ALS E2E test (#5675)\n\n","date":"2020-10-15 23:20:46","modifiedFileCount":"6","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-10-29 14:38:49","codes":[{"authorDate":"2020-10-15 23:20:46","commitOrder":3,"curCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","date":"2020-10-15 23:20:46","endLine":220,"groupId":"1095","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(finalEndpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/34/42ee17537da1cb336d2c9c7d16e1dcd8562101.src","preCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/mesh/ALSE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"N"},{"authorDate":"2020-10-29 14:38:49","commitOrder":3,"curCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/php/call\") || !endpoint.getLabel().equals(\"/php/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n            for (String metricName : ALL_ENDPOINT_MULTIPLE_LINEAR_METRICS) {\n                verifyPercentileMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n        }\n    }\n","date":"2020-10-29 14:38:49","endLine":241,"groupId":"1095","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"verifyEndpointsMetrics","params":"(Endpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/47/f06dc52ef7bed475ec48d56afd0a6bfc5b6a2a.src","preCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/php/call\") || !endpoint.getLabel().equals(\"/php/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/PHPE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"c95a9134925cbe8101dc72dbaca38269eb3dc3b1","commitMessage":"@@@Add percentile tests in e2e test. (#5737)\n\n","date":"2020-10-29 14:38:49","modifiedFileCount":"11","status":"M","submitter":"Humbertzhang"}]
