[{"authorTime":"2020-07-30 11:55:49","codes":[{"authorDate":"2020-11-04 10:04:24","commitOrder":3,"curCode":"    public void before() {\n        Mockito.when(telemetryProvider.getService(MetricsCreator.class))\n                .thenReturn(new MetricsCreatorNoop());\n        TelemetryModule telemetryModule = Mockito.spy(TelemetryModule.class);\n        Whitebox.setInternalState(telemetryModule, \"loadedProvider\", telemetryProvider);\n        Mockito.when(moduleManager.find(TelemetryModule.NAME)).thenReturn(telemetryModule);\n        consulAddress = System.getProperty(\"consul.address\");\n        assertFalse(StringUtil.isEmpty(consulAddress));\n    }\n","date":"2020-11-04 10:04:24","endLine":72,"groupId":"2057","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ca/ef939386cc1204de80e7d01157c3a333512d05.src","preCode":"    public void before() {\n        Mockito.when(telemetryProvider.getService(MetricsCreator.class))\n                .thenReturn(new MetricsCreatorNoop());\n        TelemetryModule telemetryModule = Mockito.spy(TelemetryModule.class);\n        Whitebox.setInternalState(telemetryModule, \"loadedProvider\", telemetryProvider);\n        Mockito.when(moduleManager.find(TelemetryModule.NAME)).thenReturn(telemetryModule);\n        consulAddress = System.getProperty(\"consul.address\");\n        assertFalse(StringUtil.isEmpty(consulAddress));\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-consul-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/consul/ITClusterModuleConsulProviderFunctionalTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2020-07-30 11:55:49","commitOrder":3,"curCode":"    public void init() throws IOException {\n        TelemetryModule telemetryModule = Mockito.spy(TelemetryModule.class);\n        Whitebox.setInternalState(telemetryModule, \"loadedProvider\", telemetryProvider);\n        Mockito.when(moduleManager.find(TelemetryModule.NAME)).thenReturn(telemetryModule);\n\n        AnalyzerModule analyzerModule = Mockito.spy(AnalyzerModule.class);\n        Whitebox.setInternalState(analyzerModule, \"loadedProvider\", analyzerModuleProvider);\n        Mockito.when(moduleManager.find(AnalyzerModule.NAME)).thenReturn(analyzerModule);\n\n        Mockito.when(telemetryProvider.getService(MetricsCreator.class))\n            .thenReturn(new MetricsCreatorNoop());\n\n        when(analyzerModuleProvider.getService(ISegmentParserService.class))\n            .thenReturn(new SegmentParserServiceImpl(moduleManager, new AnalyzerModuleConfig()));\n    }\n","date":"2020-07-30 11:55:49","endLine":78,"groupId":"4607","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b4/7efc2ccd39a7f1f65428db511fc0659385f949.src","preCode":"    public void init() throws IOException {\n        TelemetryModule telemetryModule = Mockito.spy(TelemetryModule.class);\n        Whitebox.setInternalState(telemetryModule, \"loadedProvider\", telemetryProvider);\n        Mockito.when(moduleManager.find(TelemetryModule.NAME)).thenReturn(telemetryModule);\n\n        AnalyzerModule analyzerModule = Mockito.spy(AnalyzerModule.class);\n        Whitebox.setInternalState(analyzerModule, \"loadedProvider\", analyzerModuleProvider);\n        Mockito.when(moduleManager.find(AnalyzerModule.NAME)).thenReturn(analyzerModule);\n\n        Mockito.when(telemetryProvider.getService(MetricsCreator.class))\n            .thenReturn(new MetricsCreatorNoop());\n\n        when(analyzerModuleProvider.getService(ISegmentParserService.class))\n            .thenReturn(new SegmentParserServiceImpl(moduleManager, new AnalyzerModuleConfig()));\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportServletHandlerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"NB"}],"commitId":"56fe8a4b41236dd826f4ede97cd25b435d062803","commitMessage":"@@@Cluster manager health v2 (#5784)\n\n","date":"2020-11-04 10:04:24","modifiedFileCount":"25","status":"M","submitter":"xbkaishui"},{"authorTime":"2020-07-30 11:55:49","codes":[{"authorDate":"2021-09-06 21:04:14","commitOrder":4,"curCode":"    public void before() {\n        Mockito.when(telemetryProvider.getService(MetricsCreator.class))\n                .thenReturn(new MetricsCreatorNoop());\n        TelemetryModule telemetryModule = Mockito.spy(TelemetryModule.class);\n        Whitebox.setInternalState(telemetryModule, \"loadedProvider\", telemetryProvider);\n        Mockito.when(moduleManager.find(TelemetryModule.NAME)).thenReturn(telemetryModule);\n        consulAddress = container.getHost() + \":\" + container.getMappedPort(8500);\n    }\n","date":"2021-09-06 21:04:14","endLine":81,"groupId":"10684","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/7ead4bd3291b76968fa176a1ba24a9eb40c768.src","preCode":"    public void before() {\n        Mockito.when(telemetryProvider.getService(MetricsCreator.class))\n                .thenReturn(new MetricsCreatorNoop());\n        TelemetryModule telemetryModule = Mockito.spy(TelemetryModule.class);\n        Whitebox.setInternalState(telemetryModule, \"loadedProvider\", telemetryProvider);\n        Mockito.when(moduleManager.find(TelemetryModule.NAME)).thenReturn(telemetryModule);\n        consulAddress = System.getProperty(\"consul.address\");\n        assertFalse(StringUtil.isEmpty(consulAddress));\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-consul-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/consul/ITClusterModuleConsulProviderFunctionalTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2020-07-30 11:55:49","commitOrder":4,"curCode":"    public void init() throws IOException {\n        TelemetryModule telemetryModule = Mockito.spy(TelemetryModule.class);\n        Whitebox.setInternalState(telemetryModule, \"loadedProvider\", telemetryProvider);\n        Mockito.when(moduleManager.find(TelemetryModule.NAME)).thenReturn(telemetryModule);\n\n        AnalyzerModule analyzerModule = Mockito.spy(AnalyzerModule.class);\n        Whitebox.setInternalState(analyzerModule, \"loadedProvider\", analyzerModuleProvider);\n        Mockito.when(moduleManager.find(AnalyzerModule.NAME)).thenReturn(analyzerModule);\n\n        Mockito.when(telemetryProvider.getService(MetricsCreator.class))\n            .thenReturn(new MetricsCreatorNoop());\n\n        when(analyzerModuleProvider.getService(ISegmentParserService.class))\n            .thenReturn(new SegmentParserServiceImpl(moduleManager, new AnalyzerModuleConfig()));\n    }\n","date":"2020-07-30 11:55:49","endLine":78,"groupId":"10684","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b4/7efc2ccd39a7f1f65428db511fc0659385f949.src","preCode":"    public void init() throws IOException {\n        TelemetryModule telemetryModule = Mockito.spy(TelemetryModule.class);\n        Whitebox.setInternalState(telemetryModule, \"loadedProvider\", telemetryProvider);\n        Mockito.when(moduleManager.find(TelemetryModule.NAME)).thenReturn(telemetryModule);\n\n        AnalyzerModule analyzerModule = Mockito.spy(AnalyzerModule.class);\n        Whitebox.setInternalState(analyzerModule, \"loadedProvider\", analyzerModuleProvider);\n        Mockito.when(moduleManager.find(AnalyzerModule.NAME)).thenReturn(analyzerModule);\n\n        Mockito.when(telemetryProvider.getService(MetricsCreator.class))\n            .thenReturn(new MetricsCreatorNoop());\n\n        when(analyzerModuleProvider.getService(ISegmentParserService.class))\n            .thenReturn(new SegmentParserServiceImpl(moduleManager, new AnalyzerModuleConfig()));\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportServletHandlerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"327d9469787ccc080fb8284dc7a5609a4a19c8bc","commitMessage":"@@@Remove docker-maven-plugin in favor of testcontainers (#7664)\n\n","date":"2021-09-06 21:04:14","modifiedFileCount":"6","status":"M","submitter":"kezhenxu94"}]
