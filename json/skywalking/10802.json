[{"authorTime":"2020-04-21 15:39:18","codes":[{"authorDate":"2020-04-21 15:39:18","commitOrder":1,"curCode":"    public MetricsValues readMetricsValues(final MetricsCondition condition,\n                                           final String valueColumnName,\n                                           final Duration duration) throws IOException {\n        final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n        List<String> ids = new ArrayList<>(pointOfTimes.size());\n        pointOfTimes.forEach(pointOfTime -> {\n            ids.add(pointOfTime.id(condition.getEntity().buildId()));\n        });\n\n        StringBuilder sql = new StringBuilder(\n            \"select id, \" + valueColumnName + \" from \" + condition.getName() + \" where id in (\");\n        List<Object> parameters = new ArrayList();\n        for (int i = 0; i < ids.size(); i++) {\n            if (i == 0) {\n                sql.append(\"?\");\n            } else {\n                sql.append(\",?\");\n            }\n            parameters.add(ids.get(i));\n        }\n        sql.append(\")\");\n\n        MetricsValues metricsValues = new MetricsValues();\n        \r\n        final IntValues intValues = metricsValues.getValues();\n\n        try (Connection connection = h2Client.getConnection()) {\n\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), parameters.toArray(new Object[0]))) {\n                while (resultSet.next()) {\n                    KVInt kv = new KVInt();\n                    kv.setId(resultSet.getString(\"id\"));\n                    kv.setValue(resultSet.getLong(valueColumnName));\n                    intValues.addKVInt(kv);\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        metricsValues.setValues(\n            Util.sortValues(intValues, ids, ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName()))\n        );\n        return metricsValues;\n    }\n","date":"2020-04-21 15:39:18","endLine":138,"groupId":"3716","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"readMetricsValues","params":"(finalMetricsConditioncondition@finalStringvalueColumnName@finalDurationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/db/5cbfdbc749de8bae81c47d1ca15300a5832e2b.src","preCode":"    public MetricsValues readMetricsValues(final MetricsCondition condition,\n                                           final String valueColumnName,\n                                           final Duration duration) throws IOException {\n        final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n        List<String> ids = new ArrayList<>(pointOfTimes.size());\n        pointOfTimes.forEach(pointOfTime -> {\n            ids.add(pointOfTime.id(condition.getEntity().buildId()));\n        });\n\n        StringBuilder sql = new StringBuilder(\n            \"select id, \" + valueColumnName + \" from \" + condition.getName() + \" where id in (\");\n        List<Object> parameters = new ArrayList();\n        for (int i = 0; i < ids.size(); i++) {\n            if (i == 0) {\n                sql.append(\"?\");\n            } else {\n                sql.append(\",?\");\n            }\n            parameters.add(ids.get(i));\n        }\n        sql.append(\")\");\n\n        MetricsValues metricsValues = new MetricsValues();\n        \r\n        final IntValues intValues = metricsValues.getValues();\n\n        try (Connection connection = h2Client.getConnection()) {\n\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), parameters.toArray(new Object[0]))) {\n                while (resultSet.next()) {\n                    KVInt kv = new KVInt();\n                    kv.setId(resultSet.getString(\"id\"));\n                    kv.setValue(resultSet.getLong(valueColumnName));\n                    intValues.addKVInt(kv);\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        metricsValues.setValues(\n            Util.sortValues(intValues, ids, ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName()))\n        );\n        return metricsValues;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetricsQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2020-04-21 15:39:18","commitOrder":1,"curCode":"    public HeatMap readHeatMap(final MetricsCondition condition,\n                               final String valueColumnName,\n                               final Duration duration) throws IOException {\n        final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n        List<String> ids = new ArrayList<>(pointOfTimes.size());\n        pointOfTimes.forEach(pointOfTime -> {\n            ids.add(pointOfTime.id(condition.getEntity().buildId()));\n        });\n\n        StringBuilder sql = new StringBuilder(\n            \"select id, \" + valueColumnName + \" dataset, id from \" + condition.getName() + \" where id in (\");\n        List<Object> parameters = new ArrayList();\n        for (int i = 0; i < ids.size(); i++) {\n            if (i == 0) {\n                sql.append(\"?\");\n            } else {\n                sql.append(\",?\");\n            }\n            parameters.add(ids.get(i));\n        }\n        sql.append(\")\");\n\n        try (Connection connection = h2Client.getConnection()) {\n            HeatMap heatMap = new HeatMap();\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), parameters.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    heatMap.buildColumn(resultSet.getString(\"id\"), resultSet.getString(\"dataset\"));\n                }\n            }\n\n            heatMap.fixMissingColumns(ids);\n\n            return heatMap;\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n    }\n","date":"2020-04-21 15:39:18","endLine":242,"groupId":"4395","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"readHeatMap","params":"(finalMetricsConditioncondition@finalStringvalueColumnName@finalDurationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/db/5cbfdbc749de8bae81c47d1ca15300a5832e2b.src","preCode":"    public HeatMap readHeatMap(final MetricsCondition condition,\n                               final String valueColumnName,\n                               final Duration duration) throws IOException {\n        final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n        List<String> ids = new ArrayList<>(pointOfTimes.size());\n        pointOfTimes.forEach(pointOfTime -> {\n            ids.add(pointOfTime.id(condition.getEntity().buildId()));\n        });\n\n        StringBuilder sql = new StringBuilder(\n            \"select id, \" + valueColumnName + \" dataset, id from \" + condition.getName() + \" where id in (\");\n        List<Object> parameters = new ArrayList();\n        for (int i = 0; i < ids.size(); i++) {\n            if (i == 0) {\n                sql.append(\"?\");\n            } else {\n                sql.append(\",?\");\n            }\n            parameters.add(ids.get(i));\n        }\n        sql.append(\")\");\n\n        try (Connection connection = h2Client.getConnection()) {\n            HeatMap heatMap = new HeatMap();\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), parameters.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    heatMap.buildColumn(resultSet.getString(\"id\"), resultSet.getString(\"dataset\"));\n                }\n            }\n\n            heatMap.fixMissingColumns(ids);\n\n            return heatMap;\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetricsQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"B"}],"commitId":"418bdff277179b4660e578b1837f21fd3db514cb","commitMessage":"@@@New metrics query protocol v2 (#4679)\n\n1. Support the new query protocol.  and the v1 query protocol is still supported \n2. All `numOfxxx`/`GlobalBrief` is only a mock now.  no real number.\n3. typeOfMetrics service is a mock only too.  follow up PR will implement this.","date":"2020-04-21 15:39:18","modifiedFileCount":"123","status":"B","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-25 21:24:15","codes":[{"authorDate":"2020-04-21 15:39:18","commitOrder":2,"curCode":"    public MetricsValues readMetricsValues(final MetricsCondition condition,\n                                           final String valueColumnName,\n                                           final Duration duration) throws IOException {\n        final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n        List<String> ids = new ArrayList<>(pointOfTimes.size());\n        pointOfTimes.forEach(pointOfTime -> {\n            ids.add(pointOfTime.id(condition.getEntity().buildId()));\n        });\n\n        StringBuilder sql = new StringBuilder(\n            \"select id, \" + valueColumnName + \" from \" + condition.getName() + \" where id in (\");\n        List<Object> parameters = new ArrayList();\n        for (int i = 0; i < ids.size(); i++) {\n            if (i == 0) {\n                sql.append(\"?\");\n            } else {\n                sql.append(\",?\");\n            }\n            parameters.add(ids.get(i));\n        }\n        sql.append(\")\");\n\n        MetricsValues metricsValues = new MetricsValues();\n        \r\n        final IntValues intValues = metricsValues.getValues();\n\n        try (Connection connection = h2Client.getConnection()) {\n\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), parameters.toArray(new Object[0]))) {\n                while (resultSet.next()) {\n                    KVInt kv = new KVInt();\n                    kv.setId(resultSet.getString(\"id\"));\n                    kv.setValue(resultSet.getLong(valueColumnName));\n                    intValues.addKVInt(kv);\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        metricsValues.setValues(\n            Util.sortValues(intValues, ids, ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName()))\n        );\n        return metricsValues;\n    }\n","date":"2020-04-21 15:39:18","endLine":138,"groupId":"10802","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"readMetricsValues","params":"(finalMetricsConditioncondition@finalStringvalueColumnName@finalDurationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/db/5cbfdbc749de8bae81c47d1ca15300a5832e2b.src","preCode":"    public MetricsValues readMetricsValues(final MetricsCondition condition,\n                                           final String valueColumnName,\n                                           final Duration duration) throws IOException {\n        final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n        List<String> ids = new ArrayList<>(pointOfTimes.size());\n        pointOfTimes.forEach(pointOfTime -> {\n            ids.add(pointOfTime.id(condition.getEntity().buildId()));\n        });\n\n        StringBuilder sql = new StringBuilder(\n            \"select id, \" + valueColumnName + \" from \" + condition.getName() + \" where id in (\");\n        List<Object> parameters = new ArrayList();\n        for (int i = 0; i < ids.size(); i++) {\n            if (i == 0) {\n                sql.append(\"?\");\n            } else {\n                sql.append(\",?\");\n            }\n            parameters.add(ids.get(i));\n        }\n        sql.append(\")\");\n\n        MetricsValues metricsValues = new MetricsValues();\n        \r\n        final IntValues intValues = metricsValues.getValues();\n\n        try (Connection connection = h2Client.getConnection()) {\n\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), parameters.toArray(new Object[0]))) {\n                while (resultSet.next()) {\n                    KVInt kv = new KVInt();\n                    kv.setId(resultSet.getString(\"id\"));\n                    kv.setValue(resultSet.getLong(valueColumnName));\n                    intValues.addKVInt(kv);\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        metricsValues.setValues(\n            Util.sortValues(intValues, ids, ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName()))\n        );\n        return metricsValues;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetricsQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"},{"authorDate":"2020-04-25 21:24:15","commitOrder":2,"curCode":"    public HeatMap readHeatMap(final MetricsCondition condition,\n                               final String valueColumnName,\n                               final Duration duration) throws IOException {\n        final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n        List<String> ids = new ArrayList<>(pointOfTimes.size());\n        pointOfTimes.forEach(pointOfTime -> {\n            ids.add(pointOfTime.id(condition.getEntity().buildId()));\n        });\n\n        StringBuilder sql = new StringBuilder(\n            \"select id, \" + valueColumnName + \" dataset, id from \" + condition.getName() + \" where id in (\");\n        List<Object> parameters = new ArrayList();\n        for (int i = 0; i < ids.size(); i++) {\n            if (i == 0) {\n                sql.append(\"?\");\n            } else {\n                sql.append(\",?\");\n            }\n            parameters.add(ids.get(i));\n        }\n        sql.append(\")\");\n\n        final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n\n        try (Connection connection = h2Client.getConnection()) {\n            HeatMap heatMap = new HeatMap();\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), parameters.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    heatMap.buildColumn(\n                        resultSet.getString(\"id\"), resultSet.getString(\"dataset\"), defaultValue);\n                }\n            }\n\n            heatMap.fixMissingColumns(ids, defaultValue);\n\n            return heatMap;\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n    }\n","date":"2020-04-25 21:24:15","endLine":250,"groupId":"10802","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"readHeatMap","params":"(finalMetricsConditioncondition@finalStringvalueColumnName@finalDurationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/84/d0ca08bfddf55c28b9cfd1d2f503c2dd762207.src","preCode":"    public HeatMap readHeatMap(final MetricsCondition condition,\n                               final String valueColumnName,\n                               final Duration duration) throws IOException {\n        final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n        List<String> ids = new ArrayList<>(pointOfTimes.size());\n        pointOfTimes.forEach(pointOfTime -> {\n            ids.add(pointOfTime.id(condition.getEntity().buildId()));\n        });\n\n        StringBuilder sql = new StringBuilder(\n            \"select id, \" + valueColumnName + \" dataset, id from \" + condition.getName() + \" where id in (\");\n        List<Object> parameters = new ArrayList();\n        for (int i = 0; i < ids.size(); i++) {\n            if (i == 0) {\n                sql.append(\"?\");\n            } else {\n                sql.append(\",?\");\n            }\n            parameters.add(ids.get(i));\n        }\n        sql.append(\")\");\n\n        try (Connection connection = h2Client.getConnection()) {\n            HeatMap heatMap = new HeatMap();\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), parameters.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    heatMap.buildColumn(resultSet.getString(\"id\"), resultSet.getString(\"dataset\"));\n                }\n            }\n\n            heatMap.fixMissingColumns(ids);\n\n            return heatMap;\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetricsQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"071708a4a35d0339755ffddd244b3e8371a6c881","commitMessage":"@@@Support default value in labeled-value and heatmap query. (#4711)\n\n* Support default value in labeled-value and heatmap query.\n\n* Update a little document.","date":"2020-04-25 21:24:15","modifiedFileCount":"6","status":"M","submitter":"?? Wu Sheng"}]
