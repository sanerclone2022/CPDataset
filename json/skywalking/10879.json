[{"authorTime":"2019-07-18 19:47:23","codes":[{"authorDate":"2019-07-18 19:47:23","commitOrder":1,"curCode":"    public void testEndpointAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.setSourceAttribute(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(3, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n    }\n","date":"2019-07-18 19:47:23","endLine":82,"groupId":"3448","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEndpointAnalysis","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/18/b035ab39887492aefefb7c75935782c60def93.src","preCode":"    public void testEndpointAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.setSourceAttribute(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(3, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n    }\n","realPath":"oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/DeepAnalysisTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2019-07-18 19:47:23","commitOrder":1,"curCode":"    public void testFilterAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.setSourceAttribute(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n        ConditionExpression expression = new ConditionExpression();\n        expression.setExpressionType(\"stringMatch\");\n        expression.setAttribute(\"name\");\n        expression.setValue(\"\\\"/service/prod/save\\\"\");\n        result.addFilterExpressionsParserResult(expression);\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(3, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n\n        List<Expression> filterExpressions = result.getFilterExpressions();\n        Assert.assertEquals(1, filterExpressions.size());\n        Expression filterExpression = filterExpressions.get(0);\n        Assert.assertEquals(\"EqualMatch\", filterExpression.getExpressionObject());\n        Assert.assertEquals(\"source.getName()\", filterExpression.getLeft());\n        Assert.assertEquals(\"\\\"/service/prod/save\\\"\", filterExpression.getRight());\n    }\n","date":"2019-07-18 19:47:23","endLine":118,"groupId":"3448","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterAnalysis","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/18/b035ab39887492aefefb7c75935782c60def93.src","preCode":"    public void testFilterAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.setSourceAttribute(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n        ConditionExpression expression = new ConditionExpression();\n        expression.setExpressionType(\"stringMatch\");\n        expression.setAttribute(\"name\");\n        expression.setValue(\"\\\"/service/prod/save\\\"\");\n        result.addFilterExpressionsParserResult(expression);\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(3, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n\n        List<Expression> filterExpressions = result.getFilterExpressions();\n        Assert.assertEquals(1, filterExpressions.size());\n        Expression filterExpression = filterExpressions.get(0);\n        Assert.assertEquals(\"EqualMatch\", filterExpression.getExpressionObject());\n        Assert.assertEquals(\"source.getName()\", filterExpression.getLeft());\n        Assert.assertEquals(\"\\\"/service/prod/save\\\"\", filterExpression.getRight());\n    }\n","realPath":"oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/DeepAnalysisTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"}],"commitId":"5b039e9747fac98444b4ec423a5d57524202f286","commitMessage":"@@@All NEW OAL Runtime Engine (#3109)\n\n* Change OAL generator tool to runtime.\n\nStep 1. change project structure. API links and maven pom.\n\n* Part of metrics class generation\n\n* Metrcis class generated.\n\n* Set up the basic structure of new OAL engine.\n\n* Finish metrics generation.\n\n* Support dispatcher generation.\n\n* Format codes.\n\n* Generate dispatcher all methods.\n\n* Implement disable in hardcode.\n\n* Clear up\n\n* Fix compile startup.\n\n* Update license and document of new OAL engine.\n\n* Fix rat.\n\n* Disable class output in default\n\n* Copy from @kezhenxu94 's test PR.  https://github.com/apache/skywalking/pull/3110\n\n* Wait for the mount command to finish\n","date":"2019-07-18 19:47:23","modifiedFileCount":"16","status":"B","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":2,"curCode":"    public void testEndpointAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.setSourceAttribute(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(2, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n    }\n","date":"2020-04-10 11:03:24","endLine":91,"groupId":"3448","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEndpointAnalysis","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/39/66cca3c468d22a1263feeb529accf718f0fcea.src","preCode":"    public void testEndpointAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.setSourceAttribute(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(3, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n    }\n","realPath":"oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/DeepAnalysisTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":2,"curCode":"    public void testFilterAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.setSourceAttribute(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n        ConditionExpression expression = new ConditionExpression();\n        expression.setExpressionType(\"stringMatch\");\n        expression.setAttribute(\"name\");\n        expression.setValue(\"\\\"/service/prod/save\\\"\");\n        result.addFilterExpressionsParserResult(expression);\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(2, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n\n        List<Expression> filterExpressions = result.getFilterExpressions();\n        Assert.assertEquals(1, filterExpressions.size());\n        Expression filterExpression = filterExpressions.get(0);\n        Assert.assertEquals(\"EqualMatch\", filterExpression.getExpressionObject());\n        Assert.assertEquals(\"source.getName()\", filterExpression.getLeft());\n        Assert.assertEquals(\"\\\"/service/prod/save\\\"\", filterExpression.getRight());\n    }\n","date":"2020-04-10 11:03:24","endLine":127,"groupId":"3448","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterAnalysis","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/39/66cca3c468d22a1263feeb529accf718f0fcea.src","preCode":"    public void testFilterAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.setSourceAttribute(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n        ConditionExpression expression = new ConditionExpression();\n        expression.setExpressionType(\"stringMatch\");\n        expression.setAttribute(\"name\");\n        expression.setValue(\"\\\"/service/prod/save\\\"\");\n        result.addFilterExpressionsParserResult(expression);\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(3, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n\n        List<Expression> filterExpressions = result.getFilterExpressions();\n        Assert.assertEquals(1, filterExpressions.size());\n        Expression filterExpression = filterExpressions.get(0);\n        Assert.assertEquals(\"EqualMatch\", filterExpression.getExpressionObject());\n        Assert.assertEquals(\"source.getName()\", filterExpression.getLeft());\n        Assert.assertEquals(\"\\\"/service/prod/save\\\"\", filterExpression.getRight());\n    }\n","realPath":"oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/DeepAnalysisTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-08-11 09:37:21","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":3,"curCode":"    public void testEndpointAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.setSourceAttribute(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(2, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n    }\n","date":"2020-04-10 11:03:24","endLine":91,"groupId":"3448","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEndpointAnalysis","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/39/66cca3c468d22a1263feeb529accf718f0fcea.src","preCode":"    public void testEndpointAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.setSourceAttribute(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(2, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n    }\n","realPath":"oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/DeepAnalysisTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"},{"authorDate":"2020-08-11 09:37:21","commitOrder":3,"curCode":"    public void testFilterAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.setSourceAttribute(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n        ConditionExpression expression = new ConditionExpression();\n        expression.setExpressionType(\"stringMatch\");\n        expression.setAttribute(\"name\");\n        expression.setValue(\"\\\"/service/prod/save\\\"\");\n        result.addFilterExpressionsParserResult(expression);\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(2, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n\n        List<Expression> filterExpressions = result.getFilterExpressions();\n        Assert.assertEquals(1, filterExpressions.size());\n        Expression filterExpression = filterExpressions.get(0);\n        Assert.assertEquals(EqualMatch.class.getName(), filterExpression.getExpressionObject());\n        Assert.assertEquals(\"source.getName()\", filterExpression.getLeft());\n        Assert.assertEquals(\"\\\"/service/prod/save\\\"\", filterExpression.getRight());\n    }\n","date":"2020-08-11 09:37:21","endLine":133,"groupId":"3448","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterAnalysis","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e7/45ac10d577924ad5cd95a9ca0eb0e35e17b011.src","preCode":"    public void testFilterAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.setSourceAttribute(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n        ConditionExpression expression = new ConditionExpression();\n        expression.setExpressionType(\"stringMatch\");\n        expression.setAttribute(\"name\");\n        expression.setValue(\"\\\"/service/prod/save\\\"\");\n        result.addFilterExpressionsParserResult(expression);\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(2, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n\n        List<Expression> filterExpressions = result.getFilterExpressions();\n        Assert.assertEquals(1, filterExpressions.size());\n        Expression filterExpression = filterExpressions.get(0);\n        Assert.assertEquals(\"EqualMatch\", filterExpression.getExpressionObject());\n        Assert.assertEquals(\"source.getName()\", filterExpression.getLeft());\n        Assert.assertEquals(\"\\\"/service/prod/save\\\"\", filterExpression.getRight());\n    }\n","realPath":"oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/DeepAnalysisTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"ecc18b9be3328a0d85356d3bb2329eff4e09b13f","commitMessage":"@@@Support !=.  like filter expressions in OAL (#5269)\n\n","date":"2020-08-11 09:37:21","modifiedFileCount":"11","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-11-17 09:03:48","codes":[{"authorDate":"2020-11-17 09:03:48","commitOrder":4,"curCode":"    public void testEndpointAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.getSourceAttribute().add(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(2, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n    }\n","date":"2020-11-17 09:03:48","endLine":97,"groupId":"3448","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testEndpointAnalysis","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1e/b6fa524d3ac5fa8c6a566f0b574f5f9acb423f.src","preCode":"    public void testEndpointAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.setSourceAttribute(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(2, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n    }\n","realPath":"oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/DeepAnalysisTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2020-11-17 09:03:48","commitOrder":4,"curCode":"    public void testFilterAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.getSourceAttribute().add(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n        ConditionExpression expression = new ConditionExpression();\n        expression.setExpressionType(\"stringMatch\");\n        expression.getAttributes().add(\"name\");\n        expression.setValue(\"\\\"/service/prod/save\\\"\");\n        result.addFilterExpressionsParserResult(expression);\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(2, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n\n        List<Expression> filterExpressions = result.getFilterExpressions();\n        Assert.assertEquals(1, filterExpressions.size());\n        Expression filterExpression = filterExpressions.get(0);\n        Assert.assertEquals(EqualMatch.class.getName(), filterExpression.getExpressionObject());\n        Assert.assertEquals(\"source.getName()\", filterExpression.getLeft());\n        Assert.assertEquals(\"\\\"/service/prod/save\\\"\", filterExpression.getRight());\n    }\n","date":"2020-11-17 09:03:48","endLine":133,"groupId":"3448","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterAnalysis","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1e/b6fa524d3ac5fa8c6a566f0b574f5f9acb423f.src","preCode":"    public void testFilterAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.setSourceAttribute(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n        ConditionExpression expression = new ConditionExpression();\n        expression.setExpressionType(\"stringMatch\");\n        expression.setAttribute(\"name\");\n        expression.setValue(\"\\\"/service/prod/save\\\"\");\n        result.addFilterExpressionsParserResult(expression);\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(2, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n\n        List<Expression> filterExpressions = result.getFilterExpressions();\n        Assert.assertEquals(1, filterExpressions.size());\n        Expression filterExpression = filterExpressions.get(0);\n        Assert.assertEquals(EqualMatch.class.getName(), filterExpression.getExpressionObject());\n        Assert.assertEquals(\"source.getName()\", filterExpression.getLeft());\n        Assert.assertEquals(\"\\\"/service/prod/save\\\"\", filterExpression.getRight());\n    }\n","realPath":"oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/DeepAnalysisTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"9c486a05ee3ad8947011168e0039f5b48922e4ab","commitMessage":"@@@Support `sideCar.internalErrorCode` in the sources (#5849)\n\n* Support nested sidecar object in the scope.\n\n* Update the changelog.\n\n* Fix comments and docs.","date":"2020-11-17 09:03:48","modifiedFileCount":"19","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-09-02 23:53:05","codes":[{"authorDate":"2020-11-17 09:03:48","commitOrder":5,"curCode":"    public void testEndpointAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.getSourceAttribute().add(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(2, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n    }\n","date":"2020-11-17 09:03:48","endLine":97,"groupId":"10879","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testEndpointAnalysis","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1e/b6fa524d3ac5fa8c6a566f0b574f5f9acb423f.src","preCode":"    public void testEndpointAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.getSourceAttribute().add(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(2, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n    }\n","realPath":"oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/DeepAnalysisTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"},{"authorDate":"2021-09-02 23:53:05","commitOrder":5,"curCode":"    public void testFilterAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.getSourceAttribute().add(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n        ConditionExpression expression = new ConditionExpression();\n        expression.setExpressionType(\"stringMatch\");\n        expression.getAttributes().add(\"name\");\n        expression.setValue(\"\\\"/service/prod/save\\\"\");\n        result.addFilterExpressionsParserResult(expression);\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(2, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n\n        List<Expression> filterExpressions = result.getFilterExpressions();\n        Assert.assertEquals(1, filterExpressions.size());\n        Expression filterExpression = filterExpressions.get(0);\n        Assert.assertEquals(StringMatch.class.getName(), filterExpression.getExpressionObject());\n        Assert.assertEquals(\"source.getName()\", filterExpression.getLeft());\n        Assert.assertEquals(\"\\\"/service/prod/save\\\"\", filterExpression.getRight());\n    }\n","date":"2021-09-02 23:53:05","endLine":133,"groupId":"10879","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testFilterAnalysis","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/58/d353ce7462d504139c0616b11a8b2d7914e28e.src","preCode":"    public void testFilterAnalysis() {\n        AnalysisResult result = new AnalysisResult();\n        result.setSourceName(\"Endpoint\");\n        result.setPackageName(\"endpoint.endpointavg\");\n        result.getSourceAttribute().add(\"latency\");\n        result.setMetricsName(\"EndpointAvg\");\n        result.setAggregationFunctionName(\"longAvg\");\n        ConditionExpression expression = new ConditionExpression();\n        expression.setExpressionType(\"stringMatch\");\n        expression.getAttributes().add(\"name\");\n        expression.setValue(\"\\\"/service/prod/save\\\"\");\n        result.addFilterExpressionsParserResult(expression);\n\n        DeepAnalysis analysis = new DeepAnalysis();\n        result = analysis.analysis(result);\n\n        EntryMethod method = result.getEntryMethod();\n        Assert.assertEquals(\"combine\", method.getMethodName());\n        Assert.assertEquals(\"(long)(source.getLatency())\", method.getArgsExpressions().get(0));\n        Assert.assertEquals(\"(long)(1)\", method.getArgsExpressions().get(1));\n\n        List<SourceColumn> source = result.getFieldsFromSource();\n        Assert.assertEquals(2, source.size());\n\n        List<DataColumn> persistentFields = result.getPersistentFields();\n        Assert.assertEquals(4, persistentFields.size());\n\n        List<Expression> filterExpressions = result.getFilterExpressions();\n        Assert.assertEquals(1, filterExpressions.size());\n        Expression filterExpression = filterExpressions.get(0);\n        Assert.assertEquals(EqualMatch.class.getName(), filterExpression.getExpressionObject());\n        Assert.assertEquals(\"source.getName()\", filterExpression.getLeft());\n        Assert.assertEquals(\"\\\"/service/prod/save\\\"\", filterExpression.getRight());\n    }\n","realPath":"oap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/DeepAnalysisTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"a3317a8238493ee3da9b9ac8d02d207866388877","commitMessage":"@@@Support for filter filtering of int type values (#7636)\n\n","date":"2021-09-02 23:53:05","modifiedFileCount":"4","status":"M","submitter":"YczYanchengzhe"}]
