[{"authorTime":"2020-03-16 23:45:14","codes":[{"authorDate":"2020-03-16 23:45:14","commitOrder":1,"curCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/info\") || !endpoint.getLabel().equals(\"/nginx/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","date":"2020-03-16 23:45:14","endLine":230,"groupId":"7008","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(Endpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c2/f237298bf485d1675074c4ece4b2df682d2e49.src","preCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/info\") || !endpoint.getLabel().equals(\"/nginx/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"B"},{"authorDate":"2020-03-16 23:45:14","commitOrder":1,"curCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","date":"2020-03-16 23:45:14","endLine":224,"groupId":"7008","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(finalEndpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/43/9f50bda3b3518a6cf46e194d7f714ebfeba9c8.src","preCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/storage/StorageE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"B"}],"commitId":"dcd66ee6e940bdc9a7ecf90415929bfd48a3a284","commitMessage":"@@@Rewrite the E2E test framework and tests (#4510)\n\nMotivation:\n\nAccording the feedback from the community.  the e2e tests are hard for\nthem to understand and get them started.  so this pull request aims to\nrewrite the e2e tests with some improvements:\n\n- debuggable locally.  now you can run every individual case directly\ninside the IDE.  just like running a plain unit test.\n\n- same functionalities of multiple counterparts share the same codes. \ncases like different storages and cluster coordinators share the same\ncodes.  easy to add more similar cases.\n\n- the \"end\" now extends to the Doccker images.  meaning that some bugs\nlike #4483 and #4471 can be more easily and early to be discovered.\n\n- codes style and license headers are checked\n\nModifications:\n\n- adopt jupeter (a.k.a junit 5).  testcontainers as the new test\nframework.  all containers are orchestrated by docker-compose.yml. \nwell-known technology that developers should be familiar with.\n\n- rewrite all test cases and verify them.\n\n- reorganize the workflows in GitHub Actions.\n\nResult:\n\n- new e2e test should be easy to add.\n\n- closes https://github.com/apache/skywalking/issues/4472","date":"2020-03-16 23:45:14","modifiedFileCount":"3","status":"B","submitter":"kezhenxu94"},{"authorTime":"2020-03-16 23:45:14","codes":[{"authorDate":"2020-04-11 22:31:28","commitOrder":2,"curCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/info\") && !endpoint.getLabel().equals(\"/nginx/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","date":"2020-04-11 22:31:28","endLine":237,"groupId":"7008","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(Endpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/46/fb45915b26808b8086711facb9bec5117edaf4.src","preCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/info\") || !endpoint.getLabel().equals(\"/nginx/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2020-03-16 23:45:14","commitOrder":2,"curCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","date":"2020-03-16 23:45:14","endLine":224,"groupId":"7008","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(finalEndpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/43/9f50bda3b3518a6cf46e194d7f714ebfeba9c8.src","preCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/storage/StorageE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"N"}],"commitId":"1601cc107c800e1011b37f131d1b520c1a8a57b0","commitMessage":"@@@Support `java` -> `nginx` -> `java` e2e test.  and v3 protocol (#4637)\n\n","date":"2020-04-11 22:31:28","modifiedFileCount":"1","status":"M","submitter":"mrproliu"},{"authorTime":"2020-03-16 23:45:14","codes":[{"authorDate":"2020-04-14 09:32:54","commitOrder":3,"curCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/nginx/end/info\") && !endpoint.getLabel().equals(\"/nginx/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","date":"2020-04-14 09:32:54","endLine":243,"groupId":"7008","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(Endpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/48/ebc1d7121e1501f2100176f2987e74c9a5e26e.src","preCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/info\") && !endpoint.getLabel().equals(\"/nginx/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2020-03-16 23:45:14","commitOrder":3,"curCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","date":"2020-03-16 23:45:14","endLine":224,"groupId":"7008","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(finalEndpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/43/9f50bda3b3518a6cf46e194d7f714ebfeba9c8.src","preCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/storage/StorageE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"N"}],"commitId":"171620bfa8e74bfc84e7d322c260f319943b7191","commitMessage":"@@@Add Nginx correlation e2e test (#4646)\n\n","date":"2020-04-14 09:32:54","modifiedFileCount":"4","status":"M","submitter":"mrproliu"},{"authorTime":"2020-10-29 14:38:49","codes":[{"authorDate":"2020-10-29 14:38:49","commitOrder":4,"curCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/nginx/end/info\") && !endpoint.getLabel().equals(\"/nginx/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n            for (String metricName : ALL_ENDPOINT_MULTIPLE_LINEAR_METRICS) {\n                verifyPercentileMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n        }\n    }\n","date":"2020-10-29 14:38:49","endLine":249,"groupId":"1072","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"verifyEndpointsMetrics","params":"(Endpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/58/a2788fdc1b4516b99744cd01835d8d999a59ee.src","preCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/nginx/end/info\") && !endpoint.getLabel().equals(\"/nginx/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"},{"authorDate":"2020-10-29 14:38:49","commitOrder":4,"curCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n\n            for (String metricName : ALL_ENDPOINT_MULTIPLE_LINEAR_METRICS) {\n                verifyPercentileMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n        }\n    }\n","date":"2020-10-29 14:38:49","endLine":353,"groupId":"1072","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(finalEndpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/89/9dd60c8f4d8f6e3219c7d3f22943628ce5b036.src","preCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/storage/StorageE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"c95a9134925cbe8101dc72dbaca38269eb3dc3b1","commitMessage":"@@@Add percentile tests in e2e test. (#5737)\n\n","date":"2020-10-29 14:38:49","modifiedFileCount":"11","status":"M","submitter":"Humbertzhang"}]
