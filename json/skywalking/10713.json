[{"authorTime":"2020-07-30 11:55:49","codes":[{"authorDate":"2020-07-30 11:55:49","commitOrder":1,"curCode":"        public Factory(ModuleManager moduleManager) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.networkAddressAliasCache = moduleManager.find(CoreModule.NAME)\n                                                         .provider()\n                                                         .getService(NetworkAddressAliasCache.class);\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","date":"2020-07-30 11:55:49","endLine":371,"groupId":"5413","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"Factory","params":"(ModuleManagermoduleManager)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/96/a8a802833d27e1d82bbb504a6e057c838db296.src","preCode":"        public Factory(ModuleManager moduleManager) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.networkAddressAliasCache = moduleManager.find(CoreModule.NAME)\n                                                         .provider()\n                                                         .getService(NetworkAddressAliasCache.class);\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"B"},{"authorDate":"2020-07-30 11:55:49","commitOrder":1,"curCode":"        public Factory(ModuleManager moduleManager, AnalyzerModuleConfig config) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.sampler = new TraceSegmentSampler(config.getTraceSampleRateWatcher());\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","date":"2020-07-30 11:55:49","endLine":183,"groupId":"6504","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"Factory","params":"(ModuleManagermoduleManager@AnalyzerModuleConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b0/f34613d1b4e17adab7fa9cb74322e2038d7a08.src","preCode":"        public Factory(ModuleManager moduleManager, AnalyzerModuleConfig config) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.sampler = new TraceSegmentSampler(config.getTraceSampleRateWatcher());\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/SegmentAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"B"}],"commitId":"f9257f5274f6a55e8bf8424444707aecf7a1f2c1","commitMessage":"@@@Provide kafka as collector/reporter (#4847)\n\n","date":"2020-07-30 11:55:49","modifiedFileCount":"24","status":"B","submitter":"Daming"},{"authorTime":"2020-08-11 07:24:40","codes":[{"authorDate":"2020-07-30 11:55:49","commitOrder":2,"curCode":"        public Factory(ModuleManager moduleManager) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.networkAddressAliasCache = moduleManager.find(CoreModule.NAME)\n                                                         .provider()\n                                                         .getService(NetworkAddressAliasCache.class);\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","date":"2020-07-30 11:55:49","endLine":371,"groupId":"5413","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"Factory","params":"(ModuleManagermoduleManager)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/96/a8a802833d27e1d82bbb504a6e057c838db296.src","preCode":"        public Factory(ModuleManager moduleManager) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.networkAddressAliasCache = moduleManager.find(CoreModule.NAME)\n                                                         .provider()\n                                                         .getService(NetworkAddressAliasCache.class);\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"N"},{"authorDate":"2020-08-11 07:24:40","commitOrder":2,"curCode":"        public Factory(ModuleManager moduleManager, AnalyzerModuleConfig config) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            final ConfigService configService = moduleManager.find(CoreModule.NAME)\n                                                             .provider()\n                                                             .getService(ConfigService.class);\n            this.searchTagKeys = Arrays.asList(configService.getSearchableTracesTags().split(Const.COMMA));\n            this.sampler = new TraceSegmentSampler(config.getTraceSampleRateWatcher());\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","date":"2020-08-11 07:24:40","endLine":202,"groupId":"1926","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"Factory","params":"(ModuleManagermoduleManager@AnalyzerModuleConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bb/887862bc717471ac89f689af95ccd192c025f5.src","preCode":"        public Factory(ModuleManager moduleManager, AnalyzerModuleConfig config) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.sampler = new TraceSegmentSampler(config.getTraceSampleRateWatcher());\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/SegmentAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"}],"commitId":"7f7e96b088d3cb0a19f8ddeafe5ede9764ec2eda","commitMessage":"@@@[IMPORTANT] Query traces with tags as condition (#5270)\n\n","date":"2020-08-11 07:24:40","modifiedFileCount":"39","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-08-28 20:37:19","codes":[{"authorDate":"2020-07-30 11:55:49","commitOrder":3,"curCode":"        public Factory(ModuleManager moduleManager) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.networkAddressAliasCache = moduleManager.find(CoreModule.NAME)\n                                                         .provider()\n                                                         .getService(NetworkAddressAliasCache.class);\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","date":"2020-07-30 11:55:49","endLine":371,"groupId":"5413","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"Factory","params":"(ModuleManagermoduleManager)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/96/a8a802833d27e1d82bbb504a6e057c838db296.src","preCode":"        public Factory(ModuleManager moduleManager) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.networkAddressAliasCache = moduleManager.find(CoreModule.NAME)\n                                                         .provider()\n                                                         .getService(NetworkAddressAliasCache.class);\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"N"},{"authorDate":"2020-08-28 20:37:19","commitOrder":3,"curCode":"        public Factory(ModuleManager moduleManager, AnalyzerModuleConfig config) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            final ConfigService configService = moduleManager.find(CoreModule.NAME)\n                                                             .provider()\n                                                             .getService(ConfigService.class);\n            this.searchTagKeys = Arrays.asList(configService.getSearchableTracesTags().split(Const.COMMA));\n            this.sampler = new TraceSegmentSampler(config.getTraceSampleRateWatcher());\n            this.forceSampleErrorSegment = config.isForceSampleErrorSegment();\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","date":"2020-08-28 20:37:19","endLine":203,"groupId":"1926","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"Factory","params":"(ModuleManagermoduleManager@AnalyzerModuleConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d4/6b42709b9053bdb7514c5e34b59a4b6d9d23f7.src","preCode":"        public Factory(ModuleManager moduleManager, AnalyzerModuleConfig config) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            final ConfigService configService = moduleManager.find(CoreModule.NAME)\n                                                             .provider()\n                                                             .getService(ConfigService.class);\n            this.searchTagKeys = Arrays.asList(configService.getSearchableTracesTags().split(Const.COMMA));\n            this.sampler = new TraceSegmentSampler(config.getTraceSampleRateWatcher());\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/SegmentAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"}],"commitId":"6227db19cd057512e3a97312cdfd0ebf688b74d5","commitMessage":"@@@Save error trace segment even that segment will abandoned by sampling mechanism (#5407)\n\n* Save some error trace segment.  event this segment abandoned by server side trace sampling mechanism.\n* Support forceSaveErrorSegment config to control force save some error segment.\n\nCo-authored-by: echo <zifeihan@foxmail.com>\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>","date":"2020-08-28 20:37:19","modifiedFileCount":"2","status":"M","submitter":"zifeihan"},{"authorTime":"2020-09-05 20:20:21","codes":[{"authorDate":"2020-07-30 11:55:49","commitOrder":4,"curCode":"        public Factory(ModuleManager moduleManager) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.networkAddressAliasCache = moduleManager.find(CoreModule.NAME)\n                                                         .provider()\n                                                         .getService(NetworkAddressAliasCache.class);\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","date":"2020-07-30 11:55:49","endLine":371,"groupId":"5413","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"Factory","params":"(ModuleManagermoduleManager)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/96/a8a802833d27e1d82bbb504a6e057c838db296.src","preCode":"        public Factory(ModuleManager moduleManager) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.networkAddressAliasCache = moduleManager.find(CoreModule.NAME)\n                                                         .provider()\n                                                         .getService(NetworkAddressAliasCache.class);\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"N"},{"authorDate":"2020-09-05 20:20:21","commitOrder":4,"curCode":"        public Factory(ModuleManager moduleManager, AnalyzerModuleConfig config) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            final ConfigService configService = moduleManager.find(CoreModule.NAME)\n                                                             .provider()\n                                                             .getService(ConfigService.class);\n            this.searchTagKeys = Arrays.asList(configService.getSearchableTracesTags().split(Const.COMMA));\n            this.sampler = new TraceSegmentSampler(config.getTraceSampleRateWatcher());\n            this.forceSampleErrorSegment = config.isForceSampleErrorSegment();\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n            this.segmentStatusAnalyzer = SegmentStatusStrategy.findByName(config.getSegmentStatusAnalysisStrategy())\n                                                              .getExceptionAnalyzer();\n        }\n","date":"2020-09-05 20:20:21","endLine":206,"groupId":"1926","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"Factory","params":"(ModuleManagermoduleManager@AnalyzerModuleConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/d4214352930fdaad566c7ebb19f5b2a95207ee.src","preCode":"        public Factory(ModuleManager moduleManager, AnalyzerModuleConfig config) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            final ConfigService configService = moduleManager.find(CoreModule.NAME)\n                                                             .provider()\n                                                             .getService(ConfigService.class);\n            this.searchTagKeys = Arrays.asList(configService.getSearchableTracesTags().split(Const.COMMA));\n            this.sampler = new TraceSegmentSampler(config.getTraceSampleRateWatcher());\n            this.forceSampleErrorSegment = config.isForceSampleErrorSegment();\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/SegmentAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"4f1dab70037428d1cd09874acee1887fe46e0078","commitMessage":"@@@Support segment status based on entry/first span only (#5416)\n\n","date":"2020-09-05 20:20:21","modifiedFileCount":"2","status":"M","submitter":"Evan"},{"authorTime":"2020-10-30 14:30:19","codes":[{"authorDate":"2020-07-30 11:55:49","commitOrder":5,"curCode":"        public Factory(ModuleManager moduleManager) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.networkAddressAliasCache = moduleManager.find(CoreModule.NAME)\n                                                         .provider()\n                                                         .getService(NetworkAddressAliasCache.class);\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","date":"2020-07-30 11:55:49","endLine":371,"groupId":"5413","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"Factory","params":"(ModuleManagermoduleManager)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/96/a8a802833d27e1d82bbb504a6e057c838db296.src","preCode":"        public Factory(ModuleManager moduleManager) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.networkAddressAliasCache = moduleManager.find(CoreModule.NAME)\n                                                         .provider()\n                                                         .getService(NetworkAddressAliasCache.class);\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"N"},{"authorDate":"2020-10-30 14:30:19","commitOrder":5,"curCode":"        public Factory(ModuleManager moduleManager, AnalyzerModuleConfig config) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            final ConfigService configService = moduleManager.find(CoreModule.NAME)\n                                                             .provider()\n                                                             .getService(ConfigService.class);\n            this.searchTagKeys = Arrays.asList(configService.getSearchableTracesTags().split(Const.COMMA));\n            this.sampler = new TraceSegmentSampler(config.getTraceSampleRateWatcher());\n            this.forceSampleErrorSegment = config.isForceSampleErrorSegment();\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n            this.segmentStatusAnalyzer = SegmentStatusStrategy.findByName(config.getSegmentStatusAnalysisStrategy())\n                                                              .getExceptionAnalyzer();\n            this.traceLatencyThresholdsAndWatcher = config.getTraceLatencyThresholdsAndWatcher();\n        }\n","date":"2020-10-30 14:30:19","endLine":212,"groupId":"1926","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"Factory","params":"(ModuleManagermoduleManager@AnalyzerModuleConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/51/e4c682024779cb91ac9a34f1608b1a39f29f8a.src","preCode":"        public Factory(ModuleManager moduleManager, AnalyzerModuleConfig config) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            final ConfigService configService = moduleManager.find(CoreModule.NAME)\n                                                             .provider()\n                                                             .getService(ConfigService.class);\n            this.searchTagKeys = Arrays.asList(configService.getSearchableTracesTags().split(Const.COMMA));\n            this.sampler = new TraceSegmentSampler(config.getTraceSampleRateWatcher());\n            this.forceSampleErrorSegment = config.isForceSampleErrorSegment();\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n            this.segmentStatusAnalyzer = SegmentStatusStrategy.findByName(config.getSegmentStatusAnalysisStrategy())\n                                                              .getExceptionAnalyzer();\n        }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/SegmentAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"8a2a0008bac1775b7e826d0eefb96c070da5ee0e","commitMessage":"@@@Add `slowTraceSegmentThreshold` to forcibly sample slow traces (#5707)\n\n","date":"2020-10-30 14:30:19","modifiedFileCount":"3","status":"M","submitter":"zifeihan"},{"authorTime":"2021-08-30 14:52:20","codes":[{"authorDate":"2020-07-30 11:55:49","commitOrder":6,"curCode":"        public Factory(ModuleManager moduleManager) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.networkAddressAliasCache = moduleManager.find(CoreModule.NAME)\n                                                         .provider()\n                                                         .getService(NetworkAddressAliasCache.class);\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","date":"2020-07-30 11:55:49","endLine":371,"groupId":"10713","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"Factory","params":"(ModuleManagermoduleManager)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/96/a8a802833d27e1d82bbb504a6e057c838db296.src","preCode":"        public Factory(ModuleManager moduleManager) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            this.networkAddressAliasCache = moduleManager.find(CoreModule.NAME)\n                                                         .provider()\n                                                         .getService(NetworkAddressAliasCache.class);\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n        }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"N"},{"authorDate":"2021-08-30 14:52:20","commitOrder":6,"curCode":"        public Factory(ModuleManager moduleManager, AnalyzerModuleConfig config) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            final ConfigService configService = moduleManager.find(CoreModule.NAME)\n                                                             .provider()\n                                                             .getService(ConfigService.class);\n            this.searchTagKeys = Arrays.asList(configService.getSearchableTracesTags().split(Const.COMMA));\n            this.sampler = new TraceSegmentSampler(config.getTraceSamplingPolicyWatcher());\n            this.forceSampleErrorSegment = config.isForceSampleErrorSegment();\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n            this.segmentStatusAnalyzer = SegmentStatusStrategy.findByName(config.getSegmentStatusAnalysisStrategy())\n                                                              .getExceptionAnalyzer();\n        }\n","date":"2021-08-30 14:52:20","endLine":204,"groupId":"10713","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"Factory","params":"(ModuleManagermoduleManager@AnalyzerModuleConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c2/b87aa60b542aa174f1d7ecdab060c136e52282.src","preCode":"        public Factory(ModuleManager moduleManager, AnalyzerModuleConfig config) {\n            this.sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n            final ConfigService configService = moduleManager.find(CoreModule.NAME)\n                                                             .provider()\n                                                             .getService(ConfigService.class);\n            this.searchTagKeys = Arrays.asList(configService.getSearchableTracesTags().split(Const.COMMA));\n            this.sampler = new TraceSegmentSampler(config.getTraceSampleRateWatcher());\n            this.forceSampleErrorSegment = config.isForceSampleErrorSegment();\n            this.namingControl = moduleManager.find(CoreModule.NAME)\n                                              .provider()\n                                              .getService(NamingControl.class);\n            this.segmentStatusAnalyzer = SegmentStatusStrategy.findByName(config.getSegmentStatusAnalysisStrategy())\n                                                              .getExceptionAnalyzer();\n            this.traceLatencyThresholdsAndWatcher = config.getTraceLatencyThresholdsAndWatcher();\n        }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/SegmentAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"1c0fc982b2dc61ca7e452142df7f9846e867d71d","commitMessage":"@@@Support configure sampling rate dynamically for service dimension on the backend side (#7554)\n\n","date":"2021-08-30 14:52:20","modifiedFileCount":"4","status":"M","submitter":"HendSame"}]
