[{"authorTime":"2019-03-25 15:48:00","codes":[{"authorDate":"2019-03-21 18:38:32","commitOrder":5,"curCode":"    @Override public void notify(Indicator indicator) {\n        WithMetadata withMetadata = (WithMetadata)indicator;\n        IndicatorMetaInfo meta = withMetadata.getMeta();\n        int scope = meta.getScope();\n\n        if (!DefaultScopeDefine.inServiceCatalog(scope)\n            && !DefaultScopeDefine.inServiceInstanceCatalog(scope)\n            && !DefaultScopeDefine.inEndpointCatalog(scope)) {\n            return;\n        }\n\n        MetaInAlarm metaInAlarm;\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int serviceId = Integer.parseInt(meta.getId());\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n            ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n            serviceMetaInAlarm.setIndicatorName(meta.getIndicatorName());\n            serviceMetaInAlarm.setId(serviceId);\n            serviceMetaInAlarm.setName(serviceInventory.getName());\n            metaInAlarm = serviceMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int serviceInstanceId = Integer.parseInt(meta.getId());\n            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceInstanceId);\n            ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n            instanceMetaInAlarm.setIndicatorName(meta.getIndicatorName());\n            instanceMetaInAlarm.setId(serviceInstanceId);\n            instanceMetaInAlarm.setName(serviceInstanceInventory.getName());\n            metaInAlarm = instanceMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            int endpointId = Integer.parseInt(meta.getId());\n            EndpointInventory endpointInventory = endpointInventoryCache.get(endpointId);\n            EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n            endpointMetaInAlarm.setIndicatorName(meta.getIndicatorName());\n            endpointMetaInAlarm.setId(endpointId);\n\n            int serviceId = endpointInventory.getServiceId();\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n\n            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n\n            endpointMetaInAlarm.setName(textName);\n            metaInAlarm = endpointMetaInAlarm;\n        } else {\n            return;\n        }\n\n        List<RunningRule> runningRules = core.findRunningRule(meta.getIndicatorName());\n        if (runningRules == null) {\n            return;\n        }\n\n        runningRules.forEach(rule -> rule.in(metaInAlarm, indicator));\n    }\n","date":"2019-03-21 18:38:32","endLine":95,"groupId":"3705","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"notify","params":"(Indicatorindicator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/10/a4a02ea65496de98f8a4bb88d07b9bc53234b8.src","preCode":"    @Override public void notify(Indicator indicator) {\n        WithMetadata withMetadata = (WithMetadata)indicator;\n        IndicatorMetaInfo meta = withMetadata.getMeta();\n        int scope = meta.getScope();\n\n        if (!DefaultScopeDefine.inServiceCatalog(scope)\n            && !DefaultScopeDefine.inServiceInstanceCatalog(scope)\n            && !DefaultScopeDefine.inEndpointCatalog(scope)) {\n            return;\n        }\n\n        MetaInAlarm metaInAlarm;\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int serviceId = Integer.parseInt(meta.getId());\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n            ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n            serviceMetaInAlarm.setIndicatorName(meta.getIndicatorName());\n            serviceMetaInAlarm.setId(serviceId);\n            serviceMetaInAlarm.setName(serviceInventory.getName());\n            metaInAlarm = serviceMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int serviceInstanceId = Integer.parseInt(meta.getId());\n            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceInstanceId);\n            ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n            instanceMetaInAlarm.setIndicatorName(meta.getIndicatorName());\n            instanceMetaInAlarm.setId(serviceInstanceId);\n            instanceMetaInAlarm.setName(serviceInstanceInventory.getName());\n            metaInAlarm = instanceMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            int endpointId = Integer.parseInt(meta.getId());\n            EndpointInventory endpointInventory = endpointInventoryCache.get(endpointId);\n            EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n            endpointMetaInAlarm.setIndicatorName(meta.getIndicatorName());\n            endpointMetaInAlarm.setId(endpointId);\n\n            int serviceId = endpointInventory.getServiceId();\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n\n            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n\n            endpointMetaInAlarm.setName(textName);\n            metaInAlarm = endpointMetaInAlarm;\n        } else {\n            return;\n        }\n\n        List<RunningRule> runningRules = core.findRunningRule(meta.getIndicatorName());\n        if (runningRules == null) {\n            return;\n        }\n\n        runningRules.forEach(rule -> rule.in(metaInAlarm, indicator));\n    }\n","realPath":"oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"NB"},{"authorDate":"2019-03-25 15:48:00","commitOrder":5,"curCode":"    protected String getEntityName(IndicatorMetaInfo meta) {\n        int scope = meta.getScope();\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            return serviceInventoryCache.get(scope).getName();\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            return serviceInstanceInventoryCache.get(scope).getName();\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            return endpointInventoryCache.get(scope).getName();\n        } else if (scope == DefaultScopeDefine.ALL) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n","date":"2019-03-25 15:48:00","endLine":48,"groupId":"5948","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getEntityName","params":"(IndicatorMetaInfometa)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/80/0d248988801bcf9cbbe5ebc96041130a64a7f9.src","preCode":"    protected String getEntityName(IndicatorMetaInfo meta) {\n        int scope = meta.getScope();\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            return serviceInventoryCache.get(scope).getName();\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            return serviceInstanceInventoryCache.get(scope).getName();\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            return endpointInventoryCache.get(scope).getName();\n        } else if (scope == DefaultScopeDefine.ALL) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n","realPath":"oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/MetricFormatter.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"}],"commitId":"0ecf641c1756c54ae84e8d2dea5064af5b572850","commitMessage":"@@@Support gRPC metric exporter (#2395)\n\n* Support grpc exporter.\n\n* Support scope(all) metric export and finish document.\n\n* Close exporter even in local debug env. And fix CI.\n\n* Remove the system.out\n\n* Fix absent 4.\n\n* Support subscription from remote.\n\n* Add the doc\n\n* Update application.yml\n","date":"2019-03-25 15:48:00","modifiedFileCount":"0","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-05-10 08:05:37","codes":[{"authorDate":"2019-05-10 08:05:37","commitOrder":6,"curCode":"    @Override public void notify(Metrics metrics) {\n        WithMetadata withMetadata = (WithMetadata)metrics;\n        MetricsMetaInfo meta = withMetadata.getMeta();\n        int scope = meta.getScope();\n\n        if (!DefaultScopeDefine.inServiceCatalog(scope)\n            && !DefaultScopeDefine.inServiceInstanceCatalog(scope)\n            && !DefaultScopeDefine.inEndpointCatalog(scope)) {\n            return;\n        }\n\n        MetaInAlarm metaInAlarm;\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int serviceId = Integer.parseInt(meta.getId());\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n            ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n            serviceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            serviceMetaInAlarm.setId(serviceId);\n            serviceMetaInAlarm.setName(serviceInventory.getName());\n            metaInAlarm = serviceMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int serviceInstanceId = Integer.parseInt(meta.getId());\n            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceInstanceId);\n            ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n            instanceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            instanceMetaInAlarm.setId(serviceInstanceId);\n            instanceMetaInAlarm.setName(serviceInstanceInventory.getName());\n            metaInAlarm = instanceMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            int endpointId = Integer.parseInt(meta.getId());\n            EndpointInventory endpointInventory = endpointInventoryCache.get(endpointId);\n            EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n            endpointMetaInAlarm.setMetricsName(meta.getMetricsName());\n            endpointMetaInAlarm.setId(endpointId);\n\n            int serviceId = endpointInventory.getServiceId();\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n\n            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n\n            endpointMetaInAlarm.setName(textName);\n            metaInAlarm = endpointMetaInAlarm;\n        } else {\n            return;\n        }\n\n        List<RunningRule> runningRules = core.findRunningRule(meta.getMetricsName());\n        if (runningRules == null) {\n            return;\n        }\n\n        runningRules.forEach(rule -> rule.in(metaInAlarm, metrics));\n    }\n","date":"2019-05-10 08:05:37","endLine":95,"groupId":"3705","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"notify","params":"(Metricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/33/41cf8957b42b02d22ad0b5adcdf721093a17a3.src","preCode":"    @Override public void notify(Indicator indicator) {\n        WithMetadata withMetadata = (WithMetadata)indicator;\n        IndicatorMetaInfo meta = withMetadata.getMeta();\n        int scope = meta.getScope();\n\n        if (!DefaultScopeDefine.inServiceCatalog(scope)\n            && !DefaultScopeDefine.inServiceInstanceCatalog(scope)\n            && !DefaultScopeDefine.inEndpointCatalog(scope)) {\n            return;\n        }\n\n        MetaInAlarm metaInAlarm;\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int serviceId = Integer.parseInt(meta.getId());\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n            ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n            serviceMetaInAlarm.setIndicatorName(meta.getIndicatorName());\n            serviceMetaInAlarm.setId(serviceId);\n            serviceMetaInAlarm.setName(serviceInventory.getName());\n            metaInAlarm = serviceMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int serviceInstanceId = Integer.parseInt(meta.getId());\n            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceInstanceId);\n            ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n            instanceMetaInAlarm.setIndicatorName(meta.getIndicatorName());\n            instanceMetaInAlarm.setId(serviceInstanceId);\n            instanceMetaInAlarm.setName(serviceInstanceInventory.getName());\n            metaInAlarm = instanceMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            int endpointId = Integer.parseInt(meta.getId());\n            EndpointInventory endpointInventory = endpointInventoryCache.get(endpointId);\n            EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n            endpointMetaInAlarm.setIndicatorName(meta.getIndicatorName());\n            endpointMetaInAlarm.setId(endpointId);\n\n            int serviceId = endpointInventory.getServiceId();\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n\n            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n\n            endpointMetaInAlarm.setName(textName);\n            metaInAlarm = endpointMetaInAlarm;\n        } else {\n            return;\n        }\n\n        List<RunningRule> runningRules = core.findRunningRule(meta.getIndicatorName());\n        if (runningRules == null) {\n            return;\n        }\n\n        runningRules.forEach(rule -> rule.in(metaInAlarm, indicator));\n    }\n","realPath":"oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2019-05-10 08:05:37","commitOrder":6,"curCode":"    protected String getEntityName(MetricsMetaInfo meta) {\n        int scope = meta.getScope();\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            return serviceInventoryCache.get(scope).getName();\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            return serviceInstanceInventoryCache.get(scope).getName();\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            return endpointInventoryCache.get(scope).getName();\n        } else if (scope == DefaultScopeDefine.ALL) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n","date":"2019-05-10 08:05:37","endLine":48,"groupId":"5948","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getEntityName","params":"(MetricsMetaInfometa)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6c/04b909c361e96d0be1278c1f33f5b2643cffa1.src","preCode":"    protected String getEntityName(IndicatorMetaInfo meta) {\n        int scope = meta.getScope();\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            return serviceInventoryCache.get(scope).getName();\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            return serviceInstanceInventoryCache.get(scope).getName();\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            return endpointInventoryCache.get(scope).getName();\n        } else if (scope == DefaultScopeDefine.ALL) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n","realPath":"oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/MetricFormatter.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"ed78dabe8b142be3d546d349046768135f0a752a","commitMessage":"@@@Rename metric and indicator to metrics. (#2643)\n\n* Rename metric to metrics.\n\n* Fixed test case execute failure issues.\n","date":"2019-05-10 08:05:37","modifiedFileCount":"102","status":"M","submitter":"??? pengys"},{"authorTime":"2019-05-23 16:07:28","codes":[{"authorDate":"2019-05-10 08:05:37","commitOrder":7,"curCode":"    @Override public void notify(Metrics metrics) {\n        WithMetadata withMetadata = (WithMetadata)metrics;\n        MetricsMetaInfo meta = withMetadata.getMeta();\n        int scope = meta.getScope();\n\n        if (!DefaultScopeDefine.inServiceCatalog(scope)\n            && !DefaultScopeDefine.inServiceInstanceCatalog(scope)\n            && !DefaultScopeDefine.inEndpointCatalog(scope)) {\n            return;\n        }\n\n        MetaInAlarm metaInAlarm;\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int serviceId = Integer.parseInt(meta.getId());\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n            ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n            serviceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            serviceMetaInAlarm.setId(serviceId);\n            serviceMetaInAlarm.setName(serviceInventory.getName());\n            metaInAlarm = serviceMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int serviceInstanceId = Integer.parseInt(meta.getId());\n            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceInstanceId);\n            ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n            instanceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            instanceMetaInAlarm.setId(serviceInstanceId);\n            instanceMetaInAlarm.setName(serviceInstanceInventory.getName());\n            metaInAlarm = instanceMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            int endpointId = Integer.parseInt(meta.getId());\n            EndpointInventory endpointInventory = endpointInventoryCache.get(endpointId);\n            EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n            endpointMetaInAlarm.setMetricsName(meta.getMetricsName());\n            endpointMetaInAlarm.setId(endpointId);\n\n            int serviceId = endpointInventory.getServiceId();\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n\n            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n\n            endpointMetaInAlarm.setName(textName);\n            metaInAlarm = endpointMetaInAlarm;\n        } else {\n            return;\n        }\n\n        List<RunningRule> runningRules = core.findRunningRule(meta.getMetricsName());\n        if (runningRules == null) {\n            return;\n        }\n\n        runningRules.forEach(rule -> rule.in(metaInAlarm, metrics));\n    }\n","date":"2019-05-10 08:05:37","endLine":95,"groupId":"3705","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"notify","params":"(Metricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/33/41cf8957b42b02d22ad0b5adcdf721093a17a3.src","preCode":"    @Override public void notify(Metrics metrics) {\n        WithMetadata withMetadata = (WithMetadata)metrics;\n        MetricsMetaInfo meta = withMetadata.getMeta();\n        int scope = meta.getScope();\n\n        if (!DefaultScopeDefine.inServiceCatalog(scope)\n            && !DefaultScopeDefine.inServiceInstanceCatalog(scope)\n            && !DefaultScopeDefine.inEndpointCatalog(scope)) {\n            return;\n        }\n\n        MetaInAlarm metaInAlarm;\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int serviceId = Integer.parseInt(meta.getId());\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n            ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n            serviceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            serviceMetaInAlarm.setId(serviceId);\n            serviceMetaInAlarm.setName(serviceInventory.getName());\n            metaInAlarm = serviceMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int serviceInstanceId = Integer.parseInt(meta.getId());\n            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceInstanceId);\n            ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n            instanceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            instanceMetaInAlarm.setId(serviceInstanceId);\n            instanceMetaInAlarm.setName(serviceInstanceInventory.getName());\n            metaInAlarm = instanceMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            int endpointId = Integer.parseInt(meta.getId());\n            EndpointInventory endpointInventory = endpointInventoryCache.get(endpointId);\n            EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n            endpointMetaInAlarm.setMetricsName(meta.getMetricsName());\n            endpointMetaInAlarm.setId(endpointId);\n\n            int serviceId = endpointInventory.getServiceId();\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n\n            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n\n            endpointMetaInAlarm.setName(textName);\n            metaInAlarm = endpointMetaInAlarm;\n        } else {\n            return;\n        }\n\n        List<RunningRule> runningRules = core.findRunningRule(meta.getMetricsName());\n        if (runningRules == null) {\n            return;\n        }\n\n        runningRules.forEach(rule -> rule.in(metaInAlarm, metrics));\n    }\n","realPath":"oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"},{"authorDate":"2019-05-23 16:07:28","commitOrder":7,"curCode":"    protected String getEntityName(MetricsMetaInfo meta) {\n        int scope = meta.getScope();\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return serviceInventoryCache.get(entityId).getName();\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return serviceInstanceInventoryCache.get(entityId).getName();\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return endpointInventoryCache.get(entityId).getName();\n        } else if (scope == DefaultScopeDefine.ALL) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n","date":"2019-05-23 16:07:28","endLine":51,"groupId":"3726","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getEntityName","params":"(MetricsMetaInfometa)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ec/19b083e63cbdaab859d1397f2dbf1142f4e8a1.src","preCode":"    protected String getEntityName(MetricsMetaInfo meta) {\n        int scope = meta.getScope();\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            return serviceInventoryCache.get(scope).getName();\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            return serviceInstanceInventoryCache.get(scope).getName();\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            return endpointInventoryCache.get(scope).getName();\n        } else if (scope == DefaultScopeDefine.ALL) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n","realPath":"oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/MetricFormatter.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"3e2fb7880d87216d7f574e73f693c08f71ca131c","commitMessage":"@@@Scope needs to be replaced with entityId (#2742)\n\n\"scope\" can not find in serviceInventoryCache.  serviceInstanceInventoryCache or endpointInventoryCache.\nIt needs to be replaced with entityId","date":"2019-05-23 16:07:28","modifiedFileCount":"1","status":"M","submitter":"QIliang"},{"authorTime":"2019-05-23 16:07:28","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":8,"curCode":"    public void notify(Metrics metrics) {\n        WithMetadata withMetadata = (WithMetadata) metrics;\n        MetricsMetaInfo meta = withMetadata.getMeta();\n        int scope = meta.getScope();\n\n        if (!DefaultScopeDefine.inServiceCatalog(scope) && !DefaultScopeDefine.inServiceInstanceCatalog(scope) && !DefaultScopeDefine\n            .inEndpointCatalog(scope)) {\n            return;\n        }\n\n        MetaInAlarm metaInAlarm;\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int serviceId = Integer.parseInt(meta.getId());\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n            ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n            serviceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            serviceMetaInAlarm.setId(serviceId);\n            serviceMetaInAlarm.setName(serviceInventory.getName());\n            metaInAlarm = serviceMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int serviceInstanceId = Integer.parseInt(meta.getId());\n            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceInstanceId);\n            ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n            instanceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            instanceMetaInAlarm.setId(serviceInstanceId);\n            instanceMetaInAlarm.setName(serviceInstanceInventory.getName());\n            metaInAlarm = instanceMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            int endpointId = Integer.parseInt(meta.getId());\n            EndpointInventory endpointInventory = endpointInventoryCache.get(endpointId);\n            EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n            endpointMetaInAlarm.setMetricsName(meta.getMetricsName());\n            endpointMetaInAlarm.setId(endpointId);\n\n            int serviceId = endpointInventory.getServiceId();\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n\n            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n\n            endpointMetaInAlarm.setName(textName);\n            metaInAlarm = endpointMetaInAlarm;\n        } else {\n            return;\n        }\n\n        List<RunningRule> runningRules = core.findRunningRule(meta.getMetricsName());\n        if (runningRules == null) {\n            return;\n        }\n\n        runningRules.forEach(rule -> rule.in(metaInAlarm, metrics));\n    }\n","date":"2020-02-11 17:10:49","endLine":108,"groupId":"3705","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"notify","params":"(Metricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ed/354e5cab9b238c58deb408f1b34a1be0b3eab5.src","preCode":"    @Override public void notify(Metrics metrics) {\n        WithMetadata withMetadata = (WithMetadata)metrics;\n        MetricsMetaInfo meta = withMetadata.getMeta();\n        int scope = meta.getScope();\n\n        if (!DefaultScopeDefine.inServiceCatalog(scope)\n            && !DefaultScopeDefine.inServiceInstanceCatalog(scope)\n            && !DefaultScopeDefine.inEndpointCatalog(scope)) {\n            return;\n        }\n\n        MetaInAlarm metaInAlarm;\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int serviceId = Integer.parseInt(meta.getId());\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n            ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n            serviceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            serviceMetaInAlarm.setId(serviceId);\n            serviceMetaInAlarm.setName(serviceInventory.getName());\n            metaInAlarm = serviceMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int serviceInstanceId = Integer.parseInt(meta.getId());\n            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceInstanceId);\n            ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n            instanceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            instanceMetaInAlarm.setId(serviceInstanceId);\n            instanceMetaInAlarm.setName(serviceInstanceInventory.getName());\n            metaInAlarm = instanceMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            int endpointId = Integer.parseInt(meta.getId());\n            EndpointInventory endpointInventory = endpointInventoryCache.get(endpointId);\n            EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n            endpointMetaInAlarm.setMetricsName(meta.getMetricsName());\n            endpointMetaInAlarm.setId(endpointId);\n\n            int serviceId = endpointInventory.getServiceId();\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n\n            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n\n            endpointMetaInAlarm.setName(textName);\n            metaInAlarm = endpointMetaInAlarm;\n        } else {\n            return;\n        }\n\n        List<RunningRule> runningRules = core.findRunningRule(meta.getMetricsName());\n        if (runningRules == null) {\n            return;\n        }\n\n        runningRules.forEach(rule -> rule.in(metaInAlarm, metrics));\n    }\n","realPath":"oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2019-05-23 16:07:28","commitOrder":8,"curCode":"    protected String getEntityName(MetricsMetaInfo meta) {\n        int scope = meta.getScope();\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return serviceInventoryCache.get(entityId).getName();\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return serviceInstanceInventoryCache.get(entityId).getName();\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return endpointInventoryCache.get(entityId).getName();\n        } else if (scope == DefaultScopeDefine.ALL) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n","date":"2019-05-23 16:07:28","endLine":51,"groupId":"3726","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getEntityName","params":"(MetricsMetaInfometa)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ec/19b083e63cbdaab859d1397f2dbf1142f4e8a1.src","preCode":"    protected String getEntityName(MetricsMetaInfo meta) {\n        int scope = meta.getScope();\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return serviceInventoryCache.get(entityId).getName();\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return serviceInstanceInventoryCache.get(entityId).getName();\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return endpointInventoryCache.get(entityId).getName();\n        } else if (scope == DefaultScopeDefine.ALL) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n","realPath":"oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/MetricFormatter.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"N"}],"commitId":"5b255ba3e3b50e0e0196b28cdca21dcd5c9c3da2","commitMessage":"@@@Set up more strict code styles and fix existing issues (#4337)\n\nMotivation:\n\nReview code styles with some bots automatically.\n\nModifications:\n\nSet up ReviewDog in GitHub Action to review code style.\n\nAdd more check rules to checkstyle plugin.\n\nResult:\n\nObvious code styles can be reviewed and commented automatically.","date":"2020-02-11 17:10:49","modifiedFileCount":"2429","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-03-28 22:51:41","codes":[{"authorDate":"2020-03-28 22:51:41","commitOrder":9,"curCode":"    public void notify(Metrics metrics) {\n        WithMetadata withMetadata = (WithMetadata) metrics;\n        MetricsMetaInfo meta = withMetadata.getMeta();\n        int scope = meta.getScope();\n\n        if (!DefaultScopeDefine.inServiceCatalog(scope) && !DefaultScopeDefine.inServiceInstanceCatalog(\n            scope) && !DefaultScopeDefine\n            .inEndpointCatalog(scope)) {\n            return;\n        }\n\n        MetaInAlarm metaInAlarm;\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int serviceId = Integer.parseInt(meta.getId());\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n            ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n            serviceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            serviceMetaInAlarm.setId(String.valueOf(serviceId));\n            serviceMetaInAlarm.setName(serviceInventory.getName());\n            metaInAlarm = serviceMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int serviceInstanceId = Integer.parseInt(meta.getId());\n            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceInstanceId);\n            ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n            instanceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            instanceMetaInAlarm.setId(String.valueOf(serviceInstanceId));\n            instanceMetaInAlarm.setName(serviceInstanceInventory.getName());\n            metaInAlarm = instanceMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n            endpointMetaInAlarm.setMetricsName(meta.getMetricsName());\n\n            final EndpointTraffic.EndpointID endpointID = EndpointTraffic.splitID(meta.getId());\n            ServiceInventory serviceInventory = serviceInventoryCache.get(endpointID.getServiceId());\n            String textName = endpointID.getEndpointName() + \" in \" + serviceInventory.getName();\n\n            endpointMetaInAlarm.setId(meta.getId());\n            endpointMetaInAlarm.setName(textName);\n            metaInAlarm = endpointMetaInAlarm;\n        } else {\n            return;\n        }\n\n        List<RunningRule> runningRules = core.findRunningRule(meta.getMetricsName());\n        if (runningRules == null) {\n            return;\n        }\n\n        runningRules.forEach(rule -> rule.in(metaInAlarm, metrics));\n    }\n","date":"2020-03-28 22:51:41","endLine":107,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"notify","params":"(Metricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/54/f3e410060780cd9d7b220b24cdeb4a956ee96b.src","preCode":"    public void notify(Metrics metrics) {\n        WithMetadata withMetadata = (WithMetadata) metrics;\n        MetricsMetaInfo meta = withMetadata.getMeta();\n        int scope = meta.getScope();\n\n        if (!DefaultScopeDefine.inServiceCatalog(scope) && !DefaultScopeDefine.inServiceInstanceCatalog(scope) && !DefaultScopeDefine\n            .inEndpointCatalog(scope)) {\n            return;\n        }\n\n        MetaInAlarm metaInAlarm;\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int serviceId = Integer.parseInt(meta.getId());\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n            ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n            serviceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            serviceMetaInAlarm.setId(serviceId);\n            serviceMetaInAlarm.setName(serviceInventory.getName());\n            metaInAlarm = serviceMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int serviceInstanceId = Integer.parseInt(meta.getId());\n            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceInstanceId);\n            ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n            instanceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            instanceMetaInAlarm.setId(serviceInstanceId);\n            instanceMetaInAlarm.setName(serviceInstanceInventory.getName());\n            metaInAlarm = instanceMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            int endpointId = Integer.parseInt(meta.getId());\n            EndpointInventory endpointInventory = endpointInventoryCache.get(endpointId);\n            EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n            endpointMetaInAlarm.setMetricsName(meta.getMetricsName());\n            endpointMetaInAlarm.setId(endpointId);\n\n            int serviceId = endpointInventory.getServiceId();\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n\n            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n\n            endpointMetaInAlarm.setName(textName);\n            metaInAlarm = endpointMetaInAlarm;\n        } else {\n            return;\n        }\n\n        List<RunningRule> runningRules = core.findRunningRule(meta.getMetricsName());\n        if (runningRules == null) {\n            return;\n        }\n\n        runningRules.forEach(rule -> rule.in(metaInAlarm, metrics));\n    }\n","realPath":"oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2020-03-28 22:51:41","commitOrder":9,"curCode":"    protected String getEntityName(MetricsMetaInfo meta) {\n        int scope = meta.getScope();\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return serviceInventoryCache.get(entityId).getName();\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return serviceInstanceInventoryCache.get(entityId).getName();\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            return EndpointTraffic.splitID(meta.getId()).getEndpointName();\n        } else if (scope == DefaultScopeDefine.ALL) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n","date":"2020-03-28 22:51:41","endLine":48,"groupId":"3726","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getEntityName","params":"(MetricsMetaInfometa)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/13/8240166f172764ade4ca39f7f28ea2349e90b7.src","preCode":"    protected String getEntityName(MetricsMetaInfo meta) {\n        int scope = meta.getScope();\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return serviceInventoryCache.get(entityId).getName();\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return serviceInstanceInventoryCache.get(entityId).getName();\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return endpointInventoryCache.get(entityId).getName();\n        } else if (scope == DefaultScopeDefine.ALL) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n","realPath":"oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/MetricFormatter.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"}],"commitId":"4474907fef809e2342b644a324da011834a55420","commitMessage":"@@@[Inventory Design Change] Remove endpoint register and endpoint inventory (#4570)\n\n* Finish step one.  source and entity changed.\n\n* Step 2.  finish the basic and core DAO changes.\n\n* Step 3. Change all source codes of backend.  and make project compiling successfully.\n\n* Make startup successful and persistence works.\n\n* Fix dead codes in the MySQLTableInstaller.\n\n* Fix mischange.\n\n* Fix MySQL storage bootstrap error.\n\n* Rollback dependency change.\n\n* Simply enable tailing logs from container no mater it's in CI or not\n\n* Fix segment table issue.\n\n* Fix MySQL Instanller.\n\n* Support Influxdb implementation of new endpoint traffic.\n\n* Set and modify timeout to 90mins\n\n* Remove unnecessary entity in the EndpointTraffic.\n\n* Fix wrong entity builder and make name more clear.\n\n* Fix 2 equal methods bug.\n\n* Fix InfluxDB identifier(name) conflict issue.\n\n* Fix endpoint topology query.  endpoint id should be changed as a string.\n\n* Fix a missing change.\n\n* Fix a wrong commit.\n\n* Column name can't be changed.  due to it affect the hybrid metadb(h2/mysql) query.  change it explicitly with double quotation marks.\n\n* Fix formats.\n\n* Remove endpoint/operation register from the agent. and change the plugin tests(without local tests). operationId relation codes have been removed from agent too.\n\n* Try to fix the hytrix case.\n\n* Fix 3 cases.\n\n* Try to fix cases.\n\n* Fix 2.\n\n* Fix one.\n\n* Fix the serviceId type mis-change.\n\n* Fix int query\n\n* Fix hystrix case.\n\n* Fix a case.\n\n* Fix EndpointCallRelationDispatcher set the source/dest endpoint without id encoding.\n\n* Update documentation and add 2 test cases.\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>","date":"2020-03-28 22:51:41","modifiedFileCount":"121","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":10,"curCode":"    public void notify(Metrics metrics) {\n        WithMetadata withMetadata = (WithMetadata) metrics;\n        MetricsMetaInfo meta = withMetadata.getMeta();\n        int scope = meta.getScope();\n\n        if (!DefaultScopeDefine.inServiceCatalog(scope) && !DefaultScopeDefine.inServiceInstanceCatalog(\n            scope) && !DefaultScopeDefine\n            .inEndpointCatalog(scope)) {\n            return;\n        }\n\n        MetaInAlarm metaInAlarm;\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            final String serviceId = meta.getId();\n            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n                serviceId);\n            ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n            serviceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            serviceMetaInAlarm.setId(serviceId);\n            serviceMetaInAlarm.setName(serviceIDDefinition.getName());\n            metaInAlarm = serviceMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            final String instanceId = meta.getId();\n            final IDManager.ServiceInstanceID.InstanceIDDefinition instanceIDDefinition = IDManager.ServiceInstanceID.analysisId(\n                instanceId);\n            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n                instanceIDDefinition.getServiceId());\n            ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n            instanceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            instanceMetaInAlarm.setId(instanceId);\n            instanceMetaInAlarm.setName(instanceIDDefinition.getName() + \" of \" + serviceIDDefinition.getName());\n            metaInAlarm = instanceMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            final String endpointId = meta.getId();\n            final IDManager.EndpointID.EndpointIDDefinition endpointIDDefinition = IDManager.EndpointID.analysisId(\n                endpointId);\n            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n                endpointIDDefinition.getServiceId());\n\n            EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n            endpointMetaInAlarm.setMetricsName(meta.getMetricsName());\n            endpointMetaInAlarm.setId(meta.getId());\n            endpointMetaInAlarm.setName(\n                endpointIDDefinition.getEndpointName() + \" in \" + serviceIDDefinition.getName());\n            metaInAlarm = endpointMetaInAlarm;\n        } else {\n            return;\n        }\n\n        List<RunningRule> runningRules = core.findRunningRule(meta.getMetricsName());\n        if (runningRules == null) {\n            return;\n        }\n\n        runningRules.forEach(rule -> rule.in(metaInAlarm, metrics));\n    }\n","date":"2020-04-10 11:03:24","endLine":104,"groupId":"5258","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"notify","params":"(Metricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d4/6fe397932f21d286442e01fbb1b86814fac311.src","preCode":"    public void notify(Metrics metrics) {\n        WithMetadata withMetadata = (WithMetadata) metrics;\n        MetricsMetaInfo meta = withMetadata.getMeta();\n        int scope = meta.getScope();\n\n        if (!DefaultScopeDefine.inServiceCatalog(scope) && !DefaultScopeDefine.inServiceInstanceCatalog(\n            scope) && !DefaultScopeDefine\n            .inEndpointCatalog(scope)) {\n            return;\n        }\n\n        MetaInAlarm metaInAlarm;\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int serviceId = Integer.parseInt(meta.getId());\n            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n            ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n            serviceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            serviceMetaInAlarm.setId(String.valueOf(serviceId));\n            serviceMetaInAlarm.setName(serviceInventory.getName());\n            metaInAlarm = serviceMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int serviceInstanceId = Integer.parseInt(meta.getId());\n            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceInstanceId);\n            ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n            instanceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            instanceMetaInAlarm.setId(String.valueOf(serviceInstanceId));\n            instanceMetaInAlarm.setName(serviceInstanceInventory.getName());\n            metaInAlarm = instanceMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n            endpointMetaInAlarm.setMetricsName(meta.getMetricsName());\n\n            final EndpointTraffic.EndpointID endpointID = EndpointTraffic.splitID(meta.getId());\n            ServiceInventory serviceInventory = serviceInventoryCache.get(endpointID.getServiceId());\n            String textName = endpointID.getEndpointName() + \" in \" + serviceInventory.getName();\n\n            endpointMetaInAlarm.setId(meta.getId());\n            endpointMetaInAlarm.setName(textName);\n            metaInAlarm = endpointMetaInAlarm;\n        } else {\n            return;\n        }\n\n        List<RunningRule> runningRules = core.findRunningRule(meta.getMetricsName());\n        if (runningRules == null) {\n            return;\n        }\n\n        runningRules.forEach(rule -> rule.in(metaInAlarm, metrics));\n    }\n","realPath":"oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":10,"curCode":"    protected String getEntityName(MetricsMetaInfo meta) {\n        int scope = meta.getScope();\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            final String serviceId = meta.getId();\n            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n                serviceId);\n            return serviceIDDefinition.getName();\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            final String instanceId = meta.getId();\n            final IDManager.ServiceInstanceID.InstanceIDDefinition instanceIDDefinition = IDManager.ServiceInstanceID.analysisId(\n                instanceId);\n            return instanceIDDefinition.getName();\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            final String endpointId = meta.getId();\n            final IDManager.EndpointID.EndpointIDDefinition endpointIDDefinition = IDManager.EndpointID.analysisId(\n                endpointId);\n            return endpointIDDefinition.getEndpointName();\n        } else if (scope == DefaultScopeDefine.ALL) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":50,"groupId":"5258","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getEntityName","params":"(MetricsMetaInfometa)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ba/320c6237d5ead4ebed7528856d46aab07adfc0.src","preCode":"    protected String getEntityName(MetricsMetaInfo meta) {\n        int scope = meta.getScope();\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return serviceInventoryCache.get(entityId).getName();\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            int entityId = Integer.valueOf(meta.getId());\n            return serviceInstanceInventoryCache.get(entityId).getName();\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            return EndpointTraffic.splitID(meta.getId()).getEndpointName();\n        } else if (scope == DefaultScopeDefine.ALL) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n","realPath":"oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/MetricFormatter.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":28,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-05-11 00:28:10","codes":[{"authorDate":"2020-05-11 00:28:10","commitOrder":11,"curCode":"    public void notify(Metrics metrics) {\n        WithMetadata withMetadata = (WithMetadata) metrics;\n        MetricsMetaInfo meta = withMetadata.getMeta();\n        int scope = meta.getScope();\n\n        if (!DefaultScopeDefine.inServiceCatalog(scope) && !DefaultScopeDefine.inServiceInstanceCatalog(scope)\n            && !DefaultScopeDefine.inEndpointCatalog(scope) && !DefaultScopeDefine.inServiceRelationCatalog(scope)\n            && !DefaultScopeDefine.inServiceInstanceRelationCatalog(scope) && !DefaultScopeDefine.inEndpointRelationCatalog(scope)) {\n            return;\n        }\n\n        MetaInAlarm metaInAlarm;\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            final String serviceId = meta.getId();\n            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n                serviceId);\n            ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n            serviceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            serviceMetaInAlarm.setId(serviceId);\n            serviceMetaInAlarm.setName(serviceIDDefinition.getName());\n            metaInAlarm = serviceMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            final String instanceId = meta.getId();\n            final IDManager.ServiceInstanceID.InstanceIDDefinition instanceIDDefinition = IDManager.ServiceInstanceID.analysisId(\n                instanceId);\n            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n                instanceIDDefinition.getServiceId());\n            ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n            instanceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            instanceMetaInAlarm.setId(instanceId);\n            instanceMetaInAlarm.setName(instanceIDDefinition.getName() + \" of \" + serviceIDDefinition.getName());\n            metaInAlarm = instanceMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            final String endpointId = meta.getId();\n            final IDManager.EndpointID.EndpointIDDefinition endpointIDDefinition = IDManager.EndpointID.analysisId(\n                endpointId);\n            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n                endpointIDDefinition.getServiceId());\n\n            EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n            endpointMetaInAlarm.setMetricsName(meta.getMetricsName());\n            endpointMetaInAlarm.setId(meta.getId());\n            endpointMetaInAlarm.setName(\n                endpointIDDefinition.getEndpointName() + \" in \" + serviceIDDefinition.getName());\n            metaInAlarm = endpointMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceRelationCatalog(scope)) {\n            final String serviceRelationId = meta.getId();\n            final IDManager.ServiceID.ServiceRelationDefine serviceRelationDefine = IDManager.ServiceID.analysisRelationId(\n                serviceRelationId);\n            final IDManager.ServiceID.ServiceIDDefinition sourceIdDefinition = IDManager.ServiceID.analysisId(\n                serviceRelationDefine.getSourceId());\n            final IDManager.ServiceID.ServiceIDDefinition destIdDefinition = IDManager.ServiceID.analysisId(\n                serviceRelationDefine.getDestId());\n            ServiceRelationMetaInAlarm serviceRelationMetaInAlarm = new ServiceRelationMetaInAlarm();\n            serviceRelationMetaInAlarm.setMetricsName(meta.getMetricsName());\n            serviceRelationMetaInAlarm.setId(serviceRelationId);\n            serviceRelationMetaInAlarm.setName(sourceIdDefinition.getName() + \" to \" + destIdDefinition.getName());\n            metaInAlarm = serviceRelationMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceRelationCatalog(scope)) {\n            final String instanceRelationId = meta.getId();\n            final IDManager.ServiceInstanceID.ServiceInstanceRelationDefine serviceRelationDefine = IDManager.ServiceInstanceID.analysisRelationId(\n                instanceRelationId);\n\n            final IDManager.ServiceInstanceID.InstanceIDDefinition sourceIdDefinition = IDManager.ServiceInstanceID.analysisId(\n                serviceRelationDefine.getSourceId());\n            final IDManager.ServiceID.ServiceIDDefinition sourceServiceId = IDManager.ServiceID.analysisId(\n                sourceIdDefinition.getServiceId());\n            final IDManager.ServiceInstanceID.InstanceIDDefinition destIdDefinition = IDManager.ServiceInstanceID.analysisId(\n                serviceRelationDefine.getDestId());\n            final IDManager.ServiceID.ServiceIDDefinition destServiceId = IDManager.ServiceID.analysisId(\n                destIdDefinition.getServiceId());\n\n            ServiceInstanceRelationMetaInAlarm instanceRelationMetaInAlarm = new ServiceInstanceRelationMetaInAlarm();\n            instanceRelationMetaInAlarm.setMetricsName(meta.getMetricsName());\n            instanceRelationMetaInAlarm.setId(instanceRelationId);\n            instanceRelationMetaInAlarm.setName(sourceIdDefinition.getName() + \" of \" + sourceServiceId.getName()\n                + \" to \" + destIdDefinition.getName() + \" of \" + destServiceId.getName());\n            metaInAlarm = instanceRelationMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointRelationCatalog(scope)) {\n            final String endpointRelationId = meta.getId();\n            final IDManager.EndpointID.EndpointRelationDefine endpointRelationDefine = IDManager.EndpointID.analysisRelationId(\n                endpointRelationId);\n            final IDManager.ServiceID.ServiceIDDefinition sourceService = IDManager.ServiceID.analysisId(\n                endpointRelationDefine.getSourceServiceId());\n            final IDManager.ServiceID.ServiceIDDefinition destService = IDManager.ServiceID.analysisId(\n                endpointRelationDefine.getDestServiceId());\n\n            EndpointRelationMetaInAlarm endpointRelationMetaInAlarm = new EndpointRelationMetaInAlarm();\n            endpointRelationMetaInAlarm.setMetricsName(meta.getMetricsName());\n            endpointRelationMetaInAlarm.setId(endpointRelationId);\n            endpointRelationMetaInAlarm.setName(endpointRelationDefine.getSource() + \" in \" + sourceService.getName()\n                + \" to \" + endpointRelationDefine.getDest() + \" in \" + destService.getName());\n            metaInAlarm = endpointRelationMetaInAlarm;\n        } else {\n            return;\n        }\n\n        List<RunningRule> runningRules = core.findRunningRule(meta.getMetricsName());\n        if (runningRules == null) {\n            return;\n        }\n\n        runningRules.forEach(rule -> rule.in(metaInAlarm, metrics));\n    }\n","date":"2020-05-11 00:28:10","endLine":155,"groupId":"10575","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"notify","params":"(Metricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/77c38a76406f7639eacf4b591b617369c4ff19.src","preCode":"    public void notify(Metrics metrics) {\n        WithMetadata withMetadata = (WithMetadata) metrics;\n        MetricsMetaInfo meta = withMetadata.getMeta();\n        int scope = meta.getScope();\n\n        if (!DefaultScopeDefine.inServiceCatalog(scope) && !DefaultScopeDefine.inServiceInstanceCatalog(\n            scope) && !DefaultScopeDefine\n            .inEndpointCatalog(scope)) {\n            return;\n        }\n\n        MetaInAlarm metaInAlarm;\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            final String serviceId = meta.getId();\n            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n                serviceId);\n            ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n            serviceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            serviceMetaInAlarm.setId(serviceId);\n            serviceMetaInAlarm.setName(serviceIDDefinition.getName());\n            metaInAlarm = serviceMetaInAlarm;\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            final String instanceId = meta.getId();\n            final IDManager.ServiceInstanceID.InstanceIDDefinition instanceIDDefinition = IDManager.ServiceInstanceID.analysisId(\n                instanceId);\n            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n                instanceIDDefinition.getServiceId());\n            ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n            instanceMetaInAlarm.setMetricsName(meta.getMetricsName());\n            instanceMetaInAlarm.setId(instanceId);\n            instanceMetaInAlarm.setName(instanceIDDefinition.getName() + \" of \" + serviceIDDefinition.getName());\n            metaInAlarm = instanceMetaInAlarm;\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            final String endpointId = meta.getId();\n            final IDManager.EndpointID.EndpointIDDefinition endpointIDDefinition = IDManager.EndpointID.analysisId(\n                endpointId);\n            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n                endpointIDDefinition.getServiceId());\n\n            EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n            endpointMetaInAlarm.setMetricsName(meta.getMetricsName());\n            endpointMetaInAlarm.setId(meta.getId());\n            endpointMetaInAlarm.setName(\n                endpointIDDefinition.getEndpointName() + \" in \" + serviceIDDefinition.getName());\n            metaInAlarm = endpointMetaInAlarm;\n        } else {\n            return;\n        }\n\n        List<RunningRule> runningRules = core.findRunningRule(meta.getMetricsName());\n        if (runningRules == null) {\n            return;\n        }\n\n        runningRules.forEach(rule -> rule.in(metaInAlarm, metrics));\n    }\n","realPath":"oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2020-05-11 00:28:10","commitOrder":11,"curCode":"    protected String getEntityName(MetricsMetaInfo meta) {\n        int scope = meta.getScope();\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            final String serviceId = meta.getId();\n            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n                serviceId);\n            return serviceIDDefinition.getName();\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            final String instanceId = meta.getId();\n            final IDManager.ServiceInstanceID.InstanceIDDefinition instanceIDDefinition = IDManager.ServiceInstanceID.analysisId(\n                instanceId);\n            return instanceIDDefinition.getName();\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            final String endpointId = meta.getId();\n            final IDManager.EndpointID.EndpointIDDefinition endpointIDDefinition = IDManager.EndpointID.analysisId(\n                endpointId);\n            return endpointIDDefinition.getEndpointName();\n        } else if (DefaultScopeDefine.inServiceRelationCatalog(scope)) {\n            final String serviceRelationId = meta.getId();\n            final IDManager.ServiceID.ServiceRelationDefine serviceRelationDefine = IDManager.ServiceID.analysisRelationId(\n                serviceRelationId);\n            final IDManager.ServiceID.ServiceIDDefinition sourceIdDefinition = IDManager.ServiceID.analysisId(\n                serviceRelationDefine.getSourceId());\n            final IDManager.ServiceID.ServiceIDDefinition destIdDefinition = IDManager.ServiceID.analysisId(\n                serviceRelationDefine.getDestId());\n            return sourceIdDefinition.getName() + \" to \" + destIdDefinition.getName();\n        } else if (DefaultScopeDefine.inServiceInstanceRelationCatalog(scope)) {\n            final String instanceRelationId = meta.getId();\n            final IDManager.ServiceInstanceID.ServiceInstanceRelationDefine serviceRelationDefine = IDManager.ServiceInstanceID.analysisRelationId(\n                instanceRelationId);\n            final IDManager.ServiceInstanceID.InstanceIDDefinition sourceIdDefinition = IDManager.ServiceInstanceID.analysisId(\n                serviceRelationDefine.getSourceId());\n            final IDManager.ServiceID.ServiceIDDefinition sourceServiceId = IDManager.ServiceID.analysisId(\n                sourceIdDefinition.getServiceId());\n            final IDManager.ServiceInstanceID.InstanceIDDefinition destIdDefinition = IDManager.ServiceInstanceID.analysisId(\n                serviceRelationDefine.getDestId());\n            final IDManager.ServiceID.ServiceIDDefinition destServiceId = IDManager.ServiceID.analysisId(\n                destIdDefinition.getServiceId());\n            return sourceIdDefinition.getName() + \" of \" + sourceServiceId.getName()\n                + \" to \" + destIdDefinition.getName() + \" of \" + destServiceId.getName();\n        } else if (DefaultScopeDefine.inEndpointRelationCatalog(scope)) {\n            final String endpointRelationId = meta.getId();\n            final IDManager.EndpointID.EndpointRelationDefine endpointRelationDefine = IDManager.EndpointID.analysisRelationId(\n                endpointRelationId);\n            final IDManager.ServiceID.ServiceIDDefinition sourceService = IDManager.ServiceID.analysisId(\n                endpointRelationDefine.getSourceServiceId());\n            final IDManager.ServiceID.ServiceIDDefinition destService = IDManager.ServiceID.analysisId(\n                endpointRelationDefine.getDestServiceId());\n            return endpointRelationDefine.getSource() + \" in \" + sourceService.getName()\n                + \" to \" + endpointRelationDefine.getDest() + \" in \" + destService.getName();\n        } else if (scope == DefaultScopeDefine.ALL) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n","date":"2020-05-11 00:28:10","endLine":83,"groupId":"10575","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"getEntityName","params":"(MetricsMetaInfometa)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bd/281d9a5aaaa15b76860ff887131da421b59be7.src","preCode":"    protected String getEntityName(MetricsMetaInfo meta) {\n        int scope = meta.getScope();\n        if (DefaultScopeDefine.inServiceCatalog(scope)) {\n            final String serviceId = meta.getId();\n            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n                serviceId);\n            return serviceIDDefinition.getName();\n        } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n            final String instanceId = meta.getId();\n            final IDManager.ServiceInstanceID.InstanceIDDefinition instanceIDDefinition = IDManager.ServiceInstanceID.analysisId(\n                instanceId);\n            return instanceIDDefinition.getName();\n        } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n            final String endpointId = meta.getId();\n            final IDManager.EndpointID.EndpointIDDefinition endpointIDDefinition = IDManager.EndpointID.analysisId(\n                endpointId);\n            return endpointIDDefinition.getEndpointName();\n        } else if (scope == DefaultScopeDefine.ALL) {\n            return \"\";\n        } else {\n            return null;\n        }\n    }\n","realPath":"oap-server/exporter/src/main/java/org/apache/skywalking/oap/server/exporter/provider/MetricFormatter.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":28,"status":"M"}],"commitId":"749af3e04efcf577ef8745fd09c15bbde3704d5c","commitMessage":"@@@Alarm support multiple scope (#4769)\n\n* Support service relation and database access alarm\n\n* support service instance relation alarm\n\n* support endpoint relation alarm\n\n* document and format the name\n\n* resolve issues\n\n* add database access and endpoint relation rule example\n\n* resolve code format\n\n* remove unnecessary getter and setter package declare\n\n* remove unnecessary fields\n\nCo-authored-by: Mrproliu <mrproliu@lagou.com>","date":"2020-05-11 00:28:10","modifiedFileCount":"22","status":"M","submitter":"mrproliu"}]
