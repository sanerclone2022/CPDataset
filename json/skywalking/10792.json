[{"authorTime":"2020-01-09 09:35:40","codes":[{"authorDate":"2019-12-31 20:49:45","commitOrder":2,"curCode":"    public List<ProfileTask> getTaskList(Integer serviceId, String endpointName, Long startTimeBucket, Long endTimeBucket, Integer limit) throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(4);\n        sql.append(\"select * from \").append(ProfileTaskNoneStream.INDEX_NAME).append(\" where 1=1 \");\n\n        if (startTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskNoneStream.TIME_BUCKET).append(\" >= ? \");\n            condition.add(startTimeBucket);\n        }\n\n        if (endTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskNoneStream.TIME_BUCKET).append(\" <= ? \");\n            condition.add(endTimeBucket);\n        }\n\n        if (serviceId != null) {\n            sql.append(\" and \").append(ProfileTaskNoneStream.SERVICE_ID).append(\"=? \");\n            condition.add(serviceId);\n        }\n\n        if (StringUtil.isNotEmpty(endpointName)) {\n            sql.append(\" and \").append(ProfileTaskNoneStream.ENDPOINT_NAME).append(\"=?\");\n            condition.add(endpointName);\n        }\n\n        sql.append(\" ORDER BY \").append(ProfileTaskNoneStream.START_TIME).append(\" DESC \");\n\n        if (limit != null) {\n            sql.append(\" LIMIT \").append(limit);\n        }\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTask> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseTask(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n    }\n","date":"2019-12-31 20:49:45","endLine":88,"groupId":"3951","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getTaskList","params":"(IntegerserviceId@StringendpointName@LongstartTimeBucket@LongendTimeBucket@Integerlimit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fa/b463d91f87d3bf114ad8420a7e18f9811f15e9.src","preCode":"    public List<ProfileTask> getTaskList(Integer serviceId, String endpointName, Long startTimeBucket, Long endTimeBucket, Integer limit) throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(4);\n        sql.append(\"select * from \").append(ProfileTaskNoneStream.INDEX_NAME).append(\" where 1=1 \");\n\n        if (startTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskNoneStream.TIME_BUCKET).append(\" >= ? \");\n            condition.add(startTimeBucket);\n        }\n\n        if (endTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskNoneStream.TIME_BUCKET).append(\" <= ? \");\n            condition.add(endTimeBucket);\n        }\n\n        if (serviceId != null) {\n            sql.append(\" and \").append(ProfileTaskNoneStream.SERVICE_ID).append(\"=? \");\n            condition.add(serviceId);\n        }\n\n        if (StringUtil.isNotEmpty(endpointName)) {\n            sql.append(\" and \").append(ProfileTaskNoneStream.ENDPOINT_NAME).append(\"=?\");\n            condition.add(endpointName);\n        }\n\n        sql.append(\" ORDER BY \").append(ProfileTaskNoneStream.START_TIME).append(\" DESC \");\n\n        if (limit != null) {\n            sql.append(\" LIMIT \").append(limit);\n        }\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTask> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseTask(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ProfileTaskQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"NB"},{"authorDate":"2020-01-09 09:35:40","commitOrder":2,"curCode":"    public List<ProfileTaskLog> getTaskLogList(String taskId) throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(1);\n        sql.append(\"select * from \").append(ProfileTaskLogRecord.INDEX_NAME).append(\" where 1=1 \");\n\n        if (taskId != null) {\n            sql.append(\" and \").append(ProfileTaskLogRecord.TASK_ID).append(\" = ?\");\n        }\n\n        sql.append(\"ORDER BY \").append(ProfileTaskLogRecord.OPERATION_TIME).append(\" DESC \");\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTaskLog> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseLog(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException | JDBCClientException e) {\n            throw new IOException(e);\n        }\n    }\n","date":"2020-01-09 09:35:39","endLine":69,"groupId":"6720","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getTaskLogList","params":"(StringtaskId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/27/d9d4e1f0657b2aa333b55a8d73952dc70cec30.src","preCode":"    public List<ProfileTaskLog> getTaskLogList(String taskId) throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(1);\n        sql.append(\"select * from \").append(ProfileTaskLogRecord.INDEX_NAME).append(\" where 1=1 \");\n\n        if (taskId != null) {\n            sql.append(\" and \").append(ProfileTaskLogRecord.TASK_ID).append(\" = ?\");\n        }\n\n        sql.append(\"ORDER BY \").append(ProfileTaskLogRecord.OPERATION_TIME).append(\" DESC \");\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTaskLog> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseLog(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException | JDBCClientException e) {\n            throw new IOException(e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ProfileTaskLogQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"}],"commitId":"4cf0600f351f9c99af804bc90bcb54d3b778c7b8","commitMessage":"@@@Provide profile task downstream to sniffer (#4172)\n\n* Provide profile task downstream to sniffer\n\n* fix agent unit testcase issue\n\n* add profile switch config on sniffer\n\n* fix es error\n\n* 1. add @DefaultImplementor on the sniffer profile task service\n2. change ProfileTaskExecutionService#PROFILE_TASK_READY_SCHEDULE to final and remove volatile\n2. fix style error\n\n* change timeFromStartMills use `<` to compare\n\n* 1. add `maxSamplingCount` to profile task\n2. make profile task limit to the common package\n\n* 1. change `agent.active_profile` to `profile.active` and make true on default\n2. add `maxSamplingCount` in profile task\n3. use `createTime` to check has new command list\n4. add task re-check before process profile task\n\n* 1. add `profile-receiver` document\n2. change `ProfileTaskExecutionService` use single schedule thread pool\n3. cache dont need fetch data when no data.  use auto-fresh mechanism only\n\n* remove navigate time judge.  fix comment wrong meaning\n","date":"2020-01-09 09:35:39","modifiedFileCount":"30","status":"M","submitter":"mrproliu"},{"authorTime":"2020-01-09 09:35:40","codes":[{"authorDate":"2020-02-12 23:28:27","commitOrder":3,"curCode":"    public List<ProfileTask> getTaskList(Integer serviceId, String endpointName, Long startTimeBucket,\n                                         Long endTimeBucket, Integer limit) throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(4);\n        sql.append(\"select * from \").append(ProfileTaskRecord.INDEX_NAME).append(\" where 1=1 \");\n\n        if (startTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskRecord.TIME_BUCKET).append(\" >= ? \");\n            condition.add(startTimeBucket);\n        }\n\n        if (endTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskRecord.TIME_BUCKET).append(\" <= ? \");\n            condition.add(endTimeBucket);\n        }\n\n        if (serviceId != null) {\n            sql.append(\" and \").append(ProfileTaskRecord.SERVICE_ID).append(\"=? \");\n            condition.add(serviceId);\n        }\n\n        if (StringUtil.isNotEmpty(endpointName)) {\n            sql.append(\" and \").append(ProfileTaskRecord.ENDPOINT_NAME).append(\"=?\");\n            condition.add(endpointName);\n        }\n\n        sql.append(\" ORDER BY \").append(ProfileTaskRecord.START_TIME).append(\" DESC \");\n\n        if (limit != null) {\n            sql.append(\" LIMIT \").append(limit);\n        }\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTask> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseTask(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n    }\n","date":"2020-02-12 23:28:27","endLine":87,"groupId":"6729","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getTaskList","params":"(IntegerserviceId@StringendpointName@LongstartTimeBucket@LongendTimeBucket@Integerlimit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/21/3cf2d45f06d201aff216577ab7a710b14cc7b4.src","preCode":"    public List<ProfileTask> getTaskList(Integer serviceId, String endpointName, Long startTimeBucket,\n        Long endTimeBucket, Integer limit) throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(4);\n        sql.append(\"select * from \").append(ProfileTaskNoneStream.INDEX_NAME).append(\" where 1=1 \");\n\n        if (startTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskNoneStream.TIME_BUCKET).append(\" >= ? \");\n            condition.add(startTimeBucket);\n        }\n\n        if (endTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskNoneStream.TIME_BUCKET).append(\" <= ? \");\n            condition.add(endTimeBucket);\n        }\n\n        if (serviceId != null) {\n            sql.append(\" and \").append(ProfileTaskNoneStream.SERVICE_ID).append(\"=? \");\n            condition.add(serviceId);\n        }\n\n        if (StringUtil.isNotEmpty(endpointName)) {\n            sql.append(\" and \").append(ProfileTaskNoneStream.ENDPOINT_NAME).append(\"=?\");\n            condition.add(endpointName);\n        }\n\n        sql.append(\" ORDER BY \").append(ProfileTaskNoneStream.START_TIME).append(\" DESC \");\n\n        if (limit != null) {\n            sql.append(\" LIMIT \").append(limit);\n        }\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTask> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseTask(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ProfileTaskQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2020-01-09 09:35:40","commitOrder":3,"curCode":"    public List<ProfileTaskLog> getTaskLogList(String taskId) throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(1);\n        sql.append(\"select * from \").append(ProfileTaskLogRecord.INDEX_NAME).append(\" where 1=1 \");\n\n        if (taskId != null) {\n            sql.append(\" and \").append(ProfileTaskLogRecord.TASK_ID).append(\" = ?\");\n        }\n\n        sql.append(\"ORDER BY \").append(ProfileTaskLogRecord.OPERATION_TIME).append(\" DESC \");\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTaskLog> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseLog(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException | JDBCClientException e) {\n            throw new IOException(e);\n        }\n    }\n","date":"2020-01-09 09:35:39","endLine":69,"groupId":"6720","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getTaskLogList","params":"(StringtaskId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/27/d9d4e1f0657b2aa333b55a8d73952dc70cec30.src","preCode":"    public List<ProfileTaskLog> getTaskLogList(String taskId) throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(1);\n        sql.append(\"select * from \").append(ProfileTaskLogRecord.INDEX_NAME).append(\" where 1=1 \");\n\n        if (taskId != null) {\n            sql.append(\" and \").append(ProfileTaskLogRecord.TASK_ID).append(\" = ?\");\n        }\n\n        sql.append(\"ORDER BY \").append(ProfileTaskLogRecord.OPERATION_TIME).append(\" DESC \");\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTaskLog> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseLog(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException | JDBCClientException e) {\n            throw new IOException(e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ProfileTaskLogQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"}],"commitId":"7c6016b18f044078f7ce48d1a524c71a4c564917","commitMessage":"@@@Make Profile entities could be disable by OAL (#4354)\n\n* Make Profile entities could be disable by OAL","date":"2020-02-12 23:28:27","modifiedFileCount":"3","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-03-22 12:49:43","codes":[{"authorDate":"2020-02-12 23:28:27","commitOrder":4,"curCode":"    public List<ProfileTask> getTaskList(Integer serviceId, String endpointName, Long startTimeBucket,\n                                         Long endTimeBucket, Integer limit) throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(4);\n        sql.append(\"select * from \").append(ProfileTaskRecord.INDEX_NAME).append(\" where 1=1 \");\n\n        if (startTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskRecord.TIME_BUCKET).append(\" >= ? \");\n            condition.add(startTimeBucket);\n        }\n\n        if (endTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskRecord.TIME_BUCKET).append(\" <= ? \");\n            condition.add(endTimeBucket);\n        }\n\n        if (serviceId != null) {\n            sql.append(\" and \").append(ProfileTaskRecord.SERVICE_ID).append(\"=? \");\n            condition.add(serviceId);\n        }\n\n        if (StringUtil.isNotEmpty(endpointName)) {\n            sql.append(\" and \").append(ProfileTaskRecord.ENDPOINT_NAME).append(\"=?\");\n            condition.add(endpointName);\n        }\n\n        sql.append(\" ORDER BY \").append(ProfileTaskRecord.START_TIME).append(\" DESC \");\n\n        if (limit != null) {\n            sql.append(\" LIMIT \").append(limit);\n        }\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTask> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseTask(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n    }\n","date":"2020-02-12 23:28:27","endLine":87,"groupId":"6729","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getTaskList","params":"(IntegerserviceId@StringendpointName@LongstartTimeBucket@LongendTimeBucket@Integerlimit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/21/3cf2d45f06d201aff216577ab7a710b14cc7b4.src","preCode":"    public List<ProfileTask> getTaskList(Integer serviceId, String endpointName, Long startTimeBucket,\n                                         Long endTimeBucket, Integer limit) throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(4);\n        sql.append(\"select * from \").append(ProfileTaskRecord.INDEX_NAME).append(\" where 1=1 \");\n\n        if (startTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskRecord.TIME_BUCKET).append(\" >= ? \");\n            condition.add(startTimeBucket);\n        }\n\n        if (endTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskRecord.TIME_BUCKET).append(\" <= ? \");\n            condition.add(endTimeBucket);\n        }\n\n        if (serviceId != null) {\n            sql.append(\" and \").append(ProfileTaskRecord.SERVICE_ID).append(\"=? \");\n            condition.add(serviceId);\n        }\n\n        if (StringUtil.isNotEmpty(endpointName)) {\n            sql.append(\" and \").append(ProfileTaskRecord.ENDPOINT_NAME).append(\"=?\");\n            condition.add(endpointName);\n        }\n\n        sql.append(\" ORDER BY \").append(ProfileTaskRecord.START_TIME).append(\" DESC \");\n\n        if (limit != null) {\n            sql.append(\" LIMIT \").append(limit);\n        }\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTask> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseTask(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ProfileTaskQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"},{"authorDate":"2020-03-22 12:49:43","commitOrder":4,"curCode":"    public List<ProfileTaskLog> getTaskLogList() throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(1);\n        sql.append(\"select * from \").append(ProfileTaskLogRecord.INDEX_NAME).append(\" where 1=1 \");\n\n        sql.append(\"ORDER BY \").append(ProfileTaskLogRecord.OPERATION_TIME).append(\" DESC \");\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTaskLog> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseLog(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException | JDBCClientException e) {\n            throw new IOException(e);\n        }\n    }\n","date":"2020-03-22 12:49:43","endLine":62,"groupId":"6720","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getTaskLogList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/7f/4aad0c50e2f03862ddabf363f65b81132a302f.src","preCode":"    public List<ProfileTaskLog> getTaskLogList(String taskId) throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(1);\n        sql.append(\"select * from \").append(ProfileTaskLogRecord.INDEX_NAME).append(\" where 1=1 \");\n\n        if (taskId != null) {\n            sql.append(\" and \").append(ProfileTaskLogRecord.TASK_ID).append(\" = ?\");\n        }\n\n        sql.append(\"ORDER BY \").append(ProfileTaskLogRecord.OPERATION_TIME).append(\" DESC \");\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTaskLog> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseLog(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException | JDBCClientException e) {\n            throw new IOException(e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ProfileTaskLogQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"a9d34e3b6121351dc86dc7148398a83c5a96d4b0","commitMessage":"@@@Remove unnecessary parameter in the profile log query (#4549)\n\n* Remove unnecessary parameter in the profile log query\n\n* Replace gone images\n\nCo-authored-by: Mrproliu <mrproliu@lagou.com>\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>","date":"2020-03-22 12:49:43","modifiedFileCount":"5","status":"M","submitter":"mrproliu"},{"authorTime":"2020-03-22 12:49:43","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":5,"curCode":"    public List<ProfileTask> getTaskList(String serviceId, String endpointName, Long startTimeBucket,\n                                         Long endTimeBucket, Integer limit) throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(4);\n        sql.append(\"select * from \").append(ProfileTaskRecord.INDEX_NAME).append(\" where 1=1 \");\n\n        if (startTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskRecord.TIME_BUCKET).append(\" >= ? \");\n            condition.add(startTimeBucket);\n        }\n\n        if (endTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskRecord.TIME_BUCKET).append(\" <= ? \");\n            condition.add(endTimeBucket);\n        }\n\n        if (StringUtil.isNotEmpty(serviceId)) {\n            sql.append(\" and \").append(ProfileTaskRecord.SERVICE_ID).append(\"=? \");\n            condition.add(serviceId);\n        }\n\n        if (StringUtil.isNotEmpty(endpointName)) {\n            sql.append(\" and \").append(ProfileTaskRecord.ENDPOINT_NAME).append(\"=?\");\n            condition.add(endpointName);\n        }\n\n        sql.append(\" ORDER BY \").append(ProfileTaskRecord.START_TIME).append(\" DESC \");\n\n        if (limit != null) {\n            sql.append(\" LIMIT \").append(limit);\n        }\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTask> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseTask(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":87,"groupId":"10792","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getTaskList","params":"(StringserviceId@StringendpointName@LongstartTimeBucket@LongendTimeBucket@Integerlimit)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8d/31ee228e2e38cdd7609bc4e5f8ed2b32f57bce.src","preCode":"    public List<ProfileTask> getTaskList(Integer serviceId, String endpointName, Long startTimeBucket,\n                                         Long endTimeBucket, Integer limit) throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(4);\n        sql.append(\"select * from \").append(ProfileTaskRecord.INDEX_NAME).append(\" where 1=1 \");\n\n        if (startTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskRecord.TIME_BUCKET).append(\" >= ? \");\n            condition.add(startTimeBucket);\n        }\n\n        if (endTimeBucket != null) {\n            sql.append(\" and \").append(ProfileTaskRecord.TIME_BUCKET).append(\" <= ? \");\n            condition.add(endTimeBucket);\n        }\n\n        if (serviceId != null) {\n            sql.append(\" and \").append(ProfileTaskRecord.SERVICE_ID).append(\"=? \");\n            condition.add(serviceId);\n        }\n\n        if (StringUtil.isNotEmpty(endpointName)) {\n            sql.append(\" and \").append(ProfileTaskRecord.ENDPOINT_NAME).append(\"=?\");\n            condition.add(endpointName);\n        }\n\n        sql.append(\" ORDER BY \").append(ProfileTaskRecord.START_TIME).append(\" DESC \");\n\n        if (limit != null) {\n            sql.append(\" LIMIT \").append(limit);\n        }\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTask> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseTask(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ProfileTaskQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2020-03-22 12:49:43","commitOrder":5,"curCode":"    public List<ProfileTaskLog> getTaskLogList() throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(1);\n        sql.append(\"select * from \").append(ProfileTaskLogRecord.INDEX_NAME).append(\" where 1=1 \");\n\n        sql.append(\"ORDER BY \").append(ProfileTaskLogRecord.OPERATION_TIME).append(\" DESC \");\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTaskLog> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseLog(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException | JDBCClientException e) {\n            throw new IOException(e);\n        }\n    }\n","date":"2020-03-22 12:49:43","endLine":62,"groupId":"10792","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getTaskLogList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/7f/4aad0c50e2f03862ddabf363f65b81132a302f.src","preCode":"    public List<ProfileTaskLog> getTaskLogList() throws IOException {\n        final StringBuilder sql = new StringBuilder();\n        final ArrayList<Object> condition = new ArrayList<>(1);\n        sql.append(\"select * from \").append(ProfileTaskLogRecord.INDEX_NAME).append(\" where 1=1 \");\n\n        sql.append(\"ORDER BY \").append(ProfileTaskLogRecord.OPERATION_TIME).append(\" DESC \");\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n                final LinkedList<ProfileTaskLog> tasks = new LinkedList<>();\n                while (resultSet.next()) {\n                    tasks.add(parseLog(resultSet));\n                }\n                return tasks;\n            }\n        } catch (SQLException | JDBCClientException e) {\n            throw new IOException(e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2ProfileTaskLogQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"}]
