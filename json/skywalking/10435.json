[{"authorTime":"2018-09-04 12:06:03","codes":[{"authorDate":"2018-12-06 14:40:29","commitOrder":2,"curCode":"    public void scan() throws IOException, IllegalAccessException, InstantiationException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            if (!aClass.isInterface() && SourceDispatcher.class.isAssignableFrom(aClass)) {\n                Type[] genericInterfaces = aClass.getGenericInterfaces();\n                for (Type genericInterface : genericInterfaces) {\n                    ParameterizedType anInterface = (ParameterizedType)genericInterface;\n                    if (anInterface.getRawType().getTypeName().equals(SourceDispatcher.class.getName())) {\n                        Type[] arguments = anInterface.getActualTypeArguments();\n\n                        if (arguments.length != 1) {\n                            throw new UnexpectedException(\"unexpected type argument number, class \" + aClass.getName());\n                        }\n                        Type argument = arguments[0];\n\n                        Object source = ((Class)argument).newInstance();\n\n                        if (!Source.class.isAssignableFrom(source.getClass())) {\n                            throw new UnexpectedException(\"unexpected type argument of class \" + aClass.getName() + \", should be `org.apache.skywalking.oap.server.core.source.Source`. \");\n                        }\n\n                        Source dispatcherSource = (Source)source;\n                        SourceDispatcher dispatcher = (SourceDispatcher)aClass.newInstance();\n\n                        Scope scope = dispatcherSource.scope();\n\n                        List<SourceDispatcher> dispatchers = this.dispatcherMap.get(scope);\n                        if (dispatchers == null) {\n                            dispatchers = new ArrayList<>();\n                            this.dispatcherMap.put(scope, dispatchers);\n                        }\n\n                        dispatchers.add(dispatcher);\n\n                        logger.info(\"Dispatcher {} is added into Scope {}.\", dispatcher.getClass().getName(), scope);\n                    }\n                }\n            }\n        }\n    }\n","date":"2018-12-06 14:40:29","endLine":107,"groupId":"1377","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"scan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/46/977923313f434f71fc074db3bcb175dadfd907.src","preCode":"    public void scan() throws IOException, IllegalAccessException, InstantiationException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            if (!aClass.isInterface() && SourceDispatcher.class.isAssignableFrom(aClass)) {\n                Type[] genericInterfaces = aClass.getGenericInterfaces();\n                for (Type genericInterface : genericInterfaces) {\n                    ParameterizedType anInterface = (ParameterizedType)genericInterface;\n                    if (anInterface.getRawType().getTypeName().equals(SourceDispatcher.class.getName())) {\n                        Type[] arguments = anInterface.getActualTypeArguments();\n\n                        if (arguments.length != 1) {\n                            throw new UnexpectedException(\"unexpected type argument number, class \" + aClass.getName());\n                        }\n                        Type argument = arguments[0];\n\n                        Object source = ((Class)argument).newInstance();\n\n                        if (!Source.class.isAssignableFrom(source.getClass())) {\n                            throw new UnexpectedException(\"unexpected type argument of class \" + aClass.getName() + \", should be `org.apache.skywalking.oap.server.core.source.Source`. \");\n                        }\n\n                        Source dispatcherSource = (Source)source;\n                        SourceDispatcher dispatcher = (SourceDispatcher)aClass.newInstance();\n\n                        Scope scope = dispatcherSource.scope();\n\n                        List<SourceDispatcher> dispatchers = this.dispatcherMap.get(scope);\n                        if (dispatchers == null) {\n                            dispatchers = new ArrayList<>();\n                            this.dispatcherMap.put(scope, dispatchers);\n                        }\n\n                        dispatchers.add(dispatcher);\n\n                        logger.info(\"Dispatcher {} is added into Scope {}.\", dispatcher.getClass().getName(), scope);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/DispatcherManager.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2018-09-04 12:06:03","commitOrder":2,"curCode":"    public void scan(Runnable callBack) throws IOException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            for (AnnotationListenerCache listener : listeners) {\n                if (aClass.isAnnotationPresent(listener.annotation())) {\n                    listener.addMatch(aClass);\n                }\n            }\n        }\n\n        listeners.forEach(listener ->\n            listener.complete()\n        );\n\n        callBack.run();\n    }\n","date":"2018-09-04 12:06:03","endLine":60,"groupId":"1699","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"scan","params":"(RunnablecallBack)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/7d/9cd8af8da1c8f9e3f0645437aaeb3144546f52.src","preCode":"    public void scan(Runnable callBack) throws IOException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            for (AnnotationListenerCache listener : listeners) {\n                if (aClass.isAnnotationPresent(listener.annotation())) {\n                    listener.addMatch(aClass);\n                }\n            }\n        }\n\n        listeners.forEach(listener ->\n            listener.complete()\n        );\n\n        callBack.run();\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/annotation/AnnotationScan.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"NB"}],"commitId":"f2b158862cc6525e83ca5c0eb007ccf95b52d677","commitMessage":"@@@[OAL refactor step 1]Refactor dispatcher manager (#2006)\n\n* Remove the hard codes about DispatcherManager.\n\n* Add comments.\n","date":"2018-12-06 14:40:29","modifiedFileCount":"3","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-02-26 13:43:14","codes":[{"authorDate":"2019-02-26 13:43:14","commitOrder":3,"curCode":"    public void scan() throws IOException, IllegalAccessException, InstantiationException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            if (!aClass.isInterface() && SourceDispatcher.class.isAssignableFrom(aClass)) {\n                Type[] genericInterfaces = aClass.getGenericInterfaces();\n                for (Type genericInterface : genericInterfaces) {\n                    ParameterizedType anInterface = (ParameterizedType)genericInterface;\n                    if (anInterface.getRawType().getTypeName().equals(SourceDispatcher.class.getName())) {\n                        Type[] arguments = anInterface.getActualTypeArguments();\n\n                        if (arguments.length != 1) {\n                            throw new UnexpectedException(\"unexpected type argument number, class \" + aClass.getName());\n                        }\n                        Type argument = arguments[0];\n\n                        Object source = ((Class)argument).newInstance();\n\n                        if (!Source.class.isAssignableFrom(source.getClass())) {\n                            throw new UnexpectedException(\"unexpected type argument of class \" + aClass.getName() + \", should be `org.apache.skywalking.oap.server.core.source.Source`. \");\n                        }\n\n                        Source dispatcherSource = (Source)source;\n                        SourceDispatcher dispatcher = (SourceDispatcher)aClass.newInstance();\n\n                        int scopeId = dispatcherSource.scope();\n\n                        List<SourceDispatcher> dispatchers = this.dispatcherMap.get(scopeId);\n                        if (dispatchers == null) {\n                            dispatchers = new ArrayList<>();\n                            this.dispatcherMap.put(scopeId, dispatchers);\n                        }\n\n                        dispatchers.add(dispatcher);\n\n                        logger.info(\"Dispatcher {} is added into DefaultScopeDefine {}.\", dispatcher.getClass().getName(), scopeId);\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-02-26 13:43:14","endLine":114,"groupId":"1377","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"scan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f8/4ee9db1bbc94d6229efaeb229319b5d2fff986.src","preCode":"    public void scan() throws IOException, IllegalAccessException, InstantiationException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            if (!aClass.isInterface() && SourceDispatcher.class.isAssignableFrom(aClass)) {\n                Type[] genericInterfaces = aClass.getGenericInterfaces();\n                for (Type genericInterface : genericInterfaces) {\n                    ParameterizedType anInterface = (ParameterizedType)genericInterface;\n                    if (anInterface.getRawType().getTypeName().equals(SourceDispatcher.class.getName())) {\n                        Type[] arguments = anInterface.getActualTypeArguments();\n\n                        if (arguments.length != 1) {\n                            throw new UnexpectedException(\"unexpected type argument number, class \" + aClass.getName());\n                        }\n                        Type argument = arguments[0];\n\n                        Object source = ((Class)argument).newInstance();\n\n                        if (!Source.class.isAssignableFrom(source.getClass())) {\n                            throw new UnexpectedException(\"unexpected type argument of class \" + aClass.getName() + \", should be `org.apache.skywalking.oap.server.core.source.Source`. \");\n                        }\n\n                        Source dispatcherSource = (Source)source;\n                        SourceDispatcher dispatcher = (SourceDispatcher)aClass.newInstance();\n\n                        Scope scope = dispatcherSource.scope();\n\n                        List<SourceDispatcher> dispatchers = this.dispatcherMap.get(scope);\n                        if (dispatchers == null) {\n                            dispatchers = new ArrayList<>();\n                            this.dispatcherMap.put(scope, dispatchers);\n                        }\n\n                        dispatchers.add(dispatcher);\n\n                        logger.info(\"Dispatcher {} is added into Scope {}.\", dispatcher.getClass().getName(), scope);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/DispatcherManager.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2019-02-26 13:43:14","commitOrder":3,"curCode":"    public void scan(Runnable callBack) throws IOException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            for (AnnotationListenerCache listener : listeners) {\n                if (aClass.isAnnotationPresent(listener.annotation())) {\n                    listener.addMatch(aClass);\n                }\n            }\n        }\n\n        listeners.forEach(listener ->\n            listener.complete()\n        );\n\n        if (callBack != null) {\n            callBack.run();\n        }\n    }\n","date":"2019-02-26 13:43:14","endLine":62,"groupId":"1699","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"scan","params":"(RunnablecallBack)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3d/70fd438bc60141ab42e6a9d4608312175b768f.src","preCode":"    public void scan(Runnable callBack) throws IOException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            for (AnnotationListenerCache listener : listeners) {\n                if (aClass.isAnnotationPresent(listener.annotation())) {\n                    listener.addMatch(aClass);\n                }\n            }\n        }\n\n        listeners.forEach(listener ->\n            listener.complete()\n        );\n\n        callBack.run();\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/annotation/AnnotationScan.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"fb62025da832ba04a83b45a5437fe9728ecfe8e3","commitMessage":"@@@Improve OAP extendibility (#2288)\n\n* Make scope meta configurable.\n\n* Fix test cases in ci.\n\n* Change step 1\n\n* Refactor step 2\n\n* Other compile issue done. Prepare the generator changes.\n\n* Revert some wrong changes to Istio receiver.\n\n* Step 3.  make compile pass.\n\n* Try to make CI passed.\n\n* Add a check.\n\n* Fix generated code style\n\n* Provide new and extendable dispatcher generator tool\n\n* Fix startup.\n\n* Can't guarantee the dispatchers are always existing. Put explicit comments at there to avoid confusion.  since this is different with old version.\n\n* Fix a H2 query for endpoint search.\n\n* Fix a wrong mysql alarm query.\n\n* Provide new document and `generate-tool-grammer` module.\n\n* Add missing last section of document.\n\n* Fix typo\n\n* Relocate the @ScopeDeclaration annotation.  make it more sense. Also remove the useless @SourceType annotation. And adjust document for these changes\n\n* ScopeDeclaration can be used once for each class only.  now.\n","date":"2019-02-26 13:43:14","modifiedFileCount":"73","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-05-15 22:42:38","codes":[{"authorDate":"2019-02-26 13:43:14","commitOrder":4,"curCode":"    public void scan() throws IOException, IllegalAccessException, InstantiationException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            if (!aClass.isInterface() && SourceDispatcher.class.isAssignableFrom(aClass)) {\n                Type[] genericInterfaces = aClass.getGenericInterfaces();\n                for (Type genericInterface : genericInterfaces) {\n                    ParameterizedType anInterface = (ParameterizedType)genericInterface;\n                    if (anInterface.getRawType().getTypeName().equals(SourceDispatcher.class.getName())) {\n                        Type[] arguments = anInterface.getActualTypeArguments();\n\n                        if (arguments.length != 1) {\n                            throw new UnexpectedException(\"unexpected type argument number, class \" + aClass.getName());\n                        }\n                        Type argument = arguments[0];\n\n                        Object source = ((Class)argument).newInstance();\n\n                        if (!Source.class.isAssignableFrom(source.getClass())) {\n                            throw new UnexpectedException(\"unexpected type argument of class \" + aClass.getName() + \", should be `org.apache.skywalking.oap.server.core.source.Source`. \");\n                        }\n\n                        Source dispatcherSource = (Source)source;\n                        SourceDispatcher dispatcher = (SourceDispatcher)aClass.newInstance();\n\n                        int scopeId = dispatcherSource.scope();\n\n                        List<SourceDispatcher> dispatchers = this.dispatcherMap.get(scopeId);\n                        if (dispatchers == null) {\n                            dispatchers = new ArrayList<>();\n                            this.dispatcherMap.put(scopeId, dispatchers);\n                        }\n\n                        dispatchers.add(dispatcher);\n\n                        logger.info(\"Dispatcher {} is added into DefaultScopeDefine {}.\", dispatcher.getClass().getName(), scopeId);\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-02-26 13:43:14","endLine":114,"groupId":"1377","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"scan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f8/4ee9db1bbc94d6229efaeb229319b5d2fff986.src","preCode":"    public void scan() throws IOException, IllegalAccessException, InstantiationException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            if (!aClass.isInterface() && SourceDispatcher.class.isAssignableFrom(aClass)) {\n                Type[] genericInterfaces = aClass.getGenericInterfaces();\n                for (Type genericInterface : genericInterfaces) {\n                    ParameterizedType anInterface = (ParameterizedType)genericInterface;\n                    if (anInterface.getRawType().getTypeName().equals(SourceDispatcher.class.getName())) {\n                        Type[] arguments = anInterface.getActualTypeArguments();\n\n                        if (arguments.length != 1) {\n                            throw new UnexpectedException(\"unexpected type argument number, class \" + aClass.getName());\n                        }\n                        Type argument = arguments[0];\n\n                        Object source = ((Class)argument).newInstance();\n\n                        if (!Source.class.isAssignableFrom(source.getClass())) {\n                            throw new UnexpectedException(\"unexpected type argument of class \" + aClass.getName() + \", should be `org.apache.skywalking.oap.server.core.source.Source`. \");\n                        }\n\n                        Source dispatcherSource = (Source)source;\n                        SourceDispatcher dispatcher = (SourceDispatcher)aClass.newInstance();\n\n                        int scopeId = dispatcherSource.scope();\n\n                        List<SourceDispatcher> dispatchers = this.dispatcherMap.get(scopeId);\n                        if (dispatchers == null) {\n                            dispatchers = new ArrayList<>();\n                            this.dispatcherMap.put(scopeId, dispatchers);\n                        }\n\n                        dispatchers.add(dispatcher);\n\n                        logger.info(\"Dispatcher {} is added into DefaultScopeDefine {}.\", dispatcher.getClass().getName(), scopeId);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/DispatcherManager.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"},{"authorDate":"2019-05-15 22:42:38","commitOrder":4,"curCode":"    public void scan(Runnable callBack) throws IOException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            for (AnnotationListenerCache listener : listeners) {\n                if (aClass.isAnnotationPresent(listener.annotation())) {\n                    listener.addMatch(aClass);\n                }\n            }\n        }\n\n        listeners.forEach(AnnotationListenerCache::complete);\n\n        if (callBack != null) {\n            callBack.run();\n        }\n    }\n","date":"2019-05-15 22:42:38","endLine":60,"groupId":"1699","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"scan","params":"(RunnablecallBack)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/7b/8aea837412a7c1b5bb17e4fb31dcb5be6e963e.src","preCode":"    public void scan(Runnable callBack) throws IOException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            for (AnnotationListenerCache listener : listeners) {\n                if (aClass.isAnnotationPresent(listener.annotation())) {\n                    listener.addMatch(aClass);\n                }\n            }\n        }\n\n        listeners.forEach(listener ->\n            listener.complete()\n        );\n\n        if (callBack != null) {\n            callBack.run();\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/annotation/AnnotationScan.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"63fb961c0d1de02f053045c3bf80361ebd7bd58d","commitMessage":"@@@New OAP annotations.  they are friendly for streaming loader. (#2670)\n\n* New stream annotation.\n- Inventory annotation example:\n@Stream(name = ServiceInventory.INDEX_NAME.  scopeId = DefaultScopeDefine.SERVICE_INVENTORY.  storage = @Storage(builder = ServiceInventory.Builder.class.  deleteHistory = false).  kind = StreamKind.Inventory)\n\n- Metrics annotation example:\n@Stream(name = ServiceRelationClientSideMetrics.INDEX_NAME.  scopeId = DefaultScopeDefine.SERVICE_RELATION.  storage = @Storage(builder = ServiceRelationClientSideMetrics.Builder.class).  kind = StreamKind.Metrics)\n\n- Record annotation example:\n@Stream(name = SegmentRecord.INDEX_NAME.  scopeId = DefaultScopeDefine.SEGMENT.  storage = @Storage(builder = SegmentRecord.Builder.class).  kind = StreamKind.Record)\n\n- TopN annotation example:\n@Stream(name = TopNDatabaseStatement.INDEX_NAME.  scopeId = DefaultScopeDefine.DATABASE_SLOW_STATEMENT.  storage = @Storage(builder = TopNDatabaseStatement.Builder.class).  kind = StreamKind.TopN)\n\n* no message\n\n* Stream annotation finish.\n\n* Make stream processors to be the singleton class.\n\n* Fixed the compile errors.\n\n* Modify the OAL module for this annotation refactor.\n\n* Add apache license header.\n\n* Duplicate import.\n\n* Fixed check style error.\n","date":"2019-05-15 22:42:38","modifiedFileCount":"55","status":"M","submitter":"??? pengys"},{"authorTime":"2019-07-18 19:47:23","codes":[{"authorDate":"2019-07-18 19:47:23","commitOrder":5,"curCode":"    public void scan() throws IOException, IllegalAccessException, InstantiationException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            addIfAsSourceDispatcher(aClass);\n        }\n    }\n","date":"2019-07-18 19:47:23","endLine":85,"groupId":"1377","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"scan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/48/356de4f616fee5623662938950d65c4034e07b.src","preCode":"    public void scan() throws IOException, IllegalAccessException, InstantiationException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            if (!aClass.isInterface() && SourceDispatcher.class.isAssignableFrom(aClass)) {\n                Type[] genericInterfaces = aClass.getGenericInterfaces();\n                for (Type genericInterface : genericInterfaces) {\n                    ParameterizedType anInterface = (ParameterizedType)genericInterface;\n                    if (anInterface.getRawType().getTypeName().equals(SourceDispatcher.class.getName())) {\n                        Type[] arguments = anInterface.getActualTypeArguments();\n\n                        if (arguments.length != 1) {\n                            throw new UnexpectedException(\"unexpected type argument number, class \" + aClass.getName());\n                        }\n                        Type argument = arguments[0];\n\n                        Object source = ((Class)argument).newInstance();\n\n                        if (!Source.class.isAssignableFrom(source.getClass())) {\n                            throw new UnexpectedException(\"unexpected type argument of class \" + aClass.getName() + \", should be `org.apache.skywalking.oap.server.core.source.Source`. \");\n                        }\n\n                        Source dispatcherSource = (Source)source;\n                        SourceDispatcher dispatcher = (SourceDispatcher)aClass.newInstance();\n\n                        int scopeId = dispatcherSource.scope();\n\n                        List<SourceDispatcher> dispatchers = this.dispatcherMap.get(scopeId);\n                        if (dispatchers == null) {\n                            dispatchers = new ArrayList<>();\n                            this.dispatcherMap.put(scopeId, dispatchers);\n                        }\n\n                        dispatchers.add(dispatcher);\n\n                        logger.info(\"Dispatcher {} is added into DefaultScopeDefine {}.\", dispatcher.getClass().getName(), scopeId);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/DispatcherManager.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2019-07-18 19:47:23","commitOrder":5,"curCode":"    public void scan() throws IOException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            for (AnnotationListenerCache listener : listeners) {\n                if (aClass.isAnnotationPresent(listener.annotation())) {\n                    listener.addMatch(aClass);\n                }\n            }\n        }\n\n        listeners.forEach(AnnotationListenerCache::complete);\n    }\n","date":"2019-07-18 19:47:23","endLine":67,"groupId":"1699","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"scan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/da/68bc5dd2beea6d99a9f7c6bacd2df0218985a9.src","preCode":"    public void scan(Runnable callBack) throws IOException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            for (AnnotationListenerCache listener : listeners) {\n                if (aClass.isAnnotationPresent(listener.annotation())) {\n                    listener.addMatch(aClass);\n                }\n            }\n        }\n\n        listeners.forEach(AnnotationListenerCache::complete);\n\n        if (callBack != null) {\n            callBack.run();\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/annotation/AnnotationScan.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"5b039e9747fac98444b4ec423a5d57524202f286","commitMessage":"@@@All NEW OAL Runtime Engine (#3109)\n\n* Change OAL generator tool to runtime.\n\nStep 1. change project structure. API links and maven pom.\n\n* Part of metrics class generation\n\n* Metrcis class generated.\n\n* Set up the basic structure of new OAL engine.\n\n* Finish metrics generation.\n\n* Support dispatcher generation.\n\n* Format codes.\n\n* Generate dispatcher all methods.\n\n* Implement disable in hardcode.\n\n* Clear up\n\n* Fix compile startup.\n\n* Update license and document of new OAL engine.\n\n* Fix rat.\n\n* Disable class output in default\n\n* Copy from @kezhenxu94 's test PR.  https://github.com/apache/skywalking/pull/3110\n\n* Wait for the mount command to finish\n","date":"2019-07-18 19:47:23","modifiedFileCount":"16","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-05-08 21:21:03","codes":[{"authorDate":"2019-07-18 19:47:23","commitOrder":6,"curCode":"    public void scan() throws IOException, IllegalAccessException, InstantiationException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            addIfAsSourceDispatcher(aClass);\n        }\n    }\n","date":"2019-07-18 19:47:23","endLine":85,"groupId":"10435","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"scan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/48/356de4f616fee5623662938950d65c4034e07b.src","preCode":"    public void scan() throws IOException, IllegalAccessException, InstantiationException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            addIfAsSourceDispatcher(aClass);\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/DispatcherManager.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"},{"authorDate":"2020-05-08 21:21:03","commitOrder":6,"curCode":"    public void scan() throws IOException, StorageException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            for (AnnotationListenerCache listener : listeners) {\n                if (aClass.isAnnotationPresent(listener.annotation())) {\n                    listener.addMatch(aClass);\n                }\n            }\n        }\n\n        for (AnnotationListenerCache listener : listeners) {\n            listener.complete();\n        }\n    }\n","date":"2020-05-08 21:21:03","endLine":69,"groupId":"10435","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"scan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/15/51c1ea6e745a7afc403587c39b172585972074.src","preCode":"    public void scan() throws IOException {\n        ClassPath classpath = ClassPath.from(this.getClass().getClassLoader());\n        ImmutableSet<ClassPath.ClassInfo> classes = classpath.getTopLevelClassesRecursive(\"org.apache.skywalking\");\n        for (ClassPath.ClassInfo classInfo : classes) {\n            Class<?> aClass = classInfo.load();\n\n            for (AnnotationListenerCache listener : listeners) {\n                if (aClass.isAnnotationPresent(listener.annotation())) {\n                    listener.addMatch(aClass);\n                }\n            }\n        }\n\n        listeners.forEach(AnnotationListenerCache::complete);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/annotation/AnnotationScan.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"7edcd5aa33cec034047871ac1348b5b858b630f0","commitMessage":"@@@Change the model installation into the reactive module (#4761)\n\n","date":"2020-05-08 21:21:03","modifiedFileCount":"31","status":"M","submitter":"?? Wu Sheng"}]
