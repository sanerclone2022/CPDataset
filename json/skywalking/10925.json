[{"authorTime":"2018-09-26 08:20:55","codes":[{"authorDate":"2018-09-26 08:20:55","commitOrder":1,"curCode":"    private static void toServiceRelation(ServiceMeshMetricDataDecorator decorator, long minuteTimeBucket) {\n        ServiceMeshMetric metric = decorator.getMetric();\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceId(metric.getSourceServiceId());\n        serviceRelation.setSourceServiceName(getServiceName(metric.getSourceServiceId(), metric.getSourceServiceName()));\n        serviceRelation.setSourceServiceInstanceName(getServiceInstanceName(metric.getSourceServiceInstanceId(), metric.getSourceServiceInstance()));\n\n        serviceRelation.setDestServiceId(metric.getDestServiceId());\n        serviceRelation.setDestServiceName(getServiceName(metric.getDestServiceId(), metric.getDestServiceName()));\n        serviceRelation.setDestServiceInstanceName(getServiceInstanceName(metric.getDestServiceInstanceId(), metric.getDestServiceInstance()));\n\n        serviceRelation.setEndpoint(metric.getEndpoint());\n        serviceRelation.setLatency(metric.getLatency());\n        serviceRelation.setStatus(metric.getStatus());\n        serviceRelation.setType(protocol2Type(metric.getProtocol()));\n        serviceRelation.setResponseCode(metric.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metric.getDetectPoint()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2018-09-26 08:20:55","endLine":115,"groupId":"6522","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toServiceRelation","params":"(ServiceMeshMetricDataDecoratordecorator@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/4d/fcc4e19fce8da34210f9aa5f35574019472149.src","preCode":"    private static void toServiceRelation(ServiceMeshMetricDataDecorator decorator, long minuteTimeBucket) {\n        ServiceMeshMetric metric = decorator.getMetric();\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceId(metric.getSourceServiceId());\n        serviceRelation.setSourceServiceName(getServiceName(metric.getSourceServiceId(), metric.getSourceServiceName()));\n        serviceRelation.setSourceServiceInstanceName(getServiceInstanceName(metric.getSourceServiceInstanceId(), metric.getSourceServiceInstance()));\n\n        serviceRelation.setDestServiceId(metric.getDestServiceId());\n        serviceRelation.setDestServiceName(getServiceName(metric.getDestServiceId(), metric.getDestServiceName()));\n        serviceRelation.setDestServiceInstanceName(getServiceInstanceName(metric.getDestServiceInstanceId(), metric.getDestServiceInstance()));\n\n        serviceRelation.setEndpoint(metric.getEndpoint());\n        serviceRelation.setLatency(metric.getLatency());\n        serviceRelation.setStatus(metric.getStatus());\n        serviceRelation.setType(protocol2Type(metric.getProtocol()));\n        serviceRelation.setResponseCode(metric.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metric.getDetectPoint()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2018-09-26 08:20:55","commitOrder":1,"curCode":"    private static void toServiceInstanceRelation(ServiceMeshMetricDataDecorator decorator, long minuteTimeBucket) {\n        ServiceMeshMetric metric = decorator.getMetric();\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceId(metric.getSourceServiceInstanceId());\n        serviceRelation.setSourceServiceInstanceName(getServiceInstanceName(metric.getSourceServiceInstanceId(), metric.getSourceServiceInstance()));\n        serviceRelation.setSourceServiceId(metric.getSourceServiceId());\n        serviceRelation.setSourceServiceName(getServiceName(metric.getSourceServiceId(), metric.getSourceServiceName()));\n\n        serviceRelation.setDestServiceInstanceId(metric.getDestServiceInstanceId());\n        serviceRelation.setDestServiceInstanceName(getServiceInstanceName(metric.getDestServiceInstanceId(), metric.getDestServiceInstance()));\n        serviceRelation.setDestServiceId(metric.getDestServiceId());\n        serviceRelation.setDestServiceName(getServiceName(metric.getDestServiceId(), metric.getDestServiceName()));\n\n        serviceRelation.setEndpoint(metric.getEndpoint());\n        serviceRelation.setLatency(metric.getLatency());\n        serviceRelation.setStatus(metric.getStatus());\n        serviceRelation.setType(protocol2Type(metric.getProtocol()));\n        serviceRelation.setResponseCode(metric.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metric.getDetectPoint()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2018-09-26 08:20:55","endLine":155,"groupId":"3483","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toServiceInstanceRelation","params":"(ServiceMeshMetricDataDecoratordecorator@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/4d/fcc4e19fce8da34210f9aa5f35574019472149.src","preCode":"    private static void toServiceInstanceRelation(ServiceMeshMetricDataDecorator decorator, long minuteTimeBucket) {\n        ServiceMeshMetric metric = decorator.getMetric();\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceId(metric.getSourceServiceInstanceId());\n        serviceRelation.setSourceServiceInstanceName(getServiceInstanceName(metric.getSourceServiceInstanceId(), metric.getSourceServiceInstance()));\n        serviceRelation.setSourceServiceId(metric.getSourceServiceId());\n        serviceRelation.setSourceServiceName(getServiceName(metric.getSourceServiceId(), metric.getSourceServiceName()));\n\n        serviceRelation.setDestServiceInstanceId(metric.getDestServiceInstanceId());\n        serviceRelation.setDestServiceInstanceName(getServiceInstanceName(metric.getDestServiceInstanceId(), metric.getDestServiceInstance()));\n        serviceRelation.setDestServiceId(metric.getDestServiceId());\n        serviceRelation.setDestServiceName(getServiceName(metric.getDestServiceId(), metric.getDestServiceName()));\n\n        serviceRelation.setEndpoint(metric.getEndpoint());\n        serviceRelation.setLatency(metric.getLatency());\n        serviceRelation.setStatus(metric.getStatus());\n        serviceRelation.setType(protocol2Type(metric.getProtocol()));\n        serviceRelation.setResponseCode(metric.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metric.getDetectPoint()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"}],"commitId":"9d6bf6787b8b3751a08a087e8f6ac6532d80a9bd","commitMessage":"@@@Finish mesh source dispatch (#1687)\n\n* Merge module and provider of mesh\n\n* Finish the skeleton of mesh receiver.\n\n* Finish mesh dispatcher.\n\n* Fix missing timebucket\n","date":"2018-09-26 08:20:55","modifiedFileCount":"5","status":"B","submitter":"?? Wu Sheng"},{"authorTime":"2018-10-26 15:17:33","codes":[{"authorDate":"2018-10-26 15:17:33","commitOrder":2,"curCode":"    private static void toServiceRelation(ServiceMeshMetricDataDecorator decorator, long minuteTimeBucket) {\n        ServiceMeshMetric metric = decorator.getMetric();\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceId(metric.getSourceServiceId());\n        serviceRelation.setSourceServiceName(getServiceName(metric.getSourceServiceId(), metric.getSourceServiceName()));\n        serviceRelation.setSourceServiceInstanceName(getServiceInstanceName(metric.getSourceServiceInstanceId(), metric.getSourceServiceInstance()));\n\n        serviceRelation.setDestServiceId(metric.getDestServiceId());\n        serviceRelation.setDestServiceName(getServiceName(metric.getDestServiceId(), metric.getDestServiceName()));\n        serviceRelation.setDestServiceInstanceName(getServiceInstanceName(metric.getDestServiceInstanceId(), metric.getDestServiceInstance()));\n\n        serviceRelation.setEndpoint(metric.getEndpoint());\n        serviceRelation.setLatency(metric.getLatency());\n        serviceRelation.setStatus(metric.getStatus());\n        serviceRelation.setType(protocol2Type(metric.getProtocol()));\n        serviceRelation.setResponseCode(metric.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metric.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metric.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2018-10-26 15:17:33","endLine":140,"groupId":"6522","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toServiceRelation","params":"(ServiceMeshMetricDataDecoratordecorator@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/70/b755a9f1c6d1eea988859e9f3f79ec858933aa.src","preCode":"    private static void toServiceRelation(ServiceMeshMetricDataDecorator decorator, long minuteTimeBucket) {\n        ServiceMeshMetric metric = decorator.getMetric();\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceId(metric.getSourceServiceId());\n        serviceRelation.setSourceServiceName(getServiceName(metric.getSourceServiceId(), metric.getSourceServiceName()));\n        serviceRelation.setSourceServiceInstanceName(getServiceInstanceName(metric.getSourceServiceInstanceId(), metric.getSourceServiceInstance()));\n\n        serviceRelation.setDestServiceId(metric.getDestServiceId());\n        serviceRelation.setDestServiceName(getServiceName(metric.getDestServiceId(), metric.getDestServiceName()));\n        serviceRelation.setDestServiceInstanceName(getServiceInstanceName(metric.getDestServiceInstanceId(), metric.getDestServiceInstance()));\n\n        serviceRelation.setEndpoint(metric.getEndpoint());\n        serviceRelation.setLatency(metric.getLatency());\n        serviceRelation.setStatus(metric.getStatus());\n        serviceRelation.setType(protocol2Type(metric.getProtocol()));\n        serviceRelation.setResponseCode(metric.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metric.getDetectPoint()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2018-10-26 15:17:33","commitOrder":2,"curCode":"    private static void toServiceInstanceRelation(ServiceMeshMetricDataDecorator decorator, long minuteTimeBucket) {\n        ServiceMeshMetric metric = decorator.getMetric();\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceId(metric.getSourceServiceInstanceId());\n        serviceRelation.setSourceServiceInstanceName(getServiceInstanceName(metric.getSourceServiceInstanceId(), metric.getSourceServiceInstance()));\n        serviceRelation.setSourceServiceId(metric.getSourceServiceId());\n        serviceRelation.setSourceServiceName(getServiceName(metric.getSourceServiceId(), metric.getSourceServiceName()));\n\n        serviceRelation.setDestServiceInstanceId(metric.getDestServiceInstanceId());\n        serviceRelation.setDestServiceInstanceName(getServiceInstanceName(metric.getDestServiceInstanceId(), metric.getDestServiceInstance()));\n        serviceRelation.setDestServiceId(metric.getDestServiceId());\n        serviceRelation.setDestServiceName(getServiceName(metric.getDestServiceId(), metric.getDestServiceName()));\n\n        serviceRelation.setEndpoint(metric.getEndpoint());\n        serviceRelation.setLatency(metric.getLatency());\n        serviceRelation.setStatus(metric.getStatus());\n        serviceRelation.setType(protocol2Type(metric.getProtocol()));\n        serviceRelation.setResponseCode(metric.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metric.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metric.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2018-10-26 15:17:33","endLine":181,"groupId":"3483","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toServiceInstanceRelation","params":"(ServiceMeshMetricDataDecoratordecorator@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/70/b755a9f1c6d1eea988859e9f3f79ec858933aa.src","preCode":"    private static void toServiceInstanceRelation(ServiceMeshMetricDataDecorator decorator, long minuteTimeBucket) {\n        ServiceMeshMetric metric = decorator.getMetric();\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceId(metric.getSourceServiceInstanceId());\n        serviceRelation.setSourceServiceInstanceName(getServiceInstanceName(metric.getSourceServiceInstanceId(), metric.getSourceServiceInstance()));\n        serviceRelation.setSourceServiceId(metric.getSourceServiceId());\n        serviceRelation.setSourceServiceName(getServiceName(metric.getSourceServiceId(), metric.getSourceServiceName()));\n\n        serviceRelation.setDestServiceInstanceId(metric.getDestServiceInstanceId());\n        serviceRelation.setDestServiceInstanceName(getServiceInstanceName(metric.getDestServiceInstanceId(), metric.getDestServiceInstance()));\n        serviceRelation.setDestServiceId(metric.getDestServiceId());\n        serviceRelation.setDestServiceName(getServiceName(metric.getDestServiceId(), metric.getDestServiceName()));\n\n        serviceRelation.setEndpoint(metric.getEndpoint());\n        serviceRelation.setLatency(metric.getLatency());\n        serviceRelation.setStatus(metric.getStatus());\n        serviceRelation.setType(protocol2Type(metric.getProtocol()));\n        serviceRelation.setResponseCode(metric.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metric.getDetectPoint()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"d9556c38fca934d0de967b9f1c29de831fe6b986","commitMessage":"@@@Make Mesh and Istio receivers ready (#1821)\n\n* Make receiver more effective\n\n* Add Istio test case and all source dispatch in\n\n* Refactor mock data\n\n* FIx rat.\n\n* Support call component.\n\n* Fix ThermodynamicIndicator bug.\n\n* Fix test cases.\n\n* Fix missing calculate in db merging.\n\n* Add codes for debug.\n\n* 1. Fixed elasticsearch bulk process not fresh bug. (#1819)\n\n2. Fixed the bug of source register no queue but wait the end for batch tag.\n\n* Remove debug log.  and restore TTL timer for real scenarios.\n","date":"2018-10-26 15:17:33","modifiedFileCount":"19","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-05-10 08:05:37","codes":[{"authorDate":"2019-05-10 08:05:37","commitOrder":3,"curCode":"    private static void toServiceRelation(ServiceMeshMetricDataDecorator decorator, long minuteTimeBucket) {\n        ServiceMeshMetric metrics = decorator.getMetric();\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceId(metrics.getSourceServiceId());\n        serviceRelation.setSourceServiceName(getServiceName(metrics.getSourceServiceId(), metrics.getSourceServiceName()));\n        serviceRelation.setSourceServiceInstanceName(getServiceInstanceName(metrics.getSourceServiceInstanceId(), metrics.getSourceServiceInstance()));\n\n        serviceRelation.setDestServiceId(metrics.getDestServiceId());\n        serviceRelation.setDestServiceName(getServiceName(metrics.getDestServiceId(), metrics.getDestServiceName()));\n        serviceRelation.setDestServiceInstanceName(getServiceInstanceName(metrics.getDestServiceInstanceId(), metrics.getDestServiceInstance()));\n\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2019-05-10 08:05:37","endLine":186,"groupId":"4273","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"toServiceRelation","params":"(ServiceMeshMetricDataDecoratordecorator@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5b/cf54b850270e99dcfc49fa00498fd01c095204.src","preCode":"    private static void toServiceRelation(ServiceMeshMetricDataDecorator decorator, long minuteTimeBucket) {\n        ServiceMeshMetric metric = decorator.getMetric();\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceId(metric.getSourceServiceId());\n        serviceRelation.setSourceServiceName(getServiceName(metric.getSourceServiceId(), metric.getSourceServiceName()));\n        serviceRelation.setSourceServiceInstanceName(getServiceInstanceName(metric.getSourceServiceInstanceId(), metric.getSourceServiceInstance()));\n\n        serviceRelation.setDestServiceId(metric.getDestServiceId());\n        serviceRelation.setDestServiceName(getServiceName(metric.getDestServiceId(), metric.getDestServiceName()));\n        serviceRelation.setDestServiceInstanceName(getServiceInstanceName(metric.getDestServiceInstanceId(), metric.getDestServiceInstance()));\n\n        serviceRelation.setEndpoint(metric.getEndpoint());\n        serviceRelation.setLatency(metric.getLatency());\n        serviceRelation.setStatus(metric.getStatus());\n        serviceRelation.setType(protocol2Type(metric.getProtocol()));\n        serviceRelation.setResponseCode(metric.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metric.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metric.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2019-05-10 08:05:37","commitOrder":3,"curCode":"    private static void toServiceInstanceRelation(ServiceMeshMetricDataDecorator decorator, long minuteTimeBucket) {\n        ServiceMeshMetric metrics = decorator.getMetric();\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceId(metrics.getSourceServiceInstanceId());\n        serviceRelation.setSourceServiceInstanceName(getServiceInstanceName(metrics.getSourceServiceInstanceId(), metrics.getSourceServiceInstance()));\n        serviceRelation.setSourceServiceId(metrics.getSourceServiceId());\n        serviceRelation.setSourceServiceName(getServiceName(metrics.getSourceServiceId(), metrics.getSourceServiceName()));\n\n        serviceRelation.setDestServiceInstanceId(metrics.getDestServiceInstanceId());\n        serviceRelation.setDestServiceInstanceName(getServiceInstanceName(metrics.getDestServiceInstanceId(), metrics.getDestServiceInstance()));\n        serviceRelation.setDestServiceId(metrics.getDestServiceId());\n        serviceRelation.setDestServiceName(getServiceName(metrics.getDestServiceId(), metrics.getDestServiceName()));\n\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2019-05-10 08:05:37","endLine":227,"groupId":"4274","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"toServiceInstanceRelation","params":"(ServiceMeshMetricDataDecoratordecorator@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5b/cf54b850270e99dcfc49fa00498fd01c095204.src","preCode":"    private static void toServiceInstanceRelation(ServiceMeshMetricDataDecorator decorator, long minuteTimeBucket) {\n        ServiceMeshMetric metric = decorator.getMetric();\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceId(metric.getSourceServiceInstanceId());\n        serviceRelation.setSourceServiceInstanceName(getServiceInstanceName(metric.getSourceServiceInstanceId(), metric.getSourceServiceInstance()));\n        serviceRelation.setSourceServiceId(metric.getSourceServiceId());\n        serviceRelation.setSourceServiceName(getServiceName(metric.getSourceServiceId(), metric.getSourceServiceName()));\n\n        serviceRelation.setDestServiceInstanceId(metric.getDestServiceInstanceId());\n        serviceRelation.setDestServiceInstanceName(getServiceInstanceName(metric.getDestServiceInstanceId(), metric.getDestServiceInstance()));\n        serviceRelation.setDestServiceId(metric.getDestServiceId());\n        serviceRelation.setDestServiceName(getServiceName(metric.getDestServiceId(), metric.getDestServiceName()));\n\n        serviceRelation.setEndpoint(metric.getEndpoint());\n        serviceRelation.setLatency(metric.getLatency());\n        serviceRelation.setStatus(metric.getStatus());\n        serviceRelation.setType(protocol2Type(metric.getProtocol()));\n        serviceRelation.setResponseCode(metric.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metric.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metric.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"}],"commitId":"ed78dabe8b142be3d546d349046768135f0a752a","commitMessage":"@@@Rename metric and indicator to metrics. (#2643)\n\n* Rename metric to metrics.\n\n* Fixed test case execute failure issues.\n","date":"2019-05-10 08:05:37","modifiedFileCount":"102","status":"M","submitter":"??? pengys"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":4,"curCode":"    private static void toServiceRelation(ServiceMeshMetric metrics, long minuteTimeBucket) {\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2020-04-10 11:03:24","endLine":184,"groupId":"1256","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"toServiceRelation","params":"(ServiceMeshMetricmetrics@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/61/b2a77c474505aa800cbf19ab1a3953e95f693b.src","preCode":"    private static void toServiceRelation(ServiceMeshMetricDataDecorator decorator, long minuteTimeBucket) {\n        ServiceMeshMetric metrics = decorator.getMetric();\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceId(metrics.getSourceServiceId());\n        serviceRelation.setSourceServiceName(\n            getServiceName(metrics.getSourceServiceId(), metrics.getSourceServiceName()));\n        serviceRelation.setSourceServiceInstanceName(\n            getServiceInstanceName(metrics.getSourceServiceInstanceId(), metrics\n                .getSourceServiceInstance()));\n\n        serviceRelation.setDestServiceId(metrics.getDestServiceId());\n        serviceRelation.setDestServiceName(getServiceName(metrics.getDestServiceId(), metrics.getDestServiceName()));\n        serviceRelation.setDestServiceInstanceName(\n            getServiceInstanceName(metrics.getDestServiceInstanceId(), metrics.getDestServiceInstance()));\n\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":4,"curCode":"    private static void toServiceInstanceRelation(ServiceMeshMetric metrics, long minuteTimeBucket) {\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2020-04-10 11:03:24","endLine":219,"groupId":"4405","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"toServiceInstanceRelation","params":"(ServiceMeshMetricmetrics@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/61/b2a77c474505aa800cbf19ab1a3953e95f693b.src","preCode":"    private static void toServiceInstanceRelation(ServiceMeshMetricDataDecorator decorator, long minuteTimeBucket) {\n        ServiceMeshMetric metrics = decorator.getMetric();\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceId(metrics.getSourceServiceInstanceId());\n        serviceRelation.setSourceServiceInstanceName(\n            getServiceInstanceName(metrics.getSourceServiceInstanceId(), metrics\n                .getSourceServiceInstance()));\n        serviceRelation.setSourceServiceId(metrics.getSourceServiceId());\n        serviceRelation.setSourceServiceName(\n            getServiceName(metrics.getSourceServiceId(), metrics.getSourceServiceName()));\n\n        serviceRelation.setDestServiceInstanceId(metrics.getDestServiceInstanceId());\n        serviceRelation.setDestServiceInstanceName(\n            getServiceInstanceName(metrics.getDestServiceInstanceId(), metrics.getDestServiceInstance()));\n        serviceRelation.setDestServiceId(metrics.getDestServiceId());\n        serviceRelation.setDestServiceName(getServiceName(metrics.getDestServiceId(), metrics.getDestServiceName()));\n\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 17:59:21","codes":[{"authorDate":"2020-04-10 17:59:21","commitOrder":5,"curCode":"    private static void toServiceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2020-04-10 17:59:21","endLine":191,"groupId":"1256","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"toServiceRelation","params":"(ServiceMeshMetric.Buildermetrics@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/73/05398eec37086e4c8a50be3103ef99b9c1a725.src","preCode":"    private static void toServiceRelation(ServiceMeshMetric metrics, long minuteTimeBucket) {\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2020-04-10 17:59:21","commitOrder":5,"curCode":"    private static void toServiceInstanceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2020-04-10 17:59:21","endLine":226,"groupId":"4405","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"toServiceInstanceRelation","params":"(ServiceMeshMetric.Buildermetrics@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/73/05398eec37086e4c8a50be3103ef99b9c1a725.src","preCode":"    private static void toServiceInstanceRelation(ServiceMeshMetric metrics, long minuteTimeBucket) {\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"}],"commitId":"44cae97c259c06f95d1fc4b78ee41268670b6542","commitMessage":"@@@Set up restrict length rules for service.  instance and endpoint (#4633)\n\n* Set up restrict length rules for service.  instance and endpoint\n\n* Adjust two env names.","date":"2020-04-10 17:59:21","modifiedFileCount":"26","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-09-13 14:52:39","codes":[{"authorDate":"2020-09-13 14:52:39","commitOrder":6,"curCode":"    private static void toServiceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n        serviceRelation.setTlsMode(metrics.getTlsMode());\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2020-09-13 14:52:39","endLine":192,"groupId":"1256","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"toServiceRelation","params":"(ServiceMeshMetric.Buildermetrics@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/89/0c79711e2354e46df64ddd7432abd82dec2cd5.src","preCode":"    private static void toServiceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2020-09-13 14:52:39","commitOrder":6,"curCode":"    private static void toServiceInstanceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n        serviceRelation.setTlsMode(metrics.getTlsMode());\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2020-09-13 14:52:39","endLine":228,"groupId":"4405","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"toServiceInstanceRelation","params":"(ServiceMeshMetric.Buildermetrics@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/89/0c79711e2354e46df64ddd7432abd82dec2cd5.src","preCode":"    private static void toServiceInstanceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"50d2ff75bcf42d6d7e12567590701cc44e6b9dc7","commitMessage":"@@@Parse TLS mode from ALS (#5454)\n\n* Parse tls mode from als\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>\n\n* Polish code\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>","date":"2020-09-13 14:52:39","modifiedFileCount":"4","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2020-11-17 09:03:48","codes":[{"authorDate":"2020-11-17 09:03:48","commitOrder":7,"curCode":"    private static void toServiceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n        serviceRelation.setTlsMode(metrics.getTlsMode());\n        serviceRelation.getSideCar().setInternalErrorCode(metrics.getInternalErrorCode());\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2020-11-17 09:03:48","endLine":199,"groupId":"1256","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"toServiceRelation","params":"(ServiceMeshMetric.Buildermetrics@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/06/356554ef3ccd8bf0f139d3d5c7e445800d2e92.src","preCode":"    private static void toServiceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n        serviceRelation.setTlsMode(metrics.getTlsMode());\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"},{"authorDate":"2020-11-17 09:03:48","commitOrder":7,"curCode":"    private static void toServiceInstanceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n        serviceRelation.setTlsMode(metrics.getTlsMode());\n        serviceRelation.getSideCar().setInternalErrorCode(metrics.getInternalErrorCode());\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2020-11-17 09:03:48","endLine":237,"groupId":"4405","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"toServiceInstanceRelation","params":"(ServiceMeshMetric.Buildermetrics@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/06/356554ef3ccd8bf0f139d3d5c7e445800d2e92.src","preCode":"    private static void toServiceInstanceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n        serviceRelation.setTlsMode(metrics.getTlsMode());\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"}],"commitId":"9c486a05ee3ad8947011168e0039f5b48922e4ab","commitMessage":"@@@Support `sideCar.internalErrorCode` in the sources (#5849)\n\n* Support nested sidecar object in the scope.\n\n* Update the changelog.\n\n* Fix comments and docs.","date":"2020-11-17 09:03:48","modifiedFileCount":"19","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-05-07 07:50:03","codes":[{"authorDate":"2021-05-07 07:50:03","commitOrder":8,"curCode":"    private static void toServiceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n        serviceRelation.setTlsMode(metrics.getTlsMode());\n        serviceRelation.getSideCar().setInternalErrorCode(metrics.getInternalErrorCode());\n        serviceRelation.getTcpInfo().setReceivedBytes(metrics.getTcp().getReceivedBytes());\n        serviceRelation.getTcpInfo().setSentBytes(metrics.getTcp().getSentBytes());\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2021-05-07 07:50:03","endLine":179,"groupId":"1256","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"toServiceRelation","params":"(ServiceMeshMetric.Buildermetrics@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9a/f5fac86ef51e6bbedcd58ab5069d68051114b0.src","preCode":"    private static void toServiceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n        serviceRelation.setTlsMode(metrics.getTlsMode());\n        serviceRelation.getSideCar().setInternalErrorCode(metrics.getInternalErrorCode());\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2021-05-07 07:50:03","commitOrder":8,"curCode":"    private static void toServiceInstanceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n        serviceRelation.setTlsMode(metrics.getTlsMode());\n        serviceRelation.getSideCar().setInternalErrorCode(metrics.getInternalErrorCode());\n        serviceRelation.getTcpInfo().setReceivedBytes(metrics.getTcp().getReceivedBytes());\n        serviceRelation.getTcpInfo().setSentBytes(metrics.getTcp().getSentBytes());\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2021-05-07 07:50:03","endLine":221,"groupId":"4405","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"toServiceInstanceRelation","params":"(ServiceMeshMetric.Buildermetrics@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9a/f5fac86ef51e6bbedcd58ab5069d68051114b0.src","preCode":"    private static void toServiceInstanceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n        serviceRelation.setTlsMode(metrics.getTlsMode());\n        serviceRelation.getSideCar().setInternalErrorCode(metrics.getInternalErrorCode());\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"3b15f8d132284c6eec6bb670341910b640cbc65d","commitMessage":"@@@feature: Envoy access log receiver supports TCP logs (#6727)\n\n","date":"2021-05-07 07:50:03","modifiedFileCount":"17","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-08-19 06:12:05","codes":[{"authorDate":"2021-08-19 06:12:05","commitOrder":9,"curCode":"    private static void toServiceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setHttpResponseStatusCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n        serviceRelation.setTlsMode(metrics.getTlsMode());\n        serviceRelation.getSideCar().setInternalErrorCode(metrics.getInternalErrorCode());\n        serviceRelation.getTcpInfo().setReceivedBytes(metrics.getTcp().getReceivedBytes());\n        serviceRelation.getTcpInfo().setSentBytes(metrics.getTcp().getSentBytes());\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2021-08-19 06:12:05","endLine":182,"groupId":"10925","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"toServiceRelation","params":"(ServiceMeshMetric.Buildermetrics@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/77/e1bd7e3e24e3c316572017f6a347778e7d9469.src","preCode":"    private static void toServiceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceRelation serviceRelation = new ServiceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n        serviceRelation.setTlsMode(metrics.getTlsMode());\n        serviceRelation.getSideCar().setInternalErrorCode(metrics.getInternalErrorCode());\n        serviceRelation.getTcpInfo().setReceivedBytes(metrics.getTcp().getReceivedBytes());\n        serviceRelation.getTcpInfo().setSentBytes(metrics.getTcp().getSentBytes());\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2021-08-19 06:12:05","commitOrder":9,"curCode":"    private static void toServiceInstanceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setHttpResponseStatusCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n        serviceRelation.setTlsMode(metrics.getTlsMode());\n        serviceRelation.getSideCar().setInternalErrorCode(metrics.getInternalErrorCode());\n        serviceRelation.getTcpInfo().setReceivedBytes(metrics.getTcp().getReceivedBytes());\n        serviceRelation.getTcpInfo().setSentBytes(metrics.getTcp().getSentBytes());\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","date":"2021-08-19 06:12:05","endLine":226,"groupId":"10925","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"toServiceInstanceRelation","params":"(ServiceMeshMetric.Buildermetrics@longminuteTimeBucket)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/77/e1bd7e3e24e3c316572017f6a347778e7d9469.src","preCode":"    private static void toServiceInstanceRelation(ServiceMeshMetric.Builder metrics, long minuteTimeBucket) {\n        ServiceInstanceRelation serviceRelation = new ServiceInstanceRelation();\n        serviceRelation.setTimeBucket(minuteTimeBucket);\n        serviceRelation.setSourceServiceInstanceName(metrics.getSourceServiceInstance());\n        serviceRelation.setSourceServiceName(metrics.getSourceServiceName());\n        serviceRelation.setSourceServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceInstanceName(metrics.getDestServiceInstance());\n        serviceRelation.setDestServiceNodeType(NodeType.Normal);\n        serviceRelation.setDestServiceName(metrics.getDestServiceName());\n        serviceRelation.setEndpoint(metrics.getEndpoint());\n        serviceRelation.setLatency(metrics.getLatency());\n        serviceRelation.setStatus(metrics.getStatus());\n        serviceRelation.setType(protocol2Type(metrics.getProtocol()));\n        serviceRelation.setResponseCode(metrics.getResponseCode());\n        serviceRelation.setDetectPoint(detectPointMapping(metrics.getDetectPoint()));\n        serviceRelation.setComponentId(protocol2Component(metrics.getProtocol()));\n        serviceRelation.setTlsMode(metrics.getTlsMode());\n        serviceRelation.getSideCar().setInternalErrorCode(metrics.getInternalErrorCode());\n        serviceRelation.getTcpInfo().setReceivedBytes(metrics.getTcp().getReceivedBytes());\n        serviceRelation.getTcpInfo().setSentBytes(metrics.getTcp().getSentBytes());\n\n        SOURCE_RECEIVER.receive(serviceRelation);\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/TelemetryDataDispatcher.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"ad0042f6f5a529f646d0286e7cef4d7ca8d81ef9","commitMessage":"@@@Add missing property set for new field `httpResponseStatusCode` (#7486)\n\nFollow up https://github.com/apache/skywalking/pull/7271","date":"2021-08-19 06:12:05","modifiedFileCount":"1","status":"M","submitter":"kezhenxu94"}]
