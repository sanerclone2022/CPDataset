[{"authorTime":"2021-02-06 21:22:58","codes":[{"authorDate":"2021-02-06 21:22:58","commitOrder":1,"curCode":"        public Map<String, Object> entity2Storage(SegmentRecord storageData) {\n            storageData.statement = Strings.join(new String[] {\n                storageData.endpointName,\n                storageData.traceId\n            }, \" - \");\n            Map<String, Object> map = new HashMap<>();\n            map.put(SEGMENT_ID, storageData.getSegmentId());\n            map.put(TRACE_ID, storageData.getTraceId());\n            map.put(TopN.STATEMENT, storageData.getStatement());\n            map.put(SERVICE_ID, storageData.getServiceId());\n            map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n            map.put(ENDPOINT_NAME, storageData.getEndpointName());\n            map.put(ENDPOINT_ID, storageData.getEndpointId());\n            map.put(START_TIME, storageData.getStartTime());\n            map.put(END_TIME, storageData.getEndTime());\n            map.put(LATENCY, storageData.getLatency());\n            map.put(IS_ERROR, storageData.getIsError());\n            map.put(TIME_BUCKET, storageData.getTimeBucket());\n            if (CollectionUtils.isEmpty(storageData.getDataBinary())) {\n                map.put(DATA_BINARY, Const.EMPTY_STRING);\n            } else {\n                map.put(DATA_BINARY, new String(Base64.getEncoder().encode(storageData.getDataBinary())));\n            }\n            map.put(VERSION, storageData.getVersion());\n            map.put(TAGS, storageData.getTags());\n            return map;\n        }\n","date":"2021-02-06 21:22:58","endLine":158,"groupId":"4381","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"entity2Storage","params":"(SegmentRecordstorageData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/06/03f94375d502adadbd260b089ca8515fa3ae1f.src","preCode":"        public Map<String, Object> entity2Storage(SegmentRecord storageData) {\n            storageData.statement = Strings.join(new String[] {\n                storageData.endpointName,\n                storageData.traceId\n            }, \" - \");\n            Map<String, Object> map = new HashMap<>();\n            map.put(SEGMENT_ID, storageData.getSegmentId());\n            map.put(TRACE_ID, storageData.getTraceId());\n            map.put(TopN.STATEMENT, storageData.getStatement());\n            map.put(SERVICE_ID, storageData.getServiceId());\n            map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n            map.put(ENDPOINT_NAME, storageData.getEndpointName());\n            map.put(ENDPOINT_ID, storageData.getEndpointId());\n            map.put(START_TIME, storageData.getStartTime());\n            map.put(END_TIME, storageData.getEndTime());\n            map.put(LATENCY, storageData.getLatency());\n            map.put(IS_ERROR, storageData.getIsError());\n            map.put(TIME_BUCKET, storageData.getTimeBucket());\n            if (CollectionUtils.isEmpty(storageData.getDataBinary())) {\n                map.put(DATA_BINARY, Const.EMPTY_STRING);\n            } else {\n                map.put(DATA_BINARY, new String(Base64.getEncoder().encode(storageData.getDataBinary())));\n            }\n            map.put(VERSION, storageData.getVersion());\n            map.put(TAGS, storageData.getTags());\n            return map;\n        }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"},{"authorDate":"2021-02-06 21:22:58","commitOrder":1,"curCode":"    public Map<String, Object> entity2Storage(final Record record) {\n        LogRecord storageData = (LogRecord) record;\n        Map<String, Object> map = new HashMap<>();\n        map.put(UNIQUE_ID, storageData.getUniqueId());\n        map.put(SERVICE_ID, storageData.getServiceId());\n        map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n        map.put(ENDPOINT_ID, storageData.getEndpointId());\n        map.put(ENDPOINT_NAME, storageData.getEndpointName());\n        map.put(TRACE_ID, storageData.getTraceId());\n        map.put(TRACE_SEGMENT_ID, storageData.getTraceSegmentId());\n        map.put(SPAN_ID, storageData.getSpanId());\n        map.put(TIME_BUCKET, storageData.getTimeBucket());\n        map.put(CONTENT_TYPE, storageData.getContentType());\n        map.put(CONTENT, storageData.getContent());\n        map.put(TIMESTAMP, storageData.getTimestamp());\n        if (CollectionUtils.isEmpty(storageData.getTagsRawData())) {\n            map.put(TAGS_RAW_DATA, Const.EMPTY_STRING);\n        } else {\n            map.put(TAGS_RAW_DATA, new String(Base64.getEncoder().encode(storageData.getTagsRawData())));\n        }\n        analysisSearchTag(storageData.getTags(), map);\n        return map;\n    }\n","date":"2021-02-06 21:22:58","endLine":99,"groupId":"1760","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"entity2Storage","params":"(finalRecordrecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/72/1dd9544d003ce3deb9ac281bf25b5e235e0263.src","preCode":"    public Map<String, Object> entity2Storage(final Record record) {\n        LogRecord storageData = (LogRecord) record;\n        Map<String, Object> map = new HashMap<>();\n        map.put(UNIQUE_ID, storageData.getUniqueId());\n        map.put(SERVICE_ID, storageData.getServiceId());\n        map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n        map.put(ENDPOINT_ID, storageData.getEndpointId());\n        map.put(ENDPOINT_NAME, storageData.getEndpointName());\n        map.put(TRACE_ID, storageData.getTraceId());\n        map.put(TRACE_SEGMENT_ID, storageData.getTraceSegmentId());\n        map.put(SPAN_ID, storageData.getSpanId());\n        map.put(TIME_BUCKET, storageData.getTimeBucket());\n        map.put(CONTENT_TYPE, storageData.getContentType());\n        map.put(CONTENT, storageData.getContent());\n        map.put(TIMESTAMP, storageData.getTimestamp());\n        if (CollectionUtils.isEmpty(storageData.getTagsRawData())) {\n            map.put(TAGS_RAW_DATA, Const.EMPTY_STRING);\n        } else {\n            map.put(TAGS_RAW_DATA, new String(Base64.getEncoder().encode(storageData.getTagsRawData())));\n        }\n        analysisSearchTag(storageData.getTags(), map);\n        return map;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2LogRecordBuilder.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"}],"commitId":"fc23dabf37a85cfc27482dbaf25b0109114f6ef7","commitMessage":"@@@Support multiple implementations of StorageBuilder in different storage implementations - stage 1. (#6334)\n\n","date":"2021-02-06 21:22:58","modifiedFileCount":"74","status":"B","submitter":"?? Wu Sheng"},{"authorTime":"2021-02-06 21:22:58","codes":[{"authorDate":"2021-08-10 00:05:06","commitOrder":2,"curCode":"        public Map<String, Object> entity2Storage(SegmentRecord storageData) {\n            Map<String, Object> map = new HashMap<>();\n            map.put(SEGMENT_ID, storageData.getSegmentId());\n            map.put(TRACE_ID, storageData.getTraceId());\n            map.put(SERVICE_ID, storageData.getServiceId());\n            map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n            map.put(ENDPOINT_NAME, storageData.getEndpointName());\n            map.put(ENDPOINT_ID, storageData.getEndpointId());\n            map.put(START_TIME, storageData.getStartTime());\n            map.put(LATENCY, storageData.getLatency());\n            map.put(IS_ERROR, storageData.getIsError());\n            map.put(TIME_BUCKET, storageData.getTimeBucket());\n            if (CollectionUtils.isEmpty(storageData.getDataBinary())) {\n                map.put(DATA_BINARY, Const.EMPTY_STRING);\n            } else {\n                map.put(DATA_BINARY, new String(Base64.getEncoder().encode(storageData.getDataBinary())));\n            }\n            map.put(TAGS, storageData.getTags());\n            return map;\n        }\n","date":"2021-08-10 00:05:06","endLine":135,"groupId":"4381","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"entity2Storage","params":"(SegmentRecordstorageData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/7a/f441927fbbcd1e54d844d5a8a6c6a57cc1d280.src","preCode":"        public Map<String, Object> entity2Storage(SegmentRecord storageData) {\n            storageData.statement = Strings.join(new String[] {\n                storageData.endpointName,\n                storageData.traceId\n            }, \" - \");\n            Map<String, Object> map = new HashMap<>();\n            map.put(SEGMENT_ID, storageData.getSegmentId());\n            map.put(TRACE_ID, storageData.getTraceId());\n            map.put(TopN.STATEMENT, storageData.getStatement());\n            map.put(SERVICE_ID, storageData.getServiceId());\n            map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n            map.put(ENDPOINT_NAME, storageData.getEndpointName());\n            map.put(ENDPOINT_ID, storageData.getEndpointId());\n            map.put(START_TIME, storageData.getStartTime());\n            map.put(END_TIME, storageData.getEndTime());\n            map.put(LATENCY, storageData.getLatency());\n            map.put(IS_ERROR, storageData.getIsError());\n            map.put(TIME_BUCKET, storageData.getTimeBucket());\n            if (CollectionUtils.isEmpty(storageData.getDataBinary())) {\n                map.put(DATA_BINARY, Const.EMPTY_STRING);\n            } else {\n                map.put(DATA_BINARY, new String(Base64.getEncoder().encode(storageData.getDataBinary())));\n            }\n            map.put(VERSION, storageData.getVersion());\n            map.put(TAGS, storageData.getTags());\n            return map;\n        }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2021-02-06 21:22:58","commitOrder":2,"curCode":"    public Map<String, Object> entity2Storage(final Record record) {\n        LogRecord storageData = (LogRecord) record;\n        Map<String, Object> map = new HashMap<>();\n        map.put(UNIQUE_ID, storageData.getUniqueId());\n        map.put(SERVICE_ID, storageData.getServiceId());\n        map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n        map.put(ENDPOINT_ID, storageData.getEndpointId());\n        map.put(ENDPOINT_NAME, storageData.getEndpointName());\n        map.put(TRACE_ID, storageData.getTraceId());\n        map.put(TRACE_SEGMENT_ID, storageData.getTraceSegmentId());\n        map.put(SPAN_ID, storageData.getSpanId());\n        map.put(TIME_BUCKET, storageData.getTimeBucket());\n        map.put(CONTENT_TYPE, storageData.getContentType());\n        map.put(CONTENT, storageData.getContent());\n        map.put(TIMESTAMP, storageData.getTimestamp());\n        if (CollectionUtils.isEmpty(storageData.getTagsRawData())) {\n            map.put(TAGS_RAW_DATA, Const.EMPTY_STRING);\n        } else {\n            map.put(TAGS_RAW_DATA, new String(Base64.getEncoder().encode(storageData.getTagsRawData())));\n        }\n        analysisSearchTag(storageData.getTags(), map);\n        return map;\n    }\n","date":"2021-02-06 21:22:58","endLine":99,"groupId":"1760","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"entity2Storage","params":"(finalRecordrecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/72/1dd9544d003ce3deb9ac281bf25b5e235e0263.src","preCode":"    public Map<String, Object> entity2Storage(final Record record) {\n        LogRecord storageData = (LogRecord) record;\n        Map<String, Object> map = new HashMap<>();\n        map.put(UNIQUE_ID, storageData.getUniqueId());\n        map.put(SERVICE_ID, storageData.getServiceId());\n        map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n        map.put(ENDPOINT_ID, storageData.getEndpointId());\n        map.put(ENDPOINT_NAME, storageData.getEndpointName());\n        map.put(TRACE_ID, storageData.getTraceId());\n        map.put(TRACE_SEGMENT_ID, storageData.getTraceSegmentId());\n        map.put(SPAN_ID, storageData.getSpanId());\n        map.put(TIME_BUCKET, storageData.getTimeBucket());\n        map.put(CONTENT_TYPE, storageData.getContentType());\n        map.put(CONTENT, storageData.getContent());\n        map.put(TIMESTAMP, storageData.getTimestamp());\n        if (CollectionUtils.isEmpty(storageData.getTagsRawData())) {\n            map.put(TAGS_RAW_DATA, Const.EMPTY_STRING);\n        } else {\n            map.put(TAGS_RAW_DATA, new String(Base64.getEncoder().encode(storageData.getTagsRawData())));\n        }\n        analysisSearchTag(storageData.getTags(), map);\n        return map;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2LogRecordBuilder.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"cc66254729f74d739ff2a85c72ded44fdaeb1cd4","commitMessage":"@@@Remove statement.  version.  and endtime from segment entity. (#7427)\n\n","date":"2021-08-10 00:05:06","modifiedFileCount":"11","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-02-06 21:22:58","codes":[{"authorDate":"2021-08-11 16:27:10","commitOrder":3,"curCode":"        public Map<String, Object> entity2Storage(SegmentRecord storageData) {\n            Map<String, Object> map = new HashMap<>();\n            map.put(SEGMENT_ID, storageData.getSegmentId());\n            map.put(TRACE_ID, storageData.getTraceId());\n            map.put(SERVICE_ID, storageData.getServiceId());\n            map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n            map.put(ENDPOINT_ID, storageData.getEndpointId());\n            map.put(START_TIME, storageData.getStartTime());\n            map.put(LATENCY, storageData.getLatency());\n            map.put(IS_ERROR, storageData.getIsError());\n            map.put(TIME_BUCKET, storageData.getTimeBucket());\n            if (CollectionUtils.isEmpty(storageData.getDataBinary())) {\n                map.put(DATA_BINARY, Const.EMPTY_STRING);\n            } else {\n                map.put(DATA_BINARY, new String(Base64.getEncoder().encode(storageData.getDataBinary())));\n            }\n            map.put(TAGS, storageData.getTags());\n            return map;\n        }\n","date":"2021-08-11 16:27:10","endLine":130,"groupId":"4309","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"entity2Storage","params":"(SegmentRecordstorageData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/21/92ce229e5c368ee60069c7f7ee89927f603e27.src","preCode":"        public Map<String, Object> entity2Storage(SegmentRecord storageData) {\n            Map<String, Object> map = new HashMap<>();\n            map.put(SEGMENT_ID, storageData.getSegmentId());\n            map.put(TRACE_ID, storageData.getTraceId());\n            map.put(SERVICE_ID, storageData.getServiceId());\n            map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n            map.put(ENDPOINT_NAME, storageData.getEndpointName());\n            map.put(ENDPOINT_ID, storageData.getEndpointId());\n            map.put(START_TIME, storageData.getStartTime());\n            map.put(LATENCY, storageData.getLatency());\n            map.put(IS_ERROR, storageData.getIsError());\n            map.put(TIME_BUCKET, storageData.getTimeBucket());\n            if (CollectionUtils.isEmpty(storageData.getDataBinary())) {\n                map.put(DATA_BINARY, Const.EMPTY_STRING);\n            } else {\n                map.put(DATA_BINARY, new String(Base64.getEncoder().encode(storageData.getDataBinary())));\n            }\n            map.put(TAGS, storageData.getTags());\n            return map;\n        }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2021-02-06 21:22:58","commitOrder":3,"curCode":"    public Map<String, Object> entity2Storage(final Record record) {\n        LogRecord storageData = (LogRecord) record;\n        Map<String, Object> map = new HashMap<>();\n        map.put(UNIQUE_ID, storageData.getUniqueId());\n        map.put(SERVICE_ID, storageData.getServiceId());\n        map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n        map.put(ENDPOINT_ID, storageData.getEndpointId());\n        map.put(ENDPOINT_NAME, storageData.getEndpointName());\n        map.put(TRACE_ID, storageData.getTraceId());\n        map.put(TRACE_SEGMENT_ID, storageData.getTraceSegmentId());\n        map.put(SPAN_ID, storageData.getSpanId());\n        map.put(TIME_BUCKET, storageData.getTimeBucket());\n        map.put(CONTENT_TYPE, storageData.getContentType());\n        map.put(CONTENT, storageData.getContent());\n        map.put(TIMESTAMP, storageData.getTimestamp());\n        if (CollectionUtils.isEmpty(storageData.getTagsRawData())) {\n            map.put(TAGS_RAW_DATA, Const.EMPTY_STRING);\n        } else {\n            map.put(TAGS_RAW_DATA, new String(Base64.getEncoder().encode(storageData.getTagsRawData())));\n        }\n        analysisSearchTag(storageData.getTags(), map);\n        return map;\n    }\n","date":"2021-02-06 21:22:58","endLine":99,"groupId":"1760","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"entity2Storage","params":"(finalRecordrecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/72/1dd9544d003ce3deb9ac281bf25b5e235e0263.src","preCode":"    public Map<String, Object> entity2Storage(final Record record) {\n        LogRecord storageData = (LogRecord) record;\n        Map<String, Object> map = new HashMap<>();\n        map.put(UNIQUE_ID, storageData.getUniqueId());\n        map.put(SERVICE_ID, storageData.getServiceId());\n        map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n        map.put(ENDPOINT_ID, storageData.getEndpointId());\n        map.put(ENDPOINT_NAME, storageData.getEndpointName());\n        map.put(TRACE_ID, storageData.getTraceId());\n        map.put(TRACE_SEGMENT_ID, storageData.getTraceSegmentId());\n        map.put(SPAN_ID, storageData.getSpanId());\n        map.put(TIME_BUCKET, storageData.getTimeBucket());\n        map.put(CONTENT_TYPE, storageData.getContentType());\n        map.put(CONTENT, storageData.getContent());\n        map.put(TIMESTAMP, storageData.getTimestamp());\n        if (CollectionUtils.isEmpty(storageData.getTagsRawData())) {\n            map.put(TAGS_RAW_DATA, Const.EMPTY_STRING);\n        } else {\n            map.put(TAGS_RAW_DATA, new String(Base64.getEncoder().encode(storageData.getTagsRawData())));\n        }\n        analysisSearchTag(storageData.getTags(), map);\n        return map;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2LogRecordBuilder.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"de6cae34295f1558a92430323accc617202c754d","commitMessage":"@@@[Break Change] Remove endpoint name in the trace query condition. (#7438)\n\n* [Break Change] Remove endpoint name in the trace query condition.\n\n* Fix a local UT error(MacOS only)","date":"2021-08-11 16:27:10","modifiedFileCount":"19","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-08-12 09:44:19","codes":[{"authorDate":"2021-08-11 16:27:10","commitOrder":4,"curCode":"        public Map<String, Object> entity2Storage(SegmentRecord storageData) {\n            Map<String, Object> map = new HashMap<>();\n            map.put(SEGMENT_ID, storageData.getSegmentId());\n            map.put(TRACE_ID, storageData.getTraceId());\n            map.put(SERVICE_ID, storageData.getServiceId());\n            map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n            map.put(ENDPOINT_ID, storageData.getEndpointId());\n            map.put(START_TIME, storageData.getStartTime());\n            map.put(LATENCY, storageData.getLatency());\n            map.put(IS_ERROR, storageData.getIsError());\n            map.put(TIME_BUCKET, storageData.getTimeBucket());\n            if (CollectionUtils.isEmpty(storageData.getDataBinary())) {\n                map.put(DATA_BINARY, Const.EMPTY_STRING);\n            } else {\n                map.put(DATA_BINARY, new String(Base64.getEncoder().encode(storageData.getDataBinary())));\n            }\n            map.put(TAGS, storageData.getTags());\n            return map;\n        }\n","date":"2021-08-11 16:27:10","endLine":130,"groupId":"10319","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"entity2Storage","params":"(SegmentRecordstorageData)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/21/92ce229e5c368ee60069c7f7ee89927f603e27.src","preCode":"        public Map<String, Object> entity2Storage(SegmentRecord storageData) {\n            Map<String, Object> map = new HashMap<>();\n            map.put(SEGMENT_ID, storageData.getSegmentId());\n            map.put(TRACE_ID, storageData.getTraceId());\n            map.put(SERVICE_ID, storageData.getServiceId());\n            map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n            map.put(ENDPOINT_ID, storageData.getEndpointId());\n            map.put(START_TIME, storageData.getStartTime());\n            map.put(LATENCY, storageData.getLatency());\n            map.put(IS_ERROR, storageData.getIsError());\n            map.put(TIME_BUCKET, storageData.getTimeBucket());\n            if (CollectionUtils.isEmpty(storageData.getDataBinary())) {\n                map.put(DATA_BINARY, Const.EMPTY_STRING);\n            } else {\n                map.put(DATA_BINARY, new String(Base64.getEncoder().encode(storageData.getDataBinary())));\n            }\n            map.put(TAGS, storageData.getTags());\n            return map;\n        }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/manual/segment/SegmentRecord.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"},{"authorDate":"2021-08-12 09:44:19","commitOrder":4,"curCode":"    public Map<String, Object> entity2Storage(final Record record) {\n        LogRecord storageData = (LogRecord) record;\n        Map<String, Object> map = new HashMap<>();\n        map.put(UNIQUE_ID, storageData.getUniqueId());\n        map.put(SERVICE_ID, storageData.getServiceId());\n        map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n        map.put(ENDPOINT_ID, storageData.getEndpointId());\n        map.put(TRACE_ID, storageData.getTraceId());\n        map.put(TRACE_SEGMENT_ID, storageData.getTraceSegmentId());\n        map.put(SPAN_ID, storageData.getSpanId());\n        map.put(TIME_BUCKET, storageData.getTimeBucket());\n        map.put(CONTENT_TYPE, storageData.getContentType());\n        map.put(CONTENT, storageData.getContent());\n        map.put(TIMESTAMP, storageData.getTimestamp());\n        if (CollectionUtils.isEmpty(storageData.getTagsRawData())) {\n            map.put(TAGS_RAW_DATA, Const.EMPTY_STRING);\n        } else {\n            map.put(TAGS_RAW_DATA, new String(Base64.getEncoder().encode(storageData.getTagsRawData())));\n        }\n        analysisSearchTag(storageData.getTags(), map);\n        return map;\n    }\n","date":"2021-08-12 09:44:19","endLine":96,"groupId":"10319","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"entity2Storage","params":"(finalRecordrecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a8/3b420f86d7b3d4802a7a6ddd6a147d090c4029.src","preCode":"    public Map<String, Object> entity2Storage(final Record record) {\n        LogRecord storageData = (LogRecord) record;\n        Map<String, Object> map = new HashMap<>();\n        map.put(UNIQUE_ID, storageData.getUniqueId());\n        map.put(SERVICE_ID, storageData.getServiceId());\n        map.put(SERVICE_INSTANCE_ID, storageData.getServiceInstanceId());\n        map.put(ENDPOINT_ID, storageData.getEndpointId());\n        map.put(ENDPOINT_NAME, storageData.getEndpointName());\n        map.put(TRACE_ID, storageData.getTraceId());\n        map.put(TRACE_SEGMENT_ID, storageData.getTraceSegmentId());\n        map.put(SPAN_ID, storageData.getSpanId());\n        map.put(TIME_BUCKET, storageData.getTimeBucket());\n        map.put(CONTENT_TYPE, storageData.getContentType());\n        map.put(CONTENT, storageData.getContent());\n        map.put(TIMESTAMP, storageData.getTimestamp());\n        if (CollectionUtils.isEmpty(storageData.getTagsRawData())) {\n            map.put(TAGS_RAW_DATA, Const.EMPTY_STRING);\n        } else {\n            map.put(TAGS_RAW_DATA, new String(Base64.getEncoder().encode(storageData.getTagsRawData())));\n        }\n        analysisSearchTag(storageData.getTags(), map);\n        return map;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2LogRecordBuilder.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"6a241aed758e65b54dc6225b42fc852aa878f8c7","commitMessage":"@@@[Break Change] Remove endpoint name in backend log and browser log query (#7444)\n\n* Remove page path in the browser log query condition.\n\n* Remove endpoint name in the backend log query condition.\n","date":"2021-08-12 09:44:19","modifiedFileCount":"28","status":"M","submitter":"?? Wu Sheng"}]
