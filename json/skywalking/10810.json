[{"authorTime":"2018-11-22 20:50:27","codes":[{"authorDate":"2018-11-28 22:59:02","commitOrder":3,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new MySQLRegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2018-11-28 22:59:02","endLine":134,"groupId":"1827","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3f/b67fd59df4fb35482b9fdcff95a34accc69d32.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new MySQLRegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"},{"authorDate":"2018-11-22 20:50:27","commitOrder":3,"curCode":"    public void start() throws ModuleStartException {\n        try {\n            nameSpace.setNameSpace(config.getNameSpace());\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2018-11-22 20:50:27","endLine":101,"groupId":"433","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/10/99d739de258da2c1888e1b0ac13621d156b4c4.src","preCode":"    public void start() throws ModuleStartException {\n        try {\n            nameSpace.setNameSpace(config.getNameSpace());\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"NB"}],"commitId":"215eab74288328e13f2c0fecf222168632685ff9","commitMessage":"@@@Mysql style storage implementation (#1964)\n\nAlso fixed several bugs in this merge.","date":"2018-11-28 22:59:02","modifiedFileCount":"33","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2018-12-06 21:03:00","codes":[{"authorDate":"2018-11-28 22:59:02","commitOrder":4,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new MySQLRegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2018-11-28 22:59:02","endLine":134,"groupId":"1827","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3f/b67fd59df4fb35482b9fdcff95a34accc69d32.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new MySQLRegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"N"},{"authorDate":"2018-12-06 21:03:00","commitOrder":4,"curCode":"    public void start() throws ModuleStartException {\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2018-12-06 21:03:00","endLine":97,"groupId":"433","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e0/1606e2b696ba4fabe771fddd8cd704e9fd8ac7.src","preCode":"    public void start() throws ModuleStartException {\n        try {\n            nameSpace.setNameSpace(config.getNameSpace());\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"27c475f74c9e5ea4e1d6052934686de68743fd1a","commitMessage":"@@@1. Make storage and cluster using same name space. (#2014)\n\n2. Zookeeper implementation of the cluster module using name space to support using same zookeeper cluster by different OAP clusters.","date":"2018-12-06 21:03:00","modifiedFileCount":"6","status":"M","submitter":"??? pengys"},{"authorTime":"2018-12-06 21:03:00","codes":[{"authorDate":"2019-01-20 16:41:06","commitOrder":5,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2019-01-20 16:41:06","endLine":108,"groupId":"1827","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fd/a7d311f3aa113666768e606fa6553d0202e03e.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new MySQLRegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2018-12-06 21:03:00","commitOrder":5,"curCode":"    public void start() throws ModuleStartException {\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2018-12-06 21:03:00","endLine":97,"groupId":"433","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e0/1606e2b696ba4fabe771fddd8cd704e9fd8ac7.src","preCode":"    public void start() throws ModuleStartException {\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"}],"commitId":"33f5cc19b54d0988304a3ed9e4477cdc3314cd6d","commitMessage":"@@@Fixed the inventory register lock invalid bug. (#2184)\n\n* #2183\n\nMerge commit into master.\n\n* Make the h2 register lock same as mysql.\n","date":"2019-01-20 16:41:06","modifiedFileCount":"17","status":"M","submitter":"??? pengys"},{"authorTime":"2019-04-11 20:08:51","codes":[{"authorDate":"2019-01-20 16:41:06","commitOrder":6,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2019-01-20 16:41:06","endLine":108,"groupId":"1827","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fd/a7d311f3aa113666768e606fa6553d0202e03e.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"},{"authorDate":"2019-04-11 20:08:51","commitOrder":6,"curCode":"    public void start() throws ModuleStartException {\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException | IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2019-04-11 20:08:51","endLine":105,"groupId":"433","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/41/9ed56ca57794cf4f1f5eff6936af9e7df3511e.src","preCode":"    public void start() throws ModuleStartException {\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"73e8853fa51fc12a94fc701dad131d5c101e6081","commitMessage":"@@@Provide elasticsearch template operation method. (#2474)\n\n* Provide elasticsearch template operation method.\n\n* Fixed compile failure issue.\n","date":"2019-04-11 20:08:51","modifiedFileCount":"14","status":"M","submitter":"??? pengys"},{"authorTime":"2019-06-03 18:46:42","codes":[{"authorDate":"2019-01-20 16:41:06","commitOrder":7,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2019-01-20 16:41:06","endLine":108,"groupId":"1827","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fd/a7d311f3aa113666768e606fa6553d0202e03e.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"},{"authorDate":"2019-06-03 18:46:42","commitOrder":7,"curCode":"    public void start() throws ModuleStartException {\n        overrideCoreModuleTTLConfig();\n\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException | IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2019-06-03 18:46:42","endLine":106,"groupId":"433","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6b/90910160a3289ba0971d6eaae93e22b1e92ed2.src","preCode":"    public void start() throws ModuleStartException {\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException | IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"5036e8334301322d49973005cd98513c17b0f28f","commitMessage":"@@@Good news of an important feature: time series implementation in Elasticsearch storage. (#2808)\n\n* The new feature of Elasticsearch storage with the time series implementation.\n\n* Time bucket util improve.\n\n* Fixed some Gramma error.\n\n* Update ttl.md\n\nPolish English a little.\n\n* Update ttl.md\n\nAdd more explicit description of TTL\n\n* Update ttl.md\n\n* Update StorageModuleElasticsearchConfig.java\n\nSet otherMetricsDataTTL = 0 as default.  make user more clear.\n\n* Rename the timeSeriesAble to capableOfTimeSeries\n\n* Fixed a test case failure.\n","date":"2019-06-03 18:46:42","modifiedFileCount":"46","status":"M","submitter":"??? pengys"},{"authorTime":"2019-07-19 14:22:01","codes":[{"authorDate":"2019-01-20 16:41:06","commitOrder":8,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2019-01-20 16:41:06","endLine":108,"groupId":"1827","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fd/a7d311f3aa113666768e606fa6553d0202e03e.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"},{"authorDate":"2019-07-19 14:22:01","commitOrder":8,"curCode":"    public void start() throws ModuleStartException {\n        overrideCoreModuleTTLConfig();\n\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber(), config.getIndexRefreshInterval());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException | IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2019-07-19 14:22:01","endLine":106,"groupId":"2583","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/58/e83835e3a0cb53142343db7a01de3a5ad00f82.src","preCode":"    public void start() throws ModuleStartException {\n        overrideCoreModuleTTLConfig();\n\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException | IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"ed507b78ef8274e0f9167664ce9a707f07ca1f4e","commitMessage":"@@@Dirty-Read in concurrency (#3117)\n\n* Fixed the problem of dirty reading of the storage implementation of elasticsearch.\n\n* Fixed a mistake.\n","date":"2019-07-19 14:22:01","modifiedFileCount":"11","status":"M","submitter":"??? pengys"},{"authorTime":"2019-09-02 11:15:43","codes":[{"authorDate":"2019-01-20 16:41:06","commitOrder":9,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2019-01-20 16:41:06","endLine":108,"groupId":"1827","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fd/a7d311f3aa113666768e606fa6553d0202e03e.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"},{"authorDate":"2019-09-02 11:15:43","commitOrder":9,"curCode":"    public void start() throws ModuleStartException {\n        overrideCoreModuleTTLConfig();\n\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber(), config.getIndexRefreshInterval());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2019-09-02 11:15:43","endLine":143,"groupId":"2583","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d0/766b58c64bdeeaea9220c15f28cd73a23fd357.src","preCode":"    public void start() throws ModuleStartException {\n        overrideCoreModuleTTLConfig();\n\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber(), config.getIndexRefreshInterval());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException | IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"dbbf22a177d4bcc9cda9069b6d7054b4ad8b06bd","commitMessage":"@@@support es https ssl config. (#3370)\n\n* support es https ssl config.\n\n* update\n\n* update docs.\n\n* refactoring var name.\n\n* fix\n\n* update docs.\n\n* add config in es section.\n\n* fix logical.\n","date":"2019-09-02 11:15:43","modifiedFileCount":"5","status":"M","submitter":"Jared Tan"},{"authorTime":"2019-11-21 22:30:59","codes":[{"authorDate":"2019-01-20 16:41:06","commitOrder":10,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2019-01-20 16:41:06","endLine":108,"groupId":"1827","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fd/a7d311f3aa113666768e606fa6553d0202e03e.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"},{"authorDate":"2019-11-21 22:30:59","commitOrder":10,"curCode":"    public void start() throws ModuleStartException {\n        overrideCoreModuleTTLConfig();\n\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config);\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2019-11-21 22:30:59","endLine":143,"groupId":"5670","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/00/8ef8639012c207518b49fe299e1b6ff6880356.src","preCode":"    public void start() throws ModuleStartException {\n        overrideCoreModuleTTLConfig();\n\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config.getIndexShardsNumber(), config.getIndexReplicasNumber(), config.getIndexRefreshInterval());\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"d581f2294f27bff00eec64299200215004449197","commitMessage":"@@@Support custom elasticsearch settings in index level. (#3913)\n\n","date":"2019-11-21 22:30:59","modifiedFileCount":"4","status":"M","submitter":"Jared Tan"},{"authorTime":"2019-11-21 22:30:59","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":11,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-02-11 17:10:49","endLine":145,"groupId":"1827","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/09/d302ef5bbaf90d951447c0ad3e15a8168b0dea.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2019-11-21 22:30:59","commitOrder":11,"curCode":"    public void start() throws ModuleStartException {\n        overrideCoreModuleTTLConfig();\n\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config);\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2019-11-21 22:30:59","endLine":143,"groupId":"5670","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/00/8ef8639012c207518b49fe299e1b6ff6880356.src","preCode":"    public void start() throws ModuleStartException {\n        overrideCoreModuleTTLConfig();\n\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config);\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"}],"commitId":"5b255ba3e3b50e0e0196b28cdca21dcd5c9c3da2","commitMessage":"@@@Set up more strict code styles and fix existing issues (#4337)\n\nMotivation:\n\nReview code styles with some bots automatically.\n\nModifications:\n\nSet up ReviewDog in GitHub Action to review code style.\n\nAdd more check rules to checkstyle plugin.\n\nResult:\n\nObvious code styles can be reviewed and commented automatically.","date":"2020-02-11 17:10:49","modifiedFileCount":"2429","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":12,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-02-11 17:10:49","endLine":145,"groupId":"1827","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/09/d302ef5bbaf90d951447c0ad3e15a8168b0dea.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"N"},{"authorDate":"2020-04-10 11:03:24","commitOrder":12,"curCode":"    public void start() throws ModuleStartException {\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config);\n            installer.install(elasticSearchClient);\n\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":188,"groupId":"5869","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6d/6023f90b9631e07d9838190d8f0b1ec72e7479.src","preCode":"    public void start() throws ModuleStartException {\n        overrideCoreModuleTTLConfig();\n\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config);\n            installer.install(elasticSearchClient);\n\n            RegisterLockInstaller lockInstaller = new RegisterLockInstaller(elasticSearchClient);\n            lockInstaller.install();\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-05-08 21:21:03","codes":[{"authorDate":"2020-05-08 21:21:03","commitOrder":13,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(mysqlClient, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-05-08 21:21:03","endLine":131,"groupId":"1220","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c0/47807da0f1828fe4260c6f934a93ff904435c9.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2020-05-08 21:21:03","commitOrder":13,"curCode":"    public void start() throws ModuleStartException {\n        try {\n            elasticSearchClient.connect();\n            StorageEsInstaller installer = new StorageEsInstaller(elasticSearchClient, getManager(), config);\n\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-05-08 21:21:03","endLine":188,"groupId":"4204","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e5/f51fb4fc87f341dc5bbfa1452ff6a8aad15d2f.src","preCode":"    public void start() throws ModuleStartException {\n        try {\n            elasticSearchClient.connect();\n\n            StorageEsInstaller installer = new StorageEsInstaller(getManager(), config);\n            installer.install(elasticSearchClient);\n\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"}],"commitId":"7edcd5aa33cec034047871ac1348b5b858b630f0","commitMessage":"@@@Change the model installation into the reactive module (#4761)\n\n","date":"2020-05-08 21:21:03","modifiedFileCount":"31","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-07-19 23:37:13","codes":[{"authorDate":"2020-05-08 21:21:03","commitOrder":14,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(mysqlClient, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-05-08 21:21:03","endLine":131,"groupId":"1220","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c0/47807da0f1828fe4260c6f934a93ff904435c9.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(mysqlClient, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"N"},{"authorDate":"2020-07-19 23:37:13","commitOrder":14,"curCode":"    public void start() throws ModuleStartException {\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\"storage_elasticsearch\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        elasticSearchClient.registerChecker(healthChecker);\n        try {\n            elasticSearchClient.connect();\n            StorageEsInstaller installer = new StorageEsInstaller(elasticSearchClient, getManager(), config);\n\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-07-19 23:37:13","endLine":199,"groupId":"4204","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/f17f722d2bb9000d61b8d7463ca5d5f2b8dd1c.src","preCode":"    public void start() throws ModuleStartException {\n        try {\n            elasticSearchClient.connect();\n            StorageEsInstaller installer = new StorageEsInstaller(elasticSearchClient, getManager(), config);\n\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"3fdfdf3b83a1d6d80066c321eb3f05568657aba7","commitMessage":"@@@Storage elasticsearch health check (#5099)\n\n","date":"2020-07-19 23:37:13","modifiedFileCount":"8","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2020-07-19 23:37:13","codes":[{"authorDate":"2020-08-11 07:24:40","commitOrder":15,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-08-11 07:24:40","endLine":159,"groupId":"1220","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/76/5c252be446f56321065c456b62b6eb1b755b13.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(mysqlClient, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2020-07-19 23:37:13","commitOrder":15,"curCode":"    public void start() throws ModuleStartException {\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\"storage_elasticsearch\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        elasticSearchClient.registerChecker(healthChecker);\n        try {\n            elasticSearchClient.connect();\n            StorageEsInstaller installer = new StorageEsInstaller(elasticSearchClient, getManager(), config);\n\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-07-19 23:37:13","endLine":199,"groupId":"4204","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/f17f722d2bb9000d61b8d7463ca5d5f2b8dd1c.src","preCode":"    public void start() throws ModuleStartException {\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\"storage_elasticsearch\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        elasticSearchClient.registerChecker(healthChecker);\n        try {\n            elasticSearchClient.connect();\n            StorageEsInstaller installer = new StorageEsInstaller(elasticSearchClient, getManager(), config);\n\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"7f7e96b088d3cb0a19f8ddeafe5ede9764ec2eda","commitMessage":"@@@[IMPORTANT] Query traces with tags as condition (#5270)\n\n","date":"2020-08-11 07:24:40","modifiedFileCount":"39","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-07-19 23:37:13","codes":[{"authorDate":"2021-01-14 09:49:11","commitOrder":16,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-01-14 09:49:11","endLine":176,"groupId":"1220","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/22/5a0da4c5ca3eae40bf6007fc1bfca03723073f.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2020-07-19 23:37:13","commitOrder":16,"curCode":"    public void start() throws ModuleStartException {\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\"storage_elasticsearch\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        elasticSearchClient.registerChecker(healthChecker);\n        try {\n            elasticSearchClient.connect();\n            StorageEsInstaller installer = new StorageEsInstaller(elasticSearchClient, getManager(), config);\n\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-07-19 23:37:13","endLine":199,"groupId":"4204","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/f17f722d2bb9000d61b8d7463ca5d5f2b8dd1c.src","preCode":"    public void start() throws ModuleStartException {\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\"storage_elasticsearch\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        elasticSearchClient.registerChecker(healthChecker);\n        try {\n            elasticSearchClient.connect();\n            StorageEsInstaller installer = new StorageEsInstaller(elasticSearchClient, getManager(), config);\n\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"15452025c65dd6934bd9d6c8a930961b0f960594","commitMessage":"@@@Log collecting and query implementation (#6120)\n\n","date":"2021-01-14 09:49:11","modifiedFileCount":"51","status":"M","submitter":"zhang-wei"},{"authorTime":"2020-07-19 23:37:13","codes":[{"authorDate":"2021-04-25 17:22:43","commitOrder":17,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableAlarmTags = configService.getSearchableAlarmTags().split(Const.COMMA).length;\n        if (numOfSearchableAlarmTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableAlarmTags[\" + numOfSearchableAlarmTags\n                    + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                    + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                    + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-04-25 17:22:43","endLine":194,"groupId":"1220","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/23/3431ad240f33303ea7e88a622e0774e0547369.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2020-07-19 23:37:13","commitOrder":17,"curCode":"    public void start() throws ModuleStartException {\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\"storage_elasticsearch\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        elasticSearchClient.registerChecker(healthChecker);\n        try {\n            elasticSearchClient.connect();\n            StorageEsInstaller installer = new StorageEsInstaller(elasticSearchClient, getManager(), config);\n\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-07-19 23:37:13","endLine":199,"groupId":"4204","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/f17f722d2bb9000d61b8d7463ca5d5f2b8dd1c.src","preCode":"    public void start() throws ModuleStartException {\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\"storage_elasticsearch\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        elasticSearchClient.registerChecker(healthChecker);\n        try {\n            elasticSearchClient.connect();\n            StorageEsInstaller installer = new StorageEsInstaller(elasticSearchClient, getManager(), config);\n\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"N"}],"commitId":"7a533313676579da1321c0177c10fc237a052cbe","commitMessage":"@@@Support alarm tags (#6820)\n\n","date":"2021-04-25 17:22:43","modifiedFileCount":"42","status":"M","submitter":"liqiangz"},{"authorTime":"2021-09-06 15:21:35","codes":[{"authorDate":"2021-04-25 17:22:43","commitOrder":18,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableAlarmTags = configService.getSearchableAlarmTags().split(Const.COMMA).length;\n        if (numOfSearchableAlarmTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableAlarmTags[\" + numOfSearchableAlarmTags\n                    + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                    + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                    + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-04-25 17:22:43","endLine":194,"groupId":"10810","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/23/3431ad240f33303ea7e88a622e0774e0547369.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableAlarmTags = configService.getSearchableAlarmTags().split(Const.COMMA).length;\n        if (numOfSearchableAlarmTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableAlarmTags[\" + numOfSearchableAlarmTags\n                    + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                    + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                    + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"N"},{"authorDate":"2021-09-06 15:21:35","commitOrder":18,"curCode":"    public void start() throws ModuleStartException {\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_elasticsearch\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        elasticSearchClient.registerChecker(healthChecker);\n        try {\n            elasticSearchClient.connect();\n            StorageEsInstaller installer = new StorageEsInstaller(elasticSearchClient, getManager(), config);\n\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-09-06 15:21:35","endLine":214,"groupId":"10810","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/88/b863598747fc41607b929303c7cd64b90d434a.src","preCode":"    public void start() throws ModuleStartException {\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_elasticsearch\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        elasticSearchClient.registerChecker(healthChecker);\n        try {\n            elasticSearchClient.connect();\n            StorageEsInstaller installer = new StorageEsInstaller(elasticSearchClient, getManager(), config);\n\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException | IOException | KeyStoreException | NoSuchAlgorithmException | KeyManagementException | CertificateException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"26b81a2e5991ecdd2bde0f7071264cb80bb235cf","commitMessage":"@@@Rebuilt ElasticSearch client on top of their REST API (#7634)\n\n","date":"2021-09-06 15:21:35","modifiedFileCount":"60","status":"M","submitter":"kezhenxu94"}]
