[{"authorTime":"2019-07-17 14:40:45","codes":[{"authorDate":"2019-07-17 14:40:45","commitOrder":1,"curCode":"    public void unregisterRemoteOfCluster() throws Exception {\n        final String serviceName = \"unregister_remote_cluster\";\n        ModuleProvider providerA = createProvider(serviceName);\n        ModuleProvider providerB = createProvider(serviceName);\n\n        Address addressA = new Address(\"127.0.0.4\", 1000, true);\n        Address addressB = new Address(\"127.0.0.5\", 1000, true);\n\n        RemoteInstance instanceA = new RemoteInstance(addressA);\n        RemoteInstance instanceB = new RemoteInstance(addressB);\n\n        getClusterRegister(providerA).registerRemote(instanceA);\n        getClusterRegister(providerB).registerRemote(instanceB);\n\n        List<RemoteInstance> remoteInstancesOfA = queryRemoteNodes(providerA, 2);\n        validateServiceInstance(addressA, addressB, remoteInstancesOfA);\n\n        List<RemoteInstance> remoteInstancesOfB = queryRemoteNodes(providerB, 2);\n        validateServiceInstance(addressB, addressA, remoteInstancesOfB);\n\n        \r\n        EtcdClient client = Whitebox.getInternalState(providerA, \"client\");\n        client.close();\n\n        \r\n        remoteInstancesOfB = queryRemoteNodes(providerB, 1, 120);\n        assertEquals(1, remoteInstancesOfB.size());\n        Address address = remoteInstancesOfB.get(0).getAddress();\n        assertEquals(address, addressB);\n        assertTrue(addressB.isSelf());\n    }\n","date":"2019-07-17 14:40:45","endLine":163,"groupId":"5059","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unregisterRemoteOfCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ce/b442e7df5d635f32f3d7fe48c65d40351d0156.src","preCode":"    public void unregisterRemoteOfCluster() throws Exception {\n        final String serviceName = \"unregister_remote_cluster\";\n        ModuleProvider providerA = createProvider(serviceName);\n        ModuleProvider providerB = createProvider(serviceName);\n\n        Address addressA = new Address(\"127.0.0.4\", 1000, true);\n        Address addressB = new Address(\"127.0.0.5\", 1000, true);\n\n        RemoteInstance instanceA = new RemoteInstance(addressA);\n        RemoteInstance instanceB = new RemoteInstance(addressB);\n\n        getClusterRegister(providerA).registerRemote(instanceA);\n        getClusterRegister(providerB).registerRemote(instanceB);\n\n        List<RemoteInstance> remoteInstancesOfA = queryRemoteNodes(providerA, 2);\n        validateServiceInstance(addressA, addressB, remoteInstancesOfA);\n\n        List<RemoteInstance> remoteInstancesOfB = queryRemoteNodes(providerB, 2);\n        validateServiceInstance(addressB, addressA, remoteInstancesOfB);\n\n        \r\n        EtcdClient client = Whitebox.getInternalState(providerA, \"client\");\n        client.close();\n\n        \r\n        remoteInstancesOfB = queryRemoteNodes(providerB, 1, 120);\n        assertEquals(1, remoteInstancesOfB.size());\n        Address address = remoteInstancesOfB.get(0).getAddress();\n        assertEquals(address, addressB);\n        assertTrue(addressB.isSelf());\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-etcd-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/etcd/ITClusterModuleEtcdProviderFunctionalTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"},{"authorDate":"2019-07-17 14:40:45","commitOrder":1,"curCode":"    public void registerRemoteOfCluster() throws Exception {\n        final String namespace = \"register_remote_cluster\";\n        ModuleProvider providerA = createProvider(namespace);\n        ModuleProvider providerB = createProvider(namespace);\n\n        Address addressA = new Address(\"127.0.0.4\", 1000, true);\n        Address addressB = new Address(\"127.0.0.5\", 1000, true);\n\n        RemoteInstance instanceA = new RemoteInstance(addressA);\n        RemoteInstance instanceB = new RemoteInstance(addressB);\n\n        getClusterRegister(providerA).registerRemote(instanceA);\n        getClusterRegister(providerB).registerRemote(instanceB);\n\n        List<RemoteInstance> remoteInstancesOfA = queryRemoteNodes(providerA, 2);\n        validateServiceInstance(addressA, addressB, remoteInstancesOfA);\n\n        List<RemoteInstance> remoteInstancesOfB = queryRemoteNodes(providerB, 2);\n        validateServiceInstance(addressB, addressA, remoteInstancesOfB);\n    }\n","date":"2019-07-17 14:40:45","endLine":127,"groupId":"5059","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"registerRemoteOfCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a3/df25ea5c11242bd4a8f78f23e10a440012ee9a.src","preCode":"    public void registerRemoteOfCluster() throws Exception {\n        final String namespace = \"register_remote_cluster\";\n        ModuleProvider providerA = createProvider(namespace);\n        ModuleProvider providerB = createProvider(namespace);\n\n        Address addressA = new Address(\"127.0.0.4\", 1000, true);\n        Address addressB = new Address(\"127.0.0.5\", 1000, true);\n\n        RemoteInstance instanceA = new RemoteInstance(addressA);\n        RemoteInstance instanceB = new RemoteInstance(addressB);\n\n        getClusterRegister(providerA).registerRemote(instanceA);\n        getClusterRegister(providerB).registerRemote(instanceB);\n\n        List<RemoteInstance> remoteInstancesOfA = queryRemoteNodes(providerA, 2);\n        validateServiceInstance(addressA, addressB, remoteInstancesOfA);\n\n        List<RemoteInstance> remoteInstancesOfB = queryRemoteNodes(providerB, 2);\n        validateServiceInstance(addressB, addressA, remoteInstancesOfB);\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ITClusterModuleZookeeperProviderFunctionalTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"}],"commitId":"ed99079d20fa321f0dedd764ffa7538416aa6b0e","commitMessage":"@@@Fix service cluster plugin bug (#3074)\n\n* fix 3069\n","date":"2019-07-17 14:40:45","modifiedFileCount":"7","status":"B","submitter":"zhangwei"},{"authorTime":"2019-07-17 14:40:45","codes":[{"authorDate":"2021-07-05 11:23:11","commitOrder":2,"curCode":"    public void unregisterRemoteOfCluster() throws Exception {\n        final String serviceName = \"unregister_remote_cluster\";\n        ModuleProvider providerA = createProvider(serviceName);\n        ModuleProvider providerB = createProvider(serviceName);\n\n        Address addressA = new Address(\"127.0.0.4\", 1000, true);\n        Address addressB = new Address(\"127.0.0.5\", 1000, true);\n\n        RemoteInstance instanceA = new RemoteInstance(addressA);\n        RemoteInstance instanceB = new RemoteInstance(addressB);\n\n        getClusterRegister(providerA).registerRemote(instanceA);\n        getClusterRegister(providerB).registerRemote(instanceB);\n\n        List<RemoteInstance> remoteInstancesOfA = queryRemoteNodes(providerA, 2);\n        validateServiceInstance(addressA, addressB, remoteInstancesOfA);\n\n        List<RemoteInstance> remoteInstancesOfB = queryRemoteNodes(providerB, 2);\n        validateServiceInstance(addressB, addressA, remoteInstancesOfB);\n\n        \r\n        Client client = Whitebox.getInternalState(getClusterRegister(providerA), \"client\");\n        client.close();\n\n        \r\n        remoteInstancesOfB = queryRemoteNodes(providerB, 1, 120);\n        assertEquals(1, remoteInstancesOfB.size());\n        Address address = remoteInstancesOfB.get(0).getAddress();\n        assertEquals(address, addressB);\n        assertTrue(addressB.isSelf());\n    }\n","date":"2021-07-05 11:23:11","endLine":175,"groupId":"10703","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unregisterRemoteOfCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ad/c841b31474fee0af2fe5a3d689d0e34eb3c892.src","preCode":"    public void unregisterRemoteOfCluster() throws Exception {\n        final String serviceName = \"unregister_remote_cluster\";\n        ModuleProvider providerA = createProvider(serviceName);\n        ModuleProvider providerB = createProvider(serviceName);\n\n        Address addressA = new Address(\"127.0.0.4\", 1000, true);\n        Address addressB = new Address(\"127.0.0.5\", 1000, true);\n\n        RemoteInstance instanceA = new RemoteInstance(addressA);\n        RemoteInstance instanceB = new RemoteInstance(addressB);\n\n        getClusterRegister(providerA).registerRemote(instanceA);\n        getClusterRegister(providerB).registerRemote(instanceB);\n\n        List<RemoteInstance> remoteInstancesOfA = queryRemoteNodes(providerA, 2);\n        validateServiceInstance(addressA, addressB, remoteInstancesOfA);\n\n        List<RemoteInstance> remoteInstancesOfB = queryRemoteNodes(providerB, 2);\n        validateServiceInstance(addressB, addressA, remoteInstancesOfB);\n\n        \r\n        EtcdClient client = Whitebox.getInternalState(providerA, \"client\");\n        client.close();\n\n        \r\n        remoteInstancesOfB = queryRemoteNodes(providerB, 1, 120);\n        assertEquals(1, remoteInstancesOfB.size());\n        Address address = remoteInstancesOfB.get(0).getAddress();\n        assertEquals(address, addressB);\n        assertTrue(addressB.isSelf());\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-etcd-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/etcd/ITClusterModuleEtcdProviderFunctionalTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2019-07-17 14:40:45","commitOrder":2,"curCode":"    public void registerRemoteOfCluster() throws Exception {\n        final String namespace = \"register_remote_cluster\";\n        ModuleProvider providerA = createProvider(namespace);\n        ModuleProvider providerB = createProvider(namespace);\n\n        Address addressA = new Address(\"127.0.0.4\", 1000, true);\n        Address addressB = new Address(\"127.0.0.5\", 1000, true);\n\n        RemoteInstance instanceA = new RemoteInstance(addressA);\n        RemoteInstance instanceB = new RemoteInstance(addressB);\n\n        getClusterRegister(providerA).registerRemote(instanceA);\n        getClusterRegister(providerB).registerRemote(instanceB);\n\n        List<RemoteInstance> remoteInstancesOfA = queryRemoteNodes(providerA, 2);\n        validateServiceInstance(addressA, addressB, remoteInstancesOfA);\n\n        List<RemoteInstance> remoteInstancesOfB = queryRemoteNodes(providerB, 2);\n        validateServiceInstance(addressB, addressA, remoteInstancesOfB);\n    }\n","date":"2019-07-17 14:40:45","endLine":127,"groupId":"10703","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"registerRemoteOfCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a3/df25ea5c11242bd4a8f78f23e10a440012ee9a.src","preCode":"    public void registerRemoteOfCluster() throws Exception {\n        final String namespace = \"register_remote_cluster\";\n        ModuleProvider providerA = createProvider(namespace);\n        ModuleProvider providerB = createProvider(namespace);\n\n        Address addressA = new Address(\"127.0.0.4\", 1000, true);\n        Address addressB = new Address(\"127.0.0.5\", 1000, true);\n\n        RemoteInstance instanceA = new RemoteInstance(addressA);\n        RemoteInstance instanceB = new RemoteInstance(addressB);\n\n        getClusterRegister(providerA).registerRemote(instanceA);\n        getClusterRegister(providerB).registerRemote(instanceB);\n\n        List<RemoteInstance> remoteInstancesOfA = queryRemoteNodes(providerA, 2);\n        validateServiceInstance(addressA, addressB, remoteInstancesOfA);\n\n        List<RemoteInstance> remoteInstancesOfB = queryRemoteNodes(providerB, 2);\n        validateServiceInstance(addressB, addressA, remoteInstancesOfB);\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-zookeeper-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/zookeeper/ITClusterModuleZookeeperProviderFunctionalTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"N"}],"commitId":"5dd56a5ca45c1bc423af71dc0829aed1221621ac","commitMessage":"@@@Upgrade etcd cluster coordinator and dynamic configuration to v3.x (#7215)\n\n","date":"2021-07-05 11:23:11","modifiedFileCount":"10","status":"M","submitter":"Daming"}]
