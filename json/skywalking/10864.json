[{"authorTime":"2020-05-09 21:39:19","codes":[{"authorDate":"2020-05-09 21:39:19","commitOrder":1,"curCode":"    public MetricsValues readMetricsValues(MetricsCondition condition, Duration duration) throws IOException {\n        if (MetricsType.UNKNOWN.equals(typeOfMetrics(condition.getName()))) {\n            final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n            MetricsValues values = new MetricsValues();\n            pointOfTimes.forEach(pointOfTime -> {\n                String id = pointOfTime.id(condition.getEntity().buildId());\n                final KVInt kvInt = new KVInt();\n                kvInt.setId(id);\n                kvInt.setValue(0);\n                values.getValues().addKVInt(kvInt);\n            });\n            return values;\n        }\n        return getMetricsQueryService().readMetricsValues(condition, duration);\n    }\n","date":"2020-05-09 21:39:19","endLine":129,"groupId":"2919","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"readMetricsValues","params":"(MetricsConditioncondition@Durationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/257d13dbab3a6562167d88b929912c88b57d62.src","preCode":"    public MetricsValues readMetricsValues(MetricsCondition condition, Duration duration) throws IOException {\n        if (MetricsType.UNKNOWN.equals(typeOfMetrics(condition.getName()))) {\n            final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n            MetricsValues values = new MetricsValues();\n            pointOfTimes.forEach(pointOfTime -> {\n                String id = pointOfTime.id(condition.getEntity().buildId());\n                final KVInt kvInt = new KVInt();\n                kvInt.setId(id);\n                kvInt.setValue(0);\n                values.getValues().addKVInt(kvInt);\n            });\n            return values;\n        }\n        return getMetricsQueryService().readMetricsValues(condition, duration);\n    }\n","realPath":"oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricsQuery.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"},{"authorDate":"2020-05-09 21:39:19","commitOrder":1,"curCode":"    public List<MetricsValues> readLabeledMetricsValues(MetricsCondition condition,\n                                                        List<String> labels,\n                                                        Duration duration) throws IOException {\n        if (MetricsType.UNKNOWN.equals(typeOfMetrics(condition.getName()))) {\n            final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n\n            List<MetricsValues> labeledValues = new ArrayList<>(labels.size());\n            labels.forEach(label -> {\n                MetricsValues values = new MetricsValues();\n                pointOfTimes.forEach(pointOfTime -> {\n                    String id = pointOfTime.id(condition.getEntity().buildId());\n                    final KVInt kvInt = new KVInt();\n                    kvInt.setId(id);\n                    kvInt.setValue(0);\n                    values.getValues().addKVInt(kvInt);\n                });\n                values.setLabel(label);\n                labeledValues.add(values);\n            });\n            return labeledValues;\n        }\n        return getMetricsQueryService().readLabeledMetricsValues(condition, labels, duration);\n    }\n","date":"2020-05-09 21:39:19","endLine":168,"groupId":"2919","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"readLabeledMetricsValues","params":"(MetricsConditioncondition@List<String>labels@Durationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/257d13dbab3a6562167d88b929912c88b57d62.src","preCode":"    public List<MetricsValues> readLabeledMetricsValues(MetricsCondition condition,\n                                                        List<String> labels,\n                                                        Duration duration) throws IOException {\n        if (MetricsType.UNKNOWN.equals(typeOfMetrics(condition.getName()))) {\n            final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n\n            List<MetricsValues> labeledValues = new ArrayList<>(labels.size());\n            labels.forEach(label -> {\n                MetricsValues values = new MetricsValues();\n                pointOfTimes.forEach(pointOfTime -> {\n                    String id = pointOfTime.id(condition.getEntity().buildId());\n                    final KVInt kvInt = new KVInt();\n                    kvInt.setId(id);\n                    kvInt.setValue(0);\n                    values.getValues().addKVInt(kvInt);\n                });\n                values.setLabel(label);\n                labeledValues.add(values);\n            });\n            return labeledValues;\n        }\n        return getMetricsQueryService().readLabeledMetricsValues(condition, labels, duration);\n    }\n","realPath":"oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricsQuery.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"}],"commitId":"28806998608b9d8d2eef6478e2c2724968553135","commitMessage":"@@@Make OAL controlled by the receivers. (#4767)\n\n* Split the official_analysis.oal into different parts\n\n* Add Envoy OAL define.\n\n* Fix license.","date":"2020-05-09 21:39:19","modifiedFileCount":"10","status":"B","submitter":"?? Wu Sheng"},{"authorTime":"2020-06-12 12:07:45","codes":[{"authorDate":"2020-06-12 12:07:45","commitOrder":2,"curCode":"    public MetricsValues readMetricsValues(MetricsCondition condition, Duration duration) throws IOException {\n        if (MetricsType.UNKNOWN.equals(typeOfMetrics(condition.getName())) || !condition.getEntity().isValid()) {\n            final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n            MetricsValues values = new MetricsValues();\n            pointOfTimes.forEach(pointOfTime -> {\n                String id = pointOfTime.id(\n                    condition.getEntity().isValid() ? condition.getEntity().buildId() : \"ILLEGAL_ENTITY\"\n                );\n                final KVInt kvInt = new KVInt();\n                kvInt.setId(id);\n                kvInt.setValue(0);\n                values.getValues().addKVInt(kvInt);\n            });\n            return values;\n        }\n        return getMetricsQueryService().readMetricsValues(condition, duration);\n    }\n","date":"2020-06-12 12:07:45","endLine":131,"groupId":"10864","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"readMetricsValues","params":"(MetricsConditioncondition@Durationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/af/72077242ffb22fba0d4c1a03276540c63f26e3.src","preCode":"    public MetricsValues readMetricsValues(MetricsCondition condition, Duration duration) throws IOException {\n        if (MetricsType.UNKNOWN.equals(typeOfMetrics(condition.getName()))) {\n            final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n            MetricsValues values = new MetricsValues();\n            pointOfTimes.forEach(pointOfTime -> {\n                String id = pointOfTime.id(condition.getEntity().buildId());\n                final KVInt kvInt = new KVInt();\n                kvInt.setId(id);\n                kvInt.setValue(0);\n                values.getValues().addKVInt(kvInt);\n            });\n            return values;\n        }\n        return getMetricsQueryService().readMetricsValues(condition, duration);\n    }\n","realPath":"oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricsQuery.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2020-06-12 12:07:45","commitOrder":2,"curCode":"    public List<MetricsValues> readLabeledMetricsValues(MetricsCondition condition,\n                                                        List<String> labels,\n                                                        Duration duration) throws IOException {\n        if (MetricsType.UNKNOWN.equals(typeOfMetrics(condition.getName())) || !condition.getEntity().isValid()) {\n            final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n\n            List<MetricsValues> labeledValues = new ArrayList<>(labels.size());\n            labels.forEach(label -> {\n                MetricsValues values = new MetricsValues();\n                pointOfTimes.forEach(pointOfTime -> {\n                    String id = pointOfTime.id(\n                        condition.getEntity().isValid() ? condition.getEntity().buildId() : \"ILLEGAL_ENTITY\"\n                    );\n                    final KVInt kvInt = new KVInt();\n                    kvInt.setId(id);\n                    kvInt.setValue(0);\n                    values.getValues().addKVInt(kvInt);\n                });\n                values.setLabel(label);\n                labeledValues.add(values);\n            });\n            return labeledValues;\n        }\n        return getMetricsQueryService().readLabeledMetricsValues(condition, labels, duration);\n    }\n","date":"2020-06-12 12:07:45","endLine":172,"groupId":"10864","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"readLabeledMetricsValues","params":"(MetricsConditioncondition@List<String>labels@Durationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/af/72077242ffb22fba0d4c1a03276540c63f26e3.src","preCode":"    public List<MetricsValues> readLabeledMetricsValues(MetricsCondition condition,\n                                                        List<String> labels,\n                                                        Duration duration) throws IOException {\n        if (MetricsType.UNKNOWN.equals(typeOfMetrics(condition.getName()))) {\n            final List<PointOfTime> pointOfTimes = duration.assembleDurationPoints();\n\n            List<MetricsValues> labeledValues = new ArrayList<>(labels.size());\n            labels.forEach(label -> {\n                MetricsValues values = new MetricsValues();\n                pointOfTimes.forEach(pointOfTime -> {\n                    String id = pointOfTime.id(condition.getEntity().buildId());\n                    final KVInt kvInt = new KVInt();\n                    kvInt.setId(id);\n                    kvInt.setValue(0);\n                    values.getValues().addKVInt(kvInt);\n                });\n                values.setLabel(label);\n                labeledValues.add(values);\n            });\n            return labeledValues;\n        }\n        return getMetricsQueryService().readLabeledMetricsValues(condition, labels, duration);\n    }\n","realPath":"oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricsQuery.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"b07b395691af92924d1e6c18060fe927ae394e8b","commitMessage":"@@@Fix 4 high priority bugs (#4913)\n\n","date":"2020-06-12 12:07:45","modifiedFileCount":"7","status":"M","submitter":"?? Wu Sheng"}]
