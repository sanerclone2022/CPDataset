[{"authorTime":"2020-03-04 10:17:04","codes":[{"authorDate":"2020-07-20 12:35:35","commitOrder":2,"curCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n        Optional<V1ConfigMap> v1ConfigMap = informer.configMap();\n        for (final String name : keys) {\n            final String value = v1ConfigMap.map(configMap -> configMap.getData().get(name)).orElse(null);\n            if (log.isDebugEnabled()) {\n                log.debug(\"read config: name:{} ,value:{}\", name, value);\n            }\n            if (Objects.nonNull(value)) {\n                configTable.add(new ConfigTable.ConfigItem(name, value));\n            }\n        }\n        return Optional.of(configTable);\n    }\n","date":"2020-07-20 12:35:35","endLine":54,"groupId":"1539","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"readConfig","params":"(Set<String>keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fd/85acfa600ffc81d1f10871e02ac806bcba3ab4.src","preCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n        Optional<V1ConfigMap> v1ConfigMap = informer.configMap();\n        for (final String name : keys) {\n            final String value = v1ConfigMap.map(configMap -> configMap.getData().get(name)).orElse(null);\n            if (log.isDebugEnabled()) {\n                log.debug(\"read config: name:{} ,value:{}\", name, value);\n            }\n            if (Objects.nonNull(value)) {\n                configTable.add(new ConfigTable.ConfigItem(name, value));\n            }\n        }\n        return Optional.of(configTable);\n    }\n","realPath":"oap-server/server-configuration/configuration-k8s-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationWatcherRegister.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"B"},{"authorDate":"2020-03-04 10:17:04","commitOrder":2,"curCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n\n        for (final String name : keys) {\n            final String value = configReader.getProperty(name, null);\n            configTable.add(new ConfigTable.ConfigItem(name, value));\n        }\n\n        return Optional.of(configTable);\n    }\n","date":"2020-03-04 10:17:04","endLine":66,"groupId":"1539","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"readConfig","params":"(Set<String>keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/60/d9319c3b4c832c1dac165b61d4b43e57506e2a.src","preCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n\n        for (final String name : keys) {\n            final String value = configReader.getProperty(name, null);\n            configTable.add(new ConfigTable.ConfigItem(name, value));\n        }\n\n        return Optional.of(configTable);\n    }\n","realPath":"oap-server/server-configuration/configuration-apollo/src/main/java/org/apache/skywalking/oap/server/configuration/apollo/ApolloConfigWatcherRegister.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"NB"}],"commitId":"e0325a44070cf94c73624a2c4c81819bc14ee09d","commitMessage":"@@@Configmap configuration (#4959)\n\n","date":"2020-07-20 12:35:35","modifiedFileCount":"0","status":"M","submitter":"Evan"},{"authorTime":"2020-03-04 10:17:04","codes":[{"authorDate":"2021-05-15 17:38:51","commitOrder":3,"curCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n        Optional<V1ConfigMap> v1ConfigMap = informer.configMap();\n        for (final String name : keys) {\n            final String value = v1ConfigMap.map(V1ConfigMap::getData).map(data -> data.get(name)).orElse(null);\n            if (log.isDebugEnabled()) {\n                log.debug(\"read config: name:{} ,value:{}\", name, value);\n            }\n            if (Objects.nonNull(value)) {\n                configTable.add(new ConfigTable.ConfigItem(name, value));\n            }\n        }\n        return Optional.of(configTable);\n    }\n","date":"2021-05-15 17:38:51","endLine":54,"groupId":"1539","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"readConfig","params":"(Set<String>keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c6/bcdbc1506d969c8a304de86bf79382f247022f.src","preCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n        Optional<V1ConfigMap> v1ConfigMap = informer.configMap();\n        for (final String name : keys) {\n            final String value = v1ConfigMap.map(configMap -> configMap.getData().get(name)).orElse(null);\n            if (log.isDebugEnabled()) {\n                log.debug(\"read config: name:{} ,value:{}\", name, value);\n            }\n            if (Objects.nonNull(value)) {\n                configTable.add(new ConfigTable.ConfigItem(name, value));\n            }\n        }\n        return Optional.of(configTable);\n    }\n","realPath":"oap-server/server-configuration/configuration-k8s-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationWatcherRegister.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2020-03-04 10:17:04","commitOrder":3,"curCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n\n        for (final String name : keys) {\n            final String value = configReader.getProperty(name, null);\n            configTable.add(new ConfigTable.ConfigItem(name, value));\n        }\n\n        return Optional.of(configTable);\n    }\n","date":"2020-03-04 10:17:04","endLine":66,"groupId":"1539","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"readConfig","params":"(Set<String>keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/60/d9319c3b4c832c1dac165b61d4b43e57506e2a.src","preCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n\n        for (final String name : keys) {\n            final String value = configReader.getProperty(name, null);\n            configTable.add(new ConfigTable.ConfigItem(name, value));\n        }\n\n        return Optional.of(configTable);\n    }\n","realPath":"oap-server/server-configuration/configuration-apollo/src/main/java/org/apache/skywalking/oap/server/configuration/apollo/ApolloConfigWatcherRegister.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"}],"commitId":"5e40a0998a7dda8e2e69320c109ffb0a832c872d","commitMessage":"@@@Fix issue 6945 (#6948)\n\n","date":"2021-05-15 17:38:51","modifiedFileCount":"2","status":"M","submitter":"Joe"},{"authorTime":"2020-03-04 10:17:04","codes":[{"authorDate":"2021-07-29 19:55:22","commitOrder":4,"curCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n        Optional<V1ConfigMap> v1ConfigMap = informer.configMap();\n        for (final String name : keys) {\n            final String value = v1ConfigMap.map(V1ConfigMap::getData).map(data -> data.get(name)).orElse(null);\n            if (log.isDebugEnabled()) {\n                log.debug(\"read config: name:{} ,value:{}\", name, value);\n            }\n            configTable.add(new ConfigTable.ConfigItem(name, value));\n        }\n        return Optional.of(configTable);\n    }\n","date":"2021-07-29 19:55:22","endLine":51,"groupId":"1539","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"readConfig","params":"(Set<String>keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f3/ca25c4bc733d19276a1d86e59428dc3a1c63e5.src","preCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n        Optional<V1ConfigMap> v1ConfigMap = informer.configMap();\n        for (final String name : keys) {\n            final String value = v1ConfigMap.map(V1ConfigMap::getData).map(data -> data.get(name)).orElse(null);\n            if (log.isDebugEnabled()) {\n                log.debug(\"read config: name:{} ,value:{}\", name, value);\n            }\n            if (Objects.nonNull(value)) {\n                configTable.add(new ConfigTable.ConfigItem(name, value));\n            }\n        }\n        return Optional.of(configTable);\n    }\n","realPath":"oap-server/server-configuration/configuration-k8s-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationWatcherRegister.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2020-03-04 10:17:04","commitOrder":4,"curCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n\n        for (final String name : keys) {\n            final String value = configReader.getProperty(name, null);\n            configTable.add(new ConfigTable.ConfigItem(name, value));\n        }\n\n        return Optional.of(configTable);\n    }\n","date":"2020-03-04 10:17:04","endLine":66,"groupId":"1539","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"readConfig","params":"(Set<String>keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/60/d9319c3b4c832c1dac165b61d4b43e57506e2a.src","preCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n\n        for (final String name : keys) {\n            final String value = configReader.getProperty(name, null);\n            configTable.add(new ConfigTable.ConfigItem(name, value));\n        }\n\n        return Optional.of(configTable);\n    }\n","realPath":"oap-server/server-configuration/configuration-apollo/src/main/java/org/apache/skywalking/oap/server/configuration/apollo/ApolloConfigWatcherRegister.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"}],"commitId":"1f28d2036a0581d6d891933a9cc1933c3990eea4","commitMessage":"@@@Add logging module to load log configuration dynamically (#7377)\n\n* Add logging module to load log configuration dynamically\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>","date":"2021-07-29 19:55:22","modifiedFileCount":"3","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2020-03-04 10:17:04","codes":[{"authorDate":"2021-08-26 15:30:11","commitOrder":5,"curCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n        Map<String, String> configMapData = informer.configMapData();\n        for (final String name : keys) {\n            final String value = configMapData.get(name);\n            if (log.isDebugEnabled()) {\n                log.debug(\"read config: name:{} ,value:{}\", name, value);\n            }\n            configTable.add(new ConfigTable.ConfigItem(name, value));\n        }\n        return Optional.of(configTable);\n    }\n","date":"2021-08-26 15:30:11","endLine":52,"groupId":"10596","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"readConfig","params":"(Set<String>keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/7f/34e7b6dc23e681a841299f469c6caabc877dd0.src","preCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n        Optional<V1ConfigMap> v1ConfigMap = informer.configMap();\n        for (final String name : keys) {\n            final String value = v1ConfigMap.map(V1ConfigMap::getData).map(data -> data.get(name)).orElse(null);\n            if (log.isDebugEnabled()) {\n                log.debug(\"read config: name:{} ,value:{}\", name, value);\n            }\n            configTable.add(new ConfigTable.ConfigItem(name, value));\n        }\n        return Optional.of(configTable);\n    }\n","realPath":"oap-server/server-configuration/configuration-k8s-configmap/src/main/java/org/apache/skywalking/oap/server/configuration/configmap/ConfigmapConfigurationWatcherRegister.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2020-03-04 10:17:04","commitOrder":5,"curCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n\n        for (final String name : keys) {\n            final String value = configReader.getProperty(name, null);\n            configTable.add(new ConfigTable.ConfigItem(name, value));\n        }\n\n        return Optional.of(configTable);\n    }\n","date":"2020-03-04 10:17:04","endLine":66,"groupId":"10596","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"readConfig","params":"(Set<String>keys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/60/d9319c3b4c832c1dac165b61d4b43e57506e2a.src","preCode":"    public Optional<ConfigTable> readConfig(Set<String> keys) {\n        final ConfigTable configTable = new ConfigTable();\n\n        for (final String name : keys) {\n            final String value = configReader.getProperty(name, null);\n            configTable.add(new ConfigTable.ConfigItem(name, value));\n        }\n\n        return Optional.of(configTable);\n    }\n","realPath":"oap-server/server-configuration/configuration-apollo/src/main/java/org/apache/skywalking/oap/server/configuration/apollo/ApolloConfigWatcherRegister.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"}],"commitId":"be0f57ae2867c4b04791dbd832d39f45d2d1d312","commitMessage":"@@@Support k8s configmap grouped dynamic configurations (#7570)\n\n* Support k8s configmap grouped dynamic configurations\n\n* Support single config read from multiple configmaps","date":"2021-08-26 15:30:11","modifiedFileCount":"3","status":"M","submitter":"wankai123"}]
