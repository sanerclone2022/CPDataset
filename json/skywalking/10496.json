[{"authorTime":"2019-05-10 08:05:37","codes":[{"authorDate":"2019-05-10 08:05:37","commitOrder":2,"curCode":"    public void testNotifyWithEndpointCatalog() {\n        prepareNotify();\n\n        String metricsName = \"endpoint-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inEndpointCatalog(0)).thenReturn(true);\n\n        String endpointInventoryName = \"endpoint-inventory-name\";\n        EndpointInventory endpointInventory = mock(EndpointInventory.class);\n        when(endpointInventory.getName()).thenReturn(endpointInventoryName);\n\n        String serviceInventoryName = \"service-inventory-name\";\n        ServiceInventory serviceInventory = mock(ServiceInventory.class);\n        when(serviceInventory.getName()).thenReturn(serviceInventoryName);\n\n        when(serviceInventoryCache.get(anyInt())).thenReturn(serviceInventory);\n\n        when(endpointInventoryCache.get(anyInt())).thenReturn(endpointInventory);\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof EndpointMetaInAlarm);\n        assertEquals(mockId, metaInAlarm.getId0());\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(endpointInventoryName + \" in \" + serviceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.ENDPOINT, metaInAlarm.getScopeId());\n\n    }\n","date":"2019-05-10 08:05:37","endLine":104,"groupId":"1033","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotifyWithEndpointCatalog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3e/8b34b8bfa3aec3b9549e36aa8a0600aa9aaa23.src","preCode":"    public void testNotifyWithEndpointCatalog() {\n        prepareNotify();\n\n        String metricsName = \"endpoint-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inEndpointCatalog(0)).thenReturn(true);\n\n        String endpointInventoryName = \"endpoint-inventory-name\";\n        EndpointInventory endpointInventory = mock(EndpointInventory.class);\n        when(endpointInventory.getName()).thenReturn(endpointInventoryName);\n\n        String serviceInventoryName = \"service-inventory-name\";\n        ServiceInventory serviceInventory = mock(ServiceInventory.class);\n        when(serviceInventory.getName()).thenReturn(serviceInventoryName);\n\n        when(serviceInventoryCache.get(anyInt())).thenReturn(serviceInventory);\n\n        when(endpointInventoryCache.get(anyInt())).thenReturn(endpointInventory);\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof EndpointMetaInAlarm);\n        assertEquals(mockId, metaInAlarm.getId0());\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(endpointInventoryName + \" in \" + serviceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.ENDPOINT, metaInAlarm.getScopeId());\n\n    }\n","realPath":"oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandlerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"MB"},{"authorDate":"2019-05-10 08:05:37","commitOrder":2,"curCode":"    public void testNotifyWithServiceInstanceCatalog() {\n\n        prepareNotify();\n\n        String metricsName = \"service-instance-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inServiceInstanceCatalog(0)).thenReturn(true);\n\n        ServiceInstanceInventory instanceInventory = mock(ServiceInstanceInventory.class);\n        String instanceInventoryName = \"instance-inventory-name\";\n        when(instanceInventory.getName()).thenReturn(instanceInventoryName);\n\n        when(serviceInstanceInventoryCache.get(anyInt())).thenReturn(instanceInventory);\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof ServiceInstanceMetaInAlarm);\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(mockId, metaInAlarm.getId0());\n        assertEquals(instanceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.SERVICE_INSTANCE, metaInAlarm.getScopeId());\n    }\n","date":"2019-05-10 08:05:37","endLine":134,"groupId":"1034","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotifyWithServiceInstanceCatalog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3e/8b34b8bfa3aec3b9549e36aa8a0600aa9aaa23.src","preCode":"    public void testNotifyWithServiceInstanceCatalog() {\n\n        prepareNotify();\n\n        String metricsName = \"service-instance-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inServiceInstanceCatalog(0)).thenReturn(true);\n\n        ServiceInstanceInventory instanceInventory = mock(ServiceInstanceInventory.class);\n        String instanceInventoryName = \"instance-inventory-name\";\n        when(instanceInventory.getName()).thenReturn(instanceInventoryName);\n\n        when(serviceInstanceInventoryCache.get(anyInt())).thenReturn(instanceInventory);\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof ServiceInstanceMetaInAlarm);\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(mockId, metaInAlarm.getId0());\n        assertEquals(instanceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.SERVICE_INSTANCE, metaInAlarm.getScopeId());\n    }\n","realPath":"oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandlerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"MB"}],"commitId":"ed78dabe8b142be3d546d349046768135f0a752a","commitMessage":"@@@Rename metric and indicator to metrics. (#2643)\n\n* Rename metric to metrics.\n\n* Fixed test case execute failure issues.\n","date":"2019-05-10 08:05:37","modifiedFileCount":"102","status":"M","submitter":"??? pengys"},{"authorTime":"2019-10-23 00:35:04","codes":[{"authorDate":"2019-10-23 00:35:04","commitOrder":3,"curCode":"    public void testNotifyWithEndpointCatalog() {\n        prepareNotify();\n\n        String metricsName = \"endpoint-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inEndpointCatalog(0)).thenReturn(true);\n\n        String endpointInventoryName = \"endpoint-inventory-name\";\n        EndpointInventory endpointInventory = mock(EndpointInventory.class);\n        when(endpointInventory.getName()).thenReturn(endpointInventoryName);\n\n        String serviceInventoryName = \"service-inventory-name\";\n        ServiceInventory serviceInventory = mock(ServiceInventory.class);\n        when(serviceInventory.getName()).thenReturn(serviceInventoryName);\n\n        when(serviceInventoryCache.get(anyInt())).thenReturn(serviceInventory);\n\n        when(endpointInventoryCache.get(anyInt())).thenReturn(endpointInventory);\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof EndpointMetaInAlarm);\n        assertEquals(mockId, metaInAlarm.getId0());\n        assertEquals(DefaultScopeDefine.ENDPOINT_CATALOG_NAME, metaInAlarm.getScope());\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(endpointInventoryName + \" in \" + serviceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.ENDPOINT, metaInAlarm.getScopeId());\n\n    }\n","date":"2019-10-23 00:35:04","endLine":105,"groupId":"1033","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotifyWithEndpointCatalog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e3/6c201f74606b56a5784160d0c20f55e658177d.src","preCode":"    public void testNotifyWithEndpointCatalog() {\n        prepareNotify();\n\n        String metricsName = \"endpoint-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inEndpointCatalog(0)).thenReturn(true);\n\n        String endpointInventoryName = \"endpoint-inventory-name\";\n        EndpointInventory endpointInventory = mock(EndpointInventory.class);\n        when(endpointInventory.getName()).thenReturn(endpointInventoryName);\n\n        String serviceInventoryName = \"service-inventory-name\";\n        ServiceInventory serviceInventory = mock(ServiceInventory.class);\n        when(serviceInventory.getName()).thenReturn(serviceInventoryName);\n\n        when(serviceInventoryCache.get(anyInt())).thenReturn(serviceInventory);\n\n        when(endpointInventoryCache.get(anyInt())).thenReturn(endpointInventory);\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof EndpointMetaInAlarm);\n        assertEquals(mockId, metaInAlarm.getId0());\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(endpointInventoryName + \" in \" + serviceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.ENDPOINT, metaInAlarm.getScopeId());\n\n    }\n","realPath":"oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandlerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2019-10-23 00:35:04","commitOrder":3,"curCode":"    public void testNotifyWithServiceInstanceCatalog() {\n\n        prepareNotify();\n\n        String metricsName = \"service-instance-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inServiceInstanceCatalog(0)).thenReturn(true);\n\n        ServiceInstanceInventory instanceInventory = mock(ServiceInstanceInventory.class);\n        String instanceInventoryName = \"instance-inventory-name\";\n        when(instanceInventory.getName()).thenReturn(instanceInventoryName);\n\n        when(serviceInstanceInventoryCache.get(anyInt())).thenReturn(instanceInventory);\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof ServiceInstanceMetaInAlarm);\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(mockId, metaInAlarm.getId0());\n        assertEquals(DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME, metaInAlarm.getScope());\n        assertEquals(instanceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.SERVICE_INSTANCE, metaInAlarm.getScopeId());\n    }\n","date":"2019-10-23 00:35:04","endLine":136,"groupId":"1034","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotifyWithServiceInstanceCatalog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e3/6c201f74606b56a5784160d0c20f55e658177d.src","preCode":"    public void testNotifyWithServiceInstanceCatalog() {\n\n        prepareNotify();\n\n        String metricsName = \"service-instance-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inServiceInstanceCatalog(0)).thenReturn(true);\n\n        ServiceInstanceInventory instanceInventory = mock(ServiceInstanceInventory.class);\n        String instanceInventoryName = \"instance-inventory-name\";\n        when(instanceInventory.getName()).thenReturn(instanceInventoryName);\n\n        when(serviceInstanceInventoryCache.get(anyInt())).thenReturn(instanceInventory);\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof ServiceInstanceMetaInAlarm);\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(mockId, metaInAlarm.getId0());\n        assertEquals(instanceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.SERVICE_INSTANCE, metaInAlarm.getScopeId());\n    }\n","realPath":"oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandlerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"2f3d009e635d9ea8356e701c51e0069b8c875fc8","commitMessage":"@@@Makes the scope of alarm message more semantic. (#3680)\n\n* Makes the scope of alarm information more semantic.\n\n* update md.\n\n* update md.\n\n* add ruleName in AlarmMsg.\n\n* update md.\n\n* update test case.\n\n* fix coveralls.\n\n* fix coveralls.\n\n* fix ci.\n","date":"2019-10-23 00:35:04","modifiedFileCount":"10","status":"M","submitter":"Jared Tan"},{"authorTime":"2020-03-28 22:51:41","codes":[{"authorDate":"2020-03-28 22:51:41","commitOrder":4,"curCode":"    public void testNotifyWithEndpointCatalog() {\n        prepareNotify();\n\n        String metricsName = \"endpoint-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inEndpointCatalog(0)).thenReturn(true);\n\n        String endpointInventoryName = \"endpoint-inventory-name\";\n        EndpointTraffic endpointTraffic = mock(EndpointTraffic.class);\n        when(endpointTraffic.getName()).thenReturn(endpointInventoryName);\n\n        String serviceInventoryName = \"service-inventory-name\";\n        ServiceInventory serviceInventory = mock(ServiceInventory.class);\n        when(serviceInventory.getName()).thenReturn(serviceInventoryName);\n\n        when(serviceInventoryCache.get(anyInt())).thenReturn(serviceInventory);\n        when(metadata.getId()).thenReturn(EndpointTraffic.buildId(1, endpointInventoryName, DetectPoint.SERVER));\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof EndpointMetaInAlarm);\n        assertEquals(\"1_ZW5kcG9pbnQtaW52ZW50b3J5LW5hbWU=_0\", metaInAlarm.getId0());\n        assertEquals(DefaultScopeDefine.ENDPOINT_CATALOG_NAME, metaInAlarm.getScope());\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(endpointInventoryName + \" in \" + serviceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.ENDPOINT, metaInAlarm.getScopeId());\n\n    }\n","date":"2020-03-28 22:51:41","endLine":121,"groupId":"380","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotifyWithEndpointCatalog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/61/10683afa921378c0a46f0515f658c27131490c.src","preCode":"    public void testNotifyWithEndpointCatalog() {\n        prepareNotify();\n\n        String metricsName = \"endpoint-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inEndpointCatalog(0)).thenReturn(true);\n\n        String endpointInventoryName = \"endpoint-inventory-name\";\n        EndpointInventory endpointInventory = mock(EndpointInventory.class);\n        when(endpointInventory.getName()).thenReturn(endpointInventoryName);\n\n        String serviceInventoryName = \"service-inventory-name\";\n        ServiceInventory serviceInventory = mock(ServiceInventory.class);\n        when(serviceInventory.getName()).thenReturn(serviceInventoryName);\n\n        when(serviceInventoryCache.get(anyInt())).thenReturn(serviceInventory);\n\n        when(endpointInventoryCache.get(anyInt())).thenReturn(endpointInventory);\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof EndpointMetaInAlarm);\n        assertEquals(mockId, metaInAlarm.getId0());\n        assertEquals(DefaultScopeDefine.ENDPOINT_CATALOG_NAME, metaInAlarm.getScope());\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(endpointInventoryName + \" in \" + serviceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.ENDPOINT, metaInAlarm.getScopeId());\n\n    }\n","realPath":"oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandlerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-03-28 22:51:41","commitOrder":4,"curCode":"    public void testNotifyWithServiceInstanceCatalog() {\n\n        prepareNotify();\n\n        String metricsName = \"service-instance-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inServiceInstanceCatalog(0)).thenReturn(true);\n\n        ServiceInstanceInventory instanceInventory = mock(ServiceInstanceInventory.class);\n        String instanceInventoryName = \"instance-inventory-name\";\n        when(instanceInventory.getName()).thenReturn(instanceInventoryName);\n\n        when(serviceInstanceInventoryCache.get(anyInt())).thenReturn(instanceInventory);\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof ServiceInstanceMetaInAlarm);\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(mockId + \"\", metaInAlarm.getId0());\n        assertEquals(DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME, metaInAlarm.getScope());\n        assertEquals(instanceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.SERVICE_INSTANCE, metaInAlarm.getScopeId());\n    }\n","date":"2020-03-28 22:51:41","endLine":152,"groupId":"1034","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotifyWithServiceInstanceCatalog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/61/10683afa921378c0a46f0515f658c27131490c.src","preCode":"    public void testNotifyWithServiceInstanceCatalog() {\n\n        prepareNotify();\n\n        String metricsName = \"service-instance-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inServiceInstanceCatalog(0)).thenReturn(true);\n\n        ServiceInstanceInventory instanceInventory = mock(ServiceInstanceInventory.class);\n        String instanceInventoryName = \"instance-inventory-name\";\n        when(instanceInventory.getName()).thenReturn(instanceInventoryName);\n\n        when(serviceInstanceInventoryCache.get(anyInt())).thenReturn(instanceInventory);\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof ServiceInstanceMetaInAlarm);\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(mockId, metaInAlarm.getId0());\n        assertEquals(DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME, metaInAlarm.getScope());\n        assertEquals(instanceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.SERVICE_INSTANCE, metaInAlarm.getScopeId());\n    }\n","realPath":"oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandlerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"4474907fef809e2342b644a324da011834a55420","commitMessage":"@@@[Inventory Design Change] Remove endpoint register and endpoint inventory (#4570)\n\n* Finish step one.  source and entity changed.\n\n* Step 2.  finish the basic and core DAO changes.\n\n* Step 3. Change all source codes of backend.  and make project compiling successfully.\n\n* Make startup successful and persistence works.\n\n* Fix dead codes in the MySQLTableInstaller.\n\n* Fix mischange.\n\n* Fix MySQL storage bootstrap error.\n\n* Rollback dependency change.\n\n* Simply enable tailing logs from container no mater it's in CI or not\n\n* Fix segment table issue.\n\n* Fix MySQL Instanller.\n\n* Support Influxdb implementation of new endpoint traffic.\n\n* Set and modify timeout to 90mins\n\n* Remove unnecessary entity in the EndpointTraffic.\n\n* Fix wrong entity builder and make name more clear.\n\n* Fix 2 equal methods bug.\n\n* Fix InfluxDB identifier(name) conflict issue.\n\n* Fix endpoint topology query.  endpoint id should be changed as a string.\n\n* Fix a missing change.\n\n* Fix a wrong commit.\n\n* Column name can't be changed.  due to it affect the hybrid metadb(h2/mysql) query.  change it explicitly with double quotation marks.\n\n* Fix formats.\n\n* Remove endpoint/operation register from the agent. and change the plugin tests(without local tests). operationId relation codes have been removed from agent too.\n\n* Try to fix the hytrix case.\n\n* Fix 3 cases.\n\n* Try to fix cases.\n\n* Fix 2.\n\n* Fix one.\n\n* Fix the serviceId type mis-change.\n\n* Fix int query\n\n* Fix hystrix case.\n\n* Fix a case.\n\n* Fix EndpointCallRelationDispatcher set the source/dest endpoint without id encoding.\n\n* Update documentation and add 2 test cases.\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>","date":"2020-03-28 22:51:41","modifiedFileCount":"121","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":5,"curCode":"    public void testNotifyWithEndpointCatalog() {\n        prepareNotify();\n\n        String metricsName = \"endpoint-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inEndpointCatalog(0)).thenReturn(true);\n\n        String endpointInventoryName = \"endpoint-inventory-name\";\n        EndpointTraffic endpointTraffic = mock(EndpointTraffic.class);\n        when(endpointTraffic.getName()).thenReturn(endpointInventoryName);\n\n        String serviceInventoryName = \"service-inventory-name\";\n        final String serviceId = IDManager.ServiceID.buildId(serviceInventoryName, NodeType.Normal);\n        final String endpointId = IDManager.EndpointID.buildId(serviceId, endpointInventoryName);\n        when(metadata.getId()).thenReturn(endpointId);\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof EndpointMetaInAlarm);\n        assertEquals(\"c2VydmljZS1pbnZlbnRvcnktbmFtZQ==.1_ZW5kcG9pbnQtaW52ZW50b3J5LW5hbWU=\", metaInAlarm.getId0());\n        assertEquals(DefaultScopeDefine.ENDPOINT_CATALOG_NAME, metaInAlarm.getScope());\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(endpointInventoryName + \" in \" + serviceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.ENDPOINT, metaInAlarm.getScopeId());\n\n    }\n","date":"2020-04-10 11:03:24","endLine":109,"groupId":"10496","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotifyWithEndpointCatalog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ba/1d3c88becd568d21fec6b4607062cf26c2fbbd.src","preCode":"    public void testNotifyWithEndpointCatalog() {\n        prepareNotify();\n\n        String metricsName = \"endpoint-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inEndpointCatalog(0)).thenReturn(true);\n\n        String endpointInventoryName = \"endpoint-inventory-name\";\n        EndpointTraffic endpointTraffic = mock(EndpointTraffic.class);\n        when(endpointTraffic.getName()).thenReturn(endpointInventoryName);\n\n        String serviceInventoryName = \"service-inventory-name\";\n        ServiceInventory serviceInventory = mock(ServiceInventory.class);\n        when(serviceInventory.getName()).thenReturn(serviceInventoryName);\n\n        when(serviceInventoryCache.get(anyInt())).thenReturn(serviceInventory);\n        when(metadata.getId()).thenReturn(EndpointTraffic.buildId(1, endpointInventoryName, DetectPoint.SERVER));\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof EndpointMetaInAlarm);\n        assertEquals(\"1_ZW5kcG9pbnQtaW52ZW50b3J5LW5hbWU=_0\", metaInAlarm.getId0());\n        assertEquals(DefaultScopeDefine.ENDPOINT_CATALOG_NAME, metaInAlarm.getScope());\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(endpointInventoryName + \" in \" + serviceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.ENDPOINT, metaInAlarm.getScopeId());\n\n    }\n","realPath":"oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandlerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":5,"curCode":"    public void testNotifyWithServiceInstanceCatalog() {\n\n        prepareNotify();\n\n        String metricsName = \"service-instance-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inServiceInstanceCatalog(0)).thenReturn(true);\n\n        String instanceInventoryName = \"instance-inventory-name\";\n        final String serviceId = IDManager.ServiceID.buildId(\"service\", NodeType.Normal);\n        final String instanceId = IDManager.ServiceInstanceID.buildId(serviceId, instanceInventoryName);\n        when(metadata.getId()).thenReturn(instanceId);\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof ServiceInstanceMetaInAlarm);\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(\"c2VydmljZQ==.1_aW5zdGFuY2UtaW52ZW50b3J5LW5hbWU=\", metaInAlarm.getId0());\n        assertEquals(DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME, metaInAlarm.getScope());\n        assertEquals(\"instance-inventory-name of service\", metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.SERVICE_INSTANCE, metaInAlarm.getScopeId());\n    }\n","date":"2020-04-10 11:03:24","endLine":139,"groupId":"10496","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotifyWithServiceInstanceCatalog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ba/1d3c88becd568d21fec6b4607062cf26c2fbbd.src","preCode":"    public void testNotifyWithServiceInstanceCatalog() {\n\n        prepareNotify();\n\n        String metricsName = \"service-instance-metrics\";\n        when(metadata.getMetricsName()).thenReturn(metricsName);\n\n        when(DefaultScopeDefine.inServiceInstanceCatalog(0)).thenReturn(true);\n\n        ServiceInstanceInventory instanceInventory = mock(ServiceInstanceInventory.class);\n        String instanceInventoryName = \"instance-inventory-name\";\n        when(instanceInventory.getName()).thenReturn(instanceInventoryName);\n\n        when(serviceInstanceInventoryCache.get(anyInt())).thenReturn(instanceInventory);\n\n        ArgumentCaptor<MetaInAlarm> metaCaptor = ArgumentCaptor.forClass(MetaInAlarm.class);\n\n        notifyHandler.notify(metrics);\n        verify(rule).in(metaCaptor.capture(), any());\n\n        MetaInAlarm metaInAlarm = metaCaptor.getValue();\n\n        assertTrue(metaInAlarm instanceof ServiceInstanceMetaInAlarm);\n        assertEquals(metricsName, metaInAlarm.getMetricsName());\n        assertEquals(mockId + \"\", metaInAlarm.getId0());\n        assertEquals(DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME, metaInAlarm.getScope());\n        assertEquals(instanceInventoryName, metaInAlarm.getName());\n        assertEquals(DefaultScopeDefine.SERVICE_INSTANCE, metaInAlarm.getScopeId());\n    }\n","realPath":"oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandlerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"}]
