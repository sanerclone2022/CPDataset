[{"authorTime":"2021-05-07 07:50:03","codes":[{"authorDate":"2021-04-13 20:24:24","commitOrder":3,"curCode":"    protected List<ServiceMeshMetric.Builder> analyzeSideCar(final HTTPAccessLogEntry entry) {\n        if (!entry.hasCommonProperties()) {\n            return Collections.emptyList();\n        }\n        final AccessLogCommon properties = entry.getCommonProperties();\n        final String cluster = properties.getUpstreamCluster();\n        if (isBlank(cluster)) {\n            return Collections.emptyList();\n        }\n\n        final List<ServiceMeshMetric.Builder> sources = new ArrayList<>();\n\n        final Address downstreamRemoteAddress =\n            properties.hasDownstreamDirectRemoteAddress()\n                ? properties.getDownstreamDirectRemoteAddress()\n                : properties.getDownstreamRemoteAddress();\n        final ServiceMetaInfo downstreamService = find(downstreamRemoteAddress.getSocketAddress().getAddress());\n        final Address downstreamLocalAddress = properties.getDownstreamLocalAddress();\n        if (!isValid(downstreamRemoteAddress) || !isValid(downstreamLocalAddress)) {\n            return Collections.emptyList();\n        }\n        final ServiceMetaInfo localService = find(downstreamLocalAddress.getSocketAddress().getAddress());\n\n        if (cluster.startsWith(\"inbound|\")) {\n            \r\n            final ServiceMeshMetric.Builder metrics;\n            if (downstreamService.equals(ServiceMetaInfo.UNKNOWN)) {\n                \r\n                \r\n                metrics = newAdapter(entry, null, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed ingress->sidecar inbound mesh metrics {}\", metrics);\n            } else {\n                \r\n                metrics = newAdapter(entry, downstreamService, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metrics {}\", metrics);\n            }\n            sources.add(metrics);\n        } else if (cluster.startsWith(\"outbound|\")) {\n            \r\n            final Address upstreamRemoteAddress = properties.getUpstreamRemoteAddress();\n            if (!isValid(upstreamRemoteAddress)) {\n                return sources;\n            }\n            final ServiceMetaInfo destService = find(upstreamRemoteAddress.getSocketAddress().getAddress());\n\n            final ServiceMeshMetric.Builder metric = newAdapter(entry, downstreamService, destService).adaptToUpstreamMetrics();\n\n            log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metric {}\", metric);\n            sources.add(metric);\n        }\n\n        return sources;\n    }\n","date":"2021-04-13 20:24:24","endLine":139,"groupId":"2950","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"analyzeSideCar","params":"(finalHTTPAccessLogEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e7/61ff703530f8736225bfa27a1dc6e5a0903939.src","preCode":"    protected List<ServiceMeshMetric.Builder> analyzeSideCar(final HTTPAccessLogEntry entry) {\n        if (!entry.hasCommonProperties()) {\n            return Collections.emptyList();\n        }\n        final AccessLogCommon properties = entry.getCommonProperties();\n        final String cluster = properties.getUpstreamCluster();\n        if (isBlank(cluster)) {\n            return Collections.emptyList();\n        }\n\n        final List<ServiceMeshMetric.Builder> sources = new ArrayList<>();\n\n        final Address downstreamRemoteAddress =\n            properties.hasDownstreamDirectRemoteAddress()\n                ? properties.getDownstreamDirectRemoteAddress()\n                : properties.getDownstreamRemoteAddress();\n        final ServiceMetaInfo downstreamService = find(downstreamRemoteAddress.getSocketAddress().getAddress());\n        final Address downstreamLocalAddress = properties.getDownstreamLocalAddress();\n        if (!isValid(downstreamRemoteAddress) || !isValid(downstreamLocalAddress)) {\n            return Collections.emptyList();\n        }\n        final ServiceMetaInfo localService = find(downstreamLocalAddress.getSocketAddress().getAddress());\n\n        if (cluster.startsWith(\"inbound|\")) {\n            \r\n            final ServiceMeshMetric.Builder metrics;\n            if (downstreamService.equals(ServiceMetaInfo.UNKNOWN)) {\n                \r\n                \r\n                metrics = newAdapter(entry, null, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed ingress->sidecar inbound mesh metrics {}\", metrics);\n            } else {\n                \r\n                metrics = newAdapter(entry, downstreamService, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metrics {}\", metrics);\n            }\n            sources.add(metrics);\n        } else if (cluster.startsWith(\"outbound|\")) {\n            \r\n            final Address upstreamRemoteAddress = properties.getUpstreamRemoteAddress();\n            if (!isValid(upstreamRemoteAddress)) {\n                return sources;\n            }\n            final ServiceMetaInfo destService = find(upstreamRemoteAddress.getSocketAddress().getAddress());\n\n            final ServiceMeshMetric.Builder metric = newAdapter(entry, downstreamService, destService).adaptToUpstreamMetrics();\n\n            log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metric {}\", metric);\n            sources.add(metric);\n        }\n\n        return sources;\n    }\n","realPath":"oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/k8s/K8sALSServiceMeshHTTPAnalysis.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"NB"},{"authorDate":"2021-05-07 07:50:03","commitOrder":3,"curCode":"    protected List<ServiceMeshMetric.Builder> analyzeSideCar(final TCPAccessLogEntry entry) {\n        final AccessLogCommon properties = entry.getCommonProperties();\n        if (properties == null) {\n            return Collections.emptyList();\n        }\n        final String cluster = properties.getUpstreamCluster();\n        if (cluster == null) {\n            return Collections.emptyList();\n        }\n\n        final List<ServiceMeshMetric.Builder> sources = new ArrayList<>();\n\n        final Address downstreamRemoteAddress =\n            properties.hasDownstreamDirectRemoteAddress()\n                ? properties.getDownstreamDirectRemoteAddress()\n                : properties.getDownstreamRemoteAddress();\n        final ServiceMetaInfo downstreamService = find(downstreamRemoteAddress.getSocketAddress().getAddress());\n        final Address downstreamLocalAddress = properties.getDownstreamLocalAddress();\n        final ServiceMetaInfo localService = find(downstreamLocalAddress.getSocketAddress().getAddress());\n\n        if (cluster.startsWith(\"inbound|\")) {\n            \r\n            final ServiceMeshMetric.Builder metrics;\n            if (downstreamService.equals(ServiceMetaInfo.UNKNOWN)) {\n                \r\n                \r\n                metrics = newAdapter(entry, null, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed ingress->sidecar inbound mesh metrics {}\", metrics);\n            } else {\n                \r\n                metrics = newAdapter(entry, downstreamService, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metrics {}\", metrics);\n            }\n            sources.add(metrics);\n        } else if (cluster.startsWith(\"outbound|\")) {\n            \r\n            final Address upstreamRemoteAddress = properties.getUpstreamRemoteAddress();\n            final ServiceMetaInfo destService = find(upstreamRemoteAddress.getSocketAddress().getAddress());\n\n            final ServiceMeshMetric.Builder metric = newAdapter(entry, downstreamService, destService).adaptToUpstreamMetrics();\n\n            log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metric {}\", metric);\n            sources.add(metric);\n        }\n\n        return sources;\n    }\n","date":"2021-05-07 07:50:03","endLine":132,"groupId":"1288","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"analyzeSideCar","params":"(finalTCPAccessLogEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c3/a8f363d6f884e90bd71153801f39f64f2d5e8a.src","preCode":"    protected List<ServiceMeshMetric.Builder> analyzeSideCar(final TCPAccessLogEntry entry) {\n        final AccessLogCommon properties = entry.getCommonProperties();\n        if (properties == null) {\n            return Collections.emptyList();\n        }\n        final String cluster = properties.getUpstreamCluster();\n        if (cluster == null) {\n            return Collections.emptyList();\n        }\n\n        final List<ServiceMeshMetric.Builder> sources = new ArrayList<>();\n\n        final Address downstreamRemoteAddress =\n            properties.hasDownstreamDirectRemoteAddress()\n                ? properties.getDownstreamDirectRemoteAddress()\n                : properties.getDownstreamRemoteAddress();\n        final ServiceMetaInfo downstreamService = find(downstreamRemoteAddress.getSocketAddress().getAddress());\n        final Address downstreamLocalAddress = properties.getDownstreamLocalAddress();\n        final ServiceMetaInfo localService = find(downstreamLocalAddress.getSocketAddress().getAddress());\n\n        if (cluster.startsWith(\"inbound|\")) {\n            \r\n            final ServiceMeshMetric.Builder metrics;\n            if (downstreamService.equals(ServiceMetaInfo.UNKNOWN)) {\n                \r\n                \r\n                metrics = newAdapter(entry, null, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed ingress->sidecar inbound mesh metrics {}\", metrics);\n            } else {\n                \r\n                metrics = newAdapter(entry, downstreamService, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metrics {}\", metrics);\n            }\n            sources.add(metrics);\n        } else if (cluster.startsWith(\"outbound|\")) {\n            \r\n            final Address upstreamRemoteAddress = properties.getUpstreamRemoteAddress();\n            final ServiceMetaInfo destService = find(upstreamRemoteAddress.getSocketAddress().getAddress());\n\n            final ServiceMeshMetric.Builder metric = newAdapter(entry, downstreamService, destService).adaptToUpstreamMetrics();\n\n            log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metric {}\", metric);\n            sources.add(metric);\n        }\n\n        return sources;\n    }\n","realPath":"oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/tcp/k8s/K8sALSServiceMeshTCPAnalysis.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"}],"commitId":"3b15f8d132284c6eec6bb670341910b640cbc65d","commitMessage":"@@@feature: Envoy access log receiver supports TCP logs (#6727)\n\n","date":"2021-05-07 07:50:03","modifiedFileCount":"17","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-05-07 23:25:20","codes":[{"authorDate":"2021-05-07 23:25:20","commitOrder":4,"curCode":"    protected Result analyzeSideCar(final HTTPAccessLogEntry entry) {\n        if (!entry.hasCommonProperties()) {\n            return Result.builder().build();\n        }\n        final AccessLogCommon properties = entry.getCommonProperties();\n        final String cluster = properties.getUpstreamCluster();\n        if (isBlank(cluster)) {\n            return Result.builder().build();\n        }\n\n        final List<ServiceMeshMetric.Builder> sources = new ArrayList<>();\n\n        final Address downstreamRemoteAddress =\n            properties.hasDownstreamDirectRemoteAddress()\n                ? properties.getDownstreamDirectRemoteAddress()\n                : properties.getDownstreamRemoteAddress();\n        final ServiceMetaInfo downstreamService = find(downstreamRemoteAddress.getSocketAddress().getAddress());\n        final Address downstreamLocalAddress = properties.getDownstreamLocalAddress();\n        if (!isValid(downstreamRemoteAddress) || !isValid(downstreamLocalAddress)) {\n            return Result.builder().build();\n        }\n        final ServiceMetaInfo localService = find(downstreamLocalAddress.getSocketAddress().getAddress());\n\n        if (cluster.startsWith(\"inbound|\")) {\n            \r\n            final ServiceMeshMetric.Builder metrics;\n            if (downstreamService.equals(ServiceMetaInfo.UNKNOWN)) {\n                \r\n                \r\n                metrics = newAdapter(entry, null, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed ingress->sidecar inbound mesh metrics {}\", metrics);\n            } else {\n                \r\n                metrics = newAdapter(entry, downstreamService, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metrics {}\", metrics);\n            }\n            sources.add(metrics);\n        } else if (cluster.startsWith(\"outbound|\")) {\n            \r\n            final Address upstreamRemoteAddress = properties.getUpstreamRemoteAddress();\n            if (!isValid(upstreamRemoteAddress)) {\n                return Result.builder().metrics(sources).service(localService).build();\n            }\n            final ServiceMetaInfo destService = find(upstreamRemoteAddress.getSocketAddress().getAddress());\n\n            final ServiceMeshMetric.Builder metric = newAdapter(entry, downstreamService, destService).adaptToUpstreamMetrics();\n\n            log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metric {}\", metric);\n            sources.add(metric);\n        }\n\n        return Result.builder().metrics(sources).service(localService).build();\n    }\n","date":"2021-05-07 23:25:20","endLine":138,"groupId":"2950","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"analyzeSideCar","params":"(finalHTTPAccessLogEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/21a3e61228a76f47ae886413ef693bfdbdf48e.src","preCode":"    protected List<ServiceMeshMetric.Builder> analyzeSideCar(final HTTPAccessLogEntry entry) {\n        if (!entry.hasCommonProperties()) {\n            return Collections.emptyList();\n        }\n        final AccessLogCommon properties = entry.getCommonProperties();\n        final String cluster = properties.getUpstreamCluster();\n        if (isBlank(cluster)) {\n            return Collections.emptyList();\n        }\n\n        final List<ServiceMeshMetric.Builder> sources = new ArrayList<>();\n\n        final Address downstreamRemoteAddress =\n            properties.hasDownstreamDirectRemoteAddress()\n                ? properties.getDownstreamDirectRemoteAddress()\n                : properties.getDownstreamRemoteAddress();\n        final ServiceMetaInfo downstreamService = find(downstreamRemoteAddress.getSocketAddress().getAddress());\n        final Address downstreamLocalAddress = properties.getDownstreamLocalAddress();\n        if (!isValid(downstreamRemoteAddress) || !isValid(downstreamLocalAddress)) {\n            return Collections.emptyList();\n        }\n        final ServiceMetaInfo localService = find(downstreamLocalAddress.getSocketAddress().getAddress());\n\n        if (cluster.startsWith(\"inbound|\")) {\n            \r\n            final ServiceMeshMetric.Builder metrics;\n            if (downstreamService.equals(ServiceMetaInfo.UNKNOWN)) {\n                \r\n                \r\n                metrics = newAdapter(entry, null, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed ingress->sidecar inbound mesh metrics {}\", metrics);\n            } else {\n                \r\n                metrics = newAdapter(entry, downstreamService, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metrics {}\", metrics);\n            }\n            sources.add(metrics);\n        } else if (cluster.startsWith(\"outbound|\")) {\n            \r\n            final Address upstreamRemoteAddress = properties.getUpstreamRemoteAddress();\n            if (!isValid(upstreamRemoteAddress)) {\n                return sources;\n            }\n            final ServiceMetaInfo destService = find(upstreamRemoteAddress.getSocketAddress().getAddress());\n\n            final ServiceMeshMetric.Builder metric = newAdapter(entry, downstreamService, destService).adaptToUpstreamMetrics();\n\n            log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metric {}\", metric);\n            sources.add(metric);\n        }\n\n        return sources;\n    }\n","realPath":"oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/k8s/K8sALSServiceMeshHTTPAnalysis.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2021-05-07 23:25:20","commitOrder":4,"curCode":"    protected Result analyzeSideCar(final Result previousResult, final TCPAccessLogEntry entry) {\n        final AccessLogCommon properties = entry.getCommonProperties();\n        if (properties == null) {\n            return previousResult;\n        }\n        final String cluster = properties.getUpstreamCluster();\n        if (cluster == null) {\n            return previousResult;\n        }\n\n        final List<ServiceMeshMetric.Builder> sources = new ArrayList<>();\n\n        final Address downstreamRemoteAddress =\n            properties.hasDownstreamDirectRemoteAddress()\n                ? properties.getDownstreamDirectRemoteAddress()\n                : properties.getDownstreamRemoteAddress();\n        final ServiceMetaInfo downstreamService = find(downstreamRemoteAddress.getSocketAddress().getAddress());\n        final Address downstreamLocalAddress = properties.getDownstreamLocalAddress();\n        final ServiceMetaInfo localService = find(downstreamLocalAddress.getSocketAddress().getAddress());\n\n        if (cluster.startsWith(\"inbound|\")) {\n            \r\n            final ServiceMeshMetric.Builder metrics;\n            if (downstreamService.equals(ServiceMetaInfo.UNKNOWN)) {\n                \r\n                \r\n                metrics = newAdapter(entry, null, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed ingress->sidecar inbound mesh metrics {}\", metrics);\n            } else {\n                \r\n                metrics = newAdapter(entry, downstreamService, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metrics {}\", metrics);\n            }\n            sources.add(metrics);\n        } else if (cluster.startsWith(\"outbound|\")) {\n            \r\n            final Address upstreamRemoteAddress = properties.getUpstreamRemoteAddress();\n            final ServiceMetaInfo destService = find(upstreamRemoteAddress.getSocketAddress().getAddress());\n\n            final ServiceMeshMetric.Builder metric = newAdapter(entry, downstreamService, destService).adaptToUpstreamMetrics();\n\n            log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metric {}\", metric);\n            sources.add(metric);\n        }\n\n        return Result.builder().metrics(sources).service(localService).build();\n    }\n","date":"2021-05-07 23:25:20","endLine":131,"groupId":"1288","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"analyzeSideCar","params":"(finalResultpreviousResult@finalTCPAccessLogEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ff/fbd83b1c7463ac4d7f4c45c904c9f14e0c2188.src","preCode":"    protected List<ServiceMeshMetric.Builder> analyzeSideCar(final TCPAccessLogEntry entry) {\n        final AccessLogCommon properties = entry.getCommonProperties();\n        if (properties == null) {\n            return Collections.emptyList();\n        }\n        final String cluster = properties.getUpstreamCluster();\n        if (cluster == null) {\n            return Collections.emptyList();\n        }\n\n        final List<ServiceMeshMetric.Builder> sources = new ArrayList<>();\n\n        final Address downstreamRemoteAddress =\n            properties.hasDownstreamDirectRemoteAddress()\n                ? properties.getDownstreamDirectRemoteAddress()\n                : properties.getDownstreamRemoteAddress();\n        final ServiceMetaInfo downstreamService = find(downstreamRemoteAddress.getSocketAddress().getAddress());\n        final Address downstreamLocalAddress = properties.getDownstreamLocalAddress();\n        final ServiceMetaInfo localService = find(downstreamLocalAddress.getSocketAddress().getAddress());\n\n        if (cluster.startsWith(\"inbound|\")) {\n            \r\n            final ServiceMeshMetric.Builder metrics;\n            if (downstreamService.equals(ServiceMetaInfo.UNKNOWN)) {\n                \r\n                \r\n                metrics = newAdapter(entry, null, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed ingress->sidecar inbound mesh metrics {}\", metrics);\n            } else {\n                \r\n                metrics = newAdapter(entry, downstreamService, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metrics {}\", metrics);\n            }\n            sources.add(metrics);\n        } else if (cluster.startsWith(\"outbound|\")) {\n            \r\n            final Address upstreamRemoteAddress = properties.getUpstreamRemoteAddress();\n            final ServiceMetaInfo destService = find(upstreamRemoteAddress.getSocketAddress().getAddress());\n\n            final ServiceMeshMetric.Builder metric = newAdapter(entry, downstreamService, destService).adaptToUpstreamMetrics();\n\n            log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metric {}\", metric);\n            sources.add(metric);\n        }\n\n        return sources;\n    }\n","realPath":"oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/tcp/k8s/K8sALSServiceMeshTCPAnalysis.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"4103551092b51f733693daa1e7f3e9aba95141e5","commitMessage":"@@@bugfix: Envoy error logs are not persisted when no metrics are generated (#6911)\n\n","date":"2021-05-07 23:25:20","modifiedFileCount":"10","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-05-25 17:33:07","codes":[{"authorDate":"2021-05-25 17:33:07","commitOrder":5,"curCode":"    protected Result analyzeSideCar(final HTTPAccessLogEntry entry) {\n        if (!entry.hasCommonProperties()) {\n            return Result.builder().build();\n        }\n        final AccessLogCommon properties = entry.getCommonProperties();\n        final String cluster = properties.getUpstreamCluster();\n        if (isBlank(cluster)) {\n            return Result.builder().build();\n        }\n\n        final List<ServiceMeshMetric.Builder> sources = new ArrayList<>();\n\n        final Address downstreamRemoteAddress =\n            properties.hasDownstreamDirectRemoteAddress()\n                ? properties.getDownstreamDirectRemoteAddress()\n                : properties.getDownstreamRemoteAddress();\n        final ServiceMetaInfo downstreamService = find(downstreamRemoteAddress.getSocketAddress().getAddress());\n        final Address downstreamLocalAddress = properties.getDownstreamLocalAddress();\n        if (!isValid(downstreamRemoteAddress) || !isValid(downstreamLocalAddress)) {\n            return Result.builder().build();\n        }\n        final ServiceMetaInfo localService = find(downstreamLocalAddress.getSocketAddress().getAddress());\n\n        if (cluster.startsWith(\"inbound|\")) {\n            \r\n            final ServiceMeshMetric.Builder metrics;\n            if (downstreamService.equals(config.serviceMetaInfoFactory().unknown())) {\n                \r\n                \r\n                metrics = newAdapter(entry, null, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed ingress->sidecar inbound mesh metrics {}\", metrics);\n            } else {\n                \r\n                metrics = newAdapter(entry, downstreamService, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metrics {}\", metrics);\n            }\n            sources.add(metrics);\n        } else if (cluster.startsWith(\"outbound|\")) {\n            \r\n            final Address upstreamRemoteAddress = properties.getUpstreamRemoteAddress();\n            if (!isValid(upstreamRemoteAddress)) {\n                return Result.builder().metrics(sources).service(localService).build();\n            }\n            final ServiceMetaInfo destService = find(upstreamRemoteAddress.getSocketAddress().getAddress());\n\n            final ServiceMeshMetric.Builder metric = newAdapter(entry, downstreamService, destService).adaptToUpstreamMetrics();\n\n            log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metric {}\", metric);\n            sources.add(metric);\n        }\n\n        return Result.builder().metrics(sources).service(localService).build();\n    }\n","date":"2021-05-25 17:33:07","endLine":142,"groupId":"10936","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"analyzeSideCar","params":"(finalHTTPAccessLogEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b0/e53c1767d684953a9edbed8a696dc34c7a294e.src","preCode":"    protected Result analyzeSideCar(final HTTPAccessLogEntry entry) {\n        if (!entry.hasCommonProperties()) {\n            return Result.builder().build();\n        }\n        final AccessLogCommon properties = entry.getCommonProperties();\n        final String cluster = properties.getUpstreamCluster();\n        if (isBlank(cluster)) {\n            return Result.builder().build();\n        }\n\n        final List<ServiceMeshMetric.Builder> sources = new ArrayList<>();\n\n        final Address downstreamRemoteAddress =\n            properties.hasDownstreamDirectRemoteAddress()\n                ? properties.getDownstreamDirectRemoteAddress()\n                : properties.getDownstreamRemoteAddress();\n        final ServiceMetaInfo downstreamService = find(downstreamRemoteAddress.getSocketAddress().getAddress());\n        final Address downstreamLocalAddress = properties.getDownstreamLocalAddress();\n        if (!isValid(downstreamRemoteAddress) || !isValid(downstreamLocalAddress)) {\n            return Result.builder().build();\n        }\n        final ServiceMetaInfo localService = find(downstreamLocalAddress.getSocketAddress().getAddress());\n\n        if (cluster.startsWith(\"inbound|\")) {\n            \r\n            final ServiceMeshMetric.Builder metrics;\n            if (downstreamService.equals(ServiceMetaInfo.UNKNOWN)) {\n                \r\n                \r\n                metrics = newAdapter(entry, null, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed ingress->sidecar inbound mesh metrics {}\", metrics);\n            } else {\n                \r\n                metrics = newAdapter(entry, downstreamService, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metrics {}\", metrics);\n            }\n            sources.add(metrics);\n        } else if (cluster.startsWith(\"outbound|\")) {\n            \r\n            final Address upstreamRemoteAddress = properties.getUpstreamRemoteAddress();\n            if (!isValid(upstreamRemoteAddress)) {\n                return Result.builder().metrics(sources).service(localService).build();\n            }\n            final ServiceMetaInfo destService = find(upstreamRemoteAddress.getSocketAddress().getAddress());\n\n            final ServiceMeshMetric.Builder metric = newAdapter(entry, downstreamService, destService).adaptToUpstreamMetrics();\n\n            log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metric {}\", metric);\n            sources.add(metric);\n        }\n\n        return Result.builder().metrics(sources).service(localService).build();\n    }\n","realPath":"oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/k8s/K8sALSServiceMeshHTTPAnalysis.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2021-05-25 17:33:07","commitOrder":5,"curCode":"    protected Result analyzeSideCar(final Result previousResult, final TCPAccessLogEntry entry) {\n        final AccessLogCommon properties = entry.getCommonProperties();\n        if (properties == null) {\n            return previousResult;\n        }\n        final String cluster = properties.getUpstreamCluster();\n        if (cluster == null) {\n            return previousResult;\n        }\n\n        final List<ServiceMeshMetric.Builder> sources = new ArrayList<>();\n\n        final Address downstreamRemoteAddress =\n            properties.hasDownstreamDirectRemoteAddress()\n                ? properties.getDownstreamDirectRemoteAddress()\n                : properties.getDownstreamRemoteAddress();\n        final ServiceMetaInfo downstreamService = find(downstreamRemoteAddress.getSocketAddress().getAddress());\n        final Address downstreamLocalAddress = properties.getDownstreamLocalAddress();\n        final ServiceMetaInfo localService = find(downstreamLocalAddress.getSocketAddress().getAddress());\n\n        if (cluster.startsWith(\"inbound|\")) {\n            \r\n            final ServiceMeshMetric.Builder metrics;\n            if (downstreamService.equals(config.serviceMetaInfoFactory().unknown())) {\n                \r\n                \r\n                metrics = newAdapter(entry, null, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed ingress->sidecar inbound mesh metrics {}\", metrics);\n            } else {\n                \r\n                metrics = newAdapter(entry, downstreamService, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metrics {}\", metrics);\n            }\n            sources.add(metrics);\n        } else if (cluster.startsWith(\"outbound|\")) {\n            \r\n            final Address upstreamRemoteAddress = properties.getUpstreamRemoteAddress();\n            final ServiceMetaInfo destService = find(upstreamRemoteAddress.getSocketAddress().getAddress());\n\n            final ServiceMeshMetric.Builder metric = newAdapter(entry, downstreamService, destService).adaptToUpstreamMetrics();\n\n            log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metric {}\", metric);\n            sources.add(metric);\n        }\n\n        return Result.builder().metrics(sources).service(localService).build();\n    }\n","date":"2021-05-25 17:33:07","endLine":135,"groupId":"10936","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"analyzeSideCar","params":"(finalResultpreviousResult@finalTCPAccessLogEntryentry)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d4/0ce02e3fd4ad42de18aac463f188b96d6e788c.src","preCode":"    protected Result analyzeSideCar(final Result previousResult, final TCPAccessLogEntry entry) {\n        final AccessLogCommon properties = entry.getCommonProperties();\n        if (properties == null) {\n            return previousResult;\n        }\n        final String cluster = properties.getUpstreamCluster();\n        if (cluster == null) {\n            return previousResult;\n        }\n\n        final List<ServiceMeshMetric.Builder> sources = new ArrayList<>();\n\n        final Address downstreamRemoteAddress =\n            properties.hasDownstreamDirectRemoteAddress()\n                ? properties.getDownstreamDirectRemoteAddress()\n                : properties.getDownstreamRemoteAddress();\n        final ServiceMetaInfo downstreamService = find(downstreamRemoteAddress.getSocketAddress().getAddress());\n        final Address downstreamLocalAddress = properties.getDownstreamLocalAddress();\n        final ServiceMetaInfo localService = find(downstreamLocalAddress.getSocketAddress().getAddress());\n\n        if (cluster.startsWith(\"inbound|\")) {\n            \r\n            final ServiceMeshMetric.Builder metrics;\n            if (downstreamService.equals(ServiceMetaInfo.UNKNOWN)) {\n                \r\n                \r\n                metrics = newAdapter(entry, null, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed ingress->sidecar inbound mesh metrics {}\", metrics);\n            } else {\n                \r\n                metrics = newAdapter(entry, downstreamService, localService).adaptToDownstreamMetrics();\n\n                log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metrics {}\", metrics);\n            }\n            sources.add(metrics);\n        } else if (cluster.startsWith(\"outbound|\")) {\n            \r\n            final Address upstreamRemoteAddress = properties.getUpstreamRemoteAddress();\n            final ServiceMetaInfo destService = find(upstreamRemoteAddress.getSocketAddress().getAddress());\n\n            final ServiceMeshMetric.Builder metric = newAdapter(entry, downstreamService, destService).adaptToUpstreamMetrics();\n\n            log.debug(\"Transformed sidecar->sidecar(server side) inbound mesh metric {}\", metric);\n            sources.add(metric);\n        }\n\n        return Result.builder().metrics(sources).service(localService).build();\n    }\n","realPath":"oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/als/tcp/k8s/K8sALSServiceMeshTCPAnalysis.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"379c4e1a46ef8c268b2d5c058dc9645b5b9baad3","commitMessage":"@@@Allow multiple definitions as fallback in `k8sServiceNameRule`. (#7006)\n\n","date":"2021-05-25 17:33:07","modifiedFileCount":"10","status":"M","submitter":"Zhenxu Ke"}]
