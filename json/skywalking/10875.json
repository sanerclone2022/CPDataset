[{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":1,"curCode":"    public List<IntValues> getMultipleLinearIntValues(final MetricCondition metrics, final int numOfLinear,\n        final Duration duration) throws IOException, ParseException {\n        long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());\n        long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());\n\n        return getMetricQueryService().getMultipleLinearIntValues(metrics.getName(), metrics.getId(), numOfLinear, StepToDownsampling\n            .transform(duration.getStep()), startTimeBucket, endTimeBucket);\n    }\n","date":"2020-02-11 17:10:49","endLine":78,"groupId":"4466","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getMultipleLinearIntValues","params":"(finalMetricConditionmetrics@finalintnumOfLinear@finalDurationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/7c/5da3da17afe25b43e37c872196f69ef2264602.src","preCode":"    public List<IntValues> getMultipleLinearIntValues(final MetricCondition metrics, final int numOfLinear,\n        final Duration duration) throws IOException, ParseException {\n        long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());\n        long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());\n\n        return getMetricQueryService().getMultipleLinearIntValues(metrics.getName(), metrics.getId(), numOfLinear, StepToDownsampling\n            .transform(duration.getStep()), startTimeBucket, endTimeBucket);\n    }\n","realPath":"oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricQuery.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2020-02-11 17:10:49","commitOrder":1,"curCode":"    public List<IntValues> getSubsetOfMultipleLinearIntValues(final MetricCondition metrics,\n        final List<Integer> linearIndex, final Duration duration) throws IOException, ParseException {\n        long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());\n        long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());\n\n        return getMetricQueryService().getSubsetOfMultipleLinearIntValues(metrics.getName(), metrics.getId(), linearIndex, StepToDownsampling\n            .transform(duration.getStep()), startTimeBucket, endTimeBucket);\n    }\n","date":"2020-02-11 17:10:49","endLine":87,"groupId":"4466","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSubsetOfMultipleLinearIntValues","params":"(finalMetricConditionmetrics@finalList<Integer>linearIndex@finalDurationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/7c/5da3da17afe25b43e37c872196f69ef2264602.src","preCode":"    public List<IntValues> getSubsetOfMultipleLinearIntValues(final MetricCondition metrics,\n        final List<Integer> linearIndex, final Duration duration) throws IOException, ParseException {\n        long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());\n        long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());\n\n        return getMetricQueryService().getSubsetOfMultipleLinearIntValues(metrics.getName(), metrics.getId(), linearIndex, StepToDownsampling\n            .transform(duration.getStep()), startTimeBucket, endTimeBucket);\n    }\n","realPath":"oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricQuery.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"}],"commitId":"5b255ba3e3b50e0e0196b28cdca21dcd5c9c3da2","commitMessage":"@@@Set up more strict code styles and fix existing issues (#4337)\n\nMotivation:\n\nReview code styles with some bots automatically.\n\nModifications:\n\nSet up ReviewDog in GitHub Action to review code style.\n\nAdd more check rules to checkstyle plugin.\n\nResult:\n\nObvious code styles can be reviewed and commented automatically.","date":"2020-02-11 17:10:49","modifiedFileCount":"2429","status":"B","submitter":"kezhenxu94"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":2,"curCode":"    public List<IntValues> getMultipleLinearIntValues(final MetricCondition metrics, final int numOfLinear,\n        final Duration duration) throws IOException, ParseException {\n        long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());\n        long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());\n\n        return getMetricQueryService().getMultipleLinearIntValues(metrics.getName(), metrics.getId(), numOfLinear, StepToDownSampling\n            .transform(duration.getStep()), startTimeBucket, endTimeBucket);\n    }\n","date":"2020-04-10 11:03:24","endLine":78,"groupId":"4466","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getMultipleLinearIntValues","params":"(finalMetricConditionmetrics@finalintnumOfLinear@finalDurationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/7d/776f5af43ecb636f526a921b03da9bdd8caa23.src","preCode":"    public List<IntValues> getMultipleLinearIntValues(final MetricCondition metrics, final int numOfLinear,\n        final Duration duration) throws IOException, ParseException {\n        long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());\n        long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());\n\n        return getMetricQueryService().getMultipleLinearIntValues(metrics.getName(), metrics.getId(), numOfLinear, StepToDownsampling\n            .transform(duration.getStep()), startTimeBucket, endTimeBucket);\n    }\n","realPath":"oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricQuery.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":2,"curCode":"    public List<IntValues> getSubsetOfMultipleLinearIntValues(final MetricCondition metrics,\n        final List<Integer> linearIndex, final Duration duration) throws IOException, ParseException {\n        long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());\n        long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());\n\n        return getMetricQueryService().getSubsetOfMultipleLinearIntValues(metrics.getName(), metrics.getId(), linearIndex, StepToDownSampling\n            .transform(duration.getStep()), startTimeBucket, endTimeBucket);\n    }\n","date":"2020-04-10 11:03:24","endLine":87,"groupId":"4466","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSubsetOfMultipleLinearIntValues","params":"(finalMetricConditionmetrics@finalList<Integer>linearIndex@finalDurationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/7d/776f5af43ecb636f526a921b03da9bdd8caa23.src","preCode":"    public List<IntValues> getSubsetOfMultipleLinearIntValues(final MetricCondition metrics,\n        final List<Integer> linearIndex, final Duration duration) throws IOException, ParseException {\n        long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());\n        long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());\n\n        return getMetricQueryService().getSubsetOfMultipleLinearIntValues(metrics.getName(), metrics.getId(), linearIndex, StepToDownsampling\n            .transform(duration.getStep()), startTimeBucket, endTimeBucket);\n    }\n","realPath":"oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricQuery.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-21 15:39:18","codes":[{"authorDate":"2020-04-21 15:39:18","commitOrder":3,"curCode":"    public List<IntValues> getMultipleLinearIntValues(final MetricCondition metrics, final int numOfLinear,\n                                                      final Duration duration) throws IOException, ParseException {\n        MetricsCondition condition = new MetricsCondition();\n        condition.setName(metrics.getName());\n        condition.setEntity(new MockEntity(metrics.getId()));\n\n        List<String> labels = new ArrayList<>(numOfLinear);\n        for (int i = 0; i < numOfLinear; i++) {\n            labels.add(String.valueOf(i));\n        }\n\n        final List<MetricsValues> metricsValues = query.readLabeledMetricsValues(condition, labels, duration);\n        List<IntValues> response = new ArrayList<>(metricsValues.size());\n        metricsValues.forEach(value -> {\n            response.add(value.getValues());\n        });\n\n        return response;\n    }\n","date":"2020-04-21 15:39:18","endLine":107,"groupId":"2142","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getMultipleLinearIntValues","params":"(finalMetricConditionmetrics@finalintnumOfLinear@finalDurationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/4f/293f7a6092a80c16fb6840aa1429638f19007a.src","preCode":"    public List<IntValues> getMultipleLinearIntValues(final MetricCondition metrics, final int numOfLinear,\n        final Duration duration) throws IOException, ParseException {\n        long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());\n        long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());\n\n        return getMetricQueryService().getMultipleLinearIntValues(metrics.getName(), metrics.getId(), numOfLinear, StepToDownSampling\n            .transform(duration.getStep()), startTimeBucket, endTimeBucket);\n    }\n","realPath":"oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricQuery.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2020-04-21 15:39:18","commitOrder":3,"curCode":"    public List<IntValues> getSubsetOfMultipleLinearIntValues(final MetricCondition metrics,\n                                                              final List<Integer> linearIndex,\n                                                              final Duration duration) throws IOException, ParseException {\n        MetricsCondition condition = new MetricsCondition();\n        condition.setName(metrics.getName());\n        condition.setEntity(new MockEntity(metrics.getId()));\n\n        List<String> labels = new ArrayList<>(linearIndex.size());\n        linearIndex.forEach(i -> labels.add(String.valueOf(i)));\n\n        final List<MetricsValues> metricsValues = query.readLabeledMetricsValues(condition, labels, duration);\n        List<IntValues> response = new ArrayList<>(metricsValues.size());\n        metricsValues.forEach(value -> {\n            response.add(value.getValues());\n        });\n\n        return response;\n    }\n","date":"2020-04-21 15:39:18","endLine":126,"groupId":"2143","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getSubsetOfMultipleLinearIntValues","params":"(finalMetricConditionmetrics@finalList<Integer>linearIndex@finalDurationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/4f/293f7a6092a80c16fb6840aa1429638f19007a.src","preCode":"    public List<IntValues> getSubsetOfMultipleLinearIntValues(final MetricCondition metrics,\n        final List<Integer> linearIndex, final Duration duration) throws IOException, ParseException {\n        long startTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getStart());\n        long endTimeBucket = DurationUtils.INSTANCE.exchangeToTimeBucket(duration.getEnd());\n\n        return getMetricQueryService().getSubsetOfMultipleLinearIntValues(metrics.getName(), metrics.getId(), linearIndex, StepToDownSampling\n            .transform(duration.getStep()), startTimeBucket, endTimeBucket);\n    }\n","realPath":"oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricQuery.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"418bdff277179b4660e578b1837f21fd3db514cb","commitMessage":"@@@New metrics query protocol v2 (#4679)\n\n1. Support the new query protocol.  and the v1 query protocol is still supported \n2. All `numOfxxx`/`GlobalBrief` is only a mock now.  no real number.\n3. typeOfMetrics service is a mock only too.  follow up PR will implement this.","date":"2020-04-21 15:39:18","modifiedFileCount":"123","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-06-09 00:30:05","codes":[{"authorDate":"2020-06-09 00:30:05","commitOrder":4,"curCode":"    public List<IntValues> getMultipleLinearIntValues(final MetricCondition metrics, final int numOfLinear,\n                                                      final Duration duration) throws IOException, ParseException {\n        MetricsCondition condition = new MetricsCondition();\n        condition.setName(metrics.getName());\n        condition.setEntity(new MockEntity(metrics.getId()));\n\n        List<String> labels = new ArrayList<>(numOfLinear);\n        for (int i = 0; i < numOfLinear; i++) {\n            labels.add(String.valueOf(i));\n        }\n\n        final List<MetricsValues> metricsValues = query.readLabeledMetricsValues(condition, labels, duration);\n        List<IntValues> response = new ArrayList<>(metricsValues.size());\n        labels.forEach(l -> metricsValues.stream()\n            .filter(m -> m.getLabel().equals(l))\n            .findAny()\n            .ifPresent(values -> response.add(values.getValues())));\n        return response;\n    }\n","date":"2020-06-09 00:30:05","endLine":107,"groupId":"2142","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getMultipleLinearIntValues","params":"(finalMetricConditionmetrics@finalintnumOfLinear@finalDurationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/39/3fde52a485cba1c8e1cf2a3167c1493e82ec33.src","preCode":"    public List<IntValues> getMultipleLinearIntValues(final MetricCondition metrics, final int numOfLinear,\n                                                      final Duration duration) throws IOException, ParseException {\n        MetricsCondition condition = new MetricsCondition();\n        condition.setName(metrics.getName());\n        condition.setEntity(new MockEntity(metrics.getId()));\n\n        List<String> labels = new ArrayList<>(numOfLinear);\n        for (int i = 0; i < numOfLinear; i++) {\n            labels.add(String.valueOf(i));\n        }\n\n        final List<MetricsValues> metricsValues = query.readLabeledMetricsValues(condition, labels, duration);\n        List<IntValues> response = new ArrayList<>(metricsValues.size());\n        metricsValues.forEach(value -> {\n            response.add(value.getValues());\n        });\n\n        return response;\n    }\n","realPath":"oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricQuery.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2020-06-09 00:30:05","commitOrder":4,"curCode":"    public List<IntValues> getSubsetOfMultipleLinearIntValues(final MetricCondition metrics,\n                                                              final List<Integer> linearIndex,\n                                                              final Duration duration) throws IOException, ParseException {\n        MetricsCondition condition = new MetricsCondition();\n        condition.setName(metrics.getName());\n        condition.setEntity(new MockEntity(metrics.getId()));\n\n        List<String> labels = new ArrayList<>(linearIndex.size());\n        linearIndex.forEach(i -> labels.add(String.valueOf(i)));\n\n        final List<MetricsValues> metricsValues = query.readLabeledMetricsValues(condition, labels, duration);\n        List<IntValues> response = new ArrayList<>(metricsValues.size());\n        labels.forEach(l -> metricsValues.stream()\n            .filter(m -> m.getLabel().equals(l))\n            .findAny()\n            .ifPresent(values -> response.add(values.getValues())));\n        return response;\n    }\n","date":"2020-06-09 00:30:05","endLine":126,"groupId":"2143","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getSubsetOfMultipleLinearIntValues","params":"(finalMetricConditionmetrics@finalList<Integer>linearIndex@finalDurationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/39/3fde52a485cba1c8e1cf2a3167c1493e82ec33.src","preCode":"    public List<IntValues> getSubsetOfMultipleLinearIntValues(final MetricCondition metrics,\n                                                              final List<Integer> linearIndex,\n                                                              final Duration duration) throws IOException, ParseException {\n        MetricsCondition condition = new MetricsCondition();\n        condition.setName(metrics.getName());\n        condition.setEntity(new MockEntity(metrics.getId()));\n\n        List<String> labels = new ArrayList<>(linearIndex.size());\n        linearIndex.forEach(i -> labels.add(String.valueOf(i)));\n\n        final List<MetricsValues> metricsValues = query.readLabeledMetricsValues(condition, labels, duration);\n        List<IntValues> response = new ArrayList<>(metricsValues.size());\n        metricsValues.forEach(value -> {\n            response.add(value.getValues());\n        });\n\n        return response;\n    }\n","realPath":"oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricQuery.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"6c0274d6ae763dbfb5e48d0c0224e82f0612aaef","commitMessage":"@@@Sort linear metric query result (#4880)\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>","date":"2020-06-09 00:30:05","modifiedFileCount":"1","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2021-09-06 15:21:35","codes":[{"authorDate":"2021-09-06 15:21:35","commitOrder":5,"curCode":"    public List<IntValues> getMultipleLinearIntValues(final MetricCondition metrics, final int numOfLinear,\n                                                      final Duration duration) throws IOException {\n        MetricsCondition condition = new MetricsCondition();\n        condition.setName(metrics.getName());\n        condition.setEntity(new MockEntity(metrics.getId()));\n\n        List<String> labels = new ArrayList<>(numOfLinear);\n        for (int i = 0; i < numOfLinear; i++) {\n            labels.add(String.valueOf(i));\n        }\n\n        final List<MetricsValues> metricsValues = query.readLabeledMetricsValues(condition, labels, duration);\n        List<IntValues> response = new ArrayList<>(metricsValues.size());\n        labels.forEach(l -> metricsValues.stream()\n                                         .filter(m -> m.getLabel().equals(l))\n                                         .findAny()\n                                         .ifPresent(values -> response.add(values.getValues())));\n        return response;\n    }\n","date":"2021-09-06 15:21:35","endLine":107,"groupId":"10875","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"getMultipleLinearIntValues","params":"(finalMetricConditionmetrics@finalintnumOfLinear@finalDurationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fc/e4c13c88b799f957ea47b2159f1d9a6797f58d.src","preCode":"    public List<IntValues> getMultipleLinearIntValues(final MetricCondition metrics, final int numOfLinear,\n                                                      final Duration duration) throws IOException, ParseException {\n        MetricsCondition condition = new MetricsCondition();\n        condition.setName(metrics.getName());\n        condition.setEntity(new MockEntity(metrics.getId()));\n\n        List<String> labels = new ArrayList<>(numOfLinear);\n        for (int i = 0; i < numOfLinear; i++) {\n            labels.add(String.valueOf(i));\n        }\n\n        final List<MetricsValues> metricsValues = query.readLabeledMetricsValues(condition, labels, duration);\n        List<IntValues> response = new ArrayList<>(metricsValues.size());\n        labels.forEach(l -> metricsValues.stream()\n                                         .filter(m -> m.getLabel().equals(l))\n                                         .findAny()\n                                         .ifPresent(values -> response.add(values.getValues())));\n        return response;\n    }\n","realPath":"oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricQuery.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2021-09-06 15:21:35","commitOrder":5,"curCode":"    public List<IntValues> getSubsetOfMultipleLinearIntValues(final MetricCondition metrics,\n                                                              final List<Integer> linearIndex,\n                                                              final Duration duration) throws IOException {\n        MetricsCondition condition = new MetricsCondition();\n        condition.setName(metrics.getName());\n        condition.setEntity(new MockEntity(metrics.getId()));\n\n        List<String> labels = new ArrayList<>(linearIndex.size());\n        linearIndex.forEach(i -> labels.add(String.valueOf(i)));\n\n        final List<MetricsValues> metricsValues = query.readLabeledMetricsValues(condition, labels, duration);\n        List<IntValues> response = new ArrayList<>(metricsValues.size());\n        labels.forEach(l -> metricsValues.stream()\n                                         .filter(m -> m.getLabel().equals(l))\n                                         .findAny()\n                                         .ifPresent(values -> response.add(values.getValues())));\n        return response;\n    }\n","date":"2021-09-06 15:21:35","endLine":126,"groupId":"10875","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"getSubsetOfMultipleLinearIntValues","params":"(finalMetricConditionmetrics@finalList<Integer>linearIndex@finalDurationduration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fc/e4c13c88b799f957ea47b2159f1d9a6797f58d.src","preCode":"    public List<IntValues> getSubsetOfMultipleLinearIntValues(final MetricCondition metrics,\n                                                              final List<Integer> linearIndex,\n                                                              final Duration duration) throws IOException, ParseException {\n        MetricsCondition condition = new MetricsCondition();\n        condition.setName(metrics.getName());\n        condition.setEntity(new MockEntity(metrics.getId()));\n\n        List<String> labels = new ArrayList<>(linearIndex.size());\n        linearIndex.forEach(i -> labels.add(String.valueOf(i)));\n\n        final List<MetricsValues> metricsValues = query.readLabeledMetricsValues(condition, labels, duration);\n        List<IntValues> response = new ArrayList<>(metricsValues.size());\n        labels.forEach(l -> metricsValues.stream()\n                                         .filter(m -> m.getLabel().equals(l))\n                                         .findAny()\n                                         .ifPresent(values -> response.add(values.getValues())));\n        return response;\n    }\n","realPath":"oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/MetricQuery.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"26b81a2e5991ecdd2bde0f7071264cb80bb235cf","commitMessage":"@@@Rebuilt ElasticSearch client on top of their REST API (#7634)\n\n","date":"2021-09-06 15:21:35","modifiedFileCount":"60","status":"M","submitter":"kezhenxu94"}]
