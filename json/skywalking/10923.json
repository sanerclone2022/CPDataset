[{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":5,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        MeshDataBufferFileCache cache = new MeshDataBufferFileCache(config, getManager());\n        try {\n            cache.start();\n            TelemetryDataDispatcher.setCache(cache, getManager());\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n        CoreRegisterLinker.setModuleManager(getManager());\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        service.addHandler(new MeshGRPCHandler(getManager()));\n    }\n","date":"2020-02-11 17:10:49","endLine":73,"groupId":"2524","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/59/3c9b986cb3dcc3c6b18f368e285d24bef78c6e.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        MeshDataBufferFileCache cache = new MeshDataBufferFileCache(config, getManager());\n        try {\n            cache.start();\n            TelemetryDataDispatcher.setCache(cache, getManager());\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n        CoreRegisterLinker.setModuleManager(getManager());\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        service.addHandler(new MeshGRPCHandler(getManager()));\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"MB"},{"authorDate":"2020-02-11 17:10:49","commitOrder":5,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        service.addHandler(new MetricServiceGRPCHandler(getManager()));\n        service.addHandler(new AccessLogServiceGRPCHandler(getManager(), config));\n    }\n","date":"2020-02-11 17:10:49","endLine":65,"groupId":"2524","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0d/57be1c3a5b61e8a701edd230889af666f51b8b.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        service.addHandler(new MetricServiceGRPCHandler(getManager()));\n        service.addHandler(new AccessLogServiceGRPCHandler(getManager(), config));\n    }\n","realPath":"oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"5b255ba3e3b50e0e0196b28cdca21dcd5c9c3da2","commitMessage":"@@@Set up more strict code styles and fix existing issues (#4337)\n\nMotivation:\n\nReview code styles with some bots automatically.\n\nModifications:\n\nSet up ReviewDog in GitHub Action to review code style.\n\nAdd more check rules to checkstyle plugin.\n\nResult:\n\nObvious code styles can be reviewed and commented automatically.","date":"2020-02-11 17:10:49","modifiedFileCount":"2429","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-05-08 23:53:49","commitOrder":6,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        \r\n        getManager().find(CoreModule.NAME)\n                    .provider()\n                    .getService(OALEngineLoaderService.class)\n                    .load(OfficialOALDefine.INSTANCE);\n\n        TelemetryDataDispatcher.init(getManager());\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        service.addHandler(new MeshGRPCHandler(getManager()));\n    }\n","date":"2020-05-08 23:53:49","endLine":72,"groupId":"3286","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/74/bd8d92364976a65dd546c22eb062d48c42dcd8.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        MeshDataBufferFileCache cache = new MeshDataBufferFileCache(config, getManager());\n        try {\n            cache.start();\n            TelemetryDataDispatcher.setCache(cache, getManager());\n        } catch (IOException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n        CoreRegisterLinker.setModuleManager(getManager());\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        service.addHandler(new MeshGRPCHandler(getManager()));\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-02-11 17:10:49","commitOrder":6,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        service.addHandler(new MetricServiceGRPCHandler(getManager()));\n        service.addHandler(new AccessLogServiceGRPCHandler(getManager(), config));\n    }\n","date":"2020-02-11 17:10:49","endLine":65,"groupId":"2524","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0d/57be1c3a5b61e8a701edd230889af666f51b8b.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        service.addHandler(new MetricServiceGRPCHandler(getManager()));\n        service.addHandler(new AccessLogServiceGRPCHandler(getManager(), config));\n    }\n","realPath":"oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"N"}],"commitId":"d4f3218dea29371fc23c66f5c72f5e48f88dd4be","commitMessage":"@@@Support define multiple OAL configuration (#4748)\n\n","date":"2020-05-08 23:53:49","modifiedFileCount":"25","status":"M","submitter":"zhang-wei"},{"authorTime":"2020-05-09 21:39:19","codes":[{"authorDate":"2020-05-09 21:39:19","commitOrder":7,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        \r\n        getManager().find(CoreModule.NAME)\n                    .provider()\n                    .getService(OALEngineLoaderService.class)\n                    .load(CoreOALDefine.INSTANCE);\n\n        TelemetryDataDispatcher.init(getManager());\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        service.addHandler(new MeshGRPCHandler(getManager()));\n    }\n","date":"2020-05-09 21:39:19","endLine":72,"groupId":"3286","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/89/e1eebd81fddc4e1453d6f958def9f724441f67.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        \r\n        getManager().find(CoreModule.NAME)\n                    .provider()\n                    .getService(OALEngineLoaderService.class)\n                    .load(OfficialOALDefine.INSTANCE);\n\n        TelemetryDataDispatcher.init(getManager());\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        service.addHandler(new MeshGRPCHandler(getManager()));\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-05-09 21:39:19","commitOrder":7,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        if (config.isAcceptMetricsService()) {\n            getManager().find(CoreModule.NAME)\n                        .provider()\n                        .getService(OALEngineLoaderService.class)\n                        .load(EnvoyOALDefine.INSTANCE);\n\n            service.addHandler(new MetricServiceGRPCHandler(getManager()));\n        }\n        service.addHandler(new AccessLogServiceGRPCHandler(getManager(), config));\n    }\n","date":"2020-05-09 21:39:19","endLine":74,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/28/a9126adc6b32fa21ba8c37383efd0e80b63604.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        service.addHandler(new MetricServiceGRPCHandler(getManager()));\n        service.addHandler(new AccessLogServiceGRPCHandler(getManager(), config));\n    }\n","realPath":"oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"28806998608b9d8d2eef6478e2c2724968553135","commitMessage":"@@@Make OAL controlled by the receivers. (#4767)\n\n* Split the official_analysis.oal into different parts\n\n* Add Envoy OAL define.\n\n* Fix license.","date":"2020-05-09 21:39:19","modifiedFileCount":"10","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-05-09 21:39:19","codes":[{"authorDate":"2020-12-18 12:29:44","commitOrder":8,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        \r\n        getManager().find(CoreModule.NAME)\n                    .provider()\n                    .getService(OALEngineLoaderService.class)\n                    .load(CoreOALDefine.INSTANCE);\n\n        TelemetryDataDispatcher.init(getManager());\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        MeshGRPCHandler meshGRPCHandler = new MeshGRPCHandler(getManager());\n        service.addHandler(meshGRPCHandler);\n        service.addHandler(new MeshGRPCHandlerCompat(meshGRPCHandler));\n    }\n","date":"2020-12-18 12:29:44","endLine":74,"groupId":"3286","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9a/e66e448a99f2169f6de8426e3695832adacaeb.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        \r\n        getManager().find(CoreModule.NAME)\n                    .provider()\n                    .getService(OALEngineLoaderService.class)\n                    .load(CoreOALDefine.INSTANCE);\n\n        TelemetryDataDispatcher.init(getManager());\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        service.addHandler(new MeshGRPCHandler(getManager()));\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-05-09 21:39:19","commitOrder":8,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        if (config.isAcceptMetricsService()) {\n            getManager().find(CoreModule.NAME)\n                        .provider()\n                        .getService(OALEngineLoaderService.class)\n                        .load(EnvoyOALDefine.INSTANCE);\n\n            service.addHandler(new MetricServiceGRPCHandler(getManager()));\n        }\n        service.addHandler(new AccessLogServiceGRPCHandler(getManager(), config));\n    }\n","date":"2020-05-09 21:39:19","endLine":74,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/28/a9126adc6b32fa21ba8c37383efd0e80b63604.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        if (config.isAcceptMetricsService()) {\n            getManager().find(CoreModule.NAME)\n                        .provider()\n                        .getService(OALEngineLoaderService.class)\n                        .load(EnvoyOALDefine.INSTANCE);\n\n            service.addHandler(new MetricServiceGRPCHandler(getManager()));\n        }\n        service.addHandler(new AccessLogServiceGRPCHandler(getManager(), config));\n    }\n","realPath":"oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"}],"commitId":"6feeaf6e5f95d75b09a1533aa34123ca7ea1f309","commitMessage":"@@@Update submodule to sync namespaced proto files (#6026)\n\n* update submodule to sync namespaced proto files\n\n* add compat E2E test and update mock collector\n\n* add changelog.  fix GHA syntax.  compat Java agent\n\n* highlight notes.  use archive dist.  revert compat in agent\n\n* polish changelog.  add missing `-javaagent` in provider\n\n* fix wrong position of JAVA_OPTS\n\n* polish changelog","date":"2020-12-18 12:29:44","modifiedFileCount":"8","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-01-01 21:48:38","codes":[{"authorDate":"2020-12-18 12:29:44","commitOrder":9,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        \r\n        getManager().find(CoreModule.NAME)\n                    .provider()\n                    .getService(OALEngineLoaderService.class)\n                    .load(CoreOALDefine.INSTANCE);\n\n        TelemetryDataDispatcher.init(getManager());\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        MeshGRPCHandler meshGRPCHandler = new MeshGRPCHandler(getManager());\n        service.addHandler(meshGRPCHandler);\n        service.addHandler(new MeshGRPCHandlerCompat(meshGRPCHandler));\n    }\n","date":"2020-12-18 12:29:44","endLine":74,"groupId":"3286","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9a/e66e448a99f2169f6de8426e3695832adacaeb.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        \r\n        getManager().find(CoreModule.NAME)\n                    .provider()\n                    .getService(OALEngineLoaderService.class)\n                    .load(CoreOALDefine.INSTANCE);\n\n        TelemetryDataDispatcher.init(getManager());\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        MeshGRPCHandler meshGRPCHandler = new MeshGRPCHandler(getManager());\n        service.addHandler(meshGRPCHandler);\n        service.addHandler(new MeshGRPCHandlerCompat(meshGRPCHandler));\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2021-01-01 21:48:38","commitOrder":9,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        if (config.isAcceptMetricsService()) {\n            getManager().find(CoreModule.NAME)\n                        .provider()\n                        .getService(OALEngineLoaderService.class)\n                        .load(EnvoyOALDefine.INSTANCE);\n\n            final MetricServiceGRPCHandler handler = new MetricServiceGRPCHandler(getManager());\n            service.addHandler(handler);\n            service.addHandler(new MetricServiceGRPCHandlerV3(handler));\n        }\n        final AccessLogServiceGRPCHandler handler = new AccessLogServiceGRPCHandler(getManager(), config);\n        service.addHandler(handler);\n        service.addHandler(new AccessLogServiceGRPCHandlerV3(handler));\n    }\n","date":"2021-01-01 21:48:38","endLine":78,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bb/bce0bf5efd006d06b25491c571f7e7a1eb6463.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        if (config.isAcceptMetricsService()) {\n            getManager().find(CoreModule.NAME)\n                        .provider()\n                        .getService(OALEngineLoaderService.class)\n                        .load(EnvoyOALDefine.INSTANCE);\n\n            service.addHandler(new MetricServiceGRPCHandler(getManager()));\n        }\n        service.addHandler(new AccessLogServiceGRPCHandler(getManager(), config));\n    }\n","realPath":"oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"61011635135cfe777370db59f0988d5a3c546dd2","commitMessage":"@@@Support Envoy {AccessLog. Metrics}Service API V3 (#6116)\n\n","date":"2021-01-01 21:48:38","modifiedFileCount":"11","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-01-02 14:34:54","codes":[{"authorDate":"2020-12-18 12:29:44","commitOrder":10,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        \r\n        getManager().find(CoreModule.NAME)\n                    .provider()\n                    .getService(OALEngineLoaderService.class)\n                    .load(CoreOALDefine.INSTANCE);\n\n        TelemetryDataDispatcher.init(getManager());\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        MeshGRPCHandler meshGRPCHandler = new MeshGRPCHandler(getManager());\n        service.addHandler(meshGRPCHandler);\n        service.addHandler(new MeshGRPCHandlerCompat(meshGRPCHandler));\n    }\n","date":"2020-12-18 12:29:44","endLine":74,"groupId":"3286","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9a/e66e448a99f2169f6de8426e3695832adacaeb.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        \r\n        getManager().find(CoreModule.NAME)\n                    .provider()\n                    .getService(OALEngineLoaderService.class)\n                    .load(CoreOALDefine.INSTANCE);\n\n        TelemetryDataDispatcher.init(getManager());\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        MeshGRPCHandler meshGRPCHandler = new MeshGRPCHandler(getManager());\n        service.addHandler(meshGRPCHandler);\n        service.addHandler(new MeshGRPCHandlerCompat(meshGRPCHandler));\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2021-01-02 14:34:54","commitOrder":10,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        if (config.isAcceptMetricsService()) {\n            final MetricServiceGRPCHandler handler = new MetricServiceGRPCHandler(getManager(), config);\n            service.addHandler(handler);\n            service.addHandler(new MetricServiceGRPCHandlerV3(handler));\n        }\n        final AccessLogServiceGRPCHandler handler = new AccessLogServiceGRPCHandler(getManager(), config);\n        service.addHandler(handler);\n        service.addHandler(new AccessLogServiceGRPCHandlerV3(handler));\n    }\n","date":"2021-01-02 14:34:54","endLine":79,"groupId":"6098","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1e/3d8c06c57d4de723d3538039554b8fd3a4d386.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        if (config.isAcceptMetricsService()) {\n            getManager().find(CoreModule.NAME)\n                        .provider()\n                        .getService(OALEngineLoaderService.class)\n                        .load(EnvoyOALDefine.INSTANCE);\n\n            final MetricServiceGRPCHandler handler = new MetricServiceGRPCHandler(getManager());\n            service.addHandler(handler);\n            service.addHandler(new MetricServiceGRPCHandlerV3(handler));\n        }\n        final AccessLogServiceGRPCHandler handler = new AccessLogServiceGRPCHandler(getManager(), config);\n        service.addHandler(handler);\n        service.addHandler(new AccessLogServiceGRPCHandlerV3(handler));\n    }\n","realPath":"oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"f54f639c4d9207c20490519121eeabe6acf37374","commitMessage":"@@@Enhance Envoy metrics service analyzer by MAL (#6091)\n\n","date":"2021-01-02 14:34:54","modifiedFileCount":"8","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-05-07 07:50:03","codes":[{"authorDate":"2020-12-18 12:29:44","commitOrder":11,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        \r\n        getManager().find(CoreModule.NAME)\n                    .provider()\n                    .getService(OALEngineLoaderService.class)\n                    .load(CoreOALDefine.INSTANCE);\n\n        TelemetryDataDispatcher.init(getManager());\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        MeshGRPCHandler meshGRPCHandler = new MeshGRPCHandler(getManager());\n        service.addHandler(meshGRPCHandler);\n        service.addHandler(new MeshGRPCHandlerCompat(meshGRPCHandler));\n    }\n","date":"2020-12-18 12:29:44","endLine":74,"groupId":"10923","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9a/e66e448a99f2169f6de8426e3695832adacaeb.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        \r\n        getManager().find(CoreModule.NAME)\n                    .provider()\n                    .getService(OALEngineLoaderService.class)\n                    .load(CoreOALDefine.INSTANCE);\n\n        TelemetryDataDispatcher.init(getManager());\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        MeshGRPCHandler meshGRPCHandler = new MeshGRPCHandler(getManager());\n        service.addHandler(meshGRPCHandler);\n        service.addHandler(new MeshGRPCHandlerCompat(meshGRPCHandler));\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-mesh-receiver-plugin/src/main/java/org/apache/skywalking/aop/server/receiver/mesh/MeshReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2021-05-07 07:50:03","commitOrder":11,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        if (!config.getAlsTCPAnalysis().isEmpty()) {\n            getManager().find(CoreModule.NAME)\n                        .provider()\n                        .getService(OALEngineLoaderService.class)\n                        .load(TCPOALDefine.INSTANCE);\n        }\n\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        if (config.isAcceptMetricsService()) {\n            final MetricServiceGRPCHandler handler = new MetricServiceGRPCHandler(getManager(), config);\n            service.addHandler(handler);\n            service.addHandler(new MetricServiceGRPCHandlerV3(handler));\n        }\n        final AccessLogServiceGRPCHandler handler = new AccessLogServiceGRPCHandler(getManager(), config);\n        service.addHandler(handler);\n        service.addHandler(new AccessLogServiceGRPCHandlerV3(handler));\n    }\n","date":"2021-05-07 07:50:03","endLine":87,"groupId":"10923","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/26/78f87dfd3be1301fc64f592410af3e330ead99.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        GRPCHandlerRegister service = getManager().find(SharingServerModule.NAME)\n                                                  .provider()\n                                                  .getService(GRPCHandlerRegister.class);\n        if (config.isAcceptMetricsService()) {\n            final MetricServiceGRPCHandler handler = new MetricServiceGRPCHandler(getManager(), config);\n            service.addHandler(handler);\n            service.addHandler(new MetricServiceGRPCHandlerV3(handler));\n        }\n        final AccessLogServiceGRPCHandler handler = new AccessLogServiceGRPCHandler(getManager(), config);\n        service.addHandler(handler);\n        service.addHandler(new AccessLogServiceGRPCHandlerV3(handler));\n    }\n","realPath":"oap-server/server-receiver-plugin/envoy-metrics-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/envoy/EnvoyMetricReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"3b15f8d132284c6eec6bb670341910b640cbc65d","commitMessage":"@@@feature: Envoy access log receiver supports TCP logs (#6727)\n\n","date":"2021-05-07 07:50:03","modifiedFileCount":"17","status":"M","submitter":"Zhenxu Ke"}]
