[{"authorTime":"2020-10-21 16:45:47","codes":[{"authorDate":"2020-09-04 14:49:47","commitOrder":4,"curCode":"    public void accept(final MeterEntity entity, final BucketedValues value) {\n        if (dataset.size() > 0) {\n            if (!value.isCompatible(dataset)) {\n                throw new IllegalArgumentException(\n                    \"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\" + dataset + \"]\");\n            }\n        }\n\n        this.entityId = entity.id();\n\n        final long[] values = value.getValues();\n        for (int i = 0; i < values.length; i++) {\n            final long bucket = value.getBuckets()[i];\n            String bucketName = bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n            final long bucketValue = values[i];\n            dataset.valueAccumulation(bucketName, bucketValue);\n        }\n    }\n","date":"2020-09-04 14:49:47","endLine":75,"groupId":"5180","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"accept","params":"(finalMeterEntityentity@finalBucketedValuesvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ce/23f279f6bed0a41d0df6a0f67bd193270c140b.src","preCode":"    public void accept(final MeterEntity entity, final BucketedValues value) {\n        if (dataset.size() > 0) {\n            if (!value.isCompatible(dataset)) {\n                throw new IllegalArgumentException(\n                    \"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\" + dataset + \"]\");\n            }\n        }\n\n        this.entityId = entity.id();\n\n        final long[] values = value.getValues();\n        for (int i = 0; i < values.length; i++) {\n            final long bucket = value.getBuckets()[i];\n            String bucketName = bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n            final long bucketValue = values[i];\n            dataset.valueAccumulation(bucketName, bucketValue);\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/HistogramFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"NB"},{"authorDate":"2020-10-21 16:45:47","commitOrder":4,"curCode":"    public void accept(final MeterEntity entity, final BucketedValues value) {\n        if (dataset.size() > 0) {\n            if (!value.isCompatible(dataset)) {\n                throw new IllegalArgumentException(\n                    \"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\" + dataset + \"]\");\n            }\n        }\n\n        this.entityId = entity.id();\n\n        String template = \"%s\";\n        if (!Strings.isNullOrEmpty(value.getGroup())) {\n            template   = value.getGroup() + \":%s\";\n        }\n        final long[] values = value.getValues();\n        for (int i = 0; i < values.length; i++) {\n            long bucket = value.getBuckets()[i];\n            String bucketName = bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n            String key = String.format(template, bucketName);\n            summation.valueAccumulation(key, values[i]);\n            count.valueAccumulation(key, 1L);\n        }\n    }\n","date":"2020-10-21 16:45:47","endLine":101,"groupId":"461","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"accept","params":"(finalMeterEntityentity@finalBucketedValuesvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3b/cbeb23fbfb6dc606d3105bc6252c9c0efab2e7.src","preCode":"    public void accept(final MeterEntity entity, final BucketedValues value) {\n        if (dataset.size() > 0) {\n            if (!value.isCompatible(dataset)) {\n                throw new IllegalArgumentException(\n                    \"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\" + dataset + \"]\");\n            }\n        }\n\n        this.entityId = entity.id();\n\n        String template = \"%s\";\n        if (!Strings.isNullOrEmpty(value.getGroup())) {\n            template   = value.getGroup() + \":%s\";\n        }\n        final long[] values = value.getValues();\n        for (int i = 0; i < values.length; i++) {\n            long bucket = value.getBuckets()[i];\n            String bucketName = bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n            String key = String.format(template, bucketName);\n            summation.valueAccumulation(key, values[i]);\n            count.valueAccumulation(key, 1L);\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"}],"commitId":"9ce47d5bdc9e614885066d66384ee6092604efba","commitMessage":"@@@Meter Analysis Language (#5531)\n\n","date":"2020-10-21 16:45:47","modifiedFileCount":"7","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2021-03-16 10:26:33","codes":[{"authorDate":"2020-09-04 14:49:47","commitOrder":5,"curCode":"    public void accept(final MeterEntity entity, final BucketedValues value) {\n        if (dataset.size() > 0) {\n            if (!value.isCompatible(dataset)) {\n                throw new IllegalArgumentException(\n                    \"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\" + dataset + \"]\");\n            }\n        }\n\n        this.entityId = entity.id();\n\n        final long[] values = value.getValues();\n        for (int i = 0; i < values.length; i++) {\n            final long bucket = value.getBuckets()[i];\n            String bucketName = bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n            final long bucketValue = values[i];\n            dataset.valueAccumulation(bucketName, bucketValue);\n        }\n    }\n","date":"2020-09-04 14:49:47","endLine":75,"groupId":"10420","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"accept","params":"(finalMeterEntityentity@finalBucketedValuesvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ce/23f279f6bed0a41d0df6a0f67bd193270c140b.src","preCode":"    public void accept(final MeterEntity entity, final BucketedValues value) {\n        if (dataset.size() > 0) {\n            if (!value.isCompatible(dataset)) {\n                throw new IllegalArgumentException(\n                    \"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\" + dataset + \"]\");\n            }\n        }\n\n        this.entityId = entity.id();\n\n        final long[] values = value.getValues();\n        for (int i = 0; i < values.length; i++) {\n            final long bucket = value.getBuckets()[i];\n            String bucketName = bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n            final long bucketValue = values[i];\n            dataset.valueAccumulation(bucketName, bucketValue);\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/HistogramFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"N"},{"authorDate":"2021-03-16 10:26:33","commitOrder":5,"curCode":"    public void accept(final MeterEntity entity, final BucketedValues value) {\n        if (dataset.size() > 0) {\n            if (!value.isCompatible(dataset)) {\n                throw new IllegalArgumentException(\n                    \"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\" + dataset + \"]\");\n            }\n        }\n\n        this.entityId = entity.id();\n\n        final long[] values = value.getValues();\n        for (int i = 0; i < values.length; i++) {\n            long bucket = value.getBuckets()[i];\n            String bucketName = bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n            summation.valueAccumulation(bucketName, values[i]);\n            count.valueAccumulation(bucketName, 1L);\n        }\n    }\n","date":"2021-03-16 10:26:33","endLine":95,"groupId":"10420","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"accept","params":"(finalMeterEntityentity@finalBucketedValuesvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2f/efde8b9a251c14632ce48c0c45d8fbe6ca4de2.src","preCode":"    public void accept(final MeterEntity entity, final BucketedValues value) {\n        if (dataset.size() > 0) {\n            if (!value.isCompatible(dataset)) {\n                throw new IllegalArgumentException(\n                    \"Incompatible BucketedValues [\" + value + \"] for current HistogramFunction[\" + dataset + \"]\");\n            }\n        }\n\n        this.entityId = entity.id();\n\n        String template = \"%s\";\n        if (!Strings.isNullOrEmpty(value.getGroup())) {\n            template   = value.getGroup() + \":%s\";\n        }\n        final long[] values = value.getValues();\n        for (int i = 0; i < values.length; i++) {\n            long bucket = value.getBuckets()[i];\n            String bucketName = bucket == Long.MIN_VALUE ? Bucket.INFINITE_NEGATIVE : String.valueOf(bucket);\n            String key = String.format(template, bucketName);\n            summation.valueAccumulation(key, values[i]);\n            count.valueAccumulation(key, 1L);\n        }\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"af6f7d2c3437516ebf80dfdb865e431745112db1","commitMessage":"@@@Remove group concept from AvgHistogramFunction (#6552)\n\n","date":"2021-03-16 10:26:33","modifiedFileCount":"3","status":"M","submitter":"?? Wu Sheng"}]
