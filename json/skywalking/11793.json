[{"authorTime":"2021-05-19 14:14:48","codes":[{"authorDate":"2021-05-19 14:14:48","commitOrder":2,"curCode":"    public Events queryEvents(final EventQueryCondition condition) throws Exception {\n        final Tuple2<Stream<String>, Stream<Object>> conditionsParametersPair = buildQuery(condition);\n        final Stream<String> conditions = conditionsParametersPair._1();\n        final Object[] parameters = conditionsParametersPair._2().toArray();\n        final String whereClause = conditions.collect(Collectors.joining(\" and \", \" where \", \"\"));\n\n        final Events result = new Events();\n\n        try (final Connection connection = client.getConnection()) {\n            String sql = \"select count(1) total from \" + Event.INDEX_NAME + whereClause;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Count SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                if (!resultSet.next()) {\n                    return result;\n                }\n                result.setTotal(resultSet.getInt(\"total\"));\n            }\n\n            sql = \"select * from \" + Event.INDEX_NAME + whereClause + \" limit \" + condition.getSize();\n            if (log.isDebugEnabled()) {\n                log.debug(\"Query SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                while (resultSet.next()) {\n                    result.getEvents().add(parseResultSet(resultSet));\n                }\n            }\n        }\n\n        return result;\n    }\n","date":"2021-05-19 14:14:48","endLine":80,"groupId":"519","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"queryEvents","params":"(finalEventQueryConditioncondition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/43/d8f95111786d8ae9c90151fb16c6e14a4f7265.src","preCode":"    public Events queryEvents(final EventQueryCondition condition) throws Exception {\n        final Tuple2<Stream<String>, Stream<Object>> conditionsParametersPair = buildQuery(condition);\n        final Stream<String> conditions = conditionsParametersPair._1();\n        final Object[] parameters = conditionsParametersPair._2().toArray();\n        final String whereClause = conditions.collect(Collectors.joining(\" and \", \" where \", \"\"));\n\n        final Events result = new Events();\n\n        try (final Connection connection = client.getConnection()) {\n            String sql = \"select count(1) total from \" + Event.INDEX_NAME + whereClause;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Count SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                if (!resultSet.next()) {\n                    return result;\n                }\n                result.setTotal(resultSet.getInt(\"total\"));\n            }\n\n            sql = \"select * from \" + Event.INDEX_NAME + whereClause + \" limit \" + condition.getSize();\n            if (log.isDebugEnabled()) {\n                log.debug(\"Query SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                while (resultSet.next()) {\n                    result.getEvents().add(parseResultSet(resultSet));\n                }\n            }\n        }\n\n        return result;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2EventQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"MB"},{"authorDate":"2021-05-19 14:14:48","commitOrder":2,"curCode":"    public Events queryEvents(List<EventQueryCondition> conditions) throws Exception {\n        final List<Tuple2<Stream<String>, Stream<Object>>> conditionsParametersPair = conditions.stream()\n                                                                                                .map(this::buildQuery)\n                                                                                                .collect(Collectors.toList());\n        final Object[] parameters = conditionsParametersPair.stream()\n                                                            .map(Tuple2::_2)\n                                                            .reduce(Stream.empty(), Stream::concat)\n                                                            .toArray();\n        final String whereClause = conditionsParametersPair.stream()\n                                                       .map(Tuple2::_1)\n                                                       .map(it -> it.collect(Collectors.joining(\" and \")))\n                                                       .collect(Collectors.joining(\" or \", \" where \", \"\"));\n        final int size = conditions.stream().mapToInt(EventQueryCondition::getSize).sum();\n\n        final Events result = new Events();\n        try (final Connection connection = client.getConnection()) {\n            String sql = \"select count(1) total from \" + Event.INDEX_NAME + whereClause;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Count SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                if (!resultSet.next()) {\n                    return result;\n                }\n                result.setTotal(resultSet.getInt(\"total\"));\n            }\n            sql = \"select * from \" + Event.INDEX_NAME + whereClause + \" limit \" + size;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Query SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                while (resultSet.next()) {\n                    result.getEvents().add(parseResultSet(resultSet));\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-05-19 14:14:48","endLine":120,"groupId":"4914","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"queryEvents","params":"(List<EventQueryCondition>conditions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/43/d8f95111786d8ae9c90151fb16c6e14a4f7265.src","preCode":"    public Events queryEvents(List<EventQueryCondition> conditions) throws Exception {\n        final List<Tuple2<Stream<String>, Stream<Object>>> conditionsParametersPair = conditions.stream()\n                                                                                                .map(this::buildQuery)\n                                                                                                .collect(Collectors.toList());\n        final Object[] parameters = conditionsParametersPair.stream()\n                                                            .map(Tuple2::_2)\n                                                            .reduce(Stream.empty(), Stream::concat)\n                                                            .toArray();\n        final String whereClause = conditionsParametersPair.stream()\n                                                       .map(Tuple2::_1)\n                                                       .map(it -> it.collect(Collectors.joining(\" and \")))\n                                                       .collect(Collectors.joining(\" or \", \" where \", \"\"));\n        final int size = conditions.stream().mapToInt(EventQueryCondition::getSize).sum();\n\n        final Events result = new Events();\n        try (final Connection connection = client.getConnection()) {\n            String sql = \"select count(1) total from \" + Event.INDEX_NAME + whereClause;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Count SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                if (!resultSet.next()) {\n                    return result;\n                }\n                result.setTotal(resultSet.getInt(\"total\"));\n            }\n            sql = \"select * from \" + Event.INDEX_NAME + whereClause + \" limit \" + size;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Query SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                while (resultSet.next()) {\n                    result.getEvents().add(parseResultSet(resultSet));\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2EventQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"bb590daba99e25e78c98a9601fae46e63fc5efa6","commitMessage":"@@@Include event(s) to alarms. (#6888)\n\nCo-authored-by: kezhenxu94 <kezhenxu94@apache.org>\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>","date":"2021-05-19 14:14:48","modifiedFileCount":"19","status":"M","submitter":"chen~"},{"authorTime":"2021-07-09 23:04:50","codes":[{"authorDate":"2021-07-09 23:04:50","commitOrder":3,"curCode":"    public Events queryEvents(final EventQueryCondition condition) throws Exception {\n        final Tuple2<Stream<String>, Stream<Object>> conditionsParametersPair = buildQuery(condition);\n        final Stream<String> conditions = conditionsParametersPair._1();\n        final Object[] parameters = conditionsParametersPair._2().toArray();\n        final String whereClause = conditions.collect(Collectors.joining(\" and \", \" where \", \"\"));\n\n        final Events result = new Events();\n\n        try (final Connection connection = client.getConnection()) {\n            String sql = \"select count(1) total from \" + Event.INDEX_NAME + whereClause;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Count SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                if (!resultSet.next()) {\n                    return result;\n                }\n                result.setTotal(resultSet.getInt(\"total\"));\n            }\n\n            PaginationUtils.Page page = PaginationUtils.INSTANCE.exchange(condition.getPaging());\n\n            sql = \"select * from \" + Event.INDEX_NAME + whereClause\n                + \" limit \" + page.getLimit() + \" offset \" + page.getFrom();\n            if (log.isDebugEnabled()) {\n                log.debug(\"Query SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                while (resultSet.next()) {\n                    result.getEvents().add(parseResultSet(resultSet));\n                }\n            }\n        }\n\n        return result;\n    }\n","date":"2021-07-09 23:04:50","endLine":85,"groupId":"519","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"queryEvents","params":"(finalEventQueryConditioncondition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/34/442689f08333af2b59566bc75c7ab802f4da51.src","preCode":"    public Events queryEvents(final EventQueryCondition condition) throws Exception {\n        final Tuple2<Stream<String>, Stream<Object>> conditionsParametersPair = buildQuery(condition);\n        final Stream<String> conditions = conditionsParametersPair._1();\n        final Object[] parameters = conditionsParametersPair._2().toArray();\n        final String whereClause = conditions.collect(Collectors.joining(\" and \", \" where \", \"\"));\n\n        final Events result = new Events();\n\n        try (final Connection connection = client.getConnection()) {\n            String sql = \"select count(1) total from \" + Event.INDEX_NAME + whereClause;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Count SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                if (!resultSet.next()) {\n                    return result;\n                }\n                result.setTotal(resultSet.getInt(\"total\"));\n            }\n\n            sql = \"select * from \" + Event.INDEX_NAME + whereClause + \" limit \" + condition.getSize();\n            if (log.isDebugEnabled()) {\n                log.debug(\"Query SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                while (resultSet.next()) {\n                    result.getEvents().add(parseResultSet(resultSet));\n                }\n            }\n        }\n\n        return result;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2EventQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2021-07-09 23:04:50","commitOrder":3,"curCode":"    public Events queryEvents(List<EventQueryCondition> conditions) throws Exception {\n        final List<Tuple2<Stream<String>, Stream<Object>>> conditionsParametersPair = conditions.stream()\n                                                                                                .map(this::buildQuery)\n                                                                                                .collect(Collectors.toList());\n        final Object[] parameters = conditionsParametersPair.stream()\n                                                            .map(Tuple2::_2)\n                                                            .reduce(Stream.empty(), Stream::concat)\n                                                            .toArray();\n        final String whereClause = conditionsParametersPair.stream()\n                                                       .map(Tuple2::_1)\n                                                       .map(it -> it.collect(Collectors.joining(\" and \")))\n                                                       .collect(Collectors.joining(\" or \", \" where \", \"\"));\n        final int size = conditions.stream().map(EventQueryCondition::getPaging)\n                                   .mapToInt(Pagination::getPageSize).sum();\n\n        final Events result = new Events();\n        try (final Connection connection = client.getConnection()) {\n            String sql = \"select count(1) total from \" + Event.INDEX_NAME + whereClause;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Count SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                if (!resultSet.next()) {\n                    return result;\n                }\n                result.setTotal(resultSet.getInt(\"total\"));\n            }\n            sql = \"select * from \" + Event.INDEX_NAME + whereClause + \" limit \" + size;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Query SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                while (resultSet.next()) {\n                    result.getEvents().add(parseResultSet(resultSet));\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-07-09 23:04:50","endLine":126,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"queryEvents","params":"(List<EventQueryCondition>conditions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/34/442689f08333af2b59566bc75c7ab802f4da51.src","preCode":"    public Events queryEvents(List<EventQueryCondition> conditions) throws Exception {\n        final List<Tuple2<Stream<String>, Stream<Object>>> conditionsParametersPair = conditions.stream()\n                                                                                                .map(this::buildQuery)\n                                                                                                .collect(Collectors.toList());\n        final Object[] parameters = conditionsParametersPair.stream()\n                                                            .map(Tuple2::_2)\n                                                            .reduce(Stream.empty(), Stream::concat)\n                                                            .toArray();\n        final String whereClause = conditionsParametersPair.stream()\n                                                       .map(Tuple2::_1)\n                                                       .map(it -> it.collect(Collectors.joining(\" and \")))\n                                                       .collect(Collectors.joining(\" or \", \" where \", \"\"));\n        final int size = conditions.stream().mapToInt(EventQueryCondition::getSize).sum();\n\n        final Events result = new Events();\n        try (final Connection connection = client.getConnection()) {\n            String sql = \"select count(1) total from \" + Event.INDEX_NAME + whereClause;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Count SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                if (!resultSet.next()) {\n                    return result;\n                }\n                result.setTotal(resultSet.getInt(\"total\"));\n            }\n            sql = \"select * from \" + Event.INDEX_NAME + whereClause + \" limit \" + size;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Query SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                while (resultSet.next()) {\n                    result.getEvents().add(parseResultSet(resultSet));\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2EventQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"d79094c1786b5772514a89e17a259efb230efa6e","commitMessage":"@@@Add pagination to event query (#7274)\n\n","date":"2021-07-09 23:04:50","modifiedFileCount":"10","status":"M","submitter":"kezhenxu94"},{"authorTime":"2021-09-15 19:58:41","codes":[{"authorDate":"2021-09-15 19:58:41","commitOrder":4,"curCode":"    public Events queryEvents(final EventQueryCondition condition) throws Exception {\n        final Tuple2<Stream<String>, Stream<Object>> conditionsParametersPair = buildQuery(condition);\n        final Stream<String> conditions = conditionsParametersPair._1();\n        final Object[] parameters = conditionsParametersPair._2().toArray();\n        final String whereClause = conditions.collect(Collectors.joining(\" and \", \" where \", \"\"));\n\n        final Events result = new Events();\n\n        try (final Connection connection = client.getConnection()) {\n            String sql = \"select count(1) total from \" + Event.INDEX_NAME + whereClause;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Count SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                if (!resultSet.next()) {\n                    return result;\n                }\n                result.setTotal(resultSet.getInt(\"total\"));\n            }\n\n            final Order queryOrder = isNull(condition.getOrder()) ? Order.DES : condition.getOrder();\n            final PaginationUtils.Page page = PaginationUtils.INSTANCE.exchange(condition.getPaging());\n            sql = \"select * from \" + Event.INDEX_NAME + whereClause;\n            if (Order.DES.equals(queryOrder)) {\n                sql += \" order by \" + Event.START_TIME + \" desc\";\n            } else {\n                sql += \" order by \" + Event.START_TIME + \" asc\";\n            }\n            sql += \" limit \" + page.getLimit() + \" offset \" + page.getFrom();\n            if (log.isDebugEnabled()) {\n                log.debug(\"Query SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                while (resultSet.next()) {\n                    result.getEvents().add(parseResultSet(resultSet));\n                }\n            }\n        }\n\n        return result;\n    }\n","date":"2021-09-15 19:58:41","endLine":92,"groupId":"11793","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"queryEvents","params":"(finalEventQueryConditioncondition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e6/b5c108f5872096adc5e44f6fe3f4fe51c0482e.src","preCode":"    public Events queryEvents(final EventQueryCondition condition) throws Exception {\n        final Tuple2<Stream<String>, Stream<Object>> conditionsParametersPair = buildQuery(condition);\n        final Stream<String> conditions = conditionsParametersPair._1();\n        final Object[] parameters = conditionsParametersPair._2().toArray();\n        final String whereClause = conditions.collect(Collectors.joining(\" and \", \" where \", \"\"));\n\n        final Events result = new Events();\n\n        try (final Connection connection = client.getConnection()) {\n            String sql = \"select count(1) total from \" + Event.INDEX_NAME + whereClause;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Count SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                if (!resultSet.next()) {\n                    return result;\n                }\n                result.setTotal(resultSet.getInt(\"total\"));\n            }\n\n            PaginationUtils.Page page = PaginationUtils.INSTANCE.exchange(condition.getPaging());\n\n            sql = \"select * from \" + Event.INDEX_NAME + whereClause\n                + \" limit \" + page.getLimit() + \" offset \" + page.getFrom();\n            if (log.isDebugEnabled()) {\n                log.debug(\"Query SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                while (resultSet.next()) {\n                    result.getEvents().add(parseResultSet(resultSet));\n                }\n            }\n        }\n\n        return result;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2EventQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2021-09-15 19:58:41","commitOrder":4,"curCode":"    public Events queryEvents(List<EventQueryCondition> conditions) throws Exception {\n        final List<Tuple2<Stream<String>, Stream<Object>>> conditionsParametersPair = conditions.stream()\n                                                                                                .map(this::buildQuery)\n                                                                                                .collect(Collectors.toList());\n        final Object[] parameters = conditionsParametersPair.stream()\n                                                            .map(Tuple2::_2)\n                                                            .reduce(Stream.empty(), Stream::concat)\n                                                            .toArray();\n        final String whereClause = conditionsParametersPair.stream()\n                                                       .map(Tuple2::_1)\n                                                       .map(it -> it.collect(Collectors.joining(\" and \")))\n                                                       .collect(Collectors.joining(\" or \", \" where \", \"\"));\n\n        final Events result = new Events();\n        try (final Connection connection = client.getConnection()) {\n            String sql = \"select count(1) total from \" + Event.INDEX_NAME + whereClause;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Count SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                if (!resultSet.next()) {\n                    return result;\n                }\n                result.setTotal(resultSet.getInt(\"total\"));\n            }\n\n            EventQueryCondition condition = conditions.get(0);\n            final Order queryOrder = isNull(condition.getOrder()) ? Order.DES : condition.getOrder();\n            final PaginationUtils.Page page = PaginationUtils.INSTANCE.exchange(condition.getPaging());\n            sql = \"select * from \" + Event.INDEX_NAME + whereClause;\n            if (Order.DES.equals(queryOrder)) {\n                sql += \" order by \" + Event.START_TIME + \" desc\";\n            } else {\n                sql += \" order by \" + Event.START_TIME + \" asc\";\n            }\n            sql += \" limit \" + page.getLimit() + \" offset \" + page.getFrom();\n            if (log.isDebugEnabled()) {\n                log.debug(\"Query SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                while (resultSet.next()) {\n                    result.getEvents().add(parseResultSet(resultSet));\n                }\n            }\n        }\n        return result;\n    }\n","date":"2021-09-15 19:58:41","endLine":141,"groupId":"11793","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"queryEvents","params":"(List<EventQueryCondition>conditions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e6/b5c108f5872096adc5e44f6fe3f4fe51c0482e.src","preCode":"    public Events queryEvents(List<EventQueryCondition> conditions) throws Exception {\n        final List<Tuple2<Stream<String>, Stream<Object>>> conditionsParametersPair = conditions.stream()\n                                                                                                .map(this::buildQuery)\n                                                                                                .collect(Collectors.toList());\n        final Object[] parameters = conditionsParametersPair.stream()\n                                                            .map(Tuple2::_2)\n                                                            .reduce(Stream.empty(), Stream::concat)\n                                                            .toArray();\n        final String whereClause = conditionsParametersPair.stream()\n                                                       .map(Tuple2::_1)\n                                                       .map(it -> it.collect(Collectors.joining(\" and \")))\n                                                       .collect(Collectors.joining(\" or \", \" where \", \"\"));\n        final int size = conditions.stream().map(EventQueryCondition::getPaging)\n                                   .mapToInt(Pagination::getPageSize).sum();\n\n        final Events result = new Events();\n        try (final Connection connection = client.getConnection()) {\n            String sql = \"select count(1) total from \" + Event.INDEX_NAME + whereClause;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Count SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                if (!resultSet.next()) {\n                    return result;\n                }\n                result.setTotal(resultSet.getInt(\"total\"));\n            }\n            sql = \"select * from \" + Event.INDEX_NAME + whereClause + \" limit \" + size;\n            if (log.isDebugEnabled()) {\n                log.debug(\"Query SQL: {}, parameters: {}\", sql, parameters);\n            }\n            try (final ResultSet resultSet = client.executeQuery(connection, sql, parameters)) {\n                while (resultSet.next()) {\n                    result.getEvents().add(parseResultSet(resultSet));\n                }\n            }\n        }\n        return result;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2EventQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"08990c90694d440c43e7846f995cfb89ec476045","commitMessage":"@@@Fix H2EventQueryDAO doesn't sort data by Event.START_TIME and uses a wrong pagination query (#7720)\n\n* Fix H2EventQueryDAO doesn't sort data by Event.START_TIME.\n\n* Fix H2EventQueryDAO uses a wrong pagination query.\n","date":"2021-09-15 19:58:41","modifiedFileCount":"1","status":"M","submitter":"??"}]
