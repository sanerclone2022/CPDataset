[{"authorTime":"2020-11-22 23:28:54","codes":[{"authorDate":"2020-10-21 12:23:32","commitOrder":36,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","date":"2020-10-21 12:23:32","endLine":191,"groupId":"2806","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/58/67bae80c62bffb342ac18fa8ee075f4992f870.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"NB"},{"authorDate":"2020-11-22 23:28:54","commitOrder":36,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n    }\n","date":"2020-11-22 23:28:54","endLine":141,"groupId":"143","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/30/d4fa8571875c9a13f148bee9db7e98e2707fb8.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-tidb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/tidb/TiDBStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"}],"commitId":"8d164d3dd8c35cdafe683abc7fd9f4e4b530808f","commitMessage":"@@@Add Tidb provider module. (#5844)\n\n* fix transaction too large error when use TiDB as storage\n\n* add CHANGES.md\n\n* fix typo\n\n* add tidb storage provider module.\n\n* add e2e.\n\n* revert ui submodule.\n\n* fix license.\n\n* Fix wrong health check test\n\n* add tidb ttl e2e.\n\nCo-authored-by: moonsphere <moonsphere@m.com>\nCo-authored-by: kezhenxu94 <kezhenxu94@apache.org>\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>","date":"2020-11-22 23:28:54","modifiedFileCount":"3","status":"M","submitter":"Jared Tan"},{"authorTime":"2021-01-14 09:49:11","codes":[{"authorDate":"2020-10-21 12:23:32","commitOrder":37,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","date":"2020-10-21 12:23:32","endLine":191,"groupId":"2806","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/58/67bae80c62bffb342ac18fa8ee075f4992f870.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"N"},{"authorDate":"2021-01-14 09:49:11","commitOrder":37,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n    }\n","date":"2021-01-14 09:49:11","endLine":149,"groupId":"143","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5d/9557fd3572cf42178fd47b395536cd7c789021.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-tidb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/tidb/TiDBStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"15452025c65dd6934bd9d6c8a930961b0f960594","commitMessage":"@@@Log collecting and query implementation (#6120)\n\n","date":"2021-01-14 09:49:11","modifiedFileCount":"51","status":"M","submitter":"zhang-wei"},{"authorTime":"2021-02-05 18:37:18","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":38,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-02-05 18:37:18","endLine":195,"groupId":"2806","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b7/72e575a941db3302c7235b8d1e5dae0e331d62.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"},{"authorDate":"2021-02-05 18:37:18","commitOrder":38,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","date":"2021-02-05 18:37:18","endLine":153,"groupId":"143","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/aa/da597d68515d6326bcef9ff474bbcae2c68b00.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-tidb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/tidb/TiDBStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"b92eac2cd6bf8774860b921ea04bafd59550a607","commitMessage":"@@@Add a new concept \"Event\" and its implementations to collect events (#6183)\n\n","date":"2021-02-05 18:37:18","modifiedFileCount":"15","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-02-07 10:37:14","codes":[{"authorDate":"2021-02-07 10:37:14","commitOrder":39,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-02-07 10:37:14","endLine":198,"groupId":"2806","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9a/3f6ae275461a5cf73c79f3edb085ca4dd210de.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2021-02-07 10:37:14","commitOrder":39,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","date":"2021-02-07 10:37:14","endLine":156,"groupId":"143","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0b/fc9d884ae20cff362e1e97be94df08f578063f.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-tidb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/tidb/TiDBStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"5e8f1eb5528911f924ffca451af20dcdf6151971","commitMessage":"@@@Support multiple implementations of StorageBuilder in different storage implementations - stage 2 (#6336)\n\n","date":"2021-02-07 10:37:14","modifiedFileCount":"16","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-02-07 10:37:14","codes":[{"authorDate":"2021-03-11 15:11:37","commitOrder":40,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-03-11 15:11:37","endLine":203,"groupId":"2806","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c8/875a0cb2644c560b9806fe2938934af5ee2468.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (!StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n\n        this.registerServiceImplementation(\n            IBatchDAO.class, new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests()));\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-02-07 10:37:14","commitOrder":40,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","date":"2021-02-07 10:37:14","endLine":156,"groupId":"143","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0b/fc9d884ae20cff362e1e97be94df08f578063f.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-tidb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/tidb/TiDBStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"}],"commitId":"fd1d21021f8f3abd66f957ff8484a0e2c29ceb36","commitMessage":"@@@[Incompatible Enhancement]New index policy of ElasticSearch storage option (#6499)\n\n","date":"2021-03-11 15:11:37","modifiedFileCount":"39","status":"M","submitter":"Evan"},{"authorTime":"2021-02-07 10:37:14","codes":[{"authorDate":"2021-04-02 11:33:46","commitOrder":41,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(),  config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-04-02 11:33:46","endLine":203,"groupId":"1353","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5b/8019f457a656424c39c1106db32e16369882b3.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config.getSyncBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-02-07 10:37:14","commitOrder":41,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","date":"2021-02-07 10:37:14","endLine":156,"groupId":"143","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0b/fc9d884ae20cff362e1e97be94df08f578063f.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-tidb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/tidb/TiDBStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"}],"commitId":"2af77d4d039d23e64ae92303a46c6c3f9c4c861d","commitMessage":"@@@make sync metrics concurrency (#6642)\n\n* make sync metrics concurrency\n\n* add changelog\n\n* add changelog\n\n* polish codes\n\n* change default value\n\n* remove unnecessary codes\n\nCo-authored-by: Evan <evanljp@outlook.com>\nCo-authored-by: Zhenxu Ke <kezhenxu94@apache.org>\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>","date":"2021-04-02 11:33:46","modifiedFileCount":"6","status":"M","submitter":"Evan"},{"authorTime":"2021-04-25 17:22:43","codes":[{"authorDate":"2021-04-02 11:33:46","commitOrder":42,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(),  config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-04-02 11:33:46","endLine":203,"groupId":"1353","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5b/8019f457a656424c39c1106db32e16369882b3.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(),  config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"},{"authorDate":"2021-04-25 17:22:43","commitOrder":42,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","date":"2021-04-25 17:22:43","endLine":160,"groupId":"5208","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/d057cab79db1a0444b8f6ac035c7c485a9e675.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-tidb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/tidb/TiDBStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"7a533313676579da1321c0177c10fc237a052cbe","commitMessage":"@@@Support alarm tags (#6820)\n\n","date":"2021-04-25 17:22:43","modifiedFileCount":"42","status":"M","submitter":"liqiangz"},{"authorTime":"2021-04-25 17:22:43","codes":[{"authorDate":"2021-07-01 08:20:59","commitOrder":43,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace()), config.getConnectTimeout(), config.getSocketTimeout()\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-07-01 08:20:59","endLine":203,"groupId":"4175","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ce/76619b97c023604cd2de9fb0df071f6e389dfc.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace())\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(),  config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-04-25 17:22:43","commitOrder":43,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","date":"2021-04-25 17:22:43","endLine":160,"groupId":"5208","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/d057cab79db1a0444b8f6ac035c7c485a9e675.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-tidb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/tidb/TiDBStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"}],"commitId":"536b7d2328e836b3ba82347aa9a907d4944ece6b","commitMessage":"@@@Support connectTimeout and socketTimeout settings (#7214)\n\n","date":"2021-07-01 08:20:59","modifiedFileCount":"6","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-04-25 17:22:43","codes":[{"authorDate":"2021-09-06 15:21:35","commitOrder":44,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverter(config.getNameSpace()), config.getConnectTimeout(),\n            config.getSocketTimeout(), config.getNumHttpClientThread()\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-09-06 15:21:35","endLine":196,"groupId":"4175","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/88/b863598747fc41607b929303c7cd64b90d434a.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverters(config.getNameSpace()), config.getConnectTimeout(), config.getSocketTimeout()\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2021-04-25 17:22:43","commitOrder":44,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","date":"2021-04-25 17:22:43","endLine":160,"groupId":"5208","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/d057cab79db1a0444b8f6ac035c7c485a9e675.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-tidb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/tidb/TiDBStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"}],"commitId":"26b81a2e5991ecdd2bde0f7071264cb80bb235cf","commitMessage":"@@@Rebuilt ElasticSearch client on top of their REST API (#7634)\n\n","date":"2021-09-06 15:21:35","modifiedFileCount":"60","status":"M","submitter":"kezhenxu94"},{"authorTime":"2021-04-25 17:22:43","codes":[{"authorDate":"2021-09-08 12:00:19","commitOrder":45,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNamespace())) {\n            config.setNamespace(\"sw\");\n        } else {\n            config.setNamespace(config.getNamespace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverter(config.getNamespace()), config.getConnectTimeout(),\n            config.getSocketTimeout(), config.getNumHttpClientThread()\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-09-08 12:00:19","endLine":196,"groupId":"4175","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b7/1246e7df4b372aca3232d6a5800f44bdf9c034.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNameSpace())) {\n            config.setNameSpace(\"sw\");\n        } else {\n            config.setNameSpace(config.getNameSpace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverter(config.getNameSpace()), config.getConnectTimeout(),\n            config.getSocketTimeout(), config.getNumHttpClientThread()\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2021-04-25 17:22:43","commitOrder":45,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","date":"2021-04-25 17:22:43","endLine":160,"groupId":"5208","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/d057cab79db1a0444b8f6ac035c7c485a9e675.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-tidb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/tidb/TiDBStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"}],"commitId":"4a344b01e9ad103b1cfda3e56d774dd4778c77de","commitMessage":"@@@Unified the config word `namespace` in the project (#7676)\n\n","date":"2021-09-08 12:00:19","modifiedFileCount":"12","status":"M","submitter":"wankai123"},{"authorTime":"2021-09-17 00:05:18","codes":[{"authorDate":"2021-09-08 12:00:19","commitOrder":46,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNamespace())) {\n            config.setNamespace(\"sw\");\n        } else {\n            config.setNamespace(config.getNamespace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverter(config.getNamespace()), config.getConnectTimeout(),\n            config.getSocketTimeout(), config.getNumHttpClientThread()\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","date":"2021-09-08 12:00:19","endLine":196,"groupId":"10835","id":21,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b7/1246e7df4b372aca3232d6a5800f44bdf9c034.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        if (StringUtil.isEmpty(config.getNamespace())) {\n            config.setNamespace(\"sw\");\n        } else {\n            config.setNamespace(config.getNamespace().toLowerCase());\n        }\n        if (config.getDayStep() > 1) {\n            TimeSeriesUtils.setDAY_STEP(config.getDayStep());\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getDayStep());\n        }\n        if (config.getSuperDatasetDayStep() > 0) {\n            TimeSeriesUtils.setSUPER_DATASET_DAY_STEP(config.getSuperDatasetDayStep());\n        }\n\n        if (!StringUtil.isEmpty(config.getSecretsManagementFile())) {\n            MultipleFilesChangeMonitor monitor = new MultipleFilesChangeMonitor(\n                10, readableContents -> {\n                final byte[] secretsFileContent = readableContents.get(0);\n                if (secretsFileContent == null) {\n                    return;\n                }\n                Properties secrets = new Properties();\n                secrets.load(new ByteArrayInputStream(secretsFileContent));\n                config.setUser(secrets.getProperty(\"user\", null));\n                config.setPassword(secrets.getProperty(\"password\", null));\n                config.setTrustStorePass(secrets.getProperty(\"trustStorePass\", null));\n\n                if (elasticSearchClient == null) {\n                    \r\n                } else {\n                    \r\n                    elasticSearchClient.setUser(config.getUser());\n                    elasticSearchClient.setPassword(config.getPassword());\n                    elasticSearchClient.setTrustStorePass(config.getTrustStorePass());\n                    elasticSearchClient.connect();\n                }\n            }, config.getSecretsManagementFile(), config.getTrustStorePass());\n            \r\n\r\n\n            monitor.start();\n        }\n\n        elasticSearchClient = new ElasticSearchClient(\n            config.getClusterNodes(), config.getProtocol(), config.getTrustStorePath(), config\n            .getTrustStorePass(), config.getUser(), config.getPassword(),\n            indexNameConverter(config.getNamespace()), config.getConnectTimeout(),\n            config.getSocketTimeout(), config.getNumHttpClientThread()\n        );\n        this.registerServiceImplementation(\n            IBatchDAO.class,\n            new BatchProcessEsDAO(elasticSearchClient, config.getBulkActions(), config\n                .getFlushInterval(), config.getConcurrentRequests())\n        );\n        this.registerServiceImplementation(StorageDAO.class, new StorageEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new HistoryDeleteEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new NetworkAddressAliasEsDAO(elasticSearchClient, config\n                .getResultWindowMaxSize()));\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new TopologyQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new MetricsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new TraceQueryEsDAO(elasticSearchClient, config.getSegmentQueryMaxSize()));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new BrowserLogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new MetadataQueryEsDAO(elasticSearchClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new AggregationQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new AlarmQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new TopNRecordsQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new LogQueryEsDAO(elasticSearchClient));\n        this.registerServiceImplementation(\n            IProfileTaskQueryDAO.class, new ProfileTaskQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileTaskLogQueryDAO.class, new ProfileTaskLogEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new ProfileThreadSnapshotQueryEsDAO(elasticSearchClient, config\n                .getProfileTaskQueryMaxSize()));\n        this.registerServiceImplementation(\n            UITemplateManagementDAO.class, new UITemplateManagementEsDAO(elasticSearchClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new ESEventQueryDAO(elasticSearchClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/StorageModuleElasticsearchProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"},{"authorDate":"2021-09-17 00:05:18","commitOrder":46,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient, config.getMaxSizeOfBatchSql(), config.getAsyncBatchPersistentPoolSize()));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","date":"2021-09-17 00:05:18","endLine":160,"groupId":"10835","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/93/5ec7afd94eeeeb8a551555774a1dd2ed5ea404.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n        \n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new TiDBHistoryDeleteDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-tidb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/tidb/TiDBStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"224b6c6b3a7f72ef02d4dca5f73b32c76767d08e","commitMessage":"@@@Improve the speed of writing TiDB by batching the SQL execution (#7691)\n\n","date":"2021-09-17 00:05:18","modifiedFileCount":"10","status":"M","submitter":"nicolchen"}]
