[{"authorTime":"2018-11-22 20:50:27","codes":[{"authorDate":"2018-11-22 20:50:27","commitOrder":1,"curCode":"    public void before() {\n        moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        classGetter = mock(StreamDataClassGetter.class);\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        TestWorker worker = new TestWorker(nextWorkerId);\n        WorkerInstances.INSTANCES.put(nextWorkerId, worker);\n    }\n","date":"2018-11-22 20:50:27","endLine":55,"groupId":"6614","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e1/4f29d7433d538108cb099d0087d3538bbe3d26.src","preCode":"    public void before() {\n        moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        classGetter = mock(StreamDataClassGetter.class);\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        TestWorker worker = new TestWorker(nextWorkerId);\n        WorkerInstances.INSTANCES.put(nextWorkerId, worker);\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientTestCase.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"},{"authorDate":"2018-11-22 20:50:27","commitOrder":1,"curCode":"    public void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\n        final int streamDataClassId = 1;\n        final int testWorkerId = 1;\n\n        ModuleManagerTesting moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        StreamDataClassGetter classGetter = mock(StreamDataClassGetter.class);\n        Class<?> dataClass = TestRemoteData.class;\n        when(classGetter.findClassById(streamDataClassId)).thenReturn((Class<StreamData>)dataClass);\n\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        WorkerInstances.INSTANCES.put(testWorkerId, new TestWorker());\n\n        String serverName = InProcessServerBuilder.generateName();\n\n        gRPCCleanup.register(InProcessServerBuilder\n            .forName(serverName).directExecutor().addService(new RemoteServiceHandler(moduleManager)).build().start());\n\n        RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(\n            gRPCCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));\n\n        StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\n            @Override public void onNext(Empty empty) {\n\n            }\n\n            @Override public void onError(Throwable throwable) {\n\n            }\n\n            @Override public void onCompleted() {\n\n            }\n        });\n\n        RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\n        remoteMessage.setStreamDataId(streamDataClassId);\n        remoteMessage.setNextWorkerId(testWorkerId);\n\n        RemoteData.Builder remoteData = RemoteData.newBuilder();\n        remoteData.addDataStrings(\"test1\");\n        remoteData.addDataStrings(\"test2\");\n\n        remoteData.addDataLongs(10);\n        remoteData.addDataLongs(20);\n        remoteMessage.setRemoteData(remoteData);\n\n        streamObserver.onNext(remoteMessage.build());\n        streamObserver.onCompleted();\n    }\n","date":"2018-11-22 20:50:27","endLine":97,"groupId":"3557","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"callTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b2/e1f0354132d17bc77b3a67836a94494e855588.src","preCode":"    public void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\n        final int streamDataClassId = 1;\n        final int testWorkerId = 1;\n\n        ModuleManagerTesting moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        StreamDataClassGetter classGetter = mock(StreamDataClassGetter.class);\n        Class<?> dataClass = TestRemoteData.class;\n        when(classGetter.findClassById(streamDataClassId)).thenReturn((Class<StreamData>)dataClass);\n\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        WorkerInstances.INSTANCES.put(testWorkerId, new TestWorker());\n\n        String serverName = InProcessServerBuilder.generateName();\n\n        gRPCCleanup.register(InProcessServerBuilder\n            .forName(serverName).directExecutor().addService(new RemoteServiceHandler(moduleManager)).build().start());\n\n        RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(\n            gRPCCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));\n\n        StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\n            @Override public void onNext(Empty empty) {\n\n            }\n\n            @Override public void onError(Throwable throwable) {\n\n            }\n\n            @Override public void onCompleted() {\n\n            }\n        });\n\n        RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\n        remoteMessage.setStreamDataId(streamDataClassId);\n        remoteMessage.setNextWorkerId(testWorkerId);\n\n        RemoteData.Builder remoteData = RemoteData.newBuilder();\n        remoteData.addDataStrings(\"test1\");\n        remoteData.addDataStrings(\"test2\");\n\n        remoteData.addDataLongs(10);\n        remoteData.addDataLongs(20);\n        remoteMessage.setRemoteData(remoteData);\n\n        streamObserver.onNext(remoteMessage.build());\n        streamObserver.onCompleted();\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/RemoteServiceHandlerTestCase.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"}],"commitId":"7c8a683c2f52353669ac1317e958d28400f8054c","commitMessage":"@@@gRPC client usage improve (#1946)\n\n* Close the clients which are unreachable.\nRemote client manager test case and comments.\n\n* Test the GRPCRemote client.\n\n* 1. Catch the throwable for onComplete method cause of it will throw exception when connection lost.\n2. Check the gRPC channel state.  send message when state is ready.  wait 5 second when state is not ready.\n\nNotice: gRPC channel getState with true parameter will trigger reconnect operation.\n\n* gRPC client will reconnect to the server when network recorvered.\n\n* Recovery application.yml\n\n* Recovery proto module commit id.\n\n* no message\n\n* Fixed compile error.\n","date":"2018-11-22 20:50:27","modifiedFileCount":"28","status":"B","submitter":"??? pengys"},{"authorTime":"2019-01-08 23:20:13","codes":[{"authorDate":"2018-11-22 20:50:27","commitOrder":2,"curCode":"    public void before() {\n        moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        classGetter = mock(StreamDataClassGetter.class);\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        TestWorker worker = new TestWorker(nextWorkerId);\n        WorkerInstances.INSTANCES.put(nextWorkerId, worker);\n    }\n","date":"2018-11-22 20:50:27","endLine":55,"groupId":"6614","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e1/4f29d7433d538108cb099d0087d3538bbe3d26.src","preCode":"    public void before() {\n        moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        classGetter = mock(StreamDataClassGetter.class);\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        TestWorker worker = new TestWorker(nextWorkerId);\n        WorkerInstances.INSTANCES.put(nextWorkerId, worker);\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientTestCase.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"},{"authorDate":"2019-01-08 23:20:13","commitOrder":2,"curCode":"    public void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\n        final int streamDataClassId = 1;\n        final int testWorkerId = 1;\n\n        ModuleManagerTesting moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        StreamDataClassGetter classGetter = mock(StreamDataClassGetter.class);\n        Class<?> dataClass = TestRemoteData.class;\n        when(classGetter.findClassById(streamDataClassId)).thenReturn((Class<StreamData>)dataClass);\n\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        WorkerInstances.INSTANCES.put(testWorkerId, new TestWorker());\n\n        String serverName = InProcessServerBuilder.generateName();\n        MetricCreator metricCreator = mock(MetricCreator.class);\n        when(metricCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetric() {\n            @Override public void inc() {\n\n            }\n\n            @Override public void inc(double value) {\n\n            }\n        });\n        when(metricCreator.createHistogramMetric(any(), any(), any(), any(), any())).thenReturn(\n            new HistogramMetric() {\n                @Override public void observe(double value) {\n\n                }\n            }\n        );\n        ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();\n        moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);\n        telemetryModuleDefine.provider().registerServiceImplementation(MetricCreator.class, metricCreator);\n\n        gRPCCleanup.register(InProcessServerBuilder\n            .forName(serverName).directExecutor().addService(new RemoteServiceHandler(moduleManager)).build().start());\n\n        RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(\n            gRPCCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));\n\n        StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\n            @Override public void onNext(Empty empty) {\n\n            }\n\n            @Override public void onError(Throwable throwable) {\n\n            }\n\n            @Override public void onCompleted() {\n\n            }\n        });\n\n        RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\n        remoteMessage.setStreamDataId(streamDataClassId);\n        remoteMessage.setNextWorkerId(testWorkerId);\n\n        RemoteData.Builder remoteData = RemoteData.newBuilder();\n        remoteData.addDataStrings(\"test1\");\n        remoteData.addDataStrings(\"test2\");\n\n        remoteData.addDataLongs(10);\n        remoteData.addDataLongs(20);\n        remoteMessage.setRemoteData(remoteData);\n\n        streamObserver.onNext(remoteMessage.build());\n        streamObserver.onCompleted();\n    }\n","date":"2019-01-08 23:20:13","endLine":119,"groupId":"3557","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"callTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5b/796864e094057f1e2afcd5e3448c506d08d51f.src","preCode":"    public void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\n        final int streamDataClassId = 1;\n        final int testWorkerId = 1;\n\n        ModuleManagerTesting moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        StreamDataClassGetter classGetter = mock(StreamDataClassGetter.class);\n        Class<?> dataClass = TestRemoteData.class;\n        when(classGetter.findClassById(streamDataClassId)).thenReturn((Class<StreamData>)dataClass);\n\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        WorkerInstances.INSTANCES.put(testWorkerId, new TestWorker());\n\n        String serverName = InProcessServerBuilder.generateName();\n\n        gRPCCleanup.register(InProcessServerBuilder\n            .forName(serverName).directExecutor().addService(new RemoteServiceHandler(moduleManager)).build().start());\n\n        RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(\n            gRPCCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));\n\n        StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\n            @Override public void onNext(Empty empty) {\n\n            }\n\n            @Override public void onError(Throwable throwable) {\n\n            }\n\n            @Override public void onCompleted() {\n\n            }\n        });\n\n        RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\n        remoteMessage.setStreamDataId(streamDataClassId);\n        remoteMessage.setNextWorkerId(testWorkerId);\n\n        RemoteData.Builder remoteData = RemoteData.newBuilder();\n        remoteData.addDataStrings(\"test1\");\n        remoteData.addDataStrings(\"test2\");\n\n        remoteData.addDataLongs(10);\n        remoteData.addDataLongs(20);\n        remoteMessage.setRemoteData(remoteData);\n\n        streamObserver.onNext(remoteMessage.build());\n        streamObserver.onCompleted();\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/RemoteServiceHandlerTestCase.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"6499d4f5837363141f924b05eaed8bf7b555a2f1","commitMessage":"@@@Implement Prometheus to oap backend telemetry (#2133)\n\n* Finish the basic codes of telemetry.\n\n* Add many telemetry in oap.\n\n* Fix a test case.\n\n* Finish all telemetry metric.\n\n* Fix format.\n\n* Make telemetry works.\n\n* Support JVM metrics.\n\n* Add doc for telemetry.\n\n* Fix typo.\n\n* Fix #2135\n","date":"2019-01-08 23:20:13","modifiedFileCount":"36","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-03-30 15:37:19","codes":[{"authorDate":"2019-03-30 15:37:19","commitOrder":3,"curCode":"    public void before() {\n        moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        classGetter = mock(StreamDataClassGetter.class);\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        WorkerInstancesService workerInstancesService = new WorkerInstancesService();\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceGetter.class, workerInstancesService);\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceSetter.class, workerInstancesService);\n\n        TestWorker worker = new TestWorker(moduleManager);\n    }\n","date":"2019-03-30 15:37:19","endLine":61,"groupId":"6614","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b2/8c644857720d18ce233b27c099d12439787b5d.src","preCode":"    public void before() {\n        moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        classGetter = mock(StreamDataClassGetter.class);\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        TestWorker worker = new TestWorker(nextWorkerId);\n        WorkerInstances.INSTANCES.put(nextWorkerId, worker);\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientTestCase.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-03-30 15:37:19","commitOrder":3,"curCode":"    public void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\n        final int streamDataClassId = 1;\n        final int testWorkerId = 1;\n\n        ModuleManagerTesting moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        StreamDataClassGetter classGetter = mock(StreamDataClassGetter.class);\n        Class<?> dataClass = TestRemoteData.class;\n        when(classGetter.findClassById(streamDataClassId)).thenReturn((Class<StreamData>)dataClass);\n\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        String serverName = InProcessServerBuilder.generateName();\n        MetricCreator metricCreator = mock(MetricCreator.class);\n        when(metricCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetric() {\n            @Override public void inc() {\n\n            }\n\n            @Override public void inc(double value) {\n\n            }\n        });\n        when(metricCreator.createHistogramMetric(any(), any(), any(), any(), any())).thenReturn(\n            new HistogramMetric() {\n                @Override public void observe(double value) {\n\n                }\n            }\n        );\n        ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();\n        moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);\n        telemetryModuleDefine.provider().registerServiceImplementation(MetricCreator.class, metricCreator);\n\n        gRPCCleanup.register(InProcessServerBuilder\n            .forName(serverName).directExecutor().addService(new RemoteServiceHandler(moduleManager)).build().start());\n\n        RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(\n            gRPCCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));\n\n        StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\n            @Override public void onNext(Empty empty) {\n\n            }\n\n            @Override public void onError(Throwable throwable) {\n\n            }\n\n            @Override public void onCompleted() {\n\n            }\n        });\n\n        RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\n        remoteMessage.setStreamDataId(streamDataClassId);\n        remoteMessage.setNextWorkerId(testWorkerId);\n\n        RemoteData.Builder remoteData = RemoteData.newBuilder();\n        remoteData.addDataStrings(\"test1\");\n        remoteData.addDataStrings(\"test2\");\n\n        remoteData.addDataLongs(10);\n        remoteData.addDataLongs(20);\n        remoteMessage.setRemoteData(remoteData);\n\n        streamObserver.onNext(remoteMessage.build());\n        streamObserver.onCompleted();\n    }\n","date":"2019-03-30 15:37:19","endLine":117,"groupId":"3557","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"callTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f2/8436903566ad4988558762261c7572d4c00a85.src","preCode":"    public void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\n        final int streamDataClassId = 1;\n        final int testWorkerId = 1;\n\n        ModuleManagerTesting moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        StreamDataClassGetter classGetter = mock(StreamDataClassGetter.class);\n        Class<?> dataClass = TestRemoteData.class;\n        when(classGetter.findClassById(streamDataClassId)).thenReturn((Class<StreamData>)dataClass);\n\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        WorkerInstances.INSTANCES.put(testWorkerId, new TestWorker());\n\n        String serverName = InProcessServerBuilder.generateName();\n        MetricCreator metricCreator = mock(MetricCreator.class);\n        when(metricCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetric() {\n            @Override public void inc() {\n\n            }\n\n            @Override public void inc(double value) {\n\n            }\n        });\n        when(metricCreator.createHistogramMetric(any(), any(), any(), any(), any())).thenReturn(\n            new HistogramMetric() {\n                @Override public void observe(double value) {\n\n                }\n            }\n        );\n        ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();\n        moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);\n        telemetryModuleDefine.provider().registerServiceImplementation(MetricCreator.class, metricCreator);\n\n        gRPCCleanup.register(InProcessServerBuilder\n            .forName(serverName).directExecutor().addService(new RemoteServiceHandler(moduleManager)).build().start());\n\n        RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(\n            gRPCCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));\n\n        StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\n            @Override public void onNext(Empty empty) {\n\n            }\n\n            @Override public void onError(Throwable throwable) {\n\n            }\n\n            @Override public void onCompleted() {\n\n            }\n        });\n\n        RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\n        remoteMessage.setStreamDataId(streamDataClassId);\n        remoteMessage.setNextWorkerId(testWorkerId);\n\n        RemoteData.Builder remoteData = RemoteData.newBuilder();\n        remoteData.addDataStrings(\"test1\");\n        remoteData.addDataStrings(\"test2\");\n\n        remoteData.addDataLongs(10);\n        remoteData.addDataLongs(20);\n        remoteMessage.setRemoteData(remoteData);\n\n        streamObserver.onNext(remoteMessage.build());\n        streamObserver.onCompleted();\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/RemoteServiceHandlerTestCase.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"1fd5c5790a25875f0e10c72fd767eaf38bbd2c99","commitMessage":"@@@Divide two static classes (#2411)\n\n* 1. Remove static worker instances holder.\n2. Remove static worker instance id generator.\n\n* Fixed test case failure.\n","date":"2019-03-30 15:37:19","modifiedFileCount":"26","status":"M","submitter":"??? pengys"},{"authorTime":"2019-05-10 08:05:37","codes":[{"authorDate":"2019-03-30 15:37:19","commitOrder":4,"curCode":"    public void before() {\n        moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        classGetter = mock(StreamDataClassGetter.class);\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        WorkerInstancesService workerInstancesService = new WorkerInstancesService();\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceGetter.class, workerInstancesService);\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceSetter.class, workerInstancesService);\n\n        TestWorker worker = new TestWorker(moduleManager);\n    }\n","date":"2019-03-30 15:37:19","endLine":61,"groupId":"6614","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b2/8c644857720d18ce233b27c099d12439787b5d.src","preCode":"    public void before() {\n        moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        classGetter = mock(StreamDataClassGetter.class);\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        WorkerInstancesService workerInstancesService = new WorkerInstancesService();\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceGetter.class, workerInstancesService);\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceSetter.class, workerInstancesService);\n\n        TestWorker worker = new TestWorker(moduleManager);\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientTestCase.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2019-05-10 08:05:37","commitOrder":4,"curCode":"    public void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\n        final int streamDataClassId = 1;\n        final int testWorkerId = 1;\n\n        ModuleManagerTesting moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        StreamDataClassGetter classGetter = mock(StreamDataClassGetter.class);\n        Class<?> dataClass = TestRemoteData.class;\n        when(classGetter.findClassById(streamDataClassId)).thenReturn((Class<StreamData>)dataClass);\n\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        String serverName = InProcessServerBuilder.generateName();\n        MetricsCreator metricsCreator = mock(MetricsCreator.class);\n        when(metricsCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetrics() {\n            @Override public void inc() {\n\n            }\n\n            @Override public void inc(double value) {\n\n            }\n        });\n        when(metricsCreator.createHistogramMetric(any(), any(), any(), any(), any())).thenReturn(\n            new HistogramMetrics() {\n                @Override public void observe(double value) {\n\n                }\n            }\n        );\n        ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();\n        moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);\n        telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);\n\n        gRPCCleanup.register(InProcessServerBuilder\n            .forName(serverName).directExecutor().addService(new RemoteServiceHandler(moduleManager)).build().start());\n\n        RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(\n            gRPCCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));\n\n        StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\n            @Override public void onNext(Empty empty) {\n\n            }\n\n            @Override public void onError(Throwable throwable) {\n\n            }\n\n            @Override public void onCompleted() {\n\n            }\n        });\n\n        RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\n        remoteMessage.setStreamDataId(streamDataClassId);\n        remoteMessage.setNextWorkerId(testWorkerId);\n\n        RemoteData.Builder remoteData = RemoteData.newBuilder();\n        remoteData.addDataStrings(\"test1\");\n        remoteData.addDataStrings(\"test2\");\n\n        remoteData.addDataLongs(10);\n        remoteData.addDataLongs(20);\n        remoteMessage.setRemoteData(remoteData);\n\n        streamObserver.onNext(remoteMessage.build());\n        streamObserver.onCompleted();\n    }\n","date":"2019-05-10 08:05:37","endLine":117,"groupId":"3557","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"callTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2d/5774948e8dfcd4b9579aab148c94d096f264a4.src","preCode":"    public void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\n        final int streamDataClassId = 1;\n        final int testWorkerId = 1;\n\n        ModuleManagerTesting moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        StreamDataClassGetter classGetter = mock(StreamDataClassGetter.class);\n        Class<?> dataClass = TestRemoteData.class;\n        when(classGetter.findClassById(streamDataClassId)).thenReturn((Class<StreamData>)dataClass);\n\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        String serverName = InProcessServerBuilder.generateName();\n        MetricCreator metricCreator = mock(MetricCreator.class);\n        when(metricCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetric() {\n            @Override public void inc() {\n\n            }\n\n            @Override public void inc(double value) {\n\n            }\n        });\n        when(metricCreator.createHistogramMetric(any(), any(), any(), any(), any())).thenReturn(\n            new HistogramMetric() {\n                @Override public void observe(double value) {\n\n                }\n            }\n        );\n        ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();\n        moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);\n        telemetryModuleDefine.provider().registerServiceImplementation(MetricCreator.class, metricCreator);\n\n        gRPCCleanup.register(InProcessServerBuilder\n            .forName(serverName).directExecutor().addService(new RemoteServiceHandler(moduleManager)).build().start());\n\n        RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(\n            gRPCCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));\n\n        StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\n            @Override public void onNext(Empty empty) {\n\n            }\n\n            @Override public void onError(Throwable throwable) {\n\n            }\n\n            @Override public void onCompleted() {\n\n            }\n        });\n\n        RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\n        remoteMessage.setStreamDataId(streamDataClassId);\n        remoteMessage.setNextWorkerId(testWorkerId);\n\n        RemoteData.Builder remoteData = RemoteData.newBuilder();\n        remoteData.addDataStrings(\"test1\");\n        remoteData.addDataStrings(\"test2\");\n\n        remoteData.addDataLongs(10);\n        remoteData.addDataLongs(20);\n        remoteMessage.setRemoteData(remoteData);\n\n        streamObserver.onNext(remoteMessage.build());\n        streamObserver.onCompleted();\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/RemoteServiceHandlerTestCase.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"ed78dabe8b142be3d546d349046768135f0a752a","commitMessage":"@@@Rename metric and indicator to metrics. (#2643)\n\n* Rename metric to metrics.\n\n* Fixed test case execute failure issues.\n","date":"2019-05-10 08:05:37","modifiedFileCount":"102","status":"M","submitter":"??? pengys"},{"authorTime":"2019-05-15 22:42:38","codes":[{"authorDate":"2019-05-15 22:42:38","commitOrder":5,"curCode":"    public void before() {\n        moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        classGetter = mock(StreamDataMappingGetter.class);\n        moduleDefine.provider().registerServiceImplementation(StreamDataMappingGetter.class, classGetter);\n\n        WorkerInstancesService workerInstancesService = new WorkerInstancesService();\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceGetter.class, workerInstancesService);\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceSetter.class, workerInstancesService);\n\n        TestWorker worker = new TestWorker(moduleManager);\n    }\n","date":"2019-05-15 22:42:38","endLine":61,"groupId":"6614","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8a/6494faf4c7d8afcb6b86fb531202eaa4bc2ee1.src","preCode":"    public void before() {\n        moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        classGetter = mock(StreamDataClassGetter.class);\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        WorkerInstancesService workerInstancesService = new WorkerInstancesService();\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceGetter.class, workerInstancesService);\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceSetter.class, workerInstancesService);\n\n        TestWorker worker = new TestWorker(moduleManager);\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientTestCase.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-05-15 22:42:38","commitOrder":5,"curCode":"    public void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\n        final int streamDataClassId = 1;\n        final int testWorkerId = 1;\n\n        ModuleManagerTesting moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        StreamDataMappingGetter classGetter = mock(StreamDataMappingGetter.class);\n        Class dataClass = TestRemoteData.class;\n        when(classGetter.findClassById(streamDataClassId)).thenReturn(dataClass);\n\n        moduleDefine.provider().registerServiceImplementation(StreamDataMappingGetter.class, classGetter);\n\n        String serverName = InProcessServerBuilder.generateName();\n        MetricsCreator metricsCreator = mock(MetricsCreator.class);\n        when(metricsCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetrics() {\n            @Override public void inc() {\n\n            }\n\n            @Override public void inc(double value) {\n\n            }\n        });\n        when(metricsCreator.createHistogramMetric(any(), any(), any(), any(), any())).thenReturn(\n            new HistogramMetrics() {\n                @Override public void observe(double value) {\n\n                }\n            }\n        );\n        ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();\n        moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);\n        telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);\n\n        gRPCCleanup.register(InProcessServerBuilder\n            .forName(serverName).directExecutor().addService(new RemoteServiceHandler(moduleManager)).build().start());\n\n        RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(\n            gRPCCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));\n\n        StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\n            @Override public void onNext(Empty empty) {\n\n            }\n\n            @Override public void onError(Throwable throwable) {\n\n            }\n\n            @Override public void onCompleted() {\n\n            }\n        });\n\n        RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\n        remoteMessage.setStreamDataId(streamDataClassId);\n        remoteMessage.setNextWorkerId(testWorkerId);\n\n        RemoteData.Builder remoteData = RemoteData.newBuilder();\n        remoteData.addDataStrings(\"test1\");\n        remoteData.addDataStrings(\"test2\");\n\n        remoteData.addDataLongs(10);\n        remoteData.addDataLongs(20);\n        remoteMessage.setRemoteData(remoteData);\n\n        streamObserver.onNext(remoteMessage.build());\n        streamObserver.onCompleted();\n    }\n","date":"2019-05-15 22:42:38","endLine":117,"groupId":"3557","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"callTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b9/081d147259343dc5dc89cb03f2963c65653c12.src","preCode":"    public void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\n        final int streamDataClassId = 1;\n        final int testWorkerId = 1;\n\n        ModuleManagerTesting moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        StreamDataClassGetter classGetter = mock(StreamDataClassGetter.class);\n        Class<?> dataClass = TestRemoteData.class;\n        when(classGetter.findClassById(streamDataClassId)).thenReturn((Class<StreamData>)dataClass);\n\n        moduleDefine.provider().registerServiceImplementation(StreamDataClassGetter.class, classGetter);\n\n        String serverName = InProcessServerBuilder.generateName();\n        MetricsCreator metricsCreator = mock(MetricsCreator.class);\n        when(metricsCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetrics() {\n            @Override public void inc() {\n\n            }\n\n            @Override public void inc(double value) {\n\n            }\n        });\n        when(metricsCreator.createHistogramMetric(any(), any(), any(), any(), any())).thenReturn(\n            new HistogramMetrics() {\n                @Override public void observe(double value) {\n\n                }\n            }\n        );\n        ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();\n        moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);\n        telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);\n\n        gRPCCleanup.register(InProcessServerBuilder\n            .forName(serverName).directExecutor().addService(new RemoteServiceHandler(moduleManager)).build().start());\n\n        RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(\n            gRPCCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));\n\n        StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\n            @Override public void onNext(Empty empty) {\n\n            }\n\n            @Override public void onError(Throwable throwable) {\n\n            }\n\n            @Override public void onCompleted() {\n\n            }\n        });\n\n        RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\n        remoteMessage.setStreamDataId(streamDataClassId);\n        remoteMessage.setNextWorkerId(testWorkerId);\n\n        RemoteData.Builder remoteData = RemoteData.newBuilder();\n        remoteData.addDataStrings(\"test1\");\n        remoteData.addDataStrings(\"test2\");\n\n        remoteData.addDataLongs(10);\n        remoteData.addDataLongs(20);\n        remoteMessage.setRemoteData(remoteData);\n\n        streamObserver.onNext(remoteMessage.build());\n        streamObserver.onCompleted();\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/RemoteServiceHandlerTestCase.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"}],"commitId":"63fb961c0d1de02f053045c3bf80361ebd7bd58d","commitMessage":"@@@New OAP annotations.  they are friendly for streaming loader. (#2670)\n\n* New stream annotation.\n- Inventory annotation example:\n@Stream(name = ServiceInventory.INDEX_NAME.  scopeId = DefaultScopeDefine.SERVICE_INVENTORY.  storage = @Storage(builder = ServiceInventory.Builder.class.  deleteHistory = false).  kind = StreamKind.Inventory)\n\n- Metrics annotation example:\n@Stream(name = ServiceRelationClientSideMetrics.INDEX_NAME.  scopeId = DefaultScopeDefine.SERVICE_RELATION.  storage = @Storage(builder = ServiceRelationClientSideMetrics.Builder.class).  kind = StreamKind.Metrics)\n\n- Record annotation example:\n@Stream(name = SegmentRecord.INDEX_NAME.  scopeId = DefaultScopeDefine.SEGMENT.  storage = @Storage(builder = SegmentRecord.Builder.class).  kind = StreamKind.Record)\n\n- TopN annotation example:\n@Stream(name = TopNDatabaseStatement.INDEX_NAME.  scopeId = DefaultScopeDefine.DATABASE_SLOW_STATEMENT.  storage = @Storage(builder = TopNDatabaseStatement.Builder.class).  kind = StreamKind.TopN)\n\n* no message\n\n* Stream annotation finish.\n\n* Make stream processors to be the singleton class.\n\n* Fixed the compile errors.\n\n* Modify the OAL module for this annotation refactor.\n\n* Add apache license header.\n\n* Duplicate import.\n\n* Fixed check style error.\n","date":"2019-05-15 22:42:38","modifiedFileCount":"55","status":"M","submitter":"??? pengys"},{"authorTime":"2019-07-20 23:47:17","codes":[{"authorDate":"2019-07-20 23:47:17","commitOrder":6,"curCode":"    public void before() {\n        moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        WorkerInstancesService workerInstancesService = new WorkerInstancesService();\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceGetter.class, workerInstancesService);\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceSetter.class, workerInstancesService);\n\n        TestWorker worker = new TestWorker(moduleManager);\n    }\n","date":"2019-07-20 23:47:17","endLine":68,"groupId":"3557","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/35/13ca394b1de92dd045440993bb5ac82c56406e.src","preCode":"    public void before() {\n        moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        classGetter = mock(StreamDataMappingGetter.class);\n        moduleDefine.provider().registerServiceImplementation(StreamDataMappingGetter.class, classGetter);\n\n        WorkerInstancesService workerInstancesService = new WorkerInstancesService();\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceGetter.class, workerInstancesService);\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceSetter.class, workerInstancesService);\n\n        TestWorker worker = new TestWorker(moduleManager);\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientTestCase.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2019-07-20 23:47:17","commitOrder":6,"curCode":"    public void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\n        final int streamDataClassId = 1;\n        final String testWorkerId = \"mock-worker\";\n\n        ModuleManagerTesting moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        String serverName = InProcessServerBuilder.generateName();\n        MetricsCreator metricsCreator = mock(MetricsCreator.class);\n        when(metricsCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetrics() {\n            @Override public void inc() {\n\n            }\n\n            @Override public void inc(double value) {\n\n            }\n        });\n        when(metricsCreator.createHistogramMetric(any(), any(), any(), any(), any())).thenReturn(\n            new HistogramMetrics() {\n                @Override public void observe(double value) {\n\n                }\n            }\n        );\n        ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();\n        moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);\n        telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);\n\n        gRPCCleanup.register(InProcessServerBuilder\n            .forName(serverName).directExecutor().addService(new RemoteServiceHandler(moduleManager)).build().start());\n\n        RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(\n            gRPCCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));\n\n        StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\n            @Override public void onNext(Empty empty) {\n\n            }\n\n            @Override public void onError(Throwable throwable) {\n\n            }\n\n            @Override public void onCompleted() {\n\n            }\n        });\n\n        RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\n        remoteMessage.setNextWorkerName(testWorkerId);\n\n        RemoteData.Builder remoteData = RemoteData.newBuilder();\n        remoteData.addDataStrings(\"test1\");\n        remoteData.addDataStrings(\"test2\");\n\n        remoteData.addDataLongs(10);\n        remoteData.addDataLongs(20);\n        remoteMessage.setRemoteData(remoteData);\n\n        streamObserver.onNext(remoteMessage.build());\n        streamObserver.onCompleted();\n    }\n","date":"2019-07-20 23:47:17","endLine":122,"groupId":"3557","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"callTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/50/d1336fd2f3cf96d20a8edac2737a0d610a14d1.src","preCode":"    public void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\n        final int streamDataClassId = 1;\n        final int testWorkerId = 1;\n\n        ModuleManagerTesting moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        StreamDataMappingGetter classGetter = mock(StreamDataMappingGetter.class);\n        Class dataClass = TestRemoteData.class;\n        when(classGetter.findClassById(streamDataClassId)).thenReturn(dataClass);\n\n        moduleDefine.provider().registerServiceImplementation(StreamDataMappingGetter.class, classGetter);\n\n        String serverName = InProcessServerBuilder.generateName();\n        MetricsCreator metricsCreator = mock(MetricsCreator.class);\n        when(metricsCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetrics() {\n            @Override public void inc() {\n\n            }\n\n            @Override public void inc(double value) {\n\n            }\n        });\n        when(metricsCreator.createHistogramMetric(any(), any(), any(), any(), any())).thenReturn(\n            new HistogramMetrics() {\n                @Override public void observe(double value) {\n\n                }\n            }\n        );\n        ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();\n        moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);\n        telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);\n\n        gRPCCleanup.register(InProcessServerBuilder\n            .forName(serverName).directExecutor().addService(new RemoteServiceHandler(moduleManager)).build().start());\n\n        RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(\n            gRPCCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));\n\n        StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\n            @Override public void onNext(Empty empty) {\n\n            }\n\n            @Override public void onError(Throwable throwable) {\n\n            }\n\n            @Override public void onCompleted() {\n\n            }\n        });\n\n        RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\n        remoteMessage.setStreamDataId(streamDataClassId);\n        remoteMessage.setNextWorkerId(testWorkerId);\n\n        RemoteData.Builder remoteData = RemoteData.newBuilder();\n        remoteData.addDataStrings(\"test1\");\n        remoteData.addDataStrings(\"test2\");\n\n        remoteData.addDataLongs(10);\n        remoteData.addDataLongs(20);\n        remoteMessage.setRemoteData(remoteData);\n\n        streamObserver.onNext(remoteMessage.build());\n        streamObserver.onCompleted();\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/RemoteServiceHandlerTestCase.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"d256fc348e727549cebf6d4f42ba88458ab771ab","commitMessage":"@@@OAP internal RemoteService protocol change and code refactor (#3128)\n\n* Remove the worker id.  and add worker name for remote handler only.\n\n* Remote metrics and inventory classes mapping too.\n\n* Refactor codes.\n","date":"2019-07-20 23:47:17","modifiedFileCount":"24","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-07-25 19:08:36","codes":[{"authorDate":"2019-07-25 19:08:36","commitOrder":7,"curCode":"    public void before() {\n        moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        WorkerInstancesService workerInstancesService = new WorkerInstancesService();\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceGetter.class, workerInstancesService);\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceSetter.class, workerInstancesService);\n\n        TestWorker worker = new TestWorker(moduleManager);\n        workerInstancesService.put(nextWorkerName, worker, TestStreamData.class);\n    }\n","date":"2019-07-25 19:08:36","endLine":57,"groupId":"10298","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a9/9a767040c024a0e6b635fa4f87f94e19050b2a.src","preCode":"    public void before() {\n        moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        WorkerInstancesService workerInstancesService = new WorkerInstancesService();\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceGetter.class, workerInstancesService);\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceSetter.class, workerInstancesService);\n\n        TestWorker worker = new TestWorker(moduleManager);\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/client/GRPCRemoteClientTestCase.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2019-07-25 19:08:36","commitOrder":7,"curCode":"    public void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\n        final String testWorkerId = \"mock-worker\";\n\n        ModuleManagerTesting moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        WorkerInstancesService workerInstancesService = new WorkerInstancesService();\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceGetter.class, workerInstancesService);\n        moduleDefine.provider().registerServiceImplementation(IWorkerInstanceSetter.class, workerInstancesService);\n\n        TestWorker worker = new TestWorker(moduleManager);\n        workerInstancesService.put(testWorkerId, worker, TestRemoteData.class);\n\n        String serverName = InProcessServerBuilder.generateName();\n        MetricsCreator metricsCreator = mock(MetricsCreator.class);\n        when(metricsCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetrics() {\n            @Override public void inc() {\n\n            }\n\n            @Override public void inc(double value) {\n\n            }\n        });\n        when(metricsCreator.createHistogramMetric(any(), any(), any(), any())).thenReturn(new HistogramMetrics() {\n            @Override public Timer createTimer() {\n                return super.createTimer();\n            }\n\n            @Override public void observe(double value) {\n\n            }\n        });\n\n        ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();\n        moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);\n        telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);\n\n        gRPCCleanup.register(InProcessServerBuilder\n            .forName(serverName).directExecutor().addService(new RemoteServiceHandler(moduleManager)).build().start());\n\n        RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(\n            gRPCCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));\n\n        StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\n            @Override public void onNext(Empty empty) {\n\n            }\n\n            @Override public void onError(Throwable throwable) {\n\n            }\n\n            @Override public void onCompleted() {\n\n            }\n        });\n\n        RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\n        remoteMessage.setNextWorkerName(testWorkerId);\n\n        RemoteData.Builder remoteData = RemoteData.newBuilder();\n        remoteData.addDataStrings(\"test1\");\n        remoteData.addDataStrings(\"test2\");\n\n        remoteData.addDataLongs(10);\n        remoteData.addDataLongs(20);\n        remoteMessage.setRemoteData(remoteData);\n\n        streamObserver.onNext(remoteMessage.build());\n        streamObserver.onCompleted();\n    }\n","date":"2019-07-25 19:08:36","endLine":118,"groupId":"10298","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"callTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e0/29456e21151d5a4e0b6211af0e351360a17341.src","preCode":"    public void callTest() throws DuplicateProviderException, ProviderNotFoundException, IOException {\n        final int streamDataClassId = 1;\n        final String testWorkerId = \"mock-worker\";\n\n        ModuleManagerTesting moduleManager = new ModuleManagerTesting();\n        ModuleDefineTesting moduleDefine = new ModuleDefineTesting();\n        moduleManager.put(CoreModule.NAME, moduleDefine);\n\n        String serverName = InProcessServerBuilder.generateName();\n        MetricsCreator metricsCreator = mock(MetricsCreator.class);\n        when(metricsCreator.createCounter(any(), any(), any(), any())).thenReturn(new CounterMetrics() {\n            @Override public void inc() {\n\n            }\n\n            @Override public void inc(double value) {\n\n            }\n        });\n        when(metricsCreator.createHistogramMetric(any(), any(), any(), any(), any())).thenReturn(\n            new HistogramMetrics() {\n                @Override public void observe(double value) {\n\n                }\n            }\n        );\n        ModuleDefineTesting telemetryModuleDefine = new ModuleDefineTesting();\n        moduleManager.put(TelemetryModule.NAME, telemetryModuleDefine);\n        telemetryModuleDefine.provider().registerServiceImplementation(MetricsCreator.class, metricsCreator);\n\n        gRPCCleanup.register(InProcessServerBuilder\n            .forName(serverName).directExecutor().addService(new RemoteServiceHandler(moduleManager)).build().start());\n\n        RemoteServiceGrpc.RemoteServiceStub remoteServiceStub = RemoteServiceGrpc.newStub(\n            gRPCCleanup.register(InProcessChannelBuilder.forName(serverName).directExecutor().build()));\n\n        StreamObserver<RemoteMessage> streamObserver = remoteServiceStub.call(new StreamObserver<Empty>() {\n            @Override public void onNext(Empty empty) {\n\n            }\n\n            @Override public void onError(Throwable throwable) {\n\n            }\n\n            @Override public void onCompleted() {\n\n            }\n        });\n\n        RemoteMessage.Builder remoteMessage = RemoteMessage.newBuilder();\n        remoteMessage.setNextWorkerName(testWorkerId);\n\n        RemoteData.Builder remoteData = RemoteData.newBuilder();\n        remoteData.addDataStrings(\"test1\");\n        remoteData.addDataStrings(\"test2\");\n\n        remoteData.addDataLongs(10);\n        remoteData.addDataLongs(20);\n        remoteMessage.setRemoteData(remoteData);\n\n        streamObserver.onNext(remoteMessage.build());\n        streamObserver.onCompleted();\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/remote/RemoteServiceHandlerTestCase.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"f658d9eb4d4c6cf03ed29e7983c7b0df9476c930","commitMessage":"@@@Simplify the PxxMetrics and ThermodynamicMetrics to improve performance (#3162)\n\n* Feature of database session\n\n* Make it configurable.\n\n* Change the metrics process flow.\nbefore: metrics entrance -> aggregate worker -> remote worker -> trans worker -> minute.  hour.  day.  month persistence worker -> storage\nafter: metrics entrance -> aggregate worker -> remote worker -> minute persistence worker ->  trans worker -> hour.  day.  month persistence worker -> storage\n\n* IntKeyLongValueHashMap instead of IntKeyLongValueArray.\n\n* Make the OAP server can't startup.\n\n* Finish\n\n* Rename the method and fixed some test case issues.\n\n* Rename field.\n\n* no message\n","date":"2019-07-25 19:08:36","modifiedFileCount":"13","status":"M","submitter":"??? pengys"}]
