[{"authorTime":"2020-10-21 16:45:47","codes":[{"authorDate":"2020-04-29 08:43:26","commitOrder":2,"curCode":"    public void testFunction() {\n        PercentileFunctionInst inst = new PercentileFunctionInst();\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileFunction.PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileFunction.PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n\n        inst.calculate();\n        final int[] values = inst.getValues();\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        Assert.assertArrayEquals(new int[] {\n            100,\n            250\n        }, values);\n    }\n","date":"2020-04-29 08:43:26","endLine":99,"groupId":"4205","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/64/09d7bdbfae878486f49f20951768821ce2f419.src","preCode":"    public void testFunction() {\n        PercentileFunctionInst inst = new PercentileFunctionInst();\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileFunction.PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileFunction.PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n\n        inst.calculate();\n        final int[] values = inst.getValues();\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        Assert.assertArrayEquals(new int[] {\n            100,\n            250\n        }, values);\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/meter/function/PercentileFunctionTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"NB"},{"authorDate":"2020-10-21 16:45:47","commitOrder":2,"curCode":"    public void testBuilder() throws IllegalAccessException, InstantiationException {\n        PercentileFunctionInst inst = new PercentileFunctionInst();\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n        inst.calculate();\n\n        final StorageBuilder storageBuilder = inst.builder().newInstance();\n\n        \r\n        final Map map = storageBuilder.data2Map(inst);\n        map.put(AvgHistogramPercentileFunction.COUNT, ((DataTable) map.get(AvgHistogramPercentileFunction.COUNT)).toStorageData());\n        map.put(AvgHistogramPercentileFunction.SUMMATION, ((DataTable) map.get(AvgHistogramPercentileFunction.SUMMATION)).toStorageData());\n        map.put(AvgHistogramPercentileFunction.DATASET, ((DataTable) map.get(AvgHistogramPercentileFunction.DATASET)).toStorageData());\n        map.put(AvgHistogramPercentileFunction.VALUE, ((DataTable) map.get(AvgHistogramPercentileFunction.VALUE)).toStorageData());\n        map.put(AvgHistogramPercentileFunction.RANKS, ((IntList) map.get(AvgHistogramPercentileFunction.RANKS)).toStorageData());\n\n        final AvgHistogramPercentileFunction inst2 = (AvgHistogramPercentileFunction) storageBuilder.map2Data(map);\n        Assert.assertEquals(inst, inst2);\n        \r\n        Assert.assertEquals(inst.getDataset(), inst2.getDataset());\n        Assert.assertEquals(inst.getPercentileValues(), inst2.getPercentileValues());\n        Assert.assertEquals(inst.getRanks(), inst2.getRanks());\n    }\n","date":"2020-10-21 16:45:47","endLine":163,"groupId":"5076","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/78/e34964314d338a8193a083365ea59533bbad00.src","preCode":"    public void testBuilder() throws IllegalAccessException, InstantiationException {\n        PercentileFunctionInst inst = new PercentileFunctionInst();\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n        inst.calculate();\n\n        final StorageBuilder storageBuilder = inst.builder().newInstance();\n\n        \r\n        final Map map = storageBuilder.data2Map(inst);\n        map.put(AvgHistogramPercentileFunction.COUNT, ((DataTable) map.get(AvgHistogramPercentileFunction.COUNT)).toStorageData());\n        map.put(AvgHistogramPercentileFunction.SUMMATION, ((DataTable) map.get(AvgHistogramPercentileFunction.SUMMATION)).toStorageData());\n        map.put(AvgHistogramPercentileFunction.DATASET, ((DataTable) map.get(AvgHistogramPercentileFunction.DATASET)).toStorageData());\n        map.put(AvgHistogramPercentileFunction.VALUE, ((DataTable) map.get(AvgHistogramPercentileFunction.VALUE)).toStorageData());\n        map.put(AvgHistogramPercentileFunction.RANKS, ((IntList) map.get(AvgHistogramPercentileFunction.RANKS)).toStorageData());\n\n        final AvgHistogramPercentileFunction inst2 = (AvgHistogramPercentileFunction) storageBuilder.map2Data(map);\n        Assert.assertEquals(inst, inst2);\n        \r\n        Assert.assertEquals(inst.getDataset(), inst2.getDataset());\n        Assert.assertEquals(inst.getPercentileValues(), inst2.getPercentileValues());\n        Assert.assertEquals(inst.getRanks(), inst2.getRanks());\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunctionTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"}],"commitId":"9ce47d5bdc9e614885066d66384ee6092604efba","commitMessage":"@@@Meter Analysis Language (#5531)\n\n","date":"2020-10-21 16:45:47","modifiedFileCount":"7","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2020-11-11 13:59:27","codes":[{"authorDate":"2020-04-29 08:43:26","commitOrder":3,"curCode":"    public void testFunction() {\n        PercentileFunctionInst inst = new PercentileFunctionInst();\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileFunction.PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileFunction.PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n\n        inst.calculate();\n        final int[] values = inst.getValues();\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        Assert.assertArrayEquals(new int[] {\n            100,\n            250\n        }, values);\n    }\n","date":"2020-04-29 08:43:26","endLine":99,"groupId":"4205","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/64/09d7bdbfae878486f49f20951768821ce2f419.src","preCode":"    public void testFunction() {\n        PercentileFunctionInst inst = new PercentileFunctionInst();\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileFunction.PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileFunction.PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n\n        inst.calculate();\n        final int[] values = inst.getValues();\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        Assert.assertArrayEquals(new int[] {\n            100,\n            250\n        }, values);\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/meter/function/PercentileFunctionTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2020-11-11 13:59:27","commitOrder":3,"curCode":"    public void testBuilder() throws IllegalAccessException, InstantiationException {\n        PercentileFunctionInst inst = new PercentileFunctionInst();\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n        inst.calculate();\n\n        final StorageBuilder storageBuilder = inst.builder().newInstance();\n\n        \r\n        final Map map = storageBuilder.data2Map(inst);\n        map.put(\n            AvgHistogramPercentileFunction.COUNT,\n            ((DataTable) map.get(AvgHistogramPercentileFunction.COUNT)).toStorageData()\n        );\n        map.put(\n            AvgHistogramPercentileFunction.SUMMATION,\n            ((DataTable) map.get(AvgHistogramPercentileFunction.SUMMATION)).toStorageData()\n        );\n        map.put(\n            AvgHistogramPercentileFunction.DATASET,\n            ((DataTable) map.get(AvgHistogramPercentileFunction.DATASET)).toStorageData()\n        );\n        map.put(\n            AvgHistogramPercentileFunction.VALUE,\n            ((DataTable) map.get(AvgHistogramPercentileFunction.VALUE)).toStorageData()\n        );\n        map.put(\n            AvgHistogramPercentileFunction.RANKS,\n            ((IntList) map.get(AvgHistogramPercentileFunction.RANKS)).toStorageData()\n        );\n\n        final AvgHistogramPercentileFunction inst2 = (AvgHistogramPercentileFunction) storageBuilder.map2Data(map);\n        assertEquals(inst, inst2);\n        \r\n        assertEquals(inst.getDataset(), inst2.getDataset());\n        assertEquals(inst.getPercentileValues(), inst2.getPercentileValues());\n        assertEquals(inst.getRanks(), inst2.getRanks());\n    }\n","date":"2020-11-11 13:59:27","endLine":180,"groupId":"5076","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/07/77f96601f31f960835af0d955b94e2f36442db.src","preCode":"    public void testBuilder() throws IllegalAccessException, InstantiationException {\n        PercentileFunctionInst inst = new PercentileFunctionInst();\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n        inst.calculate();\n\n        final StorageBuilder storageBuilder = inst.builder().newInstance();\n\n        \r\n        final Map map = storageBuilder.data2Map(inst);\n        map.put(AvgHistogramPercentileFunction.COUNT, ((DataTable) map.get(AvgHistogramPercentileFunction.COUNT)).toStorageData());\n        map.put(AvgHistogramPercentileFunction.SUMMATION, ((DataTable) map.get(AvgHistogramPercentileFunction.SUMMATION)).toStorageData());\n        map.put(AvgHistogramPercentileFunction.DATASET, ((DataTable) map.get(AvgHistogramPercentileFunction.DATASET)).toStorageData());\n        map.put(AvgHistogramPercentileFunction.VALUE, ((DataTable) map.get(AvgHistogramPercentileFunction.VALUE)).toStorageData());\n        map.put(AvgHistogramPercentileFunction.RANKS, ((IntList) map.get(AvgHistogramPercentileFunction.RANKS)).toStorageData());\n\n        final AvgHistogramPercentileFunction inst2 = (AvgHistogramPercentileFunction) storageBuilder.map2Data(map);\n        Assert.assertEquals(inst, inst2);\n        \r\n        Assert.assertEquals(inst.getDataset(), inst2.getDataset());\n        Assert.assertEquals(inst.getPercentileValues(), inst2.getPercentileValues());\n        Assert.assertEquals(inst.getRanks(), inst2.getRanks());\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunctionTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"c66ae0b0c2db184117d2f1852c63f611a011346b","commitMessage":"@@@Fix issue caused by PR#5818 (#5826)\n\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>","date":"2020-11-11 13:59:27","modifiedFileCount":"2","status":"M","submitter":"XinZhang"},{"authorTime":"2021-02-06 21:22:58","codes":[{"authorDate":"2020-04-29 08:43:26","commitOrder":4,"curCode":"    public void testFunction() {\n        PercentileFunctionInst inst = new PercentileFunctionInst();\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileFunction.PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileFunction.PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n\n        inst.calculate();\n        final int[] values = inst.getValues();\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        Assert.assertArrayEquals(new int[] {\n            100,\n            250\n        }, values);\n    }\n","date":"2020-04-29 08:43:26","endLine":99,"groupId":"10245","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFunction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/64/09d7bdbfae878486f49f20951768821ce2f419.src","preCode":"    public void testFunction() {\n        PercentileFunctionInst inst = new PercentileFunctionInst();\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileFunction.PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileFunction.PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n\n        inst.calculate();\n        final int[] values = inst.getValues();\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        Assert.assertArrayEquals(new int[] {\n            100,\n            250\n        }, values);\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/meter/function/PercentileFunctionTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2021-02-06 21:22:58","commitOrder":4,"curCode":"    public void testBuilder() throws IllegalAccessException, InstantiationException {\n        PercentileFunctionInst inst = new PercentileFunctionInst();\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n        inst.calculate();\n\n        final StorageHashMapBuilder storageBuilder = inst.builder().newInstance();\n\n        \r\n        final Map map = storageBuilder.entity2Storage(inst);\n        map.put(\n            AvgHistogramPercentileFunction.COUNT,\n            ((DataTable) map.get(AvgHistogramPercentileFunction.COUNT)).toStorageData()\n        );\n        map.put(\n            AvgHistogramPercentileFunction.SUMMATION,\n            ((DataTable) map.get(AvgHistogramPercentileFunction.SUMMATION)).toStorageData()\n        );\n        map.put(\n            AvgHistogramPercentileFunction.DATASET,\n            ((DataTable) map.get(AvgHistogramPercentileFunction.DATASET)).toStorageData()\n        );\n        map.put(\n            AvgHistogramPercentileFunction.VALUE,\n            ((DataTable) map.get(AvgHistogramPercentileFunction.VALUE)).toStorageData()\n        );\n        map.put(\n            AvgHistogramPercentileFunction.RANKS,\n            ((IntList) map.get(AvgHistogramPercentileFunction.RANKS)).toStorageData()\n        );\n\n        final AvgHistogramPercentileFunction inst2 = (AvgHistogramPercentileFunction) storageBuilder.storage2Entity(map);\n        assertEquals(inst, inst2);\n        \r\n        assertEquals(inst.getDataset(), inst2.getDataset());\n        assertEquals(inst.getPercentileValues(), inst2.getPercentileValues());\n        assertEquals(inst.getRanks(), inst2.getRanks());\n    }\n","date":"2021-02-06 21:22:58","endLine":180,"groupId":"10245","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testBuilder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/29/db0260116c5e8f4e9f52f4902ec80764589446.src","preCode":"    public void testBuilder() throws IllegalAccessException, InstantiationException {\n        PercentileFunctionInst inst = new PercentileFunctionInst();\n        inst.accept(\n            MeterEntity.newService(\"service-test\"),\n            new PercentileArgument(\n                new BucketedValues(\n                    BUCKETS,\n                    new long[] {\n                        10,\n                        20,\n                        30,\n                        40\n                    }\n                ),\n                RANKS\n            )\n        );\n        inst.calculate();\n\n        final StorageBuilder storageBuilder = inst.builder().newInstance();\n\n        \r\n        final Map map = storageBuilder.data2Map(inst);\n        map.put(\n            AvgHistogramPercentileFunction.COUNT,\n            ((DataTable) map.get(AvgHistogramPercentileFunction.COUNT)).toStorageData()\n        );\n        map.put(\n            AvgHistogramPercentileFunction.SUMMATION,\n            ((DataTable) map.get(AvgHistogramPercentileFunction.SUMMATION)).toStorageData()\n        );\n        map.put(\n            AvgHistogramPercentileFunction.DATASET,\n            ((DataTable) map.get(AvgHistogramPercentileFunction.DATASET)).toStorageData()\n        );\n        map.put(\n            AvgHistogramPercentileFunction.VALUE,\n            ((DataTable) map.get(AvgHistogramPercentileFunction.VALUE)).toStorageData()\n        );\n        map.put(\n            AvgHistogramPercentileFunction.RANKS,\n            ((IntList) map.get(AvgHistogramPercentileFunction.RANKS)).toStorageData()\n        );\n\n        final AvgHistogramPercentileFunction inst2 = (AvgHistogramPercentileFunction) storageBuilder.map2Data(map);\n        assertEquals(inst, inst2);\n        \r\n        assertEquals(inst.getDataset(), inst2.getDataset());\n        assertEquals(inst.getPercentileValues(), inst2.getPercentileValues());\n        assertEquals(inst.getRanks(), inst2.getRanks());\n    }\n","realPath":"oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunctionTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"}],"commitId":"fc23dabf37a85cfc27482dbaf25b0109114f6ef7","commitMessage":"@@@Support multiple implementations of StorageBuilder in different storage implementations - stage 1. (#6334)\n\n","date":"2021-02-06 21:22:58","modifiedFileCount":"74","status":"M","submitter":"?? Wu Sheng"}]
