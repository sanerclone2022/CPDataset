[{"authorTime":"2020-11-22 23:28:54","codes":[{"authorDate":"2020-08-11 07:24:40","commitOrder":9,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-08-11 07:24:40","endLine":176,"groupId":"1220","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/82/db55355da961e76002418cb65d748983d29968.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"NB"},{"authorDate":"2020-11-22 23:28:54","commitOrder":9,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-11-22 23:28:54","endLine":166,"groupId":"1220","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/30/d4fa8571875c9a13f148bee9db7e98e2707fb8.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-tidb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/tidb/TiDBStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"}],"commitId":"8d164d3dd8c35cdafe683abc7fd9f4e4b530808f","commitMessage":"@@@Add Tidb provider module. (#5844)\n\n* fix transaction too large error when use TiDB as storage\n\n* add CHANGES.md\n\n* fix typo\n\n* add tidb storage provider module.\n\n* add e2e.\n\n* revert ui submodule.\n\n* fix license.\n\n* Fix wrong health check test\n\n* add tidb ttl e2e.\n\nCo-authored-by: moonsphere <moonsphere@m.com>\nCo-authored-by: kezhenxu94 <kezhenxu94@apache.org>\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>","date":"2020-11-22 23:28:54","modifiedFileCount":"3","status":"M","submitter":"Jared Tan"},{"authorTime":"2021-01-14 09:49:11","codes":[{"authorDate":"2021-01-14 09:49:11","commitOrder":10,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTracesTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTracesTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTracesTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-01-14 09:49:11","endLine":194,"groupId":"1220","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e4/c281a8be971f396a72542024ff0d9a767a678d.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2021-01-14 09:49:11","commitOrder":10,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-01-14 09:49:11","endLine":181,"groupId":"1220","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5d/9557fd3572cf42178fd47b395536cd7c789021.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-tidb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/tidb/TiDBStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"15452025c65dd6934bd9d6c8a930961b0f960594","commitMessage":"@@@Log collecting and query implementation (#6120)\n\n","date":"2021-01-14 09:49:11","modifiedFileCount":"51","status":"M","submitter":"zhang-wei"},{"authorTime":"2021-04-25 17:22:43","codes":[{"authorDate":"2021-01-14 09:49:11","commitOrder":11,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTracesTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTracesTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTracesTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-01-14 09:49:11","endLine":194,"groupId":"10809","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e4/c281a8be971f396a72542024ff0d9a767a678d.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTracesTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTracesTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTracesTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"N"},{"authorDate":"2021-04-25 17:22:43","commitOrder":11,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableAlarmTags = configService.getSearchableAlarmTags().split(Const.COMMA).length;\n        if (numOfSearchableAlarmTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableAlarmTags[\" + numOfSearchableAlarmTags\n                    + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                    + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                    + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-04-25 17:22:43","endLine":199,"groupId":"10809","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/d057cab79db1a0444b8f6ac035c7c485a9e675.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-tidb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/tidb/TiDBStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"7a533313676579da1321c0177c10fc237a052cbe","commitMessage":"@@@Support alarm tags (#6820)\n\n","date":"2021-04-25 17:22:43","modifiedFileCount":"42","status":"M","submitter":"liqiangz"}]
