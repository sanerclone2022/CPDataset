[{"authorTime":"2020-05-11 16:05:06","codes":[{"authorDate":"2020-04-14 09:32:54","commitOrder":4,"curCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/nginx/end/info\") && !endpoint.getLabel().equals(\"/nginx/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","date":"2020-04-14 09:32:54","endLine":243,"groupId":"7008","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(Endpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/48/ebc1d7121e1501f2100176f2987e74c9a5e26e.src","preCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/nginx/end/info\") && !endpoint.getLabel().equals(\"/nginx/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"NB"},{"authorDate":"2020-05-11 16:05:06","commitOrder":4,"curCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","date":"2020-05-11 16:05:06","endLine":225,"groupId":"7008","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(Endpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/25/4fc4e16bef93aaed5d712186ee01a4cfcb93b8.src","preCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/PythonE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"B"}],"commitId":"576bd7e2864ea7a922c1ee6c71cdb1ace5d86a50","commitMessage":"@@@Test: add E2E test for Python Agent (#4770)\n\n","date":"2020-05-11 16:05:06","modifiedFileCount":"1","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-10-29 14:38:49","codes":[{"authorDate":"2020-10-29 14:38:49","commitOrder":5,"curCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/nginx/end/info\") && !endpoint.getLabel().equals(\"/nginx/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n            for (String metricName : ALL_ENDPOINT_MULTIPLE_LINEAR_METRICS) {\n                verifyPercentileMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n        }\n    }\n","date":"2020-10-29 14:38:49","endLine":249,"groupId":"1068","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"verifyEndpointsMetrics","params":"(Endpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/58/a2788fdc1b4516b99744cd01835d8d999a59ee.src","preCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/nginx/end/info\") && !endpoint.getLabel().equals(\"/nginx/info\")) {\n                continue;\n            }\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/LuaE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"},{"authorDate":"2020-10-29 14:38:49","commitOrder":5,"curCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n            for (String metricName : ALL_ENDPOINT_MULTIPLE_LINEAR_METRICS) {\n                verifyPercentileMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n        }\n    }\n","date":"2020-10-29 14:38:49","endLine":234,"groupId":"1068","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(Endpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3e/fdee5981e491a3a74d308166ad1b392dddd463.src","preCode":"    private void verifyEndpointsMetrics(Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            for (final String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}: {}\", endpoint, metricName);\n\n                final Metrics metrics = graphql.metrics(\n                    new MetricsQuery().stepByMinute().metricsName(metricName).id(endpoint.getKey())\n                );\n\n                LOGGER.info(\"metrics: {}\", metrics);\n\n                final AtLeastOneOfMetricsMatcher instanceRespTimeMatcher = new AtLeastOneOfMetricsMatcher();\n                final MetricsValueMatcher greaterThanZero = new MetricsValueMatcher();\n                greaterThanZero.setValue(\"gt 0\");\n                instanceRespTimeMatcher.setValue(greaterThanZero);\n                instanceRespTimeMatcher.verify(metrics);\n\n                LOGGER.info(\"{}: {}\", metricName, metrics);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/PythonE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"}],"commitId":"c95a9134925cbe8101dc72dbaca38269eb3dc3b1","commitMessage":"@@@Add percentile tests in e2e test. (#5737)\n\n","date":"2020-10-29 14:38:49","modifiedFileCount":"11","status":"M","submitter":"Humbertzhang"}]
