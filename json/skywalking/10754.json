[{"authorTime":"2021-01-02 14:34:54","codes":[{"authorDate":"2021-01-02 14:34:54","commitOrder":1,"curCode":"    public SampleFamily avg(List<String> by) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(s -> s.value).average().orElse(0.0D);\n            return SampleFamily.build(this.context, newSample(ImmutableMap.of(), samples[0].timestamp, result));\n        }\n        return SampleFamily.build(\n            this.context,\n            Arrays.stream(samples)\n                  .map(sample -> Tuple.of(by.stream()\n                                            .collect(toImmutableMap(labelKey -> labelKey, labelKey -> sample.labels.getOrDefault(labelKey, \"\"))), sample))\n                  .collect(groupingBy(Tuple2::_1, mapping(Tuple2::_2, toList())))\n                  .entrySet().stream()\n                  .map(entry -> newSample(entry.getKey(), entry.getValue().get(0).timestamp, entry.getValue().stream()\n                                                                                                  .mapToDouble(s -> s.value).average().orElse(0.0D)))\n                  .toArray(Sample[]::new)\n        );\n    }\n","date":"2021-01-02 14:34:54","endLine":197,"groupId":"5262","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"avg","params":"(List<String>by)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/95/80d85fb57d2a3c6ea2034ac71ad2129c16e80f.src","preCode":"    public SampleFamily avg(List<String> by) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(s -> s.value).average().orElse(0.0D);\n            return SampleFamily.build(this.context, newSample(ImmutableMap.of(), samples[0].timestamp, result));\n        }\n        return SampleFamily.build(\n            this.context,\n            Arrays.stream(samples)\n                  .map(sample -> Tuple.of(by.stream()\n                                            .collect(toImmutableMap(labelKey -> labelKey, labelKey -> sample.labels.getOrDefault(labelKey, \"\"))), sample))\n                  .collect(groupingBy(Tuple2::_1, mapping(Tuple2::_2, toList())))\n                  .entrySet().stream()\n                  .map(entry -> newSample(entry.getKey(), entry.getValue().get(0).timestamp, entry.getValue().stream()\n                                                                                                  .mapToDouble(s -> s.value).average().orElse(0.0D)))\n                  .toArray(Sample[]::new)\n        );\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"B"},{"authorDate":"2021-01-02 14:34:54","commitOrder":1,"curCode":"    protected SampleFamily aggregate(List<String> by, DoubleBinaryOperator aggregator) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(s -> s.value).reduce(aggregator).orElse(0.0D);\n            return SampleFamily.build(this.context, newSample(ImmutableMap.of(), samples[0].timestamp, result));\n        }\n        return SampleFamily.build(this.context, Arrays.stream(samples)\n            .map(sample -> Tuple.of(by.stream()\n                .collect(toImmutableMap(labelKey -> labelKey, labelKey -> sample.labels.getOrDefault(labelKey, \"\"))), sample))\n            .collect(groupingBy(Tuple2::_1, mapping(Tuple2::_2, toList())))\n            .entrySet().stream()\n            .map(entry -> newSample(entry.getKey(), entry.getValue().get(0).timestamp, entry.getValue().stream()\n                .mapToDouble(s -> s.value).reduce(aggregator).orElse(0.0D)))\n            .toArray(Sample[]::new));\n    }\n","date":"2021-01-02 14:34:54","endLine":216,"groupId":"5263","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregate","params":"(List<String>by@DoubleBinaryOperatoraggregator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/95/80d85fb57d2a3c6ea2034ac71ad2129c16e80f.src","preCode":"    protected SampleFamily aggregate(List<String> by, DoubleBinaryOperator aggregator) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(s -> s.value).reduce(aggregator).orElse(0.0D);\n            return SampleFamily.build(this.context, newSample(ImmutableMap.of(), samples[0].timestamp, result));\n        }\n        return SampleFamily.build(this.context, Arrays.stream(samples)\n            .map(sample -> Tuple.of(by.stream()\n                .collect(toImmutableMap(labelKey -> labelKey, labelKey -> sample.labels.getOrDefault(labelKey, \"\"))), sample))\n            .collect(groupingBy(Tuple2::_1, mapping(Tuple2::_2, toList())))\n            .entrySet().stream()\n            .map(entry -> newSample(entry.getKey(), entry.getValue().get(0).timestamp, entry.getValue().stream()\n                .mapToDouble(s -> s.value).reduce(aggregator).orElse(0.0D)))\n            .toArray(Sample[]::new));\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"}],"commitId":"f54f639c4d9207c20490519121eeabe6acf37374","commitMessage":"@@@Enhance Envoy metrics service analyzer by MAL (#6091)\n\n","date":"2021-01-02 14:34:54","modifiedFileCount":"8","status":"B","submitter":"Zhenxu Ke"},{"authorTime":"2021-02-25 15:10:28","codes":[{"authorDate":"2021-02-25 15:10:28","commitOrder":2,"curCode":"    public SampleFamily avg(List<String> by) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(Sample::getValue).average().orElse(0.0D);\n            return SampleFamily.build(this.context, newSample(ImmutableMap.of(), samples[0].timestamp, result));\n        }\n\n        return SampleFamily.build(\n            this.context,\n            Arrays.stream(samples)\n                  .collect(groupingBy(it -> getLabels(by, it), mapping(identity(), toList())))\n                  .entrySet().stream()\n                  .map(entry -> newSample(\n                      entry.getKey(),\n                      entry.getValue().get(0).getTimestamp(),\n                      entry.getValue().stream().mapToDouble(Sample::getValue).average().orElse(0.0D)\n                  ))\n                  .toArray(Sample[]::new)\n        );\n    }\n","date":"2021-02-25 15:10:28","endLine":198,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"avg","params":"(List<String>by)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/74/d19269102787e2febd4118d9b892f5a570267b.src","preCode":"    public SampleFamily avg(List<String> by) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(s -> s.value).average().orElse(0.0D);\n            return SampleFamily.build(this.context, newSample(ImmutableMap.of(), samples[0].timestamp, result));\n        }\n        return SampleFamily.build(\n            this.context,\n            Arrays.stream(samples)\n                  .map(sample -> Tuple.of(by.stream()\n                                            .collect(toImmutableMap(labelKey -> labelKey, labelKey -> sample.labels.getOrDefault(labelKey, \"\"))), sample))\n                  .collect(groupingBy(Tuple2::_1, mapping(Tuple2::_2, toList())))\n                  .entrySet().stream()\n                  .map(entry -> newSample(entry.getKey(), entry.getValue().get(0).timestamp, entry.getValue().stream()\n                                                                                                  .mapToDouble(s -> s.value).average().orElse(0.0D)))\n                  .toArray(Sample[]::new)\n        );\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"},{"authorDate":"2021-02-25 15:10:28","commitOrder":2,"curCode":"    protected SampleFamily aggregate(List<String> by, DoubleBinaryOperator aggregator) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(s -> s.value).reduce(aggregator).orElse(0.0D);\n            return SampleFamily.build(this.context, newSample(ImmutableMap.of(), samples[0].timestamp, result));\n        }\n\n        return SampleFamily.build(\n            this.context,\n            Arrays.stream(samples)\n                  .collect(groupingBy(it -> getLabels(by, it), mapping(identity(), toList())))\n                  .entrySet().stream()\n                  .map(entry -> newSample(\n                      entry.getKey(),\n                      entry.getValue().get(0).getTimestamp(),\n                      entry.getValue().stream().mapToDouble(Sample::getValue).reduce(aggregator).orElse(0.0D)\n                  ))\n                  .toArray(Sample[]::new)\n        );\n    }\n","date":"2021-02-25 15:10:28","endLine":222,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregate","params":"(List<String>by@DoubleBinaryOperatoraggregator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/74/d19269102787e2febd4118d9b892f5a570267b.src","preCode":"    protected SampleFamily aggregate(List<String> by, DoubleBinaryOperator aggregator) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(s -> s.value).reduce(aggregator).orElse(0.0D);\n            return SampleFamily.build(this.context, newSample(ImmutableMap.of(), samples[0].timestamp, result));\n        }\n        return SampleFamily.build(this.context, Arrays.stream(samples)\n            .map(sample -> Tuple.of(by.stream()\n                .collect(toImmutableMap(labelKey -> labelKey, labelKey -> sample.labels.getOrDefault(labelKey, \"\"))), sample))\n            .collect(groupingBy(Tuple2::_1, mapping(Tuple2::_2, toList())))\n            .entrySet().stream()\n            .map(entry -> newSample(entry.getKey(), entry.getValue().get(0).timestamp, entry.getValue().stream()\n                .mapToDouble(s -> s.value).reduce(aggregator).orElse(0.0D)))\n            .toArray(Sample[]::new));\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"77082de77be61708d0eca749bc6b975f7b353cef","commitMessage":"@@@Add `sum` function in meter system (#6427)\n\n* Add `sum` function in meter system\n\n* Fix minor potential bug and reformat some codes\n\n* Fix a bug\n\n* Use Set to hold the {aggregate. scope} labels as same labels maybe added by multiple aggregation functions\n\n* Separate downsampling function and revert unnecessary codes","date":"2021-02-25 15:10:28","modifiedFileCount":"7","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-03-17 09:02:38","codes":[{"authorDate":"2021-03-17 09:02:38","commitOrder":3,"curCode":"    public SampleFamily avg(List<String> by) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(Sample::getValue).average().orElse(0.0D);\n            return SampleFamily.build(this.context, InternalOps.newSample(ImmutableMap.of(), samples[0].timestamp, result));\n        }\n\n        return SampleFamily.build(\n            this.context,\n            Arrays.stream(samples)\n                  .collect(groupingBy(it -> InternalOps.getLabels(by, it), mapping(identity(), toList())))\n                  .entrySet().stream()\n                  .map(entry -> InternalOps.newSample(\n                      entry.getKey(),\n                      entry.getValue().get(0).getTimestamp(),\n                      entry.getValue().stream().mapToDouble(Sample::getValue).average().orElse(0.0D)\n                  ))\n                  .toArray(Sample[]::new)\n        );\n    }\n","date":"2021-03-17 09:02:38","endLine":203,"groupId":"415","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"avg","params":"(List<String>by)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d2/ef9009bc7963f79cefc0cd9208ed62d1b65183.src","preCode":"    public SampleFamily avg(List<String> by) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(Sample::getValue).average().orElse(0.0D);\n            return SampleFamily.build(this.context, newSample(ImmutableMap.of(), samples[0].timestamp, result));\n        }\n\n        return SampleFamily.build(\n            this.context,\n            Arrays.stream(samples)\n                  .collect(groupingBy(it -> getLabels(by, it), mapping(identity(), toList())))\n                  .entrySet().stream()\n                  .map(entry -> newSample(\n                      entry.getKey(),\n                      entry.getValue().get(0).getTimestamp(),\n                      entry.getValue().stream().mapToDouble(Sample::getValue).average().orElse(0.0D)\n                  ))\n                  .toArray(Sample[]::new)\n        );\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2021-03-17 09:02:38","commitOrder":3,"curCode":"    protected SampleFamily aggregate(List<String> by, DoubleBinaryOperator aggregator) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(s -> s.value).reduce(aggregator).orElse(0.0D);\n            return SampleFamily.build(this.context, InternalOps.newSample(ImmutableMap.of(), samples[0].timestamp, result));\n        }\n        return SampleFamily.build(\n            this.context,\n            Arrays.stream(samples)\n                  .collect(groupingBy(it -> InternalOps.getLabels(by, it), mapping(identity(), toList())))\n                  .entrySet().stream()\n                  .map(entry -> InternalOps.newSample(\n                      entry.getKey(),\n                      entry.getValue().get(0).getTimestamp(),\n                      entry.getValue().stream().mapToDouble(Sample::getValue).reduce(aggregator).orElse(0.0D)\n                  ))\n                  .toArray(Sample[]::new)\n        );\n    }\n","date":"2021-03-17 09:02:38","endLine":226,"groupId":"4644","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregate","params":"(List<String>by@DoubleBinaryOperatoraggregator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d2/ef9009bc7963f79cefc0cd9208ed62d1b65183.src","preCode":"    protected SampleFamily aggregate(List<String> by, DoubleBinaryOperator aggregator) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(s -> s.value).reduce(aggregator).orElse(0.0D);\n            return SampleFamily.build(this.context, newSample(ImmutableMap.of(), samples[0].timestamp, result));\n        }\n\n        return SampleFamily.build(\n            this.context,\n            Arrays.stream(samples)\n                  .collect(groupingBy(it -> getLabels(by, it), mapping(identity(), toList())))\n                  .entrySet().stream()\n                  .map(entry -> newSample(\n                      entry.getKey(),\n                      entry.getValue().get(0).getTimestamp(),\n                      entry.getValue().stream().mapToDouble(Sample::getValue).reduce(aggregator).orElse(0.0D)\n                  ))\n                  .toArray(Sample[]::new)\n        );\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"}],"commitId":"a8810b1ab0b50fe439bc14517281fca7e82489b2","commitMessage":"@@@Support metrics grouped by scope labelValue in MAL.  no need global same labelValue as before. (#6495)\n\n","date":"2021-03-17 09:02:38","modifiedFileCount":"2","status":"M","submitter":"wankai123"},{"authorTime":"2021-04-28 23:09:57","codes":[{"authorDate":"2021-04-28 23:09:57","commitOrder":4,"curCode":"    public SampleFamily avg(List<String> by) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(Sample::getValue).average().orElse(0.0D);\n            return SampleFamily.build(this.context, InternalOps.newSample(samples[0].name, ImmutableMap.of(), samples[0].timestamp, result));\n        }\n\n        return SampleFamily.build(\n            this.context,\n            Arrays.stream(samples)\n                  .collect(groupingBy(it -> InternalOps.getLabels(by, it), mapping(identity(), toList())))\n                  .entrySet().stream()\n                  .map(entry -> InternalOps.newSample(\n                      entry.getValue().get(0).getName(),\n                      entry.getKey(),\n                      entry.getValue().get(0).getTimestamp(),\n                      entry.getValue().stream().mapToDouble(Sample::getValue).average().orElse(0.0D)\n                  ))\n                  .toArray(Sample[]::new)\n        );\n    }\n","date":"2021-04-28 23:09:57","endLine":231,"groupId":"10754","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"avg","params":"(List<String>by)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b1/f887010ac0d5ca2647d380c0ce55c4f98a7882.src","preCode":"    public SampleFamily avg(List<String> by) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(Sample::getValue).average().orElse(0.0D);\n            return SampleFamily.build(this.context, InternalOps.newSample(ImmutableMap.of(), samples[0].timestamp, result));\n        }\n\n        return SampleFamily.build(\n            this.context,\n            Arrays.stream(samples)\n                  .collect(groupingBy(it -> InternalOps.getLabels(by, it), mapping(identity(), toList())))\n                  .entrySet().stream()\n                  .map(entry -> InternalOps.newSample(\n                      entry.getKey(),\n                      entry.getValue().get(0).getTimestamp(),\n                      entry.getValue().stream().mapToDouble(Sample::getValue).average().orElse(0.0D)\n                  ))\n                  .toArray(Sample[]::new)\n        );\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"},{"authorDate":"2021-04-28 23:09:57","commitOrder":4,"curCode":"    protected SampleFamily aggregate(List<String> by, DoubleBinaryOperator aggregator) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(s -> s.value).reduce(aggregator).orElse(0.0D);\n            return SampleFamily.build(this.context, InternalOps.newSample(samples[0].name, ImmutableMap.of(), samples[0].timestamp, result));\n        }\n        return SampleFamily.build(\n            this.context,\n            Arrays.stream(samples)\n                  .collect(groupingBy(it -> InternalOps.getLabels(by, it), mapping(identity(), toList())))\n                  .entrySet().stream()\n                  .map(entry -> InternalOps.newSample(\n                      entry.getValue().get(0).getName(),\n                      entry.getKey(),\n                      entry.getValue().get(0).getTimestamp(),\n                      entry.getValue().stream().mapToDouble(Sample::getValue).reduce(aggregator).orElse(0.0D)\n                  ))\n                  .toArray(Sample[]::new)\n        );\n    }\n","date":"2021-04-28 23:09:57","endLine":255,"groupId":"10754","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregate","params":"(List<String>by@DoubleBinaryOperatoraggregator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b1/f887010ac0d5ca2647d380c0ce55c4f98a7882.src","preCode":"    protected SampleFamily aggregate(List<String> by, DoubleBinaryOperator aggregator) {\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.aggregationLabels.addAll(by));\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        if (by == null) {\n            double result = Arrays.stream(samples).mapToDouble(s -> s.value).reduce(aggregator).orElse(0.0D);\n            return SampleFamily.build(this.context, InternalOps.newSample(ImmutableMap.of(), samples[0].timestamp, result));\n        }\n        return SampleFamily.build(\n            this.context,\n            Arrays.stream(samples)\n                  .collect(groupingBy(it -> InternalOps.getLabels(by, it), mapping(identity(), toList())))\n                  .entrySet().stream()\n                  .map(entry -> InternalOps.newSample(\n                      entry.getKey(),\n                      entry.getValue().get(0).getTimestamp(),\n                      entry.getValue().stream().mapToDouble(Sample::getValue).reduce(aggregator).orElse(0.0D)\n                  ))\n                  .toArray(Sample[]::new)\n        );\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"}],"commitId":"db1d655b47ff976586eb1ac5e63f5feb3275b6a6","commitMessage":"@@@Fix: MAL function would miss samples name after creating new samples. (#6864)\n\n","date":"2021-04-28 23:09:57","modifiedFileCount":"11","status":"M","submitter":"wankai123"}]
