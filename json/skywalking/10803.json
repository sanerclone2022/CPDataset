[{"authorTime":"2021-01-14 09:49:11","codes":[{"authorDate":"2021-02-20 20:59:51","commitOrder":10,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                .provider()\n                .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                    + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                    + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                    + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                    + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                    + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                    + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            postgresqlClient.connect();\n\n            MySQLTableInstaller installer = new PostgreSQLTableInstaller(\n                    postgresqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-02-20 20:59:51","endLine":182,"groupId":"1220","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/c69bc1d82e2f5e0dc737187f65bd1b490a920e.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                .provider()\n                .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                    + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                    + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                    + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                    + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                    + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                    + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            postgresqlClient.connect();\n\n            MySQLTableInstaller installer = new PostgreSQLTableInstaller(\n                    postgresqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/postgresql/PostgreSQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"B"},{"authorDate":"2021-01-14 09:49:11","commitOrder":10,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTracesTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTracesTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTracesTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-01-14 09:49:11","endLine":194,"groupId":"1220","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e4/c281a8be971f396a72542024ff0d9a767a678d.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTracesTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTracesTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTracesTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"NB"}],"commitId":"c45bb361ee150c4295dce7ef174c7d1eaa834a78","commitMessage":"@@@Storage plugin supports PostgreSQL (#6345)\n\n","date":"2021-02-20 20:59:51","modifiedFileCount":"3","status":"M","submitter":"haoyann"},{"authorTime":"2021-01-14 09:49:11","codes":[{"authorDate":"2021-04-25 17:22:43","commitOrder":11,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                .provider()\n                .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                    + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                    + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                    + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                    + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                    + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                    + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableAlarmTags = configService.getSearchableAlarmTags().split(Const.COMMA).length;\n        if (numOfSearchableAlarmTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableAlarmTags[\" + numOfSearchableAlarmTags\n                    + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                    + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                    + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            postgresqlClient.connect();\n\n            MySQLTableInstaller installer = new PostgreSQLTableInstaller(\n                    postgresqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-04-25 17:22:43","endLine":194,"groupId":"10803","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/52/800b332a81075ae9833de6c397e3ac8910bb62.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                .provider()\n                .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                    + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                    + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                    + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                    + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                    + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                    + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            postgresqlClient.connect();\n\n            MySQLTableInstaller installer = new PostgreSQLTableInstaller(\n                    postgresqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/postgresql/PostgreSQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2021-01-14 09:49:11","commitOrder":11,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTracesTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTracesTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTracesTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-01-14 09:49:11","endLine":194,"groupId":"10803","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e4/c281a8be971f396a72542024ff0d9a767a678d.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTracesTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTracesTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTracesTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"N"}],"commitId":"7a533313676579da1321c0177c10fc237a052cbe","commitMessage":"@@@Support alarm tags (#6820)\n\n","date":"2021-04-25 17:22:43","modifiedFileCount":"42","status":"M","submitter":"liqiangz"}]
