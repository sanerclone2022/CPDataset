[{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-03-04 20:28:14","commitOrder":4,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-03-04 20:28:14","endLine":169,"groupId":"4310","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/61/43f9d8994b029d3b6c2527120894a31f515fa0.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2020-02-11 17:10:49","commitOrder":4,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-02-11 17:10:49","endLine":83,"groupId":"2922","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f2/b14c4a00ad60655f8d11c53c11657220e9c6ef.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"NB"}],"commitId":"0df2d0a5e9210e0c2a6c4f7e5fe350d3aa21cab0","commitMessage":"@@@Provide profile exporter tool (#4416)\n\n","date":"2020-03-04 20:28:14","modifiedFileCount":"2","status":"M","submitter":"mrproliu"},{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-03-28 22:51:41","commitOrder":5,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-03-28 22:51:41","endLine":169,"groupId":"4310","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/54/dda096e9bbe6d54423417693143155589eac9f.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(EndpointInventoryCache.class, new EndpointInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IEndpointInventoryRegister.class, new EndpointInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2020-02-11 17:10:49","commitOrder":5,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-02-11 17:10:49","endLine":83,"groupId":"2922","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f2/b14c4a00ad60655f8d11c53c11657220e9c6ef.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"4474907fef809e2342b644a324da011834a55420","commitMessage":"@@@[Inventory Design Change] Remove endpoint register and endpoint inventory (#4570)\n\n* Finish step one.  source and entity changed.\n\n* Step 2.  finish the basic and core DAO changes.\n\n* Step 3. Change all source codes of backend.  and make project compiling successfully.\n\n* Make startup successful and persistence works.\n\n* Fix dead codes in the MySQLTableInstaller.\n\n* Fix mischange.\n\n* Fix MySQL storage bootstrap error.\n\n* Rollback dependency change.\n\n* Simply enable tailing logs from container no mater it's in CI or not\n\n* Fix segment table issue.\n\n* Fix MySQL Instanller.\n\n* Support Influxdb implementation of new endpoint traffic.\n\n* Set and modify timeout to 90mins\n\n* Remove unnecessary entity in the EndpointTraffic.\n\n* Fix wrong entity builder and make name more clear.\n\n* Fix 2 equal methods bug.\n\n* Fix InfluxDB identifier(name) conflict issue.\n\n* Fix endpoint topology query.  endpoint id should be changed as a string.\n\n* Fix a missing change.\n\n* Fix a wrong commit.\n\n* Column name can't be changed.  due to it affect the hybrid metadb(h2/mysql) query.  change it explicitly with double quotation marks.\n\n* Fix formats.\n\n* Remove endpoint/operation register from the agent. and change the plugin tests(without local tests). operationId relation codes have been removed from agent too.\n\n* Try to fix the hytrix case.\n\n* Fix 3 cases.\n\n* Try to fix cases.\n\n* Fix 2.\n\n* Fix one.\n\n* Fix the serviceId type mis-change.\n\n* Fix int query\n\n* Fix hystrix case.\n\n* Fix a case.\n\n* Fix EndpointCallRelationDispatcher set the source/dest endpoint without id encoding.\n\n* Update documentation and add 2 test cases.\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>","date":"2020-03-28 22:51:41","modifiedFileCount":"121","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-03-30 18:56:26","commitOrder":6,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-03-30 18:56:26","endLine":169,"groupId":"4310","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f7/0a2e060799484128d8dc8db3a3fd38c14050d1.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(IModelSetter.class, storageModels);\n        this.registerServiceImplementation(IModelGetter.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2020-02-11 17:10:49","commitOrder":6,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-02-11 17:10:49","endLine":83,"groupId":"2922","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f2/b14c4a00ad60655f8d11c53c11657220e9c6ef.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"e55073e51970ecb50d014094e4e9b8dcc7d8c0d9","commitMessage":"@@@OAP Core polish.  especially storage level (#4587)\n\n- Add length definition with reasonable default value.\n- #content of @Column has been renamed to storageOnly . I add this to many fields as they are not being query in any case.\n- Merge H2 and MySQL columntype mapping back to consistent.\n- Remove @IDColumn.\n- Support @QueryUnifiedIndex.\n- Refactor the MySQL and H2 installers to use @Column and @QueryUnifiedIndex definitions to create indices automatically. But the index naming rule has been changed to entityseqIDX. seq is the Increment Interger for every entity.\n- Support @MetricsExtension and insertOnly in the MetricsPersistentWorker worker.\n- Optimize MetricsStreamProcessor","date":"2020-03-30 18:56:26","modifiedFileCount":"58","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":7,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-04-10 11:03:24","endLine":150,"groupId":"4565","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/21/8ab381cc662111690079fd73bde2a273e35581.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownsamplingConfigService.class, new DownsamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            ServiceInventoryCache.class, new ServiceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(IServiceInventoryRegister.class, new ServiceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            ServiceInstanceInventoryCache.class, new ServiceInstanceInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryRegister.class, new ServiceInstanceInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(\n            NetworkAddressInventoryCache.class, new NetworkAddressInventoryCache(getManager(), moduleConfig));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryRegister.class, new NetworkAddressInventoryRegister(getManager()));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":7,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        CoreRegisterLinker.setModuleManager(getManager());\n\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 17:59:21","commitOrder":8,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-04-10 17:59:21","endLine":153,"groupId":"4565","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/04/413b9a55807d27d04d139528ad11b29bada883.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":8,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"44cae97c259c06f95d1fc4b78ee41268670b6542","commitMessage":"@@@Set up restrict length rules for service.  instance and endpoint (#4633)\n\n* Set up restrict length rules for service.  instance and endpoint\n\n* Adjust two env names.","date":"2020-04-10 17:59:21","modifiedFileCount":"26","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-21 15:39:18","commitOrder":9,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-04-21 15:39:18","endLine":153,"groupId":"4565","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b4/8790fb3c232bfca5ad7135706c21f1604eaf55.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricQueryService.class, new MetricQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":9,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"418bdff277179b4660e578b1837f21fd3db514cb","commitMessage":"@@@New metrics query protocol v2 (#4679)\n\n1. Support the new query protocol.  and the v1 query protocol is still supported \n2. All `numOfxxx`/`GlobalBrief` is only a mock now.  no real number.\n3. typeOfMetrics service is a mock only too.  follow up PR will implement this.","date":"2020-04-21 15:39:18","modifiedFileCount":"123","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-22 13:14:59","commitOrder":10,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-04-22 13:14:59","endLine":155,"groupId":"6597","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8f/32900144625138baa4a62ff6ee9e4775249378.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":10,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"991d08337800b28dfe3c03eb8c166fe137c05e35","commitMessage":"@@@Support typeOfMetrics query (#4686)\n\n* Add data type to the column definition to replace the simple isValue definition. And top N query is also requiring value column now.\n\n* Support typeOfMetrics query.","date":"2020-04-22 13:14:59","modifiedFileCount":"28","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-24 23:33:13","commitOrder":11,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        MeterSystem meterSystem = MeterSystem.meterSystem(getManager());\n        this.registerServiceImplementation(MeterSystem.class, meterSystem);\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-04-24 23:33:13","endLine":159,"groupId":"6597","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/41/2cb79d19995dc40938c708e311475db64049f8.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":11,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"b635e254c4b327aca22469d0551c9b3a63d991b9","commitMessage":"@@@Provide Meter(metrics) system  (#4694)\n\nHere are the basic and simple usages of the MeterSystem APIs.\n\n## Meter Creation\nNew meter could be created based on metrics name.  function.  scope and data type. \n1. Metrics name is still the storage entity name.\n2. Functions are every similar with the OAL function.  just accepting different input.\n```java\nfinal MeterSystem meterSystem = MeterSystem.meterSystem(getManager());\nmeterSystem.create(\"test_long_metrics\".  \"avg\".  ScopeType.SERVICE.  Long.class);\n```\nNOTICE.  this creation should only be called in the `module#prepare` stage.  otherwise.  `Can't create new metrics anymore` exception will be raised after the **CORE** module `start` stage finished. You may find out.  there is a chance `create` could be executed successfully in your own `module#start` stage.  but it it just because of the sequence of provider loaded by the class loader.  **no guarantee.  so please don't do that**.\n\n## Runtime Calculation\n`AcceptableValue` is the object created at the runtime to accept new metrics value.\n```java\n         final MeterSystem service = getManager().find(CoreModule.NAME).provider().getService(MeterSystem.class);\n        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                final AcceptableValue<Long> value = service.buildMetrics(\"test_long_metrics\".  Long.class);\n                value.accept(MeterEntity.newService(\"abc\").  5L);\n                value.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\n                service.doStreamingCalculation(value);\n            }\n        }.  2.  2.  TimeUnit.SECONDS);\n```\n\n## Meter Functions\nRight now.  only `avg` function has been implemented. I submit this PR as soon as possible to get your feedback. I will add more functions.\n\n## Notice\n1. Make slow trace query available in the sampled record. Logically.  they are the same thing. The UI doesn't need to concern about the trace as a special case.\n2. Endpoint dependency will be removed from the dashboard. Because no query available for it. We will provide a new page for that in 8.1\n3. Comparison page will be removed due to dashboard is powerful enough to replace it.","date":"2020-04-24 23:33:13","modifiedFileCount":"10","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-05-08 21:21:03","commitOrder":12,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","date":"2020-05-08 21:21:03","endLine":159,"groupId":"6408","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e2/451d5386ebf92bd8ec021bb5a789e26c0e4a92.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        MeterSystem meterSystem = MeterSystem.meterSystem(getManager());\n        this.registerServiceImplementation(MeterSystem.class, meterSystem);\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(INewModel.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(IModelOverride.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":12,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"7edcd5aa33cec034047871ac1348b5b858b630f0","commitMessage":"@@@Change the model installation into the reactive module (#4761)\n\n","date":"2020-05-08 21:21:03","modifiedFileCount":"31","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-05-08 23:53:49","commitOrder":13,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n    }\n","date":"2020-05-08 23:53:49","endLine":163,"groupId":"6408","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/00/d241d594437798e178177368dbb82cc2fc66fe.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":13,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"d4f3218dea29371fc23c66f5c72f5e48f88dd4be","commitMessage":"@@@Support define multiple OAL configuration (#4748)\n\n","date":"2020-05-08 23:53:49","modifiedFileCount":"25","status":"M","submitter":"zhang-wei"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-05-20 22:50:22","commitOrder":14,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n            NamingControl.class,\n            new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n    }\n","date":"2020-05-20 22:50:22","endLine":167,"groupId":"6408","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/60292d19965660b23e37de378d437f1deb5b43.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(NamingLengthControl.class, new NamingLengthControl(50, 50, 150));\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":14,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"a10e04493272a88931d6916662b30d0a320287bb","commitMessage":"@@@Group Parameterized Endpoints (#4802)\n\n* Group Parameterized Endpoints. Configure the grouping rules for parameterized endpoints.  to improve the meaning of the metrics.\n","date":"2020-05-20 22:50:22","modifiedFileCount":"14","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-06-01 23:06:14","commitOrder":15,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n    }\n","date":"2020-06-01 23:06:14","endLine":171,"groupId":"6408","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/71/f1d9ad6f885435aee5bfbca2f48af561ebf5dc.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n            NamingControl.class,\n            new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n            DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n            IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n            NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n            ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n            ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":15,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-04-10 11:03:24","endLine":80,"groupId":"2922","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f5/a8a02c78ecb12e0c2d48c348412c3b49769a30.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"d094a0f7c0b4a2cf0de38735128b5c07181e30d2","commitMessage":"@@@Support UI template management. (#4843)\n\n","date":"2020-06-01 23:06:14","modifiedFileCount":"32","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-07-25 17:41:49","codes":[{"authorDate":"2020-06-01 23:06:14","commitOrder":16,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n    }\n","date":"2020-06-01 23:06:14","endLine":171,"groupId":"6408","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/71/f1d9ad6f885435aee5bfbca2f48af561ebf5dc.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"N"},{"authorDate":"2020-07-25 17:41:49","commitOrder":16,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-07-25 17:41:49","endLine":93,"groupId":"2922","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/dafe68aec0aff248f9325a28b54ac75d01d342.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        jettyServer = new JettyServer(config.getHost(), config.getPort(), config.getContextPath());\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"db9f8e6e008115d10ed8132b671e41229513beb7","commitMessage":"@@@Support Jetty server advanced configuration. (#5147)\n\n","date":"2020-07-25 17:41:49","modifiedFileCount":"8","status":"M","submitter":"Jared Tan"},{"authorTime":"2020-07-25 17:41:49","codes":[{"authorDate":"2020-08-31 15:46:37","commitOrder":17,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n    }\n","date":"2020-08-31 15:46:37","endLine":173,"groupId":"6408","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ab/d9839881b2dd7a467d8606da30db2e897031d9.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2020-07-25 17:41:49","commitOrder":17,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-07-25 17:41:49","endLine":93,"groupId":"2922","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/dafe68aec0aff248f9325a28b54ac75d01d342.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"7ef8b3e476001154ba5d600f7206add0277d4d24","commitMessage":"@@@Support Browser protocol at OAP (#4228)\n\n","date":"2020-08-31 15:46:37","modifiedFileCount":"24","status":"M","submitter":"zhang-wei"},{"authorTime":"2020-07-25 17:41:49","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":18,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","date":"2021-02-05 18:37:18","endLine":176,"groupId":"6408","id":29,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/07a41e3aaadbbcb0fda99537b05766d0876b2e.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2020-07-25 17:41:49","commitOrder":18,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","date":"2020-07-25 17:41:49","endLine":93,"groupId":"2922","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bf/dafe68aec0aff248f9325a28b54ac75d01d342.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"b92eac2cd6bf8774860b921ea04bafd59550a607","commitMessage":"@@@Add a new concept \"Event\" and its implementations to collect events (#6183)\n\n","date":"2021-02-05 18:37:18","modifiedFileCount":"15","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-02-27 14:50:54","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":19,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","date":"2021-02-05 18:37:18","endLine":176,"groupId":"10494","id":31,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/75/07a41e3aaadbbcb0fda99537b05766d0876b2e.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(\n                NamingControl.class,\n                new NamingControl(50, 50, 150, new EndpointNameGrouping())\n        );\n\n        MockStreamAnnotationListener streamAnnotationListener = new MockStreamAnnotationListener(getManager());\n        annotationScan.registerListener(streamAnnotationListener);\n\n        AnnotationScan scopeScan = new AnnotationScan();\n        scopeScan.registerListener(new DefaultScopeDefine.Listener());\n        try {\n            scopeScan.scan();\n        } catch (Exception e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n\n        this.registerServiceImplementation(MeterSystem.class, new MeterSystem(getManager()));\n\n        CoreModuleConfig moduleConfig = new CoreModuleConfig();\n        this.registerServiceImplementation(ConfigService.class, new ConfigService(moduleConfig));\n        this.registerServiceImplementation(\n                DownSamplingConfigService.class, new DownSamplingConfigService(Collections.emptyList()));\n\n        this.registerServiceImplementation(GRPCHandlerRegister.class, new MockGRPCHandlerRegister());\n        this.registerServiceImplementation(JettyHandlerRegister.class, new MockJettyHandlerRegister());\n\n        this.registerServiceImplementation(\n                IComponentLibraryCatalogService.class, new MockComponentLibraryCatalogService());\n\n        this.registerServiceImplementation(SourceReceiver.class, new MockSourceReceiver());\n\n        MockWorkerInstancesService instancesService = new MockWorkerInstancesService();\n        this.registerServiceImplementation(IWorkerInstanceGetter.class, instancesService);\n        this.registerServiceImplementation(IWorkerInstanceSetter.class, instancesService);\n\n        this.registerServiceImplementation(RemoteSenderService.class, new RemoteSenderService(getManager()));\n        this.registerServiceImplementation(ModelCreator.class, storageModels);\n        this.registerServiceImplementation(IModelManager.class, storageModels);\n        this.registerServiceImplementation(ModelManipulator.class, storageModels);\n\n        this.registerServiceImplementation(\n                NetworkAddressAliasCache.class, new NetworkAddressAliasCache(moduleConfig));\n\n        this.registerServiceImplementation(TopologyQueryService.class, new TopologyQueryService(getManager()));\n        this.registerServiceImplementation(MetricsMetadataQueryService.class, new MetricsMetadataQueryService());\n        this.registerServiceImplementation(MetricsQueryService.class, new MetricsQueryService(getManager()));\n        this.registerServiceImplementation(TraceQueryService.class, new TraceQueryService(getManager()));\n        this.registerServiceImplementation(BrowserLogQueryService.class, new BrowserLogQueryService(getManager()));\n        this.registerServiceImplementation(LogQueryService.class, new LogQueryService(getManager()));\n        this.registerServiceImplementation(MetadataQueryService.class, new MetadataQueryService(getManager()));\n        this.registerServiceImplementation(AggregationQueryService.class, new AggregationQueryService(getManager()));\n        this.registerServiceImplementation(AlarmQueryService.class, new AlarmQueryService(getManager()));\n        this.registerServiceImplementation(TopNRecordsQueryService.class, new TopNRecordsQueryService(getManager()));\n\n        \r\n        this.registerServiceImplementation(\n                ProfileTaskMutationService.class, new ProfileTaskMutationService(getManager()));\n        this.registerServiceImplementation(\n                ProfileTaskQueryService.class, new ProfileTaskQueryService(getManager(), moduleConfig));\n        this.registerServiceImplementation(ProfileTaskCache.class, new ProfileTaskCache(getManager(), moduleConfig));\n\n        this.registerServiceImplementation(CommandService.class, new CommandService(getManager()));\n\n        this.registerServiceImplementation(RemoteClientManager.class, new MockRemoteClientManager(getManager(), 0));\n\n        \r\n        this.registerServiceImplementation(OALEngineLoaderService.class, new OALEngineLoaderService(getManager()));\n\n        \r\n        this.registerServiceImplementation(UITemplateManagementService.class, new UITemplateManagementService(getManager()));\n\n        this.registerServiceImplementation(EventQueryService.class, new EventQueryService(getManager()));\n    }\n","realPath":"oap-server/server-tools/profile-exporter/tool-profile-snapshot-server-mock/src/main/java/org/apache/skywalking/oap/server/tool/profile/core/MockCoreModuleProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"},{"authorDate":"2021-02-27 14:50:54","commitOrder":19,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n    }\n","date":"2021-02-27 14:50:54","endLine":81,"groupId":"10494","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/81/e6d2846a31c0bb10c0493979aa33ba31cc7bf2.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        JettyServerConfig jettyServerConfig = JettyServerConfig.builder()\n                                                               .host(config.getHost())\n                                                               .port(config.getPort())\n                                                               .contextPath(config.getContextPath())\n                                                               .jettyIdleTimeOut(config.getJettyIdleTimeOut())\n                                                               .jettyAcceptorPriorityDelta(\n                                                                   config.getJettyAcceptorPriorityDelta())\n                                                               .jettyMinThreads(config.getJettyMinThreads())\n                                                               .jettyMaxThreads(config.getJettyMaxThreads())\n                                                               .jettyAcceptQueueSize(config.getJettyAcceptQueueSize())\n                                                               .build();\n\n        jettyServer = new JettyServer(jettyServerConfig);\n        jettyServer.initialize();\n\n        jettyServer.addHandler(new SpanV1JettyHandler(config, getManager()));\n        jettyServer.addHandler(new SpanV2JettyHandler(config, getManager()));\n\n        if (config.isNeedAnalysis()) {\n            ISegmentParserService segmentParseService = getManager().find(TraceModule.NAME)\n                                                                    .provider()\n                                                                    .getService(ISegmentParserService.class);\n            Receiver2AnalysisBridge bridge = new Receiver2AnalysisBridge(segmentParseService);\n            Zipkin2SkyWalkingTransfer.INSTANCE.addListener(bridge);\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/zipkin-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/zipkin/ZipkinReceiverProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"0e1d5c3767e1c02dcb0e44919be126081352f941","commitMessage":"@@@Make Zipkin trace query available (#6454)\n\n","date":"2021-02-27 14:50:54","modifiedFileCount":"7","status":"M","submitter":"?? Wu Sheng"}]
