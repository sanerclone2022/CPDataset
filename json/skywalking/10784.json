[{"authorTime":"2020-08-11 07:24:40","codes":[{"authorDate":"2021-02-20 20:59:51","commitOrder":2,"curCode":"    protected String transform(ModelColumn column, Class<?> type, Type genericType) {\n        final String storageName = column.getColumnName().getStorageName();\n        if (Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)) {\n            return storageName + \" INT\";\n        } else if (Long.class.equals(type) || long.class.equals(type)) {\n            return storageName + \" BIGINT\";\n        } else if (Double.class.equals(type) || double.class.equals(type)) {\n            return storageName + \" DOUBLE PRECISION\";\n        } else if (String.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n            return storageName + \" VARCHAR(20000)\";\n        } else if (byte[].class.equals(type)) {\n            return storageName + \" TEXT\";\n        } else if (JsonObject.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (List.class.isAssignableFrom(type)) {\n            final Type elementType = ((ParameterizedType) genericType).getActualTypeArguments()[0];\n            String oneColumnType = transform(column, (Class<?>) elementType, elementType);\n            \r\n            oneColumnType = oneColumnType.substring(storageName.length());\n            StringBuilder columns = new StringBuilder();\n            for (int i = 0; i < maxSizeOfArrayColumn; i++) {\n                columns.append(storageName).append(\"_\").append(i).append(oneColumnType)\n                       .append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n            }\n            return columns.toString();\n        } else {\n            throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n        }\n    }\n","date":"2021-02-20 20:59:51","endLine":70,"groupId":"1555","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"transform","params":"(ModelColumncolumn@Class<?>type@TypegenericType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/32/f66211186c4bc25acf596662273a7d063a11d6.src","preCode":"    protected String transform(ModelColumn column, Class<?> type, Type genericType) {\n        final String storageName = column.getColumnName().getStorageName();\n        if (Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)) {\n            return storageName + \" INT\";\n        } else if (Long.class.equals(type) || long.class.equals(type)) {\n            return storageName + \" BIGINT\";\n        } else if (Double.class.equals(type) || double.class.equals(type)) {\n            return storageName + \" DOUBLE PRECISION\";\n        } else if (String.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n            return storageName + \" VARCHAR(20000)\";\n        } else if (byte[].class.equals(type)) {\n            return storageName + \" TEXT\";\n        } else if (JsonObject.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (List.class.isAssignableFrom(type)) {\n            final Type elementType = ((ParameterizedType) genericType).getActualTypeArguments()[0];\n            String oneColumnType = transform(column, (Class<?>) elementType, elementType);\n            \r\n            oneColumnType = oneColumnType.substring(storageName.length());\n            StringBuilder columns = new StringBuilder();\n            for (int i = 0; i < maxSizeOfArrayColumn; i++) {\n                columns.append(storageName).append(\"_\").append(i).append(oneColumnType)\n                       .append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n            }\n            return columns.toString();\n        } else {\n            throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/postgresql/PostgreSQLTableInstaller.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"},{"authorDate":"2020-08-11 07:24:40","commitOrder":2,"curCode":"    protected String transform(ModelColumn column, Class<?> type, Type genericType) {\n        final String storageName = column.getColumnName().getStorageName();\n        if (Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)) {\n            return storageName + \" INT\";\n        } else if (Long.class.equals(type) || long.class.equals(type)) {\n            return storageName + \" BIGINT\";\n        } else if (Double.class.equals(type) || double.class.equals(type)) {\n            return storageName + \" DOUBLE\";\n        } else if (String.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n            return storageName + \" VARCHAR(20000)\";\n        } else if (byte[].class.equals(type)) {\n            return storageName + \" MEDIUMTEXT\";\n        } else if (JsonObject.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (List.class.isAssignableFrom(type)) {\n            final Type elementType = ((ParameterizedType) genericType).getActualTypeArguments()[0];\n            String oneColumnType = transform(column, (Class<?>) elementType, elementType);\n            \r\n            oneColumnType = oneColumnType.substring(storageName.length());\n            StringBuilder columns = new StringBuilder();\n            for (int i = 0; i < maxSizeOfArrayColumn; i++) {\n                columns.append(storageName).append(\"_\").append(i).append(oneColumnType)\n                       .append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n            }\n            return columns.toString();\n        } else {\n            throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n        }\n    }\n","date":"2020-08-11 07:24:40","endLine":134,"groupId":"1555","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"transform","params":"(ModelColumncolumn@Class<?>type@TypegenericType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/53/6b6188f383f201d4dff9b8040f06ba2ce90b50.src","preCode":"    protected String transform(ModelColumn column, Class<?> type, Type genericType) {\n        final String storageName = column.getColumnName().getStorageName();\n        if (Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)) {\n            return storageName + \" INT\";\n        } else if (Long.class.equals(type) || long.class.equals(type)) {\n            return storageName + \" BIGINT\";\n        } else if (Double.class.equals(type) || double.class.equals(type)) {\n            return storageName + \" DOUBLE\";\n        } else if (String.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n            return storageName + \" VARCHAR(20000)\";\n        } else if (byte[].class.equals(type)) {\n            return storageName + \" MEDIUMTEXT\";\n        } else if (JsonObject.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (List.class.isAssignableFrom(type)) {\n            final Type elementType = ((ParameterizedType) genericType).getActualTypeArguments()[0];\n            String oneColumnType = transform(column, (Class<?>) elementType, elementType);\n            \r\n            oneColumnType = oneColumnType.substring(storageName.length());\n            StringBuilder columns = new StringBuilder();\n            for (int i = 0; i < maxSizeOfArrayColumn; i++) {\n                columns.append(storageName).append(\"_\").append(i).append(oneColumnType)\n                       .append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n            }\n            return columns.toString();\n        } else {\n            throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TableInstaller.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"NB"}],"commitId":"c45bb361ee150c4295dce7ef174c7d1eaa834a78","commitMessage":"@@@Storage plugin supports PostgreSQL (#6345)\n\n","date":"2021-02-20 20:59:51","modifiedFileCount":"3","status":"M","submitter":"haoyann"},{"authorTime":"2020-08-11 07:24:40","codes":[{"authorDate":"2021-06-17 15:30:44","commitOrder":3,"curCode":"    protected String transform(ModelColumn column, Class<?> type, Type genericType) {\n        final String storageName = column.getColumnName().getStorageName();\n        if (Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)) {\n            return storageName + \" INT\";\n        } else if (Long.class.equals(type) || long.class.equals(type)) {\n            return storageName + \" BIGINT\";\n        } else if (Double.class.equals(type) || double.class.equals(type)) {\n            return storageName + \" DOUBLE PRECISION\";\n        } else if (String.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n            return storageName + \" VARCHAR(20000)\";\n        } else if (byte[].class.equals(type)) {\n            return storageName + \" TEXT\";\n        } else if (JsonObject.class.equals(type)) {\n            if (column.getLength() > 16383) {\n                return storageName + \" TEXT\";\n            } else {\n                return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n            }\n        } else if (List.class.isAssignableFrom(type)) {\n            final Type elementType = ((ParameterizedType) genericType).getActualTypeArguments()[0];\n            String oneColumnType = transform(column, (Class<?>) elementType, elementType);\n            \r\n            oneColumnType = oneColumnType.substring(storageName.length());\n            StringBuilder columns = new StringBuilder();\n            for (int i = 0; i < maxSizeOfArrayColumn; i++) {\n                columns.append(storageName).append(\"_\").append(i).append(oneColumnType)\n                       .append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n            }\n            return columns.toString();\n        } else {\n            throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n        }\n    }\n","date":"2021-06-17 15:30:44","endLine":74,"groupId":"10784","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"transform","params":"(ModelColumncolumn@Class<?>type@TypegenericType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/92/1ca6214e42e437dd8fc6bed8a89dfb8ad115ac.src","preCode":"    protected String transform(ModelColumn column, Class<?> type, Type genericType) {\n        final String storageName = column.getColumnName().getStorageName();\n        if (Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)) {\n            return storageName + \" INT\";\n        } else if (Long.class.equals(type) || long.class.equals(type)) {\n            return storageName + \" BIGINT\";\n        } else if (Double.class.equals(type) || double.class.equals(type)) {\n            return storageName + \" DOUBLE PRECISION\";\n        } else if (String.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n            return storageName + \" VARCHAR(20000)\";\n        } else if (byte[].class.equals(type)) {\n            return storageName + \" TEXT\";\n        } else if (JsonObject.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (List.class.isAssignableFrom(type)) {\n            final Type elementType = ((ParameterizedType) genericType).getActualTypeArguments()[0];\n            String oneColumnType = transform(column, (Class<?>) elementType, elementType);\n            \r\n            oneColumnType = oneColumnType.substring(storageName.length());\n            StringBuilder columns = new StringBuilder();\n            for (int i = 0; i < maxSizeOfArrayColumn; i++) {\n                columns.append(storageName).append(\"_\").append(i).append(oneColumnType)\n                       .append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n            }\n            return columns.toString();\n        } else {\n            throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/postgresql/PostgreSQLTableInstaller.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2020-08-11 07:24:40","commitOrder":3,"curCode":"    protected String transform(ModelColumn column, Class<?> type, Type genericType) {\n        final String storageName = column.getColumnName().getStorageName();\n        if (Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)) {\n            return storageName + \" INT\";\n        } else if (Long.class.equals(type) || long.class.equals(type)) {\n            return storageName + \" BIGINT\";\n        } else if (Double.class.equals(type) || double.class.equals(type)) {\n            return storageName + \" DOUBLE\";\n        } else if (String.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n            return storageName + \" VARCHAR(20000)\";\n        } else if (byte[].class.equals(type)) {\n            return storageName + \" MEDIUMTEXT\";\n        } else if (JsonObject.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (List.class.isAssignableFrom(type)) {\n            final Type elementType = ((ParameterizedType) genericType).getActualTypeArguments()[0];\n            String oneColumnType = transform(column, (Class<?>) elementType, elementType);\n            \r\n            oneColumnType = oneColumnType.substring(storageName.length());\n            StringBuilder columns = new StringBuilder();\n            for (int i = 0; i < maxSizeOfArrayColumn; i++) {\n                columns.append(storageName).append(\"_\").append(i).append(oneColumnType)\n                       .append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n            }\n            return columns.toString();\n        } else {\n            throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n        }\n    }\n","date":"2020-08-11 07:24:40","endLine":134,"groupId":"10784","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"transform","params":"(ModelColumncolumn@Class<?>type@TypegenericType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/53/6b6188f383f201d4dff9b8040f06ba2ce90b50.src","preCode":"    protected String transform(ModelColumn column, Class<?> type, Type genericType) {\n        final String storageName = column.getColumnName().getStorageName();\n        if (Integer.class.equals(type) || int.class.equals(type) || NodeType.class.equals(type)) {\n            return storageName + \" INT\";\n        } else if (Long.class.equals(type) || long.class.equals(type)) {\n            return storageName + \" BIGINT\";\n        } else if (Double.class.equals(type) || double.class.equals(type)) {\n            return storageName + \" DOUBLE\";\n        } else if (String.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (StorageDataComplexObject.class.isAssignableFrom(type)) {\n            return storageName + \" VARCHAR(20000)\";\n        } else if (byte[].class.equals(type)) {\n            return storageName + \" MEDIUMTEXT\";\n        } else if (JsonObject.class.equals(type)) {\n            return storageName + \" VARCHAR(\" + column.getLength() + \")\";\n        } else if (List.class.isAssignableFrom(type)) {\n            final Type elementType = ((ParameterizedType) genericType).getActualTypeArguments()[0];\n            String oneColumnType = transform(column, (Class<?>) elementType, elementType);\n            \r\n            oneColumnType = oneColumnType.substring(storageName.length());\n            StringBuilder columns = new StringBuilder();\n            for (int i = 0; i < maxSizeOfArrayColumn; i++) {\n                columns.append(storageName).append(\"_\").append(i).append(oneColumnType)\n                       .append(i == maxSizeOfArrayColumn - 1 ? \"\" : \",\");\n            }\n            return columns.toString();\n        } else {\n            throw new IllegalArgumentException(\"Unsupported data type: \" + type.getName());\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2TableInstaller.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"N"}],"commitId":"402902f75ca5ac2cff6f02e154b45f366bbcd749","commitMessage":"@@@Agent supports the collection of JVM arguments and jar dependencies information. (#7069)\n\n","date":"2021-06-17 15:30:44","modifiedFileCount":"8","status":"M","submitter":"Ax1an"}]
