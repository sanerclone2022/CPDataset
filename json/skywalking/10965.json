[{"authorTime":"2019-02-18 14:55:07","codes":[{"authorDate":"2017-12-10 16:32:39","commitOrder":2,"curCode":"    private boolean consume() {\n        boolean hasData = false;\n        LinkedList<T> consumeList = new LinkedList<T>();\n        for (DataSource dataSource : dataSources) {\n            LinkedList<T> data = dataSource.obtain();\n            if (data.size() == 0) {\n                continue;\n            }\n            for (T element : data) {\n                consumeList.add(element);\n            }\n            hasData = true;\n        }\n\n        if (consumeList.size() > 0) {\n            try {\n                consumer.consume(consumeList);\n            } catch (Throwable t) {\n                consumer.onError(consumeList, t);\n            }\n        }\n        return hasData;\n    }\n","date":"2017-12-10 16:32:39","endLine":122,"groupId":"668","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"consume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ec/4ad3e1cb83fa7182ccdd4289577b4f64c09464.src","preCode":"    private boolean consume() {\n        boolean hasData = false;\n        LinkedList<T> consumeList = new LinkedList<T>();\n        for (DataSource dataSource : dataSources) {\n            LinkedList<T> data = dataSource.obtain();\n            if (data.size() == 0) {\n                continue;\n            }\n            for (T element : data) {\n                consumeList.add(element);\n            }\n            hasData = true;\n        }\n\n        if (consumeList.size() > 0) {\n            try {\n                consumer.consume(consumeList);\n            } catch (Throwable t) {\n                consumer.onError(consumeList, t);\n            }\n        }\n        return hasData;\n    }\n","realPath":"apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/ConsumerThread.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"NB"},{"authorDate":"2019-02-18 14:55:07","commitOrder":2,"curCode":"    private boolean consume(Group target) {\n        boolean hasData;\n        LinkedList consumeList = new LinkedList();\n        for (int i = 0; i < target.channels.getChannelSize(); i++) {\n            Buffer buffer = target.channels.getBuffer(i);\n            consumeList.addAll(buffer.obtain());\n        }\n        hasData = consumeList.size() > 0;\n\n        if (consumeList.size() > 0) {\n            try {\n                target.consumer.consume(consumeList);\n            } catch (Throwable t) {\n                target.consumer.onError(consumeList, t);\n            }\n        }\n        return hasData;\n    }\n","date":"2019-02-18 14:55:07","endLine":87,"groupId":"7110","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"consume","params":"(Grouptarget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/16/79302925f31fe6b7c88ef999d47f42e887e9ff.src","preCode":"    private boolean consume(Group target) {\n        boolean hasData;\n        LinkedList consumeList = new LinkedList();\n        for (int i = 0; i < target.channels.getChannelSize(); i++) {\n            Buffer buffer = target.channels.getBuffer(i);\n            consumeList.addAll(buffer.obtain());\n        }\n        hasData = consumeList.size() > 0;\n\n        if (consumeList.size() > 0) {\n            try {\n                target.consumer.consume(consumeList);\n            } catch (Throwable t) {\n                target.consumer.onError(consumeList, t);\n            }\n        }\n        return hasData;\n    }\n","realPath":"apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/MultipleChannelsConsumer.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"}],"commitId":"2f3ccf368c6ccd88f2f9fa56ae3de047c3f2d810","commitMessage":"@@@Backend streaming thread model improvement (#2247)\n\n[Performance Improvement]Backend streaming thread model improvement","date":"2019-02-18 14:55:07","modifiedFileCount":"15","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-02-20 08:29:17","codes":[{"authorDate":"2017-12-10 16:32:39","commitOrder":3,"curCode":"    private boolean consume() {\n        boolean hasData = false;\n        LinkedList<T> consumeList = new LinkedList<T>();\n        for (DataSource dataSource : dataSources) {\n            LinkedList<T> data = dataSource.obtain();\n            if (data.size() == 0) {\n                continue;\n            }\n            for (T element : data) {\n                consumeList.add(element);\n            }\n            hasData = true;\n        }\n\n        if (consumeList.size() > 0) {\n            try {\n                consumer.consume(consumeList);\n            } catch (Throwable t) {\n                consumer.onError(consumeList, t);\n            }\n        }\n        return hasData;\n    }\n","date":"2017-12-10 16:32:39","endLine":122,"groupId":"668","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"consume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ec/4ad3e1cb83fa7182ccdd4289577b4f64c09464.src","preCode":"    private boolean consume() {\n        boolean hasData = false;\n        LinkedList<T> consumeList = new LinkedList<T>();\n        for (DataSource dataSource : dataSources) {\n            LinkedList<T> data = dataSource.obtain();\n            if (data.size() == 0) {\n                continue;\n            }\n            for (T element : data) {\n                consumeList.add(element);\n            }\n            hasData = true;\n        }\n\n        if (consumeList.size() > 0) {\n            try {\n                consumer.consume(consumeList);\n            } catch (Throwable t) {\n                consumer.onError(consumeList, t);\n            }\n        }\n        return hasData;\n    }\n","realPath":"apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/ConsumerThread.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"},{"authorDate":"2019-02-20 08:29:17","commitOrder":3,"curCode":"    private boolean consume(Group target) {\n        boolean hasData;\n        LinkedList consumeList = new LinkedList();\n        for (int i = 0; i < target.channels.getChannelSize(); i++) {\n            Buffer buffer = target.channels.getBuffer(i);\n            consumeList.addAll(buffer.obtain());\n        }\n\n        if (hasData = consumeList.size() > 0) {\n            try {\n                target.consumer.consume(consumeList);\n            } catch (Throwable t) {\n                target.consumer.onError(consumeList, t);\n            }\n        }\n        return hasData;\n    }\n","date":"2019-02-20 08:29:17","endLine":86,"groupId":"7110","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"consume","params":"(Grouptarget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/18/77446ff76cdc8c9d5c02321c2185185bad161d.src","preCode":"    private boolean consume(Group target) {\n        boolean hasData;\n        LinkedList consumeList = new LinkedList();\n        for (int i = 0; i < target.channels.getChannelSize(); i++) {\n            Buffer buffer = target.channels.getBuffer(i);\n            consumeList.addAll(buffer.obtain());\n        }\n        hasData = consumeList.size() > 0;\n\n        if (consumeList.size() > 0) {\n            try {\n                target.consumer.consume(consumeList);\n            } catch (Throwable t) {\n                target.consumer.onError(consumeList, t);\n            }\n        }\n        return hasData;\n    }\n","realPath":"apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/MultipleChannelsConsumer.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"c019535ee92affa79f713008fe046f2353b31033","commitMessage":"@@@Fix mesh telemetry performance issue and adjust default thread number (#2261)\n\n* Try adjustment.\n\n* Remove heartbeat.\n\n* Make heartbeat back to work. And default threadpool size more sense.\n\n* Make L2 to less than before.\n\n* Make instance heartbeat works.\n\n* Try L1 aggregation thread = core * 2 * 2.\n","date":"2019-02-20 08:29:17","modifiedFileCount":"9","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-02-20 08:29:17","codes":[{"authorDate":"2019-05-27 23:08:11","commitOrder":4,"curCode":"    private boolean consume() {\n        boolean hasData = false;\n        LinkedList<T> consumeList = new LinkedList<T>();\n        for (DataSource dataSource : dataSources) {\n            LinkedList<T> data = dataSource.obtain();\n            if (data.size() == 0) {\n                continue;\n            }\n            consumeList.addAll(data);\n            hasData = true;\n        }\n\n        if (consumeList.size() > 0) {\n            try {\n                consumer.consume(consumeList);\n            } catch (Throwable t) {\n                consumer.onError(consumeList, t);\n            }\n        }\n        return hasData;\n    }\n","date":"2019-05-27 23:08:11","endLine":105,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"consume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1e/4d9c4caea7f97036065ae7ffe24d1512297ad0.src","preCode":"    private boolean consume() {\n        boolean hasData = false;\n        LinkedList<T> consumeList = new LinkedList<T>();\n        for (DataSource dataSource : dataSources) {\n            LinkedList<T> data = dataSource.obtain();\n            if (data.size() == 0) {\n                continue;\n            }\n            for (T element : data) {\n                consumeList.add(element);\n            }\n            hasData = true;\n        }\n\n        if (consumeList.size() > 0) {\n            try {\n                consumer.consume(consumeList);\n            } catch (Throwable t) {\n                consumer.onError(consumeList, t);\n            }\n        }\n        return hasData;\n    }\n","realPath":"apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/ConsumerThread.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2019-02-20 08:29:17","commitOrder":4,"curCode":"    private boolean consume(Group target) {\n        boolean hasData;\n        LinkedList consumeList = new LinkedList();\n        for (int i = 0; i < target.channels.getChannelSize(); i++) {\n            Buffer buffer = target.channels.getBuffer(i);\n            consumeList.addAll(buffer.obtain());\n        }\n\n        if (hasData = consumeList.size() > 0) {\n            try {\n                target.consumer.consume(consumeList);\n            } catch (Throwable t) {\n                target.consumer.onError(consumeList, t);\n            }\n        }\n        return hasData;\n    }\n","date":"2019-02-20 08:29:17","endLine":86,"groupId":"7110","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"consume","params":"(Grouptarget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/18/77446ff76cdc8c9d5c02321c2185185bad161d.src","preCode":"    private boolean consume(Group target) {\n        boolean hasData;\n        LinkedList consumeList = new LinkedList();\n        for (int i = 0; i < target.channels.getChannelSize(); i++) {\n            Buffer buffer = target.channels.getBuffer(i);\n            consumeList.addAll(buffer.obtain());\n        }\n\n        if (hasData = consumeList.size() > 0) {\n            try {\n                target.consumer.consume(consumeList);\n            } catch (Throwable t) {\n                target.consumer.onError(consumeList, t);\n            }\n        }\n        return hasData;\n    }\n","realPath":"apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/MultipleChannelsConsumer.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"}],"commitId":"bfd46151ad63ffda50272d2a3eb2b8cd3bb618a5","commitMessage":"@@@Replace add with addAll.  reduce the invoke time a little. (#2766)\n\n","date":"2019-05-27 23:08:11","modifiedFileCount":"1","status":"M","submitter":"zhangwei"},{"authorTime":"2019-07-17 13:26:00","codes":[{"authorDate":"2019-07-17 13:26:00","commitOrder":5,"curCode":"    private boolean consume(List<T> consumeList) {\n        for (DataSource dataSource : dataSources) {\n            dataSource.obtain(consumeList);\n        }\n\n        if (!consumeList.isEmpty()) {\n            try {\n                consumer.consume(consumeList);\n            } catch (Throwable t) {\n                consumer.onError(consumeList, t);\n            } finally {\n                consumeList.clear();\n            }\n            return true;\n        }\n        return false;\n    }\n","date":"2019-07-17 13:26:00","endLine":101,"groupId":"2610","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"consume","params":"(List<T>consumeList)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6a/15c1c1b9c2b4fd935c23fdf56f418a26e3258a.src","preCode":"    private boolean consume() {\n        boolean hasData = false;\n        LinkedList<T> consumeList = new LinkedList<T>();\n        for (DataSource dataSource : dataSources) {\n            LinkedList<T> data = dataSource.obtain();\n            if (data.size() == 0) {\n                continue;\n            }\n            consumeList.addAll(data);\n            hasData = true;\n        }\n\n        if (consumeList.size() > 0) {\n            try {\n                consumer.consume(consumeList);\n            } catch (Throwable t) {\n                consumer.onError(consumeList, t);\n            }\n        }\n        return hasData;\n    }\n","realPath":"apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/ConsumerThread.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2019-07-17 13:26:00","commitOrder":5,"curCode":"    private boolean consume(Group target, List consumeList) {\n        for (int i = 0; i < target.channels.getChannelSize(); i++) {\n            Buffer buffer = target.channels.getBuffer(i);\n            buffer.obtain(consumeList);\n        }\n\n        if (!consumeList.isEmpty()) {\n            try {\n                target.consumer.consume(consumeList);\n            } catch (Throwable t) {\n                target.consumer.onError(consumeList, t);\n            } finally {\n                consumeList.clear();\n            }\n            return true;\n        }\n        return false;\n    }\n","date":"2019-07-17 13:26:00","endLine":91,"groupId":"1568","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"consume","params":"(Grouptarget@ListconsumeList)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/49/63788f1766122fe01026c7bc4b20c677ec851d.src","preCode":"    private boolean consume(Group target) {\n        boolean hasData;\n        LinkedList consumeList = new LinkedList();\n        for (int i = 0; i < target.channels.getChannelSize(); i++) {\n            Buffer buffer = target.channels.getBuffer(i);\n            consumeList.addAll(buffer.obtain());\n        }\n\n        if (hasData = consumeList.size() > 0) {\n            try {\n                target.consumer.consume(consumeList);\n            } catch (Throwable t) {\n                target.consumer.onError(consumeList, t);\n            }\n        }\n        return hasData;\n    }\n","realPath":"apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/MultipleChannelsConsumer.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"8faa3564037570fca198ab9f70534f3d359a9d40","commitMessage":"@@@Using ArrayList to instead of LinkedList (#3093)\n\n* Using ArrayList to instead of LinkedList","date":"2019-07-17 13:26:00","modifiedFileCount":"4","status":"M","submitter":"Daming"},{"authorTime":"2019-11-15 23:33:40","codes":[{"authorDate":"2019-07-17 13:26:00","commitOrder":6,"curCode":"    private boolean consume(List<T> consumeList) {\n        for (DataSource dataSource : dataSources) {\n            dataSource.obtain(consumeList);\n        }\n\n        if (!consumeList.isEmpty()) {\n            try {\n                consumer.consume(consumeList);\n            } catch (Throwable t) {\n                consumer.onError(consumeList, t);\n            } finally {\n                consumeList.clear();\n            }\n            return true;\n        }\n        return false;\n    }\n","date":"2019-07-17 13:26:00","endLine":101,"groupId":"2610","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"consume","params":"(List<T>consumeList)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6a/15c1c1b9c2b4fd935c23fdf56f418a26e3258a.src","preCode":"    private boolean consume(List<T> consumeList) {\n        for (DataSource dataSource : dataSources) {\n            dataSource.obtain(consumeList);\n        }\n\n        if (!consumeList.isEmpty()) {\n            try {\n                consumer.consume(consumeList);\n            } catch (Throwable t) {\n                consumer.onError(consumeList, t);\n            } finally {\n                consumeList.clear();\n            }\n            return true;\n        }\n        return false;\n    }\n","realPath":"apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/ConsumerThread.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"},{"authorDate":"2019-11-15 23:33:40","commitOrder":6,"curCode":"    private boolean consume(Group target, List consumeList) {\n        for (int i = 0; i < target.channels.getChannelSize(); i++) {\n            QueueBuffer buffer = target.channels.getBuffer(i);\n            buffer.obtain(consumeList);\n        }\n\n        if (!consumeList.isEmpty()) {\n            try {\n                target.consumer.consume(consumeList);\n            } catch (Throwable t) {\n                target.consumer.onError(consumeList, t);\n            } finally {\n                consumeList.clear();\n            }\n            return true;\n        }\n        return false;\n    }\n","date":"2019-11-15 23:33:40","endLine":90,"groupId":"1568","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"consume","params":"(Grouptarget@ListconsumeList)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/70/8325ed512da01c153b6701609a1c9a37c81059.src","preCode":"    private boolean consume(Group target, List consumeList) {\n        for (int i = 0; i < target.channels.getChannelSize(); i++) {\n            Buffer buffer = target.channels.getBuffer(i);\n            buffer.obtain(consumeList);\n        }\n\n        if (!consumeList.isEmpty()) {\n            try {\n                target.consumer.consume(consumeList);\n            } catch (Throwable t) {\n                target.consumer.onError(consumeList, t);\n            } finally {\n                consumeList.clear();\n            }\n            return true;\n        }\n        return false;\n    }\n","realPath":"apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/MultipleChannelsConsumer.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"d7038fe67be9fa4841a41d9d4e17be9257affe41","commitMessage":"@@@Refactor DataCarrier.  support ArrayBlockingQueueBuffer as implementor (#3849)\n\n* Refactor DataCarrier.  support ArrayBlockingQueueBuffer as the implementation for blocking queue buffer.\n\n* Fix style issue.\n\n* Remove import.\n\n* Remove uesless codes.\n","date":"2019-11-15 23:33:40","modifiedFileCount":"10","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-06-30 19:14:20","codes":[{"authorDate":"2021-06-30 19:14:20","commitOrder":7,"curCode":"    private boolean consume(List<T> consumeList) {\n        for (DataSource dataSource : dataSources) {\n            dataSource.obtain(consumeList);\n        }\n\n        if (!consumeList.isEmpty()) {\n            try {\n                consumer.consume(consumeList);\n            } catch (Throwable t) {\n                consumer.onError(consumeList, t);\n            } finally {\n                consumeList.clear();\n            }\n            return true;\n        }\n        consumer.nothingToConsume();\n        return false;\n    }\n","date":"2021-06-30 19:14:20","endLine":85,"groupId":"10965","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"consume","params":"(List<T>consumeList)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/12/2f37eb58e6e7751a344154d8241c3fe96e72d1.src","preCode":"    private boolean consume(List<T> consumeList) {\n        for (DataSource dataSource : dataSources) {\n            dataSource.obtain(consumeList);\n        }\n\n        if (!consumeList.isEmpty()) {\n            try {\n                consumer.consume(consumeList);\n            } catch (Throwable t) {\n                consumer.onError(consumeList, t);\n            } finally {\n                consumeList.clear();\n            }\n            return true;\n        }\n        return false;\n    }\n","realPath":"apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/ConsumerThread.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2021-06-30 19:14:20","commitOrder":7,"curCode":"    private boolean consume(Group target, List consumeList) {\n        for (int i = 0; i < target.channels.getChannelSize(); i++) {\n            QueueBuffer buffer = target.channels.getBuffer(i);\n            buffer.obtain(consumeList);\n        }\n\n        if (!consumeList.isEmpty()) {\n            try {\n                target.consumer.consume(consumeList);\n            } catch (Throwable t) {\n                target.consumer.onError(consumeList, t);\n            } finally {\n                consumeList.clear();\n            }\n            return true;\n        }\n        target.consumer.nothingToConsume();\n        return false;\n    }\n","date":"2021-06-30 19:14:20","endLine":90,"groupId":"10965","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"consume","params":"(Grouptarget@ListconsumeList)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/95/3a21e6f5cfd9e205b207275498f451e6b3f553.src","preCode":"    private boolean consume(Group target, List consumeList) {\n        for (int i = 0; i < target.channels.getChannelSize(); i++) {\n            QueueBuffer buffer = target.channels.getBuffer(i);\n            buffer.obtain(consumeList);\n        }\n\n        if (!consumeList.isEmpty()) {\n            try {\n                target.consumer.consume(consumeList);\n            } catch (Throwable t) {\n                target.consumer.onError(consumeList, t);\n            } finally {\n                consumeList.clear();\n            }\n            return true;\n        }\n        return false;\n    }\n","realPath":"apm-commons/apm-datacarrier/src/main/java/org/apache/skywalking/apm/commons/datacarrier/consumer/MultipleChannelsConsumer.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"50a0bcbf7395c49029759a8cb1208271405cdcc4","commitMessage":"@@@Optimize L1 aggregation.  enhance gRPC client between L1 and L2 aggregation. (#7206)\n\n1.0Performance: Add L1 aggregation flush period.  which reduces the CPU load and helps young GC.\n\n2. Replace do not direct send after the first aggregation to reduce the network #6400.\n\n3. Enhance the DataCarrier to notify the consumer in no enqueue event in short term.\n\n4. L1 aggregation flush period still works even no further metrics generated.  powered by <3>\n\n5. Fix gRPC remote client OOM. The concurrency control mechanism failed.","date":"2021-06-30 19:14:20","modifiedFileCount":"8","status":"M","submitter":"?? Wu Sheng"}]
