[{"authorTime":"2018-11-28 22:59:02","codes":[{"authorDate":"2018-11-28 22:59:02","commitOrder":2,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new H2RegisterLockDAO());\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n    }\n","date":"2018-11-28 22:59:02","endLine":117,"groupId":"143","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/16/9b81f444b9dccc1fac8d02ae093af3fb2ae625.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new H2RegisterLockDAO());\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"MB"},{"authorDate":"2018-11-28 22:59:02","commitOrder":2,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new MySQLRegisterTableLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n    }\n","date":"2018-11-28 22:59:02","endLine":121,"groupId":"143","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3f/b67fd59df4fb35482b9fdcff95a34accc69d32.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new MySQLRegisterTableLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"}],"commitId":"215eab74288328e13f2c0fecf222168632685ff9","commitMessage":"@@@Mysql style storage implementation (#1964)\n\nAlso fixed several bugs in this merge.","date":"2018-11-28 22:59:02","modifiedFileCount":"33","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-01-20 16:41:06","codes":[{"authorDate":"2019-01-20 16:41:06","commitOrder":3,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n    }\n","date":"2019-01-20 16:41:06","endLine":89,"groupId":"143","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a7/6fb49a7d9518e68a86f82850ca7861fc49dd10.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n        this.registerServiceImplementation(IRegisterLockDAO.class, new H2RegisterLockDAO());\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-01-20 16:41:06","commitOrder":3,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n    }\n","date":"2019-01-20 16:41:06","endLine":95,"groupId":"143","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fd/a7d311f3aa113666768e606fa6553d0202e03e.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new MySQLRegisterTableLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"33f5cc19b54d0988304a3ed9e4477cdc3314cd6d","commitMessage":"@@@Fixed the inventory register lock invalid bug. (#2184)\n\n* #2183\n\nMerge commit into master.\n\n* Make the h2 register lock same as mysql.\n","date":"2019-01-20 16:41:06","modifiedFileCount":"17","status":"M","submitter":"??? pengys"},{"authorTime":"2019-02-12 23:13:02","codes":[{"authorDate":"2019-02-12 23:13:02","commitOrder":4,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n    }\n","date":"2019-02-12 23:13:02","endLine":90,"groupId":"143","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ad/dd6a0ff346870b55c09f29e36f4dfd0d2e85f6.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-02-12 23:13:02","commitOrder":4,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n    }\n","date":"2019-02-12 23:13:02","endLine":96,"groupId":"143","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6f/2ac9439f788bae5019ff114f43e1e3751d4c5b.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"4babd6ff73ee32535f09eb31ecbda736e3052a32","commitMessage":"@@@Support Top sql (#2239)\n\n* The prototype of topN sql worker.\n\n* Add scope and new manual dispatcher.\n\n* no message\n\n* Finish topN persistence codes. Not test yet. And query have not added.\n\n* Finish the top n database statement persistent.\n\n* Support different slow thresholds for different db types.\n\n* Fix wrong db default threshold\n\n* Finish new query protocol binding.\n\n* Provide query empty implementation and sync ui.\n\n* Finish all codes.  hope it works :P\nI will run the tests tonight.\n\n* Fix\n\n* Fix\n\n* Fix a startup issue.\n\n* Add time bucket to persistent.\n\n* Fix wrong query result column name.\n\n* Fix Database query.\n\n* Fix checkstyle.\n\n* Fix wrong order logic.  and add a test case to verify.  to fix https://github.com/apache/incubator-skywalking/pull/2239#discussion_r255948249\n","date":"2019-02-12 23:13:02","modifiedFileCount":"21","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-04-08 07:53:06","codes":[{"authorDate":"2019-04-08 07:53:06","commitOrder":5,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-04-08 07:53:06","endLine":91,"groupId":"143","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/28/1c30ce0124404c2e1dbdb49adca87beb770992.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-04-08 07:53:06","commitOrder":5,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n    }\n","date":"2019-04-08 07:53:06","endLine":97,"groupId":"143","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9f/403e8c1f539d94648e14cabde39cdade7f7b02.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"df362b18f0e3b7498a0a4f252630e6204d539bba","commitMessage":"@@@Query protocol and codebase for log type record (#2449)\n\n* New query graphql protocol added.\n\n* Finish a new metric.  log(abstract) with HTTP Access Log.\n\n* Submit the draft codes of logs.\n\n* Remove @IDColumn\n\n* Fix startup issue.\n\n* Add http_access_log to disable list.\n\n* Finish a wrong service implementation.\n\n* Add trace id in log query condition and result.\n\n* Fix style\n","date":"2019-04-08 07:53:06","modifiedFileCount":"11","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-04-17 19:25:46","codes":[{"authorDate":"2019-04-17 19:25:46","commitOrder":6,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-04-17 19:25:46","endLine":128,"groupId":"143","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fc/8c16dd823e97c89b496938d134dbca5778bdce.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2019-04-17 19:25:46","commitOrder":6,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n    }\n","date":"2019-04-17 19:25:46","endLine":130,"groupId":"143","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3b/9e256fa6ce641e8d081176f4329c45deb3246e.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"0b2e355b52cd5f3735d113720af73b3de244d2b8","commitMessage":"@@@extend Metadata limit (#2492)\n\n* fix default MetadataQuery Max size.\n\n* revert mysql\n","date":"2019-04-17 19:25:46","modifiedFileCount":"7","status":"M","submitter":"Jared Tan"},{"authorTime":"2019-05-10 08:05:37","codes":[{"authorDate":"2019-05-10 08:05:37","commitOrder":7,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-05-10 08:05:37","endLine":128,"groupId":"143","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e2/135f51d025435545b11b3737c7a67a5eeab039.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2019-05-10 08:05:37","commitOrder":7,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n    }\n","date":"2019-05-10 08:05:37","endLine":130,"groupId":"143","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f7/80f4cf49bdee05b16557ed356722b9a37de623.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricQueryDAO.class, new H2MetricQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"ed78dabe8b142be3d546d349046768135f0a752a","commitMessage":"@@@Rename metric and indicator to metrics. (#2643)\n\n* Rename metric to metrics.\n\n* Fixed test case execute failure issues.\n","date":"2019-05-10 08:05:37","modifiedFileCount":"102","status":"M","submitter":"??? pengys"},{"authorTime":"2019-06-03 18:46:42","codes":[{"authorDate":"2019-06-03 18:46:42","commitOrder":8,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-06-03 18:46:42","endLine":92,"groupId":"143","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/26/bf2c6b641d54b0bdcf02348af9454a4db4f819.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2019-06-03 18:46:42","commitOrder":8,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n    }\n","date":"2019-06-03 18:46:42","endLine":98,"groupId":"143","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e5/d5c7a7b0c8915f39a514f7d6df674da6268cce.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"5036e8334301322d49973005cd98513c17b0f28f","commitMessage":"@@@Good news of an important feature: time series implementation in Elasticsearch storage. (#2808)\n\n* The new feature of Elasticsearch storage with the time series implementation.\n\n* Time bucket util improve.\n\n* Fixed some Gramma error.\n\n* Update ttl.md\n\nPolish English a little.\n\n* Update ttl.md\n\nAdd more explicit description of TTL\n\n* Update ttl.md\n\n* Update StorageModuleElasticsearchConfig.java\n\nSet otherMetricsDataTTL = 0 as default.  make user more clear.\n\n* Rename the timeSeriesAble to capableOfTimeSeries\n\n* Fixed a test case failure.\n","date":"2019-06-03 18:46:42","modifiedFileCount":"46","status":"M","submitter":"??? pengys"},{"authorTime":"2019-10-12 20:47:38","codes":[{"authorDate":"2019-06-03 18:46:42","commitOrder":9,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","date":"2019-06-03 18:46:42","endLine":92,"groupId":"143","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/26/bf2c6b641d54b0bdcf02348af9454a4db4f819.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2019-10-12 20:47:38","commitOrder":9,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n    }\n","date":"2019-10-12 20:47:38","endLine":119,"groupId":"143","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e0/a1b2880b4ac330233d5c6ca91a37b59ea400d6.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        try {\n            settings.load(ResourceUtils.read(\"datasource-settings.properties\"));\n        } catch (IOException e) {\n            throw new ModuleStartException(\"load datasource setting file failure.\", e);\n        }\n\n        mysqlClient = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"fb001867e58c926533db8661fa905abd1e18aa04","commitMessage":"@@@Instead of datasource-settings.properties.  use application.yml for MySQLStorageProvider (#3564)\n\n* Is it a typo or not?\n\n* delete datasource-settings.properties\n\n* handle 'metadataQueryMaxSize'\n\n* delete DynamicModuleConfig.java\n\n* modify mysql config\n\n* parsing yaml to support the configuration for multiple properties\n\n* delete datasource-settings.properties\n\n* modify doc\n\n* add properties for docker-entrypoint.sh\n\n* add testLoadConfig()\n","date":"2019-10-12 20:47:38","modifiedFileCount":"3","status":"M","submitter":"panjuan"},{"authorTime":"2019-12-31 20:49:45","codes":[{"authorDate":"2019-12-31 20:49:45","commitOrder":10,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n    }\n","date":"2019-12-31 20:49:45","endLine":95,"groupId":"143","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/46/63ad23edfaa1e3f6f4a4c7be3787b70b14de75.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2019-12-31 20:49:45","commitOrder":10,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n    }\n","date":"2019-12-31 20:49:45","endLine":110,"groupId":"143","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/6e023f36ee3c4dbf64487d7a17894b0b2a05d4.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"d38a8eaaa7e7193bff292cd03016c6a9320c8c9a","commitMessage":"@@@Provide thread monitor create task feature (#4145)\n\n* provide thread monitor task service to create\n\n* provide thread monitor task GraphQL implements\n\n* 1. change thread monitor field names\n2. fix `getThreadMonitorTaskList` query time bucket error\n\n* provide config stream processor\n\n* update submodule `query-protocol`\n\n* resolve e2e-mysql error\n\n* remove useless storage interface method.\n\n* rename `ThreadMonitorTask` to `ProfileTask`\n\n* change e2e-profile to the top level\n\n* fix profile test analyze error\n\n* remove StringUtil#isBlank.\n\n* 1. remove create profile task duration unit\n2. remove GraphQL getTask list duration field\n3. add `profileTaskQueryMaxSize` in `storage` -> `elasticsearch(7)` configuration.  default get 200 profile task\n\n* provide e2e different storage tests\n\n* 1. fix rat check\n2. remove DurationUtils.java#toSecond\n3. remove ProfileTaskQueryEs7DAO\n\n* fix e2e code format error\n\n* provide es6 and es7 storage e2e tests\n\n* change e2e profile es module artifactId\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>\n","date":"2019-12-31 20:49:45","modifiedFileCount":"12","status":"M","submitter":"mrproliu"},{"authorTime":"2020-01-09 09:35:40","codes":[{"authorDate":"2020-01-09 09:35:40","commitOrder":11,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n    }\n","date":"2020-01-09 09:35:39","endLine":97,"groupId":"143","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/6264881d26c16552892346f4e0fb49934f3548.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-01-09 09:35:40","commitOrder":11,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n    }\n","date":"2020-01-09 09:35:39","endLine":112,"groupId":"143","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0f/b4e3c325503a2f0fe07c2f144f8297990ef57e.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"4cf0600f351f9c99af804bc90bcb54d3b778c7b8","commitMessage":"@@@Provide profile task downstream to sniffer (#4172)\n\n* Provide profile task downstream to sniffer\n\n* fix agent unit testcase issue\n\n* add profile switch config on sniffer\n\n* fix es error\n\n* 1. add @DefaultImplementor on the sniffer profile task service\n2. change ProfileTaskExecutionService#PROFILE_TASK_READY_SCHEDULE to final and remove volatile\n2. fix style error\n\n* change timeFromStartMills use `<` to compare\n\n* 1. add `maxSamplingCount` to profile task\n2. make profile task limit to the common package\n\n* 1. change `agent.active_profile` to `profile.active` and make true on default\n2. add `maxSamplingCount` in profile task\n3. use `createTime` to check has new command list\n4. add task re-check before process profile task\n\n* 1. add `profile-receiver` document\n2. change `ProfileTaskExecutionService` use single schedule thread pool\n3. cache dont need fetch data when no data.  use auto-fresh mechanism only\n\n* remove navigate time judge.  fix comment wrong meaning\n","date":"2020-01-09 09:35:39","modifiedFileCount":"30","status":"M","submitter":"mrproliu"},{"authorTime":"2020-01-09 09:35:40","codes":[{"authorDate":"2020-02-06 21:02:08","commitOrder":12,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","date":"2020-02-06 21:02:08","endLine":99,"groupId":"143","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/11/783a41ef532b11c83bd4168e598a09ba2b945d.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-01-09 09:35:40","commitOrder":12,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n    }\n","date":"2020-01-09 09:35:39","endLine":112,"groupId":"143","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0f/b4e3c325503a2f0fe07c2f144f8297990ef57e.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"}],"commitId":"e44bc36281cc0c79f263906464c62698bbf5959d","commitMessage":"@@@provide profiled segment list query (#4322)\n\n* provide profiled segment query\n\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>\nCo-authored-by: AirTrioa <44222967+AirTrioa@users.noreply.github.com>\n","date":"2020-02-06 21:02:08","modifiedFileCount":"12","status":"M","submitter":"mrproliu"},{"authorTime":"2020-02-11 10:11:08","codes":[{"authorDate":"2020-02-06 21:02:08","commitOrder":13,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","date":"2020-02-06 21:02:08","endLine":99,"groupId":"143","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/11/783a41ef532b11c83bd4168e598a09ba2b945d.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"},{"authorDate":"2020-02-11 10:11:08","commitOrder":13,"curCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n    }\n","date":"2020-02-11 10:11:08","endLine":114,"groupId":"143","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/29/5417fe66b6f3cf01e204d2a4b7ebd683247c1c.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"fa526e52279d553152a1c8ca8dbeb9158fad6296","commitMessage":"@@@Provide profile analyze query (#4335)\n\n* provide profile analyze query\n\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>\n","date":"2020-02-11 10:11:08","modifiedFileCount":"14","status":"M","submitter":"mrproliu"},{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":14,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","date":"2020-02-11 17:10:49","endLine":141,"groupId":"143","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5b/468ced6c926fb09e2e5ee456b99857fae1b1db.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2020-02-11 17:10:49","commitOrder":14,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n    }\n","date":"2020-02-11 17:10:49","endLine":131,"groupId":"143","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/09/d302ef5bbaf90d951447c0ad3e15a8168b0dea.src","preCode":"    @Override public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"5b255ba3e3b50e0e0196b28cdca21dcd5c9c3da2","commitMessage":"@@@Set up more strict code styles and fix existing issues (#4337)\n\nMotivation:\n\nReview code styles with some bots automatically.\n\nModifications:\n\nSet up ReviewDog in GitHub Action to review code style.\n\nAdd more check rules to checkstyle plugin.\n\nResult:\n\nObvious code styles can be reviewed and commented automatically.","date":"2020-02-11 17:10:49","modifiedFileCount":"2429","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-03-28 22:51:41","codes":[{"authorDate":"2020-03-28 22:51:41","commitOrder":15,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","date":"2020-03-28 22:51:41","endLine":143,"groupId":"143","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/59/7748f431d12f619d045f26af3cfdf9ed3aaacc.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-03-28 22:51:41","commitOrder":15,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(\n            IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n    }\n","date":"2020-03-28 22:51:41","endLine":134,"groupId":"143","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5f/c2072a0baf42a9f756d98281721b5126cf8bba.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(IEndpointInventoryCacheDAO.class, new H2EndpointInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"4474907fef809e2342b644a324da011834a55420","commitMessage":"@@@[Inventory Design Change] Remove endpoint register and endpoint inventory (#4570)\n\n* Finish step one.  source and entity changed.\n\n* Step 2.  finish the basic and core DAO changes.\n\n* Step 3. Change all source codes of backend.  and make project compiling successfully.\n\n* Make startup successful and persistence works.\n\n* Fix dead codes in the MySQLTableInstaller.\n\n* Fix mischange.\n\n* Fix MySQL storage bootstrap error.\n\n* Rollback dependency change.\n\n* Simply enable tailing logs from container no mater it's in CI or not\n\n* Fix segment table issue.\n\n* Fix MySQL Instanller.\n\n* Support Influxdb implementation of new endpoint traffic.\n\n* Set and modify timeout to 90mins\n\n* Remove unnecessary entity in the EndpointTraffic.\n\n* Fix wrong entity builder and make name more clear.\n\n* Fix 2 equal methods bug.\n\n* Fix InfluxDB identifier(name) conflict issue.\n\n* Fix endpoint topology query.  endpoint id should be changed as a string.\n\n* Fix a missing change.\n\n* Fix a wrong commit.\n\n* Column name can't be changed.  due to it affect the hybrid metadb(h2/mysql) query.  change it explicitly with double quotation marks.\n\n* Fix formats.\n\n* Remove endpoint/operation register from the agent. and change the plugin tests(without local tests). operationId relation codes have been removed from agent too.\n\n* Try to fix the hytrix case.\n\n* Fix 3 cases.\n\n* Try to fix cases.\n\n* Fix 2.\n\n* Fix one.\n\n* Fix the serviceId type mis-change.\n\n* Fix int query\n\n* Fix hystrix case.\n\n* Fix a case.\n\n* Fix EndpointCallRelationDispatcher set the source/dest endpoint without id encoding.\n\n* Update documentation and add 2 test cases.\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>","date":"2020-03-28 22:51:41","modifiedFileCount":"121","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":16,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","date":"2020-04-10 11:03:24","endLine":128,"groupId":"143","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/34/6077818fc5da9019a0e50f8ee559e35b56ed61.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        lockDAO = new H2RegisterLockDAO(h2Client);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(h2Client));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), h2Client, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":16,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n    }\n","date":"2020-04-10 11:03:24","endLine":118,"groupId":"143","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b3/2fb6dd592f133ac98620d11f77f1977ba375ae.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        lockDAO = new H2RegisterLockDAO(mysqlClient);\n        this.registerServiceImplementation(IRegisterLockDAO.class, lockDAO);\n\n        this.registerServiceImplementation(\n            IServiceInventoryCacheDAO.class, new H2ServiceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IServiceInstanceInventoryCacheDAO.class, new H2ServiceInstanceInventoryCacheDAO(mysqlClient));\n        this.registerServiceImplementation(\n            INetworkAddressInventoryCacheDAO.class, new H2NetworkAddressInventoryCacheDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(getManager(), mysqlClient, new GeneralStorageTTL()));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-06-01 23:06:14","codes":[{"authorDate":"2020-06-01 23:06:14","commitOrder":17,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        this.registerServiceImplementation(\n                INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","date":"2020-06-01 23:06:14","endLine":130,"groupId":"143","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/af/5b6e57a2c47d9d68526c2327f3209ef2ce6abe.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2020-06-01 23:06:14","commitOrder":17,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        this.registerServiceImplementation(\n                INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n                IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n                IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n                IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n    }\n","date":"2020-06-01 23:06:14","endLine":120,"groupId":"143","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/11/a39bceb9d6cb05451c7a94ebca110b553079af.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"d094a0f7c0b4a2cf0de38735128b5c07181e30d2","commitMessage":"@@@Support UI template management. (#4843)\n\n","date":"2020-06-01 23:06:14","modifiedFileCount":"32","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-08-11 07:24:40","codes":[{"authorDate":"2020-08-11 07:24:40","commitOrder":18,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","date":"2020-08-11 07:24:40","endLine":146,"groupId":"143","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/82/db55355da961e76002418cb65d748983d29968.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(h2Client));\n\n        this.registerServiceImplementation(\n                INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new H2TraceQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n                IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2020-08-11 07:24:40","commitOrder":18,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n    }\n","date":"2020-08-11 07:24:40","endLine":134,"groupId":"143","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/76/5c252be446f56321065c456b62b6eb1b755b13.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(StorageDAO.class, new H2StorageDAO(mysqlClient));\n        this.registerServiceImplementation(\n                INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ITraceQueryDAO.class, new MySQLTraceQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n                IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n                IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n                IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"7f7e96b088d3cb0a19f8ddeafe5ede9764ec2eda","commitMessage":"@@@[IMPORTANT] Query traces with tags as condition (#5270)\n\n","date":"2020-08-11 07:24:40","modifiedFileCount":"39","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-08-31 15:46:37","codes":[{"authorDate":"2020-08-31 15:46:37","commitOrder":19,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","date":"2020-08-31 15:46:37","endLine":149,"groupId":"143","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b6/f82ce8153a35470777082e049e6cac2aaf97a6.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-08-31 15:46:37","commitOrder":19,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n    }\n","date":"2020-08-31 15:46:37","endLine":136,"groupId":"143","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6c/3f502ead349812997f907f33be7b21a311e352.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"7ef8b3e476001154ba5d600f7206add0277d4d24","commitMessage":"@@@Support Browser protocol at OAP (#4228)\n\n","date":"2020-08-31 15:46:37","modifiedFileCount":"24","status":"M","submitter":"zhang-wei"},{"authorTime":"2021-01-14 09:49:11","codes":[{"authorDate":"2021-01-14 09:49:11","commitOrder":20,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","date":"2021-01-14 09:49:11","endLine":157,"groupId":"143","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e4/c281a8be971f396a72542024ff0d9a767a678d.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(ILogQueryDAO.class, new H2LogQueryDAO(h2Client));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2021-01-14 09:49:11","commitOrder":20,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n    }\n","date":"2021-01-14 09:49:11","endLine":144,"groupId":"143","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/22/5a0da4c5ca3eae40bf6007fc1bfca03723073f.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(ILogQueryDAO.class, new MySQLLogQueryDAO(mysqlClient));\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"15452025c65dd6934bd9d6c8a930961b0f960594","commitMessage":"@@@Log collecting and query implementation (#6120)\n\n","date":"2021-01-14 09:49:11","modifiedFileCount":"51","status":"M","submitter":"zhang-wei"},{"authorTime":"2021-02-05 18:37:18","codes":[{"authorDate":"2021-02-05 18:37:18","commitOrder":21,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","date":"2021-02-05 18:37:18","endLine":161,"groupId":"143","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/63/fa518d10061ba816f74db293e07bc02648280a.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2021-02-05 18:37:18","commitOrder":21,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","date":"2021-02-05 18:37:18","endLine":148,"groupId":"143","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c1/a9315b99b6129f3d5c13b6ce60b9168b21f547.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"b92eac2cd6bf8774860b921ea04bafd59550a607","commitMessage":"@@@Add a new concept \"Event\" and its implementations to collect events (#6183)\n\n","date":"2021-02-05 18:37:18","modifiedFileCount":"15","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-02-07 10:37:14","codes":[{"authorDate":"2021-02-07 10:37:14","commitOrder":22,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","date":"2021-02-07 10:37:14","endLine":164,"groupId":"143","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/98/c0612e50e20d005abe0ab7c9f3ff7148fb3c20.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2021-02-07 10:37:14","commitOrder":22,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","date":"2021-02-07 10:37:14","endLine":151,"groupId":"143","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/26/e1758bf7251885e184c74d325d180304ec27ef.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"5e8f1eb5528911f924ffca451af20dcdf6151971","commitMessage":"@@@Support multiple implementations of StorageBuilder in different storage implementations - stage 2 (#6336)\n\n","date":"2021-02-07 10:37:14","modifiedFileCount":"16","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-04-25 17:22:43","codes":[{"authorDate":"2021-04-25 17:22:43","commitOrder":23,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n        ));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","date":"2021-04-25 17:22:43","endLine":169,"groupId":"5208","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b0/74566ff8a6db319942075d59ac3ac78546724c.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2021-04-25 17:22:43","commitOrder":23,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","date":"2021-04-25 17:22:43","endLine":155,"groupId":"5208","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/23/3431ad240f33303ea7e88a622e0774e0547369.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"7a533313676579da1321c0177c10fc237a052cbe","commitMessage":"@@@Support alarm tags (#6820)\n\n","date":"2021-04-25 17:22:43","modifiedFileCount":"42","status":"M","submitter":"liqiangz"},{"authorTime":"2021-09-17 00:05:18","codes":[{"authorDate":"2021-09-17 00:05:18","commitOrder":24,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client, config.getMaxSizeOfBatchSql(), config.getAsyncBatchPersistentPoolSize()));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n        ));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","date":"2021-09-17 00:05:18","endLine":169,"groupId":"10830","id":45,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1a/93880c517c8e81f5c7f044a9329ae1adc66ca5.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        Properties settings = new Properties();\n        settings.setProperty(\"dataSourceClassName\", config.getDriver());\n        settings.setProperty(\"dataSource.url\", config.getUrl());\n        settings.setProperty(\"dataSource.user\", config.getUser());\n        settings.setProperty(\"dataSource.password\", config.getPassword());\n        h2Client = new JDBCHikariCPClient(settings);\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(h2Client));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), h2Client, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(h2Client));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(h2Client));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class, new H2TraceQueryDAO(\n                getManager(),\n                h2Client,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            ));\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new H2BrowserLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(h2Client, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new H2AggregationQueryDAO(h2Client));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new H2AlarmQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n        ));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(h2Client));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new H2LogQueryDAO(\n                h2Client,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(h2Client));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(h2Client));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(h2Client));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(h2Client));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(h2Client));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2021-09-17 00:05:18","commitOrder":24,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient, config.getMaxSizeOfBatchSql(), config.getAsyncBatchPersistentPoolSize()));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","date":"2021-09-17 00:05:18","endLine":155,"groupId":"10830","id":46,"instanceNumber":2,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c9/745b8ec409189ad1e2de43ebc5b0f0abe4ea52.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        this.registerServiceImplementation(StorageBuilderFactory.class, new StorageBuilderFactory.Default());\n\n        mysqlClient = new JDBCHikariCPClient(config.getProperties());\n\n        this.registerServiceImplementation(IBatchDAO.class, new H2BatchDAO(mysqlClient));\n        this.registerServiceImplementation(\n            StorageDAO.class,\n            new H2StorageDAO(\n                getManager(), mysqlClient, config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag())\n        );\n        this.registerServiceImplementation(\n            INetworkAddressAliasDAO.class, new H2NetworkAddressAliasDAO(mysqlClient));\n\n        this.registerServiceImplementation(ITopologyQueryDAO.class, new H2TopologyQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IMetricsQueryDAO.class, new H2MetricsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ITraceQueryDAO.class,\n            new MySQLTraceQueryDAO(\n                getManager(),\n                mysqlClient,\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n        this.registerServiceImplementation(IBrowserLogQueryDAO.class, new MysqlBrowserLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IMetadataQueryDAO.class, new H2MetadataQueryDAO(mysqlClient, config.getMetadataQueryMaxSize()));\n        this.registerServiceImplementation(IAggregationQueryDAO.class, new MySQLAggregationQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IAlarmQueryDAO.class, new MySQLAlarmQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()));\n        this.registerServiceImplementation(\n            IHistoryDeleteDAO.class, new H2HistoryDeleteDAO(mysqlClient));\n        this.registerServiceImplementation(ITopNRecordsQueryDAO.class, new H2TopNRecordsQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            ILogQueryDAO.class,\n            new MySQLLogQueryDAO(\n                mysqlClient,\n                getManager(),\n                config.getMaxSizeOfArrayColumn(),\n                config.getNumOfSearchableValuesPerTag()\n            )\n        );\n\n        this.registerServiceImplementation(IProfileTaskQueryDAO.class, new H2ProfileTaskQueryDAO(mysqlClient));\n        this.registerServiceImplementation(IProfileTaskLogQueryDAO.class, new H2ProfileTaskLogQueryDAO(mysqlClient));\n        this.registerServiceImplementation(\n            IProfileThreadSnapshotQueryDAO.class, new H2ProfileThreadSnapshotQueryDAO(mysqlClient));\n        this.registerServiceImplementation(UITemplateManagementDAO.class, new H2UITemplateManagementDAO(mysqlClient));\n\n        this.registerServiceImplementation(IEventQueryDAO.class, new H2EventQueryDAO(mysqlClient));\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"224b6c6b3a7f72ef02d4dca5f73b32c76767d08e","commitMessage":"@@@Improve the speed of writing TiDB by batching the SQL execution (#7691)\n\n","date":"2021-09-17 00:05:18","modifiedFileCount":"10","status":"M","submitter":"nicolchen"}]
