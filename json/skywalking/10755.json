[{"authorTime":"2020-10-21 16:45:47","codes":[{"authorDate":"2020-10-21 16:45:47","commitOrder":1,"curCode":"    public SampleFamily instance(List<String> serviceKeys, List<String> instanceKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(instanceKeys.size() > 0);\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        this.context.setMeterEntity(MeterEntity.newServiceInstance(dim(serviceKeys), dim(instanceKeys)));\n        return left(io.vavr.collection.Stream.concat(serviceKeys, instanceKeys).asJava());\n    }\n","date":"2020-10-21 16:45:47","endLine":309,"groupId":"3213","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"instance","params":"(List<String>serviceKeys@List<String>instanceKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/af/8e463d4ddd89bbbc4751db8ab9a98d2242850d.src","preCode":"    public SampleFamily instance(List<String> serviceKeys, List<String> instanceKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(instanceKeys.size() > 0);\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        this.context.setMeterEntity(MeterEntity.newServiceInstance(dim(serviceKeys), dim(instanceKeys)));\n        return left(io.vavr.collection.Stream.concat(serviceKeys, instanceKeys).asJava());\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"B"},{"authorDate":"2020-10-21 16:45:47","commitOrder":1,"curCode":"    public SampleFamily endpoint(List<String> serviceKeys, List<String> endpointKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(endpointKeys.size() > 0);\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        this.context.setMeterEntity(MeterEntity.newEndpoint(dim(serviceKeys), dim(endpointKeys)));\n        return left(io.vavr.collection.Stream.concat(serviceKeys, endpointKeys).asJava());\n    }\n","date":"2020-10-21 16:45:47","endLine":319,"groupId":"3213","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"endpoint","params":"(List<String>serviceKeys@List<String>endpointKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/af/8e463d4ddd89bbbc4751db8ab9a98d2242850d.src","preCode":"    public SampleFamily endpoint(List<String> serviceKeys, List<String> endpointKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(endpointKeys.size() > 0);\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        this.context.setMeterEntity(MeterEntity.newEndpoint(dim(serviceKeys), dim(endpointKeys)));\n        return left(io.vavr.collection.Stream.concat(serviceKeys, endpointKeys).asJava());\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"B"}],"commitId":"9ce47d5bdc9e614885066d66384ee6092604efba","commitMessage":"@@@Meter Analysis Language (#5531)\n\n","date":"2020-10-21 16:45:47","modifiedFileCount":"7","status":"B","submitter":"Gao Hongtao"},{"authorTime":"2020-11-25 21:07:03","codes":[{"authorDate":"2020-11-25 21:07:03","commitOrder":2,"curCode":"    public SampleFamily instance(List<String> serviceKeys, List<String> instanceKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(instanceKeys.size() > 0);\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.scopeType = ScopeType.SERVICE_INSTANCE);\n        ExpressionParsingContext.get().ifPresent(ctx -> {\n            ctx.scopeType = ScopeType.SERVICE_INSTANCE;\n            ctx.scopeLabels.addAll(serviceKeys);\n            ctx.scopeLabels.addAll(instanceKeys);\n        });\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        this.context.setMeterEntity(MeterEntity.newServiceInstance(dim(serviceKeys), dim(instanceKeys)));\n        return left(io.vavr.collection.Stream.concat(serviceKeys, instanceKeys).asJava());\n    }\n","date":"2020-11-25 21:07:03","endLine":306,"groupId":"4227","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"instance","params":"(List<String>serviceKeys@List<String>instanceKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1c/55592a80e8a035b76df26ed0e226a3b62385a2.src","preCode":"    public SampleFamily instance(List<String> serviceKeys, List<String> instanceKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(instanceKeys.size() > 0);\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        this.context.setMeterEntity(MeterEntity.newServiceInstance(dim(serviceKeys), dim(instanceKeys)));\n        return left(io.vavr.collection.Stream.concat(serviceKeys, instanceKeys).asJava());\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"},{"authorDate":"2020-11-25 21:07:03","commitOrder":2,"curCode":"    public SampleFamily endpoint(List<String> serviceKeys, List<String> endpointKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(endpointKeys.size() > 0);\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.scopeType = ScopeType.ENDPOINT);\n        ExpressionParsingContext.get().ifPresent(ctx -> {\n            ctx.scopeType = ScopeType.ENDPOINT;\n            ctx.scopeLabels.addAll(serviceKeys);\n            ctx.scopeLabels.addAll(endpointKeys);\n        });\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        this.context.setMeterEntity(MeterEntity.newEndpoint(dim(serviceKeys), dim(endpointKeys)));\n        return left(io.vavr.collection.Stream.concat(serviceKeys, endpointKeys).asJava());\n    }\n","date":"2020-11-25 21:07:03","endLine":322,"groupId":"6499","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"endpoint","params":"(List<String>serviceKeys@List<String>endpointKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1c/55592a80e8a035b76df26ed0e226a3b62385a2.src","preCode":"    public SampleFamily endpoint(List<String> serviceKeys, List<String> endpointKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(endpointKeys.size() > 0);\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        this.context.setMeterEntity(MeterEntity.newEndpoint(dim(serviceKeys), dim(endpointKeys)));\n        return left(io.vavr.collection.Stream.concat(serviceKeys, endpointKeys).asJava());\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"}],"commitId":"b39c4306a82b1806dc5230176096ad7ddd8cf583","commitMessage":"@@@Observing Istio control plane  (#5835)\n\n* Add Istio control plane otel MAL expressions and UI template\n* Remove OpenCensus receiver.  add OpenTelemetry receiver\n* Transfer oc receiver to ot receiver\n* Create indices on boot\n* Document istio metrics and otel receiver\n* Update CHANGES.md\n* Fix potential NPE\n* Add group to meter and cleanup istio mixer\n* Update e2e case due to the change of meter metric name\n* Update prometheus fetcher config.  fix sql builder issue of h2\n* Disable istio and so11y metrics by default.\n* Fix micrometer testcase","date":"2020-11-25 21:07:03","modifiedFileCount":"19","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2021-03-17 09:02:38","codes":[{"authorDate":"2021-03-17 09:02:38","commitOrder":3,"curCode":"    public SampleFamily instance(List<String> serviceKeys, List<String> instanceKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(instanceKeys.size() > 0);\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.scopeType = ScopeType.SERVICE_INSTANCE);\n        ExpressionParsingContext.get().ifPresent(ctx -> {\n            ctx.scopeType = ScopeType.SERVICE_INSTANCE;\n            ctx.scopeLabels.addAll(serviceKeys);\n            ctx.scopeLabels.addAll(instanceKeys);\n        });\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        return createMeterSamples(new InstanceEntityDescription(serviceKeys, instanceKeys));\n    }\n","date":"2021-03-17 09:02:38","endLine":359,"groupId":"4227","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"instance","params":"(List<String>serviceKeys@List<String>instanceKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d2/ef9009bc7963f79cefc0cd9208ed62d1b65183.src","preCode":"    public SampleFamily instance(List<String> serviceKeys, List<String> instanceKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(instanceKeys.size() > 0);\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.scopeType = ScopeType.SERVICE_INSTANCE);\n        ExpressionParsingContext.get().ifPresent(ctx -> {\n            ctx.scopeType = ScopeType.SERVICE_INSTANCE;\n            ctx.scopeLabels.addAll(serviceKeys);\n            ctx.scopeLabels.addAll(instanceKeys);\n        });\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        this.context.setMeterEntity(MeterEntity.newServiceInstance(dim(serviceKeys), dim(instanceKeys)));\n        return left(io.vavr.collection.Stream.concat(serviceKeys, instanceKeys).asJava());\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"},{"authorDate":"2021-03-17 09:02:38","commitOrder":3,"curCode":"    public SampleFamily endpoint(List<String> serviceKeys, List<String> endpointKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(endpointKeys.size() > 0);\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.scopeType = ScopeType.ENDPOINT);\n        ExpressionParsingContext.get().ifPresent(ctx -> {\n            ctx.scopeType = ScopeType.ENDPOINT;\n            ctx.scopeLabels.addAll(serviceKeys);\n            ctx.scopeLabels.addAll(endpointKeys);\n        });\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        return createMeterSamples(new EndpointEntityDescription(serviceKeys, endpointKeys));\n    }\n","date":"2021-03-17 09:02:38","endLine":374,"groupId":"6499","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"endpoint","params":"(List<String>serviceKeys@List<String>endpointKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d2/ef9009bc7963f79cefc0cd9208ed62d1b65183.src","preCode":"    public SampleFamily endpoint(List<String> serviceKeys, List<String> endpointKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(endpointKeys.size() > 0);\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.scopeType = ScopeType.ENDPOINT);\n        ExpressionParsingContext.get().ifPresent(ctx -> {\n            ctx.scopeType = ScopeType.ENDPOINT;\n            ctx.scopeLabels.addAll(serviceKeys);\n            ctx.scopeLabels.addAll(endpointKeys);\n        });\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        this.context.setMeterEntity(MeterEntity.newEndpoint(dim(serviceKeys), dim(endpointKeys)));\n        return left(io.vavr.collection.Stream.concat(serviceKeys, endpointKeys).asJava());\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"}],"commitId":"a8810b1ab0b50fe439bc14517281fca7e82489b2","commitMessage":"@@@Support metrics grouped by scope labelValue in MAL.  no need global same labelValue as before. (#6495)\n\n","date":"2021-03-17 09:02:38","modifiedFileCount":"2","status":"M","submitter":"wankai123"},{"authorTime":"2021-08-06 17:09:13","codes":[{"authorDate":"2021-08-06 17:09:13","commitOrder":4,"curCode":"    public SampleFamily instance(List<String> serviceKeys, List<String> instanceKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(instanceKeys.size() > 0);\n        ExpressionParsingContext.get().ifPresent(ctx -> {\n            ctx.scopeType = ScopeType.SERVICE_INSTANCE;\n            ctx.scopeLabels.addAll(serviceKeys);\n            ctx.scopeLabels.addAll(instanceKeys);\n        });\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        return createMeterSamples(new InstanceEntityDescription(serviceKeys, instanceKeys));\n    }\n","date":"2021-08-06 17:09:13","endLine":433,"groupId":"10755","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"instance","params":"(List<String>serviceKeys@List<String>instanceKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c1/5303308ee024e9156555a6010c4aabde032b4b.src","preCode":"    public SampleFamily instance(List<String> serviceKeys, List<String> instanceKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(instanceKeys.size() > 0);\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.scopeType = ScopeType.SERVICE_INSTANCE);\n        ExpressionParsingContext.get().ifPresent(ctx -> {\n            ctx.scopeType = ScopeType.SERVICE_INSTANCE;\n            ctx.scopeLabels.addAll(serviceKeys);\n            ctx.scopeLabels.addAll(instanceKeys);\n        });\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        return createMeterSamples(new InstanceEntityDescription(serviceKeys, instanceKeys));\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"},{"authorDate":"2021-08-06 17:09:13","commitOrder":4,"curCode":"    public SampleFamily endpoint(List<String> serviceKeys, List<String> endpointKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(endpointKeys.size() > 0);\n        ExpressionParsingContext.get().ifPresent(ctx -> {\n            ctx.scopeType = ScopeType.ENDPOINT;\n            ctx.scopeLabels.addAll(serviceKeys);\n            ctx.scopeLabels.addAll(endpointKeys);\n        });\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        return createMeterSamples(new EndpointEntityDescription(serviceKeys, endpointKeys));\n    }\n","date":"2021-08-06 17:09:13","endLine":447,"groupId":"10755","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"endpoint","params":"(List<String>serviceKeys@List<String>endpointKeys)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c1/5303308ee024e9156555a6010c4aabde032b4b.src","preCode":"    public SampleFamily endpoint(List<String> serviceKeys, List<String> endpointKeys) {\n        Preconditions.checkArgument(serviceKeys.size() > 0);\n        Preconditions.checkArgument(endpointKeys.size() > 0);\n        ExpressionParsingContext.get().ifPresent(ctx -> ctx.scopeType = ScopeType.ENDPOINT);\n        ExpressionParsingContext.get().ifPresent(ctx -> {\n            ctx.scopeType = ScopeType.ENDPOINT;\n            ctx.scopeLabels.addAll(serviceKeys);\n            ctx.scopeLabels.addAll(endpointKeys);\n        });\n        if (this == EMPTY) {\n            return EMPTY;\n        }\n        return createMeterSamples(new EndpointEntityDescription(serviceKeys, endpointKeys));\n    }\n","realPath":"oap-server/analyzer/meter-analyzer/src/main/java/org/apache/skywalking/oap/meter/analyzer/dsl/SampleFamily.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":435,"status":"M"}],"commitId":"4e7d80fb88a603e076f6c53ed9817d81dc55da3d","commitMessage":"@@@Support Metric level function `serviceRelation` in `MAL` and binding  envoy metrics into the topology. (#7399)\n\n* Support Metric level function `serviceRelation` in `MAL`.\n* Support envoy metrics binding into the topology.\n* add istio args\n* remove istio 1.7\n\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>\nCo-authored-by: Jared Tan <jian.tan@daocloud.io>\nCo-authored-by: Zhenxu <kezhenxu94@apache.org>","date":"2021-08-06 17:09:13","modifiedFileCount":"14","status":"M","submitter":"wankai123"}]
