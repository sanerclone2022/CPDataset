[{"authorTime":"2021-02-23 20:06:48","codes":[{"authorDate":"2021-02-23 20:06:48","commitOrder":1,"curCode":"    public void json(final Closure<Void> cl) {\n        if (BINDING.get().shouldAbort()) {\n            return;\n        }\n        cl.setDelegate(jsonParser);\n        cl.call();\n\n        final LogData.Builder logData = BINDING.get().log();\n        final Map<String, Object> parsed = jsonParser.create().fromJson(\n            logData.getBody().getJson().getJson(), parsedType\n        );\n\n        BINDING.get().parsed(parsed);\n    }\n","date":"2021-02-23 20:06:48","endLine":106,"groupId":"585","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"json","params":"(finalClosure<Void>cl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9c/fe5931721e82d643ffdcb76dd13826a12e397c.src","preCode":"    public void json(final Closure<Void> cl) {\n        if (BINDING.get().shouldAbort()) {\n            return;\n        }\n        cl.setDelegate(jsonParser);\n        cl.call();\n\n        final LogData.Builder logData = BINDING.get().log();\n        final Map<String, Object> parsed = jsonParser.create().fromJson(\n            logData.getBody().getJson().getJson(), parsedType\n        );\n\n        BINDING.get().parsed(parsed);\n    }\n","realPath":"oap-server/analyzer/log-analyzer/src/main/java/org/apache/skywalking/oap/log/analyzer/dsl/spec/filter/FilterSpec.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2021-02-23 20:06:48","commitOrder":1,"curCode":"    public void yaml(final Closure<Void> cl) {\n        if (BINDING.get().shouldAbort()) {\n            return;\n        }\n        cl.setDelegate(yamlParser);\n        cl.call();\n\n        final LogData.Builder logData = BINDING.get().log();\n        final Map<String, Object> parsed = (Map<String, Object>) yamlParser.create().load(\n            logData.getBody().getYaml().getYaml()\n        );\n\n        BINDING.get().parsed(parsed);\n    }\n","date":"2021-02-23 20:06:48","endLine":122,"groupId":"585","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"yaml","params":"(finalClosure<Void>cl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9c/fe5931721e82d643ffdcb76dd13826a12e397c.src","preCode":"    public void yaml(final Closure<Void> cl) {\n        if (BINDING.get().shouldAbort()) {\n            return;\n        }\n        cl.setDelegate(yamlParser);\n        cl.call();\n\n        final LogData.Builder logData = BINDING.get().log();\n        final Map<String, Object> parsed = (Map<String, Object>) yamlParser.create().load(\n            logData.getBody().getYaml().getYaml()\n        );\n\n        BINDING.get().parsed(parsed);\n    }\n","realPath":"oap-server/analyzer/log-analyzer/src/main/java/org/apache/skywalking/oap/log/analyzer/dsl/spec/filter/FilterSpec.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"}],"commitId":"96f1c12159297f67cd6cd724b552b182bf44c573","commitMessage":"@@@Introduce log analysis language (LAL) (#6388)\n\n","date":"2021-02-23 20:06:48","modifiedFileCount":"8","status":"B","submitter":"Zhenxu Ke"},{"authorTime":"2021-03-03 17:18:50","codes":[{"authorDate":"2021-03-03 17:18:50","commitOrder":2,"curCode":"    public void json(final Closure<Void> cl) {\n        if (BINDING.get().shouldAbort()) {\n            return;\n        }\n        cl.setDelegate(jsonParser);\n        cl.call();\n\n        final LogData.Builder logData = BINDING.get().log();\n        try {\n            final Map<String, Object> parsed = jsonParser.create().fromJson(\n                logData.getBody().getJson().getJson(), parsedType\n            );\n\n            BINDING.get().parsed(parsed);\n        } catch (final Exception e) {\n            if (jsonParser.abortOnFailure()) {\n                BINDING.get().abort();\n            }\n        }\n    }\n","date":"2021-03-03 17:18:50","endLine":112,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"json","params":"(finalClosure<Void>cl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/76/83bb63ebe8a30ee26e40d4e226d70d4e4c3034.src","preCode":"    public void json(final Closure<Void> cl) {\n        if (BINDING.get().shouldAbort()) {\n            return;\n        }\n        cl.setDelegate(jsonParser);\n        cl.call();\n\n        final LogData.Builder logData = BINDING.get().log();\n        final Map<String, Object> parsed = jsonParser.create().fromJson(\n            logData.getBody().getJson().getJson(), parsedType\n        );\n\n        BINDING.get().parsed(parsed);\n    }\n","realPath":"oap-server/analyzer/log-analyzer/src/main/java/org/apache/skywalking/oap/log/analyzer/dsl/spec/filter/FilterSpec.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2021-03-03 17:18:50","commitOrder":2,"curCode":"    public void yaml(final Closure<Void> cl) {\n        if (BINDING.get().shouldAbort()) {\n            return;\n        }\n        cl.setDelegate(yamlParser);\n        cl.call();\n\n        final LogData.Builder logData = BINDING.get().log();\n        try {\n            final Map<String, Object> parsed = (Map<String, Object>) yamlParser.create().load(\n                logData.getBody().getYaml().getYaml()\n            );\n\n            BINDING.get().parsed(parsed);\n        } catch (final Exception e) {\n            if (yamlParser.abortOnFailure()) {\n                BINDING.get().abort();\n            }\n        }\n    }\n","date":"2021-03-03 17:18:50","endLine":134,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"yaml","params":"(finalClosure<Void>cl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/76/83bb63ebe8a30ee26e40d4e226d70d4e4c3034.src","preCode":"    public void yaml(final Closure<Void> cl) {\n        if (BINDING.get().shouldAbort()) {\n            return;\n        }\n        cl.setDelegate(yamlParser);\n        cl.call();\n\n        final LogData.Builder logData = BINDING.get().log();\n        final Map<String, Object> parsed = (Map<String, Object>) yamlParser.create().load(\n            logData.getBody().getYaml().getYaml()\n        );\n\n        BINDING.get().parsed(parsed);\n    }\n","realPath":"oap-server/analyzer/log-analyzer/src/main/java/org/apache/skywalking/oap/log/analyzer/dsl/spec/filter/FilterSpec.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"M"}],"commitId":"cb16e524da2bf45258e67052443a6b9bc2460855","commitMessage":"@@@Enhance the LAL to allow easily skipping logs with malformed formats (#6477)\n\n","date":"2021-03-03 17:18:50","modifiedFileCount":"4","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-07-09 18:00:25","codes":[{"authorDate":"2021-07-09 18:00:25","commitOrder":3,"curCode":"    public void json(@DelegatesTo(JsonParserSpec.class) final Closure<?> cl) {\n        if (BINDING.get().shouldAbort()) {\n            return;\n        }\n        cl.setDelegate(jsonParser);\n        cl.call();\n\n        final LogData.Builder logData = BINDING.get().log();\n        try {\n\n            final Map<String, Object> parsed = jsonParser.create().readValue(\n                logData.getBody().getJson().getJson(), parsedType\n            );\n\n            BINDING.get().parsed(parsed);\n        } catch (final Exception e) {\n            if (jsonParser.abortOnFailure()) {\n                BINDING.get().abort();\n            }\n        }\n    }\n","date":"2021-07-09 18:00:25","endLine":113,"groupId":"10783","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"json","params":"(@DelegatesTo(JsonParserSpec.class)finalClosure<?>cl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/43/f86a3606d1d78b727bb4d82bbeca3fa1b2300d.src","preCode":"    public void json(final Closure<Void> cl) {\n        if (BINDING.get().shouldAbort()) {\n            return;\n        }\n        cl.setDelegate(jsonParser);\n        cl.call();\n\n        final LogData.Builder logData = BINDING.get().log();\n        try {\n            final Map<String, Object> parsed = jsonParser.create().fromJson(\n                logData.getBody().getJson().getJson(), parsedType\n            );\n\n            BINDING.get().parsed(parsed);\n        } catch (final Exception e) {\n            if (jsonParser.abortOnFailure()) {\n                BINDING.get().abort();\n            }\n        }\n    }\n","realPath":"oap-server/analyzer/log-analyzer/src/main/java/org/apache/skywalking/oap/log/analyzer/dsl/spec/filter/FilterSpec.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2021-07-09 18:00:25","commitOrder":3,"curCode":"    public void yaml(@DelegatesTo(YamlParserSpec.class) final Closure<?> cl) {\n        if (BINDING.get().shouldAbort()) {\n            return;\n        }\n        cl.setDelegate(yamlParser);\n        cl.call();\n\n        final LogData.Builder logData = BINDING.get().log();\n        try {\n            final Map<String, Object> parsed = yamlParser.create().load(\n                logData.getBody().getYaml().getYaml()\n            );\n\n            BINDING.get().parsed(parsed);\n        } catch (final Exception e) {\n            if (yamlParser.abortOnFailure()) {\n                BINDING.get().abort();\n            }\n        }\n    }\n","date":"2021-07-09 18:00:25","endLine":135,"groupId":"10783","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"yaml","params":"(@DelegatesTo(YamlParserSpec.class)finalClosure<?>cl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/43/f86a3606d1d78b727bb4d82bbeca3fa1b2300d.src","preCode":"    public void yaml(final Closure<Void> cl) {\n        if (BINDING.get().shouldAbort()) {\n            return;\n        }\n        cl.setDelegate(yamlParser);\n        cl.call();\n\n        final LogData.Builder logData = BINDING.get().log();\n        try {\n            final Map<String, Object> parsed = (Map<String, Object>) yamlParser.create().load(\n                logData.getBody().getYaml().getYaml()\n            );\n\n            BINDING.get().parsed(parsed);\n        } catch (final Exception e) {\n            if (yamlParser.abortOnFailure()) {\n                BINDING.get().abort();\n            }\n        }\n    }\n","realPath":"oap-server/analyzer/log-analyzer/src/main/java/org/apache/skywalking/oap/log/analyzer/dsl/spec/filter/FilterSpec.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"fd92f4678a4bc020acb4d73bbbbcf7ae1db8f980","commitMessage":"@@@perf: optimize Groovy-based LAL DSL with static compilation (#7263)\n\nGroovy naturally supports many dynamic features that we don't benefit for now but cost performance loss.  in this patch we compile our Groovy-based DSL scripts statically to optimize performance.","date":"2021-07-09 18:00:25","modifiedFileCount":"9","status":"M","submitter":"kezhenxu94"}]
