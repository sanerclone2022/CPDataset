[{"authorTime":"2020-03-16 23:45:14","codes":[{"authorDate":"2020-03-16 23:45:14","commitOrder":1,"curCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}, metrics: {}\", endpoint, metricName);\n                verifyMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n        }\n    }\n","date":"2020-03-16 23:45:14","endLine":217,"groupId":"6653","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(finalEndpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/84/de65c235c6cb6cbabcb40d86582326ceb4035d.src","preCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}, metrics: {}\", endpoint, metricName);\n                verifyMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/GatewayE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"B"},{"authorDate":"2020-03-16 23:45:14","commitOrder":1,"curCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (final Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}, metrics: {}\", endpoint, metricName);\n\n                verifyMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n\n            for (String metricName : ALL_ENDPOINT_MULTIPLE_LINEAR_METRICS) {\n                verifyPercentileMetrics(graphql, metricName, endpoint.getKey(), startTime, 0, null);\n            }\n        }\n    }\n","date":"2020-03-16 23:45:14","endLine":232,"groupId":"6653","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(finalEndpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/a7704a4d98d7d70a401f2d528df1d7acb4b884.src","preCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (final Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}, metrics: {}\", endpoint, metricName);\n\n                verifyMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n\n            for (String metricName : ALL_ENDPOINT_MULTIPLE_LINEAR_METRICS) {\n                verifyPercentileMetrics(graphql, metricName, endpoint.getKey(), startTime, 0, null);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/ClusterE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"B"}],"commitId":"dcd66ee6e940bdc9a7ecf90415929bfd48a3a284","commitMessage":"@@@Rewrite the E2E test framework and tests (#4510)\n\nMotivation:\n\nAccording the feedback from the community.  the e2e tests are hard for\nthem to understand and get them started.  so this pull request aims to\nrewrite the e2e tests with some improvements:\n\n- debuggable locally.  now you can run every individual case directly\ninside the IDE.  just like running a plain unit test.\n\n- same functionalities of multiple counterparts share the same codes. \ncases like different storages and cluster coordinators share the same\ncodes.  easy to add more similar cases.\n\n- the \"end\" now extends to the Doccker images.  meaning that some bugs\nlike #4483 and #4471 can be more easily and early to be discovered.\n\n- codes style and license headers are checked\n\nModifications:\n\n- adopt jupeter (a.k.a junit 5).  testcontainers as the new test\nframework.  all containers are orchestrated by docker-compose.yml. \nwell-known technology that developers should be familiar with.\n\n- rewrite all test cases and verify them.\n\n- reorganize the workflows in GitHub Actions.\n\nResult:\n\n- new e2e test should be easy to add.\n\n- closes https://github.com/apache/skywalking/issues/4472","date":"2020-03-16 23:45:14","modifiedFileCount":"3","status":"B","submitter":"kezhenxu94"},{"authorTime":"2020-08-31 15:46:37","codes":[{"authorDate":"2020-03-16 23:45:14","commitOrder":2,"curCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}, metrics: {}\", endpoint, metricName);\n                verifyMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n        }\n    }\n","date":"2020-03-16 23:45:14","endLine":217,"groupId":"6653","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyEndpointsMetrics","params":"(finalEndpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/84/de65c235c6cb6cbabcb40d86582326ceb4035d.src","preCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}, metrics: {}\", endpoint, metricName);\n                verifyMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/GatewayE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"},{"authorDate":"2020-08-31 15:46:37","commitOrder":2,"curCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (final Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}, metrics: {}\", endpoint, metricName);\n\n                verifyMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n\n            for (String metricName : ALL_ENDPOINT_MULTIPLE_LINEAR_METRICS) {\n                verifyPercentileMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n        }\n    }\n","date":"2020-08-31 15:46:37","endLine":232,"groupId":"6653","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"verifyEndpointsMetrics","params":"(finalEndpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e3/6586062868ff25db87ba16e8dfd8aa6b6b6a71.src","preCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (final Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}, metrics: {}\", endpoint, metricName);\n\n                verifyMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n\n            for (String metricName : ALL_ENDPOINT_MULTIPLE_LINEAR_METRICS) {\n                verifyPercentileMetrics(graphql, metricName, endpoint.getKey(), startTime, 0, null);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/ClusterE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"M"}],"commitId":"7ef8b3e476001154ba5d600f7206add0277d4d24","commitMessage":"@@@Support Browser protocol at OAP (#4228)\n\n","date":"2020-08-31 15:46:37","modifiedFileCount":"24","status":"M","submitter":"zhang-wei"},{"authorTime":"2020-08-31 15:46:37","codes":[{"authorDate":"2020-10-29 14:38:49","commitOrder":3,"curCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}, metrics: {}\", endpoint, metricName);\n                verifyMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n            for (String metricName : ALL_ENDPOINT_MULTIPLE_LINEAR_METRICS) {\n                verifyPercentileMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n        }\n    }\n","date":"2020-10-29 14:38:49","endLine":223,"groupId":"1066","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"verifyEndpointsMetrics","params":"(finalEndpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2b/3f3304050e827fe84920f0951ca13a1fa0d02c.src","preCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}, metrics: {}\", endpoint, metricName);\n                verifyMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/GatewayE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"},{"authorDate":"2020-08-31 15:46:37","commitOrder":3,"curCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (final Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}, metrics: {}\", endpoint, metricName);\n\n                verifyMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n\n            for (String metricName : ALL_ENDPOINT_MULTIPLE_LINEAR_METRICS) {\n                verifyPercentileMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n        }\n    }\n","date":"2020-08-31 15:46:37","endLine":232,"groupId":"1066","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"verifyEndpointsMetrics","params":"(finalEndpointsendpoints)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e3/6586062868ff25db87ba16e8dfd8aa6b6b6a71.src","preCode":"    private void verifyEndpointsMetrics(final Endpoints endpoints) throws Exception {\n        for (final Endpoint endpoint : endpoints.getEndpoints()) {\n            if (!endpoint.getLabel().equals(\"/users\")) {\n                continue;\n            }\n            for (String metricName : ALL_ENDPOINT_METRICS) {\n                LOGGER.info(\"verifying endpoint {}, metrics: {}\", endpoint, metricName);\n\n                verifyMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n\n            for (String metricName : ALL_ENDPOINT_MULTIPLE_LINEAR_METRICS) {\n                verifyPercentileMetrics(graphql, metricName, endpoint.getKey(), startTime);\n            }\n        }\n    }\n","realPath":"test/e2e/e2e-test/src/test/java/org/apache/skywalking/e2e/ClusterE2E.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"N"}],"commitId":"c95a9134925cbe8101dc72dbaca38269eb3dc3b1","commitMessage":"@@@Add percentile tests in e2e test. (#5737)\n\n","date":"2020-10-29 14:38:49","modifiedFileCount":"11","status":"M","submitter":"Humbertzhang"}]
