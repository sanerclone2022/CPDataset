[{"authorTime":"2021-06-02 12:56:00","codes":[{"authorDate":"2021-06-02 12:56:00","commitOrder":3,"curCode":"    public JVMMetricsHandler(ModuleManager manager, KafkaFetcherConfig config) {\n        super(manager, config);\n        this.jvmSourceDispatcher = new JVMSourceDispatcher(manager);\n        this.namingLengthControl = manager.find(CoreModule.NAME)\n                                                .provider()\n                                                .getService(NamingControl.class);\n        MetricsCreator metricsCreator = manager.find(TelemetryModule.NAME)\n                                               .provider()\n                                               .getService(MetricsCreator.class);\n        histogram = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        histogramBatch = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        errorCounter = metricsCreator.createCounter(\n            \"meter_analysis_error_count\",\n            \"The error number of meter analysis\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n    }\n","date":"2021-06-02 12:56:00","endLine":77,"groupId":"3914","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"JVMMetricsHandler","params":"(ModuleManagermanager@KafkaFetcherConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0a/5365f5d29dd24ecd0a89af565ed8fab6ed29b7.src","preCode":"    public JVMMetricsHandler(ModuleManager manager, KafkaFetcherConfig config) {\n        super(manager, config);\n        this.jvmSourceDispatcher = new JVMSourceDispatcher(manager);\n        this.namingLengthControl = manager.find(CoreModule.NAME)\n                                                .provider()\n                                                .getService(NamingControl.class);\n        MetricsCreator metricsCreator = manager.find(TelemetryModule.NAME)\n                                               .provider()\n                                               .getService(MetricsCreator.class);\n        histogram = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        histogramBatch = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        errorCounter = metricsCreator.createCounter(\n            \"meter_analysis_error_count\",\n            \"The error number of meter analysis\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n    }\n","realPath":"oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/provider/handler/JVMMetricsHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2021-06-02 12:56:00","commitOrder":3,"curCode":"    public MeterServiceHandler(ModuleManager manager, KafkaFetcherConfig config) {\n        super(manager, config);\n        this.processService = manager.find(AnalyzerModule.NAME).provider().getService(IMeterProcessService.class);\n        MetricsCreator metricsCreator = manager.find(TelemetryModule.NAME)\n                                               .provider()\n                                               .getService(MetricsCreator.class);\n        histogram = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        histogramBatch = metricsCreator.createHistogramMetric(\n            \"meter_batch_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        errorCounter = metricsCreator.createCounter(\n            \"meter_analysis_error_count\",\n            \"The error number of meter analysis\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n    }\n","date":"2021-06-02 12:56:00","endLine":70,"groupId":"3914","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"MeterServiceHandler","params":"(ModuleManagermanager@KafkaFetcherConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/aa/36144b1acfbe7d14cb72a5d0089043452080be.src","preCode":"    public MeterServiceHandler(ModuleManager manager, KafkaFetcherConfig config) {\n        super(manager, config);\n        this.processService = manager.find(AnalyzerModule.NAME).provider().getService(IMeterProcessService.class);\n        MetricsCreator metricsCreator = manager.find(TelemetryModule.NAME)\n                                               .provider()\n                                               .getService(MetricsCreator.class);\n        histogram = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        histogramBatch = metricsCreator.createHistogramMetric(\n            \"meter_batch_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        errorCounter = metricsCreator.createCounter(\n            \"meter_analysis_error_count\",\n            \"The error number of meter analysis\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n    }\n","realPath":"oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/provider/handler/MeterServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"MB"}],"commitId":"38c182e4c00902e5a6cda49c557f8fdbccab011c","commitMessage":"@@@Kafka transporter code polish (#7032)\n\n","date":"2021-06-02 12:56:00","modifiedFileCount":"10","status":"M","submitter":"Daming"},{"authorTime":"2021-06-02 12:56:00","codes":[{"authorDate":"2021-06-11 22:21:10","commitOrder":4,"curCode":"    public JVMMetricsHandler(ModuleManager manager, KafkaFetcherConfig config, List<Rule> rules) {\n        super(manager, config);\n        this.jvmSourceDispatcher = new JVMSourceDispatcher(manager, rules);\n        this.namingLengthControl = manager.find(CoreModule.NAME)\n                                                .provider()\n                                                .getService(NamingControl.class);\n        MetricsCreator metricsCreator = manager.find(TelemetryModule.NAME)\n                                               .provider()\n                                               .getService(MetricsCreator.class);\n        histogram = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        histogramBatch = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        errorCounter = metricsCreator.createCounter(\n            \"meter_analysis_error_count\",\n            \"The error number of meter analysis\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n    }\n","date":"2021-06-11 22:21:10","endLine":80,"groupId":"3914","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"JVMMetricsHandler","params":"(ModuleManagermanager@KafkaFetcherConfigconfig@List<Rule>rules)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/55/e3780c8e1c42de7ad3ffc80deb3544367882c4.src","preCode":"    public JVMMetricsHandler(ModuleManager manager, KafkaFetcherConfig config) {\n        super(manager, config);\n        this.jvmSourceDispatcher = new JVMSourceDispatcher(manager);\n        this.namingLengthControl = manager.find(CoreModule.NAME)\n                                                .provider()\n                                                .getService(NamingControl.class);\n        MetricsCreator metricsCreator = manager.find(TelemetryModule.NAME)\n                                               .provider()\n                                               .getService(MetricsCreator.class);\n        histogram = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        histogramBatch = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        errorCounter = metricsCreator.createCounter(\n            \"meter_analysis_error_count\",\n            \"The error number of meter analysis\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n    }\n","realPath":"oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/provider/handler/JVMMetricsHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2021-06-02 12:56:00","commitOrder":4,"curCode":"    public MeterServiceHandler(ModuleManager manager, KafkaFetcherConfig config) {\n        super(manager, config);\n        this.processService = manager.find(AnalyzerModule.NAME).provider().getService(IMeterProcessService.class);\n        MetricsCreator metricsCreator = manager.find(TelemetryModule.NAME)\n                                               .provider()\n                                               .getService(MetricsCreator.class);\n        histogram = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        histogramBatch = metricsCreator.createHistogramMetric(\n            \"meter_batch_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        errorCounter = metricsCreator.createCounter(\n            \"meter_analysis_error_count\",\n            \"The error number of meter analysis\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n    }\n","date":"2021-06-02 12:56:00","endLine":70,"groupId":"3914","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"MeterServiceHandler","params":"(ModuleManagermanager@KafkaFetcherConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/aa/36144b1acfbe7d14cb72a5d0089043452080be.src","preCode":"    public MeterServiceHandler(ModuleManager manager, KafkaFetcherConfig config) {\n        super(manager, config);\n        this.processService = manager.find(AnalyzerModule.NAME).provider().getService(IMeterProcessService.class);\n        MetricsCreator metricsCreator = manager.find(TelemetryModule.NAME)\n                                               .provider()\n                                               .getService(MetricsCreator.class);\n        histogram = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        histogramBatch = metricsCreator.createHistogramMetric(\n            \"meter_batch_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        errorCounter = metricsCreator.createCounter(\n            \"meter_analysis_error_count\",\n            \"The error number of meter analysis\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n    }\n","realPath":"oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/provider/handler/MeterServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"}],"commitId":"7a3355f956f6fdcbb8f01ad9cd3ea5de1d107c14","commitMessage":"@@@Use MAL to calculate JVM metrics.  remove OAL dependency. (#7091)\n\n","date":"2021-06-11 22:21:10","modifiedFileCount":"8","status":"M","submitter":"liqiangz"},{"authorTime":"2021-06-02 12:56:00","codes":[{"authorDate":"2021-06-28 21:05:28","commitOrder":5,"curCode":"    public JVMMetricsHandler(ModuleManager manager, KafkaFetcherConfig config) {\n        super(manager, config);\n        this.jvmSourceDispatcher = new JVMSourceDispatcher(manager);\n        this.namingLengthControl = manager.find(CoreModule.NAME)\n                                          .provider()\n                                          .getService(NamingControl.class);\n        MetricsCreator metricsCreator = manager.find(TelemetryModule.NAME)\n                                               .provider()\n                                               .getService(MetricsCreator.class);\n        histogram = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        histogramBatch = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        errorCounter = metricsCreator.createCounter(\n            \"meter_analysis_error_count\",\n            \"The error number of meter analysis\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n    }\n","date":"2021-06-28 21:05:28","endLine":77,"groupId":"10583","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"JVMMetricsHandler","params":"(ModuleManagermanager@KafkaFetcherConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2e/ddb20d0e6aac22e8756372222c211c81fbae9d.src","preCode":"    public JVMMetricsHandler(ModuleManager manager, KafkaFetcherConfig config, List<Rule> rules) {\n        super(manager, config);\n        this.jvmSourceDispatcher = new JVMSourceDispatcher(manager, rules);\n        this.namingLengthControl = manager.find(CoreModule.NAME)\n                                                .provider()\n                                                .getService(NamingControl.class);\n        MetricsCreator metricsCreator = manager.find(TelemetryModule.NAME)\n                                               .provider()\n                                               .getService(MetricsCreator.class);\n        histogram = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        histogramBatch = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        errorCounter = metricsCreator.createCounter(\n            \"meter_analysis_error_count\",\n            \"The error number of meter analysis\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n    }\n","realPath":"oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/provider/handler/JVMMetricsHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2021-06-02 12:56:00","commitOrder":5,"curCode":"    public MeterServiceHandler(ModuleManager manager, KafkaFetcherConfig config) {\n        super(manager, config);\n        this.processService = manager.find(AnalyzerModule.NAME).provider().getService(IMeterProcessService.class);\n        MetricsCreator metricsCreator = manager.find(TelemetryModule.NAME)\n                                               .provider()\n                                               .getService(MetricsCreator.class);\n        histogram = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        histogramBatch = metricsCreator.createHistogramMetric(\n            \"meter_batch_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        errorCounter = metricsCreator.createCounter(\n            \"meter_analysis_error_count\",\n            \"The error number of meter analysis\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n    }\n","date":"2021-06-02 12:56:00","endLine":70,"groupId":"10583","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"MeterServiceHandler","params":"(ModuleManagermanager@KafkaFetcherConfigconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/aa/36144b1acfbe7d14cb72a5d0089043452080be.src","preCode":"    public MeterServiceHandler(ModuleManager manager, KafkaFetcherConfig config) {\n        super(manager, config);\n        this.processService = manager.find(AnalyzerModule.NAME).provider().getService(IMeterProcessService.class);\n        MetricsCreator metricsCreator = manager.find(TelemetryModule.NAME)\n                                               .provider()\n                                               .getService(MetricsCreator.class);\n        histogram = metricsCreator.createHistogramMetric(\n            \"meter_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        histogramBatch = metricsCreator.createHistogramMetric(\n            \"meter_batch_in_latency\",\n            \"The process latency of meter\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n        errorCounter = metricsCreator.createCounter(\n            \"meter_analysis_error_count\",\n            \"The error number of meter analysis\",\n            new MetricsTag.Keys(\"protocol\"),\n            new MetricsTag.Values(\"kafka\")\n        );\n    }\n","realPath":"oap-server/server-fetcher-plugin/kafka-fetcher-plugin/src/main/java/org/apache/skywalking/oap/server/analyzer/agent/kafka/provider/handler/MeterServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"}],"commitId":"d63f3ffcc1788436cf65b6134d44d8e4b4a0ec78","commitMessage":"@@@revert #7091 (#7189)\n\n","date":"2021-06-28 21:05:28","modifiedFileCount":"6","status":"M","submitter":"liqiangz"}]
