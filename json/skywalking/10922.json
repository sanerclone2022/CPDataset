[{"authorTime":"2020-01-18 18:38:03","codes":[{"authorDate":"2020-01-18 18:38:03","commitOrder":2,"curCode":"    public void getProfileTaskCommands(ProfileTaskCommandQuery request, StreamObserver<Commands> responseObserver) {\n        \r\n        final List<ProfileTask> profileTaskList = profileTaskCache.getProfileTaskList(request.getServiceId());\n        if (CollectionUtils.isEmpty(profileTaskList)) {\n            responseObserver.onNext(Commands.newBuilder().build());\n            responseObserver.onCompleted();\n            return;\n        }\n\n        \r\n        final Commands.Builder commandsBuilder = Commands.newBuilder();\n        final long lastCommandTime = request.getLastCommandTime();\n\n        for (ProfileTask profileTask : profileTaskList) {\n            \r\n            if (profileTask.getCreateTime() <= lastCommandTime) {\n                continue;\n            }\n\n            \r\n            recordProfileTaskLog(profileTask, request.getInstanceId(), ProfileTaskLogOperationType.NOTIFIED);\n\n            \r\n            commandsBuilder.addCommands(commandService.newProfileTaskCommand(profileTask).serialize().build());\n        }\n\n        responseObserver.onNext(commandsBuilder.build());\n        responseObserver.onCompleted();\n    }\n","date":"2020-01-18 18:38:03","endLine":90,"groupId":"1927","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getProfileTaskCommands","params":"(ProfileTaskCommandQueryrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b1/81fd3869cd462b11f3754fca4bf6743a627e1e.src","preCode":"    public void getProfileTaskCommands(ProfileTaskCommandQuery request, StreamObserver<Commands> responseObserver) {\n        \r\n        final List<ProfileTask> profileTaskList = profileTaskCache.getProfileTaskList(request.getServiceId());\n        if (CollectionUtils.isEmpty(profileTaskList)) {\n            responseObserver.onNext(Commands.newBuilder().build());\n            responseObserver.onCompleted();\n            return;\n        }\n\n        \r\n        final Commands.Builder commandsBuilder = Commands.newBuilder();\n        final long lastCommandTime = request.getLastCommandTime();\n\n        for (ProfileTask profileTask : profileTaskList) {\n            \r\n            if (profileTask.getCreateTime() <= lastCommandTime) {\n                continue;\n            }\n\n            \r\n            recordProfileTaskLog(profileTask, request.getInstanceId(), ProfileTaskLogOperationType.NOTIFIED);\n\n            \r\n            commandsBuilder.addCommands(commandService.newProfileTaskCommand(profileTask).serialize().build());\n        }\n\n        responseObserver.onNext(commandsBuilder.build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-profile-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/profile/provider/handler/ProfileTaskServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"MB"},{"authorDate":"2020-01-18 18:38:03","commitOrder":2,"curCode":"    public void reportTaskFinish(ProfileTaskFinishReport request, StreamObserver<Commands> responseObserver) {\n        \r\n        final ProfileTask profileTask = profileTaskCache.getProfileTaskById(request.getTaskId());\n\n        \r\n        if (profileTask != null) {\n            recordProfileTaskLog(profileTask, request.getInstanceId(), ProfileTaskLogOperationType.EXECUTION_FINISHED);\n        }\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2020-01-18 18:38:03","endLine":151,"groupId":"1929","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"reportTaskFinish","params":"(ProfileTaskFinishReportrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b1/81fd3869cd462b11f3754fca4bf6743a627e1e.src","preCode":"    public void reportTaskFinish(ProfileTaskFinishReport request, StreamObserver<Commands> responseObserver) {\n        \r\n        final ProfileTask profileTask = profileTaskCache.getProfileTaskById(request.getTaskId());\n\n        \r\n        if (profileTask != null) {\n            recordProfileTaskLog(profileTask, request.getInstanceId(), ProfileTaskLogOperationType.EXECUTION_FINISHED);\n        }\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-profile-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/profile/provider/handler/ProfileTaskServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"B"}],"commitId":"90f3c4de557b427426dc33a86f3223be6a831794","commitMessage":"@@@Sniffer processing profile task and report status and snapshot (#4220)\n\n* sniffer processing profile task and report status and snapshot\n\n* resolve testServiceDependencies test case error.  use same register with `TraceSegmentServiceClient`\n\n* resolve names\n\n* change profile to single one thread run.\n\n* 1. change to the ArrayList.  because known the max size\n2. rename issue resolved\n\n* add profiling status enum\n\n* change sniffer use full name issue\n\n* 1. remove `prepareProfiling` method.  build profiling status when construct `TracingContext`\n2. add `TracingThreadListenerManager`.  notify when tracing main thread finish\n3. change ProfileThread start when process new profile task\n\n* remove unnecessary getter\n\n* add test assert error message\n\n* adding `AgentServiceRule`\n\n* revert original assert\n\n* remove unnecessary getter\n\n* resolve issues\n\n* reduce findService invoke\n\n* resolve style error\n\n* recheck profiling when change first span operatin name\n\n* resolve issues\n1. remove `ContextManager#profilingRecheck`.  only check on `TracingContext`\n2. rename comments\n3. resolve volatile array setting\n\n* remove article link\n\n* add `ProfileTask#maxSamplingCount` check\n\n* resolve conflict (Downstream -> Commands)\n\n* 1. change profilingSegmentSlots init on construct\n2. if is profiling.  recheck dont need to stop\n3. total profiling count increment on first dump\n\n* remove unused return val\n\n* remove some `@param` and `@return`\n\n* add profile task check result data bean\n\n* change profiler slot to `AtomicReferenceArray`\n\n* resolved java doc error\n\n* fix doc error.  remove meaningless descriptions\n\n* resolve missed profile receiver on oap starter\n\n* resolve method invoke error\n\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>\n","date":"2020-01-18 18:38:03","modifiedFileCount":"28","status":"M","submitter":"mrproliu"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":3,"curCode":"    public void getProfileTaskCommands(ProfileTaskCommandQuery request, StreamObserver<Commands> responseObserver) {\n        \r\n        final String serviceId = IDManager.ServiceID.buildId(request.getService(), NodeType.Normal);\n        final String serviceInstanceId = IDManager.ServiceInstanceID.buildId(serviceId, request.getServiceInstance());\n        final List<ProfileTask> profileTaskList = profileTaskCache.getProfileTaskList(serviceId);\n        if (CollectionUtils.isEmpty(profileTaskList)) {\n            responseObserver.onNext(Commands.newBuilder().build());\n            responseObserver.onCompleted();\n            return;\n        }\n\n        \r\n        final Commands.Builder commandsBuilder = Commands.newBuilder();\n        final long lastCommandTime = request.getLastCommandTime();\n\n        for (ProfileTask profileTask : profileTaskList) {\n            \r\n            if (profileTask.getCreateTime() <= lastCommandTime) {\n                continue;\n            }\n\n            \r\n            recordProfileTaskLog(profileTask, serviceInstanceId, ProfileTaskLogOperationType.NOTIFIED);\n\n            \r\n            commandsBuilder.addCommands(commandService.newProfileTaskCommand(profileTask).serialize().build());\n        }\n\n        responseObserver.onNext(commandsBuilder.build());\n        responseObserver.onCompleted();\n    }\n","date":"2020-04-10 11:03:24","endLine":89,"groupId":"10922","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getProfileTaskCommands","params":"(ProfileTaskCommandQueryrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ab/172a22a614a4d94ce64cdd4ecc7467fad3df99.src","preCode":"    public void getProfileTaskCommands(ProfileTaskCommandQuery request, StreamObserver<Commands> responseObserver) {\n        \r\n        final List<ProfileTask> profileTaskList = profileTaskCache.getProfileTaskList(request.getServiceId());\n        if (CollectionUtils.isEmpty(profileTaskList)) {\n            responseObserver.onNext(Commands.newBuilder().build());\n            responseObserver.onCompleted();\n            return;\n        }\n\n        \r\n        final Commands.Builder commandsBuilder = Commands.newBuilder();\n        final long lastCommandTime = request.getLastCommandTime();\n\n        for (ProfileTask profileTask : profileTaskList) {\n            \r\n            if (profileTask.getCreateTime() <= lastCommandTime) {\n                continue;\n            }\n\n            \r\n            recordProfileTaskLog(profileTask, request.getInstanceId(), ProfileTaskLogOperationType.NOTIFIED);\n\n            \r\n            commandsBuilder.addCommands(commandService.newProfileTaskCommand(profileTask).serialize().build());\n        }\n\n        responseObserver.onNext(commandsBuilder.build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-profile-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/profile/provider/handler/ProfileTaskServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":3,"curCode":"    public void reportTaskFinish(ProfileTaskFinishReport request, StreamObserver<Commands> responseObserver) {\n        \r\n        final String serviceId = IDManager.ServiceID.buildId(request.getService(), NodeType.Normal);\n        final String serviceInstanceId = IDManager.ServiceInstanceID.buildId(serviceId, request.getServiceInstance());\n        final ProfileTask profileTask = profileTaskCache.getProfileTaskById(request.getTaskId());\n\n        \r\n        if (profileTask != null) {\n            recordProfileTaskLog(profileTask, serviceInstanceId, ProfileTaskLogOperationType.EXECUTION_FINISHED);\n        }\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2020-04-10 11:03:24","endLine":141,"groupId":"10922","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"reportTaskFinish","params":"(ProfileTaskFinishReportrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ab/172a22a614a4d94ce64cdd4ecc7467fad3df99.src","preCode":"    public void reportTaskFinish(ProfileTaskFinishReport request, StreamObserver<Commands> responseObserver) {\n        \r\n        final ProfileTask profileTask = profileTaskCache.getProfileTaskById(request.getTaskId());\n\n        \r\n        if (profileTask != null) {\n            recordProfileTaskLog(profileTask, request.getInstanceId(), ProfileTaskLogOperationType.EXECUTION_FINISHED);\n        }\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-profile-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/profile/provider/handler/ProfileTaskServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"}]
