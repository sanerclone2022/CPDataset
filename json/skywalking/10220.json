[{"authorTime":"2018-11-23 14:52:37","codes":[{"authorDate":"2018-11-23 14:52:37","commitOrder":2,"curCode":"    public void init() throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> properties.put(key, value));\n                        }\n                    });\n                }\n            });\n        }\n        placeholderHelper =\n            new PropertyPlaceholderHelper(PlaceholderConfigurerSupport.DEFAULT_PLACEHOLDER_PREFIX,\n                PlaceholderConfigurerSupport.DEFAULT_PLACEHOLDER_SUFFIX,\n                PlaceholderConfigurerSupport.DEFAULT_VALUE_SEPARATOR, true);\n    }\n","date":"2018-11-23 14:52:37","endLine":68,"groupId":"4233","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/81/fb6d7c753debdd382165957db7146bf5c57ce0.src","preCode":"    public void init() throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> properties.put(key, value));\n                        }\n                    });\n                }\n            });\n        }\n        placeholderHelper =\n            new PropertyPlaceholderHelper(PlaceholderConfigurerSupport.DEFAULT_PLACEHOLDER_PREFIX,\n                PlaceholderConfigurerSupport.DEFAULT_PLACEHOLDER_SUFFIX,\n                PlaceholderConfigurerSupport.DEFAULT_VALUE_SEPARATOR, true);\n    }\n","realPath":"oap-server/server-library/library-util/src/test/java/org/apache/skywalking/oap/server/library/util/PropertyPlaceholderHelperTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2018-11-23 14:52:37","commitOrder":2,"curCode":"    private void loadConfig(ApplicationConfiguration configuration) throws ConfigFileNotFoundException {\n        try {\n            Reader applicationReader = ResourceUtils.read(\"application.yml\");\n            Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n            if (CollectionUtils.isNotEmpty(moduleConfig)) {\n                moduleConfig.forEach((moduleName, providerConfig) -> {\n                    if (providerConfig.size() > 0) {\n                        logger.info(\"Get a module define from application.yml, module name: {}\", moduleName);\n                        ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                        providerConfig.forEach((name, propertiesConfig) -> {\n                            logger.info(\"Get a provider define belong to {} module, provider name: {}\", moduleName, name);\n                            Properties properties = new Properties();\n                            if (propertiesConfig != null) {\n                                propertiesConfig.forEach((key, value) -> {\n                                    properties.put(key, value);\n                                    PropertyPlaceholderHelper helper =\n                                        new PropertyPlaceholderHelper(PlaceholderConfigurerSupport.DEFAULT_PLACEHOLDER_PREFIX,\n                                            PlaceholderConfigurerSupport.DEFAULT_PLACEHOLDER_SUFFIX,\n                                            PlaceholderConfigurerSupport.DEFAULT_VALUE_SEPARATOR, true);\n                                    final Object replaceValue = yaml.load(helper.replacePlaceholders(value + \"\", properties));\n                                    properties.replace(key, replaceValue);\n                                    logger.info(\"The property with key: {}, value: {}, in {} provider\", key, replaceValue.toString(), name);\n                                });\n                            }\n                            moduleConfiguration.addProviderConfiguration(name, properties);\n                        });\n                    } else {\n                        logger.warn(\"Get a module define from application.yml, but no provider define, use default, module name: {}\", moduleName);\n                    }\n                });\n            }\n        } catch (FileNotFoundException e) {\n            throw new ConfigFileNotFoundException(e.getMessage(), e);\n        }\n    }\n","date":"2018-11-23 14:52:37","endLine":90,"groupId":"6389","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadConfig","params":"(ApplicationConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5d/93503d928c887be13309ca774c97e77eadf128.src","preCode":"    private void loadConfig(ApplicationConfiguration configuration) throws ConfigFileNotFoundException {\n        try {\n            Reader applicationReader = ResourceUtils.read(\"application.yml\");\n            Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n            if (CollectionUtils.isNotEmpty(moduleConfig)) {\n                moduleConfig.forEach((moduleName, providerConfig) -> {\n                    if (providerConfig.size() > 0) {\n                        logger.info(\"Get a module define from application.yml, module name: {}\", moduleName);\n                        ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                        providerConfig.forEach((name, propertiesConfig) -> {\n                            logger.info(\"Get a provider define belong to {} module, provider name: {}\", moduleName, name);\n                            Properties properties = new Properties();\n                            if (propertiesConfig != null) {\n                                propertiesConfig.forEach((key, value) -> {\n                                    properties.put(key, value);\n                                    PropertyPlaceholderHelper helper =\n                                        new PropertyPlaceholderHelper(PlaceholderConfigurerSupport.DEFAULT_PLACEHOLDER_PREFIX,\n                                            PlaceholderConfigurerSupport.DEFAULT_PLACEHOLDER_SUFFIX,\n                                            PlaceholderConfigurerSupport.DEFAULT_VALUE_SEPARATOR, true);\n                                    final Object replaceValue = yaml.load(helper.replacePlaceholders(value + \"\", properties));\n                                    properties.replace(key, replaceValue);\n                                    logger.info(\"The property with key: {}, value: {}, in {} provider\", key, replaceValue.toString(), name);\n                                });\n                            }\n                            moduleConfiguration.addProviderConfiguration(name, properties);\n                        });\n                    } else {\n                        logger.warn(\"Get a module define from application.yml, but no provider define, use default, module name: {}\", moduleName);\n                    }\n                });\n            }\n        } catch (FileNotFoundException e) {\n            throw new ConfigFileNotFoundException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"MB"}],"commitId":"e697385b5380c775b02ab46d6d5cefe2c2775c18","commitMessage":"@@@feat:support set config from system.envs. (#1919)\n\n* support set config from system.envs.","date":"2018-11-23 14:52:37","modifiedFileCount":"2","status":"M","submitter":"Jared.Tan"},{"authorTime":"2018-12-03 11:50:59","codes":[{"authorDate":"2018-12-03 11:50:59","commitOrder":3,"curCode":"    public void init() throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> properties.put(key, value));\n                        }\n                    });\n                }\n            });\n        }\n        placeholderHelper = PropertyPlaceholderHelper.INSTANCE;\n    }\n","date":"2018-12-03 11:50:59","endLine":66,"groupId":"4233","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bd/88be2d1af4e7a2f5c4ac4bcd6d8064a72343bd.src","preCode":"    public void init() throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> properties.put(key, value));\n                        }\n                    });\n                }\n            });\n        }\n        placeholderHelper =\n            new PropertyPlaceholderHelper(PlaceholderConfigurerSupport.DEFAULT_PLACEHOLDER_PREFIX,\n                PlaceholderConfigurerSupport.DEFAULT_PLACEHOLDER_SUFFIX,\n                PlaceholderConfigurerSupport.DEFAULT_VALUE_SEPARATOR, true);\n    }\n","realPath":"oap-server/server-library/library-util/src/test/java/org/apache/skywalking/oap/server/library/util/PropertyPlaceholderHelperTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2018-12-03 11:50:59","commitOrder":3,"curCode":"    private void loadConfig(ApplicationConfiguration configuration) throws ConfigFileNotFoundException {\n        try {\n            Reader applicationReader = ResourceUtils.read(\"application.yml\");\n            Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n            if (CollectionUtils.isNotEmpty(moduleConfig)) {\n                moduleConfig.forEach((moduleName, providerConfig) -> {\n                    if (providerConfig.size() > 0) {\n                        logger.info(\"Get a module define from application.yml, module name: {}\", moduleName);\n                        ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                        providerConfig.forEach((name, propertiesConfig) -> {\n                            logger.info(\"Get a provider define belong to {} module, provider name: {}\", moduleName, name);\n                            Properties properties = new Properties();\n                            if (propertiesConfig != null) {\n                                propertiesConfig.forEach((key, value) -> {\n                                    properties.put(key, value);\n                                    final Object replaceValue = yaml.load(PropertyPlaceholderHelper.INSTANCE\n                                        .replacePlaceholders(value + \"\", properties));\n                                    properties.replace(key, replaceValue);\n                                    logger.info(\"The property with key: {}, value: {}, in {} provider\", key, replaceValue.toString(), name);\n                                });\n                            }\n                            moduleConfiguration.addProviderConfiguration(name, properties);\n                        });\n                    } else {\n                        logger.warn(\"Get a module define from application.yml, but no provider define, use default, module name: {}\", moduleName);\n                    }\n                });\n            }\n        } catch (FileNotFoundException e) {\n            throw new ConfigFileNotFoundException(e.getMessage(), e);\n        }\n    }\n","date":"2018-12-03 11:50:59","endLine":86,"groupId":"6389","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadConfig","params":"(ApplicationConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fd/c2e7fe616ce1ba46a0652d7f1f1f4e0525de8d.src","preCode":"    private void loadConfig(ApplicationConfiguration configuration) throws ConfigFileNotFoundException {\n        try {\n            Reader applicationReader = ResourceUtils.read(\"application.yml\");\n            Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n            if (CollectionUtils.isNotEmpty(moduleConfig)) {\n                moduleConfig.forEach((moduleName, providerConfig) -> {\n                    if (providerConfig.size() > 0) {\n                        logger.info(\"Get a module define from application.yml, module name: {}\", moduleName);\n                        ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                        providerConfig.forEach((name, propertiesConfig) -> {\n                            logger.info(\"Get a provider define belong to {} module, provider name: {}\", moduleName, name);\n                            Properties properties = new Properties();\n                            if (propertiesConfig != null) {\n                                propertiesConfig.forEach((key, value) -> {\n                                    properties.put(key, value);\n                                    PropertyPlaceholderHelper helper =\n                                        new PropertyPlaceholderHelper(PlaceholderConfigurerSupport.DEFAULT_PLACEHOLDER_PREFIX,\n                                            PlaceholderConfigurerSupport.DEFAULT_PLACEHOLDER_SUFFIX,\n                                            PlaceholderConfigurerSupport.DEFAULT_VALUE_SEPARATOR, true);\n                                    final Object replaceValue = yaml.load(helper.replacePlaceholders(value + \"\", properties));\n                                    properties.replace(key, replaceValue);\n                                    logger.info(\"The property with key: {}, value: {}, in {} provider\", key, replaceValue.toString(), name);\n                                });\n                            }\n                            moduleConfiguration.addProviderConfiguration(name, properties);\n                        });\n                    } else {\n                        logger.warn(\"Get a module define from application.yml, but no provider define, use default, module name: {}\", moduleName);\n                    }\n                });\n            }\n        } catch (FileNotFoundException e) {\n            throw new ConfigFileNotFoundException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"dc393b1c1258e458bf2ac8edf79059cae6090f0f","commitMessage":"@@@refactoring PropertyPlaceholderHelper class. (#1989)\n\n","date":"2018-12-03 11:50:59","modifiedFileCount":"5","status":"M","submitter":"Jared.Tan"},{"authorTime":"2019-05-22 18:38:18","codes":[{"authorDate":"2018-12-03 11:50:59","commitOrder":4,"curCode":"    public void init() throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> properties.put(key, value));\n                        }\n                    });\n                }\n            });\n        }\n        placeholderHelper = PropertyPlaceholderHelper.INSTANCE;\n    }\n","date":"2018-12-03 11:50:59","endLine":66,"groupId":"4233","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bd/88be2d1af4e7a2f5c4ac4bcd6d8064a72343bd.src","preCode":"    public void init() throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> properties.put(key, value));\n                        }\n                    });\n                }\n            });\n        }\n        placeholderHelper = PropertyPlaceholderHelper.INSTANCE;\n    }\n","realPath":"oap-server/server-library/library-util/src/test/java/org/apache/skywalking/oap/server/library/util/PropertyPlaceholderHelperTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2019-05-22 18:38:18","commitOrder":4,"curCode":"    private void loadConfig(ApplicationConfiguration configuration) throws ConfigFileNotFoundException {\n        try {\n            Reader applicationReader = ResourceUtils.read(\"application.yml\");\n            Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n            if (CollectionUtils.isNotEmpty(moduleConfig)) {\n                moduleConfig.forEach((moduleName, providerConfig) -> {\n                    if (providerConfig.size() > 0) {\n                        logger.info(\"Get a module define from application.yml, module name: {}\", moduleName);\n                        ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                        providerConfig.forEach((name, propertiesConfig) -> {\n                            logger.info(\"Get a provider define belong to {} module, provider name: {}\", moduleName, name);\n                            Properties properties = new Properties();\n                            if (propertiesConfig != null) {\n                                propertiesConfig.forEach((key, value) -> {\n                                    properties.put(key, value);\n                                    final Object replaceValue = yaml.load(PropertyPlaceholderHelper.INSTANCE\n                                        .replacePlaceholders(value + \"\", properties));\n                                    if (replaceValue != null) {\n                                        properties.replace(key, replaceValue);\n                                    }\n                                    logger.info(\"The property with key: {}, value: {}, in {} provider\", key, replaceValue.toString(), name);\n                                });\n                            }\n                            moduleConfiguration.addProviderConfiguration(name, properties);\n                        });\n                    } else {\n                        logger.warn(\"Get a module define from application.yml, but no provider define, use default, module name: {}\", moduleName);\n                    }\n                });\n            }\n        } catch (FileNotFoundException e) {\n            throw new ConfigFileNotFoundException(e.getMessage(), e);\n        }\n    }\n","date":"2019-05-22 18:38:18","endLine":88,"groupId":"6389","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"loadConfig","params":"(ApplicationConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f8/908ea010f6704a0635356b55719272dfdf0e20.src","preCode":"    private void loadConfig(ApplicationConfiguration configuration) throws ConfigFileNotFoundException {\n        try {\n            Reader applicationReader = ResourceUtils.read(\"application.yml\");\n            Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n            if (CollectionUtils.isNotEmpty(moduleConfig)) {\n                moduleConfig.forEach((moduleName, providerConfig) -> {\n                    if (providerConfig.size() > 0) {\n                        logger.info(\"Get a module define from application.yml, module name: {}\", moduleName);\n                        ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                        providerConfig.forEach((name, propertiesConfig) -> {\n                            logger.info(\"Get a provider define belong to {} module, provider name: {}\", moduleName, name);\n                            Properties properties = new Properties();\n                            if (propertiesConfig != null) {\n                                propertiesConfig.forEach((key, value) -> {\n                                    properties.put(key, value);\n                                    final Object replaceValue = yaml.load(PropertyPlaceholderHelper.INSTANCE\n                                        .replacePlaceholders(value + \"\", properties));\n                                    properties.replace(key, replaceValue);\n                                    logger.info(\"The property with key: {}, value: {}, in {} provider\", key, replaceValue.toString(), name);\n                                });\n                            }\n                            moduleConfiguration.addProviderConfiguration(name, properties);\n                        });\n                    } else {\n                        logger.warn(\"Get a module define from application.yml, but no provider define, use default, module name: {}\", moduleName);\n                    }\n                });\n            }\n        } catch (FileNotFoundException e) {\n            throw new ConfigFileNotFoundException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"effe49a102e94d4473f49bdb5d29107631fd02b5","commitMessage":"@@@NPE fix (#2732)\n\n","date":"2019-05-22 18:38:18","modifiedFileCount":"1","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-10-12 20:47:38","codes":[{"authorDate":"2018-12-03 11:50:59","commitOrder":5,"curCode":"    public void init() throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> properties.put(key, value));\n                        }\n                    });\n                }\n            });\n        }\n        placeholderHelper = PropertyPlaceholderHelper.INSTANCE;\n    }\n","date":"2018-12-03 11:50:59","endLine":66,"groupId":"4233","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/bd/88be2d1af4e7a2f5c4ac4bcd6d8064a72343bd.src","preCode":"    public void init() throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> properties.put(key, value));\n                        }\n                    });\n                }\n            });\n        }\n        placeholderHelper = PropertyPlaceholderHelper.INSTANCE;\n    }\n","realPath":"oap-server/server-library/library-util/src/test/java/org/apache/skywalking/oap/server/library/util/PropertyPlaceholderHelperTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2019-10-12 20:47:38","commitOrder":5,"curCode":"    private void loadConfig(ApplicationConfiguration configuration) throws ConfigFileNotFoundException {\n        try {\n            Reader applicationReader = ResourceUtils.read(\"application.yml\");\n            Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n            if (CollectionUtils.isNotEmpty(moduleConfig)) {\n                moduleConfig.forEach((moduleName, providerConfig) -> {\n                    if (providerConfig.size() > 0) {\n                        logger.info(\"Get a module define from application.yml, module name: {}\", moduleName);\n                        ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                        providerConfig.forEach((providerName, propertiesConfig) -> {\n                            logger.info(\"Get a provider define belong to {} module, provider name: {}\", moduleName, providerName);\n                            Properties properties = new Properties();\n                            if (propertiesConfig != null) {\n                                propertiesConfig.forEach((propertyName, propertyValue) -> {\n                                    if (propertyValue instanceof Map) {\n                                        Properties subProperties = new Properties();\n                                        ((Map) propertyValue).forEach((key, value) -> {\n                                            subProperties.put(key, value);\n                                            replacePropertyAndLog(key, value, subProperties, providerName);\n                                        });\n                                        properties.put(propertyName, subProperties);\n                                    } else {\n                                        properties.put(propertyName, propertyValue);\n                                        replacePropertyAndLog(propertyName, propertyValue, properties, providerName);\n                                    }\n                                });\n                            }\n                            moduleConfiguration.addProviderConfiguration(providerName, properties);\n                        });\n                    } else {\n                        logger.warn(\"Get a module define from application.yml, but no provider define, use default, module name: {}\", moduleName);\n                    }\n                });\n            }\n        } catch (FileNotFoundException e) {\n            throw new ConfigFileNotFoundException(e.getMessage(), e);\n        }\n    }\n","date":"2019-10-12 20:47:38","endLine":93,"groupId":"6389","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"loadConfig","params":"(ApplicationConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/64/dc7cf0078ca2dd8e9210e31c70eb9fec929396.src","preCode":"    private void loadConfig(ApplicationConfiguration configuration) throws ConfigFileNotFoundException {\n        try {\n            Reader applicationReader = ResourceUtils.read(\"application.yml\");\n            Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n            if (CollectionUtils.isNotEmpty(moduleConfig)) {\n                moduleConfig.forEach((moduleName, providerConfig) -> {\n                    if (providerConfig.size() > 0) {\n                        logger.info(\"Get a module define from application.yml, module name: {}\", moduleName);\n                        ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                        providerConfig.forEach((name, propertiesConfig) -> {\n                            logger.info(\"Get a provider define belong to {} module, provider name: {}\", moduleName, name);\n                            Properties properties = new Properties();\n                            if (propertiesConfig != null) {\n                                propertiesConfig.forEach((key, value) -> {\n                                    properties.put(key, value);\n                                    final Object replaceValue = yaml.load(PropertyPlaceholderHelper.INSTANCE\n                                        .replacePlaceholders(value + \"\", properties));\n                                    if (replaceValue != null) {\n                                        properties.replace(key, replaceValue);\n                                    }\n                                    logger.info(\"The property with key: {}, value: {}, in {} provider\", key, replaceValue.toString(), name);\n                                });\n                            }\n                            moduleConfiguration.addProviderConfiguration(name, properties);\n                        });\n                    } else {\n                        logger.warn(\"Get a module define from application.yml, but no provider define, use default, module name: {}\", moduleName);\n                    }\n                });\n            }\n        } catch (FileNotFoundException e) {\n            throw new ConfigFileNotFoundException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"fb001867e58c926533db8661fa905abd1e18aa04","commitMessage":"@@@Instead of datasource-settings.properties.  use application.yml for MySQLStorageProvider (#3564)\n\n* Is it a typo or not?\n\n* delete datasource-settings.properties\n\n* handle 'metadataQueryMaxSize'\n\n* delete DynamicModuleConfig.java\n\n* modify mysql config\n\n* parsing yaml to support the configuration for multiple properties\n\n* delete datasource-settings.properties\n\n* modify doc\n\n* add properties for docker-entrypoint.sh\n\n* add testLoadConfig()\n","date":"2019-10-12 20:47:38","modifiedFileCount":"3","status":"M","submitter":"panjuan"},{"authorTime":"2019-10-12 20:47:38","codes":[{"authorDate":"2020-03-15 23:28:14","commitOrder":6,"curCode":"    public void init() throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Object>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                selectConfig(providerConfig);\n                if (providerConfig.size() > 0) {\n                    providerConfig.forEach((name, config) -> {\n                        final Map<String, ?> propertiesConfig = (Map<String, ?>) config;\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> properties.put(key, value));\n                        }\n                    });\n                }\n            });\n        }\n        placeholderHelper = PropertyPlaceholderHelper.INSTANCE;\n    }\n","date":"2020-03-15 23:28:14","endLine":65,"groupId":"5240","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/71/bff49be6fbfdfee3146d5bd746fd1c61607ecb.src","preCode":"    public void init() throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> properties.put(key, value));\n                        }\n                    });\n                }\n            });\n        }\n        placeholderHelper = PropertyPlaceholderHelper.INSTANCE;\n    }\n","realPath":"oap-server/server-library/library-util/src/test/java/org/apache/skywalking/oap/server/library/util/PropertyPlaceholderHelperTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2019-10-12 20:47:38","commitOrder":6,"curCode":"    private void loadConfig(ApplicationConfiguration configuration) throws ConfigFileNotFoundException {\n        try {\n            Reader applicationReader = ResourceUtils.read(\"application.yml\");\n            Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n            if (CollectionUtils.isNotEmpty(moduleConfig)) {\n                moduleConfig.forEach((moduleName, providerConfig) -> {\n                    if (providerConfig.size() > 0) {\n                        logger.info(\"Get a module define from application.yml, module name: {}\", moduleName);\n                        ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                        providerConfig.forEach((providerName, propertiesConfig) -> {\n                            logger.info(\"Get a provider define belong to {} module, provider name: {}\", moduleName, providerName);\n                            Properties properties = new Properties();\n                            if (propertiesConfig != null) {\n                                propertiesConfig.forEach((propertyName, propertyValue) -> {\n                                    if (propertyValue instanceof Map) {\n                                        Properties subProperties = new Properties();\n                                        ((Map) propertyValue).forEach((key, value) -> {\n                                            subProperties.put(key, value);\n                                            replacePropertyAndLog(key, value, subProperties, providerName);\n                                        });\n                                        properties.put(propertyName, subProperties);\n                                    } else {\n                                        properties.put(propertyName, propertyValue);\n                                        replacePropertyAndLog(propertyName, propertyValue, properties, providerName);\n                                    }\n                                });\n                            }\n                            moduleConfiguration.addProviderConfiguration(providerName, properties);\n                        });\n                    } else {\n                        logger.warn(\"Get a module define from application.yml, but no provider define, use default, module name: {}\", moduleName);\n                    }\n                });\n            }\n        } catch (FileNotFoundException e) {\n            throw new ConfigFileNotFoundException(e.getMessage(), e);\n        }\n    }\n","date":"2019-10-12 20:47:38","endLine":93,"groupId":"6389","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"loadConfig","params":"(ApplicationConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/64/dc7cf0078ca2dd8e9210e31c70eb9fec929396.src","preCode":"    private void loadConfig(ApplicationConfiguration configuration) throws ConfigFileNotFoundException {\n        try {\n            Reader applicationReader = ResourceUtils.read(\"application.yml\");\n            Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n            if (CollectionUtils.isNotEmpty(moduleConfig)) {\n                moduleConfig.forEach((moduleName, providerConfig) -> {\n                    if (providerConfig.size() > 0) {\n                        logger.info(\"Get a module define from application.yml, module name: {}\", moduleName);\n                        ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                        providerConfig.forEach((providerName, propertiesConfig) -> {\n                            logger.info(\"Get a provider define belong to {} module, provider name: {}\", moduleName, providerName);\n                            Properties properties = new Properties();\n                            if (propertiesConfig != null) {\n                                propertiesConfig.forEach((propertyName, propertyValue) -> {\n                                    if (propertyValue instanceof Map) {\n                                        Properties subProperties = new Properties();\n                                        ((Map) propertyValue).forEach((key, value) -> {\n                                            subProperties.put(key, value);\n                                            replacePropertyAndLog(key, value, subProperties, providerName);\n                                        });\n                                        properties.put(propertyName, subProperties);\n                                    } else {\n                                        properties.put(propertyName, propertyValue);\n                                        replacePropertyAndLog(propertyName, propertyValue, properties, providerName);\n                                    }\n                                });\n                            }\n                            moduleConfiguration.addProviderConfiguration(providerName, properties);\n                        });\n                    } else {\n                        logger.warn(\"Get a module define from application.yml, but no provider define, use default, module name: {}\", moduleName);\n                    }\n                });\n            }\n        } catch (FileNotFoundException e) {\n            throw new ConfigFileNotFoundException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"69e3d80e24b203bef4d86bfce2ef201a961373b0","commitMessage":"@@@Add selector property in application.yml (#4514)\n\n\n Motivation\n\n Ease the efforts of modifying configurations in automatic workflow and scripts.  like Docker and helm chart.\n\n \n Modification\n\n Add a `selector` property into `application.yml` to enable switching configuration simply by environment variables or system properties.  and filter the unselected options.  leaving only selected one.\n\n \n Result\n\n - We can switch a configuration by environment variables or system property\n\n - Closes #4511","date":"2020-03-15 23:28:14","modifiedFileCount":"6","status":"M","submitter":"kezhenxu94"},{"authorTime":"2021-09-06 15:21:35","codes":[{"authorDate":"2020-03-15 23:28:14","commitOrder":7,"curCode":"    public void init() throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Object>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                selectConfig(providerConfig);\n                if (providerConfig.size() > 0) {\n                    providerConfig.forEach((name, config) -> {\n                        final Map<String, ?> propertiesConfig = (Map<String, ?>) config;\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> properties.put(key, value));\n                        }\n                    });\n                }\n            });\n        }\n        placeholderHelper = PropertyPlaceholderHelper.INSTANCE;\n    }\n","date":"2020-03-15 23:28:14","endLine":65,"groupId":"10220","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/71/bff49be6fbfdfee3146d5bd746fd1c61607ecb.src","preCode":"    public void init() throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Object>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                selectConfig(providerConfig);\n                if (providerConfig.size() > 0) {\n                    providerConfig.forEach((name, config) -> {\n                        final Map<String, ?> propertiesConfig = (Map<String, ?>) config;\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> properties.put(key, value));\n                        }\n                    });\n                }\n            });\n        }\n        placeholderHelper = PropertyPlaceholderHelper.INSTANCE;\n    }\n","realPath":"oap-server/server-library/library-util/src/test/java/org/apache/skywalking/oap/server/library/util/PropertyPlaceholderHelperTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2021-09-06 15:21:35","commitOrder":7,"curCode":"    private void loadConfig(ApplicationConfiguration configuration) throws ConfigFileNotFoundException {\n        try {\n            Reader applicationReader = ResourceUtils.read(\"application.yml\");\n            Map<String, Map<String, Object>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n            if (CollectionUtils.isNotEmpty(moduleConfig)) {\n                selectConfig(moduleConfig);\n                moduleConfig.forEach((moduleName, providerConfig) -> {\n                    if (providerConfig.size() > 0) {\n                        log.info(\"Get a module define from application.yml, module name: {}\", moduleName);\n                        ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(\n                            moduleName);\n                        providerConfig.forEach((providerName, config) -> {\n                            log.info(\n                                \"Get a provider define belong to {} module, provider name: {}\", moduleName,\n                                providerName\n                            );\n                            final Map<String, ?> propertiesConfig = (Map<String, ?>) config;\n                            final Properties properties = new Properties();\n                            if (propertiesConfig != null) {\n                                propertiesConfig.forEach((propertyName, propertyValue) -> {\n                                    if (propertyValue instanceof Map) {\n                                        Properties subProperties = new Properties();\n                                        ((Map) propertyValue).forEach((key, value) -> {\n                                            subProperties.put(key, value);\n                                            replacePropertyAndLog(key, value, subProperties, providerName);\n                                        });\n                                        properties.put(propertyName, subProperties);\n                                    } else {\n                                        properties.put(propertyName, propertyValue);\n                                        replacePropertyAndLog(propertyName, propertyValue, properties, providerName);\n                                    }\n                                });\n                            }\n                            moduleConfiguration.addProviderConfiguration(providerName, properties);\n                        });\n                    } else {\n                        log.warn(\n                            \"Get a module define from application.yml, but no provider define, use default, module name: {}\",\n                            moduleName\n                        );\n                    }\n                });\n            }\n        } catch (FileNotFoundException e) {\n            throw new ConfigFileNotFoundException(e.getMessage(), e);\n        }\n    }\n","date":"2021-09-06 15:21:35","endLine":102,"groupId":"10220","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"loadConfig","params":"(ApplicationConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8b/b299351af5cdb4da8dd2e5c20ed8eb0b8b34ba.src","preCode":"    private void loadConfig(ApplicationConfiguration configuration) throws ConfigFileNotFoundException {\n        try {\n            Reader applicationReader = ResourceUtils.read(\"application.yml\");\n            Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n            if (CollectionUtils.isNotEmpty(moduleConfig)) {\n                moduleConfig.forEach((moduleName, providerConfig) -> {\n                    if (providerConfig.size() > 0) {\n                        logger.info(\"Get a module define from application.yml, module name: {}\", moduleName);\n                        ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                        providerConfig.forEach((providerName, propertiesConfig) -> {\n                            logger.info(\"Get a provider define belong to {} module, provider name: {}\", moduleName, providerName);\n                            Properties properties = new Properties();\n                            if (propertiesConfig != null) {\n                                propertiesConfig.forEach((propertyName, propertyValue) -> {\n                                    if (propertyValue instanceof Map) {\n                                        Properties subProperties = new Properties();\n                                        ((Map) propertyValue).forEach((key, value) -> {\n                                            subProperties.put(key, value);\n                                            replacePropertyAndLog(key, value, subProperties, providerName);\n                                        });\n                                        properties.put(propertyName, subProperties);\n                                    } else {\n                                        properties.put(propertyName, propertyValue);\n                                        replacePropertyAndLog(propertyName, propertyValue, properties, providerName);\n                                    }\n                                });\n                            }\n                            moduleConfiguration.addProviderConfiguration(providerName, properties);\n                        });\n                    } else {\n                        logger.warn(\"Get a module define from application.yml, but no provider define, use default, module name: {}\", moduleName);\n                    }\n                });\n            }\n        } catch (FileNotFoundException e) {\n            throw new ConfigFileNotFoundException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-starter/src/main/java/org/apache/skywalking/oap/server/starter/config/ApplicationConfigLoader.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"26b81a2e5991ecdd2bde0f7071264cb80bb235cf","commitMessage":"@@@Rebuilt ElasticSearch client on top of their REST API (#7634)\n\n","date":"2021-09-06 15:21:35","modifiedFileCount":"60","status":"M","submitter":"kezhenxu94"}]
