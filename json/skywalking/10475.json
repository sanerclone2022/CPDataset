[{"authorTime":"2019-05-15 22:42:38","codes":[{"authorDate":"2019-05-15 22:42:38","commitOrder":1,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, stream.name(), 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-05-15 22:42:38","endLine":63,"groupId":"4736","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/67/0ef931f99bd9e4e405b966d11db3031bae49f0.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, stream.name(), 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2019-05-15 22:42:38","commitOrder":1,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, stream.name());\n        MetricsPersistentWorker hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, stream.name() + Const.ID_SPLIT + Downsampling.Hour.getName());\n        MetricsPersistentWorker dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, stream.name() + Const.ID_SPLIT + Downsampling.Day.getName());\n        MetricsPersistentWorker monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, stream.name() + Const.ID_SPLIT + Downsampling.Month.getName());\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2019-05-15 22:42:38","endLine":73,"groupId":"4736","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/df/224d3a1a50454743d6d3a8405d48bc0eda78c0.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, stream.name());\n        MetricsPersistentWorker hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, stream.name() + Const.ID_SPLIT + Downsampling.Hour.getName());\n        MetricsPersistentWorker dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, stream.name() + Const.ID_SPLIT + Downsampling.Day.getName());\n        MetricsPersistentWorker monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, stream.name() + Const.ID_SPLIT + Downsampling.Month.getName());\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"}],"commitId":"63fb961c0d1de02f053045c3bf80361ebd7bd58d","commitMessage":"@@@New OAP annotations.  they are friendly for streaming loader. (#2670)\n\n* New stream annotation.\n- Inventory annotation example:\n@Stream(name = ServiceInventory.INDEX_NAME.  scopeId = DefaultScopeDefine.SERVICE_INVENTORY.  storage = @Storage(builder = ServiceInventory.Builder.class.  deleteHistory = false).  kind = StreamKind.Inventory)\n\n- Metrics annotation example:\n@Stream(name = ServiceRelationClientSideMetrics.INDEX_NAME.  scopeId = DefaultScopeDefine.SERVICE_RELATION.  storage = @Storage(builder = ServiceRelationClientSideMetrics.Builder.class).  kind = StreamKind.Metrics)\n\n- Record annotation example:\n@Stream(name = SegmentRecord.INDEX_NAME.  scopeId = DefaultScopeDefine.SEGMENT.  storage = @Storage(builder = SegmentRecord.Builder.class).  kind = StreamKind.Record)\n\n- TopN annotation example:\n@Stream(name = TopNDatabaseStatement.INDEX_NAME.  scopeId = DefaultScopeDefine.DATABASE_SLOW_STATEMENT.  storage = @Storage(builder = TopNDatabaseStatement.Builder.class).  kind = StreamKind.TopN)\n\n* no message\n\n* Stream annotation finish.\n\n* Make stream processors to be the singleton class.\n\n* Fixed the compile errors.\n\n* Modify the OAL module for this annotation refactor.\n\n* Add apache license header.\n\n* Duplicate import.\n\n* Fixed check style error.\n","date":"2019-05-15 22:42:38","modifiedFileCount":"55","status":"B","submitter":"??? pengys"},{"authorTime":"2019-05-17 00:33:29","codes":[{"authorDate":"2019-05-17 00:33:29","commitOrder":2,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.name(), stream.scopeId(), stream.storage());\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model.getName(), 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-05-17 00:33:29","endLine":68,"groupId":"73","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/4b/a101d070a1dc5dbe856be72b55b933b68335dd.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, stream.name(), 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2019-05-17 00:33:29","commitOrder":2,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Hour);\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model.getName());\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Day);\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model.getName());\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Month);\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model.getName());\n        }\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Minute);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model.getName());\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2019-05-17 00:33:29","endLine":93,"groupId":"73","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b8/8c08108dadf40f639d55a6cca475e2c8e392c6.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, stream.name());\n        MetricsPersistentWorker hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, stream.name() + Const.ID_SPLIT + Downsampling.Hour.getName());\n        MetricsPersistentWorker dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, stream.name() + Const.ID_SPLIT + Downsampling.Day.getName());\n        MetricsPersistentWorker monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, stream.name() + Const.ID_SPLIT + Downsampling.Month.getName());\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"4eb5def126fcd0c0d0f04a47201341a25668c1a4","commitMessage":"@@@Manage models in one place. (#2695)\n\n","date":"2019-05-17 00:33:29","modifiedFileCount":"11","status":"M","submitter":"??? pengys"},{"authorTime":"2019-06-03 18:46:42","codes":[{"authorDate":"2019-06-03 18:46:42","commitOrder":3,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Minute);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-06-03 18:46:42","endLine":68,"groupId":"73","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e3/c648c6692b8b77d339a3f3276a1185c4222f88.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.name(), stream.scopeId(), stream.storage());\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model.getName(), 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2019-06-03 18:46:42","commitOrder":3,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Hour);\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Day);\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Month);\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Minute);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model);\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2019-06-03 18:46:42","endLine":93,"groupId":"73","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9f/9499d355f35ae238e94f6992f8f4069796c963.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Hour);\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model.getName());\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Day);\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model.getName());\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Month);\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model.getName());\n        }\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Minute);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model.getName());\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"5036e8334301322d49973005cd98513c17b0f28f","commitMessage":"@@@Good news of an important feature: time series implementation in Elasticsearch storage. (#2808)\n\n* The new feature of Elasticsearch storage with the time series implementation.\n\n* Time bucket util improve.\n\n* Fixed some Gramma error.\n\n* Update ttl.md\n\nPolish English a little.\n\n* Update ttl.md\n\nAdd more explicit description of TTL\n\n* Update ttl.md\n\n* Update StorageModuleElasticsearchConfig.java\n\nSet otherMetricsDataTTL = 0 as default.  make user more clear.\n\n* Rename the timeSeriesAble to capableOfTimeSeries\n\n* Fixed a test case failure.\n","date":"2019-06-03 18:46:42","modifiedFileCount":"46","status":"M","submitter":"??? pengys"},{"authorTime":"2019-06-04 09:53:50","codes":[{"authorDate":"2019-06-04 09:53:50","commitOrder":4,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute));\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-06-04 09:53:50","endLine":69,"groupId":"6438","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/92/a88a495150a169d77cec96c74a6490ad421ede.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Minute);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-06-04 09:53:50","commitOrder":4,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour));\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day));\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month));\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute));\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model);\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2019-06-04 09:53:50","endLine":94,"groupId":"6438","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e2/505068e7746ac20fc57bab77921f1050819dee.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.storage().builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.storage().builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Hour);\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Day);\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Month);\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.name(), stream.scopeId(), stream.storage(), Downsampling.Minute);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model);\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"1f7125a02edc8e5090a661ea18c876b7c1c4d891","commitMessage":"@@@Remove storage annotation. (#2813)\n\n","date":"2019-06-04 09:53:50","modifiedFileCount":"22","status":"M","submitter":"??? pengys"},{"authorTime":"2019-06-04 09:53:50","codes":[{"authorDate":"2019-06-12 08:17:15","commitOrder":5,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second));\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-06-12 08:17:15","endLine":69,"groupId":"6438","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/03/ae693ef5cf3401bd726eb7ba031f77853f79ac.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute));\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-06-04 09:53:50","commitOrder":5,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour));\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day));\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month));\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute));\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model);\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2019-06-04 09:53:50","endLine":94,"groupId":"6438","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e2/505068e7746ac20fc57bab77921f1050819dee.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour));\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day));\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month));\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute));\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model);\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"}],"commitId":"1c545a3708d2e382519741c6d6df5666e4cb4775","commitMessage":"@@@Fixed a time series bug about downsampling setting in processors are different from the setting in receivers. (#2856)\n\n#2851","date":"2019-06-12 08:17:15","modifiedFileCount":"3","status":"M","submitter":"??? pengys"},{"authorTime":"2019-06-14 11:31:51","codes":[{"authorDate":"2019-06-12 08:17:15","commitOrder":6,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second));\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-06-12 08:17:15","endLine":69,"groupId":"6438","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/03/ae693ef5cf3401bd726eb7ba031f77853f79ac.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second));\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2019-06-14 11:31:51","commitOrder":6,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        StreamDataMappingSetter streamDataMappingSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(StreamDataMappingSetter.class);\n        streamDataMappingSetter.putIfAbsent(metricsClass);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour));\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day));\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month));\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute));\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model);\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2019-06-14 11:31:51","endLine":98,"groupId":"0","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/20/d09bf7f972bac3b79588f30f750b904fca163b.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour));\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day));\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month));\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute));\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model);\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"0103d8ad2892f888cb55a01a7efd39a44a22726f","commitMessage":"@@@Fix no stream register. (#2873)\n\n* Fix no stream register.\n\n* Make sure list order.\n\n* Refactor codes.\n\n* Fix wrong revert.\n","date":"2019-06-14 11:31:51","modifiedFileCount":"4","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-07-20 22:59:52","codes":[{"authorDate":"2019-07-20 22:59:52","commitOrder":7,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-07-20 22:59:52","endLine":69,"groupId":"6438","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fc/b3a68808abcbeda3d833d121973004c48342df.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second));\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-07-20 22:59:52","commitOrder":7,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        StreamDataMappingSetter streamDataMappingSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(StreamDataMappingSetter.class);\n        streamDataMappingSetter.putIfAbsent(metricsClass);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour), false);\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day), false);\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month), false);\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model);\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2019-07-20 22:59:52","endLine":98,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/df/d4b20be8aefb3ee087cccbca40650a5e3a79d3.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        StreamDataMappingSetter streamDataMappingSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(StreamDataMappingSetter.class);\n        streamDataMappingSetter.putIfAbsent(metricsClass);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour));\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day));\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month));\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute));\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model);\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"6338de392fe988e4bf46e8a6c5aadb92b946ddab","commitMessage":"@@@Improve OAP server performance. (#3127)\n\n* Improve OAP server performance.","date":"2019-07-20 22:59:52","modifiedFileCount":"23","status":"M","submitter":"??? pengys"},{"authorTime":"2019-07-20 23:47:17","codes":[{"authorDate":"2019-07-20 22:59:52","commitOrder":8,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-07-20 22:59:52","endLine":69,"groupId":"6438","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fc/b3a68808abcbeda3d833d121973004c48342df.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2019-07-20 23:47:17","commitOrder":8,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour), false);\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day), false);\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month), false);\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model);\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n\n        String remoteReceiverWorkerName = stream.name() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, transWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2019-07-20 23:47:17","endLine":110,"groupId":"6355","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/78/d03986a9048eb5c124615d3d6aab9d450e4e3d.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        StreamDataMappingSetter streamDataMappingSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(StreamDataMappingSetter.class);\n        streamDataMappingSetter.putIfAbsent(metricsClass);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour), false);\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day), false);\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month), false);\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model);\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, transWorker, stream.name());\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"d256fc348e727549cebf6d4f42ba88458ab771ab","commitMessage":"@@@OAP internal RemoteService protocol change and code refactor (#3128)\n\n* Remove the worker id.  and add worker name for remote handler only.\n\n* Remote metrics and inventory classes mapping too.\n\n* Refactor codes.\n","date":"2019-07-20 23:47:17","modifiedFileCount":"24","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-07-24 18:18:20","codes":[{"authorDate":"2019-07-20 22:59:52","commitOrder":9,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-07-20 22:59:52","endLine":69,"groupId":"6438","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fc/b3a68808abcbeda3d833d121973004c48342df.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2019-07-24 18:18:20","commitOrder":9,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour), false);\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day), false);\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month), false);\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model, transWorker);\n\n        String remoteReceiverWorkerName = stream.name() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2019-07-24 18:18:20","endLine":102,"groupId":"6355","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5d/a8a3e57a7f38558b45439c53f13ad6c4541c87.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour), false);\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day), false);\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month), false);\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model);\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), minutePersistentWorker, hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n\n        String remoteReceiverWorkerName = stream.name() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, transWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"8605f4ccc05f13ef466515f2c551c59907b22fab","commitMessage":"@@@Change the metrics process flow. (#3157)\n\n* Feature of database session\n\n* Make it configurable.\n\n* Change the metrics process flow.\nbefore: metrics entrance -> aggregate worker -> remote worker -> trans worker -> minute.  hour.  day.  month persistence worker -> storage\nafter: metrics entrance -> aggregate worker -> remote worker -> minute persistence worker ->  trans worker -> hour.  day.  month persistence worker -> storage\n","date":"2019-07-24 18:18:20","modifiedFileCount":"3","status":"M","submitter":"??? pengys"},{"authorTime":"2019-07-24 18:18:20","codes":[{"authorDate":"2019-11-19 17:26:30","commitOrder":10,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-11-19 17:26:30","endLine":72,"groupId":"6438","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/72/65d73a31a6058a9e7607f636565b50a1bf7a8a.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, 50, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2019-07-24 18:18:20","commitOrder":10,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour), false);\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day), false);\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month), false);\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model, transWorker);\n\n        String remoteReceiverWorkerName = stream.name() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2019-07-24 18:18:20","endLine":102,"groupId":"6355","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5d/a8a3e57a7f38558b45439c53f13ad6c4541c87.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME).provider().getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour), false);\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day), false);\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month), false);\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(moduleDefineHolder, stream.name(), hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n\n        Model model = modelSetter.putIfAbsent(metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(moduleDefineHolder, metricsDAO, model, transWorker);\n\n        String remoteReceiverWorkerName = stream.name() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"5d064ced5f820a51dcc000341858ebe3b4416da5","commitMessage":"@@@make topN worker report period configurable. (#3892)\n\n","date":"2019-11-19 17:26:30","modifiedFileCount":"4","status":"M","submitter":"Jared Tan"},{"authorTime":"2020-03-28 22:51:41","codes":[{"authorDate":"2019-11-19 17:26:30","commitOrder":11,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2019-11-19 17:26:30","endLine":72,"groupId":"6438","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/72/65d73a31a6058a9e7607f636565b50a1bf7a8a.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2020-03-28 22:51:41","commitOrder":11,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n        if (stream.supportDownSampling()) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.putIfAbsent(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour), false);\n                hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.putIfAbsent(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day), false);\n                dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n            }\n            if (configService.shouldToMonth()) {\n                Model model = modelSetter.putIfAbsent(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month), false);\n                monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n            }\n            \n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, stream.name(), hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        }\n\n        Model model = modelSetter.putIfAbsent(\n            metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker);\n\n        String remoteReceiverWorkerName = stream.name() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2020-03-28 22:51:41","endLine":154,"groupId":"0","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6f/4f6084c9dab69f2f272414fcb5a43fa264f821.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        if (configService.shouldToHour()) {\n            Model model = modelSetter.putIfAbsent(\n                metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour), false);\n            hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToDay()) {\n            Model model = modelSetter.putIfAbsent(\n                metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day), false);\n            dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n        if (configService.shouldToMonth()) {\n            Model model = modelSetter.putIfAbsent(\n                metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month), false);\n            monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n        }\n\n        MetricsTransWorker transWorker = new MetricsTransWorker(\n            moduleDefineHolder, stream.name(), hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n\n        Model model = modelSetter.putIfAbsent(\n            metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker);\n\n        String remoteReceiverWorkerName = stream.name() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"4474907fef809e2342b644a324da011834a55420","commitMessage":"@@@[Inventory Design Change] Remove endpoint register and endpoint inventory (#4570)\n\n* Finish step one.  source and entity changed.\n\n* Step 2.  finish the basic and core DAO changes.\n\n* Step 3. Change all source codes of backend.  and make project compiling successfully.\n\n* Make startup successful and persistence works.\n\n* Fix dead codes in the MySQLTableInstaller.\n\n* Fix mischange.\n\n* Fix MySQL storage bootstrap error.\n\n* Rollback dependency change.\n\n* Simply enable tailing logs from container no mater it's in CI or not\n\n* Fix segment table issue.\n\n* Fix MySQL Instanller.\n\n* Support Influxdb implementation of new endpoint traffic.\n\n* Set and modify timeout to 90mins\n\n* Remove unnecessary entity in the EndpointTraffic.\n\n* Fix wrong entity builder and make name more clear.\n\n* Fix 2 equal methods bug.\n\n* Fix InfluxDB identifier(name) conflict issue.\n\n* Fix endpoint topology query.  endpoint id should be changed as a string.\n\n* Fix a missing change.\n\n* Fix a wrong commit.\n\n* Column name can't be changed.  due to it affect the hybrid metadb(h2/mysql) query.  change it explicitly with double quotation marks.\n\n* Fix formats.\n\n* Remove endpoint/operation register from the agent. and change the plugin tests(without local tests). operationId relation codes have been removed from agent too.\n\n* Try to fix the hytrix case.\n\n* Fix 3 cases.\n\n* Try to fix cases.\n\n* Fix 2.\n\n* Fix one.\n\n* Fix the serviceId type mis-change.\n\n* Fix int query\n\n* Fix hystrix case.\n\n* Fix a case.\n\n* Fix EndpointCallRelationDispatcher set the source/dest endpoint without id encoding.\n\n* Update documentation and add 2 test cases.\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>","date":"2020-03-28 22:51:41","modifiedFileCount":"121","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-03-30 18:56:26","codes":[{"authorDate":"2020-03-30 18:56:26","commitOrder":12,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        Model model = modelSetter.add(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2020-03-30 18:56:26","endLine":86,"groupId":"3050","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/97/cffb5ed231a40d2fe988544e2aeaf68cd6b18d.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        Model model = modelSetter.putIfAbsent(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-03-30 18:56:26","commitOrder":12,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToMonth()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month), false);\n                monthPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, stream.name(), hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.name() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2020-03-30 18:56:26","endLine":166,"groupId":"0","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e9/d5a9a0ac84bb780b13d14a38ba11c2fdc82f13.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        IModelSetter modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(IModelSetter.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n        if (stream.supportDownSampling()) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.putIfAbsent(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour), false);\n                hourPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.putIfAbsent(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day), false);\n                dayPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n            }\n            if (configService.shouldToMonth()) {\n                Model model = modelSetter.putIfAbsent(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month), false);\n                monthPersistentWorker = worker(moduleDefineHolder, metricsDAO, model);\n            }\n            \n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, stream.name(), hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        }\n\n        Model model = modelSetter.putIfAbsent(\n            metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker);\n\n        String remoteReceiverWorkerName = stream.name() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"e55073e51970ecb50d014094e4e9b8dcc7d8c0d9","commitMessage":"@@@OAP Core polish.  especially storage level (#4587)\n\n- Add length definition with reasonable default value.\n- #content of @Column has been renamed to storageOnly . I add this to many fields as they are not being query in any case.\n- Merge H2 and MySQL columntype mapping back to consistent.\n- Remove @IDColumn.\n- Support @QueryUnifiedIndex.\n- Refactor the MySQL and H2 installers to use @Column and @QueryUnifiedIndex definitions to create indices automatically. But the index naming rule has been changed to entityseqIDX. seq is the Increment Interger for every entity.\n- Support @MetricsExtension and insertOnly in the MetricsPersistentWorker worker.\n- Optimize MetricsStreamProcessor","date":"2020-03-30 18:56:26","modifiedFileCount":"58","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":13,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2020-04-10 11:03:24","endLine":88,"groupId":"3050","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e8/900d5ba4ad0fc0f5dc1454607980c45ea9dab5.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        Model model = modelSetter.add(topNClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":13,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, stream.name(), hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.name() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2020-04-10 11:03:24","endLine":160,"groupId":"1459","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c6/ac3b079a11b63fab6c0d7697cfbe60f2f973a8.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        DownsamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownsamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n        MetricsPersistentWorker monthPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToMonth()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Month), false);\n                monthPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, stream.name(), hourPersistentWorker, dayPersistentWorker, monthPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.scopeId(), new Storage(stream.name(), true, true, Downsampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.name() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-24 23:33:13","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":14,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2020-04-10 11:03:24","endLine":88,"groupId":"3050","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e8/900d5ba4ad0fc0f5dc1454607980c45ea9dab5.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2020-04-24 23:33:13","commitOrder":14,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.getName())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.getBuilder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, stream.getName(), hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2020-04-24 23:33:13","endLine":167,"groupId":"1459","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@StreamDefinitionstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/54/52cb2965bebc6c7c438606a04b22dca6274fc6.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, stream.name(), hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.name() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.name());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"b635e254c4b327aca22469d0551c9b3a63d991b9","commitMessage":"@@@Provide Meter(metrics) system  (#4694)\n\nHere are the basic and simple usages of the MeterSystem APIs.\n\n## Meter Creation\nNew meter could be created based on metrics name.  function.  scope and data type. \n1. Metrics name is still the storage entity name.\n2. Functions are every similar with the OAL function.  just accepting different input.\n```java\nfinal MeterSystem meterSystem = MeterSystem.meterSystem(getManager());\nmeterSystem.create(\"test_long_metrics\".  \"avg\".  ScopeType.SERVICE.  Long.class);\n```\nNOTICE.  this creation should only be called in the `module#prepare` stage.  otherwise.  `Can't create new metrics anymore` exception will be raised after the **CORE** module `start` stage finished. You may find out.  there is a chance `create` could be executed successfully in your own `module#start` stage.  but it it just because of the sequence of provider loaded by the class loader.  **no guarantee.  so please don't do that**.\n\n## Runtime Calculation\n`AcceptableValue` is the object created at the runtime to accept new metrics value.\n```java\n         final MeterSystem service = getManager().find(CoreModule.NAME).provider().getService(MeterSystem.class);\n        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                final AcceptableValue<Long> value = service.buildMetrics(\"test_long_metrics\".  Long.class);\n                value.accept(MeterEntity.newService(\"abc\").  5L);\n                value.setTimeBucket(TimeBucket.getMinuteTimeBucket(System.currentTimeMillis()));\n                service.doStreamingCalculation(value);\n            }\n        }.  2.  2.  TimeUnit.SECONDS);\n```\n\n## Meter Functions\nRight now.  only `avg` function has been implemented. I submit this PR as soon as possible to get your feedback. I will add more functions.\n\n## Notice\n1. Make slow trace query available in the sampled record. Logically.  they are the same thing. The UI doesn't need to concern about the trace as a special case.\n2. Endpoint dependency will be removed from the dashboard. Because no query available for it. We will provide a new page for that in 8.1\n3. Comparison page will be removed due to dashboard is powerful enough to replace it.","date":"2020-04-24 23:33:13","modifiedFileCount":"10","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-05-08 21:21:03","codes":[{"authorDate":"2020-05-08 21:21:03","commitOrder":15,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2020-05-08 21:21:03","endLine":89,"groupId":"2790","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8c/fc99fa9946bf8f96383b9db608f699909efc02.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-05-08 21:21:03","commitOrder":15,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.getName())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.getBuilder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, stream.getName(), hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2020-05-08 21:21:03","endLine":168,"groupId":"1459","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@StreamDefinitionstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a9/b49b275098684c68752c6d75bbfd57f46404fc.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) {\n        if (DisableRegister.INSTANCE.include(stream.getName())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.getBuilder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        INewModel modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(INewModel.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, stream.getName(), hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"7edcd5aa33cec034047871ac1348b5b858b630f0","commitMessage":"@@@Change the model installation into the reactive module (#4761)\n\n","date":"2020-05-08 21:21:03","modifiedFileCount":"31","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-07-06 13:03:36","codes":[{"authorDate":"2020-05-08 21:21:03","commitOrder":16,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2020-05-08 21:21:03","endLine":89,"groupId":"2790","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8c/fc99fa9946bf8f96383b9db608f699909efc02.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"},{"authorDate":"2020-07-06 13:03:36","commitOrder":16,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.getName())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.getBuilder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2020-07-06 13:03:36","endLine":168,"groupId":"1762","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@StreamDefinitionstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e9/8b776da013a21a8a310e5b8744b6cbf82e1f95.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.getName())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.getBuilder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, stream.getName(), hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"a3ae7b4dc60db8f665847fbbd10bf230431df12c","commitMessage":"@@@Fix no data bug of oap self observability instance_metrics_second_aggregation metrics. (#5028)\n\n","date":"2020-07-06 13:03:36","modifiedFileCount":"4","status":"M","submitter":"Ax1an"},{"authorTime":"2021-02-07 10:37:14","codes":[{"authorDate":"2021-02-07 10:37:14","commitOrder":17,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(topNClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\n                \"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2021-02-07 10:37:14","endLine":93,"groupId":"1762","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5a/0c6a4793d28fa777e93d0c66fd5460b8a766c2.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                                                            .getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2021-02-07 10:37:14","commitOrder":17,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(metricsClass, stream.getBuilder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2021-02-07 10:37:14","endLine":173,"groupId":"1762","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@StreamDefinitionstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9d/8faf7ed95d9fbe0ef98eed1ca09fcd4f6ee3bb.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.getName())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.getBuilder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"5e8f1eb5528911f924ffca451af20dcdf6151971","commitMessage":"@@@Support multiple implementations of StorageBuilder in different storage implementations - stage 2 (#6336)\n\n","date":"2021-02-07 10:37:14","modifiedFileCount":"16","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-06-30 19:14:20","codes":[{"authorDate":"2021-02-07 10:37:14","commitOrder":18,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(topNClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\n                \"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2021-02-07 10:37:14","endLine":93,"groupId":"1762","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5a/0c6a4793d28fa777e93d0c66fd5460b8a766c2.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(topNClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\n                \"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"},{"authorDate":"2021-06-30 19:14:20","commitOrder":18,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(\n            metricsClass, stream.getBuilder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName(), l1FlushPeriod);\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2021-06-30 19:14:20","endLine":182,"groupId":"1762","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@StreamDefinitionstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3a/407771a94203a51687608f1f744d2720687fcd.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(metricsClass, stream.getBuilder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"50a0bcbf7395c49029759a8cb1208271405cdcc4","commitMessage":"@@@Optimize L1 aggregation.  enhance gRPC client between L1 and L2 aggregation. (#7206)\n\n1.0Performance: Add L1 aggregation flush period.  which reduces the CPU load and helps young GC.\n\n2. Replace do not direct send after the first aggregation to reduce the network #6400.\n\n3. Enhance the DataCarrier to notify the consumer in no enqueue event in short term.\n\n4. L1 aggregation flush period still works even no further metrics generated.  powered by <3>\n\n5. Fix gRPC remote client OOM. The concurrency control mechanism failed.","date":"2021-06-30 19:14:20","modifiedFileCount":"8","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-07-15 18:06:11","codes":[{"authorDate":"2021-07-15 18:06:11","commitOrder":19,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       Stream stream,\n                       Class<? extends TopN> topNClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(topNClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\n                \"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        \r\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), false, DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","date":"2021-07-15 18:06:11","endLine":96,"groupId":"10475","id":37,"instanceNumber":1,"isCurCommit":1,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@Streamstream@Class<?extendsTopN>topNClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/26/a8b373b9121f07656ca0893709cfef695d0130.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder, Stream stream, Class<? extends TopN> topNClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(topNClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IRecordDAO recordDAO;\n        try {\n            recordDAO = storageDAO.newRecordDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\n                \"Create \" + stream.builder().getSimpleName() + \" top n record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(\n            topNClass, stream.scopeId(), new Storage(stream.name(), DownSampling.Second), true);\n\n        TopNWorker persistentWorker = new TopNWorker(\n            moduleDefineHolder, model, topSize, topNWorkerReportCycle * 60 * 1000L, recordDAO);\n        persistentWorkers.add(persistentWorker);\n        workers.put(topNClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/TopNStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2021-07-15 18:06:11","commitOrder":19,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(\n            metricsClass, stream.getBuilder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        boolean timeRelativeID = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n            timeRelativeID = metricsExtension.timeRelativeID();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), timeRelativeID, DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), timeRelativeID, DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), timeRelativeID, DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName(), l1FlushPeriod);\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2021-07-15 18:06:11","endLine":189,"groupId":"10475","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@StreamDefinitionstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6c/323f4744ea06d8a5e28dce43d705c9b822bb5f.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(\n            metricsClass, stream.getBuilder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName(), l1FlushPeriod);\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"c59ee900299d24d15780c0b1600c823c3ea111eb","commitMessage":"@@@Performance: optimize IDs read of ElasticSearch storage options(6 and 7) (#7307)\n\n* Performance: optimize IDs read of ElasticSearch storage options(6 and 7). Use the physical index rather than template alias name.","date":"2021-07-15 18:06:11","modifiedFileCount":"15","status":"M","submitter":"?? Wu Sheng"}]
