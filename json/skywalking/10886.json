[{"authorTime":"2018-11-21 22:33:04","codes":[{"authorDate":"2019-03-20 20:53:42","commitOrder":2,"curCode":"    @Override public void collect(CLRMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the clr metric from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metric -> {\n            long minuteTimeBucket = TimeBucketUtils.INSTANCE.getMinuteTimeBucket(metric.getTime());\n            clrSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metric);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2019-03-20 20:53:42","endLine":58,"groupId":"4610","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"collect","params":"(CLRMetricCollectionrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/da/7f66d0ba242d4deb0e7962b50eaa8bbab4c2ea.src","preCode":"    @Override public void collect(CLRMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the clr metric from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metric -> {\n            long minuteTimeBucket = TimeBucketUtils.INSTANCE.getMinuteTimeBucket(metric.getTime());\n            clrSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metric);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-clr-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/clr/provider/handler/CLRMetricReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2018-11-21 22:33:04","commitOrder":2,"curCode":"    @Override public void collect(JVMMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the jvm metric from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metric -> {\n            long minuteTimeBucket = TimeBucketUtils.INSTANCE.getMinuteTimeBucket(metric.getTime());\n            jvmSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metric);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2018-11-21 22:33:04","endLine":57,"groupId":"4610","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"collect","params":"(JVMMetricCollectionrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b4/852fd65d86ae66162683cf534bc707d3804780.src","preCode":"    @Override public void collect(JVMMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the jvm metric from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metric -> {\n            long minuteTimeBucket = TimeBucketUtils.INSTANCE.getMinuteTimeBucket(metric.getTime());\n            jvmSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metric);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-jvm-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/jvm/provider/handler/JVMMetricReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"NB"}],"commitId":"7047c97e8befa997ea2b2b7d4a4fc19e35042068","commitMessage":"@@@Add CLR_Receiver plugin (#2385)\n\n","date":"2019-03-20 20:53:42","modifiedFileCount":"1","status":"M","submitter":"Lemon"},{"authorTime":"2019-05-10 08:05:37","codes":[{"authorDate":"2019-05-10 08:05:37","commitOrder":3,"curCode":"    @Override public void collect(CLRMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the clr metrics from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucketUtils.INSTANCE.getMinuteTimeBucket(metrics.getTime());\n            clrSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2019-05-10 08:05:37","endLine":58,"groupId":"4995","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"collect","params":"(CLRMetricCollectionrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/65/f80e14b80d0d545702f01837c14f824966fb63.src","preCode":"    @Override public void collect(CLRMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the clr metric from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metric -> {\n            long minuteTimeBucket = TimeBucketUtils.INSTANCE.getMinuteTimeBucket(metric.getTime());\n            clrSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metric);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-clr-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/clr/provider/handler/CLRMetricReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2019-05-10 08:05:37","commitOrder":3,"curCode":"    @Override public void collect(JVMMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the jvm metrics from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucketUtils.INSTANCE.getMinuteTimeBucket(metrics.getTime());\n            jvmSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2019-05-10 08:05:37","endLine":53,"groupId":"4995","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"collect","params":"(JVMMetricCollectionrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1f/c642a47572ecb8be73c900b3f086b5f2bfaa5d.src","preCode":"    @Override public void collect(JVMMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the jvm metric from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metric -> {\n            long minuteTimeBucket = TimeBucketUtils.INSTANCE.getMinuteTimeBucket(metric.getTime());\n            jvmSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metric);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-jvm-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/jvm/provider/handler/JVMMetricReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"ed78dabe8b142be3d546d349046768135f0a752a","commitMessage":"@@@Rename metric and indicator to metrics. (#2643)\n\n* Rename metric to metrics.\n\n* Fixed test case execute failure issues.\n","date":"2019-05-10 08:05:37","modifiedFileCount":"102","status":"M","submitter":"??? pengys"},{"authorTime":"2019-05-31 15:02:49","codes":[{"authorDate":"2019-05-31 15:02:49","commitOrder":4,"curCode":"    @Override public void collect(CLRMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the clr metrics from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(metrics.getTime());\n            clrSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2019-05-31 15:02:49","endLine":58,"groupId":"3359","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"collect","params":"(CLRMetricCollectionrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/92/88dba59b83d474b5ab3dc4f8ba047dbb3368f8.src","preCode":"    @Override public void collect(CLRMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the clr metrics from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucketUtils.INSTANCE.getMinuteTimeBucket(metrics.getTime());\n            clrSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-clr-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/clr/provider/handler/CLRMetricReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2019-05-31 15:02:49","commitOrder":4,"curCode":"    @Override public void collect(JVMMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the jvm metrics from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(metrics.getTime());\n            jvmSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2019-05-31 15:02:49","endLine":53,"groupId":"3359","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"collect","params":"(JVMMetricCollectionrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6c/a927cfbc1602fab24d0e62966462c7728c44fd.src","preCode":"    @Override public void collect(JVMMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the jvm metrics from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucketUtils.INSTANCE.getMinuteTimeBucket(metrics.getTime());\n            jvmSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-jvm-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/jvm/provider/handler/JVMMetricReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"0a696813c8b6a1a03a54380f6d9e3f4c54a68b2f","commitMessage":"@@@Time bucket util improve. (#2795)\n\n","date":"2019-05-31 15:02:49","modifiedFileCount":"13","status":"M","submitter":"??? pengys"},{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":5,"curCode":"    public void collect(CLRMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the clr metrics from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(metrics.getTime());\n            clrSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2020-02-11 17:10:49","endLine":59,"groupId":"3359","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"collect","params":"(CLRMetricCollectionrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d1/ed06810b5d42ce63930a50901b83167af4d65f.src","preCode":"    @Override public void collect(CLRMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the clr metrics from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(metrics.getTime());\n            clrSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-clr-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/clr/provider/handler/CLRMetricReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2020-02-11 17:10:49","commitOrder":5,"curCode":"    public void collect(JVMMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the jvm metrics from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(metrics.getTime());\n            jvmSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2020-02-11 17:10:49","endLine":56,"groupId":"3359","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"collect","params":"(JVMMetricCollectionrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/14/7d7951089150abb2bba022cfed5ada7bccc57f.src","preCode":"    @Override public void collect(JVMMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the jvm metrics from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(metrics.getTime());\n            jvmSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-jvm-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/jvm/provider/handler/JVMMetricReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"5b255ba3e3b50e0e0196b28cdca21dcd5c9c3da2","commitMessage":"@@@Set up more strict code styles and fix existing issues (#4337)\n\nMotivation:\n\nReview code styles with some bots automatically.\n\nModifications:\n\nSet up ReviewDog in GitHub Action to review code style.\n\nAdd more check rules to checkstyle plugin.\n\nResult:\n\nObvious code styles can be reviewed and commented automatically.","date":"2020-02-11 17:10:49","modifiedFileCount":"2429","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":6,"curCode":"    public void collect(CLRMetricCollection request, StreamObserver<Commands> responseObserver) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the clr metrics from service instance, id: {}\", request.getServiceInstance());\n        }\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(metrics.getTime());\n            clrSourceDispatcher.sendMetric(request.getService(), request.getServiceInstance(), minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2020-04-10 11:03:24","endLine":57,"groupId":"6799","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"collect","params":"(CLRMetricCollectionrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/26/d3aaf7b6cf4043039fa06a2347c9bce176c31e.src","preCode":"    public void collect(CLRMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the clr metrics from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(metrics.getTime());\n            clrSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-clr-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/clr/provider/handler/CLRMetricReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":6,"curCode":"    public void collect(JVMMetricCollection request, StreamObserver<Commands> responseObserver) {\n        if (log.isDebugEnabled()) {\n            log.debug(\n                \"receive the jvm metrics from service instance, name: {}, instance: {}\",\n                request.getService(),\n                request.getServiceInstance()\n            );\n        }\n\n        request.getMetricsList().forEach(jvmMetric -> {\n            jvmSourceDispatcher.sendMetric(request.getService(), request.getServiceInstance(), jvmMetric);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2020-04-10 11:03:24","endLine":53,"groupId":"4040","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"collect","params":"(JVMMetricCollectionrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/97/ec891c0af511e2f9e4861bbdb078282e06c512.src","preCode":"    public void collect(JVMMetricCollection request, StreamObserver<Commands> responseObserver) {\n        int serviceInstanceId = request.getServiceInstanceId();\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the jvm metrics from service instance, id: {}\", serviceInstanceId);\n        }\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(metrics.getTime());\n            jvmSourceDispatcher.sendMetric(serviceInstanceId, minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-jvm-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/jvm/provider/handler/JVMMetricReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-04-10 17:59:21","codes":[{"authorDate":"2020-04-10 17:59:21","commitOrder":7,"curCode":"    public void collect(CLRMetricCollection request, StreamObserver<Commands> responseObserver) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"receive the clr metrics from service instance, id: {}\", request.getServiceInstance());\n        }\n\n        final CLRMetricCollection.Builder builder = request.toBuilder();\n        builder.setService(namingLengthControl.formatServiceName(builder.getService()));\n        builder.setServiceInstance(namingLengthControl.formatInstanceName(builder.getServiceInstance()));\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(metrics.getTime());\n            clrSourceDispatcher.sendMetric(\n                request.getService(), request.getServiceInstance(), minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2020-04-10 17:59:21","endLine":62,"groupId":"6799","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"collect","params":"(CLRMetricCollectionrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/de/a57b5860ff1f15d68dce59623dd2f79d58c61c.src","preCode":"    public void collect(CLRMetricCollection request, StreamObserver<Commands> responseObserver) {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"receive the clr metrics from service instance, id: {}\", request.getServiceInstance());\n        }\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(metrics.getTime());\n            clrSourceDispatcher.sendMetric(request.getService(), request.getServiceInstance(), minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-clr-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/clr/provider/handler/CLRMetricReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2020-04-10 17:59:21","commitOrder":7,"curCode":"    public void collect(JVMMetricCollection request, StreamObserver<Commands> responseObserver) {\n        if (log.isDebugEnabled()) {\n            log.debug(\n                \"receive the jvm metrics from service instance, name: {}, instance: {}\",\n                request.getService(),\n                request.getServiceInstance()\n            );\n        }\n        final JVMMetricCollection.Builder builder = request.toBuilder();\n        builder.setService(namingLengthControl.formatServiceName(builder.getService()));\n        builder.setServiceInstance(namingLengthControl.formatInstanceName(builder.getServiceInstance()));\n\n        builder.getMetricsList().forEach(jvmMetric -> {\n            jvmSourceDispatcher.sendMetric(builder.getService(), builder.getServiceInstance(), jvmMetric);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2020-04-10 17:59:21","endLine":62,"groupId":"4040","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"collect","params":"(JVMMetricCollectionrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3b/874f4fe2351cb6f802b057236c953d34b90e91.src","preCode":"    public void collect(JVMMetricCollection request, StreamObserver<Commands> responseObserver) {\n        if (log.isDebugEnabled()) {\n            log.debug(\n                \"receive the jvm metrics from service instance, name: {}, instance: {}\",\n                request.getService(),\n                request.getServiceInstance()\n            );\n        }\n\n        request.getMetricsList().forEach(jvmMetric -> {\n            jvmSourceDispatcher.sendMetric(request.getService(), request.getServiceInstance(), jvmMetric);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-jvm-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/jvm/provider/handler/JVMMetricReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"44cae97c259c06f95d1fc4b78ee41268670b6542","commitMessage":"@@@Set up restrict length rules for service.  instance and endpoint (#4633)\n\n* Set up restrict length rules for service.  instance and endpoint\n\n* Adjust two env names.","date":"2020-04-10 17:59:21","modifiedFileCount":"26","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-05-20 22:50:22","codes":[{"authorDate":"2020-05-20 22:50:22","commitOrder":8,"curCode":"    public void collect(CLRMetricCollection request, StreamObserver<Commands> responseObserver) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"receive the clr metrics from service instance, id: {}\", request.getServiceInstance());\n        }\n\n        final CLRMetricCollection.Builder builder = request.toBuilder();\n        builder.setService(namingControl.formatServiceName(builder.getService()));\n        builder.setServiceInstance(namingControl.formatInstanceName(builder.getServiceInstance()));\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(metrics.getTime());\n            clrSourceDispatcher.sendMetric(\n                request.getService(), request.getServiceInstance(), minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2020-05-20 22:50:22","endLine":62,"groupId":"10886","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"collect","params":"(CLRMetricCollectionrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a4/16b2262f735f3a3a9ede8a3b662d3dc72228e9.src","preCode":"    public void collect(CLRMetricCollection request, StreamObserver<Commands> responseObserver) {\n        if (log.isDebugEnabled()) {\n            log.debug(\"receive the clr metrics from service instance, id: {}\", request.getServiceInstance());\n        }\n\n        final CLRMetricCollection.Builder builder = request.toBuilder();\n        builder.setService(namingLengthControl.formatServiceName(builder.getService()));\n        builder.setServiceInstance(namingLengthControl.formatInstanceName(builder.getServiceInstance()));\n\n        request.getMetricsList().forEach(metrics -> {\n            long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(metrics.getTime());\n            clrSourceDispatcher.sendMetric(\n                request.getService(), request.getServiceInstance(), minuteTimeBucket, metrics);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-clr-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/clr/provider/handler/CLRMetricReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2020-05-20 22:50:22","commitOrder":8,"curCode":"    public void collect(JVMMetricCollection request, StreamObserver<Commands> responseObserver) {\n        if (log.isDebugEnabled()) {\n            log.debug(\n                \"receive the jvm metrics from service instance, name: {}, instance: {}\",\n                request.getService(),\n                request.getServiceInstance()\n            );\n        }\n        final JVMMetricCollection.Builder builder = request.toBuilder();\n        builder.setService(namingControl.formatServiceName(builder.getService()));\n        builder.setServiceInstance(namingControl.formatInstanceName(builder.getServiceInstance()));\n\n        builder.getMetricsList().forEach(jvmMetric -> {\n            jvmSourceDispatcher.sendMetric(builder.getService(), builder.getServiceInstance(), jvmMetric);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","date":"2020-05-20 22:50:22","endLine":62,"groupId":"10886","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"collect","params":"(JVMMetricCollectionrequest@StreamObserver<Commands>responseObserver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/eb/cb5afb87af8a7c8ffc9483433a1ee4927d05c4.src","preCode":"    public void collect(JVMMetricCollection request, StreamObserver<Commands> responseObserver) {\n        if (log.isDebugEnabled()) {\n            log.debug(\n                \"receive the jvm metrics from service instance, name: {}, instance: {}\",\n                request.getService(),\n                request.getServiceInstance()\n            );\n        }\n        final JVMMetricCollection.Builder builder = request.toBuilder();\n        builder.setService(namingLengthControl.formatServiceName(builder.getService()));\n        builder.setServiceInstance(namingLengthControl.formatInstanceName(builder.getServiceInstance()));\n\n        builder.getMetricsList().forEach(jvmMetric -> {\n            jvmSourceDispatcher.sendMetric(builder.getService(), builder.getServiceInstance(), jvmMetric);\n        });\n\n        responseObserver.onNext(Commands.newBuilder().build());\n        responseObserver.onCompleted();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-jvm-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/jvm/provider/handler/JVMMetricReportServiceHandler.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"a10e04493272a88931d6916662b30d0a320287bb","commitMessage":"@@@Group Parameterized Endpoints (#4802)\n\n* Group Parameterized Endpoints. Configure the grouping rules for parameterized endpoints.  to improve the meaning of the metrics.\n","date":"2020-05-20 22:50:22","modifiedFileCount":"14","status":"M","submitter":"?? Wu Sheng"}]
