[{"authorTime":"2018-11-28 22:59:02","codes":[{"authorDate":"2018-11-22 20:50:27","commitOrder":3,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(getManager());\n            installer.install(h2Client);\n\n            new H2RegisterLockInstaller().install(h2Client);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2018-11-22 20:50:27","endLine":99,"groupId":"1452","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ac/8cb361d28b238bd8e8acbb54d79d5e43a5031b.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(getManager());\n            installer.install(h2Client);\n\n            new H2RegisterLockInstaller().install(h2Client);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"NB"},{"authorDate":"2018-11-28 22:59:02","commitOrder":3,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new MySQLRegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2018-11-28 22:59:02","endLine":134,"groupId":"1827","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3f/b67fd59df4fb35482b9fdcff95a34accc69d32.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new MySQLRegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"215eab74288328e13f2c0fecf222168632685ff9","commitMessage":"@@@Mysql style storage implementation (#1964)\n\nAlso fixed several bugs in this merge.","date":"2018-11-28 22:59:02","modifiedFileCount":"33","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2019-01-20 16:41:06","codes":[{"authorDate":"2019-01-20 16:41:06","commitOrder":4,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(getManager());\n            installer.install(h2Client);\n\n            new H2RegisterLockInstaller().install(h2Client, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2019-01-20 16:41:06","endLine":102,"groupId":"1827","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a7/6fb49a7d9518e68a86f82850ca7861fc49dd10.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(getManager());\n            installer.install(h2Client);\n\n            new H2RegisterLockInstaller().install(h2Client);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2019-01-20 16:41:06","commitOrder":4,"curCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2019-01-20 16:41:06","endLine":108,"groupId":"1827","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fd/a7d311f3aa113666768e606fa6553d0202e03e.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new MySQLRegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"33f5cc19b54d0988304a3ed9e4477cdc3314cd6d","commitMessage":"@@@Fixed the inventory register lock invalid bug. (#2184)\n\n* #2183\n\nMerge commit into master.\n\n* Make the h2 register lock same as mysql.\n","date":"2019-01-20 16:41:06","modifiedFileCount":"17","status":"M","submitter":"??? pengys"},{"authorTime":"2020-02-11 17:10:49","codes":[{"authorDate":"2020-02-11 17:10:49","commitOrder":5,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(getManager());\n            installer.install(h2Client);\n\n            new H2RegisterLockInstaller().install(h2Client, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-02-11 17:10:49","endLine":155,"groupId":"1827","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5b/468ced6c926fb09e2e5ee456b99857fae1b1db.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(getManager());\n            installer.install(h2Client);\n\n            new H2RegisterLockInstaller().install(h2Client, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2020-02-11 17:10:49","commitOrder":5,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-02-11 17:10:49","endLine":145,"groupId":"1827","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/09/d302ef5bbaf90d951447c0ad3e15a8168b0dea.src","preCode":"    @Override public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"5b255ba3e3b50e0e0196b28cdca21dcd5c9c3da2","commitMessage":"@@@Set up more strict code styles and fix existing issues (#4337)\n\nMotivation:\n\nReview code styles with some bots automatically.\n\nModifications:\n\nSet up ReviewDog in GitHub Action to review code style.\n\nAdd more check rules to checkstyle plugin.\n\nResult:\n\nObvious code styles can be reviewed and commented automatically.","date":"2020-02-11 17:10:49","modifiedFileCount":"2429","status":"M","submitter":"kezhenxu94"},{"authorTime":"2020-05-08 21:21:03","codes":[{"authorDate":"2020-05-08 21:21:03","commitOrder":6,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(h2Client, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-05-08 21:21:03","endLine":141,"groupId":"1220","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/59/e814238dfa00ed8ba768502ce3902fe4d045bc.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(getManager());\n            installer.install(h2Client);\n\n            new H2RegisterLockInstaller().install(h2Client, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2020-05-08 21:21:03","commitOrder":6,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(mysqlClient, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-05-08 21:21:03","endLine":131,"groupId":"1220","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c0/47807da0f1828fe4260c6f934a93ff904435c9.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(getManager());\n            installer.install(mysqlClient);\n\n            new H2RegisterLockInstaller().install(mysqlClient, lockDAO);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"7edcd5aa33cec034047871ac1348b5b858b630f0","commitMessage":"@@@Change the model installation into the reactive module (#4761)\n\n","date":"2020-05-08 21:21:03","modifiedFileCount":"31","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-05-08 21:21:03","codes":[{"authorDate":"2020-07-10 00:30:43","commitOrder":7,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n        GaugeMetrics healthChecker = metricCreator.createHealthCheckerGauge(\"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        healthChecker.setValue(1);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(h2Client, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n        h2Client.setHealthCheckListener(isHealthy -> {\n            if (isHealthy) {\n                healthChecker.setValue(0);\n            } else {\n                healthChecker.setValue(1);\n            }\n        });\n    }\n","date":"2020-07-10 00:30:43","endLine":156,"groupId":"1220","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/06/7bf2ce8dc0851000b9a4b1c1cb293c71053ffa.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(h2Client, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2020-05-08 21:21:03","commitOrder":7,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(mysqlClient, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-05-08 21:21:03","endLine":131,"groupId":"1220","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c0/47807da0f1828fe4260c6f934a93ff904435c9.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(mysqlClient, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"N"}],"commitId":"b6661b5164fac59e754009fa6ef646aaed8929a7","commitMessage":"@@@Add health checker module (#5046)\n\n","date":"2020-07-10 00:30:43","modifiedFileCount":"9","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2020-05-08 21:21:03","codes":[{"authorDate":"2020-07-19 23:37:13","commitOrder":8,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(h2Client, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-07-19 23:37:13","endLine":149,"groupId":"1220","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/26/5352268bad498244b557eca53a4581d9f079a0.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n        GaugeMetrics healthChecker = metricCreator.createHealthCheckerGauge(\"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        healthChecker.setValue(1);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(h2Client, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n        h2Client.setHealthCheckListener(isHealthy -> {\n            if (isHealthy) {\n                healthChecker.setValue(0);\n            } else {\n                healthChecker.setValue(1);\n            }\n        });\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2020-05-08 21:21:03","commitOrder":8,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(mysqlClient, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-05-08 21:21:03","endLine":131,"groupId":"1220","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c0/47807da0f1828fe4260c6f934a93ff904435c9.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(mysqlClient, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"N"}],"commitId":"3fdfdf3b83a1d6d80066c321eb3f05568657aba7","commitMessage":"@@@Storage elasticsearch health check (#5099)\n\n","date":"2020-07-19 23:37:13","modifiedFileCount":"8","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2020-08-11 07:24:40","codes":[{"authorDate":"2020-08-11 07:24:40","commitOrder":9,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-08-11 07:24:40","endLine":176,"groupId":"1220","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/82/db55355da961e76002418cb65d748983d29968.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(h2Client, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2020-08-11 07:24:40","commitOrder":9,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2020-08-11 07:24:40","endLine":159,"groupId":"1220","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/76/5c252be446f56321065c456b62b6eb1b755b13.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(mysqlClient, getManager());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"7f7e96b088d3cb0a19f8ddeafe5ede9764ec2eda","commitMessage":"@@@[IMPORTANT] Query traces with tags as condition (#5270)\n\n","date":"2020-08-11 07:24:40","modifiedFileCount":"39","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-01-14 09:49:11","codes":[{"authorDate":"2021-01-14 09:49:11","commitOrder":10,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTracesTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTracesTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTracesTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-01-14 09:49:11","endLine":194,"groupId":"1220","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e4/c281a8be971f396a72542024ff0d9a767a678d.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2021-01-14 09:49:11","commitOrder":10,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-01-14 09:49:11","endLine":176,"groupId":"1220","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/22/5a0da4c5ca3eae40bf6007fc1bfca03723073f.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"15452025c65dd6934bd9d6c8a930961b0f960594","commitMessage":"@@@Log collecting and query implementation (#6120)\n\n","date":"2021-01-14 09:49:11","modifiedFileCount":"51","status":"M","submitter":"zhang-wei"},{"authorTime":"2021-04-25 17:22:43","codes":[{"authorDate":"2021-01-14 09:49:11","commitOrder":11,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTracesTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTracesTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTracesTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-01-14 09:49:11","endLine":194,"groupId":"10807","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e4/c281a8be971f396a72542024ff0d9a767a678d.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTracesTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTracesTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTracesTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        MetricsCreator metricCreator = getManager().find(TelemetryModule.NAME)\n                                                   .provider()\n                                                   .getService(MetricsCreator.class);\n        HealthCheckMetrics healthChecker = metricCreator.createHealthCheckerGauge(\n            \"storage_h2\", MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n        h2Client.registerChecker(healthChecker);\n        try {\n            h2Client.connect();\n\n            H2TableInstaller installer = new H2TableInstaller(\n                h2Client, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag());\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/H2StorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"N"},{"authorDate":"2021-04-25 17:22:43","commitOrder":11,"curCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableAlarmTags = configService.getSearchableAlarmTags().split(Const.COMMA).length;\n        if (numOfSearchableAlarmTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableAlarmTags[\" + numOfSearchableAlarmTags\n                    + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                    + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                    + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","date":"2021-04-25 17:22:43","endLine":194,"groupId":"10807","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"start","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/23/3431ad240f33303ea7e88a622e0774e0547369.src","preCode":"    public void start() throws ServiceNotProvidedException, ModuleStartException {\n        final ConfigService configService = getManager().find(CoreModule.NAME)\n                                                        .provider()\n                                                        .getService(ConfigService.class);\n        final int numOfSearchableTags = configService.getSearchableTracesTags().split(Const.COMMA).length;\n        if (numOfSearchableTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableTracesTags[\" + numOfSearchableTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n        final int numOfSearchableLogsTags = configService.getSearchableLogsTags().split(Const.COMMA).length;\n        if (numOfSearchableLogsTags * config.getNumOfSearchableValuesPerTag() > config.getMaxSizeOfArrayColumn()) {\n            throw new ModuleStartException(\"Size of searchableLogsTags[\" + numOfSearchableLogsTags\n                                               + \"] * numOfSearchableValuesPerTag[\" + config.getNumOfSearchableValuesPerTag()\n                                               + \"] > maxSizeOfArrayColumn[\" + config.getMaxSizeOfArrayColumn()\n                                               + \"]. Potential out of bound in the runtime.\");\n        }\n\n        try {\n            mysqlClient.connect();\n\n            MySQLTableInstaller installer = new MySQLTableInstaller(\n                mysqlClient, getManager(), config.getMaxSizeOfArrayColumn(), config.getNumOfSearchableValuesPerTag()\n            );\n            getManager().find(CoreModule.NAME).provider().getService(ModelCreator.class).addModelListener(installer);\n        } catch (StorageException e) {\n            throw new ModuleStartException(e.getMessage(), e);\n        }\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/mysql/MySQLStorageProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"7a533313676579da1321c0177c10fc237a052cbe","commitMessage":"@@@Support alarm tags (#6820)\n\n","date":"2021-04-25 17:22:43","modifiedFileCount":"42","status":"M","submitter":"liqiangz"}]
