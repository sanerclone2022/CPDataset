[{"authorTime":"2018-10-28 10:31:58","codes":[{"authorDate":"2018-10-28 10:31:58","commitOrder":1,"curCode":"    @Override public Service searchService(String serviceCode) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> condition = new ArrayList<>(5);\n        sql.append(\"select * from \").append(ServiceInventory.MODEL_NAME).append(\" where \");\n        sql.append(ServiceInventory.IS_ADDRESS).append(\"=?\");\n        condition.add(BooleanUtils.FALSE);\n        sql.append(\" and \").append(ServiceInventory.NAME).append(\" = ?\");\n        condition.add(serviceCode);\n\n        Connection connection = null;\n        try {\n            connection = h2Client.getConnection();\n            ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]));\n\n            while (resultSet.next()) {\n                Service service = new Service();\n                service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n                service.setName(resultSet.getString(ServiceInventory.NAME));\n                return service;\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        } finally {\n            h2Client.close(connection);\n        }\n\n        return null;\n    }\n","date":"2018-10-28 10:31:58","endLine":194,"groupId":"2391","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"searchService","params":"(StringserviceCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ed/344b0566b18fc649a3e23abe0238f4ac665bdf.src","preCode":"    @Override public Service searchService(String serviceCode) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> condition = new ArrayList<>(5);\n        sql.append(\"select * from \").append(ServiceInventory.MODEL_NAME).append(\" where \");\n        sql.append(ServiceInventory.IS_ADDRESS).append(\"=?\");\n        condition.add(BooleanUtils.FALSE);\n        sql.append(\" and \").append(ServiceInventory.NAME).append(\" = ?\");\n        condition.add(serviceCode);\n\n        Connection connection = null;\n        try {\n            connection = h2Client.getConnection();\n            ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]));\n\n            while (resultSet.next()) {\n                Service service = new Service();\n                service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n                service.setName(resultSet.getString(ServiceInventory.NAME));\n                return service;\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        } finally {\n            h2Client.close(connection);\n        }\n\n        return null;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"B"},{"authorDate":"2018-10-28 10:31:58","commitOrder":1,"curCode":"    private List<Service> buildServices(ResultSet resultSet) throws SQLException {\n        List<Service> services = new ArrayList<>();\n        while (resultSet.next()) {\n            Service service = new Service();\n            service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n            service.setName(resultSet.getString(ServiceInventory.NAME));\n            services.add(service);\n        }\n\n        return services;\n    }\n","date":"2018-10-28 10:31:58","endLine":299,"groupId":"2748","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildServices","params":"(ResultSetresultSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ed/344b0566b18fc649a3e23abe0238f4ac665bdf.src","preCode":"    private List<Service> buildServices(ResultSet resultSet) throws SQLException {\n        List<Service> services = new ArrayList<>();\n        while (resultSet.next()) {\n            Service service = new Service();\n            service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n            service.setName(resultSet.getString(ServiceInventory.NAME));\n            services.add(service);\n        }\n\n        return services;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"B"}],"commitId":"a9489b706739d9ca994997ac071013c9e4afd0ce","commitMessage":"@@@H2 storage (#1712)\n\n* H2 storage code skeleton.\n\n* Add batch dao for H2.\n\n* Fix wrong refactor.\n\n* Add codes of other dao. No metric dao.  wait for @peng-yongsheng new PR.\n\n* Change license of distribution\n\n* Add topology query in H2.\n\n* Add more daos.\n\n* Add some daos.\n\n* Commit all H2 daos. Wait @peng-yongsheng to submit new IAggregationQueryDAO interface.\n\n* Fix some CIs\n\n* Fix wrong refactor.  which causes h2 plugin failure.\n\n* Fix all codes of H2 storage. :) and CI should pass. No test.\n\n* Fix CI and typo\n\n* Fix connection closed.\n\n* Fix register bug\n\n* no message\n\n* Fixed service inventory register bug.\n\n* Fix a compile issue.\n\n* Sync change\n\n* Reset es as default storage.\n\n* Fix rat\n\n* Fix H2 compile issue.\n\n* Fix bugs for H2 storage.\n\n* Fix bug in mesh.\n\n* 1. Fix Thermodynamic query bug\n2. Fix service inventory query bug\n3. Fix missing traceid in trace query bug\n\n* Fix query bug.\n\n* Submit reverse caused by prev PR.\n\n* Fix duplicate spans.\n\n* Use H2 as default storage implementor.\n\n* Fix bug in topology query.\n\n* Fix CI\n\n* Fix rat\n\n* Fix two query in H2 storage.\n\n* Fix H2 query\n\n* Make release running in H2 mode and develop mode running is ES mode in default\n","date":"2018-10-28 10:31:58","modifiedFileCount":"17","status":"B","submitter":"?? Wu Sheng"},{"authorTime":"2018-10-28 10:31:58","codes":[{"authorDate":"2018-11-28 22:59:02","commitOrder":2,"curCode":"    @Override public Service searchService(String serviceCode) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> condition = new ArrayList<>(5);\n        sql.append(\"select * from \").append(ServiceInventory.MODEL_NAME).append(\" where \");\n        sql.append(ServiceInventory.IS_ADDRESS).append(\"=?\");\n        condition.add(BooleanUtils.FALSE);\n        sql.append(\" and \").append(ServiceInventory.NAME).append(\" = ?\");\n        condition.add(serviceCode);\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    Service service = new Service();\n                    service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n                    service.setName(resultSet.getString(ServiceInventory.NAME));\n                    return service;\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return null;\n    }\n","date":"2018-11-28 22:59:02","endLine":175,"groupId":"2391","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"searchService","params":"(StringserviceCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b6/c66815a7e67849bf91bd02b4ddeb948e9369e2.src","preCode":"    @Override public Service searchService(String serviceCode) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> condition = new ArrayList<>(5);\n        sql.append(\"select * from \").append(ServiceInventory.MODEL_NAME).append(\" where \");\n        sql.append(ServiceInventory.IS_ADDRESS).append(\"=?\");\n        condition.add(BooleanUtils.FALSE);\n        sql.append(\" and \").append(ServiceInventory.NAME).append(\" = ?\");\n        condition.add(serviceCode);\n\n        Connection connection = null;\n        try {\n            connection = h2Client.getConnection();\n            ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]));\n\n            while (resultSet.next()) {\n                Service service = new Service();\n                service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n                service.setName(resultSet.getString(ServiceInventory.NAME));\n                return service;\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        } finally {\n            h2Client.close(connection);\n        }\n\n        return null;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2018-10-28 10:31:58","commitOrder":2,"curCode":"    private List<Service> buildServices(ResultSet resultSet) throws SQLException {\n        List<Service> services = new ArrayList<>();\n        while (resultSet.next()) {\n            Service service = new Service();\n            service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n            service.setName(resultSet.getString(ServiceInventory.NAME));\n            services.add(service);\n        }\n\n        return services;\n    }\n","date":"2018-10-28 10:31:58","endLine":299,"groupId":"2748","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildServices","params":"(ResultSetresultSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ed/344b0566b18fc649a3e23abe0238f4ac665bdf.src","preCode":"    private List<Service> buildServices(ResultSet resultSet) throws SQLException {\n        List<Service> services = new ArrayList<>();\n        while (resultSet.next()) {\n            Service service = new Service();\n            service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n            service.setName(resultSet.getString(ServiceInventory.NAME));\n            services.add(service);\n        }\n\n        return services;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"N"}],"commitId":"215eab74288328e13f2c0fecf222168632685ff9","commitMessage":"@@@Mysql style storage implementation (#1964)\n\nAlso fixed several bugs in this merge.","date":"2018-11-28 22:59:02","modifiedFileCount":"33","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2018-10-28 10:31:58","codes":[{"authorDate":"2019-01-27 08:27:34","commitOrder":3,"curCode":"    public Service searchService(String serviceCode) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> condition = new ArrayList<>(5);\n        sql.append(\"select * from \").append(ServiceInventory.MODEL_NAME).append(\" where \");\n        sql.append(ServiceInventory.IS_ADDRESS).append(\"=?\");\n        condition.add(BooleanUtils.FALSE);\n        sql.append(\" and \").append(ServiceInventory.NAME).append(\" = ?\");\n        condition.add(serviceCode);\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    Service service = new Service();\n                    service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n                    service.setName(resultSet.getString(ServiceInventory.NAME));\n                    return service;\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return null;\n    }\n","date":"2019-01-27 08:27:34","endLine":209,"groupId":"2391","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"searchService","params":"(StringserviceCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/12/aabeb4b9db0179574ac462110aaa4bf758d589.src","preCode":"    @Override public Service searchService(String serviceCode) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> condition = new ArrayList<>(5);\n        sql.append(\"select * from \").append(ServiceInventory.MODEL_NAME).append(\" where \");\n        sql.append(ServiceInventory.IS_ADDRESS).append(\"=?\");\n        condition.add(BooleanUtils.FALSE);\n        sql.append(\" and \").append(ServiceInventory.NAME).append(\" = ?\");\n        condition.add(serviceCode);\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    Service service = new Service();\n                    service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n                    service.setName(resultSet.getString(ServiceInventory.NAME));\n                    return service;\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return null;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2018-10-28 10:31:58","commitOrder":3,"curCode":"    private List<Service> buildServices(ResultSet resultSet) throws SQLException {\n        List<Service> services = new ArrayList<>();\n        while (resultSet.next()) {\n            Service service = new Service();\n            service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n            service.setName(resultSet.getString(ServiceInventory.NAME));\n            services.add(service);\n        }\n\n        return services;\n    }\n","date":"2018-10-28 10:31:58","endLine":299,"groupId":"2748","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildServices","params":"(ResultSetresultSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ed/344b0566b18fc649a3e23abe0238f4ac665bdf.src","preCode":"    private List<Service> buildServices(ResultSet resultSet) throws SQLException {\n        List<Service> services = new ArrayList<>();\n        while (resultSet.next()) {\n            Service service = new Service();\n            service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n            service.setName(resultSet.getString(ServiceInventory.NAME));\n            services.add(service);\n        }\n\n        return services;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"N"}],"commitId":"f7ca26729dbc2db3d9aa83df72d3ee9a74fc557c","commitMessage":"@@@Database metrics provided. (#2025)\n\n* Add Database source\n\n* Add DatabaseSource source and database_* script for oal\n\n* Enable Database_Indicator\n\n* Add file license\n\n* Rename DatabaseService to ClientDatabase. In the future.  we may have real database server monitoring.\n\n* Add query database from H2\n\n* refactor\n\n* update submodule\n\n* refactor\n\n* Fix style\n\n* Fix: unknown tag error\n\n* fix checkstyle\n","date":"2019-01-27 08:27:34","modifiedFileCount":"12","status":"M","submitter":"Lemon"},{"authorTime":"2018-10-28 10:31:58","codes":[{"authorDate":"2019-05-15 22:42:38","commitOrder":4,"curCode":"    public Service searchService(String serviceCode) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> condition = new ArrayList<>(5);\n        sql.append(\"select * from \").append(ServiceInventory.INDEX_NAME).append(\" where \");\n        sql.append(ServiceInventory.IS_ADDRESS).append(\"=?\");\n        condition.add(BooleanUtils.FALSE);\n        sql.append(\" and \").append(ServiceInventory.NAME).append(\" = ?\");\n        condition.add(serviceCode);\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    Service service = new Service();\n                    service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n                    service.setName(resultSet.getString(ServiceInventory.NAME));\n                    return service;\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return null;\n    }\n","date":"2019-05-15 22:42:38","endLine":227,"groupId":"2391","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"searchService","params":"(StringserviceCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/71/53c0762ed173a4fce559d09eef50a7ffeba435.src","preCode":"    public Service searchService(String serviceCode) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> condition = new ArrayList<>(5);\n        sql.append(\"select * from \").append(ServiceInventory.MODEL_NAME).append(\" where \");\n        sql.append(ServiceInventory.IS_ADDRESS).append(\"=?\");\n        condition.add(BooleanUtils.FALSE);\n        sql.append(\" and \").append(ServiceInventory.NAME).append(\" = ?\");\n        condition.add(serviceCode);\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(connection, sql.toString(), condition.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    Service service = new Service();\n                    service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n                    service.setName(resultSet.getString(ServiceInventory.NAME));\n                    return service;\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return null;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2018-10-28 10:31:58","commitOrder":4,"curCode":"    private List<Service> buildServices(ResultSet resultSet) throws SQLException {\n        List<Service> services = new ArrayList<>();\n        while (resultSet.next()) {\n            Service service = new Service();\n            service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n            service.setName(resultSet.getString(ServiceInventory.NAME));\n            services.add(service);\n        }\n\n        return services;\n    }\n","date":"2018-10-28 10:31:58","endLine":299,"groupId":"2748","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"buildServices","params":"(ResultSetresultSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ed/344b0566b18fc649a3e23abe0238f4ac665bdf.src","preCode":"    private List<Service> buildServices(ResultSet resultSet) throws SQLException {\n        List<Service> services = new ArrayList<>();\n        while (resultSet.next()) {\n            Service service = new Service();\n            service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n            service.setName(resultSet.getString(ServiceInventory.NAME));\n            services.add(service);\n        }\n\n        return services;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"N"}],"commitId":"63fb961c0d1de02f053045c3bf80361ebd7bd58d","commitMessage":"@@@New OAP annotations.  they are friendly for streaming loader. (#2670)\n\n* New stream annotation.\n- Inventory annotation example:\n@Stream(name = ServiceInventory.INDEX_NAME.  scopeId = DefaultScopeDefine.SERVICE_INVENTORY.  storage = @Storage(builder = ServiceInventory.Builder.class.  deleteHistory = false).  kind = StreamKind.Inventory)\n\n- Metrics annotation example:\n@Stream(name = ServiceRelationClientSideMetrics.INDEX_NAME.  scopeId = DefaultScopeDefine.SERVICE_RELATION.  storage = @Storage(builder = ServiceRelationClientSideMetrics.Builder.class).  kind = StreamKind.Metrics)\n\n- Record annotation example:\n@Stream(name = SegmentRecord.INDEX_NAME.  scopeId = DefaultScopeDefine.SEGMENT.  storage = @Storage(builder = SegmentRecord.Builder.class).  kind = StreamKind.Record)\n\n- TopN annotation example:\n@Stream(name = TopNDatabaseStatement.INDEX_NAME.  scopeId = DefaultScopeDefine.DATABASE_SLOW_STATEMENT.  storage = @Storage(builder = TopNDatabaseStatement.Builder.class).  kind = StreamKind.TopN)\n\n* no message\n\n* Stream annotation finish.\n\n* Make stream processors to be the singleton class.\n\n* Fixed the compile errors.\n\n* Modify the OAL module for this annotation refactor.\n\n* Add apache license header.\n\n* Duplicate import.\n\n* Fixed check style error.\n","date":"2019-05-15 22:42:38","modifiedFileCount":"55","status":"M","submitter":"??? pengys"},{"authorTime":"2020-04-10 11:03:24","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":5,"curCode":"    public Service searchService(String serviceCode) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> condition = new ArrayList<>(5);\n        sql.append(\"select * from \").append(ServiceTraffic.INDEX_NAME).append(\" where \");\n        sql.append(ServiceTraffic.NODE_TYPE).append(\"=?\");\n        condition.add(NodeType.Normal.value());\n        sql.append(\" and \").append(ServiceTraffic.NAME).append(\" = ?\");\n        condition.add(serviceCode);\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), condition.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    Service service = new Service();\n                    service.setId(resultSet.getString(H2TableInstaller.ID_COLUMN));\n                    service.setName(resultSet.getString(ServiceTraffic.NAME));\n                    return service;\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return null;\n    }\n","date":"2020-04-10 11:03:24","endLine":213,"groupId":"2048","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"searchService","params":"(StringserviceCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0b/e97799d8aeabf0057d92b3533748fd0679f441.src","preCode":"    public Service searchService(String serviceCode) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> condition = new ArrayList<>(5);\n        sql.append(\"select * from \").append(ServiceInventory.INDEX_NAME).append(\" where \");\n        sql.append(ServiceInventory.IS_ADDRESS).append(\"=?\");\n        condition.add(BooleanUtils.FALSE);\n        sql.append(\" and \").append(ServiceInventory.NAME).append(\" = ?\");\n        condition.add(serviceCode);\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), condition.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    Service service = new Service();\n                    service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n                    service.setName(resultSet.getString(ServiceInventory.NAME));\n                    return service;\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return null;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2020-04-10 11:03:24","commitOrder":5,"curCode":"    private List<Service> buildServices(ResultSet resultSet) throws SQLException {\n        List<Service> services = new ArrayList<>();\n        while (resultSet.next()) {\n            Service service = new Service();\n            service.setId(resultSet.getString(H2TableInstaller.ID_COLUMN));\n            service.setName(resultSet.getString(ServiceTraffic.NAME));\n            services.add(service);\n        }\n\n        return services;\n    }\n","date":"2020-04-10 11:03:24","endLine":305,"groupId":"2048","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"buildServices","params":"(ResultSetresultSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0b/e97799d8aeabf0057d92b3533748fd0679f441.src","preCode":"    private List<Service> buildServices(ResultSet resultSet) throws SQLException {\n        List<Service> services = new ArrayList<>();\n        while (resultSet.next()) {\n            Service service = new Service();\n            service.setId(resultSet.getInt(ServiceInventory.SEQUENCE));\n            service.setName(resultSet.getString(ServiceInventory.NAME));\n            services.add(service);\n        }\n\n        return services;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"M"}],"commitId":"6fe2041b470113e626cb3f41e3789261d31f2548","commitMessage":"@@@Make 8.0.0 Core available. New protocol and register removed. (#4599)\n\nHere are the list of changes we made in this pull request. Top 3 are the principle changes.  others are following these principles.\n1. New agent and mesh report protocol. \n2. New agent header protocol. \n3. Service register.  instance register and network address register have been removed permanently.\n4. Service traffic.  instance traffic and network alias metrics are added to replace the service.  instance and network address inventory.\n5. Register process has been removed.\n6. Metrics stream process supports insert only mode.  especially for traffic entities.\n7. Metrics stream process supports no-downsampling mode for traffic entities and network alias.\n8. Remove all register mechanism and cache in the java agent.\n9. Remove MONTH step in GraphQL query.\n10. Update UI to remove MONTH step query.  the max query range is 60 days now.\n11. Simplify the TTL to metrics and record. And the unit has been formatted in Day unit. No specific TTL for ElasticSearch storage.\n12. Buffer mechanism of trace receiver and mesh receiver has been removed due to no register.\n13. New service id.  instance id and endpoint id rules.  including service relation.  instance relation and endpoint relation id rules.\n14. Java agent support `keep tracing` mode.  meaning.  agent generating tracing context even the backend is unconnected/unavailable.\n15. Plugin test tool up to date.  in order to support new protocol.\n16. Plugin tests expected data files updated.\n17. E2E tests updated.\n18. Telemetry of Grafana config has been merged into one.\n19. Documentation updates.\n20. [TBD] InfluxDB storage implementation is not available.  need @dmsolr to fix later.  in order to reduce the master change block by this PR.","date":"2020-04-10 11:03:24","modifiedFileCount":"342","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-11-17 22:45:32","codes":[{"authorDate":"2020-04-10 11:03:24","commitOrder":6,"curCode":"    public Service searchService(String serviceCode) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> condition = new ArrayList<>(5);\n        sql.append(\"select * from \").append(ServiceTraffic.INDEX_NAME).append(\" where \");\n        sql.append(ServiceTraffic.NODE_TYPE).append(\"=?\");\n        condition.add(NodeType.Normal.value());\n        sql.append(\" and \").append(ServiceTraffic.NAME).append(\" = ?\");\n        condition.add(serviceCode);\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), condition.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    Service service = new Service();\n                    service.setId(resultSet.getString(H2TableInstaller.ID_COLUMN));\n                    service.setName(resultSet.getString(ServiceTraffic.NAME));\n                    return service;\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return null;\n    }\n","date":"2020-04-10 11:03:24","endLine":213,"groupId":"2048","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"searchService","params":"(StringserviceCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0b/e97799d8aeabf0057d92b3533748fd0679f441.src","preCode":"    public Service searchService(String serviceCode) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> condition = new ArrayList<>(5);\n        sql.append(\"select * from \").append(ServiceTraffic.INDEX_NAME).append(\" where \");\n        sql.append(ServiceTraffic.NODE_TYPE).append(\"=?\");\n        condition.add(NodeType.Normal.value());\n        sql.append(\" and \").append(ServiceTraffic.NAME).append(\" = ?\");\n        condition.add(serviceCode);\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), condition.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    Service service = new Service();\n                    service.setId(resultSet.getString(H2TableInstaller.ID_COLUMN));\n                    service.setName(resultSet.getString(ServiceTraffic.NAME));\n                    return service;\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return null;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"N"},{"authorDate":"2020-11-17 22:45:32","commitOrder":6,"curCode":"    private List<Service> buildServices(ResultSet resultSet) throws SQLException {\n        List<Service> services = new ArrayList<>();\n        while (resultSet.next()) {\n            Service service = new Service();\n            service.setId(resultSet.getString(H2TableInstaller.ID_COLUMN));\n            service.setName(resultSet.getString(ServiceTraffic.NAME));\n            service.setGroup(resultSet.getString(ServiceTraffic.GROUP));\n            services.add(service);\n        }\n\n        return services;\n    }\n","date":"2020-11-17 22:45:32","endLine":268,"groupId":"2048","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"buildServices","params":"(ResultSetresultSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b7/c25d4613657c8d893255fe6d534d7932de58df.src","preCode":"    private List<Service> buildServices(ResultSet resultSet) throws SQLException {\n        List<Service> services = new ArrayList<>();\n        while (resultSet.next()) {\n            Service service = new Service();\n            service.setId(resultSet.getString(H2TableInstaller.ID_COLUMN));\n            service.setName(resultSet.getString(ServiceTraffic.NAME));\n            services.add(service);\n        }\n\n        return services;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"M"}],"commitId":"c9202af1ee4f48acaa20814788da8b224bfcfe0d","commitMessage":"@@@Support group in the service traffic and service list query. (#5851)\n\n* Support group in the service traffic and service list query.\n","date":"2020-11-17 22:45:32","modifiedFileCount":"11","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-11-17 22:45:32","codes":[{"authorDate":"2021-09-05 13:56:00","commitOrder":7,"curCode":"    public Service searchService(String serviceCode) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> condition = new ArrayList<>(5);\n        sql.append(\"select * from \").append(ServiceTraffic.INDEX_NAME).append(\" where \");\n        sql.append(ServiceTraffic.NODE_TYPE).append(\"=?\");\n        condition.add(NodeType.Normal.value());\n        sql.append(\" and \").append(ServiceTraffic.NAME).append(\" = ?\");\n        condition.add(serviceCode);\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), condition.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    Service service = new Service();\n                    service.setId(resultSet.getString(H2TableInstaller.ID_COLUMN));\n                    service.setName(resultSet.getString(ServiceTraffic.NAME));\n                    service.setGroup(resultSet.getString(ServiceTraffic.GROUP));\n                    return service;\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return null;\n    }\n","date":"2021-09-05 13:56:00","endLine":175,"groupId":"10798","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"searchService","params":"(StringserviceCode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9c/25e6aa2ff7d85b896fac524f9f38fdf3b8bf32.src","preCode":"    public Service searchService(String serviceCode) throws IOException {\n        StringBuilder sql = new StringBuilder();\n        List<Object> condition = new ArrayList<>(5);\n        sql.append(\"select * from \").append(ServiceTraffic.INDEX_NAME).append(\" where \");\n        sql.append(ServiceTraffic.NODE_TYPE).append(\"=?\");\n        condition.add(NodeType.Normal.value());\n        sql.append(\" and \").append(ServiceTraffic.NAME).append(\" = ?\");\n        condition.add(serviceCode);\n\n        try (Connection connection = h2Client.getConnection()) {\n            try (ResultSet resultSet = h2Client.executeQuery(\n                connection, sql.toString(), condition.toArray(new Object[0]))) {\n\n                while (resultSet.next()) {\n                    Service service = new Service();\n                    service.setId(resultSet.getString(H2TableInstaller.ID_COLUMN));\n                    service.setName(resultSet.getString(ServiceTraffic.NAME));\n                    return service;\n                }\n            }\n        } catch (SQLException e) {\n            throw new IOException(e);\n        }\n\n        return null;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2020-11-17 22:45:32","commitOrder":7,"curCode":"    private List<Service> buildServices(ResultSet resultSet) throws SQLException {\n        List<Service> services = new ArrayList<>();\n        while (resultSet.next()) {\n            Service service = new Service();\n            service.setId(resultSet.getString(H2TableInstaller.ID_COLUMN));\n            service.setName(resultSet.getString(ServiceTraffic.NAME));\n            service.setGroup(resultSet.getString(ServiceTraffic.GROUP));\n            services.add(service);\n        }\n\n        return services;\n    }\n","date":"2020-11-17 22:45:32","endLine":268,"groupId":"10798","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"buildServices","params":"(ResultSetresultSet)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b7/c25d4613657c8d893255fe6d534d7932de58df.src","preCode":"    private List<Service> buildServices(ResultSet resultSet) throws SQLException {\n        List<Service> services = new ArrayList<>();\n        while (resultSet.next()) {\n            Service service = new Service();\n            service.setId(resultSet.getString(H2TableInstaller.ID_COLUMN));\n            service.setName(resultSet.getString(ServiceTraffic.NAME));\n            service.setGroup(resultSet.getString(ServiceTraffic.GROUP));\n            services.add(service);\n        }\n\n        return services;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-jdbc-hikaricp-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/jdbc/h2/dao/H2MetadataQueryDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"N"}],"commitId":"de59bf7aebc20110c21c0e39e9b987e4aec91911","commitMessage":"@@@Fix `H2MetadataQueryDAO.searchService` doesn't support auto grouping. [issue #7653] (#7654)\n\n","date":"2021-09-05 13:56:00","modifiedFileCount":"1","status":"M","submitter":"??"}]
