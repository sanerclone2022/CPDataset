[{"authorTime":"2020-06-30 00:07:53","codes":[{"authorDate":"2020-06-30 00:07:53","commitOrder":1,"curCode":"    public void testEntrySpanRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.RPCFramework)\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"downstream-service\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"downstream-instance\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n    }\n","date":"2020-06-30 00:07:53","endLine":227,"groupId":"4217","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEntrySpanRef","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b9/441891431ac84532a772d461466fb5005d7154.src","preCode":"    public void testEntrySpanRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.RPCFramework)\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"downstream-service\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"downstream-instance\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListenerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"B"},{"authorDate":"2020-06-30 00:07:53","commitOrder":1,"curCode":"    public void testEntrySpanMQRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.MQ)\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"127.0.0.1\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"127.0.0.1\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n    }\n","date":"2020-06-30 00:07:53","endLine":286,"groupId":"4217","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEntrySpanMQRef","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b9/441891431ac84532a772d461466fb5005d7154.src","preCode":"    public void testEntrySpanMQRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.MQ)\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"127.0.0.1\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"127.0.0.1\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListenerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"B"}],"commitId":"a93f1b3c3cd446fb1154c67a7cc9d276573795e9","commitMessage":"@@@Support `logic-endpoint` series tag(s). (#4985)\n\n* Support `logic-endpoint` series tag(s).\n\n* Enhance the plugin dev doc.\n\n* Update Java-Plugin-Development-Guide.md\n\nfix punctuation\n\nCo-authored-by: caoyixiong <32847163+IanCao@users.noreply.github.com>","date":"2020-06-30 00:07:53","modifiedFileCount":"3","status":"B","submitter":"?? Wu Sheng"},{"authorTime":"2020-06-30 20:59:38","codes":[{"authorDate":"2020-06-30 00:07:53","commitOrder":2,"curCode":"    public void testEntrySpanRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.RPCFramework)\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"downstream-service\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"downstream-instance\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n    }\n","date":"2020-06-30 00:07:53","endLine":227,"groupId":"4217","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEntrySpanRef","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b9/441891431ac84532a772d461466fb5005d7154.src","preCode":"    public void testEntrySpanRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.RPCFramework)\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"downstream-service\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"downstream-instance\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListenerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"N"},{"authorDate":"2020-06-30 20:59:38","commitOrder":2,"curCode":"    public void testEntrySpanMQRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.MQ)\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"127.0.0.1\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"127.0.0.1\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(\"downstream-service\", endpointRelation.getServiceName());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n    }\n","date":"2020-06-30 20:59:38","endLine":287,"groupId":"4217","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEntrySpanMQRef","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b7/15e7c55a702fceeb355c4b093994a0c88af818.src","preCode":"    public void testEntrySpanMQRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.MQ)\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"127.0.0.1\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"127.0.0.1\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListenerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"}],"commitId":"ea6be5b6457000408b00de6797ef6450e7b10f29","commitMessage":"@@@Fix endpoint dependency bug in MQ and uninstrumented proxy cases.  and support endpoint dependency(v2 of endpoint topology case). (#4995)\n\n","date":"2020-06-30 20:59:38","modifiedFileCount":"5","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-06-30 20:59:38","codes":[{"authorDate":"2020-11-01 09:48:48","commitOrder":3,"curCode":"    public void testEntrySpanRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.RPCFramework)\n                                          .addTags(KeyStringValuePair.newBuilder()\n                                                                     .setKey(\"http.method\")\n                                                                     .setValue(\"GET\")\n                                                                     .build())\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"downstream-service\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"downstream-instance\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n        \r\n        Assert.assertEquals(\"http.method:GET\", all.getTags().get(0));\n        Assert.assertEquals(\"http.method:GET\", service.getTags().get(0));\n        Assert.assertEquals(\"http.method:GET\", serviceInstance.getTags().get(0));\n        Assert.assertEquals(\"http.method:GET\", endpoint.getTags().get(0));\n    }\n","date":"2020-11-01 09:48:48","endLine":238,"groupId":"4217","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testEntrySpanRef","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/0b/443ebf83b269f1fff7cbeeed82e7dea225b727.src","preCode":"    public void testEntrySpanRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.RPCFramework)\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"downstream-service\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"downstream-instance\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListenerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"},{"authorDate":"2020-06-30 20:59:38","commitOrder":3,"curCode":"    public void testEntrySpanMQRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.MQ)\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"127.0.0.1\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"127.0.0.1\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(\"downstream-service\", endpointRelation.getServiceName());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n    }\n","date":"2020-06-30 20:59:38","endLine":287,"groupId":"4217","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testEntrySpanMQRef","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b7/15e7c55a702fceeb355c4b093994a0c88af818.src","preCode":"    public void testEntrySpanMQRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.MQ)\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"127.0.0.1\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"127.0.0.1\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(\"downstream-service\", endpointRelation.getServiceName());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListenerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"N"}],"commitId":"9b6386f31c16b6129c3284c1326a66ce88ee8a6e","commitMessage":"@@@support oal list includes and excludes & add tags to some source (#5739)\n\n* add oal excludes and includes to support tags\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>","date":"2020-11-01 09:48:48","modifiedFileCount":"8","status":"M","submitter":"Evan"},{"authorTime":"2021-06-19 20:20:37","codes":[{"authorDate":"2021-06-19 20:20:37","commitOrder":4,"curCode":"    public void testEntrySpanRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.RPCFramework)\n                                          .addTags(KeyStringValuePair.newBuilder()\n                                                                     .setKey(\"http.method\")\n                                                                     .setValue(\"GET\")\n                                                                     .build())\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<ISource> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"downstream-service\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"downstream-instance\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n        \r\n        Assert.assertEquals(\"http.method:GET\", all.getTags().get(0));\n        Assert.assertEquals(\"http.method:GET\", service.getTags().get(0));\n        Assert.assertEquals(\"http.method:GET\", serviceInstance.getTags().get(0));\n        Assert.assertEquals(\"http.method:GET\", endpoint.getTags().get(0));\n    }\n","date":"2021-06-19 20:20:37","endLine":238,"groupId":"10896","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testEntrySpanRef","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5d/37e709221302bd990d987e42cf6aa0b0e7b6c4.src","preCode":"    public void testEntrySpanRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.RPCFramework)\n                                          .addTags(KeyStringValuePair.newBuilder()\n                                                                     .setKey(\"http.method\")\n                                                                     .setValue(\"GET\")\n                                                                     .build())\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"downstream-service\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"downstream-instance\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n        \r\n        Assert.assertEquals(\"http.method:GET\", all.getTags().get(0));\n        Assert.assertEquals(\"http.method:GET\", service.getTags().get(0));\n        Assert.assertEquals(\"http.method:GET\", serviceInstance.getTags().get(0));\n        Assert.assertEquals(\"http.method:GET\", endpoint.getTags().get(0));\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListenerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"},{"authorDate":"2021-06-19 20:20:37","commitOrder":4,"curCode":"    public void testEntrySpanMQRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.MQ)\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<ISource> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"127.0.0.1\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"127.0.0.1\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(\"downstream-service\", endpointRelation.getServiceName());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n    }\n","date":"2021-06-19 20:20:37","endLine":298,"groupId":"10896","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testEntrySpanMQRef","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5d/37e709221302bd990d987e42cf6aa0b0e7b6c4.src","preCode":"    public void testEntrySpanMQRef() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/springMVC\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(true)\n                                          .setSpanType(SpanType.Entry)\n                                          .setSpanLayer(SpanLayer.MQ)\n                                          .addRefs(\n                                              SegmentReference.newBuilder()\n                                                              .setRefType(RefType.CrossProcess)\n                                                              .setParentService(\"downstream-service\")\n                                                              .setParentServiceInstance(\"downstream-instance\")\n                                                              .setParentEndpoint(\"downstream-endpoint\")\n                                                              .setNetworkAddressUsedAtPeer(\"127.0.0.1\")\n                                                              .build()\n                                          )\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseEntry(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(7, receivedSources.size());\n        final All all = (All) receivedSources.get(0);\n        final Service service = (Service) receivedSources.get(1);\n        final ServiceInstance serviceInstance = (ServiceInstance) receivedSources.get(2);\n        final Endpoint endpoint = (Endpoint) receivedSources.get(3);\n        final ServiceRelation serviceRelation = (ServiceRelation) receivedSources.get(4);\n        final ServiceInstanceRelation serviceInstanceRelation = (ServiceInstanceRelation) receivedSources.get(5);\n        final EndpointRelation endpointRelation = (EndpointRelation) receivedSources.get(6);\n        Assert.assertEquals(\"mock-service\", service.getName());\n        Assert.assertEquals(\"mock-instance\", serviceInstance.getName());\n        Assert.assertEquals(\"/springMVC\", endpoint.getName());\n        Assert.assertEquals(\"127.0.0.1\", serviceRelation.getSourceServiceName());\n        Assert.assertEquals(service.getName(), serviceRelation.getDestServiceName());\n        Assert.assertEquals(\"127.0.0.1\", serviceInstanceRelation.getSourceServiceInstanceName());\n        Assert.assertEquals(serviceInstance.getName(), serviceInstanceRelation.getDestServiceInstanceName());\n        Assert.assertEquals(\"downstream-endpoint\", endpointRelation.getEndpoint());\n        Assert.assertEquals(\"downstream-service\", endpointRelation.getServiceName());\n        Assert.assertEquals(endpoint.getName(), endpointRelation.getChildEndpoint());\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListenerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"}],"commitId":"528ee6de4010df28d31443b2d02702649025095d","commitMessage":"@@@OAL supports generating metrics from events (#7134)\n\n* OAL supports generating metrics from events\n\n* Add new dashboard for event metrics\n\n* Add some docs for event metrics","date":"2021-06-19 20:20:37","modifiedFileCount":"16","status":"M","submitter":"kezhenxu94"}]
