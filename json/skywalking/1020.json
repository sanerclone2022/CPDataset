[{"authorTime":"2020-03-16 23:45:14","codes":[{"authorDate":"2020-03-16 23:45:14","commitOrder":1,"curCode":"    public Topology topo(final TopoQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"topo.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end());\n        final ResponseEntity<GQLResponse<TopologyResponse>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<TopologyResponse>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getTopo();\n    }\n","date":"2020-03-16 23:45:14","endLine":181,"groupId":"2785","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"topo","params":"(finalTopoQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/32/b2771ffe528ac0d88df174026e1110ca22af09.src","preCode":"    public Topology topo(final TopoQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"topo.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end());\n        final ResponseEntity<GQLResponse<TopologyResponse>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<TopologyResponse>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getTopo();\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/SimpleQueryClient.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"B"},{"authorDate":"2020-03-16 23:45:14","commitOrder":1,"curCode":"    public ServiceInstanceTopology serviceInstanceTopo(final ServiceInstanceTopologyQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"instanceTopo.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{clientServiceId}\", query.clientServiceId())\n                                            .replace(\"{serverServiceId}\", query.serverServiceId());\n        final ResponseEntity<GQLResponse<ServiceInstanceTopologyResponse>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ServiceInstanceTopologyResponse>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getTopo();\n    }\n","date":"2020-03-16 23:45:14","endLine":205,"groupId":"2785","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"serviceInstanceTopo","params":"(finalServiceInstanceTopologyQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/32/b2771ffe528ac0d88df174026e1110ca22af09.src","preCode":"    public ServiceInstanceTopology serviceInstanceTopo(final ServiceInstanceTopologyQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"instanceTopo.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{clientServiceId}\", query.clientServiceId())\n                                            .replace(\"{serverServiceId}\", query.serverServiceId());\n        final ResponseEntity<GQLResponse<ServiceInstanceTopologyResponse>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ServiceInstanceTopologyResponse>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getTopo();\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/SimpleQueryClient.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"B"}],"commitId":"dcd66ee6e940bdc9a7ecf90415929bfd48a3a284","commitMessage":"@@@Rewrite the E2E test framework and tests (#4510)\n\nMotivation:\n\nAccording the feedback from the community.  the e2e tests are hard for\nthem to understand and get them started.  so this pull request aims to\nrewrite the e2e tests with some improvements:\n\n- debuggable locally.  now you can run every individual case directly\ninside the IDE.  just like running a plain unit test.\n\n- same functionalities of multiple counterparts share the same codes. \ncases like different storages and cluster coordinators share the same\ncodes.  easy to add more similar cases.\n\n- the \"end\" now extends to the Doccker images.  meaning that some bugs\nlike #4483 and #4471 can be more easily and early to be discovered.\n\n- codes style and license headers are checked\n\nModifications:\n\n- adopt jupeter (a.k.a junit 5).  testcontainers as the new test\nframework.  all containers are orchestrated by docker-compose.yml. \nwell-known technology that developers should be familiar with.\n\n- rewrite all test cases and verify them.\n\n- reorganize the workflows in GitHub Actions.\n\nResult:\n\n- new e2e test should be easy to add.\n\n- closes https://github.com/apache/skywalking/issues/4472","date":"2020-03-16 23:45:14","modifiedFileCount":"3","status":"B","submitter":"kezhenxu94"},{"authorTime":"2020-03-16 23:45:14","codes":[{"authorDate":"2020-10-15 23:20:46","commitOrder":2,"curCode":"    public Topology topo(final TopoQuery query) throws Exception {\n        LOGGER.info(\"topo {}\", query);\n\n        final URL queryFileUrl = Resources.getResource(\"topo.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end());\n\n        LOGGER.info(\"query string {}\", queryString);\n\n        try {\n            final ResponseEntity<GQLResponse<TopologyResponse>> responseEntity = restTemplate.exchange(\n                new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n                new ParameterizedTypeReference<GQLResponse<TopologyResponse>>() {\n                }\n            );\n\n            LOGGER.info(\"response {}\", responseEntity);\n\n            if (responseEntity.getStatusCode() != HttpStatus.OK) {\n                throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n            }\n\n            return Objects.requireNonNull(responseEntity.getBody()).getData().getTopo();\n        } catch (Exception e) {\n            LOGGER.error(e.getMessage(), e);\n        }\n        return new Topology();\n    }\n","date":"2020-10-15 23:20:46","endLine":235,"groupId":"1020","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"topo","params":"(finalTopoQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/54/fe975e68be46c364f187a05de1347c8b8f0aac.src","preCode":"    public Topology topo(final TopoQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"topo.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end());\n        final ResponseEntity<GQLResponse<TopologyResponse>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<TopologyResponse>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getTopo();\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/SimpleQueryClient.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2020-03-16 23:45:14","commitOrder":2,"curCode":"    public ServiceInstanceTopology serviceInstanceTopo(final ServiceInstanceTopologyQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"instanceTopo.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{clientServiceId}\", query.clientServiceId())\n                                            .replace(\"{serverServiceId}\", query.serverServiceId());\n        final ResponseEntity<GQLResponse<ServiceInstanceTopologyResponse>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ServiceInstanceTopologyResponse>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getTopo();\n    }\n","date":"2020-03-16 23:45:14","endLine":205,"groupId":"1020","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"serviceInstanceTopo","params":"(finalServiceInstanceTopologyQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/32/b2771ffe528ac0d88df174026e1110ca22af09.src","preCode":"    public ServiceInstanceTopology serviceInstanceTopo(final ServiceInstanceTopologyQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"instanceTopo.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{clientServiceId}\", query.clientServiceId())\n                                            .replace(\"{serverServiceId}\", query.serverServiceId());\n        final ResponseEntity<GQLResponse<ServiceInstanceTopologyResponse>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ServiceInstanceTopologyResponse>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getTopo();\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/SimpleQueryClient.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"N"}],"commitId":"239eaa01fdf0da2612c5245fe479b7f765408afb","commitMessage":"@@@test: set up ALS E2E test (#5675)\n\n","date":"2020-10-15 23:20:46","modifiedFileCount":"6","status":"M","submitter":"kezhenxu94"}]
