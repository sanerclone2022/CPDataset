[{"authorTime":"2019-06-07 12:01:24","codes":[{"authorDate":"2019-07-27 22:02:40","commitOrder":2,"curCode":"    private void loadConfig(ApplicationConfiguration configuration) throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        Properties properties = new Properties();\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> {\n                                properties.put(key, value);\n                                final Object replaceValue = yaml.load(PropertyPlaceholderHelper.INSTANCE\n                                    .replacePlaceholders(value + \"\", properties));\n                                if (replaceValue != null) {\n                                    properties.replace(key, replaceValue);\n                                }\n                            });\n                        }\n                        moduleConfiguration.addProviderConfiguration(name, properties);\n                    });\n                }\n            });\n        }\n    }\n","date":"2019-07-27 22:02:40","endLine":131,"groupId":"7047","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loadConfig","params":"(ApplicationConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c1/57652bc5f0c7e1610b2f66d6fecceb3f57f281.src","preCode":"    private void loadConfig(ApplicationConfiguration configuration) throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        Properties properties = new Properties();\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> {\n                                properties.put(key, value);\n                                final Object replaceValue = yaml.load(PropertyPlaceholderHelper.INSTANCE\n                                    .replacePlaceholders(value + \"\", properties));\n                                if (replaceValue != null) {\n                                    properties.replace(key, replaceValue);\n                                }\n                            });\n                        }\n                        moduleConfiguration.addProviderConfiguration(name, properties);\n                    });\n                }\n            });\n        }\n    }\n","realPath":"oap-server/server-configuration/configuration-etcd/src/test/java/org/apache/skywalking/oap/server/configuration/etcd/ITEtcdConfigurationTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"},{"authorDate":"2019-06-07 12:01:24","commitOrder":2,"curCode":"    private void loadConfig(ApplicationConfiguration configuration) throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        Properties properties = new Properties();\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> {\n                                properties.put(key, value);\n                                final Object replaceValue = yaml.load(PropertyPlaceholderHelper.INSTANCE\n                                    .replacePlaceholders(value + \"\", properties));\n                                if (replaceValue != null) {\n                                    properties.replace(key, replaceValue);\n                                }\n                            });\n                        }\n                        moduleConfiguration.addProviderConfiguration(name, properties);\n                    });\n                }\n            });\n        }\n    }\n","date":"2019-06-07 12:01:24","endLine":112,"groupId":"7047","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadConfig","params":"(ApplicationConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/97/f711e364bf8edfe7d4348028372195df3b2b1a.src","preCode":"    private void loadConfig(ApplicationConfiguration configuration) throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        Properties properties = new Properties();\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> {\n                                properties.put(key, value);\n                                final Object replaceValue = yaml.load(PropertyPlaceholderHelper.INSTANCE\n                                    .replacePlaceholders(value + \"\", properties));\n                                if (replaceValue != null) {\n                                    properties.replace(key, replaceValue);\n                                }\n                            });\n                        }\n                        moduleConfiguration.addProviderConfiguration(name, properties);\n                    });\n                }\n            });\n        }\n    }\n","realPath":"oap-server/server-configuration/configuration-nacos/src/test/java/org/apache/skywalking/oap/server/configuration/nacos/ITNacosConfigurationTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"NB"}],"commitId":"76d91635eeeb07ff5f5ff665a1cba88b5ec0de8d","commitMessage":"@@@Support etcd configuration. (#2973)\n\n* Support etcd configuration.\n","date":"2019-07-27 22:02:40","modifiedFileCount":"0","status":"M","submitter":"Alan Lau"},{"authorTime":"2019-06-07 12:01:24","codes":[{"authorDate":"2021-07-05 11:23:11","commitOrder":3,"curCode":"    private static void loadConfig(ApplicationConfiguration configuration) throws FileNotFoundException {\n        final Yaml yaml = new Yaml();\n\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(\n                        moduleName);\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        Properties properties = new Properties();\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> {\n                                properties.put(key, value);\n                                final Object replaceValue = yaml.load(\n                                    PropertyPlaceholderHelper.INSTANCE.replacePlaceholders(value + \"\", properties));\n                                if (replaceValue != null) {\n                                    properties.replace(key, replaceValue);\n                                }\n                            });\n                        }\n                        moduleConfiguration.addProviderConfiguration(name, properties);\n                    });\n                }\n            });\n        }\n    }\n","date":"2021-07-05 11:23:11","endLine":139,"groupId":"10623","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"loadConfig","params":"(ApplicationConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b2/072091e76f4ecbf2b57926a5f63a455477f2b1.src","preCode":"    private void loadConfig(ApplicationConfiguration configuration) throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        Properties properties = new Properties();\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> {\n                                properties.put(key, value);\n                                final Object replaceValue = yaml.load(PropertyPlaceholderHelper.INSTANCE.replacePlaceholders(value + \"\", properties));\n                                if (replaceValue != null) {\n                                    properties.replace(key, replaceValue);\n                                }\n                            });\n                        }\n                        moduleConfiguration.addProviderConfiguration(name, properties);\n                    });\n                }\n            });\n        }\n    }\n","realPath":"oap-server/server-configuration/configuration-etcd/src/test/java/org/apache/skywalking/oap/server/configuration/etcd/ITEtcdConfigurationTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2019-06-07 12:01:24","commitOrder":3,"curCode":"    private void loadConfig(ApplicationConfiguration configuration) throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        Properties properties = new Properties();\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> {\n                                properties.put(key, value);\n                                final Object replaceValue = yaml.load(PropertyPlaceholderHelper.INSTANCE\n                                    .replacePlaceholders(value + \"\", properties));\n                                if (replaceValue != null) {\n                                    properties.replace(key, replaceValue);\n                                }\n                            });\n                        }\n                        moduleConfiguration.addProviderConfiguration(name, properties);\n                    });\n                }\n            });\n        }\n    }\n","date":"2019-06-07 12:01:24","endLine":112,"groupId":"10623","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadConfig","params":"(ApplicationConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/97/f711e364bf8edfe7d4348028372195df3b2b1a.src","preCode":"    private void loadConfig(ApplicationConfiguration configuration) throws FileNotFoundException {\n        Reader applicationReader = ResourceUtils.read(\"application.yml\");\n        Map<String, Map<String, Map<String, ?>>> moduleConfig = yaml.loadAs(applicationReader, Map.class);\n        if (CollectionUtils.isNotEmpty(moduleConfig)) {\n            moduleConfig.forEach((moduleName, providerConfig) -> {\n                if (providerConfig.size() > 0) {\n                    ApplicationConfiguration.ModuleConfiguration moduleConfiguration = configuration.addModule(moduleName);\n                    providerConfig.forEach((name, propertiesConfig) -> {\n                        Properties properties = new Properties();\n                        if (propertiesConfig != null) {\n                            propertiesConfig.forEach((key, value) -> {\n                                properties.put(key, value);\n                                final Object replaceValue = yaml.load(PropertyPlaceholderHelper.INSTANCE\n                                    .replacePlaceholders(value + \"\", properties));\n                                if (replaceValue != null) {\n                                    properties.replace(key, replaceValue);\n                                }\n                            });\n                        }\n                        moduleConfiguration.addProviderConfiguration(name, properties);\n                    });\n                }\n            });\n        }\n    }\n","realPath":"oap-server/server-configuration/configuration-nacos/src/test/java/org/apache/skywalking/oap/server/configuration/nacos/ITNacosConfigurationTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"5dd56a5ca45c1bc423af71dc0829aed1221621ac","commitMessage":"@@@Upgrade etcd cluster coordinator and dynamic configuration to v3.x (#7215)\n\n","date":"2021-07-05 11:23:11","modifiedFileCount":"10","status":"M","submitter":"Daming"}]
