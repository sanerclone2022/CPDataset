[{"authorTime":"2020-04-19 20:10:59","codes":[{"authorDate":"2020-04-19 20:10:59","commitOrder":2,"curCode":"    public InsertRequest prepareBatchInsert(Model model, Record record) throws IOException {\n        final long timestamp = TimeBucket.getTimestamp(record.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, record, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach((field, tag) -> {\n            request.addFieldAsTag(field, tag);\n        });\n        return request;\n    }\n","date":"2020-04-19 20:10:59","endLine":56,"groupId":"2598","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareBatchInsert","params":"(Modelmodel@Recordrecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/63/739c1708d30e2414d76f136a97602d9fdfc8dc.src","preCode":"    public InsertRequest prepareBatchInsert(Model model, Record record) throws IOException {\n        final long timestamp = TimeBucket.getTimestamp(record.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, record, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach((field, tag) -> {\n            request.addFieldAsTag(field, tag);\n        });\n        return request;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/RecordDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"MB"},{"authorDate":"2020-04-19 20:10:59","commitOrder":2,"curCode":"    public void insert(final Model model, final NoneStream noneStream) throws IOException {\n        final long timestamp = TimeBucket.getTimestamp(noneStream.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, noneStream, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach((field, tag) -> {\n            request.addFieldAsTag(field, tag);\n        });\n        client.write(request.getPoint());\n    }\n","date":"2020-04-19 20:10:59","endLine":55,"groupId":"4988","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"insert","params":"(finalModelmodel@finalNoneStreamnoneStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3d/89e419fa0a28d99ebe5036c493919504febbb3.src","preCode":"    public void insert(final Model model, final NoneStream noneStream) throws IOException {\n        final long timestamp = TimeBucket.getTimestamp(noneStream.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, noneStream, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach((field, tag) -> {\n            request.addFieldAsTag(field, tag);\n        });\n        client.write(request.getPoint());\n    }\n","realPath":"oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/NoneStreamDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"MB"}],"commitId":"28530cd79d6d91443c0584fade1cbb79e137a8ed","commitMessage":"@@@Upgrade the InfluxDB storage-plugin to protocol V3 (#4641)\n\n\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>\nCo-authored-by: kezhenxu94 <kezhenxu94@apache.org>","date":"2020-04-19 20:10:59","modifiedFileCount":"16","status":"M","submitter":"Daming"},{"authorTime":"2020-04-19 20:10:59","codes":[{"authorDate":"2020-08-11 07:24:40","commitOrder":3,"curCode":"    public InsertRequest prepareBatchInsert(Model model, Record record) throws IOException {\n        final long timestamp = TimeBucket.getTimestamp(record.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, record, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach((field, tag) -> {\n            request.addFieldAsTag(field, tag);\n        });\n\n        if (SegmentRecord.INDEX_NAME.equals(model.getName())) {\n            Map<String, List<SpanTag>> collect = ((SegmentRecord) record).getTagsRawData()\n                                                                         .stream()\n                                                                         .collect(\n                                                                             Collectors.groupingBy(SpanTag::getKey));\n            collect.entrySet().forEach(e -> {\n                request.tag(e.getKey(), \"'\" + Joiner.on(\"'\")\n                                              .join(e.getValue()\n                                                     .stream()\n                                                     .map(SpanTag::getValue)\n                                                     .collect(Collectors.toSet())) + \"'\");\n            });\n        }\n        return request;\n    }\n","date":"2020-08-11 07:24:40","endLine":76,"groupId":"2598","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareBatchInsert","params":"(Modelmodel@Recordrecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a3/d1bc7e71d99f9303e3db2249be32e8a32a3591.src","preCode":"    public InsertRequest prepareBatchInsert(Model model, Record record) throws IOException {\n        final long timestamp = TimeBucket.getTimestamp(record.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, record, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach((field, tag) -> {\n            request.addFieldAsTag(field, tag);\n        });\n        return request;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/RecordDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2020-04-19 20:10:59","commitOrder":3,"curCode":"    public void insert(final Model model, final NoneStream noneStream) throws IOException {\n        final long timestamp = TimeBucket.getTimestamp(noneStream.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, noneStream, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach((field, tag) -> {\n            request.addFieldAsTag(field, tag);\n        });\n        client.write(request.getPoint());\n    }\n","date":"2020-04-19 20:10:59","endLine":55,"groupId":"4988","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"insert","params":"(finalModelmodel@finalNoneStreamnoneStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3d/89e419fa0a28d99ebe5036c493919504febbb3.src","preCode":"    public void insert(final Model model, final NoneStream noneStream) throws IOException {\n        final long timestamp = TimeBucket.getTimestamp(noneStream.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, noneStream, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach((field, tag) -> {\n            request.addFieldAsTag(field, tag);\n        });\n        client.write(request.getPoint());\n    }\n","realPath":"oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/NoneStreamDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"}],"commitId":"7f7e96b088d3cb0a19f8ddeafe5ede9764ec2eda","commitMessage":"@@@[IMPORTANT] Query traces with tags as condition (#5270)\n\n","date":"2020-08-11 07:24:40","modifiedFileCount":"39","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-12-17 22:54:36","codes":[{"authorDate":"2020-12-17 22:54:36","commitOrder":4,"curCode":"    public InsertRequest prepareBatchInsert(Model model, Record record) {\n        final long timestamp = TimeBucket.getTimestamp(record.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE\n            + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, record, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach(request::addFieldAsTag);\n\n        if (SegmentRecord.INDEX_NAME.equals(model.getName())) {\n            Map<String, List<SpanTag>> collect = ((SegmentRecord) record).getTagsRawData()\n                                                                         .stream()\n                                                                         .collect(\n                                                                             Collectors.groupingBy(SpanTag::getKey));\n            collect.forEach((key, value) -> request.tag(\n                key,\n                \"'\" + Joiner.on(\"'\").join(value.stream().map(SpanTag::getValue).collect(Collectors.toSet())) + \"'\"\n            ));\n        }\n        return request;\n    }\n","date":"2020-12-17 22:54:36","endLine":69,"groupId":"2598","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareBatchInsert","params":"(Modelmodel@Recordrecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8c/cfe874bf2124a901f112f6858b9b94a43a3c63.src","preCode":"    public InsertRequest prepareBatchInsert(Model model, Record record) throws IOException {\n        final long timestamp = TimeBucket.getTimestamp(record.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, record, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach((field, tag) -> {\n            request.addFieldAsTag(field, tag);\n        });\n\n        if (SegmentRecord.INDEX_NAME.equals(model.getName())) {\n            Map<String, List<SpanTag>> collect = ((SegmentRecord) record).getTagsRawData()\n                                                                         .stream()\n                                                                         .collect(\n                                                                             Collectors.groupingBy(SpanTag::getKey));\n            collect.entrySet().forEach(e -> {\n                request.tag(e.getKey(), \"'\" + Joiner.on(\"'\")\n                                              .join(e.getValue()\n                                                     .stream()\n                                                     .map(SpanTag::getValue)\n                                                     .collect(Collectors.toSet())) + \"'\");\n            });\n        }\n        return request;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/RecordDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-12-17 22:54:36","commitOrder":4,"curCode":"    public void insert(final Model model, final NoneStream noneStream) {\n        final long timestamp = TimeBucket.getTimestamp(noneStream.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, noneStream, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach(request::addFieldAsTag);\n        client.write(request.getPoint());\n    }\n","date":"2020-12-17 22:54:36","endLine":52,"groupId":"4988","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"insert","params":"(finalModelmodel@finalNoneStreamnoneStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b9/f684c0c78e5a597f887ee56dddea0f16c5d074.src","preCode":"    public void insert(final Model model, final NoneStream noneStream) throws IOException {\n        final long timestamp = TimeBucket.getTimestamp(noneStream.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, noneStream, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach((field, tag) -> {\n            request.addFieldAsTag(field, tag);\n        });\n        client.write(request.getPoint());\n    }\n","realPath":"oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/NoneStreamDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"}],"commitId":"8d33f0275ed958ddb4d45a1846a2ae1bb0900ddb","commitMessage":"@@@chore: code polish (#6025)\n\n","date":"2020-12-17 22:54:36","modifiedFileCount":"22","status":"M","submitter":"Daming"},{"authorTime":"2020-12-17 22:54:36","codes":[{"authorDate":"2021-01-14 09:49:11","commitOrder":5,"curCode":"    public InsertRequest prepareBatchInsert(Model model, Record record) {\n        final long timestamp = TimeBucket.getTimestamp(record.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE\n            + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, record, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach(request::addFieldAsTag);\n        List<Tag> rawTags = null;\n        if (SegmentRecord.INDEX_NAME.equals(model.getName())) {\n            rawTags = ((SegmentRecord) record).getTagsRawData();\n        } else if (LogRecord.INDEX_NAME.equals(model.getName())) {\n            rawTags = ((LogRecord) record).getTags();\n        }\n        if (nonNull(rawTags)) {\n            Map<String, List<Tag>> collect = rawTags.stream()\n                                                    .collect(\n                                                        Collectors.groupingBy(Tag::getKey));\n            collect.forEach((key, value) -> request.tag(\n                key,\n                \"'\" + Joiner.on(\"'\").join(value.stream().map(Tag::getValue).collect(Collectors.toSet())) + \"'\"\n            ));\n        }\n        return request;\n    }\n","date":"2021-01-14 09:49:11","endLine":76,"groupId":"6279","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareBatchInsert","params":"(Modelmodel@Recordrecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c3/528d301baeba09b01fdc081c95b86159284019.src","preCode":"    public InsertRequest prepareBatchInsert(Model model, Record record) {\n        final long timestamp = TimeBucket.getTimestamp(record.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE\n            + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, record, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach(request::addFieldAsTag);\n\n        if (SegmentRecord.INDEX_NAME.equals(model.getName())) {\n            Map<String, List<SpanTag>> collect = ((SegmentRecord) record).getTagsRawData()\n                                                                         .stream()\n                                                                         .collect(\n                                                                             Collectors.groupingBy(SpanTag::getKey));\n            collect.forEach((key, value) -> request.tag(\n                key,\n                \"'\" + Joiner.on(\"'\").join(value.stream().map(SpanTag::getValue).collect(Collectors.toSet())) + \"'\"\n            ));\n        }\n        return request;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/RecordDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-12-17 22:54:36","commitOrder":5,"curCode":"    public void insert(final Model model, final NoneStream noneStream) {\n        final long timestamp = TimeBucket.getTimestamp(noneStream.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, noneStream, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach(request::addFieldAsTag);\n        client.write(request.getPoint());\n    }\n","date":"2020-12-17 22:54:36","endLine":52,"groupId":"4988","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"insert","params":"(finalModelmodel@finalNoneStreamnoneStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b9/f684c0c78e5a597f887ee56dddea0f16c5d074.src","preCode":"    public void insert(final Model model, final NoneStream noneStream) {\n        final long timestamp = TimeBucket.getTimestamp(noneStream.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, noneStream, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach(request::addFieldAsTag);\n        client.write(request.getPoint());\n    }\n","realPath":"oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/NoneStreamDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"}],"commitId":"15452025c65dd6934bd9d6c8a930961b0f960594","commitMessage":"@@@Log collecting and query implementation (#6120)\n\n","date":"2021-01-14 09:49:11","modifiedFileCount":"51","status":"M","submitter":"zhang-wei"},{"authorTime":"2020-12-17 22:54:36","codes":[{"authorDate":"2021-04-25 17:22:43","commitOrder":6,"curCode":"    public InsertRequest prepareBatchInsert(Model model, Record record) {\n        final long timestamp = TimeBucket.getTimestamp(record.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE\n            + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, record, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach(request::addFieldAsTag);\n        List<Tag> rawTags = null;\n        if (SegmentRecord.INDEX_NAME.equals(model.getName())) {\n            rawTags = ((SegmentRecord) record).getTagsRawData();\n        } else if (LogRecord.INDEX_NAME.equals(model.getName())) {\n            rawTags = ((LogRecord) record).getTags();\n        } else if (AlarmRecord.INDEX_NAME.equals(model.getName())) {\n            rawTags = ((AlarmRecord) record).getTags();\n        }\n        if (nonNull(rawTags)) {\n            Map<String, List<Tag>> collect = rawTags.stream()\n                                                    .collect(\n                                                        Collectors.groupingBy(Tag::getKey));\n            collect.forEach((key, value) -> request.tag(\n                key,\n                \"'\" + Joiner.on(\"'\").join(value.stream().map(Tag::getValue).collect(Collectors.toSet())) + \"'\"\n            ));\n        }\n        return request;\n    }\n","date":"2021-04-25 17:22:43","endLine":79,"groupId":"10851","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"prepareBatchInsert","params":"(Modelmodel@Recordrecord)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5c/edff65f1d9dea023eb45a6fe62724e581a58bc.src","preCode":"    public InsertRequest prepareBatchInsert(Model model, Record record) {\n        final long timestamp = TimeBucket.getTimestamp(record.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE\n            + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, record, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach(request::addFieldAsTag);\n        List<Tag> rawTags = null;\n        if (SegmentRecord.INDEX_NAME.equals(model.getName())) {\n            rawTags = ((SegmentRecord) record).getTagsRawData();\n        } else if (LogRecord.INDEX_NAME.equals(model.getName())) {\n            rawTags = ((LogRecord) record).getTags();\n        }\n        if (nonNull(rawTags)) {\n            Map<String, List<Tag>> collect = rawTags.stream()\n                                                    .collect(\n                                                        Collectors.groupingBy(Tag::getKey));\n            collect.forEach((key, value) -> request.tag(\n                key,\n                \"'\" + Joiner.on(\"'\").join(value.stream().map(Tag::getValue).collect(Collectors.toSet())) + \"'\"\n            ));\n        }\n        return request;\n    }\n","realPath":"oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/RecordDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2020-12-17 22:54:36","commitOrder":6,"curCode":"    public void insert(final Model model, final NoneStream noneStream) {\n        final long timestamp = TimeBucket.getTimestamp(noneStream.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, noneStream, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach(request::addFieldAsTag);\n        client.write(request.getPoint());\n    }\n","date":"2020-12-17 22:54:36","endLine":52,"groupId":"10851","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"insert","params":"(finalModelmodel@finalNoneStreamnoneStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b9/f684c0c78e5a597f887ee56dddea0f16c5d074.src","preCode":"    public void insert(final Model model, final NoneStream noneStream) {\n        final long timestamp = TimeBucket.getTimestamp(noneStream.getTimeBucket(), model.getDownsampling())\n            * PADDING_SIZE + SUFFIX.getAndIncrement();\n\n        final InfluxInsertRequest request = new InfluxInsertRequest(model, noneStream, storageBuilder)\n            .time(timestamp, TimeUnit.NANOSECONDS);\n        TableMetaInfo.get(model.getName()).getStorageAndTagMap().forEach(request::addFieldAsTag);\n        client.write(request.getPoint());\n    }\n","realPath":"oap-server/server-storage-plugin/storage-influxdb-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/influxdb/base/NoneStreamDAO.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"}],"commitId":"7a533313676579da1321c0177c10fc237a052cbe","commitMessage":"@@@Support alarm tags (#6820)\n\n","date":"2021-04-25 17:22:43","modifiedFileCount":"42","status":"M","submitter":"liqiangz"}]
