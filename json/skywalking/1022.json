[{"authorTime":"2020-06-22 09:10:51","codes":[{"authorDate":"2020-06-22 09:10:51","commitOrder":1,"curCode":"    public ReadMetrics readMetrics(final ReadMetricsQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"read-metrics.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{metricsName}\", query.metricsName())\n                                            .replace(\"{serviceName}\", query.serviceName())\n                                            .replace(\"{instanceName}\", query.instanceName());\n        LOGGER.info(\"Query: {}\", queryString);\n        final ResponseEntity<GQLResponse<ReadMetricsData>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ReadMetricsData>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getReadMetricsValues();\n    }\n","date":"2020-06-22 09:10:51","endLine":287,"groupId":"6378","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"readMetrics","params":"(finalReadMetricsQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/52/87dc31635d9487f446d01b341cf84c7617de74.src","preCode":"    public ReadMetrics readMetrics(final ReadMetricsQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"read-metrics.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{metricsName}\", query.metricsName())\n                                            .replace(\"{serviceName}\", query.serviceName())\n                                            .replace(\"{instanceName}\", query.instanceName());\n        LOGGER.info(\"Query: {}\", queryString);\n        final ResponseEntity<GQLResponse<ReadMetricsData>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ReadMetricsData>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getReadMetricsValues();\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/SimpleQueryClient.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"B"},{"authorDate":"2020-06-22 09:10:51","commitOrder":1,"curCode":"    public List<ReadMetrics> readLabeledMetrics(final ReadMetricsQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"read-labeled-metrics.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{metricsName}\", query.metricsName())\n                                            .replace(\"{serviceName}\", query.serviceName())\n                                            .replace(\"{instanceName}\", query.instanceName());\n        LOGGER.info(\"Query: {}\", queryString);\n        final ResponseEntity<GQLResponse<ReadLabeledMetricsData>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ReadLabeledMetricsData>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getReadLabeledMetricsValues();\n    }\n","date":"2020-06-22 09:10:51","endLine":313,"groupId":"6378","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"readLabeledMetrics","params":"(finalReadMetricsQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/52/87dc31635d9487f446d01b341cf84c7617de74.src","preCode":"    public List<ReadMetrics> readLabeledMetrics(final ReadMetricsQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"read-labeled-metrics.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{metricsName}\", query.metricsName())\n                                            .replace(\"{serviceName}\", query.serviceName())\n                                            .replace(\"{instanceName}\", query.instanceName());\n        LOGGER.info(\"Query: {}\", queryString);\n        final ResponseEntity<GQLResponse<ReadLabeledMetricsData>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ReadLabeledMetricsData>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getReadLabeledMetricsValues();\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/SimpleQueryClient.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"B"}],"commitId":"e143ae62eb8a2300b124f345b235bb1e3eb3c139","commitMessage":"@@@Reduce the length of metric name (#4936)\n\n","date":"2020-06-22 09:10:51","modifiedFileCount":"5","status":"B","submitter":"Gao Hongtao"},{"authorTime":"2021-02-10 22:40:07","codes":[{"authorDate":"2020-06-22 09:10:51","commitOrder":2,"curCode":"    public ReadMetrics readMetrics(final ReadMetricsQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"read-metrics.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{metricsName}\", query.metricsName())\n                                            .replace(\"{serviceName}\", query.serviceName())\n                                            .replace(\"{instanceName}\", query.instanceName());\n        LOGGER.info(\"Query: {}\", queryString);\n        final ResponseEntity<GQLResponse<ReadMetricsData>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ReadMetricsData>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getReadMetricsValues();\n    }\n","date":"2020-06-22 09:10:51","endLine":287,"groupId":"6378","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"readMetrics","params":"(finalReadMetricsQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/52/87dc31635d9487f446d01b341cf84c7617de74.src","preCode":"    public ReadMetrics readMetrics(final ReadMetricsQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"read-metrics.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{metricsName}\", query.metricsName())\n                                            .replace(\"{serviceName}\", query.serviceName())\n                                            .replace(\"{instanceName}\", query.instanceName());\n        LOGGER.info(\"Query: {}\", queryString);\n        final ResponseEntity<GQLResponse<ReadMetricsData>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ReadMetricsData>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getReadMetricsValues();\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/SimpleQueryClient.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"N"},{"authorDate":"2021-02-10 22:40:07","commitOrder":2,"curCode":"    public List<ReadMetrics> readLabeledMetrics(final ReadLabeledMetricsQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"read-labeled-metrics.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{metricsName}\", query.metricsName())\n                                            .replace(\"{serviceName}\", query.serviceName())\n                                            .replace(\"{instanceName}\", query.instanceName())\n                                            .replace(\"{scope}\", query.scope())\n                                            .replace(\"{labels}\", query.labels().stream()\n                                                    .map(s -> \"\\\"\" + s + \"\\\"\").collect(Collectors.joining(\",\")));\n        LOGGER.info(\"Query: {}\", queryString);\n        final ResponseEntity<GQLResponse<ReadLabeledMetricsData>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ReadLabeledMetricsData>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getReadLabeledMetricsValues();\n    }\n","date":"2021-02-10 22:40:07","endLine":374,"groupId":"4120","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"readLabeledMetrics","params":"(finalReadLabeledMetricsQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b7/04bb6c42d00f9defb2def80582f3d64089d322.src","preCode":"    public List<ReadMetrics> readLabeledMetrics(final ReadMetricsQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"read-labeled-metrics.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{metricsName}\", query.metricsName())\n                                            .replace(\"{serviceName}\", query.serviceName())\n                                            .replace(\"{instanceName}\", query.instanceName());\n        LOGGER.info(\"Query: {}\", queryString);\n        final ResponseEntity<GQLResponse<ReadLabeledMetricsData>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ReadLabeledMetricsData>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getReadLabeledMetricsValues();\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/SimpleQueryClient.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"}],"commitId":"75f03acba7c6192aab6f008a0c1acc07c0560bd5","commitMessage":"@@@Adopt Zabbix protocol (#6176)\n\nHappy Chinese New Year !!","date":"2021-02-10 22:40:07","modifiedFileCount":"5","status":"M","submitter":"mrproliu"},{"authorTime":"2021-02-10 22:40:07","codes":[{"authorDate":"2021-02-20 16:11:44","commitOrder":3,"curCode":"    public ReadMetrics readMetrics(final ReadMetricsQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"read-metrics.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{metricsName}\", query.metricsName())\n                                            .replace(\"{serviceName}\", query.serviceName())\n                                            .replace(\"{instanceName}\", query.instanceName())\n                                            .replace(\"{scope}\", query.scope());\n        LOGGER.info(\"Query: {}\", queryString);\n        final ResponseEntity<GQLResponse<ReadMetricsData>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ReadMetricsData>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getReadMetricsValues();\n    }\n","date":"2021-02-20 16:11:44","endLine":346,"groupId":"1022","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"readMetrics","params":"(finalReadMetricsQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/1d/e1135e89050da514ab32fa9ee0e70d2c81b8ea.src","preCode":"    public ReadMetrics readMetrics(final ReadMetricsQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"read-metrics.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{metricsName}\", query.metricsName())\n                                            .replace(\"{serviceName}\", query.serviceName())\n                                            .replace(\"{instanceName}\", query.instanceName());\n        LOGGER.info(\"Query: {}\", queryString);\n        final ResponseEntity<GQLResponse<ReadMetricsData>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ReadMetricsData>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getReadMetricsValues();\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/SimpleQueryClient.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"},{"authorDate":"2021-02-10 22:40:07","commitOrder":3,"curCode":"    public List<ReadMetrics> readLabeledMetrics(final ReadLabeledMetricsQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"read-labeled-metrics.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{metricsName}\", query.metricsName())\n                                            .replace(\"{serviceName}\", query.serviceName())\n                                            .replace(\"{instanceName}\", query.instanceName())\n                                            .replace(\"{scope}\", query.scope())\n                                            .replace(\"{labels}\", query.labels().stream()\n                                                    .map(s -> \"\\\"\" + s + \"\\\"\").collect(Collectors.joining(\",\")));\n        LOGGER.info(\"Query: {}\", queryString);\n        final ResponseEntity<GQLResponse<ReadLabeledMetricsData>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ReadLabeledMetricsData>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getReadLabeledMetricsValues();\n    }\n","date":"2021-02-10 22:40:07","endLine":374,"groupId":"1022","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"readLabeledMetrics","params":"(finalReadLabeledMetricsQueryquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b7/04bb6c42d00f9defb2def80582f3d64089d322.src","preCode":"    public List<ReadMetrics> readLabeledMetrics(final ReadLabeledMetricsQuery query) throws Exception {\n        final URL queryFileUrl = Resources.getResource(\"read-labeled-metrics.gql\");\n        final String queryString = Resources.readLines(queryFileUrl, StandardCharsets.UTF_8)\n                                            .stream()\n                                            .filter(it -> !it.startsWith(\"#\"))\n                                            .collect(Collectors.joining())\n                                            .replace(\"{step}\", query.step())\n                                            .replace(\"{start}\", query.start())\n                                            .replace(\"{end}\", query.end())\n                                            .replace(\"{metricsName}\", query.metricsName())\n                                            .replace(\"{serviceName}\", query.serviceName())\n                                            .replace(\"{instanceName}\", query.instanceName())\n                                            .replace(\"{scope}\", query.scope())\n                                            .replace(\"{labels}\", query.labels().stream()\n                                                    .map(s -> \"\\\"\" + s + \"\\\"\").collect(Collectors.joining(\",\")));\n        LOGGER.info(\"Query: {}\", queryString);\n        final ResponseEntity<GQLResponse<ReadLabeledMetricsData>> responseEntity = restTemplate.exchange(\n            new RequestEntity<>(queryString, HttpMethod.POST, URI.create(endpointUrl)),\n            new ParameterizedTypeReference<GQLResponse<ReadLabeledMetricsData>>() {\n            }\n        );\n\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            throw new RuntimeException(\"Response status != 200, actual: \" + responseEntity.getStatusCode());\n        }\n\n        return Objects.requireNonNull(responseEntity.getBody()).getData().getReadLabeledMetricsValues();\n    }\n","realPath":"test/e2e/e2e-data/src/main/java/org/apache/skywalking/e2e/SimpleQueryClient.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"N"}],"commitId":"6c6a8a7109c9a5a0dc173d8424ce45dec1da9f9e","commitMessage":"@@@Add E2E test for VM monitoring that the metrics from Promethues node-exporter via OTEL. (#6404)\n\n","date":"2021-02-20 16:11:44","modifiedFileCount":"3","status":"M","submitter":"wankai123"}]
