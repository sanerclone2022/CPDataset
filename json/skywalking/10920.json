[{"authorTime":"2021-02-10 22:40:07","codes":[{"authorDate":"2021-02-10 22:40:07","commitOrder":1,"curCode":"    public void assertZabbixActiveChecksResponse(String body, String... itemNames) {\n        Assert.assertNotNull(body);\n        JsonElement bodyRoot = new Gson().fromJson(body, JsonElement.class);\n        JsonObject rootObject = bodyRoot.getAsJsonObject();\n        \r\n        Assert.assertEquals(\"success\", rootObject.get(\"response\").getAsString());\n\n        \r\n        Assert.assertNotNull(rootObject.get(\"data\"));\n        JsonArray activeChecks = rootObject.getAsJsonArray(\"data\");\n        Assert.assertEquals(itemNames.length, activeChecks.size());\n        for (String itemName : itemNames) {\n            boolean found = false;\n\n            for (JsonElement perCheck : activeChecks) {\n                JsonObject curCheck = perCheck.getAsJsonObject();\n                String itemKey = curCheck.get(\"key\").getAsString();\n                if (Objects.equals(itemKey, itemName)) {\n                    Assert.assertTrue(curCheck.get(\"delay\").getAsInt() > 0);\n                    Assert.assertTrue(curCheck.get(\"lastlogsize\").getAsInt() >= 0);\n                    Assert.assertTrue(curCheck.get(\"mtime\").getAsInt() >= 0);\n                    found = true;\n                }\n            }\n\n            if (!found) {\n                throw new AssertionError(\"Could not found \" + itemName + \" in Active Checks response\");\n            }\n        }\n    }\n","date":"2021-02-10 22:40:07","endLine":171,"groupId":"1875","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertZabbixActiveChecksResponse","params":"(Stringbody@String...itemNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f7/3314a21ae78cbf9808739117be179a03ed3167.src","preCode":"    public void assertZabbixActiveChecksResponse(String body, String... itemNames) {\n        Assert.assertNotNull(body);\n        JsonElement bodyRoot = new Gson().fromJson(body, JsonElement.class);\n        JsonObject rootObject = bodyRoot.getAsJsonObject();\n        \r\n        Assert.assertEquals(\"success\", rootObject.get(\"response\").getAsString());\n\n        \r\n        Assert.assertNotNull(rootObject.get(\"data\"));\n        JsonArray activeChecks = rootObject.getAsJsonArray(\"data\");\n        Assert.assertEquals(itemNames.length, activeChecks.size());\n        for (String itemName : itemNames) {\n            boolean found = false;\n\n            for (JsonElement perCheck : activeChecks) {\n                JsonObject curCheck = perCheck.getAsJsonObject();\n                String itemKey = curCheck.get(\"key\").getAsString();\n                if (Objects.equals(itemKey, itemName)) {\n                    Assert.assertTrue(curCheck.get(\"delay\").getAsInt() > 0);\n                    Assert.assertTrue(curCheck.get(\"lastlogsize\").getAsInt() >= 0);\n                    Assert.assertTrue(curCheck.get(\"mtime\").getAsInt() >= 0);\n                    found = true;\n                }\n            }\n\n            if (!found) {\n                throw new AssertionError(\"Could not found \" + itemName + \" in Active Checks response\");\n            }\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-zabbix-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/zabbix/provider/ZabbixBaseTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"},{"authorDate":"2021-02-10 22:40:07","commitOrder":1,"curCode":"    public void assertZabbixAgentDataResponse(String body) {\n        Assert.assertNotNull(body);\n        JsonElement bodyRoot = new Gson().fromJson(body, JsonElement.class);\n        JsonObject rootObject = bodyRoot.getAsJsonObject();\n        \r\n        Assert.assertEquals(\"success\", rootObject.get(\"response\").getAsString());\n\n        \r\n        Assert.assertNotNull(rootObject.get(\"info\"));\n        Assert.assertTrue(StringUtil.isNotEmpty(rootObject.get(\"info\").getAsString()));\n    }\n","date":"2021-02-10 22:40:07","endLine":186,"groupId":"1875","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertZabbixAgentDataResponse","params":"(Stringbody)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/f7/3314a21ae78cbf9808739117be179a03ed3167.src","preCode":"    public void assertZabbixAgentDataResponse(String body) {\n        Assert.assertNotNull(body);\n        JsonElement bodyRoot = new Gson().fromJson(body, JsonElement.class);\n        JsonObject rootObject = bodyRoot.getAsJsonObject();\n        \r\n        Assert.assertEquals(\"success\", rootObject.get(\"response\").getAsString());\n\n        \r\n        Assert.assertNotNull(rootObject.get(\"info\"));\n        Assert.assertTrue(StringUtil.isNotEmpty(rootObject.get(\"info\").getAsString()));\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-zabbix-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/zabbix/provider/ZabbixBaseTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"B"}],"commitId":"75f03acba7c6192aab6f008a0c1acc07c0560bd5","commitMessage":"@@@Adopt Zabbix protocol (#6176)\n\nHappy Chinese New Year !!","date":"2021-02-10 22:40:07","modifiedFileCount":"5","status":"B","submitter":"mrproliu"},{"authorTime":"2021-02-11 10:02:37","codes":[{"authorDate":"2021-02-11 10:02:37","commitOrder":2,"curCode":"    public void assertZabbixActiveChecksResponse(int inx, String... itemNames) throws Exception {\n        ZabbixResponse response = (ZabbixResponse) responses.get(inx);\n\n        \r\n        Assert.assertEquals(itemNames.length, response.getActiveChecks().size());\n        for (String itemName : itemNames) {\n            boolean found = false;\n\n            for (final ZabbixResponse.ActiveChecks checks : response.getActiveChecks()) {\n                if (Objects.equals(checks.getKey(), itemName)) {\n                    Assert.assertTrue(checks.getDelay() > 0);\n                    Assert.assertTrue(checks.getLastlogsize() >= 0);\n                    Assert.assertTrue(checks.getMtime() >= 0);\n                    found = true;\n                }\n            }\n\n            if (!found) {\n                throw new AssertionError(\"Could not found \" + itemName + \" in Active Checks response\");\n            }\n        }\n\n        encoder.encode(channelHandlerContext, response, null);\n        String respBody = decoder.decodeToPayload(channelHandlerContext, (ByteBuf) responses.get(inx + 1));\n        assertZabbixActiveChecksResponseWithEncoded(respBody, itemNames);\n    }\n","date":"2021-02-11 10:02:37","endLine":137,"groupId":"10920","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"assertZabbixActiveChecksResponse","params":"(intinx@String...itemNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/be/5e073cb093aa7c92f5c255d0c03a3df68d8d59.src","preCode":"    public void assertZabbixActiveChecksResponse(String body, String... itemNames) {\n        Assert.assertNotNull(body);\n        JsonElement bodyRoot = new Gson().fromJson(body, JsonElement.class);\n        JsonObject rootObject = bodyRoot.getAsJsonObject();\n        \r\n        Assert.assertEquals(\"success\", rootObject.get(\"response\").getAsString());\n\n        \r\n        Assert.assertNotNull(rootObject.get(\"data\"));\n        JsonArray activeChecks = rootObject.getAsJsonArray(\"data\");\n        Assert.assertEquals(itemNames.length, activeChecks.size());\n        for (String itemName : itemNames) {\n            boolean found = false;\n\n            for (JsonElement perCheck : activeChecks) {\n                JsonObject curCheck = perCheck.getAsJsonObject();\n                String itemKey = curCheck.get(\"key\").getAsString();\n                if (Objects.equals(itemKey, itemName)) {\n                    Assert.assertTrue(curCheck.get(\"delay\").getAsInt() > 0);\n                    Assert.assertTrue(curCheck.get(\"lastlogsize\").getAsInt() >= 0);\n                    Assert.assertTrue(curCheck.get(\"mtime\").getAsInt() >= 0);\n                    found = true;\n                }\n            }\n\n            if (!found) {\n                throw new AssertionError(\"Could not found \" + itemName + \" in Active Checks response\");\n            }\n        }\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-zabbix-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/zabbix/provider/ZabbixBaseTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2021-02-11 10:02:37","commitOrder":2,"curCode":"    public void assertZabbixAgentDataResponse(int inx) throws Exception {\n        ZabbixResponse response = (ZabbixResponse) responses.get(inx);\n\n        \r\n        Assert.assertTrue(StringUtil.isNotEmpty(response.getAgentData().getInfo()));\n\n        encoder.encode(channelHandlerContext, response, null);\n        String respBody = decoder.decodeToPayload(channelHandlerContext, (ByteBuf) responses.get(inx + 1));\n        assertZabbixAgentDataResponseWithEncoded(respBody);\n    }\n","date":"2021-02-11 10:02:37","endLine":185,"groupId":"10920","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertZabbixAgentDataResponse","params":"(intinx)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/be/5e073cb093aa7c92f5c255d0c03a3df68d8d59.src","preCode":"    public void assertZabbixAgentDataResponse(String body) {\n        Assert.assertNotNull(body);\n        JsonElement bodyRoot = new Gson().fromJson(body, JsonElement.class);\n        JsonObject rootObject = bodyRoot.getAsJsonObject();\n        \r\n        Assert.assertEquals(\"success\", rootObject.get(\"response\").getAsString());\n\n        \r\n        Assert.assertNotNull(rootObject.get(\"info\"));\n        Assert.assertTrue(StringUtil.isNotEmpty(rootObject.get(\"info\").getAsString()));\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-zabbix-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/zabbix/provider/ZabbixBaseTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"}],"commitId":"92d0465cd839e22f859b0c9cfe7b2928d502ad2f","commitMessage":"@@@Simplify the Zabbix UT.  reduce use time (#6362)\n\n","date":"2021-02-11 10:02:37","modifiedFileCount":"4","status":"M","submitter":"mrproliu"}]
