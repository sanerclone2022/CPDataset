[{"authorTime":"2020-07-30 11:55:49","codes":[{"authorDate":"2020-07-30 11:55:49","commitOrder":1,"curCode":"    public void parseFirst(SpanObject span, SegmentObject segmentObject) {\n        if (sampleStatus.equals(SAMPLE_STATUS.IGNORE)) {\n            return;\n        }\n\n        if (StringUtil.isEmpty(serviceId)) {\n            serviceName = namingControl.formatServiceName(segmentObject.getService());\n            serviceId = IDManager.ServiceID.buildId(\n                serviceName,\n                NodeType.Normal\n            );\n        }\n\n        long timeBucket = TimeBucket.getRecordTimeBucket(startTimestamp);\n\n        segment.setSegmentId(segmentObject.getTraceSegmentId());\n        segment.setServiceId(serviceId);\n        segment.setServiceInstanceId(IDManager.ServiceInstanceID.buildId(\n            serviceId,\n            namingControl.formatInstanceName(segmentObject.getServiceInstance())\n        ));\n        segment.setLatency(duration);\n        segment.setStartTime(startTimestamp);\n        segment.setTimeBucket(timeBucket);\n        segment.setEndTime(endTimestamp);\n        segment.setIsError(BooleanUtils.booleanToValue(isError));\n        segment.setDataBinary(segmentObject.toByteArray());\n        segment.setVersion(3);\n\n        endpointName = namingControl.formatEndpointName(serviceName, span.getOperationName());\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            endpointName\n        );\n\n    }\n","date":"2020-07-30 11:55:49","endLine":100,"groupId":"1997","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parseFirst","params":"(SpanObjectspan@SegmentObjectsegmentObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b0/f34613d1b4e17adab7fa9cb74322e2038d7a08.src","preCode":"    public void parseFirst(SpanObject span, SegmentObject segmentObject) {\n        if (sampleStatus.equals(SAMPLE_STATUS.IGNORE)) {\n            return;\n        }\n\n        if (StringUtil.isEmpty(serviceId)) {\n            serviceName = namingControl.formatServiceName(segmentObject.getService());\n            serviceId = IDManager.ServiceID.buildId(\n                serviceName,\n                NodeType.Normal\n            );\n        }\n\n        long timeBucket = TimeBucket.getRecordTimeBucket(startTimestamp);\n\n        segment.setSegmentId(segmentObject.getTraceSegmentId());\n        segment.setServiceId(serviceId);\n        segment.setServiceInstanceId(IDManager.ServiceInstanceID.buildId(\n            serviceId,\n            namingControl.formatInstanceName(segmentObject.getServiceInstance())\n        ));\n        segment.setLatency(duration);\n        segment.setStartTime(startTimestamp);\n        segment.setTimeBucket(timeBucket);\n        segment.setEndTime(endTimestamp);\n        segment.setIsError(BooleanUtils.booleanToValue(isError));\n        segment.setDataBinary(segmentObject.toByteArray());\n        segment.setVersion(3);\n\n        endpointName = namingControl.formatEndpointName(serviceName, span.getOperationName());\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            endpointName\n        );\n\n    }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/SegmentAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2020-07-30 11:55:49","commitOrder":1,"curCode":"    public void parseEntry(SpanObject span, SegmentObject segmentObject) {\n        if (StringUtil.isEmpty(serviceId)) {\n            serviceName = namingControl.formatServiceName(segmentObject.getService());\n            serviceId = IDManager.ServiceID.buildId(\n                serviceName, NodeType.Normal);\n        }\n\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            span.getOperationName()\n        );\n\n        endpointName = namingControl.formatEndpointName(serviceName, span.getOperationName());\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            endpointName\n        );\n    }\n","date":"2020-07-30 11:55:49","endLine":120,"groupId":"1253","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"parseEntry","params":"(SpanObjectspan@SegmentObjectsegmentObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b0/f34613d1b4e17adab7fa9cb74322e2038d7a08.src","preCode":"    public void parseEntry(SpanObject span, SegmentObject segmentObject) {\n        if (StringUtil.isEmpty(serviceId)) {\n            serviceName = namingControl.formatServiceName(segmentObject.getService());\n            serviceId = IDManager.ServiceID.buildId(\n                serviceName, NodeType.Normal);\n        }\n\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            span.getOperationName()\n        );\n\n        endpointName = namingControl.formatEndpointName(serviceName, span.getOperationName());\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            endpointName\n        );\n    }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/SegmentAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"}],"commitId":"f9257f5274f6a55e8bf8424444707aecf7a1f2c1","commitMessage":"@@@Provide kafka as collector/reporter (#4847)\n\n","date":"2020-07-30 11:55:49","modifiedFileCount":"24","status":"B","submitter":"Daming"},{"authorTime":"2020-12-09 16:37:30","codes":[{"authorDate":"2020-07-30 11:55:49","commitOrder":2,"curCode":"    public void parseFirst(SpanObject span, SegmentObject segmentObject) {\n        if (sampleStatus.equals(SAMPLE_STATUS.IGNORE)) {\n            return;\n        }\n\n        if (StringUtil.isEmpty(serviceId)) {\n            serviceName = namingControl.formatServiceName(segmentObject.getService());\n            serviceId = IDManager.ServiceID.buildId(\n                serviceName,\n                NodeType.Normal\n            );\n        }\n\n        long timeBucket = TimeBucket.getRecordTimeBucket(startTimestamp);\n\n        segment.setSegmentId(segmentObject.getTraceSegmentId());\n        segment.setServiceId(serviceId);\n        segment.setServiceInstanceId(IDManager.ServiceInstanceID.buildId(\n            serviceId,\n            namingControl.formatInstanceName(segmentObject.getServiceInstance())\n        ));\n        segment.setLatency(duration);\n        segment.setStartTime(startTimestamp);\n        segment.setTimeBucket(timeBucket);\n        segment.setEndTime(endTimestamp);\n        segment.setIsError(BooleanUtils.booleanToValue(isError));\n        segment.setDataBinary(segmentObject.toByteArray());\n        segment.setVersion(3);\n\n        endpointName = namingControl.formatEndpointName(serviceName, span.getOperationName());\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            endpointName\n        );\n\n    }\n","date":"2020-07-30 11:55:49","endLine":100,"groupId":"1997","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"parseFirst","params":"(SpanObjectspan@SegmentObjectsegmentObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b0/f34613d1b4e17adab7fa9cb74322e2038d7a08.src","preCode":"    public void parseFirst(SpanObject span, SegmentObject segmentObject) {\n        if (sampleStatus.equals(SAMPLE_STATUS.IGNORE)) {\n            return;\n        }\n\n        if (StringUtil.isEmpty(serviceId)) {\n            serviceName = namingControl.formatServiceName(segmentObject.getService());\n            serviceId = IDManager.ServiceID.buildId(\n                serviceName,\n                NodeType.Normal\n            );\n        }\n\n        long timeBucket = TimeBucket.getRecordTimeBucket(startTimestamp);\n\n        segment.setSegmentId(segmentObject.getTraceSegmentId());\n        segment.setServiceId(serviceId);\n        segment.setServiceInstanceId(IDManager.ServiceInstanceID.buildId(\n            serviceId,\n            namingControl.formatInstanceName(segmentObject.getServiceInstance())\n        ));\n        segment.setLatency(duration);\n        segment.setStartTime(startTimestamp);\n        segment.setTimeBucket(timeBucket);\n        segment.setEndTime(endTimestamp);\n        segment.setIsError(BooleanUtils.booleanToValue(isError));\n        segment.setDataBinary(segmentObject.toByteArray());\n        segment.setVersion(3);\n\n        endpointName = namingControl.formatEndpointName(serviceName, span.getOperationName());\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            endpointName\n        );\n\n    }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/SegmentAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2020-12-09 16:37:30","commitOrder":2,"curCode":"    public void parseEntry(SpanObject span, SegmentObject segmentObject) {\n        if (StringUtil.isEmpty(serviceId)) {\n            serviceName = namingControl.formatServiceName(segmentObject.getService());\n            serviceId = IDManager.ServiceID.buildId(\n                serviceName, NodeType.Normal);\n        }\n\n        endpointName = namingControl.formatEndpointName(serviceName, span.getOperationName());\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            endpointName\n        );\n    }\n","date":"2020-12-09 16:37:30","endLine":126,"groupId":"5595","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"parseEntry","params":"(SpanObjectspan@SegmentObjectsegmentObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d2/7379c6aec49e2feb49e8121fec17fd8f1b354f.src","preCode":"    public void parseEntry(SpanObject span, SegmentObject segmentObject) {\n        if (StringUtil.isEmpty(serviceId)) {\n            serviceName = namingControl.formatServiceName(segmentObject.getService());\n            serviceId = IDManager.ServiceID.buildId(\n                serviceName, NodeType.Normal);\n        }\n\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            span.getOperationName()\n        );\n\n        endpointName = namingControl.formatEndpointName(serviceName, span.getOperationName());\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            endpointName\n        );\n    }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/SegmentAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"5e4b16cbfc96f80bd86eb6a98ddcf60f0959c9b1","commitMessage":"@@@chore: remove useless codes (#5982)\n\n","date":"2020-12-09 16:37:30","modifiedFileCount":"1","status":"M","submitter":"YczYanchengzhe"},{"authorTime":"2020-12-09 16:37:30","codes":[{"authorDate":"2021-08-10 00:05:06","commitOrder":3,"curCode":"    public void parseFirst(SpanObject span, SegmentObject segmentObject) {\n        if (sampleStatus.equals(SAMPLE_STATUS.IGNORE)) {\n            return;\n        }\n\n        if (StringUtil.isEmpty(serviceId)) {\n            serviceName = namingControl.formatServiceName(segmentObject.getService());\n            serviceId = IDManager.ServiceID.buildId(\n                serviceName,\n                NodeType.Normal\n            );\n        }\n\n        long timeBucket = TimeBucket.getRecordTimeBucket(startTimestamp);\n\n        segment.setSegmentId(segmentObject.getTraceSegmentId());\n        segment.setServiceId(serviceId);\n        segment.setServiceInstanceId(IDManager.ServiceInstanceID.buildId(\n            serviceId,\n            namingControl.formatInstanceName(segmentObject.getServiceInstance())\n        ));\n        segment.setLatency(duration);\n        segment.setStartTime(startTimestamp);\n        segment.setTimeBucket(timeBucket);\n        segment.setIsError(BooleanUtils.booleanToValue(isError));\n        segment.setDataBinary(segmentObject.toByteArray());\n\n        endpointName = namingControl.formatEndpointName(serviceName, span.getOperationName());\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            endpointName\n        );\n    }\n","date":"2021-08-10 00:05:06","endLine":109,"groupId":"10770","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"parseFirst","params":"(SpanObjectspan@SegmentObjectsegmentObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/70/85a33db422bf64ed2db85457bc51ceefed2899.src","preCode":"    public void parseFirst(SpanObject span, SegmentObject segmentObject) {\n        if (sampleStatus.equals(SAMPLE_STATUS.IGNORE)) {\n            return;\n        }\n\n        if (StringUtil.isEmpty(serviceId)) {\n            serviceName = namingControl.formatServiceName(segmentObject.getService());\n            serviceId = IDManager.ServiceID.buildId(\n                serviceName,\n                NodeType.Normal\n            );\n        }\n\n        long timeBucket = TimeBucket.getRecordTimeBucket(startTimestamp);\n\n        segment.setSegmentId(segmentObject.getTraceSegmentId());\n        segment.setServiceId(serviceId);\n        segment.setServiceInstanceId(IDManager.ServiceInstanceID.buildId(\n            serviceId,\n            namingControl.formatInstanceName(segmentObject.getServiceInstance())\n        ));\n        segment.setLatency(duration);\n        segment.setStartTime(startTimestamp);\n        segment.setTimeBucket(timeBucket);\n        segment.setEndTime(endTimestamp);\n        segment.setIsError(BooleanUtils.booleanToValue(isError));\n        segment.setDataBinary(segmentObject.toByteArray());\n        segment.setVersion(3);\n\n        endpointName = namingControl.formatEndpointName(serviceName, span.getOperationName());\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            endpointName\n        );\n    }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/SegmentAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2020-12-09 16:37:30","commitOrder":3,"curCode":"    public void parseEntry(SpanObject span, SegmentObject segmentObject) {\n        if (StringUtil.isEmpty(serviceId)) {\n            serviceName = namingControl.formatServiceName(segmentObject.getService());\n            serviceId = IDManager.ServiceID.buildId(\n                serviceName, NodeType.Normal);\n        }\n\n        endpointName = namingControl.formatEndpointName(serviceName, span.getOperationName());\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            endpointName\n        );\n    }\n","date":"2020-12-09 16:37:30","endLine":126,"groupId":"10770","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"parseEntry","params":"(SpanObjectspan@SegmentObjectsegmentObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/d2/7379c6aec49e2feb49e8121fec17fd8f1b354f.src","preCode":"    public void parseEntry(SpanObject span, SegmentObject segmentObject) {\n        if (StringUtil.isEmpty(serviceId)) {\n            serviceName = namingControl.formatServiceName(segmentObject.getService());\n            serviceId = IDManager.ServiceID.buildId(\n                serviceName, NodeType.Normal);\n        }\n\n        endpointName = namingControl.formatEndpointName(serviceName, span.getOperationName());\n        endpointId = IDManager.EndpointID.buildId(\n            serviceId,\n            endpointName\n        );\n    }\n","realPath":"oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/SegmentAnalysisListener.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"N"}],"commitId":"cc66254729f74d739ff2a85c72ded44fdaeb1cd4","commitMessage":"@@@Remove statement.  version.  and endtime from segment entity. (#7427)\n\n","date":"2021-08-10 00:05:06","modifiedFileCount":"11","status":"M","submitter":"?? Wu Sheng"}]
