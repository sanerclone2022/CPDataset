[{"authorTime":"2019-06-07 12:01:24","codes":[{"authorDate":"2019-06-18 13:53:28","commitOrder":2,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        watcher = new ConfigChangeWatcher(MockZookeeperConfigurationModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","date":"2019-06-18 13:53:28","endLine":72,"groupId":"6349","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/52/60d825e5b9082582e8bd891eb9b064649c2e95.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        watcher = new ConfigChangeWatcher(MockZookeeperConfigurationModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","realPath":"oap-server/server-configuration/configuration-zookeeper/src/test/java/org/apache/skywalking/oap/server/configuration/zookeeper/it/MockZookeeperConfigurationProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"},{"authorDate":"2019-06-07 12:01:24","commitOrder":2,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(NacosConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","date":"2019-06-07 12:01:24","endLine":72,"groupId":"6349","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/14/342029c5f4b880f4adcba80c0af227859bf96e.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(NacosConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","realPath":"oap-server/server-configuration/configuration-nacos/src/test/java/org/apache/skywalking/oap/server/configuration/nacos/NacosConfigurationTestProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"NB"}],"commitId":"adb7ac44d7ea8d70952e962983508ea2e0866ed6","commitMessage":"@@@Provide Zookeeper dynamic configuration center implementation. fixes #2825  (#2852)\n\n* configration-zookeeper","date":"2019-06-18 13:53:28","modifiedFileCount":"0","status":"M","submitter":"???"},{"authorTime":"2020-07-21 23:30:06","codes":[{"authorDate":"2019-06-18 13:53:28","commitOrder":3,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        watcher = new ConfigChangeWatcher(MockZookeeperConfigurationModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","date":"2019-06-18 13:53:28","endLine":72,"groupId":"6349","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/52/60d825e5b9082582e8bd891eb9b064649c2e95.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        watcher = new ConfigChangeWatcher(MockZookeeperConfigurationModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","realPath":"oap-server/server-configuration/configuration-zookeeper/src/test/java/org/apache/skywalking/oap/server/configuration/zookeeper/it/MockZookeeperConfigurationProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2020-07-21 23:30:06","commitOrder":3,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(NacosConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","date":"2020-07-21 23:30:06","endLine":73,"groupId":"6349","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ff/2d097bf71687b200250c16083cdef2dacd16f0.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(NacosConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeWatcher.ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","realPath":"oap-server/server-configuration/configuration-nacos/src/test/java/org/apache/skywalking/oap/server/configuration/nacos/NacosConfigurationTestProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"b363b0ea4f89dd98d2f773825ba1331102f9f88a","commitMessage":"@@@Add Nacos back into SkyWalking as an option(nacos-1.3.1) (#5137)\n\n","date":"2020-07-21 23:30:06","modifiedFileCount":"0","status":"M","submitter":"songzhendong"},{"authorTime":"2020-07-21 23:30:06","codes":[{"authorDate":"2021-08-23 18:09:33","commitOrder":4,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        watcher = new ConfigChangeWatcher(MockZookeeperConfigurationModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeEvent value) {\n                log.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n\n        groupWatcher = new GroupConfigChangeWatcher(MockZookeeperConfigurationModule.NAME, this, \"testKeyGroup\") {\n            private Map<String, String> config = new ConcurrentHashMap<>();\n\n            @Override\n            public void notifyGroup(Map<String , ConfigChangeEvent> groupItems) {\n                log.info(\"GroupConfigChangeWatcher.ConfigChangeEvents: {}\", groupItems);\n                groupItems.forEach((groupItemName , event) -> {\n                    if (EventType.DELETE.equals(event.getEventType())) {\n                        config.remove(groupItemName);\n                    } else {\n                        config.put(groupItemName, event.getNewValue());\n                    }\n                });\n            }\n\n            @Override\n            public Map<String, String> groupItems() {\n                return config;\n            }\n        };\n    }\n","date":"2021-08-23 18:09:33","endLine":95,"groupId":"6349","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2a/9e59b2b2345017c2f85ae40586eeaa53fde9f4.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        watcher = new ConfigChangeWatcher(MockZookeeperConfigurationModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","realPath":"oap-server/server-configuration/configuration-zookeeper/src/test/java/org/apache/skywalking/oap/server/configuration/zookeeper/it/MockZookeeperConfigurationProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"},{"authorDate":"2020-07-21 23:30:06","commitOrder":4,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(NacosConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","date":"2020-07-21 23:30:06","endLine":73,"groupId":"6349","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ff/2d097bf71687b200250c16083cdef2dacd16f0.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(NacosConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","realPath":"oap-server/server-configuration/configuration-nacos/src/test/java/org/apache/skywalking/oap/server/configuration/nacos/NacosConfigurationTestProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"}],"commitId":"abcd87f81109de941861e1647a2fa3845997bb25","commitMessage":"@@@Support collection type in dynamic configuration core and add zookeeper implementation  (#7509)\n\n* Support grouped dynamic configurations in DCS.\nSupport zookeeper grouped dynamic configurations.\n\n* change to @Slf4j\n\nCo-authored-by: ?? Wu Sheng <wu.sheng@foxmail.com>","date":"2021-08-23 18:09:33","modifiedFileCount":"17","status":"M","submitter":"wankai123"},{"authorTime":"2021-09-01 21:22:06","codes":[{"authorDate":"2021-08-23 18:09:33","commitOrder":5,"curCode":"    public void prepare() throws ServiceNotProvidedException {\n        watcher = new ConfigChangeWatcher(MockZookeeperConfigurationModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeEvent value) {\n                log.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n\n        groupWatcher = new GroupConfigChangeWatcher(MockZookeeperConfigurationModule.NAME, this, \"testKeyGroup\") {\n            private Map<String, String> config = new ConcurrentHashMap<>();\n\n            @Override\n            public void notifyGroup(Map<String , ConfigChangeEvent> groupItems) {\n                log.info(\"GroupConfigChangeWatcher.ConfigChangeEvents: {}\", groupItems);\n                groupItems.forEach((groupItemName , event) -> {\n                    if (EventType.DELETE.equals(event.getEventType())) {\n                        config.remove(groupItemName);\n                    } else {\n                        config.put(groupItemName, event.getNewValue());\n                    }\n                });\n            }\n\n            @Override\n            public Map<String, String> groupItems() {\n                return config;\n            }\n        };\n    }\n","date":"2021-08-23 18:09:33","endLine":95,"groupId":"10606","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/2a/9e59b2b2345017c2f85ae40586eeaa53fde9f4.src","preCode":"    public void prepare() throws ServiceNotProvidedException {\n        watcher = new ConfigChangeWatcher(MockZookeeperConfigurationModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeEvent value) {\n                log.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n\n        groupWatcher = new GroupConfigChangeWatcher(MockZookeeperConfigurationModule.NAME, this, \"testKeyGroup\") {\n            private Map<String, String> config = new ConcurrentHashMap<>();\n\n            @Override\n            public void notifyGroup(Map<String , ConfigChangeEvent> groupItems) {\n                log.info(\"GroupConfigChangeWatcher.ConfigChangeEvents: {}\", groupItems);\n                groupItems.forEach((groupItemName , event) -> {\n                    if (EventType.DELETE.equals(event.getEventType())) {\n                        config.remove(groupItemName);\n                    } else {\n                        config.put(groupItemName, event.getNewValue());\n                    }\n                });\n            }\n\n            @Override\n            public Map<String, String> groupItems() {\n                return config;\n            }\n        };\n    }\n","realPath":"oap-server/server-configuration/configuration-zookeeper/src/test/java/org/apache/skywalking/oap/server/configuration/zookeeper/it/MockZookeeperConfigurationProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"N"},{"authorDate":"2021-09-01 21:22:06","commitOrder":5,"curCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(NacosConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeEvent value) {\n                log.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n\n        groupWatcher = new GroupConfigChangeWatcher(NacosConfigurationTestModule.NAME, this, \"testKeyGroup\") {\n            private Map<String, String> config = new ConcurrentHashMap<>();\n\n            @Override\n            public void notifyGroup(Map<String, ConfigChangeEvent> groupItems) {\n                log.info(\"GroupConfigChangeWatcher.ConfigChangeEvents: {}\", groupItems);\n                groupItems.forEach((groupItemName, event) -> {\n                    if (EventType.DELETE.equals(event.getEventType())) {\n                        config.remove(groupItemName);\n                    } else {\n                        config.put(groupItemName, event.getNewValue());\n                    }\n                });\n            }\n\n            @Override\n            public Map<String, String> groupItems() {\n                return config;\n            }\n        };\n    }\n","date":"2021-09-01 21:22:06","endLine":96,"groupId":"10606","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"prepare","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fe/e0826b467cab48bddbb2cb4adbfcbe9845153b.src","preCode":"    public void prepare() throws ServiceNotProvidedException, ModuleStartException {\n        watcher = new ConfigChangeWatcher(NacosConfigurationTestModule.NAME, this, \"testKey\") {\n            private volatile String testValue;\n\n            @Override\n            public void notify(ConfigChangeEvent value) {\n                LOGGER.info(\"ConfigChangeWatcher.ConfigChangeEvent: {}\", value);\n                if (EventType.DELETE.equals(value.getEventType())) {\n                    testValue = null;\n                } else {\n                    testValue = value.getNewValue();\n                }\n            }\n\n            @Override\n            public String value() {\n                return testValue;\n            }\n        };\n    }\n","realPath":"oap-server/server-configuration/configuration-nacos/src/test/java/org/apache/skywalking/oap/server/configuration/nacos/NacosConfigurationTestProvider.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"5c2418ee9d9c0c33b76b29717c36168f9040cb0f","commitMessage":"@@@Support nacos grouped dynamic configurations. (#7632)\n\n","date":"2021-09-01 21:22:06","modifiedFileCount":"4","status":"M","submitter":"wankai123"}]
