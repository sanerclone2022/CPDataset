[{"authorTime":"2020-10-21 16:45:47","codes":[{"authorDate":"2020-06-08 09:19:34","commitOrder":3,"curCode":"    public void combine(final Metrics metrics) {\n        PercentileFunction percentile = (PercentileFunction) metrics;\n\n        if (!dataset.keysEqual(percentile.getDataset())) {\n            log.warn(\"Incompatible input [{}}] for current PercentileFunction[{}], entity {}\",\n                     percentile, this, entityId\n            );\n            return;\n        }\n        if (ranks.size() > 0) {\n            IntList ranksOfThat = percentile.getRanks();\n            if (this.ranks.size() != ranks.size()) {\n                log.warn(\"Incompatible ranks size = [{}}] for current PercentileFunction[{}]\",\n                         ranks.size(), this.ranks.size()\n                );\n                return;\n            } else {\n                if (!this.ranks.equals(percentile.getRanks())) {\n                    log.warn(\"Rank {} doesn't exist in the previous ranks {}\", percentile.getRanks(), ranks);\n                    return;\n                }\n            }\n        }\n\n        this.dataset.append(percentile.dataset);\n\n        this.isCalculated = false;\n    }\n","date":"2020-06-08 09:19:34","endLine":152,"groupId":"206","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"combine","params":"(finalMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/56/81c2432caf9906a33ba4a53372846947ff3b02.src","preCode":"    public void combine(final Metrics metrics) {\n        PercentileFunction percentile = (PercentileFunction) metrics;\n\n        if (!dataset.keysEqual(percentile.getDataset())) {\n            log.warn(\"Incompatible input [{}}] for current PercentileFunction[{}], entity {}\",\n                     percentile, this, entityId\n            );\n            return;\n        }\n        if (ranks.size() > 0) {\n            IntList ranksOfThat = percentile.getRanks();\n            if (this.ranks.size() != ranks.size()) {\n                log.warn(\"Incompatible ranks size = [{}}] for current PercentileFunction[{}]\",\n                         ranks.size(), this.ranks.size()\n                );\n                return;\n            } else {\n                if (!this.ranks.equals(percentile.getRanks())) {\n                    log.warn(\"Rank {} doesn't exist in the previous ranks {}\", percentile.getRanks(), ranks);\n                    return;\n                }\n            }\n        }\n\n        this.dataset.append(percentile.dataset);\n\n        this.isCalculated = false;\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/PercentileFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"NB"},{"authorDate":"2020-10-21 16:45:47","commitOrder":3,"curCode":"    public void combine(final Metrics metrics) {\n        AvgHistogramPercentileFunction percentile = (AvgHistogramPercentileFunction) metrics;\n\n        if (ranks.size() > 0) {\n            if (this.ranks.size() != ranks.size()) {\n                log.warn(\"Incompatible ranks size = [{}}] for current PercentileFunction[{}]\",\n                         ranks.size(), this.ranks.size()\n                );\n                return;\n            } else {\n                if (!this.ranks.equals(percentile.getRanks())) {\n                    log.warn(\"Rank {} doesn't exist in the previous ranks {}\", percentile.getRanks(), ranks);\n                    return;\n                }\n            }\n        }\n\n        this.summation.append(percentile.summation);\n        this.count.append(percentile.count);\n\n        this.isCalculated = false;\n    }\n","date":"2020-10-21 16:45:47","endLine":178,"groupId":"4913","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"combine","params":"(finalMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3f/3e2b254f016da63ed8872247bef861d2a5ef78.src","preCode":"    public void combine(final Metrics metrics) {\n        AvgHistogramPercentileFunction percentile = (AvgHistogramPercentileFunction) metrics;\n\n        if (ranks.size() > 0) {\n            if (this.ranks.size() != ranks.size()) {\n                log.warn(\"Incompatible ranks size = [{}}] for current PercentileFunction[{}]\",\n                         ranks.size(), this.ranks.size()\n                );\n                return;\n            } else {\n                if (!this.ranks.equals(percentile.getRanks())) {\n                    log.warn(\"Rank {} doesn't exist in the previous ranks {}\", percentile.getRanks(), ranks);\n                    return;\n                }\n            }\n        }\n\n        this.summation.append(percentile.summation);\n        this.count.append(percentile.count);\n\n        this.isCalculated = false;\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"B"}],"commitId":"9ce47d5bdc9e614885066d66384ee6092604efba","commitMessage":"@@@Meter Analysis Language (#5531)\n\n","date":"2020-10-21 16:45:47","modifiedFileCount":"7","status":"M","submitter":"Gao Hongtao"},{"authorTime":"2021-02-04 20:30:36","codes":[{"authorDate":"2021-02-04 20:30:36","commitOrder":4,"curCode":"    public boolean combine(final Metrics metrics) {\n        PercentileFunction percentile = (PercentileFunction) metrics;\n\n        if (!dataset.keysEqual(percentile.getDataset())) {\n            log.warn(\"Incompatible input [{}}] for current PercentileFunction[{}], entity {}\",\n                     percentile, this, entityId\n            );\n            return true;\n        }\n        if (ranks.size() > 0) {\n            IntList ranksOfThat = percentile.getRanks();\n            if (this.ranks.size() != ranks.size()) {\n                log.warn(\"Incompatible ranks size = [{}}] for current PercentileFunction[{}]\",\n                         ranks.size(), this.ranks.size()\n                );\n                return true;\n            } else {\n                if (!this.ranks.equals(percentile.getRanks())) {\n                    log.warn(\"Rank {} doesn't exist in the previous ranks {}\", percentile.getRanks(), ranks);\n                    return true;\n                }\n            }\n        }\n\n        this.dataset.append(percentile.dataset);\n\n        this.isCalculated = false;\n        return true;\n    }\n","date":"2021-02-04 20:30:36","endLine":153,"groupId":"6130","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"combine","params":"(finalMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/47/b7f9f1ba39f179926e6f1feca0c9a406ceb4a0.src","preCode":"    public void combine(final Metrics metrics) {\n        PercentileFunction percentile = (PercentileFunction) metrics;\n\n        if (!dataset.keysEqual(percentile.getDataset())) {\n            log.warn(\"Incompatible input [{}}] for current PercentileFunction[{}], entity {}\",\n                     percentile, this, entityId\n            );\n            return;\n        }\n        if (ranks.size() > 0) {\n            IntList ranksOfThat = percentile.getRanks();\n            if (this.ranks.size() != ranks.size()) {\n                log.warn(\"Incompatible ranks size = [{}}] for current PercentileFunction[{}]\",\n                         ranks.size(), this.ranks.size()\n                );\n                return;\n            } else {\n                if (!this.ranks.equals(percentile.getRanks())) {\n                    log.warn(\"Rank {} doesn't exist in the previous ranks {}\", percentile.getRanks(), ranks);\n                    return;\n                }\n            }\n        }\n\n        this.dataset.append(percentile.dataset);\n\n        this.isCalculated = false;\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/PercentileFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2021-02-04 20:30:36","commitOrder":4,"curCode":"    public boolean combine(final Metrics metrics) {\n        AvgHistogramPercentileFunction percentile = (AvgHistogramPercentileFunction) metrics;\n\n        if (ranks.size() > 0) {\n            if (this.ranks.size() != ranks.size()) {\n                log.warn(\"Incompatible ranks size = [{}}] for current PercentileFunction[{}]\",\n                         ranks.size(), this.ranks.size()\n                );\n                return true;\n            } else {\n                if (!this.ranks.equals(percentile.getRanks())) {\n                    log.warn(\"Rank {} doesn't exist in the previous ranks {}\", percentile.getRanks(), ranks);\n                    return true;\n                }\n            }\n        }\n\n        this.summation.append(percentile.summation);\n        this.count.append(percentile.count);\n\n        this.isCalculated = false;\n        return true;\n    }\n","date":"2021-02-04 20:30:36","endLine":179,"groupId":"3194","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"combine","params":"(finalMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3a/2b0f18ad537b2edad5086456b1782895645b4c.src","preCode":"    public void combine(final Metrics metrics) {\n        AvgHistogramPercentileFunction percentile = (AvgHistogramPercentileFunction) metrics;\n\n        if (ranks.size() > 0) {\n            if (this.ranks.size() != ranks.size()) {\n                log.warn(\"Incompatible ranks size = [{}}] for current PercentileFunction[{}]\",\n                         ranks.size(), this.ranks.size()\n                );\n                return;\n            } else {\n                if (!this.ranks.equals(percentile.getRanks())) {\n                    log.warn(\"Rank {} doesn't exist in the previous ranks {}\", percentile.getRanks(), ranks);\n                    return;\n                }\n            }\n        }\n\n        this.summation.append(percentile.summation);\n        this.count.append(percentile.count);\n\n        this.isCalculated = false;\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"1e78a0ac780b45c3e8fe4f750568c8f6f9625a72","commitMessage":"@@@Metrics combination API supports abandoning results (#6318)\n\n","date":"2021-02-04 20:30:36","modifiedFileCount":"37","status":"M","submitter":"Zhenxu Ke"},{"authorTime":"2021-04-27 15:13:24","codes":[{"authorDate":"2021-04-27 15:13:24","commitOrder":5,"curCode":"    public boolean combine(final Metrics metrics) {\n        PercentileFunction percentile = (PercentileFunction) metrics;\n\n        if (!dataset.keysEqual(percentile.getDataset())) {\n            log.warn(\"Incompatible input [{}}] for current PercentileFunction[{}], entity {}\",\n                     percentile, this, entityId\n            );\n            return true;\n        }\n        if (this.ranks.size() > 0) {\n            IntList ranksOfThat = percentile.getRanks();\n            if (this.ranks.size() != ranksOfThat.size()) {\n                log.warn(\"Incompatible ranks size = [{}}] for current PercentileFunction[{}]\",\n                         ranksOfThat.size(), this.ranks.size()\n                );\n                return true;\n            } else {\n                if (!this.ranks.equals(ranksOfThat)) {\n                    log.warn(\"Rank {} doesn't exist in the previous ranks {}\", ranksOfThat, this.ranks);\n                    return true;\n                }\n            }\n        }\n\n        this.dataset.append(percentile.dataset);\n\n        this.isCalculated = false;\n        return true;\n    }\n","date":"2021-04-27 15:13:24","endLine":153,"groupId":"10359","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"combine","params":"(finalMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/06/1be7e31d2cf16d1e3c7240042349b725e05b8c.src","preCode":"    public boolean combine(final Metrics metrics) {\n        PercentileFunction percentile = (PercentileFunction) metrics;\n\n        if (!dataset.keysEqual(percentile.getDataset())) {\n            log.warn(\"Incompatible input [{}}] for current PercentileFunction[{}], entity {}\",\n                     percentile, this, entityId\n            );\n            return true;\n        }\n        if (ranks.size() > 0) {\n            IntList ranksOfThat = percentile.getRanks();\n            if (this.ranks.size() != ranks.size()) {\n                log.warn(\"Incompatible ranks size = [{}}] for current PercentileFunction[{}]\",\n                         ranks.size(), this.ranks.size()\n                );\n                return true;\n            } else {\n                if (!this.ranks.equals(percentile.getRanks())) {\n                    log.warn(\"Rank {} doesn't exist in the previous ranks {}\", percentile.getRanks(), ranks);\n                    return true;\n                }\n            }\n        }\n\n        this.dataset.append(percentile.dataset);\n\n        this.isCalculated = false;\n        return true;\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/PercentileFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2021-04-27 15:13:24","commitOrder":5,"curCode":"    public boolean combine(final Metrics metrics) {\n        AvgHistogramPercentileFunction percentile = (AvgHistogramPercentileFunction) metrics;\n\n        if (this.ranks.size() > 0) {\n            IntList ranksOfThat = percentile.getRanks();\n            if (this.ranks.size() != ranksOfThat.size()) {\n                log.warn(\"Incompatible ranks size = [{}}] for current PercentileFunction[{}]\",\n                         ranksOfThat.size(), this.ranks.size()\n                );\n                return true;\n            } else {\n                if (!this.ranks.equals(ranksOfThat)) {\n                    log.warn(\"Rank {} doesn't exist in the previous ranks {}\", ranksOfThat, this.ranks);\n                    return true;\n                }\n            }\n        }\n\n        this.summation.append(percentile.summation);\n        this.count.append(percentile.count);\n\n        this.isCalculated = false;\n        return true;\n    }\n","date":"2021-04-27 15:13:24","endLine":180,"groupId":"10359","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"combine","params":"(finalMetricsmetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fe/879e676534600363c50449294127dbae0dd1a2.src","preCode":"    public boolean combine(final Metrics metrics) {\n        AvgHistogramPercentileFunction percentile = (AvgHistogramPercentileFunction) metrics;\n\n        if (ranks.size() > 0) {\n            if (this.ranks.size() != ranks.size()) {\n                log.warn(\"Incompatible ranks size = [{}}] for current PercentileFunction[{}]\",\n                         ranks.size(), this.ranks.size()\n                );\n                return true;\n            } else {\n                if (!this.ranks.equals(percentile.getRanks())) {\n                    log.warn(\"Rank {} doesn't exist in the previous ranks {}\", percentile.getRanks(), ranks);\n                    return true;\n                }\n            }\n        }\n\n        this.summation.append(percentile.summation);\n        this.count.append(percentile.count);\n\n        this.isCalculated = false;\n        return true;\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/meter/function/avg/AvgHistogramPercentileFunction.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"afe4cb0c0d0fe2b9b620ba8d1b3413329eadbf40","commitMessage":"@@@fix: Some incompatibles check codes didn't work  in `PercentileFunction combine` (#6851)\n\n","date":"2021-04-27 15:13:24","modifiedFileCount":"2","status":"M","submitter":"wankai123"}]
