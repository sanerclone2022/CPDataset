[{"authorTime":"2019-07-18 19:47:23","codes":[{"authorDate":"2019-07-18 19:47:23","commitOrder":1,"curCode":"    private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsClassName(metricsStmt, false);\n        CtClass parentMetricsClass = null;\n        try {\n            parentMetricsClass = classPool.get(METRICS_FUNCTION_PACKAGE + metricsStmt.getMetricsClassName());\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find parent class for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n        CtClass metricsClass = classPool.makeClass(metricsClassName(metricsStmt, true), parentMetricsClass);\n        try {\n            metricsClass.addInterface(classPool.get(WITH_METADATA_INTERFACE));\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find WithMetadata interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        ClassFile metricsClassClassFile = metricsClass.getClassFile();\n        ConstPool constPool = metricsClassClassFile.getConstPool();\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsClass);\n            metricsClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\r\n\n        for (SourceColumn field : metricsStmt.getFieldsFromSource()) {\n            try {\n                CtField newField = CtField.make(\"private \" + field.getType().getName() + \" \" + field.getFieldName() + \";\", metricsClass);\n\n                metricsClass.addField(newField);\n\n                metricsClass.addMethod(CtNewMethod.getter(field.getFieldGetter(), newField));\n                metricsClass.addMethod(CtNewMethod.setter(field.getFieldSetter(), newField));\n\n                AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n                \r\n\n                Annotation columnAnnotation = new Annotation(Column.class.getName(), constPool);\n                columnAnnotation.addMemberValue(\"columnName\", new StringMemberValue(field.getColumnName(), constPool));\n                annotationsAttribute.addAnnotation(columnAnnotation);\n\n                if (field.isID()) {\n                    \r\n\n                    Annotation idAnnotation = new Annotation(IDColumn.class.getName(), constPool);\n                    annotationsAttribute.addAnnotation(idAnnotation);\n                }\n\n                newField.getFieldInfo().addAttribute(annotationsAttribute);\n\n            } catch (CannotCompileException e) {\n                logger.error(\"Can't add field(including set/get) \" + field.getFieldName() + \" in \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\n        for (String method : METRICS_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsClass));\n            } catch (Exception e) {\n                logger.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\r\n\n        AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n        Annotation streamAnnotation = new Annotation(Stream.class.getName(), constPool);\n        streamAnnotation.addMemberValue(\"name\", new StringMemberValue(metricsStmt.getTableName(), constPool));\n        streamAnnotation.addMemberValue(\"scopeId\", new IntegerMemberValue(constPool, metricsStmt.getSourceScopeId()));\n        streamAnnotation.addMemberValue(\"builder\", new ClassMemberValue(metricsBuilderClassName(metricsStmt, true), constPool));\n        streamAnnotation.addMemberValue(\"processor\", new ClassMemberValue(METRICS_STREAM_PROCESSOR, constPool));\n\n        annotationsAttribute.addAnnotation(streamAnnotation);\n        metricsClassClassFile.addAttribute(annotationsAttribute);\n\n        Class targetClass;\n        try {\n            targetClass = metricsClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        logger.debug(\"Generate metrics class, \" + metricsClass.getName());\n        writeGeneratedFile(metricsClass, metricsClass.getSimpleName(), \"metrics\");\n\n        return targetClass;\n    }\n","date":"2019-07-18 19:47:23","endLine":313,"groupId":"4545","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"generateMetricsClass","params":"(AnalysisResultmetricsStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/7c/983fcd61b4ce5e8b197a19e533d300c7fede4d.src","preCode":"    private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsClassName(metricsStmt, false);\n        CtClass parentMetricsClass = null;\n        try {\n            parentMetricsClass = classPool.get(METRICS_FUNCTION_PACKAGE + metricsStmt.getMetricsClassName());\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find parent class for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n        CtClass metricsClass = classPool.makeClass(metricsClassName(metricsStmt, true), parentMetricsClass);\n        try {\n            metricsClass.addInterface(classPool.get(WITH_METADATA_INTERFACE));\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find WithMetadata interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        ClassFile metricsClassClassFile = metricsClass.getClassFile();\n        ConstPool constPool = metricsClassClassFile.getConstPool();\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsClass);\n            metricsClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\r\n\n        for (SourceColumn field : metricsStmt.getFieldsFromSource()) {\n            try {\n                CtField newField = CtField.make(\"private \" + field.getType().getName() + \" \" + field.getFieldName() + \";\", metricsClass);\n\n                metricsClass.addField(newField);\n\n                metricsClass.addMethod(CtNewMethod.getter(field.getFieldGetter(), newField));\n                metricsClass.addMethod(CtNewMethod.setter(field.getFieldSetter(), newField));\n\n                AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n                \r\n\n                Annotation columnAnnotation = new Annotation(Column.class.getName(), constPool);\n                columnAnnotation.addMemberValue(\"columnName\", new StringMemberValue(field.getColumnName(), constPool));\n                annotationsAttribute.addAnnotation(columnAnnotation);\n\n                if (field.isID()) {\n                    \r\n\n                    Annotation idAnnotation = new Annotation(IDColumn.class.getName(), constPool);\n                    annotationsAttribute.addAnnotation(idAnnotation);\n                }\n\n                newField.getFieldInfo().addAttribute(annotationsAttribute);\n\n            } catch (CannotCompileException e) {\n                logger.error(\"Can't add field(including set/get) \" + field.getFieldName() + \" in \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\n        for (String method : METRICS_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsClass));\n            } catch (Exception e) {\n                logger.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\r\n\n        AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n        Annotation streamAnnotation = new Annotation(Stream.class.getName(), constPool);\n        streamAnnotation.addMemberValue(\"name\", new StringMemberValue(metricsStmt.getTableName(), constPool));\n        streamAnnotation.addMemberValue(\"scopeId\", new IntegerMemberValue(constPool, metricsStmt.getSourceScopeId()));\n        streamAnnotation.addMemberValue(\"builder\", new ClassMemberValue(metricsBuilderClassName(metricsStmt, true), constPool));\n        streamAnnotation.addMemberValue(\"processor\", new ClassMemberValue(METRICS_STREAM_PROCESSOR, constPool));\n\n        annotationsAttribute.addAnnotation(streamAnnotation);\n        metricsClassClassFile.addAttribute(annotationsAttribute);\n\n        Class targetClass;\n        try {\n            targetClass = metricsClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        logger.debug(\"Generate metrics class, \" + metricsClass.getName());\n        writeGeneratedFile(metricsClass, metricsClass.getSimpleName(), \"metrics\");\n\n        return targetClass;\n    }\n","realPath":"oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"B"},{"authorDate":"2019-07-18 19:47:23","commitOrder":1,"curCode":"    private void generateMetricsBuilderClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsBuilderClassName(metricsStmt, false);\n        CtClass metricsBuilderClass = classPool.makeClass(metricsBuilderClassName(metricsStmt, true));\n        try {\n            metricsBuilderClass.addInterface(classPool.get(STORAGE_BUILDER_INTERFACE));\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find StorageBuilder interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        ClassFile metricsClassClassFile = metricsBuilderClass.getClassFile();\n        ConstPool constPool = metricsClassClassFile.getConstPool();\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsBuilderClass);\n            metricsBuilderClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        for (String method : METRICS_BUILDER_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics-builder/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsBuilderClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsBuilderClass));\n            } catch (Exception e) {\n                logger.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        try {\n            metricsBuilderClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        writeGeneratedFile(metricsBuilderClass, className, \"metrics/builder\");\n    }\n","date":"2019-07-18 19:47:23","endLine":367,"groupId":"2751","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generateMetricsBuilderClass","params":"(AnalysisResultmetricsStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/7c/983fcd61b4ce5e8b197a19e533d300c7fede4d.src","preCode":"    private void generateMetricsBuilderClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsBuilderClassName(metricsStmt, false);\n        CtClass metricsBuilderClass = classPool.makeClass(metricsBuilderClassName(metricsStmt, true));\n        try {\n            metricsBuilderClass.addInterface(classPool.get(STORAGE_BUILDER_INTERFACE));\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find StorageBuilder interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        ClassFile metricsClassClassFile = metricsBuilderClass.getClassFile();\n        ConstPool constPool = metricsClassClassFile.getConstPool();\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsBuilderClass);\n            metricsBuilderClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        for (String method : METRICS_BUILDER_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics-builder/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsBuilderClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsBuilderClass));\n            } catch (Exception e) {\n                logger.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        try {\n            metricsBuilderClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        writeGeneratedFile(metricsBuilderClass, className, \"metrics/builder\");\n    }\n","realPath":"oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"B"}],"commitId":"5b039e9747fac98444b4ec423a5d57524202f286","commitMessage":"@@@All NEW OAL Runtime Engine (#3109)\n\n* Change OAL generator tool to runtime.\n\nStep 1. change project structure. API links and maven pom.\n\n* Part of metrics class generation\n\n* Metrcis class generated.\n\n* Set up the basic structure of new OAL engine.\n\n* Finish metrics generation.\n\n* Support dispatcher generation.\n\n* Format codes.\n\n* Generate dispatcher all methods.\n\n* Implement disable in hardcode.\n\n* Clear up\n\n* Fix compile startup.\n\n* Update license and document of new OAL engine.\n\n* Fix rat.\n\n* Disable class output in default\n\n* Copy from @kezhenxu94 's test PR.  https://github.com/apache/skywalking/pull/3110\n\n* Wait for the mount command to finish\n","date":"2019-07-18 19:47:23","modifiedFileCount":"16","status":"B","submitter":"?? Wu Sheng"},{"authorTime":"2020-01-06 13:15:48","codes":[{"authorDate":"2019-07-18 19:47:23","commitOrder":2,"curCode":"    private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsClassName(metricsStmt, false);\n        CtClass parentMetricsClass = null;\n        try {\n            parentMetricsClass = classPool.get(METRICS_FUNCTION_PACKAGE + metricsStmt.getMetricsClassName());\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find parent class for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n        CtClass metricsClass = classPool.makeClass(metricsClassName(metricsStmt, true), parentMetricsClass);\n        try {\n            metricsClass.addInterface(classPool.get(WITH_METADATA_INTERFACE));\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find WithMetadata interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        ClassFile metricsClassClassFile = metricsClass.getClassFile();\n        ConstPool constPool = metricsClassClassFile.getConstPool();\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsClass);\n            metricsClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\r\n\n        for (SourceColumn field : metricsStmt.getFieldsFromSource()) {\n            try {\n                CtField newField = CtField.make(\"private \" + field.getType().getName() + \" \" + field.getFieldName() + \";\", metricsClass);\n\n                metricsClass.addField(newField);\n\n                metricsClass.addMethod(CtNewMethod.getter(field.getFieldGetter(), newField));\n                metricsClass.addMethod(CtNewMethod.setter(field.getFieldSetter(), newField));\n\n                AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n                \r\n\n                Annotation columnAnnotation = new Annotation(Column.class.getName(), constPool);\n                columnAnnotation.addMemberValue(\"columnName\", new StringMemberValue(field.getColumnName(), constPool));\n                annotationsAttribute.addAnnotation(columnAnnotation);\n\n                if (field.isID()) {\n                    \r\n\n                    Annotation idAnnotation = new Annotation(IDColumn.class.getName(), constPool);\n                    annotationsAttribute.addAnnotation(idAnnotation);\n                }\n\n                newField.getFieldInfo().addAttribute(annotationsAttribute);\n\n            } catch (CannotCompileException e) {\n                logger.error(\"Can't add field(including set/get) \" + field.getFieldName() + \" in \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\n        for (String method : METRICS_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsClass));\n            } catch (Exception e) {\n                logger.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\r\n\n        AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n        Annotation streamAnnotation = new Annotation(Stream.class.getName(), constPool);\n        streamAnnotation.addMemberValue(\"name\", new StringMemberValue(metricsStmt.getTableName(), constPool));\n        streamAnnotation.addMemberValue(\"scopeId\", new IntegerMemberValue(constPool, metricsStmt.getSourceScopeId()));\n        streamAnnotation.addMemberValue(\"builder\", new ClassMemberValue(metricsBuilderClassName(metricsStmt, true), constPool));\n        streamAnnotation.addMemberValue(\"processor\", new ClassMemberValue(METRICS_STREAM_PROCESSOR, constPool));\n\n        annotationsAttribute.addAnnotation(streamAnnotation);\n        metricsClassClassFile.addAttribute(annotationsAttribute);\n\n        Class targetClass;\n        try {\n            targetClass = metricsClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        logger.debug(\"Generate metrics class, \" + metricsClass.getName());\n        writeGeneratedFile(metricsClass, metricsClass.getSimpleName(), \"metrics\");\n\n        return targetClass;\n    }\n","date":"2019-07-18 19:47:23","endLine":313,"groupId":"4545","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"generateMetricsClass","params":"(AnalysisResultmetricsStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/7c/983fcd61b4ce5e8b197a19e533d300c7fede4d.src","preCode":"    private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsClassName(metricsStmt, false);\n        CtClass parentMetricsClass = null;\n        try {\n            parentMetricsClass = classPool.get(METRICS_FUNCTION_PACKAGE + metricsStmt.getMetricsClassName());\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find parent class for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n        CtClass metricsClass = classPool.makeClass(metricsClassName(metricsStmt, true), parentMetricsClass);\n        try {\n            metricsClass.addInterface(classPool.get(WITH_METADATA_INTERFACE));\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find WithMetadata interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        ClassFile metricsClassClassFile = metricsClass.getClassFile();\n        ConstPool constPool = metricsClassClassFile.getConstPool();\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsClass);\n            metricsClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\r\n\n        for (SourceColumn field : metricsStmt.getFieldsFromSource()) {\n            try {\n                CtField newField = CtField.make(\"private \" + field.getType().getName() + \" \" + field.getFieldName() + \";\", metricsClass);\n\n                metricsClass.addField(newField);\n\n                metricsClass.addMethod(CtNewMethod.getter(field.getFieldGetter(), newField));\n                metricsClass.addMethod(CtNewMethod.setter(field.getFieldSetter(), newField));\n\n                AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n                \r\n\n                Annotation columnAnnotation = new Annotation(Column.class.getName(), constPool);\n                columnAnnotation.addMemberValue(\"columnName\", new StringMemberValue(field.getColumnName(), constPool));\n                annotationsAttribute.addAnnotation(columnAnnotation);\n\n                if (field.isID()) {\n                    \r\n\n                    Annotation idAnnotation = new Annotation(IDColumn.class.getName(), constPool);\n                    annotationsAttribute.addAnnotation(idAnnotation);\n                }\n\n                newField.getFieldInfo().addAttribute(annotationsAttribute);\n\n            } catch (CannotCompileException e) {\n                logger.error(\"Can't add field(including set/get) \" + field.getFieldName() + \" in \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\n        for (String method : METRICS_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsClass));\n            } catch (Exception e) {\n                logger.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\r\n\n        AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n        Annotation streamAnnotation = new Annotation(Stream.class.getName(), constPool);\n        streamAnnotation.addMemberValue(\"name\", new StringMemberValue(metricsStmt.getTableName(), constPool));\n        streamAnnotation.addMemberValue(\"scopeId\", new IntegerMemberValue(constPool, metricsStmt.getSourceScopeId()));\n        streamAnnotation.addMemberValue(\"builder\", new ClassMemberValue(metricsBuilderClassName(metricsStmt, true), constPool));\n        streamAnnotation.addMemberValue(\"processor\", new ClassMemberValue(METRICS_STREAM_PROCESSOR, constPool));\n\n        annotationsAttribute.addAnnotation(streamAnnotation);\n        metricsClassClassFile.addAttribute(annotationsAttribute);\n\n        Class targetClass;\n        try {\n            targetClass = metricsClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        logger.debug(\"Generate metrics class, \" + metricsClass.getName());\n        writeGeneratedFile(metricsClass, metricsClass.getSimpleName(), \"metrics\");\n\n        return targetClass;\n    }\n","realPath":"oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"N"},{"authorDate":"2020-01-06 13:15:48","commitOrder":2,"curCode":"    private void generateMetricsBuilderClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsBuilderClassName(metricsStmt, false);\n        CtClass metricsBuilderClass = classPool.makeClass(metricsBuilderClassName(metricsStmt, true));\n        try {\n            metricsBuilderClass.addInterface(classPool.get(STORAGE_BUILDER_INTERFACE));\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find StorageBuilder interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsBuilderClass);\n            metricsBuilderClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        for (String method : METRICS_BUILDER_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics-builder/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsBuilderClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsBuilderClass));\n            } catch (Exception e) {\n                logger.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        try {\n            metricsBuilderClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        writeGeneratedFile(metricsBuilderClass, className, \"metrics/builder\");\n    }\n","date":"2020-01-06 13:15:48","endLine":352,"groupId":"2751","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"generateMetricsBuilderClass","params":"(AnalysisResultmetricsStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/62d38ffe730e2be8bbe15d12d399d8e92b8e21.src","preCode":"    private void generateMetricsBuilderClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsBuilderClassName(metricsStmt, false);\n        CtClass metricsBuilderClass = classPool.makeClass(metricsBuilderClassName(metricsStmt, true));\n        try {\n            metricsBuilderClass.addInterface(classPool.get(STORAGE_BUILDER_INTERFACE));\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find StorageBuilder interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        ClassFile metricsClassClassFile = metricsBuilderClass.getClassFile();\n        ConstPool constPool = metricsClassClassFile.getConstPool();\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsBuilderClass);\n            metricsBuilderClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        for (String method : METRICS_BUILDER_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics-builder/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsBuilderClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsBuilderClass));\n            } catch (Exception e) {\n                logger.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        try {\n            metricsBuilderClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        writeGeneratedFile(metricsBuilderClass, className, \"metrics/builder\");\n    }\n","realPath":"oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"M"}],"commitId":"f181f7b4830b05c6812878ccd4b23633163ea39a","commitMessage":"@@@delete unused code. (#4178)\n\n","date":"2020-01-06 13:15:48","modifiedFileCount":"1","status":"M","submitter":"aderm"},{"authorTime":"2020-01-06 13:15:48","codes":[{"authorDate":"2020-03-30 18:56:26","commitOrder":3,"curCode":"    private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsClassName(metricsStmt, false);\n        CtClass parentMetricsClass = null;\n        try {\n            parentMetricsClass = classPool.get(METRICS_FUNCTION_PACKAGE + metricsStmt.getMetricsClassName());\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find parent class for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n        CtClass metricsClass = classPool.makeClass(metricsClassName(metricsStmt, true), parentMetricsClass);\n        try {\n            metricsClass.addInterface(classPool.get(WITH_METADATA_INTERFACE));\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find WithMetadata interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        ClassFile metricsClassClassFile = metricsClass.getClassFile();\n        ConstPool constPool = metricsClassClassFile.getConstPool();\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsClass);\n            metricsClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\r\n\n        for (SourceColumn field : metricsStmt.getFieldsFromSource()) {\n            try {\n                CtField newField = CtField.make(\n                    \"private \" + field.getType()\n                                      .getName() + \" \" + field.getFieldName() + \";\", metricsClass);\n\n                metricsClass.addField(newField);\n\n                metricsClass.addMethod(CtNewMethod.getter(field.getFieldGetter(), newField));\n                metricsClass.addMethod(CtNewMethod.setter(field.getFieldSetter(), newField));\n\n                AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(\n                    constPool, AnnotationsAttribute.visibleTag);\n                \r\n\n                Annotation columnAnnotation = new Annotation(Column.class.getName(), constPool);\n                columnAnnotation.addMemberValue(\"columnName\", new StringMemberValue(field.getColumnName(), constPool));\n                if (field.getType().equals(String.class)) {\n                    columnAnnotation.addMemberValue(\"length\", new IntegerMemberValue(constPool, field.getLength()));\n                }\n                annotationsAttribute.addAnnotation(columnAnnotation);\n\n                newField.getFieldInfo().addAttribute(annotationsAttribute);\n            } catch (CannotCompileException e) {\n                logger.error(\n                    \"Can't add field(including set/get) \" + field.getFieldName() + \" in \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\n        for (String method : METRICS_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsClass));\n            } catch (Exception e) {\n                logger.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\r\n\n        AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(\n            constPool, AnnotationsAttribute.visibleTag);\n        Annotation streamAnnotation = new Annotation(Stream.class.getName(), constPool);\n        streamAnnotation.addMemberValue(\"name\", new StringMemberValue(metricsStmt.getTableName(), constPool));\n        streamAnnotation.addMemberValue(\"scopeId\", new IntegerMemberValue(constPool, metricsStmt.getSourceScopeId()));\n        streamAnnotation.addMemberValue(\n            \"builder\", new ClassMemberValue(metricsBuilderClassName(metricsStmt, true), constPool));\n        streamAnnotation.addMemberValue(\"processor\", new ClassMemberValue(METRICS_STREAM_PROCESSOR, constPool));\n\n        annotationsAttribute.addAnnotation(streamAnnotation);\n        metricsClassClassFile.addAttribute(annotationsAttribute);\n\n        Class targetClass;\n        try {\n            targetClass = metricsClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        logger.debug(\"Generate metrics class, \" + metricsClass.getName());\n        writeGeneratedFile(metricsClass, metricsClass.getSimpleName(), \"metrics\");\n\n        return targetClass;\n    }\n","date":"2020-03-30 18:56:26","endLine":310,"groupId":"2751","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"generateMetricsClass","params":"(AnalysisResultmetricsStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b0/cc829dda32c081c1155f7b6da8b24c44dc69cc.src","preCode":"    private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsClassName(metricsStmt, false);\n        CtClass parentMetricsClass = null;\n        try {\n            parentMetricsClass = classPool.get(METRICS_FUNCTION_PACKAGE + metricsStmt.getMetricsClassName());\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find parent class for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n        CtClass metricsClass = classPool.makeClass(metricsClassName(metricsStmt, true), parentMetricsClass);\n        try {\n            metricsClass.addInterface(classPool.get(WITH_METADATA_INTERFACE));\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find WithMetadata interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        ClassFile metricsClassClassFile = metricsClass.getClassFile();\n        ConstPool constPool = metricsClassClassFile.getConstPool();\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsClass);\n            metricsClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\r\n\n        for (SourceColumn field : metricsStmt.getFieldsFromSource()) {\n            try {\n                CtField newField = CtField.make(\"private \" + field.getType()\n                                                                  .getName() + \" \" + field.getFieldName() + \";\", metricsClass);\n\n                metricsClass.addField(newField);\n\n                metricsClass.addMethod(CtNewMethod.getter(field.getFieldGetter(), newField));\n                metricsClass.addMethod(CtNewMethod.setter(field.getFieldSetter(), newField));\n\n                AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n                \r\n\n                Annotation columnAnnotation = new Annotation(Column.class.getName(), constPool);\n                columnAnnotation.addMemberValue(\"columnName\", new StringMemberValue(field.getColumnName(), constPool));\n                annotationsAttribute.addAnnotation(columnAnnotation);\n\n                if (field.isID()) {\n                    \r\n\n                    Annotation idAnnotation = new Annotation(IDColumn.class.getName(), constPool);\n                    annotationsAttribute.addAnnotation(idAnnotation);\n                }\n\n                newField.getFieldInfo().addAttribute(annotationsAttribute);\n\n            } catch (CannotCompileException e) {\n                logger.error(\"Can't add field(including set/get) \" + field.getFieldName() + \" in \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\n        for (String method : METRICS_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsClass));\n            } catch (Exception e) {\n                logger.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\r\n\n        AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n        Annotation streamAnnotation = new Annotation(Stream.class.getName(), constPool);\n        streamAnnotation.addMemberValue(\"name\", new StringMemberValue(metricsStmt.getTableName(), constPool));\n        streamAnnotation.addMemberValue(\"scopeId\", new IntegerMemberValue(constPool, metricsStmt.getSourceScopeId()));\n        streamAnnotation.addMemberValue(\"builder\", new ClassMemberValue(metricsBuilderClassName(metricsStmt, true), constPool));\n        streamAnnotation.addMemberValue(\"processor\", new ClassMemberValue(METRICS_STREAM_PROCESSOR, constPool));\n\n        annotationsAttribute.addAnnotation(streamAnnotation);\n        metricsClassClassFile.addAttribute(annotationsAttribute);\n\n        Class targetClass;\n        try {\n            targetClass = metricsClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        logger.debug(\"Generate metrics class, \" + metricsClass.getName());\n        writeGeneratedFile(metricsClass, metricsClass.getSimpleName(), \"metrics\");\n\n        return targetClass;\n    }\n","realPath":"oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2020-01-06 13:15:48","commitOrder":3,"curCode":"    private void generateMetricsBuilderClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsBuilderClassName(metricsStmt, false);\n        CtClass metricsBuilderClass = classPool.makeClass(metricsBuilderClassName(metricsStmt, true));\n        try {\n            metricsBuilderClass.addInterface(classPool.get(STORAGE_BUILDER_INTERFACE));\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find StorageBuilder interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsBuilderClass);\n            metricsBuilderClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        for (String method : METRICS_BUILDER_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics-builder/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsBuilderClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsBuilderClass));\n            } catch (Exception e) {\n                logger.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        try {\n            metricsBuilderClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        writeGeneratedFile(metricsBuilderClass, className, \"metrics/builder\");\n    }\n","date":"2020-01-06 13:15:48","endLine":352,"groupId":"2751","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"generateMetricsBuilderClass","params":"(AnalysisResultmetricsStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/05/62d38ffe730e2be8bbe15d12d399d8e92b8e21.src","preCode":"    private void generateMetricsBuilderClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsBuilderClassName(metricsStmt, false);\n        CtClass metricsBuilderClass = classPool.makeClass(metricsBuilderClassName(metricsStmt, true));\n        try {\n            metricsBuilderClass.addInterface(classPool.get(STORAGE_BUILDER_INTERFACE));\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find StorageBuilder interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsBuilderClass);\n            metricsBuilderClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        for (String method : METRICS_BUILDER_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics-builder/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsBuilderClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsBuilderClass));\n            } catch (Exception e) {\n                logger.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        try {\n            metricsBuilderClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        writeGeneratedFile(metricsBuilderClass, className, \"metrics/builder\");\n    }\n","realPath":"oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"N"}],"commitId":"e55073e51970ecb50d014094e4e9b8dcc7d8c0d9","commitMessage":"@@@OAP Core polish.  especially storage level (#4587)\n\n- Add length definition with reasonable default value.\n- #content of @Column has been renamed to storageOnly . I add this to many fields as they are not being query in any case.\n- Merge H2 and MySQL columntype mapping back to consistent.\n- Remove @IDColumn.\n- Support @QueryUnifiedIndex.\n- Refactor the MySQL and H2 installers to use @Column and @QueryUnifiedIndex definitions to create indices automatically. But the index naming rule has been changed to entityseqIDX. seq is the Increment Interger for every entity.\n- Support @MetricsExtension and insertOnly in the MetricsPersistentWorker worker.\n- Optimize MetricsStreamProcessor","date":"2020-03-30 18:56:26","modifiedFileCount":"58","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-05-08 23:53:49","codes":[{"authorDate":"2020-05-08 23:53:49","commitOrder":4,"curCode":"    private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsClassName(metricsStmt, false);\n        CtClass parentMetricsClass = null;\n        try {\n            parentMetricsClass = classPool.get(METRICS_FUNCTION_PACKAGE + metricsStmt.getMetricsClassName());\n        } catch (NotFoundException e) {\n            log.error(\"Can't find parent class for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n        CtClass metricsClass = classPool.makeClass(metricsClassName(metricsStmt, true), parentMetricsClass);\n        try {\n            metricsClass.addInterface(classPool.get(WITH_METADATA_INTERFACE));\n        } catch (NotFoundException e) {\n            log.error(\"Can't find WithMetadata interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        ClassFile metricsClassClassFile = metricsClass.getClassFile();\n        ConstPool constPool = metricsClassClassFile.getConstPool();\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsClass);\n            metricsClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            log.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\r\n\n        for (SourceColumn field : metricsStmt.getFieldsFromSource()) {\n            try {\n                CtField newField = CtField.make(\n                    \"private \" + field.getType()\n                                      .getName() + \" \" + field.getFieldName() + \";\", metricsClass);\n\n                metricsClass.addField(newField);\n\n                metricsClass.addMethod(CtNewMethod.getter(field.getFieldGetter(), newField));\n                metricsClass.addMethod(CtNewMethod.setter(field.getFieldSetter(), newField));\n\n                AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(\n                    constPool, AnnotationsAttribute.visibleTag);\n                \r\n\n                Annotation columnAnnotation = new Annotation(Column.class.getName(), constPool);\n                columnAnnotation.addMemberValue(\"columnName\", new StringMemberValue(field.getColumnName(), constPool));\n                if (field.getType().equals(String.class)) {\n                    columnAnnotation.addMemberValue(\"length\", new IntegerMemberValue(constPool, field.getLength()));\n                }\n                annotationsAttribute.addAnnotation(columnAnnotation);\n\n                newField.getFieldInfo().addAttribute(annotationsAttribute);\n            } catch (CannotCompileException e) {\n                log.error(\n                    \"Can't add field(including set/get) \" + field.getFieldName() + \" in \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\n        for (String method : METRICS_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsClass));\n            } catch (Exception e) {\n                log.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\r\n\n        AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(\n            constPool, AnnotationsAttribute.visibleTag);\n        Annotation streamAnnotation = new Annotation(Stream.class.getName(), constPool);\n        streamAnnotation.addMemberValue(\"name\", new StringMemberValue(metricsStmt.getTableName(), constPool));\n        streamAnnotation.addMemberValue(\"scopeId\", new IntegerMemberValue(constPool, metricsStmt.getSourceScopeId()));\n        streamAnnotation.addMemberValue(\n            \"builder\", new ClassMemberValue(metricsBuilderClassName(metricsStmt, true), constPool));\n        streamAnnotation.addMemberValue(\"processor\", new ClassMemberValue(METRICS_STREAM_PROCESSOR, constPool));\n\n        annotationsAttribute.addAnnotation(streamAnnotation);\n        metricsClassClassFile.addAttribute(annotationsAttribute);\n\n        Class targetClass;\n        try {\n            targetClass = metricsClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            log.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        log.debug(\"Generate metrics class, \" + metricsClass.getName());\n        writeGeneratedFile(metricsClass, metricsClass.getSimpleName(), \"metrics\");\n\n        return targetClass;\n    }\n","date":"2020-05-08 23:53:49","endLine":315,"groupId":"2751","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"generateMetricsClass","params":"(AnalysisResultmetricsStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a7/7aa7f8afae4bd5b61459963a7d586aa4e30b57.src","preCode":"    private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsClassName(metricsStmt, false);\n        CtClass parentMetricsClass = null;\n        try {\n            parentMetricsClass = classPool.get(METRICS_FUNCTION_PACKAGE + metricsStmt.getMetricsClassName());\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find parent class for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n        CtClass metricsClass = classPool.makeClass(metricsClassName(metricsStmt, true), parentMetricsClass);\n        try {\n            metricsClass.addInterface(classPool.get(WITH_METADATA_INTERFACE));\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find WithMetadata interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        ClassFile metricsClassClassFile = metricsClass.getClassFile();\n        ConstPool constPool = metricsClassClassFile.getConstPool();\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsClass);\n            metricsClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\r\n\n        for (SourceColumn field : metricsStmt.getFieldsFromSource()) {\n            try {\n                CtField newField = CtField.make(\n                    \"private \" + field.getType()\n                                      .getName() + \" \" + field.getFieldName() + \";\", metricsClass);\n\n                metricsClass.addField(newField);\n\n                metricsClass.addMethod(CtNewMethod.getter(field.getFieldGetter(), newField));\n                metricsClass.addMethod(CtNewMethod.setter(field.getFieldSetter(), newField));\n\n                AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(\n                    constPool, AnnotationsAttribute.visibleTag);\n                \r\n\n                Annotation columnAnnotation = new Annotation(Column.class.getName(), constPool);\n                columnAnnotation.addMemberValue(\"columnName\", new StringMemberValue(field.getColumnName(), constPool));\n                if (field.getType().equals(String.class)) {\n                    columnAnnotation.addMemberValue(\"length\", new IntegerMemberValue(constPool, field.getLength()));\n                }\n                annotationsAttribute.addAnnotation(columnAnnotation);\n\n                newField.getFieldInfo().addAttribute(annotationsAttribute);\n            } catch (CannotCompileException e) {\n                logger.error(\n                    \"Can't add field(including set/get) \" + field.getFieldName() + \" in \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\n        for (String method : METRICS_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsClass));\n            } catch (Exception e) {\n                logger.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\r\n\n        AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(\n            constPool, AnnotationsAttribute.visibleTag);\n        Annotation streamAnnotation = new Annotation(Stream.class.getName(), constPool);\n        streamAnnotation.addMemberValue(\"name\", new StringMemberValue(metricsStmt.getTableName(), constPool));\n        streamAnnotation.addMemberValue(\"scopeId\", new IntegerMemberValue(constPool, metricsStmt.getSourceScopeId()));\n        streamAnnotation.addMemberValue(\n            \"builder\", new ClassMemberValue(metricsBuilderClassName(metricsStmt, true), constPool));\n        streamAnnotation.addMemberValue(\"processor\", new ClassMemberValue(METRICS_STREAM_PROCESSOR, constPool));\n\n        annotationsAttribute.addAnnotation(streamAnnotation);\n        metricsClassClassFile.addAttribute(annotationsAttribute);\n\n        Class targetClass;\n        try {\n            targetClass = metricsClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        logger.debug(\"Generate metrics class, \" + metricsClass.getName());\n        writeGeneratedFile(metricsClass, metricsClass.getSimpleName(), \"metrics\");\n\n        return targetClass;\n    }\n","realPath":"oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2020-05-08 23:53:49","commitOrder":4,"curCode":"    private void generateMetricsBuilderClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsBuilderClassName(metricsStmt, false);\n        CtClass metricsBuilderClass = classPool.makeClass(metricsBuilderClassName(metricsStmt, true));\n        try {\n            metricsBuilderClass.addInterface(classPool.get(STORAGE_BUILDER_INTERFACE));\n        } catch (NotFoundException e) {\n            log.error(\"Can't find StorageBuilder interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\n                \"public \" + className + \"() {}\", metricsBuilderClass);\n            metricsBuilderClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            log.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        for (String method : METRICS_BUILDER_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics-builder/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsBuilderClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsBuilderClass));\n            } catch (Exception e) {\n                log.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        try {\n            metricsBuilderClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            log.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        writeGeneratedFile(metricsBuilderClass, className, \"metrics/builder\");\n    }\n","date":"2020-05-08 23:53:49","endLine":364,"groupId":"2751","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"generateMetricsBuilderClass","params":"(AnalysisResultmetricsStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a7/7aa7f8afae4bd5b61459963a7d586aa4e30b57.src","preCode":"    private void generateMetricsBuilderClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsBuilderClassName(metricsStmt, false);\n        CtClass metricsBuilderClass = classPool.makeClass(metricsBuilderClassName(metricsStmt, true));\n        try {\n            metricsBuilderClass.addInterface(classPool.get(STORAGE_BUILDER_INTERFACE));\n        } catch (NotFoundException e) {\n            logger.error(\"Can't find StorageBuilder interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\n                \"public \" + className + \"() {}\", metricsBuilderClass);\n            metricsBuilderClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        for (String method : METRICS_BUILDER_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics-builder/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsBuilderClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsBuilderClass));\n            } catch (Exception e) {\n                logger.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        try {\n            metricsBuilderClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            logger.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        writeGeneratedFile(metricsBuilderClass, className, \"metrics/builder\");\n    }\n","realPath":"oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"}],"commitId":"d4f3218dea29371fc23c66f5c72f5e48f88dd4be","commitMessage":"@@@Support define multiple OAL configuration (#4748)\n\n","date":"2020-05-08 23:53:49","modifiedFileCount":"25","status":"M","submitter":"zhang-wei"},{"authorTime":"2021-02-07 10:37:14","codes":[{"authorDate":"2020-05-08 23:53:49","commitOrder":5,"curCode":"    private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsClassName(metricsStmt, false);\n        CtClass parentMetricsClass = null;\n        try {\n            parentMetricsClass = classPool.get(METRICS_FUNCTION_PACKAGE + metricsStmt.getMetricsClassName());\n        } catch (NotFoundException e) {\n            log.error(\"Can't find parent class for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n        CtClass metricsClass = classPool.makeClass(metricsClassName(metricsStmt, true), parentMetricsClass);\n        try {\n            metricsClass.addInterface(classPool.get(WITH_METADATA_INTERFACE));\n        } catch (NotFoundException e) {\n            log.error(\"Can't find WithMetadata interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        ClassFile metricsClassClassFile = metricsClass.getClassFile();\n        ConstPool constPool = metricsClassClassFile.getConstPool();\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsClass);\n            metricsClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            log.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\r\n\n        for (SourceColumn field : metricsStmt.getFieldsFromSource()) {\n            try {\n                CtField newField = CtField.make(\n                    \"private \" + field.getType()\n                                      .getName() + \" \" + field.getFieldName() + \";\", metricsClass);\n\n                metricsClass.addField(newField);\n\n                metricsClass.addMethod(CtNewMethod.getter(field.getFieldGetter(), newField));\n                metricsClass.addMethod(CtNewMethod.setter(field.getFieldSetter(), newField));\n\n                AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(\n                    constPool, AnnotationsAttribute.visibleTag);\n                \r\n\n                Annotation columnAnnotation = new Annotation(Column.class.getName(), constPool);\n                columnAnnotation.addMemberValue(\"columnName\", new StringMemberValue(field.getColumnName(), constPool));\n                if (field.getType().equals(String.class)) {\n                    columnAnnotation.addMemberValue(\"length\", new IntegerMemberValue(constPool, field.getLength()));\n                }\n                annotationsAttribute.addAnnotation(columnAnnotation);\n\n                newField.getFieldInfo().addAttribute(annotationsAttribute);\n            } catch (CannotCompileException e) {\n                log.error(\n                    \"Can't add field(including set/get) \" + field.getFieldName() + \" in \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\n        for (String method : METRICS_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsClass));\n            } catch (Exception e) {\n                log.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\r\n\n        AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(\n            constPool, AnnotationsAttribute.visibleTag);\n        Annotation streamAnnotation = new Annotation(Stream.class.getName(), constPool);\n        streamAnnotation.addMemberValue(\"name\", new StringMemberValue(metricsStmt.getTableName(), constPool));\n        streamAnnotation.addMemberValue(\"scopeId\", new IntegerMemberValue(constPool, metricsStmt.getSourceScopeId()));\n        streamAnnotation.addMemberValue(\n            \"builder\", new ClassMemberValue(metricsBuilderClassName(metricsStmt, true), constPool));\n        streamAnnotation.addMemberValue(\"processor\", new ClassMemberValue(METRICS_STREAM_PROCESSOR, constPool));\n\n        annotationsAttribute.addAnnotation(streamAnnotation);\n        metricsClassClassFile.addAttribute(annotationsAttribute);\n\n        Class targetClass;\n        try {\n            targetClass = metricsClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            log.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        log.debug(\"Generate metrics class, \" + metricsClass.getName());\n        writeGeneratedFile(metricsClass, metricsClass.getSimpleName(), \"metrics\");\n\n        return targetClass;\n    }\n","date":"2020-05-08 23:53:49","endLine":315,"groupId":"10885","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"generateMetricsClass","params":"(AnalysisResultmetricsStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a7/7aa7f8afae4bd5b61459963a7d586aa4e30b57.src","preCode":"    private Class generateMetricsClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsClassName(metricsStmt, false);\n        CtClass parentMetricsClass = null;\n        try {\n            parentMetricsClass = classPool.get(METRICS_FUNCTION_PACKAGE + metricsStmt.getMetricsClassName());\n        } catch (NotFoundException e) {\n            log.error(\"Can't find parent class for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n        CtClass metricsClass = classPool.makeClass(metricsClassName(metricsStmt, true), parentMetricsClass);\n        try {\n            metricsClass.addInterface(classPool.get(WITH_METADATA_INTERFACE));\n        } catch (NotFoundException e) {\n            log.error(\"Can't find WithMetadata interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        ClassFile metricsClassClassFile = metricsClass.getClassFile();\n        ConstPool constPool = metricsClassClassFile.getConstPool();\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\"public \" + className + \"() {}\", metricsClass);\n            metricsClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            log.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\r\n\n        for (SourceColumn field : metricsStmt.getFieldsFromSource()) {\n            try {\n                CtField newField = CtField.make(\n                    \"private \" + field.getType()\n                                      .getName() + \" \" + field.getFieldName() + \";\", metricsClass);\n\n                metricsClass.addField(newField);\n\n                metricsClass.addMethod(CtNewMethod.getter(field.getFieldGetter(), newField));\n                metricsClass.addMethod(CtNewMethod.setter(field.getFieldSetter(), newField));\n\n                AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(\n                    constPool, AnnotationsAttribute.visibleTag);\n                \r\n\n                Annotation columnAnnotation = new Annotation(Column.class.getName(), constPool);\n                columnAnnotation.addMemberValue(\"columnName\", new StringMemberValue(field.getColumnName(), constPool));\n                if (field.getType().equals(String.class)) {\n                    columnAnnotation.addMemberValue(\"length\", new IntegerMemberValue(constPool, field.getLength()));\n                }\n                annotationsAttribute.addAnnotation(columnAnnotation);\n\n                newField.getFieldInfo().addAttribute(annotationsAttribute);\n            } catch (CannotCompileException e) {\n                log.error(\n                    \"Can't add field(including set/get) \" + field.getFieldName() + \" in \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\n        for (String method : METRICS_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsClass));\n            } catch (Exception e) {\n                log.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        \r\n\r\n\n        AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(\n            constPool, AnnotationsAttribute.visibleTag);\n        Annotation streamAnnotation = new Annotation(Stream.class.getName(), constPool);\n        streamAnnotation.addMemberValue(\"name\", new StringMemberValue(metricsStmt.getTableName(), constPool));\n        streamAnnotation.addMemberValue(\"scopeId\", new IntegerMemberValue(constPool, metricsStmt.getSourceScopeId()));\n        streamAnnotation.addMemberValue(\n            \"builder\", new ClassMemberValue(metricsBuilderClassName(metricsStmt, true), constPool));\n        streamAnnotation.addMemberValue(\"processor\", new ClassMemberValue(METRICS_STREAM_PROCESSOR, constPool));\n\n        annotationsAttribute.addAnnotation(streamAnnotation);\n        metricsClassClassFile.addAttribute(annotationsAttribute);\n\n        Class targetClass;\n        try {\n            targetClass = metricsClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            log.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        log.debug(\"Generate metrics class, \" + metricsClass.getName());\n        writeGeneratedFile(metricsClass, metricsClass.getSimpleName(), \"metrics\");\n\n        return targetClass;\n    }\n","realPath":"oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"N"},{"authorDate":"2021-02-07 10:37:14","commitOrder":5,"curCode":"    private void generateMetricsBuilderClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsBuilderClassName(metricsStmt, false);\n        CtClass metricsBuilderClass = classPool.makeClass(metricsBuilderClassName(metricsStmt, true));\n        try {\n            metricsBuilderClass.addInterface(classPool.get(storageBuilderFactory.builderTemplate().getSuperClass()));\n        } catch (NotFoundException e) {\n            log.error(\"Can't find StorageBuilder interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\n                \"public \" + className + \"() {}\", metricsBuilderClass);\n            metricsBuilderClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            log.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        for (String method : METRICS_BUILDER_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration\n                    .getTemplate(storageBuilderFactory.builderTemplate().getTemplatePath() + \"/\" + method + \".ftl\")\n                    .process(metricsStmt, methodEntity);\n                metricsBuilderClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsBuilderClass));\n            } catch (Exception e) {\n                log.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        try {\n            metricsBuilderClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            log.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        writeGeneratedFile(metricsBuilderClass, className, \"metrics/builder\");\n    }\n","date":"2021-02-07 10:37:14","endLine":369,"groupId":"10885","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"generateMetricsBuilderClass","params":"(AnalysisResultmetricsStmt)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e4/11b4187718983a91f46e34a0ea8ec1106016c3.src","preCode":"    private void generateMetricsBuilderClass(AnalysisResult metricsStmt) throws OALCompileException {\n        String className = metricsBuilderClassName(metricsStmt, false);\n        CtClass metricsBuilderClass = classPool.makeClass(metricsBuilderClassName(metricsStmt, true));\n        try {\n            metricsBuilderClass.addInterface(classPool.get(STORAGE_BUILDER_INTERFACE));\n        } catch (NotFoundException e) {\n            log.error(\"Can't find StorageBuilder interface for \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        try {\n            CtConstructor defaultConstructor = CtNewConstructor.make(\n                \"public \" + className + \"() {}\", metricsBuilderClass);\n            metricsBuilderClass.addConstructor(defaultConstructor);\n        } catch (CannotCompileException e) {\n            log.error(\"Can't add empty constructor in \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        \r\n\n        for (String method : METRICS_BUILDER_CLASS_METHODS) {\n            StringWriter methodEntity = new StringWriter();\n            try {\n                configuration.getTemplate(\"metrics-builder/\" + method + \".ftl\").process(metricsStmt, methodEntity);\n                metricsBuilderClass.addMethod(CtNewMethod.make(methodEntity.toString(), metricsBuilderClass));\n            } catch (Exception e) {\n                log.error(\"Can't generate method \" + method + \" for \" + className + \".\", e);\n                throw new OALCompileException(e.getMessage(), e);\n            }\n        }\n\n        try {\n            metricsBuilderClass.toClass(currentClassLoader, null);\n        } catch (CannotCompileException e) {\n            log.error(\"Can't compile/load \" + className + \".\", e);\n            throw new OALCompileException(e.getMessage(), e);\n        }\n\n        writeGeneratedFile(metricsBuilderClass, className, \"metrics/builder\");\n    }\n","realPath":"oap-server/oal-rt/src/main/java/org/apache/skywalking/oal/rt/OALRuntime.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"5e8f1eb5528911f924ffca451af20dcdf6151971","commitMessage":"@@@Support multiple implementations of StorageBuilder in different storage implementations - stage 2 (#6336)\n\n","date":"2021-02-07 10:37:14","modifiedFileCount":"16","status":"M","submitter":"?? Wu Sheng"}]
