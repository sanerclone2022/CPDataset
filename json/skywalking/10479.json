[{"authorTime":"2020-06-01 23:06:14","codes":[{"authorDate":"2020-05-08 21:21:03","commitOrder":14,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.getName())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.getBuilder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, stream.getName(), hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2020-05-08 21:21:03","endLine":168,"groupId":"1459","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@StreamDefinitionstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a9/b49b275098684c68752c6d75bbfd57f46404fc.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.getName())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.getBuilder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, stream.getName(), hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"NB"},{"authorDate":"2020-06-01 23:06:14","commitOrder":14,"curCode":"    public void create(final ModuleDefineHolder moduleDefineHolder, final Stream stream, final Class<? extends ManagementData> streamClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IManagementDAO managementDAO;\n        try {\n            managementDAO = storageDAO.newManagementDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                    .getSimpleName() + \" none stream record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), DownSampling.None), false);\n\n        final ManagementPersistentWorker persistentWorker = new ManagementPersistentWorker(moduleDefineHolder, model, managementDAO);\n        workers.put(streamClass, persistentWorker);\n    }\n","date":"2020-06-01 23:06:14","endLine":81,"groupId":"2790","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(finalModuleDefineHoldermoduleDefineHolder@finalStreamstream@finalClass<?extendsManagementData>streamClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8a/44a4da0caa7f2370d71f9901f45d604e1fbb3d.src","preCode":"    public void create(final ModuleDefineHolder moduleDefineHolder, final Stream stream, final Class<? extends ManagementData> streamClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IManagementDAO managementDAO;\n        try {\n            managementDAO = storageDAO.newManagementDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                    .getSimpleName() + \" none stream record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), DownSampling.None), false);\n\n        final ManagementPersistentWorker persistentWorker = new ManagementPersistentWorker(moduleDefineHolder, model, managementDAO);\n        workers.put(streamClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/ManagementStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"}],"commitId":"d094a0f7c0b4a2cf0de38735128b5c07181e30d2","commitMessage":"@@@Support UI template management. (#4843)\n\n","date":"2020-06-01 23:06:14","modifiedFileCount":"32","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2020-06-01 23:06:14","codes":[{"authorDate":"2020-07-06 13:03:36","commitOrder":15,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.getName())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.getBuilder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2020-07-06 13:03:36","endLine":168,"groupId":"1762","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@StreamDefinitionstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e9/8b776da013a21a8a310e5b8744b6cbf82e1f95.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.getName())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.getBuilder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, stream.getName(), hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2020-06-01 23:06:14","commitOrder":15,"curCode":"    public void create(final ModuleDefineHolder moduleDefineHolder, final Stream stream, final Class<? extends ManagementData> streamClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IManagementDAO managementDAO;\n        try {\n            managementDAO = storageDAO.newManagementDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                    .getSimpleName() + \" none stream record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), DownSampling.None), false);\n\n        final ManagementPersistentWorker persistentWorker = new ManagementPersistentWorker(moduleDefineHolder, model, managementDAO);\n        workers.put(streamClass, persistentWorker);\n    }\n","date":"2020-06-01 23:06:14","endLine":81,"groupId":"2790","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(finalModuleDefineHoldermoduleDefineHolder@finalStreamstream@finalClass<?extendsManagementData>streamClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/8a/44a4da0caa7f2370d71f9901f45d604e1fbb3d.src","preCode":"    public void create(final ModuleDefineHolder moduleDefineHolder, final Stream stream, final Class<? extends ManagementData> streamClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IManagementDAO managementDAO;\n        try {\n            managementDAO = storageDAO.newManagementDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                    .getSimpleName() + \" none stream record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), DownSampling.None), false);\n\n        final ManagementPersistentWorker persistentWorker = new ManagementPersistentWorker(moduleDefineHolder, model, managementDAO);\n        workers.put(streamClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/ManagementStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"a3ae7b4dc60db8f665847fbbd10bf230431df12c","commitMessage":"@@@Fix no data bug of oap self observability instance_metrics_second_aggregation metrics. (#5028)\n\n","date":"2020-07-06 13:03:36","modifiedFileCount":"4","status":"M","submitter":"Ax1an"},{"authorTime":"2021-02-07 10:37:14","codes":[{"authorDate":"2021-02-07 10:37:14","commitOrder":16,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(metricsClass, stream.getBuilder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2021-02-07 10:37:14","endLine":173,"groupId":"1762","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@StreamDefinitionstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/9d/8faf7ed95d9fbe0ef98eed1ca09fcd4f6ee3bb.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.getName())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(stream.getBuilder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2021-02-07 10:37:14","commitOrder":16,"curCode":"    public void create(final ModuleDefineHolder moduleDefineHolder, final Stream stream, final Class<? extends ManagementData> streamClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(streamClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IManagementDAO managementDAO;\n        try {\n            managementDAO = storageDAO.newManagementDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                    .getSimpleName() + \" none stream record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), DownSampling.None), false);\n\n        final ManagementPersistentWorker persistentWorker = new ManagementPersistentWorker(moduleDefineHolder, model, managementDAO);\n        workers.put(streamClass, persistentWorker);\n    }\n","date":"2021-02-07 10:37:14","endLine":84,"groupId":"1762","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(finalModuleDefineHoldermoduleDefineHolder@finalStreamstream@finalClass<?extendsManagementData>streamClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e5/16128b18be3e89b234dc59412faeeffe948813.src","preCode":"    public void create(final ModuleDefineHolder moduleDefineHolder, final Stream stream, final Class<? extends ManagementData> streamClass) throws StorageException {\n        if (DisableRegister.INSTANCE.include(stream.name())) {\n            return;\n        }\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IManagementDAO managementDAO;\n        try {\n            managementDAO = storageDAO.newManagementDao(stream.builder().newInstance());\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                    .getSimpleName() + \" none stream record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), DownSampling.None), false);\n\n        final ManagementPersistentWorker persistentWorker = new ManagementPersistentWorker(moduleDefineHolder, model, managementDAO);\n        workers.put(streamClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/ManagementStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"5e8f1eb5528911f924ffca451af20dcdf6151971","commitMessage":"@@@Support multiple implementations of StorageBuilder in different storage implementations - stage 2 (#6336)\n\n","date":"2021-02-07 10:37:14","modifiedFileCount":"16","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-02-07 10:37:14","codes":[{"authorDate":"2021-06-30 19:14:20","commitOrder":17,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(\n            metricsClass, stream.getBuilder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName(), l1FlushPeriod);\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2021-06-30 19:14:20","endLine":182,"groupId":"1762","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@StreamDefinitionstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/3a/407771a94203a51687608f1f744d2720687fcd.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(metricsClass, stream.getBuilder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName());\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2021-02-07 10:37:14","commitOrder":17,"curCode":"    public void create(final ModuleDefineHolder moduleDefineHolder, final Stream stream, final Class<? extends ManagementData> streamClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(streamClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IManagementDAO managementDAO;\n        try {\n            managementDAO = storageDAO.newManagementDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                    .getSimpleName() + \" none stream record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), DownSampling.None), false);\n\n        final ManagementPersistentWorker persistentWorker = new ManagementPersistentWorker(moduleDefineHolder, model, managementDAO);\n        workers.put(streamClass, persistentWorker);\n    }\n","date":"2021-02-07 10:37:14","endLine":84,"groupId":"1762","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(finalModuleDefineHoldermoduleDefineHolder@finalStreamstream@finalClass<?extendsManagementData>streamClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/e5/16128b18be3e89b234dc59412faeeffe948813.src","preCode":"    public void create(final ModuleDefineHolder moduleDefineHolder, final Stream stream, final Class<? extends ManagementData> streamClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(streamClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IManagementDAO managementDAO;\n        try {\n            managementDAO = storageDAO.newManagementDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                    .getSimpleName() + \" none stream record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), DownSampling.None), false);\n\n        final ManagementPersistentWorker persistentWorker = new ManagementPersistentWorker(moduleDefineHolder, model, managementDAO);\n        workers.put(streamClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/ManagementStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"50a0bcbf7395c49029759a8cb1208271405cdcc4","commitMessage":"@@@Optimize L1 aggregation.  enhance gRPC client between L1 and L2 aggregation. (#7206)\n\n1.0Performance: Add L1 aggregation flush period.  which reduces the CPU load and helps young GC.\n\n2. Replace do not direct send after the first aggregation to reduce the network #6400.\n\n3. Enhance the DataCarrier to notify the consumer in no enqueue event in short term.\n\n4. L1 aggregation flush period still works even no further metrics generated.  powered by <3>\n\n5. Fix gRPC remote client OOM. The concurrency control mechanism failed.","date":"2021-06-30 19:14:20","modifiedFileCount":"8","status":"M","submitter":"?? Wu Sheng"},{"authorTime":"2021-07-15 18:06:11","codes":[{"authorDate":"2021-07-15 18:06:11","commitOrder":18,"curCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(\n            metricsClass, stream.getBuilder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        boolean timeRelativeID = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n            timeRelativeID = metricsExtension.timeRelativeID();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), timeRelativeID, DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), timeRelativeID, DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), timeRelativeID, DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName(), l1FlushPeriod);\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","date":"2021-07-15 18:06:11","endLine":189,"groupId":"10479","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(ModuleDefineHoldermoduleDefineHolder@StreamDefinitionstream@Class<?extendsMetrics>metricsClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/6c/323f4744ea06d8a5e28dce43d705c9b822bb5f.src","preCode":"    public void create(ModuleDefineHolder moduleDefineHolder,\n                       StreamDefinition stream,\n                       Class<? extends Metrics> metricsClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(\n            metricsClass, stream.getBuilder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IMetricsDAO metricsDAO;\n        try {\n            metricsDAO = storageDAO.newMetricsDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.getBuilder().getSimpleName() + \" metrics DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        DownSamplingConfigService configService = moduleDefineHolder.find(CoreModule.NAME)\n                                                                    .provider()\n                                                                    .getService(DownSamplingConfigService.class);\n\n        MetricsPersistentWorker hourPersistentWorker = null;\n        MetricsPersistentWorker dayPersistentWorker = null;\n\n        MetricsTransWorker transWorker = null;\n\n        final MetricsExtension metricsExtension = metricsClass.getAnnotation(MetricsExtension.class);\n        \r\n\n        boolean supportDownSampling = true;\n        boolean supportUpdate = true;\n        if (metricsExtension != null) {\n            supportDownSampling = metricsExtension.supportDownSampling();\n            supportUpdate = metricsExtension.supportUpdate();\n        }\n        if (supportDownSampling) {\n            if (configService.shouldToHour()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Hour), false);\n                hourPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n            if (configService.shouldToDay()) {\n                Model model = modelSetter.add(\n                    metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Day), false);\n                dayPersistentWorker = downSamplingWorker(moduleDefineHolder, metricsDAO, model, supportUpdate);\n            }\n\n            transWorker = new MetricsTransWorker(\n                moduleDefineHolder, hourPersistentWorker, dayPersistentWorker);\n        }\n\n        Model model = modelSetter.add(\n            metricsClass, stream.getScopeId(), new Storage(stream.getName(), DownSampling.Minute), false);\n        MetricsPersistentWorker minutePersistentWorker = minutePersistentWorker(\n            moduleDefineHolder, metricsDAO, model, transWorker, supportUpdate);\n\n        String remoteReceiverWorkerName = stream.getName() + \"_rec\";\n        IWorkerInstanceSetter workerInstanceSetter = moduleDefineHolder.find(CoreModule.NAME)\n                                                                       .provider()\n                                                                       .getService(IWorkerInstanceSetter.class);\n        workerInstanceSetter.put(remoteReceiverWorkerName, minutePersistentWorker, metricsClass);\n\n        MetricsRemoteWorker remoteWorker = new MetricsRemoteWorker(moduleDefineHolder, remoteReceiverWorkerName);\n        MetricsAggregateWorker aggregateWorker = new MetricsAggregateWorker(\n            moduleDefineHolder, remoteWorker, stream.getName(), l1FlushPeriod);\n\n        entryWorkers.put(metricsClass, aggregateWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/MetricsStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-07-15 18:06:11","commitOrder":18,"curCode":"    public void create(final ModuleDefineHolder moduleDefineHolder, final Stream stream, final Class<? extends ManagementData> streamClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(streamClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IManagementDAO managementDAO;\n        try {\n            managementDAO = storageDAO.newManagementDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                    .getSimpleName() + \" none stream record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        \r\n        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), false, DownSampling.None), false);\n\n        final ManagementPersistentWorker persistentWorker = new ManagementPersistentWorker(moduleDefineHolder, model, managementDAO);\n        workers.put(streamClass, persistentWorker);\n    }\n","date":"2021-07-15 18:06:11","endLine":85,"groupId":"10479","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"create","params":"(finalModuleDefineHoldermoduleDefineHolder@finalStreamstream@finalClass<?extendsManagementData>streamClass)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/fb/5ceec557b419d741f7e6ef4a93c484de87c1c4.src","preCode":"    public void create(final ModuleDefineHolder moduleDefineHolder, final Stream stream, final Class<? extends ManagementData> streamClass) throws StorageException {\n        final StorageBuilderFactory storageBuilderFactory = moduleDefineHolder.find(StorageModule.NAME)\n                                                                              .provider()\n                                                                              .getService(StorageBuilderFactory.class);\n        final Class<? extends StorageBuilder> builder = storageBuilderFactory.builderOf(streamClass, stream.builder());\n\n        StorageDAO storageDAO = moduleDefineHolder.find(StorageModule.NAME).provider().getService(StorageDAO.class);\n        IManagementDAO managementDAO;\n        try {\n            managementDAO = storageDAO.newManagementDao(builder.getDeclaredConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n            throw new UnexpectedException(\"Create \" + stream.builder()\n                    .getSimpleName() + \" none stream record DAO failure.\", e);\n        }\n\n        ModelCreator modelSetter = moduleDefineHolder.find(CoreModule.NAME).provider().getService(ModelCreator.class);\n        Model model = modelSetter.add(streamClass, stream.scopeId(), new Storage(stream.name(), DownSampling.None), false);\n\n        final ManagementPersistentWorker persistentWorker = new ManagementPersistentWorker(moduleDefineHolder, model, managementDAO);\n        workers.put(streamClass, persistentWorker);\n    }\n","realPath":"oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/worker/ManagementStreamProcessor.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"c59ee900299d24d15780c0b1600c823c3ea111eb","commitMessage":"@@@Performance: optimize IDs read of ElasticSearch storage options(6 and 7) (#7307)\n\n* Performance: optimize IDs read of ElasticSearch storage options(6 and 7). Use the physical index rather than template alias name.","date":"2021-07-15 18:06:11","modifiedFileCount":"15","status":"M","submitter":"?? Wu Sheng"}]
