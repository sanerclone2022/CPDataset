[{"authorTime":"2020-06-30 00:07:53","codes":[{"authorDate":"2020-06-30 00:07:53","commitOrder":1,"curCode":"    public void testParseLocalLogicSpan() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        final JsonObject logicSpanTagValue = new JsonObject();\n        logicSpanTagValue.addProperty(\"logic-span\", true);\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/logic-call\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(false)\n                                          .setSpanType(SpanType.Local)\n                                          .addTags(KeyStringValuePair.newBuilder()\n                                                                     .setKey(LOGIC_ENDPOINT)\n                                                                     .setValue(logicSpanTagValue.toString())\n                                                                     .build())\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseLocal(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(1, receivedSources.size());\n        final Endpoint source = (Endpoint) receivedSources.get(0);\n        Assert.assertEquals(\"/logic-call\", source.getName());\n\n        mockReceiver.clear();\n    }\n","date":"2020-06-30 00:07:53","endLine":329,"groupId":"5312","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseLocalLogicSpan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b9/441891431ac84532a772d461466fb5005d7154.src","preCode":"    public void testParseLocalLogicSpan() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        final JsonObject logicSpanTagValue = new JsonObject();\n        logicSpanTagValue.addProperty(\"logic-span\", true);\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/logic-call\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(false)\n                                          .setSpanType(SpanType.Local)\n                                          .addTags(KeyStringValuePair.newBuilder()\n                                                                     .setKey(LOGIC_ENDPOINT)\n                                                                     .setValue(logicSpanTagValue.toString())\n                                                                     .build())\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseLocal(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(1, receivedSources.size());\n        final Endpoint source = (Endpoint) receivedSources.get(0);\n        Assert.assertEquals(\"/logic-call\", source.getName());\n\n        mockReceiver.clear();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListenerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"B"},{"authorDate":"2020-06-30 00:07:53","commitOrder":1,"curCode":"    public void testParseSpanWithLogicEndpointTag() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        final JsonObject logicSpanTagValue = new JsonObject();\n        logicSpanTagValue.addProperty(\"name\", \"/GraphQL-service\");\n        logicSpanTagValue.addProperty(\"latency\", 100);\n        logicSpanTagValue.addProperty(\"status\", false);\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/logic-call\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(false)\n                                          .setSpanType(SpanType.Local)\n                                          .addTags(KeyStringValuePair.newBuilder()\n                                                                     .setKey(LOGIC_ENDPOINT)\n                                                                     .setValue(logicSpanTagValue.toString())\n                                                                     .build())\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseLocal(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(1, receivedSources.size());\n        final Endpoint source = (Endpoint) receivedSources.get(0);\n        Assert.assertEquals(\"/GraphQL-service\", source.getName());\n\n        mockReceiver.clear();\n    }\n","date":"2020-06-30 00:07:53","endLine":374,"groupId":"5312","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseSpanWithLogicEndpointTag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/b9/441891431ac84532a772d461466fb5005d7154.src","preCode":"    public void testParseSpanWithLogicEndpointTag() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        final JsonObject logicSpanTagValue = new JsonObject();\n        logicSpanTagValue.addProperty(\"name\", \"/GraphQL-service\");\n        logicSpanTagValue.addProperty(\"latency\", 100);\n        logicSpanTagValue.addProperty(\"status\", false);\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/logic-call\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(false)\n                                          .setSpanType(SpanType.Local)\n                                          .addTags(KeyStringValuePair.newBuilder()\n                                                                     .setKey(LOGIC_ENDPOINT)\n                                                                     .setValue(logicSpanTagValue.toString())\n                                                                     .build())\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseLocal(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(1, receivedSources.size());\n        final Endpoint source = (Endpoint) receivedSources.get(0);\n        Assert.assertEquals(\"/GraphQL-service\", source.getName());\n\n        mockReceiver.clear();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListenerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"B"}],"commitId":"a93f1b3c3cd446fb1154c67a7cc9d276573795e9","commitMessage":"@@@Support `logic-endpoint` series tag(s). (#4985)\n\n* Support `logic-endpoint` series tag(s).\n\n* Enhance the plugin dev doc.\n\n* Update Java-Plugin-Development-Guide.md\n\nfix punctuation\n\nCo-authored-by: caoyixiong <32847163+IanCao@users.noreply.github.com>","date":"2020-06-30 00:07:53","modifiedFileCount":"3","status":"B","submitter":"?? Wu Sheng"},{"authorTime":"2021-06-19 20:20:37","codes":[{"authorDate":"2021-06-19 20:20:37","commitOrder":2,"curCode":"    public void testParseLocalLogicSpan() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        final JsonObject logicSpanTagValue = new JsonObject();\n        logicSpanTagValue.addProperty(\"logic-span\", true);\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/logic-call\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(false)\n                                          .setSpanType(SpanType.Local)\n                                          .addTags(KeyStringValuePair.newBuilder()\n                                                                     .setKey(LOGIC_ENDPOINT)\n                                                                     .setValue(logicSpanTagValue.toString())\n                                                                     .build())\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseLocal(spanObject, segment);\n        listener.build();\n\n        final List<ISource> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(1, receivedSources.size());\n        final Endpoint source = (Endpoint) receivedSources.get(0);\n        Assert.assertEquals(\"/logic-call\", source.getName());\n\n        mockReceiver.clear();\n    }\n","date":"2021-06-19 20:20:37","endLine":341,"groupId":"10897","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testParseLocalLogicSpan","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5d/37e709221302bd990d987e42cf6aa0b0e7b6c4.src","preCode":"    public void testParseLocalLogicSpan() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        final JsonObject logicSpanTagValue = new JsonObject();\n        logicSpanTagValue.addProperty(\"logic-span\", true);\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/logic-call\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(false)\n                                          .setSpanType(SpanType.Local)\n                                          .addTags(KeyStringValuePair.newBuilder()\n                                                                     .setKey(LOGIC_ENDPOINT)\n                                                                     .setValue(logicSpanTagValue.toString())\n                                                                     .build())\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseLocal(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(1, receivedSources.size());\n        final Endpoint source = (Endpoint) receivedSources.get(0);\n        Assert.assertEquals(\"/logic-call\", source.getName());\n\n        mockReceiver.clear();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListenerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"},{"authorDate":"2021-06-19 20:20:37","commitOrder":2,"curCode":"    public void testParseSpanWithLogicEndpointTag() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        final JsonObject logicSpanTagValue = new JsonObject();\n        logicSpanTagValue.addProperty(\"name\", \"/GraphQL-service\");\n        logicSpanTagValue.addProperty(\"latency\", 100);\n        logicSpanTagValue.addProperty(\"status\", false);\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/logic-call\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(false)\n                                          .setSpanType(SpanType.Local)\n                                          .addTags(KeyStringValuePair.newBuilder()\n                                                                     .setKey(LOGIC_ENDPOINT)\n                                                                     .setValue(logicSpanTagValue.toString())\n                                                                     .build())\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseLocal(spanObject, segment);\n        listener.build();\n\n        final List<ISource> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(1, receivedSources.size());\n        final Endpoint source = (Endpoint) receivedSources.get(0);\n        Assert.assertEquals(\"/GraphQL-service\", source.getName());\n\n        mockReceiver.clear();\n    }\n","date":"2021-06-19 20:20:37","endLine":386,"groupId":"10897","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testParseSpanWithLogicEndpointTag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/5d/37e709221302bd990d987e42cf6aa0b0e7b6c4.src","preCode":"    public void testParseSpanWithLogicEndpointTag() {\n        final MockReceiver mockReceiver = new MockReceiver();\n        MultiScopesAnalysisListener listener = new MultiScopesAnalysisListener(\n            mockReceiver,\n            CONFIG,\n            CACHE,\n            NAMING_CONTROL\n        );\n\n        final long startTime = System.currentTimeMillis();\n        final JsonObject logicSpanTagValue = new JsonObject();\n        logicSpanTagValue.addProperty(\"name\", \"/GraphQL-service\");\n        logicSpanTagValue.addProperty(\"latency\", 100);\n        logicSpanTagValue.addProperty(\"status\", false);\n        SpanObject spanObject = SpanObject.newBuilder()\n                                          .setOperationName(\"/logic-call\")\n                                          .setStartTime(startTime)\n                                          .setEndTime(startTime + 1000L)\n                                          .setIsError(false)\n                                          .setSpanType(SpanType.Local)\n                                          .addTags(KeyStringValuePair.newBuilder()\n                                                                     .setKey(LOGIC_ENDPOINT)\n                                                                     .setValue(logicSpanTagValue.toString())\n                                                                     .build())\n                                          .build();\n        final SegmentObject segment = SegmentObject.newBuilder()\n                                                   .setService(\"mock-service\")\n                                                   .setServiceInstance(\"mock-instance\")\n                                                   .addSpans(spanObject)\n                                                   .build();\n        listener.parseLocal(spanObject, segment);\n        listener.build();\n\n        final List<Source> receivedSources = mockReceiver.getReceivedSources();\n        Assert.assertEquals(1, receivedSources.size());\n        final Endpoint source = (Endpoint) receivedSources.get(0);\n        Assert.assertEquals(\"/GraphQL-service\", source.getName());\n\n        mockReceiver.clear();\n    }\n","realPath":"oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/MultiScopesAnalysisListenerTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"}],"commitId":"528ee6de4010df28d31443b2d02702649025095d","commitMessage":"@@@OAL supports generating metrics from events (#7134)\n\n* OAL supports generating metrics from events\n\n* Add new dashboard for event metrics\n\n* Add some docs for event metrics","date":"2021-06-19 20:20:37","modifiedFileCount":"16","status":"M","submitter":"kezhenxu94"}]
