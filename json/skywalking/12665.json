[{"authorTime":"2019-07-17 14:40:45","codes":[{"authorDate":"2019-07-17 14:40:45","commitOrder":1,"curCode":"    private ClusterModuleConsulProvider createProvider(String serviceName, String internalComHost, int internalComPort) throws Exception {\n        ClusterModuleConsulProvider provider = new ClusterModuleConsulProvider();\n\n        ClusterModuleConsulConfig config = (ClusterModuleConsulConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(consulAddress);\n        config.setServiceName(serviceName);\n\n        if (!StringUtil.isEmpty(internalComHost)) {\n            config.setInternalComHost(internalComHost);\n        }\n\n        if (internalComPort > 0) {\n            config.setInternalComPort(internalComPort);\n        }\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n\n        ConsulCoordinator consulCoordinator = (ConsulCoordinator) provider.getService(ClusterRegister.class);\n\n        \r\n        ClusterRegister register = remoteInstance -> {\n            if (needUsingInternalAddr(config)) {\n                remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n            }\n\n            Consul client = Whitebox.getInternalState(consulCoordinator, \"client\");\n            AgentClient agentClient = client.agentClient();\n            Whitebox.setInternalState(consulCoordinator, \"selfAddress\", remoteInstance.getAddress());\n            TelemetryRelatedContext.INSTANCE.setId(remoteInstance.getAddress().toString());\n            Registration registration = ImmutableRegistration.builder()\n                .id(remoteInstance.getAddress().toString())\n                .name(serviceName)\n                .address(remoteInstance.getAddress().getHost())\n                .port(remoteInstance.getAddress().getPort())\n                .build();\n\n            agentClient.register(registration);\n        };\n\n        provider.registerServiceImplementation(ClusterRegister.class, register);\n        return provider;\n    }\n","date":"2019-07-17 14:40:45","endLine":216,"groupId":"3949","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createProvider","params":"(StringserviceName@StringinternalComHost@intinternalComPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/48/a170ffba31683848a0a9748f9fb0b635a26ed8.src","preCode":"    private ClusterModuleConsulProvider createProvider(String serviceName, String internalComHost, int internalComPort) throws Exception {\n        ClusterModuleConsulProvider provider = new ClusterModuleConsulProvider();\n\n        ClusterModuleConsulConfig config = (ClusterModuleConsulConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(consulAddress);\n        config.setServiceName(serviceName);\n\n        if (!StringUtil.isEmpty(internalComHost)) {\n            config.setInternalComHost(internalComHost);\n        }\n\n        if (internalComPort > 0) {\n            config.setInternalComPort(internalComPort);\n        }\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n\n        ConsulCoordinator consulCoordinator = (ConsulCoordinator) provider.getService(ClusterRegister.class);\n\n        \r\n        ClusterRegister register = remoteInstance -> {\n            if (needUsingInternalAddr(config)) {\n                remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n            }\n\n            Consul client = Whitebox.getInternalState(consulCoordinator, \"client\");\n            AgentClient agentClient = client.agentClient();\n            Whitebox.setInternalState(consulCoordinator, \"selfAddress\", remoteInstance.getAddress());\n            TelemetryRelatedContext.INSTANCE.setId(remoteInstance.getAddress().toString());\n            Registration registration = ImmutableRegistration.builder()\n                .id(remoteInstance.getAddress().toString())\n                .name(serviceName)\n                .address(remoteInstance.getAddress().getHost())\n                .port(remoteInstance.getAddress().getPort())\n                .build();\n\n            agentClient.register(registration);\n        };\n\n        provider.registerServiceImplementation(ClusterRegister.class, register);\n        return provider;\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-consul-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/consul/ITClusterModuleConsulProviderFunctionalTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"B"},{"authorDate":"2019-07-17 14:40:45","commitOrder":1,"curCode":"    private ClusterModuleNacosProvider createProvider(String servicName) throws ModuleStartException {\n        ClusterModuleNacosProvider provider = new ClusterModuleNacosProvider();\n\n        ClusterModuleNacosConfig config = (ClusterModuleNacosConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(nacosAddress);\n        config.setServiceName(servicName);\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n        return provider;\n    }\n","date":"2019-07-17 14:40:45","endLine":157,"groupId":"2510","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createProvider","params":"(StringservicName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/12/200ffc79ac650f04b13a9f2eac39974903e24c.src","preCode":"    private ClusterModuleNacosProvider createProvider(String servicName) throws ModuleStartException {\n        ClusterModuleNacosProvider provider = new ClusterModuleNacosProvider();\n\n        ClusterModuleNacosConfig config = (ClusterModuleNacosConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(nacosAddress);\n        config.setServiceName(servicName);\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n        return provider;\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-nacos-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/nacos/ITClusterModuleNacosProviderFunctionalTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"B"}],"commitId":"ed99079d20fa321f0dedd764ffa7538416aa6b0e","commitMessage":"@@@Fix service cluster plugin bug (#3074)\n\n* fix 3069\n","date":"2019-07-17 14:40:45","modifiedFileCount":"7","status":"B","submitter":"zhangwei"},{"authorTime":"2019-07-17 14:40:45","codes":[{"authorDate":"2020-07-06 18:50:14","commitOrder":2,"curCode":"    private ClusterModuleConsulProvider createProvider(String serviceName, String internalComHost,\n        int internalComPort) throws Exception {\n        ClusterModuleConsulProvider provider = new ClusterModuleConsulProvider();\n\n        ClusterModuleConsulConfig config = (ClusterModuleConsulConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(consulAddress);\n        config.setServiceName(serviceName);\n\n        if (!StringUtil.isEmpty(internalComHost)) {\n            config.setInternalComHost(internalComHost);\n        }\n\n        if (internalComPort > 0) {\n            config.setInternalComPort(internalComPort);\n        }\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n\n        ConsulCoordinator consulCoordinator = (ConsulCoordinator) provider.getService(ClusterRegister.class);\n\n        \r\n        ClusterRegister register = remoteInstance -> {\n            if (needUsingInternalAddr(config)) {\n                remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n            }\n\n            Consul client = Whitebox.getInternalState(consulCoordinator, \"client\");\n            AgentClient agentClient = client.agentClient();\n            Whitebox.setInternalState(consulCoordinator, \"selfAddress\", remoteInstance.getAddress());\n            Registration registration = ImmutableRegistration.builder()\n                                                             .id(remoteInstance.getAddress().toString())\n                                                             .name(serviceName)\n                                                             .address(remoteInstance.getAddress().getHost())\n                                                             .port(remoteInstance.getAddress().getPort())\n                                                             .build();\n\n            agentClient.register(registration);\n        };\n\n        provider.registerServiceImplementation(ClusterRegister.class, register);\n        return provider;\n    }\n","date":"2020-07-06 18:50:14","endLine":210,"groupId":"3949","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createProvider","params":"(StringserviceName@StringinternalComHost@intinternalComPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c4/cfcad319d9253525cb63585d9aa30ce4e23021.src","preCode":"    private ClusterModuleConsulProvider createProvider(String serviceName, String internalComHost,\n        int internalComPort) throws Exception {\n        ClusterModuleConsulProvider provider = new ClusterModuleConsulProvider();\n\n        ClusterModuleConsulConfig config = (ClusterModuleConsulConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(consulAddress);\n        config.setServiceName(serviceName);\n\n        if (!StringUtil.isEmpty(internalComHost)) {\n            config.setInternalComHost(internalComHost);\n        }\n\n        if (internalComPort > 0) {\n            config.setInternalComPort(internalComPort);\n        }\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n\n        ConsulCoordinator consulCoordinator = (ConsulCoordinator) provider.getService(ClusterRegister.class);\n\n        \r\n        ClusterRegister register = remoteInstance -> {\n            if (needUsingInternalAddr(config)) {\n                remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n            }\n\n            Consul client = Whitebox.getInternalState(consulCoordinator, \"client\");\n            AgentClient agentClient = client.agentClient();\n            Whitebox.setInternalState(consulCoordinator, \"selfAddress\", remoteInstance.getAddress());\n            TelemetryRelatedContext.INSTANCE.setId(remoteInstance.getAddress().toString());\n            Registration registration = ImmutableRegistration.builder()\n                                                             .id(remoteInstance.getAddress().toString())\n                                                             .name(serviceName)\n                                                             .address(remoteInstance.getAddress().getHost())\n                                                             .port(remoteInstance.getAddress().getPort())\n                                                             .build();\n\n            agentClient.register(registration);\n        };\n\n        provider.registerServiceImplementation(ClusterRegister.class, register);\n        return provider;\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-consul-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/consul/ITClusterModuleConsulProviderFunctionalTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2019-07-17 14:40:45","commitOrder":2,"curCode":"    private ClusterModuleNacosProvider createProvider(String servicName) throws ModuleStartException {\n        ClusterModuleNacosProvider provider = new ClusterModuleNacosProvider();\n\n        ClusterModuleNacosConfig config = (ClusterModuleNacosConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(nacosAddress);\n        config.setServiceName(servicName);\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n        return provider;\n    }\n","date":"2019-07-17 14:40:45","endLine":157,"groupId":"2510","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createProvider","params":"(StringservicName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/12/200ffc79ac650f04b13a9f2eac39974903e24c.src","preCode":"    private ClusterModuleNacosProvider createProvider(String servicName) throws ModuleStartException {\n        ClusterModuleNacosProvider provider = new ClusterModuleNacosProvider();\n\n        ClusterModuleNacosConfig config = (ClusterModuleNacosConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(nacosAddress);\n        config.setServiceName(servicName);\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n        return provider;\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-nacos-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/nacos/ITClusterModuleNacosProviderFunctionalTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"}],"commitId":"3df2e8ddcebb00eccb1747919f5352c9909c15df","commitMessage":"@@@Fix no telemetry metrics when the oap role is receiver. (#5038)\n\n","date":"2020-07-06 18:50:14","modifiedFileCount":"7","status":"M","submitter":"Ax1an"},{"authorTime":"2020-10-16 14:46:53","codes":[{"authorDate":"2020-07-06 18:50:14","commitOrder":3,"curCode":"    private ClusterModuleConsulProvider createProvider(String serviceName, String internalComHost,\n        int internalComPort) throws Exception {\n        ClusterModuleConsulProvider provider = new ClusterModuleConsulProvider();\n\n        ClusterModuleConsulConfig config = (ClusterModuleConsulConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(consulAddress);\n        config.setServiceName(serviceName);\n\n        if (!StringUtil.isEmpty(internalComHost)) {\n            config.setInternalComHost(internalComHost);\n        }\n\n        if (internalComPort > 0) {\n            config.setInternalComPort(internalComPort);\n        }\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n\n        ConsulCoordinator consulCoordinator = (ConsulCoordinator) provider.getService(ClusterRegister.class);\n\n        \r\n        ClusterRegister register = remoteInstance -> {\n            if (needUsingInternalAddr(config)) {\n                remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n            }\n\n            Consul client = Whitebox.getInternalState(consulCoordinator, \"client\");\n            AgentClient agentClient = client.agentClient();\n            Whitebox.setInternalState(consulCoordinator, \"selfAddress\", remoteInstance.getAddress());\n            Registration registration = ImmutableRegistration.builder()\n                                                             .id(remoteInstance.getAddress().toString())\n                                                             .name(serviceName)\n                                                             .address(remoteInstance.getAddress().getHost())\n                                                             .port(remoteInstance.getAddress().getPort())\n                                                             .build();\n\n            agentClient.register(registration);\n        };\n\n        provider.registerServiceImplementation(ClusterRegister.class, register);\n        return provider;\n    }\n","date":"2020-07-06 18:50:14","endLine":210,"groupId":"3949","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createProvider","params":"(StringserviceName@StringinternalComHost@intinternalComPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/c4/cfcad319d9253525cb63585d9aa30ce4e23021.src","preCode":"    private ClusterModuleConsulProvider createProvider(String serviceName, String internalComHost,\n        int internalComPort) throws Exception {\n        ClusterModuleConsulProvider provider = new ClusterModuleConsulProvider();\n\n        ClusterModuleConsulConfig config = (ClusterModuleConsulConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(consulAddress);\n        config.setServiceName(serviceName);\n\n        if (!StringUtil.isEmpty(internalComHost)) {\n            config.setInternalComHost(internalComHost);\n        }\n\n        if (internalComPort > 0) {\n            config.setInternalComPort(internalComPort);\n        }\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n\n        ConsulCoordinator consulCoordinator = (ConsulCoordinator) provider.getService(ClusterRegister.class);\n\n        \r\n        ClusterRegister register = remoteInstance -> {\n            if (needUsingInternalAddr(config)) {\n                remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n            }\n\n            Consul client = Whitebox.getInternalState(consulCoordinator, \"client\");\n            AgentClient agentClient = client.agentClient();\n            Whitebox.setInternalState(consulCoordinator, \"selfAddress\", remoteInstance.getAddress());\n            Registration registration = ImmutableRegistration.builder()\n                                                             .id(remoteInstance.getAddress().toString())\n                                                             .name(serviceName)\n                                                             .address(remoteInstance.getAddress().getHost())\n                                                             .port(remoteInstance.getAddress().getPort())\n                                                             .build();\n\n            agentClient.register(registration);\n        };\n\n        provider.registerServiceImplementation(ClusterRegister.class, register);\n        return provider;\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-consul-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/consul/ITClusterModuleConsulProviderFunctionalTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"N"},{"authorDate":"2020-10-16 14:46:53","commitOrder":3,"curCode":"    private ClusterModuleNacosProvider createProvider(String servicName) throws ModuleStartException {\n        ClusterModuleNacosProvider provider = new ClusterModuleNacosProvider();\n\n        ClusterModuleNacosConfig config = (ClusterModuleNacosConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(nacosAddress);\n        config.setServiceName(servicName);\n        config.setUsername(username);\n        config.setPassword(password);\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n        return provider;\n    }\n","date":"2020-10-16 14:46:53","endLine":178,"groupId":"449","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createProvider","params":"(StringservicName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/a7/2ee194c12e369954184ea8a5842f9321e975b3.src","preCode":"    private ClusterModuleNacosProvider createProvider(String servicName) throws ModuleStartException {\n        ClusterModuleNacosProvider provider = new ClusterModuleNacosProvider();\n\n        ClusterModuleNacosConfig config = (ClusterModuleNacosConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(nacosAddress);\n        config.setServiceName(servicName);\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n        return provider;\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-nacos-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/nacos/ITClusterModuleNacosProviderFunctionalTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"d5a28baa65be71ba30b33ce06419ae7880dc272b","commitMessage":"@@@Support Nacos auth (#5669)\n\n* Support Nacos auth","date":"2020-10-16 14:46:53","modifiedFileCount":"6","status":"M","submitter":"xbkaishui"},{"authorTime":"2020-11-04 10:04:24","codes":[{"authorDate":"2020-11-04 10:04:24","commitOrder":4,"curCode":"    private ClusterModuleConsulProvider createProvider(String serviceName, String internalComHost,\n        int internalComPort) throws Exception {\n        ClusterModuleConsulProvider provider = new ClusterModuleConsulProvider();\n\n        ClusterModuleConsulConfig config = (ClusterModuleConsulConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(consulAddress);\n        config.setServiceName(serviceName);\n\n        if (!StringUtil.isEmpty(internalComHost)) {\n            config.setInternalComHost(internalComHost);\n        }\n\n        if (internalComPort > 0) {\n            config.setInternalComPort(internalComPort);\n        }\n        provider.setManager(moduleManager);\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n\n        ConsulCoordinator consulCoordinator = (ConsulCoordinator) provider.getService(ClusterRegister.class);\n\n        \r\n        ClusterRegister register = remoteInstance -> {\n            if (needUsingInternalAddr(config)) {\n                remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n            }\n\n            Consul client = Whitebox.getInternalState(consulCoordinator, \"client\");\n            AgentClient agentClient = client.agentClient();\n            Whitebox.setInternalState(consulCoordinator, \"selfAddress\", remoteInstance.getAddress());\n            Registration registration = ImmutableRegistration.builder()\n                                                             .id(remoteInstance.getAddress().toString())\n                                                             .name(serviceName)\n                                                             .address(remoteInstance.getAddress().getHost())\n                                                             .port(remoteInstance.getAddress().getPort())\n                                                             .build();\n\n            agentClient.register(registration);\n        };\n\n        provider.registerServiceImplementation(ClusterRegister.class, register);\n        return provider;\n    }\n","date":"2020-11-04 10:04:24","endLine":232,"groupId":"12665","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createProvider","params":"(StringserviceName@StringinternalComHost@intinternalComPort)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/ca/ef939386cc1204de80e7d01157c3a333512d05.src","preCode":"    private ClusterModuleConsulProvider createProvider(String serviceName, String internalComHost,\n        int internalComPort) throws Exception {\n        ClusterModuleConsulProvider provider = new ClusterModuleConsulProvider();\n\n        ClusterModuleConsulConfig config = (ClusterModuleConsulConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(consulAddress);\n        config.setServiceName(serviceName);\n\n        if (!StringUtil.isEmpty(internalComHost)) {\n            config.setInternalComHost(internalComHost);\n        }\n\n        if (internalComPort > 0) {\n            config.setInternalComPort(internalComPort);\n        }\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n\n        ConsulCoordinator consulCoordinator = (ConsulCoordinator) provider.getService(ClusterRegister.class);\n\n        \r\n        ClusterRegister register = remoteInstance -> {\n            if (needUsingInternalAddr(config)) {\n                remoteInstance = new RemoteInstance(new Address(config.getInternalComHost(), config.getInternalComPort(), true));\n            }\n\n            Consul client = Whitebox.getInternalState(consulCoordinator, \"client\");\n            AgentClient agentClient = client.agentClient();\n            Whitebox.setInternalState(consulCoordinator, \"selfAddress\", remoteInstance.getAddress());\n            Registration registration = ImmutableRegistration.builder()\n                                                             .id(remoteInstance.getAddress().toString())\n                                                             .name(serviceName)\n                                                             .address(remoteInstance.getAddress().getHost())\n                                                             .port(remoteInstance.getAddress().getPort())\n                                                             .build();\n\n            agentClient.register(registration);\n        };\n\n        provider.registerServiceImplementation(ClusterRegister.class, register);\n        return provider;\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-consul-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/consul/ITClusterModuleConsulProviderFunctionalTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2020-11-04 10:04:24","commitOrder":4,"curCode":"    private ClusterModuleNacosProvider createProvider(String servicName) throws ModuleStartException {\n        ClusterModuleNacosProvider provider = new ClusterModuleNacosProvider();\n\n        ClusterModuleNacosConfig config = (ClusterModuleNacosConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(nacosAddress);\n        config.setServiceName(servicName);\n        provider.setManager(moduleManager);\n        config.setUsername(username);\n        config.setPassword(password);\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n        return provider;\n    }\n","date":"2020-11-04 10:04:24","endLine":201,"groupId":"12665","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createProvider","params":"(StringservicName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-skywalking-10-0.7/blobInfo/CC_OUT/blobs/87/cba2a7d830ab761fcc4c044d0e70db13a6e022.src","preCode":"    private ClusterModuleNacosProvider createProvider(String servicName) throws ModuleStartException {\n        ClusterModuleNacosProvider provider = new ClusterModuleNacosProvider();\n\n        ClusterModuleNacosConfig config = (ClusterModuleNacosConfig) provider.createConfigBeanIfAbsent();\n\n        config.setHostPort(nacosAddress);\n        config.setServiceName(servicName);\n        config.setUsername(username);\n        config.setPassword(password);\n\n        provider.prepare();\n        provider.start();\n        provider.notifyAfterCompleted();\n        return provider;\n    }\n","realPath":"oap-server/server-cluster-plugin/cluster-nacos-plugin/src/test/java/org/apache/skywalking/oap/server/cluster/plugin/nacos/ITClusterModuleNacosProviderFunctionalTest.java","repoName":"skywalking","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"56fe8a4b41236dd826f4ede97cd25b435d062803","commitMessage":"@@@Cluster manager health v2 (#5784)\n\n","date":"2020-11-04 10:04:24","modifiedFileCount":"25","status":"M","submitter":"xbkaishui"}]
