[{"authorTime":"2021-02-06 03:17:15","codes":[{"authorDate":"2021-02-06 03:17:15","commitOrder":1,"curCode":"\tpublic void a02_responseBeans_swagger() throws Exception {\n\t\tMap<String,OperationMap> paths = getSwagger(A.class).getPaths();\n\t\tassertEquals(Accepted.MESSAGE, paths.get(\"/accepted\").get(\"get\").getResponse(Accepted.CODE).getDescription());\n\t\tassertEquals(AlreadyReported.MESSAGE, paths.get(\"/alreadyReported\").get(\"get\").getResponse(AlreadyReported.CODE).getDescription());\n\t\tassertEquals(Continue.MESSAGE, paths.get(\"/continue\").get(\"get\").getResponse(Continue.CODE).getDescription());\n\t\tassertEquals(Created.MESSAGE, paths.get(\"/created\").get(\"get\").getResponse(Created.CODE).getDescription());\n\t\tassertEquals(EarlyHints.MESSAGE, paths.get(\"/earlyHints\").get(\"get\").getResponse(EarlyHints.CODE).getDescription());\n\t\tassertEquals(Found.MESSAGE, paths.get(\"/found\").get(\"get\").getResponse(Found.CODE).getDescription());\n\t\tassertEquals(IMUsed.MESSAGE, paths.get(\"/imUsed\").get(\"get\").getResponse(IMUsed.CODE).getDescription());\n\t\tassertEquals(MovedPermanently.MESSAGE, paths.get(\"/movedPermanently\").get(\"get\").getResponse(MovedPermanently.CODE).getDescription());\n\t\tassertEquals(MultipleChoices.MESSAGE, paths.get(\"/multipleChoices\").get(\"get\").getResponse(MultipleChoices.CODE).getDescription());\n\t\tassertEquals(MultiStatus.MESSAGE, paths.get(\"/multiStatus\").get(\"get\").getResponse(MultiStatus.CODE).getDescription());\n\t\tassertEquals(NoContent.MESSAGE, paths.get(\"/noContent\").get(\"get\").getResponse(NoContent.CODE).getDescription());\n\t\tassertEquals(NonAuthoritiveInformation.MESSAGE, paths.get(\"/nonAuthoritiveInformation\").get(\"get\").getResponse(NonAuthoritiveInformation.CODE).getDescription());\n\t\tassertEquals(NotModified.MESSAGE, paths.get(\"/notModified\").get(\"get\").getResponse(NotModified.CODE).getDescription());\n\t\tassertEquals(Ok.MESSAGE, paths.get(\"/ok\").get(\"get\").getResponse(Ok.CODE).getDescription());\n\t\tassertEquals(PartialContent.MESSAGE, paths.get(\"/partialContent\").get(\"get\").getResponse(PartialContent.CODE).getDescription());\n\t\tassertEquals(PermanentRedirect.MESSAGE, paths.get(\"/permanentRedirect\").get(\"get\").getResponse(PermanentRedirect.CODE).getDescription());\n\t\tassertEquals(Processing.MESSAGE, paths.get(\"/processing\").get(\"get\").getResponse(Processing.CODE).getDescription());\n\t\tassertEquals(ResetContent.MESSAGE, paths.get(\"/resetContent\").get(\"get\").getResponse(ResetContent.CODE).getDescription());\n\t\tassertEquals(SeeOther.MESSAGE, paths.get(\"/seeOther\").get(\"get\").getResponse(SeeOther.CODE).getDescription());\n\t\tassertEquals(SwitchingProtocols.MESSAGE, paths.get(\"/switchingProtocols\").get(\"get\").getResponse(SwitchingProtocols.CODE).getDescription());\n\t\tassertEquals(TemporaryRedirect.MESSAGE, paths.get(\"/temporaryRedirect\").get(\"get\").getResponse(TemporaryRedirect.CODE).getDescription());\n\t\tassertEquals(UseProxy.MESSAGE, paths.get(\"/useProxy\").get(\"get\").getResponse(UseProxy.CODE).getDescription());\n\t}\n","date":"2021-02-06 03:17:15","endLine":116,"groupId":"4726","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"a02_responseBeans_swagger","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/22/1b3fd5ca31fcf2ee107c005f5347137a40a6a4.src","preCode":"\tpublic void a02_responseBeans_swagger() throws Exception {\n\t\tMap<String,OperationMap> paths = getSwagger(A.class).getPaths();\n\t\tassertEquals(Accepted.MESSAGE, paths.get(\"/accepted\").get(\"get\").getResponse(Accepted.CODE).getDescription());\n\t\tassertEquals(AlreadyReported.MESSAGE, paths.get(\"/alreadyReported\").get(\"get\").getResponse(AlreadyReported.CODE).getDescription());\n\t\tassertEquals(Continue.MESSAGE, paths.get(\"/continue\").get(\"get\").getResponse(Continue.CODE).getDescription());\n\t\tassertEquals(Created.MESSAGE, paths.get(\"/created\").get(\"get\").getResponse(Created.CODE).getDescription());\n\t\tassertEquals(EarlyHints.MESSAGE, paths.get(\"/earlyHints\").get(\"get\").getResponse(EarlyHints.CODE).getDescription());\n\t\tassertEquals(Found.MESSAGE, paths.get(\"/found\").get(\"get\").getResponse(Found.CODE).getDescription());\n\t\tassertEquals(IMUsed.MESSAGE, paths.get(\"/imUsed\").get(\"get\").getResponse(IMUsed.CODE).getDescription());\n\t\tassertEquals(MovedPermanently.MESSAGE, paths.get(\"/movedPermanently\").get(\"get\").getResponse(MovedPermanently.CODE).getDescription());\n\t\tassertEquals(MultipleChoices.MESSAGE, paths.get(\"/multipleChoices\").get(\"get\").getResponse(MultipleChoices.CODE).getDescription());\n\t\tassertEquals(MultiStatus.MESSAGE, paths.get(\"/multiStatus\").get(\"get\").getResponse(MultiStatus.CODE).getDescription());\n\t\tassertEquals(NoContent.MESSAGE, paths.get(\"/noContent\").get(\"get\").getResponse(NoContent.CODE).getDescription());\n\t\tassertEquals(NonAuthoritiveInformation.MESSAGE, paths.get(\"/nonAuthoritiveInformation\").get(\"get\").getResponse(NonAuthoritiveInformation.CODE).getDescription());\n\t\tassertEquals(NotModified.MESSAGE, paths.get(\"/notModified\").get(\"get\").getResponse(NotModified.CODE).getDescription());\n\t\tassertEquals(Ok.MESSAGE, paths.get(\"/ok\").get(\"get\").getResponse(Ok.CODE).getDescription());\n\t\tassertEquals(PartialContent.MESSAGE, paths.get(\"/partialContent\").get(\"get\").getResponse(PartialContent.CODE).getDescription());\n\t\tassertEquals(PermanentRedirect.MESSAGE, paths.get(\"/permanentRedirect\").get(\"get\").getResponse(PermanentRedirect.CODE).getDescription());\n\t\tassertEquals(Processing.MESSAGE, paths.get(\"/processing\").get(\"get\").getResponse(Processing.CODE).getDescription());\n\t\tassertEquals(ResetContent.MESSAGE, paths.get(\"/resetContent\").get(\"get\").getResponse(ResetContent.CODE).getDescription());\n\t\tassertEquals(SeeOther.MESSAGE, paths.get(\"/seeOther\").get(\"get\").getResponse(SeeOther.CODE).getDescription());\n\t\tassertEquals(SwitchingProtocols.MESSAGE, paths.get(\"/switchingProtocols\").get(\"get\").getResponse(SwitchingProtocols.CODE).getDescription());\n\t\tassertEquals(TemporaryRedirect.MESSAGE, paths.get(\"/temporaryRedirect\").get(\"get\").getResponse(TemporaryRedirect.CODE).getDescription());\n\t\tassertEquals(UseProxy.MESSAGE, paths.get(\"/useProxy\").get(\"get\").getResponse(UseProxy.CODE).getDescription());\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/RestOp_Returns_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"},{"authorDate":"2021-02-06 03:17:15","commitOrder":1,"curCode":"\tpublic void f01_swagger() throws Exception {\n\t\tMap<String,OperationMap> paths = getSwagger(F.class).getPaths();\n\n\t\tassertEquals(BadRequest.MESSAGE, paths.get(\"/badRequest\").get(\"get\").getResponse(BadRequest.CODE).getDescription());\n\t\tassertEquals(Conflict.MESSAGE, paths.get(\"/conflict\").get(\"get\").getResponse(Conflict.CODE).getDescription());\n\t\tassertEquals(ExpectationFailed.MESSAGE, paths.get(\"/expectationFailed\").get(\"get\").getResponse(ExpectationFailed.CODE).getDescription());\n\t\tassertEquals(FailedDependency.MESSAGE, paths.get(\"/failedDependency\").get(\"get\").getResponse(FailedDependency.CODE).getDescription());\n\t\tassertEquals(Forbidden.MESSAGE, paths.get(\"/forbidden\").get(\"get\").getResponse(Forbidden.CODE).getDescription());\n\t\tassertEquals(Gone.MESSAGE, paths.get(\"/gone\").get(\"get\").getResponse(Gone.CODE).getDescription());\n\t\tassertEquals(HttpVersionNotSupported.MESSAGE, paths.get(\"/httpVersionNotSupported\").get(\"get\").getResponse(HttpVersionNotSupported.CODE).getDescription());\n\t\tassertEquals(InsufficientStorage.MESSAGE, paths.get(\"/insufficientStorage\").get(\"get\").getResponse(InsufficientStorage.CODE).getDescription());\n\t\tassertEquals(InternalServerError.MESSAGE, paths.get(\"/internalServerError\").get(\"get\").getResponse(InternalServerError.CODE).getDescription());\n\t\tassertEquals(LengthRequired.MESSAGE, paths.get(\"/lengthRequired\").get(\"get\").getResponse(LengthRequired.CODE).getDescription());\n\t\tassertEquals(Locked.MESSAGE, paths.get(\"/locked\").get(\"get\").getResponse(Locked.CODE).getDescription());\n\t\tassertEquals(LoopDetected.MESSAGE, paths.get(\"/loopDetected\").get(\"get\").getResponse(LoopDetected.CODE).getDescription());\n\t\tassertEquals(MethodNotAllowed.MESSAGE, paths.get(\"/methodNotAllowed\").get(\"get\").getResponse(MethodNotAllowed.CODE).getDescription());\n\t\tassertEquals(MisdirectedRequest.MESSAGE, paths.get(\"/misdirectedRequest\").get(\"get\").getResponse(MisdirectedRequest.CODE).getDescription());\n\t\tassertEquals(NetworkAuthenticationRequired.MESSAGE, paths.get(\"/networkAuthenticationRequired\").get(\"get\").getResponse(NetworkAuthenticationRequired.CODE).getDescription());\n\t\tassertEquals(NotAcceptable.MESSAGE, paths.get(\"/notAcceptable\").get(\"get\").getResponse(NotAcceptable.CODE).getDescription());\n\t\tassertEquals(NotExtended.MESSAGE, paths.get(\"/notExtended\").get(\"get\").getResponse(NotExtended.CODE).getDescription());\n\t\tassertEquals(NotFound.MESSAGE, paths.get(\"/notFound\").get(\"get\").getResponse(NotFound.CODE).getDescription());\n\t\tassertEquals(NotImplemented.MESSAGE, paths.get(\"/notImplemented\").get(\"get\").getResponse(NotImplemented.CODE).getDescription());\n\t\tassertEquals(PayloadTooLarge.MESSAGE, paths.get(\"/payloadTooLarge\").get(\"get\").getResponse(PayloadTooLarge.CODE).getDescription());\n\t\tassertEquals(PreconditionFailed.MESSAGE, paths.get(\"/preconditionFailed\").get(\"get\").getResponse(PreconditionFailed.CODE).getDescription());\n\t\tassertEquals(PreconditionRequired.MESSAGE, paths.get(\"/preconditionRequired\").get(\"get\").getResponse(PreconditionRequired.CODE).getDescription());\n\t\tassertEquals(RangeNotSatisfiable.MESSAGE, paths.get(\"/rangeNotSatisfiable\").get(\"get\").getResponse(RangeNotSatisfiable.CODE).getDescription());\n\t\tassertEquals(RequestHeaderFieldsTooLarge.MESSAGE, paths.get(\"/requestHeaderFieldsTooLarge\").get(\"get\").getResponse(RequestHeaderFieldsTooLarge.CODE).getDescription());\n\t\tassertEquals(ServiceUnavailable.MESSAGE, paths.get(\"/serviceUnavailable\").get(\"get\").getResponse(ServiceUnavailable.CODE).getDescription());\n\t\tassertEquals(TooManyRequests.MESSAGE, paths.get(\"/tooManyRequests\").get(\"get\").getResponse(TooManyRequests.CODE).getDescription());\n\t\tassertEquals(Unauthorized.MESSAGE, paths.get(\"/unauthorized\").get(\"get\").getResponse(Unauthorized.CODE).getDescription());\n\t\tassertEquals(UnavailableForLegalReasons.MESSAGE, paths.get(\"/unavailableForLegalReasons\").get(\"get\").getResponse(UnavailableForLegalReasons.CODE).getDescription());\n\t\tassertEquals(UnprocessableEntity.MESSAGE, paths.get(\"/unprocessableEntity\").get(\"get\").getResponse(UnprocessableEntity.CODE).getDescription());\n\t\tassertEquals(UnsupportedMediaType.MESSAGE, paths.get(\"/unsupportedMediaType\").get(\"get\").getResponse(UnsupportedMediaType.CODE).getDescription());\n\t\tassertEquals(UpgradeRequired.MESSAGE, paths.get(\"/upgradeRequired\").get(\"get\").getResponse(UpgradeRequired.CODE).getDescription());\n\t\tassertEquals(UriTooLong.MESSAGE, paths.get(\"/uriTooLong\").get(\"get\").getResponse(UriTooLong.CODE).getDescription());\n\t\tassertEquals(VariantAlsoNegotiates.MESSAGE, paths.get(\"/variantAlsoNegotiates\").get(\"get\").getResponse(VariantAlsoNegotiates.CODE).getDescription());\n\t}\n","date":"2021-02-06 03:17:15","endLine":846,"groupId":"2080","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"f01_swagger","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/06/1afb8f1210df104b442fa2321676a44a99df8a.src","preCode":"\tpublic void f01_swagger() throws Exception {\n\t\tMap<String,OperationMap> paths = getSwagger(F.class).getPaths();\n\n\t\tassertEquals(BadRequest.MESSAGE, paths.get(\"/badRequest\").get(\"get\").getResponse(BadRequest.CODE).getDescription());\n\t\tassertEquals(Conflict.MESSAGE, paths.get(\"/conflict\").get(\"get\").getResponse(Conflict.CODE).getDescription());\n\t\tassertEquals(ExpectationFailed.MESSAGE, paths.get(\"/expectationFailed\").get(\"get\").getResponse(ExpectationFailed.CODE).getDescription());\n\t\tassertEquals(FailedDependency.MESSAGE, paths.get(\"/failedDependency\").get(\"get\").getResponse(FailedDependency.CODE).getDescription());\n\t\tassertEquals(Forbidden.MESSAGE, paths.get(\"/forbidden\").get(\"get\").getResponse(Forbidden.CODE).getDescription());\n\t\tassertEquals(Gone.MESSAGE, paths.get(\"/gone\").get(\"get\").getResponse(Gone.CODE).getDescription());\n\t\tassertEquals(HttpVersionNotSupported.MESSAGE, paths.get(\"/httpVersionNotSupported\").get(\"get\").getResponse(HttpVersionNotSupported.CODE).getDescription());\n\t\tassertEquals(InsufficientStorage.MESSAGE, paths.get(\"/insufficientStorage\").get(\"get\").getResponse(InsufficientStorage.CODE).getDescription());\n\t\tassertEquals(InternalServerError.MESSAGE, paths.get(\"/internalServerError\").get(\"get\").getResponse(InternalServerError.CODE).getDescription());\n\t\tassertEquals(LengthRequired.MESSAGE, paths.get(\"/lengthRequired\").get(\"get\").getResponse(LengthRequired.CODE).getDescription());\n\t\tassertEquals(Locked.MESSAGE, paths.get(\"/locked\").get(\"get\").getResponse(Locked.CODE).getDescription());\n\t\tassertEquals(LoopDetected.MESSAGE, paths.get(\"/loopDetected\").get(\"get\").getResponse(LoopDetected.CODE).getDescription());\n\t\tassertEquals(MethodNotAllowed.MESSAGE, paths.get(\"/methodNotAllowed\").get(\"get\").getResponse(MethodNotAllowed.CODE).getDescription());\n\t\tassertEquals(MisdirectedRequest.MESSAGE, paths.get(\"/misdirectedRequest\").get(\"get\").getResponse(MisdirectedRequest.CODE).getDescription());\n\t\tassertEquals(NetworkAuthenticationRequired.MESSAGE, paths.get(\"/networkAuthenticationRequired\").get(\"get\").getResponse(NetworkAuthenticationRequired.CODE).getDescription());\n\t\tassertEquals(NotAcceptable.MESSAGE, paths.get(\"/notAcceptable\").get(\"get\").getResponse(NotAcceptable.CODE).getDescription());\n\t\tassertEquals(NotExtended.MESSAGE, paths.get(\"/notExtended\").get(\"get\").getResponse(NotExtended.CODE).getDescription());\n\t\tassertEquals(NotFound.MESSAGE, paths.get(\"/notFound\").get(\"get\").getResponse(NotFound.CODE).getDescription());\n\t\tassertEquals(NotImplemented.MESSAGE, paths.get(\"/notImplemented\").get(\"get\").getResponse(NotImplemented.CODE).getDescription());\n\t\tassertEquals(PayloadTooLarge.MESSAGE, paths.get(\"/payloadTooLarge\").get(\"get\").getResponse(PayloadTooLarge.CODE).getDescription());\n\t\tassertEquals(PreconditionFailed.MESSAGE, paths.get(\"/preconditionFailed\").get(\"get\").getResponse(PreconditionFailed.CODE).getDescription());\n\t\tassertEquals(PreconditionRequired.MESSAGE, paths.get(\"/preconditionRequired\").get(\"get\").getResponse(PreconditionRequired.CODE).getDescription());\n\t\tassertEquals(RangeNotSatisfiable.MESSAGE, paths.get(\"/rangeNotSatisfiable\").get(\"get\").getResponse(RangeNotSatisfiable.CODE).getDescription());\n\t\tassertEquals(RequestHeaderFieldsTooLarge.MESSAGE, paths.get(\"/requestHeaderFieldsTooLarge\").get(\"get\").getResponse(RequestHeaderFieldsTooLarge.CODE).getDescription());\n\t\tassertEquals(ServiceUnavailable.MESSAGE, paths.get(\"/serviceUnavailable\").get(\"get\").getResponse(ServiceUnavailable.CODE).getDescription());\n\t\tassertEquals(TooManyRequests.MESSAGE, paths.get(\"/tooManyRequests\").get(\"get\").getResponse(TooManyRequests.CODE).getDescription());\n\t\tassertEquals(Unauthorized.MESSAGE, paths.get(\"/unauthorized\").get(\"get\").getResponse(Unauthorized.CODE).getDescription());\n\t\tassertEquals(UnavailableForLegalReasons.MESSAGE, paths.get(\"/unavailableForLegalReasons\").get(\"get\").getResponse(UnavailableForLegalReasons.CODE).getDescription());\n\t\tassertEquals(UnprocessableEntity.MESSAGE, paths.get(\"/unprocessableEntity\").get(\"get\").getResponse(UnprocessableEntity.CODE).getDescription());\n\t\tassertEquals(UnsupportedMediaType.MESSAGE, paths.get(\"/unsupportedMediaType\").get(\"get\").getResponse(UnsupportedMediaType.CODE).getDescription());\n\t\tassertEquals(UpgradeRequired.MESSAGE, paths.get(\"/upgradeRequired\").get(\"get\").getResponse(UpgradeRequired.CODE).getDescription());\n\t\tassertEquals(UriTooLong.MESSAGE, paths.get(\"/uriTooLong\").get(\"get\").getResponse(UriTooLong.CODE).getDescription());\n\t\tassertEquals(VariantAlsoNegotiates.MESSAGE, paths.get(\"/variantAlsoNegotiates\").get(\"get\").getResponse(VariantAlsoNegotiates.CODE).getDescription());\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/RestOp_Throws_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":810,"status":"B"}],"commitId":"be23bff717ddb90a892c743156f56c11bd5bceee","commitMessage":"@@@Move unit tests into a single top-level project.","date":"2021-02-06 03:17:15","modifiedFileCount":"0","status":"B","submitter":"JamesBognar"},{"authorTime":"2021-02-28 23:40:42","codes":[{"authorDate":"2021-02-28 23:40:42","commitOrder":2,"curCode":"\tpublic void a02_responseBeans_swagger() throws Exception {\n\t\tMap<String,OperationMap> paths = getSwagger(A.class).getPaths();\n\t\tassertEquals(Accepted.REASON_PHRASE, paths.get(\"/accepted\").get(\"get\").getResponse(Accepted.STATUS_CODE).getDescription());\n\t\tassertEquals(AlreadyReported.REASON_PHRASE, paths.get(\"/alreadyReported\").get(\"get\").getResponse(AlreadyReported.STATUS_CODE).getDescription());\n\t\tassertEquals(Continue.REASON_PHRASE, paths.get(\"/continue\").get(\"get\").getResponse(Continue.STATUS_CODE).getDescription());\n\t\tassertEquals(Created.REASON_PHRASE, paths.get(\"/created\").get(\"get\").getResponse(Created.STATUS_CODE).getDescription());\n\t\tassertEquals(EarlyHints.REASON_PHRASE, paths.get(\"/earlyHints\").get(\"get\").getResponse(EarlyHints.STATUS_CODE).getDescription());\n\t\tassertEquals(Found.REASON_PHRASE, paths.get(\"/found\").get(\"get\").getResponse(Found.STATUS_CODE).getDescription());\n\t\tassertEquals(IMUsed.REASON_PHRASE, paths.get(\"/imUsed\").get(\"get\").getResponse(IMUsed.STATUS_CODE).getDescription());\n\t\tassertEquals(MovedPermanently.REASON_PHRASE, paths.get(\"/movedPermanently\").get(\"get\").getResponse(MovedPermanently.STATUS_CODE).getDescription());\n\t\tassertEquals(MultipleChoices.REASON_PHRASE, paths.get(\"/multipleChoices\").get(\"get\").getResponse(MultipleChoices.STATUS_CODE).getDescription());\n\t\tassertEquals(MultiStatus.REASON_PHRASE, paths.get(\"/multiStatus\").get(\"get\").getResponse(MultiStatus.STATUS_CODE).getDescription());\n\t\tassertEquals(NoContent.REASON_PHRASE, paths.get(\"/noContent\").get(\"get\").getResponse(NoContent.STATUS_CODE).getDescription());\n\t\tassertEquals(NonAuthoritiveInformation.REASON_PHRASE, paths.get(\"/nonAuthoritiveInformation\").get(\"get\").getResponse(NonAuthoritiveInformation.STATUS_CODE).getDescription());\n\t\tassertEquals(NotModified.REASON_PHRASE, paths.get(\"/notModified\").get(\"get\").getResponse(NotModified.STATUS_CODE).getDescription());\n\t\tassertEquals(Ok.REASON_PHRASE, paths.get(\"/ok\").get(\"get\").getResponse(Ok.STATUS_CODE).getDescription());\n\t\tassertEquals(PartialContent.REASON_PHRASE, paths.get(\"/partialContent\").get(\"get\").getResponse(PartialContent.STATUS_CODE).getDescription());\n\t\tassertEquals(PermanentRedirect.REASON_PHRASE, paths.get(\"/permanentRedirect\").get(\"get\").getResponse(PermanentRedirect.STATUS_CODE).getDescription());\n\t\tassertEquals(Processing.REASON_PHRASE, paths.get(\"/processing\").get(\"get\").getResponse(Processing.STATUS_CODE).getDescription());\n\t\tassertEquals(ResetContent.REASON_PHRASE, paths.get(\"/resetContent\").get(\"get\").getResponse(ResetContent.STATUS_CODE).getDescription());\n\t\tassertEquals(SeeOther.REASON_PHRASE, paths.get(\"/seeOther\").get(\"get\").getResponse(SeeOther.STATUS_CODE).getDescription());\n\t\tassertEquals(SwitchingProtocols.REASON_PHRASE, paths.get(\"/switchingProtocols\").get(\"get\").getResponse(SwitchingProtocols.STATUS_CODE).getDescription());\n\t\tassertEquals(TemporaryRedirect.REASON_PHRASE, paths.get(\"/temporaryRedirect\").get(\"get\").getResponse(TemporaryRedirect.STATUS_CODE).getDescription());\n\t\tassertEquals(UseProxy.REASON_PHRASE, paths.get(\"/useProxy\").get(\"get\").getResponse(UseProxy.STATUS_CODE).getDescription());\n\t}\n","date":"2021-02-28 23:40:42","endLine":117,"groupId":"101860","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"a02_responseBeans_swagger","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/73/0938b2f6a9fdb9087308c077cc5b2278b10f20.src","preCode":"\tpublic void a02_responseBeans_swagger() throws Exception {\n\t\tMap<String,OperationMap> paths = getSwagger(A.class).getPaths();\n\t\tassertEquals(Accepted.MESSAGE, paths.get(\"/accepted\").get(\"get\").getResponse(Accepted.CODE).getDescription());\n\t\tassertEquals(AlreadyReported.MESSAGE, paths.get(\"/alreadyReported\").get(\"get\").getResponse(AlreadyReported.CODE).getDescription());\n\t\tassertEquals(Continue.MESSAGE, paths.get(\"/continue\").get(\"get\").getResponse(Continue.CODE).getDescription());\n\t\tassertEquals(Created.MESSAGE, paths.get(\"/created\").get(\"get\").getResponse(Created.CODE).getDescription());\n\t\tassertEquals(EarlyHints.MESSAGE, paths.get(\"/earlyHints\").get(\"get\").getResponse(EarlyHints.CODE).getDescription());\n\t\tassertEquals(Found.MESSAGE, paths.get(\"/found\").get(\"get\").getResponse(Found.CODE).getDescription());\n\t\tassertEquals(IMUsed.MESSAGE, paths.get(\"/imUsed\").get(\"get\").getResponse(IMUsed.CODE).getDescription());\n\t\tassertEquals(MovedPermanently.MESSAGE, paths.get(\"/movedPermanently\").get(\"get\").getResponse(MovedPermanently.CODE).getDescription());\n\t\tassertEquals(MultipleChoices.MESSAGE, paths.get(\"/multipleChoices\").get(\"get\").getResponse(MultipleChoices.CODE).getDescription());\n\t\tassertEquals(MultiStatus.MESSAGE, paths.get(\"/multiStatus\").get(\"get\").getResponse(MultiStatus.CODE).getDescription());\n\t\tassertEquals(NoContent.MESSAGE, paths.get(\"/noContent\").get(\"get\").getResponse(NoContent.CODE).getDescription());\n\t\tassertEquals(NonAuthoritiveInformation.MESSAGE, paths.get(\"/nonAuthoritiveInformation\").get(\"get\").getResponse(NonAuthoritiveInformation.CODE).getDescription());\n\t\tassertEquals(NotModified.MESSAGE, paths.get(\"/notModified\").get(\"get\").getResponse(NotModified.CODE).getDescription());\n\t\tassertEquals(Ok.MESSAGE, paths.get(\"/ok\").get(\"get\").getResponse(Ok.CODE).getDescription());\n\t\tassertEquals(PartialContent.MESSAGE, paths.get(\"/partialContent\").get(\"get\").getResponse(PartialContent.CODE).getDescription());\n\t\tassertEquals(PermanentRedirect.MESSAGE, paths.get(\"/permanentRedirect\").get(\"get\").getResponse(PermanentRedirect.CODE).getDescription());\n\t\tassertEquals(Processing.MESSAGE, paths.get(\"/processing\").get(\"get\").getResponse(Processing.CODE).getDescription());\n\t\tassertEquals(ResetContent.MESSAGE, paths.get(\"/resetContent\").get(\"get\").getResponse(ResetContent.CODE).getDescription());\n\t\tassertEquals(SeeOther.MESSAGE, paths.get(\"/seeOther\").get(\"get\").getResponse(SeeOther.CODE).getDescription());\n\t\tassertEquals(SwitchingProtocols.MESSAGE, paths.get(\"/switchingProtocols\").get(\"get\").getResponse(SwitchingProtocols.CODE).getDescription());\n\t\tassertEquals(TemporaryRedirect.MESSAGE, paths.get(\"/temporaryRedirect\").get(\"get\").getResponse(TemporaryRedirect.CODE).getDescription());\n\t\tassertEquals(UseProxy.MESSAGE, paths.get(\"/useProxy\").get(\"get\").getResponse(UseProxy.CODE).getDescription());\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/RestOp_Returns_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2021-02-28 23:40:42","commitOrder":2,"curCode":"\tpublic void f01_swagger() throws Exception {\n\t\tMap<String,OperationMap> paths = getSwagger(F.class).getPaths();\n\n\t\tassertEquals(BadRequest.REASON_PHRASE, paths.get(\"/badRequest\").get(\"get\").getResponse(BadRequest.STATUS_CODE).getDescription());\n\t\tassertEquals(Conflict.REASON_PHRASE, paths.get(\"/conflict\").get(\"get\").getResponse(Conflict.STATUS_CODE).getDescription());\n\t\tassertEquals(ExpectationFailed.REASON_PHRASE, paths.get(\"/expectationFailed\").get(\"get\").getResponse(ExpectationFailed.STATUS_CODE).getDescription());\n\t\tassertEquals(FailedDependency.REASON_PHRASE, paths.get(\"/failedDependency\").get(\"get\").getResponse(FailedDependency.STATUS_CODE).getDescription());\n\t\tassertEquals(Forbidden.REASON_PHRASE, paths.get(\"/forbidden\").get(\"get\").getResponse(Forbidden.STATUS_CODE).getDescription());\n\t\tassertEquals(Gone.REASON_PHRASE, paths.get(\"/gone\").get(\"get\").getResponse(Gone.STATUS_CODE).getDescription());\n\t\tassertEquals(HttpVersionNotSupported.REASON_PHRASE, paths.get(\"/httpVersionNotSupported\").get(\"get\").getResponse(HttpVersionNotSupported.STATUS_CODE).getDescription());\n\t\tassertEquals(InsufficientStorage.REASON_PHRASE, paths.get(\"/insufficientStorage\").get(\"get\").getResponse(InsufficientStorage.STATUS_CODE).getDescription());\n\t\tassertEquals(InternalServerError.REASON_PHRASE, paths.get(\"/internalServerError\").get(\"get\").getResponse(InternalServerError.STATUS_CODE).getDescription());\n\t\tassertEquals(LengthRequired.REASON_PHRASE, paths.get(\"/lengthRequired\").get(\"get\").getResponse(LengthRequired.STATUS_CODE).getDescription());\n\t\tassertEquals(Locked.REASON_PHRASE, paths.get(\"/locked\").get(\"get\").getResponse(Locked.STATUS_CODE).getDescription());\n\t\tassertEquals(LoopDetected.REASON_PHRASE, paths.get(\"/loopDetected\").get(\"get\").getResponse(LoopDetected.STATUS_CODE).getDescription());\n\t\tassertEquals(MethodNotAllowed.REASON_PHRASE, paths.get(\"/methodNotAllowed\").get(\"get\").getResponse(MethodNotAllowed.STATUS_CODE).getDescription());\n\t\tassertEquals(MisdirectedRequest.REASON_PHRASE, paths.get(\"/misdirectedRequest\").get(\"get\").getResponse(MisdirectedRequest.STATUS_CODE).getDescription());\n\t\tassertEquals(NetworkAuthenticationRequired.REASON_PHRASE, paths.get(\"/networkAuthenticationRequired\").get(\"get\").getResponse(NetworkAuthenticationRequired.STATUS_CODE).getDescription());\n\t\tassertEquals(NotAcceptable.REASON_PHRASE, paths.get(\"/notAcceptable\").get(\"get\").getResponse(NotAcceptable.STATUS_CODE).getDescription());\n\t\tassertEquals(NotExtended.REASON_PHRASE, paths.get(\"/notExtended\").get(\"get\").getResponse(NotExtended.STATUS_CODE).getDescription());\n\t\tassertEquals(NotFound.REASON_PHRASE, paths.get(\"/notFound\").get(\"get\").getResponse(NotFound.STATUS_CODE).getDescription());\n\t\tassertEquals(NotImplemented.REASON_PHRASE, paths.get(\"/notImplemented\").get(\"get\").getResponse(NotImplemented.STATUS_CODE).getDescription());\n\t\tassertEquals(PayloadTooLarge.REASON_PHRASE, paths.get(\"/payloadTooLarge\").get(\"get\").getResponse(PayloadTooLarge.STATUS_CODE).getDescription());\n\t\tassertEquals(PreconditionFailed.REASON_PHRASE, paths.get(\"/preconditionFailed\").get(\"get\").getResponse(PreconditionFailed.STATUS_CODE).getDescription());\n\t\tassertEquals(PreconditionRequired.REASON_PHRASE, paths.get(\"/preconditionRequired\").get(\"get\").getResponse(PreconditionRequired.STATUS_CODE).getDescription());\n\t\tassertEquals(RangeNotSatisfiable.REASON_PHRASE, paths.get(\"/rangeNotSatisfiable\").get(\"get\").getResponse(RangeNotSatisfiable.STATUS_CODE).getDescription());\n\t\tassertEquals(RequestHeaderFieldsTooLarge.REASON_PHRASE, paths.get(\"/requestHeaderFieldsTooLarge\").get(\"get\").getResponse(RequestHeaderFieldsTooLarge.STATUS_CODE).getDescription());\n\t\tassertEquals(ServiceUnavailable.REASON_PHRASE, paths.get(\"/serviceUnavailable\").get(\"get\").getResponse(ServiceUnavailable.STATUS_CODE).getDescription());\n\t\tassertEquals(TooManyRequests.REASON_PHRASE, paths.get(\"/tooManyRequests\").get(\"get\").getResponse(TooManyRequests.STATUS_CODE).getDescription());\n\t\tassertEquals(Unauthorized.REASON_PHRASE, paths.get(\"/unauthorized\").get(\"get\").getResponse(Unauthorized.STATUS_CODE).getDescription());\n\t\tassertEquals(UnavailableForLegalReasons.REASON_PHRASE, paths.get(\"/unavailableForLegalReasons\").get(\"get\").getResponse(UnavailableForLegalReasons.STATUS_CODE).getDescription());\n\t\tassertEquals(UnprocessableEntity.REASON_PHRASE, paths.get(\"/unprocessableEntity\").get(\"get\").getResponse(UnprocessableEntity.STATUS_CODE).getDescription());\n\t\tassertEquals(UnsupportedMediaType.REASON_PHRASE, paths.get(\"/unsupportedMediaType\").get(\"get\").getResponse(UnsupportedMediaType.STATUS_CODE).getDescription());\n\t\tassertEquals(UpgradeRequired.REASON_PHRASE, paths.get(\"/upgradeRequired\").get(\"get\").getResponse(UpgradeRequired.STATUS_CODE).getDescription());\n\t\tassertEquals(UriTooLong.REASON_PHRASE, paths.get(\"/uriTooLong\").get(\"get\").getResponse(UriTooLong.STATUS_CODE).getDescription());\n\t\tassertEquals(VariantAlsoNegotiates.REASON_PHRASE, paths.get(\"/variantAlsoNegotiates\").get(\"get\").getResponse(VariantAlsoNegotiates.STATUS_CODE).getDescription());\n\t}\n","date":"2021-02-28 23:40:42","endLine":846,"groupId":"101860","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"f01_swagger","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/fe/53fb66e50bec4dbe6709c1178fcd276b540c75.src","preCode":"\tpublic void f01_swagger() throws Exception {\n\t\tMap<String,OperationMap> paths = getSwagger(F.class).getPaths();\n\n\t\tassertEquals(BadRequest.MESSAGE, paths.get(\"/badRequest\").get(\"get\").getResponse(BadRequest.CODE).getDescription());\n\t\tassertEquals(Conflict.MESSAGE, paths.get(\"/conflict\").get(\"get\").getResponse(Conflict.CODE).getDescription());\n\t\tassertEquals(ExpectationFailed.MESSAGE, paths.get(\"/expectationFailed\").get(\"get\").getResponse(ExpectationFailed.CODE).getDescription());\n\t\tassertEquals(FailedDependency.MESSAGE, paths.get(\"/failedDependency\").get(\"get\").getResponse(FailedDependency.CODE).getDescription());\n\t\tassertEquals(Forbidden.MESSAGE, paths.get(\"/forbidden\").get(\"get\").getResponse(Forbidden.CODE).getDescription());\n\t\tassertEquals(Gone.MESSAGE, paths.get(\"/gone\").get(\"get\").getResponse(Gone.CODE).getDescription());\n\t\tassertEquals(HttpVersionNotSupported.MESSAGE, paths.get(\"/httpVersionNotSupported\").get(\"get\").getResponse(HttpVersionNotSupported.CODE).getDescription());\n\t\tassertEquals(InsufficientStorage.MESSAGE, paths.get(\"/insufficientStorage\").get(\"get\").getResponse(InsufficientStorage.CODE).getDescription());\n\t\tassertEquals(InternalServerError.MESSAGE, paths.get(\"/internalServerError\").get(\"get\").getResponse(InternalServerError.CODE).getDescription());\n\t\tassertEquals(LengthRequired.MESSAGE, paths.get(\"/lengthRequired\").get(\"get\").getResponse(LengthRequired.CODE).getDescription());\n\t\tassertEquals(Locked.MESSAGE, paths.get(\"/locked\").get(\"get\").getResponse(Locked.CODE).getDescription());\n\t\tassertEquals(LoopDetected.MESSAGE, paths.get(\"/loopDetected\").get(\"get\").getResponse(LoopDetected.CODE).getDescription());\n\t\tassertEquals(MethodNotAllowed.MESSAGE, paths.get(\"/methodNotAllowed\").get(\"get\").getResponse(MethodNotAllowed.CODE).getDescription());\n\t\tassertEquals(MisdirectedRequest.MESSAGE, paths.get(\"/misdirectedRequest\").get(\"get\").getResponse(MisdirectedRequest.CODE).getDescription());\n\t\tassertEquals(NetworkAuthenticationRequired.MESSAGE, paths.get(\"/networkAuthenticationRequired\").get(\"get\").getResponse(NetworkAuthenticationRequired.CODE).getDescription());\n\t\tassertEquals(NotAcceptable.MESSAGE, paths.get(\"/notAcceptable\").get(\"get\").getResponse(NotAcceptable.CODE).getDescription());\n\t\tassertEquals(NotExtended.MESSAGE, paths.get(\"/notExtended\").get(\"get\").getResponse(NotExtended.CODE).getDescription());\n\t\tassertEquals(NotFound.MESSAGE, paths.get(\"/notFound\").get(\"get\").getResponse(NotFound.CODE).getDescription());\n\t\tassertEquals(NotImplemented.MESSAGE, paths.get(\"/notImplemented\").get(\"get\").getResponse(NotImplemented.CODE).getDescription());\n\t\tassertEquals(PayloadTooLarge.MESSAGE, paths.get(\"/payloadTooLarge\").get(\"get\").getResponse(PayloadTooLarge.CODE).getDescription());\n\t\tassertEquals(PreconditionFailed.MESSAGE, paths.get(\"/preconditionFailed\").get(\"get\").getResponse(PreconditionFailed.CODE).getDescription());\n\t\tassertEquals(PreconditionRequired.MESSAGE, paths.get(\"/preconditionRequired\").get(\"get\").getResponse(PreconditionRequired.CODE).getDescription());\n\t\tassertEquals(RangeNotSatisfiable.MESSAGE, paths.get(\"/rangeNotSatisfiable\").get(\"get\").getResponse(RangeNotSatisfiable.CODE).getDescription());\n\t\tassertEquals(RequestHeaderFieldsTooLarge.MESSAGE, paths.get(\"/requestHeaderFieldsTooLarge\").get(\"get\").getResponse(RequestHeaderFieldsTooLarge.CODE).getDescription());\n\t\tassertEquals(ServiceUnavailable.MESSAGE, paths.get(\"/serviceUnavailable\").get(\"get\").getResponse(ServiceUnavailable.CODE).getDescription());\n\t\tassertEquals(TooManyRequests.MESSAGE, paths.get(\"/tooManyRequests\").get(\"get\").getResponse(TooManyRequests.CODE).getDescription());\n\t\tassertEquals(Unauthorized.MESSAGE, paths.get(\"/unauthorized\").get(\"get\").getResponse(Unauthorized.CODE).getDescription());\n\t\tassertEquals(UnavailableForLegalReasons.MESSAGE, paths.get(\"/unavailableForLegalReasons\").get(\"get\").getResponse(UnavailableForLegalReasons.CODE).getDescription());\n\t\tassertEquals(UnprocessableEntity.MESSAGE, paths.get(\"/unprocessableEntity\").get(\"get\").getResponse(UnprocessableEntity.CODE).getDescription());\n\t\tassertEquals(UnsupportedMediaType.MESSAGE, paths.get(\"/unsupportedMediaType\").get(\"get\").getResponse(UnsupportedMediaType.CODE).getDescription());\n\t\tassertEquals(UpgradeRequired.MESSAGE, paths.get(\"/upgradeRequired\").get(\"get\").getResponse(UpgradeRequired.CODE).getDescription());\n\t\tassertEquals(UriTooLong.MESSAGE, paths.get(\"/uriTooLong\").get(\"get\").getResponse(UriTooLong.CODE).getDescription());\n\t\tassertEquals(VariantAlsoNegotiates.MESSAGE, paths.get(\"/variantAlsoNegotiates\").get(\"get\").getResponse(VariantAlsoNegotiates.CODE).getDescription());\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/RestOp_Throws_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":810,"status":"M"}],"commitId":"4ad5a6d61ea828e83e6fea37c4cb1c866dccc4aa","commitMessage":"@@@Predefined response beans should extend from apache HttpResponse.","date":"2021-02-28 23:40:42","modifiedFileCount":"135","status":"M","submitter":"JamesBognar"}]
