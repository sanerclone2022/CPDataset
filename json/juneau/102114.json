[{"authorTime":"2018-12-14 02:00:46","codes":[{"authorDate":"2018-12-09 04:09:52","commitOrder":2,"curCode":"    public static void main(String[] args) throws SerializeException, ParseException {\n\n        \r\n        Pojo pojo = new Pojo(\"id\",\"name\");\n\n        \r\n        String serial = XmlSerializer.DEFAULT_SQ_READABLE.serialize(pojo);\n        System.out.println(serial);\n\n        \r\n        Pojo obj = XmlParser.DEFAULT.parse(serial, Pojo.class);\n\n        assert obj.getId().equals(pojo.getId());\n        assert obj.getName().equals(pojo.getName());\n\n        \r\n        \r\n\n    }\n","date":"2018-12-09 04:09:52","endLine":43,"groupId":"2038","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/cb/2df87e0439d11db8f56b566550c268cc03dc3a.src","preCode":"    public static void main(String[] args) throws SerializeException, ParseException {\n\n        \r\n        Pojo pojo = new Pojo(\"id\",\"name\");\n\n        \r\n        String serial = XmlSerializer.DEFAULT_SQ_READABLE.serialize(pojo);\n        System.out.println(serial);\n\n        \r\n        Pojo obj = XmlParser.DEFAULT.parse(serial, Pojo.class);\n\n        assert obj.getId().equals(pojo.getId());\n        assert obj.getName().equals(pojo.getName());\n\n        \r\n        \r\n\n    }\n","realPath":"juneau-examples/juneau-examples-core/src/main/java/org/apache/juneau/examples/core/xml/XmlSimpleExample.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":25,"status":"NB"},{"authorDate":"2018-12-14 02:00:46","commitOrder":2,"curCode":"    public static void main(String[] args) throws SerializeException, ParseException {\n\n        \r\n        Pojo pojo = new Pojo(\"id\",\"name\");\n\n        \r\n\r\n\n        String serial = UonSerializer.DEFAULT.serialize(pojo);\n        System.out.println(serial);\n\n        \r\n        Pojo obj = UonParser.DEFAULT.parse(serial, Pojo.class);\n\n        assert obj.getId().equals(pojo.getId());\n        assert obj.getName().equals(pojo.getName());\n\n        \r\n        \r\n\n    }\n","date":"2018-12-14 02:00:46","endLine":59,"groupId":"2038","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/32/9f64fd5b4ef4828098bd5a6faa2db4fe36591f.src","preCode":"    public static void main(String[] args) throws SerializeException, ParseException {\n\n        \r\n        Pojo pojo = new Pojo(\"id\",\"name\");\n\n        \r\n\r\n\n        String serial = UonSerializer.DEFAULT.serialize(pojo);\n        System.out.println(serial);\n\n        \r\n        Pojo obj = UonParser.DEFAULT.parse(serial, Pojo.class);\n\n        assert obj.getId().equals(pojo.getId());\n        assert obj.getName().equals(pojo.getName());\n\n        \r\n        \r\n\n    }\n","realPath":"juneau-examples/juneau-examples-core/src/main/java/org/apache/juneau/examples/core/uon/UONExample.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"}],"commitId":"a2690aa87bc11939d33d63ff30c22630f0cbbd8a","commitMessage":"@@@Merge pull request #35 from Akayeshmantha/JUNEAU-92\n\nJuneau 92 adding uon samples and more comments ","date":"2018-12-14 02:00:46","modifiedFileCount":"8","status":"M","submitter":"James Bognar"},{"authorTime":"2019-07-06 02:52:55","codes":[{"authorDate":"2019-07-06 02:52:55","commitOrder":3,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\n\t\t\r\n\t\tPojo pojo = new Pojo(\"id\",\"name\");\n\n\t\t\r\n\t\t\r\n\r\n\r\n\r\n\n\t\tString serial = XmlSerializer.DEFAULT_SQ_READABLE.serialize(pojo);\n\t\tSystem.out.println(serial);\n\n\t\t\r\n\t\tPojo obj = XmlParser.DEFAULT.parse(serial, Pojo.class);\n\n\t\tassert obj.getId().equals(pojo.getId());\n\t\tassert obj.getName().equals(pojo.getName());\n\n\t\t\r\n\t\t\r\n\n\t}\n","date":"2019-07-06 02:52:55","endLine":60,"groupId":"102114","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/e2/40a431839828be8ebe91aa370f92c67b71f0d3.src","preCode":"    public static void main(String[] args) throws SerializeException, ParseException {\n\n        \r\n        Pojo pojo = new Pojo(\"id\",\"name\");\n\n        \r\n        \r\n\r\n\r\n\r\n\n        String serial = XmlSerializer.DEFAULT_SQ_READABLE.serialize(pojo);\n        System.out.println(serial);\n\n        \r\n        Pojo obj = XmlParser.DEFAULT.parse(serial, Pojo.class);\n\n        assert obj.getId().equals(pojo.getId());\n        assert obj.getName().equals(pojo.getName());\n\n        \r\n        \r\n\n    }\n","realPath":"juneau-examples/juneau-examples-core/src/main/java/org/apache/juneau/examples/core/xml/XmlSimpleExample.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2019-07-06 02:52:55","commitOrder":3,"curCode":"\tpublic static void main(String[] args) throws Exception {\n\n\t\t\r\n\t\tPojo pojo = new Pojo(\"id\",\"name\");\n\n\t\t\r\n\r\n\n\t\tString serial = UonSerializer.DEFAULT.serialize(pojo);\n\t\tSystem.out.println(serial);\n\n\t\t\r\n\t\tPojo obj = UonParser.DEFAULT.parse(serial, Pojo.class);\n\n\t\tassert obj.getId().equals(pojo.getId());\n\t\tassert obj.getName().equals(pojo.getName());\n\n\t\t\r\n\t\t\r\n\n\t}\n","date":"2019-07-06 02:52:55","endLine":63,"groupId":"102114","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/40/4e3c40d7f900dcbc5a7db74e7ec12feef58e01.src","preCode":"    public static void main(String[] args) throws SerializeException, ParseException {\n\n        \r\n        Pojo pojo = new Pojo(\"id\",\"name\");\n\n        \r\n\r\n\n        String serial = UonSerializer.DEFAULT.serialize(pojo);\n        System.out.println(serial);\n\n        \r\n        Pojo obj = UonParser.DEFAULT.parse(serial, Pojo.class);\n\n        assert obj.getId().equals(pojo.getId());\n        assert obj.getName().equals(pojo.getName());\n\n        \r\n        \r\n\n    }\n","realPath":"juneau-examples/juneau-examples-core/src/main/java/org/apache/juneau/examples/core/uon/UONExample.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"3746a7917cd6c303dd3c9374bba0995d7bed5932","commitMessage":"@@@Javadoc and thrown-exception cleanup.","date":"2019-07-06 02:52:55","modifiedFileCount":"203","status":"M","submitter":"JamesBognar"}]
