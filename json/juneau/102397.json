[{"authorTime":"2020-05-26 02:49:22","codes":[{"authorDate":"2020-05-26 02:49:22","commitOrder":1,"curCode":"\tpublic R contains(String...values) throws AssertionError {\n\t\tfor (String substring : values)\n\t\t\tif (! StringUtils.contains(text, substring)) {\n\t\t\t\tif (substring.startsWith(\"x\")) {\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tsb.append(\"Text did not contain expected substring.\");\n\t\t\t\t\tsb.append(\"\\nSubstring: [\").append(substring.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tsb.append(\"\\nText     : [\").append(text.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tSystem.err.println(sb.toString());\n\t\t\t\t}\n\t\t\t\tthrow new BasicAssertionError(\"Text did not contain expected substring.\\n\\tExpected=[{0}]\\n\\tActual=[{1}]\", substring, text);\n\t\t\t}\n\t\treturn returns;\n\t}\n","date":"2020-05-26 02:49:22","endLine":181,"groupId":"5422","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"contains","params":"(String...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/c9/71aba7546f27a84e34cca3e2cd8d50aefe41bb.src","preCode":"\tpublic R contains(String...values) throws AssertionError {\n\t\tfor (String substring : values)\n\t\t\tif (! StringUtils.contains(text, substring)) {\n\t\t\t\tif (substring.startsWith(\"x\")) {\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tsb.append(\"Text did not contain expected substring.\");\n\t\t\t\t\tsb.append(\"\\nSubstring: [\").append(substring.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tsb.append(\"\\nText     : [\").append(text.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tSystem.err.println(sb.toString());\n\t\t\t\t}\n\t\t\t\tthrow new BasicAssertionError(\"Text did not contain expected substring.\\n\\tExpected=[{0}]\\n\\tActual=[{1}]\", substring, text);\n\t\t\t}\n\t\treturn returns;\n\t}\n","realPath":"juneau-core/juneau-marshall/src/main/java/org/apache/juneau/assertions/FluentStringAssertion.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"B"},{"authorDate":"2020-05-26 02:49:22","commitOrder":1,"curCode":"\tpublic R doesNotContain(String...values) throws AssertionError {\n\t\tfor (String substring : values)\n\t\t\tif (StringUtils.contains(text, substring)) {\n\t\t\t\tif (substring.startsWith(\"x\")) {\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tsb.append(\"Text contained unexpected substring.\");\n\t\t\t\t\tsb.append(\"\\nSubstring: [\").append(substring.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tsb.append(\"\\nText     : [\").append(text.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tSystem.err.println(sb.toString());\n\t\t\t\t}\n\t\t\t\tthrow new BasicAssertionError(\"Text contained unexpected substring.\\n\\tExpected=[{0}]\\n\\tActual=[{1}]\", substring, text);\n\t\t\t}\n\t\treturn returns;\n\t}\n","date":"2020-05-26 02:49:22","endLine":203,"groupId":"5422","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doesNotContain","params":"(String...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/c9/71aba7546f27a84e34cca3e2cd8d50aefe41bb.src","preCode":"\tpublic R doesNotContain(String...values) throws AssertionError {\n\t\tfor (String substring : values)\n\t\t\tif (StringUtils.contains(text, substring)) {\n\t\t\t\tif (substring.startsWith(\"x\")) {\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tsb.append(\"Text contained unexpected substring.\");\n\t\t\t\t\tsb.append(\"\\nSubstring: [\").append(substring.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tsb.append(\"\\nText     : [\").append(text.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tSystem.err.println(sb.toString());\n\t\t\t\t}\n\t\t\t\tthrow new BasicAssertionError(\"Text contained unexpected substring.\\n\\tExpected=[{0}]\\n\\tActual=[{1}]\", substring, text);\n\t\t\t}\n\t\treturn returns;\n\t}\n","realPath":"juneau-core/juneau-marshall/src/main/java/org/apache/juneau/assertions/FluentStringAssertion.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"}],"commitId":"60fc84ed161bff2e82b9793f99f7080f4ab5aab2","commitMessage":"@@@Improved assertions on the mock classes.","date":"2020-05-26 02:49:22","modifiedFileCount":"46","status":"B","submitter":"JamesBognar"},{"authorTime":"2020-05-28 02:27:34","codes":[{"authorDate":"2020-05-28 02:27:34","commitOrder":2,"curCode":"\tpublic R contains(String...values) throws AssertionError {\n\t\tfor (String substring : values)\n\t\t\tif (! StringUtils.contains(text, substring)) {\n\t\t\t\tif (substring.startsWith(\"x\")) {\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tsb.append(\"Text did not contain expected substring.\");\n\t\t\t\t\tsb.append(\"\\nSubstring: [\").append(substring.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tsb.append(\"\\nText     : [\").append(text.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tSystem.err.println(sb.toString());\n\t\t\t\t}\n\t\t\t\tthrow new BasicAssertionError(\"Text did not contain expected substring.\\n\\tExpected=[{0}]\\n\\tActual=[{1}]\", substring, text);\n\t\t\t}\n\t\treturn returns();\n\t}\n","date":"2020-05-28 02:27:34","endLine":180,"groupId":"5422","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"contains","params":"(String...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/d0/fa678bcaf62cbb399c9869e38d942e8768c143.src","preCode":"\tpublic R contains(String...values) throws AssertionError {\n\t\tfor (String substring : values)\n\t\t\tif (! StringUtils.contains(text, substring)) {\n\t\t\t\tif (substring.startsWith(\"x\")) {\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tsb.append(\"Text did not contain expected substring.\");\n\t\t\t\t\tsb.append(\"\\nSubstring: [\").append(substring.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tsb.append(\"\\nText     : [\").append(text.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tSystem.err.println(sb.toString());\n\t\t\t\t}\n\t\t\t\tthrow new BasicAssertionError(\"Text did not contain expected substring.\\n\\tExpected=[{0}]\\n\\tActual=[{1}]\", substring, text);\n\t\t\t}\n\t\treturn returns;\n\t}\n","realPath":"juneau-core/juneau-marshall/src/main/java/org/apache/juneau/assertions/FluentStringAssertion.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2020-05-28 02:27:34","commitOrder":2,"curCode":"\tpublic R doesNotContain(String...values) throws AssertionError {\n\t\tfor (String substring : values)\n\t\t\tif (StringUtils.contains(text, substring)) {\n\t\t\t\tif (substring.startsWith(\"x\")) {\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tsb.append(\"Text contained unexpected substring.\");\n\t\t\t\t\tsb.append(\"\\nSubstring: [\").append(substring.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tsb.append(\"\\nText     : [\").append(text.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tSystem.err.println(sb.toString());\n\t\t\t\t}\n\t\t\t\tthrow new BasicAssertionError(\"Text contained unexpected substring.\\n\\tExpected=[{0}]\\n\\tActual=[{1}]\", substring, text);\n\t\t\t}\n\t\treturn returns();\n\t}\n","date":"2020-05-28 02:27:34","endLine":202,"groupId":"5422","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doesNotContain","params":"(String...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/d0/fa678bcaf62cbb399c9869e38d942e8768c143.src","preCode":"\tpublic R doesNotContain(String...values) throws AssertionError {\n\t\tfor (String substring : values)\n\t\t\tif (StringUtils.contains(text, substring)) {\n\t\t\t\tif (substring.startsWith(\"x\")) {\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tsb.append(\"Text contained unexpected substring.\");\n\t\t\t\t\tsb.append(\"\\nSubstring: [\").append(substring.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tsb.append(\"\\nText     : [\").append(text.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tSystem.err.println(sb.toString());\n\t\t\t\t}\n\t\t\t\tthrow new BasicAssertionError(\"Text contained unexpected substring.\\n\\tExpected=[{0}]\\n\\tActual=[{1}]\", substring, text);\n\t\t\t}\n\t\treturn returns;\n\t}\n","realPath":"juneau-core/juneau-marshall/src/main/java/org/apache/juneau/assertions/FluentStringAssertion.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"b9851c9d1bca14af1147cc5e59d8dac9a983745d","commitMessage":"@@@MockRestClient improvements.","date":"2020-05-28 02:27:34","modifiedFileCount":"39","status":"M","submitter":"JamesBognar"},{"authorTime":"2020-07-10 23:56:39","codes":[{"authorDate":"2020-07-10 23:56:39","commitOrder":3,"curCode":"\tpublic R contains(String...values) throws AssertionError {\n\t\tassertNotNull(\"values\", values);\n\t\tfor (String substring : values)\n\t\t\tif (substring != null && ! StringUtils.contains(text, substring))\n\t\t\t\tthrow error(\"Text did not contain expected substring.\\n\\tSubstring=[{0}]\\n\\tText=[{1}]\", fix(substring), fix(text));\n\t\treturn returns();\n\t}\n","date":"2020-07-10 23:56:39","endLine":345,"groupId":"7276","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"contains","params":"(String...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/31/156e97d004790b05999b23a0f4e3b8b6028f07.src","preCode":"\tpublic R contains(String...values) throws AssertionError {\n\t\tfor (String substring : values)\n\t\t\tif (! StringUtils.contains(text, substring)) {\n\t\t\t\tif (substring.startsWith(\"x\")) {\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tsb.append(\"Text did not contain expected substring.\");\n\t\t\t\t\tsb.append(\"\\nSubstring: [\").append(substring.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tsb.append(\"\\nText     : [\").append(text.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tSystem.err.println(sb.toString());\n\t\t\t\t}\n\t\t\t\tthrow new BasicAssertionError(\"Text did not contain expected substring.\\n\\tExpected=[{0}]\\n\\tActual=[{1}]\", substring, text);\n\t\t\t}\n\t\treturn returns();\n\t}\n","realPath":"juneau-core/juneau-marshall/src/main/java/org/apache/juneau/assertions/FluentStringAssertion.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"M"},{"authorDate":"2020-07-10 23:56:39","commitOrder":3,"curCode":"\tpublic R doesNotContain(String...values) throws AssertionError {\n\t\tassertNotNull(\"values\", values);\n\t\tfor (String substring : values)\n\t\t\tif (substring != null && StringUtils.contains(text, substring))\n\t\t\t\tthrow error(\"Text contained unexpected substring.\\n\\tSubstring=[{0}]\\n\\tText=[{1}]\", fix(substring), fix(text));\n\t\treturn returns();\n\t}\n","date":"2020-07-10 23:56:39","endLine":360,"groupId":"5145","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doesNotContain","params":"(String...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/31/156e97d004790b05999b23a0f4e3b8b6028f07.src","preCode":"\tpublic R doesNotContain(String...values) throws AssertionError {\n\t\tfor (String substring : values)\n\t\t\tif (StringUtils.contains(text, substring)) {\n\t\t\t\tif (substring.startsWith(\"x\")) {\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tsb.append(\"Text contained unexpected substring.\");\n\t\t\t\t\tsb.append(\"\\nSubstring: [\").append(substring.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tsb.append(\"\\nText     : [\").append(text.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\").replaceAll(\"\\n\", \"\\\\\\\\n\").replaceAll(\"\\t\", \"\\\\\\\\t\")).append(\"]\");\n\t\t\t\t\tSystem.err.println(sb.toString());\n\t\t\t\t}\n\t\t\t\tthrow new BasicAssertionError(\"Text contained unexpected substring.\\n\\tExpected=[{0}]\\n\\tActual=[{1}]\", substring, text);\n\t\t\t}\n\t\treturn returns();\n\t}\n","realPath":"juneau-core/juneau-marshall/src/main/java/org/apache/juneau/assertions/FluentStringAssertion.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"}],"commitId":"65488857d1376ce91119e119ac9dfb91f7fc3b67","commitMessage":"@@@Assertions tests.","date":"2020-07-10 23:56:39","modifiedFileCount":"16","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-07-12 00:32:49","codes":[{"authorDate":"2021-07-12 00:32:49","commitOrder":4,"curCode":"\tpublic R contains(String...values) throws AssertionError {\n\t\tassertNotNull(\"values\", values);\n\t\tString s = orElse(null);\n\t\tfor (String substring : values)\n\t\t\tif (substring != null && ! StringUtils.contains(s, substring))\n\t\t\t\tthrow error(\"Text did not contain expected substring.\\n\\tSubstring=[{0}]\\n\\tText=[{1}]\", fix(substring), fix(s));\n\t\treturn returns();\n\t}\n","date":"2021-07-12 00:32:49","endLine":351,"groupId":"4846","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"contains","params":"(String...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/3c/f3c94ee245d309562ec89fa51fce0098adcce6.src","preCode":"\tpublic R contains(String...values) throws AssertionError {\n\t\tassertNotNull(\"values\", values);\n\t\tfor (String substring : values)\n\t\t\tif (substring != null && ! StringUtils.contains(text, substring))\n\t\t\t\tthrow error(\"Text did not contain expected substring.\\n\\tSubstring=[{0}]\\n\\tText=[{1}]\", fix(substring), fix(text));\n\t\treturn returns();\n\t}\n","realPath":"juneau-core/juneau-marshall/src/main/java/org/apache/juneau/assertions/FluentStringAssertion.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"M"},{"authorDate":"2021-07-12 00:32:49","commitOrder":4,"curCode":"\tpublic R doesNotContain(String...values) throws AssertionError {\n\t\tassertNotNull(\"values\", values);\n\t\tString s = orElse(null);\n\t\tfor (String substring : values)\n\t\t\tif (substring != null && StringUtils.contains(s, substring))\n\t\t\t\tthrow error(\"Text contained unexpected substring.\\n\\tSubstring=[{0}]\\n\\tText=[{1}]\", fix(substring), fix(s));\n\t\treturn returns();\n\t}\n","date":"2021-07-12 00:32:49","endLine":367,"groupId":"4267","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doesNotContain","params":"(String...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/3c/f3c94ee245d309562ec89fa51fce0098adcce6.src","preCode":"\tpublic R doesNotContain(String...values) throws AssertionError {\n\t\tassertNotNull(\"values\", values);\n\t\tfor (String substring : values)\n\t\t\tif (substring != null && StringUtils.contains(text, substring))\n\t\t\t\tthrow error(\"Text contained unexpected substring.\\n\\tSubstring=[{0}]\\n\\tText=[{1}]\", fix(substring), fix(text));\n\t\treturn returns();\n\t}\n","realPath":"juneau-core/juneau-marshall/src/main/java/org/apache/juneau/assertions/FluentStringAssertion.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"}],"commitId":"4666cdb0f23d85ef8a92149e92d631ce4dd400ad","commitMessage":"@@@Assertions API improvements.","date":"2021-07-12 00:32:49","modifiedFileCount":"103","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-07-13 02:59:36","codes":[{"authorDate":"2021-07-13 02:59:36","commitOrder":5,"curCode":"\tpublic R contains(String...values) throws AssertionError {\n\t\tassertArgNotNull(\"values\", values);\n\t\tString s = orElse(null);\n\t\tfor (String substring : values)\n\t\t\tif (substring != null && ! StringUtils.contains(s, substring))\n\t\t\t\tthrow error(MSG_stringDidNotContainExpectedSubstring, fix(substring), fix(s));\n\t\treturn returns();\n\t}\n","date":"2021-07-13 02:59:36","endLine":370,"groupId":"102397","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"contains","params":"(String...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/46/2b9f7a94379dce5e435233619529e1dd98b10d.src","preCode":"\tpublic R contains(String...values) throws AssertionError {\n\t\tassertNotNull(\"values\", values);\n\t\tString s = orElse(null);\n\t\tfor (String substring : values)\n\t\t\tif (substring != null && ! StringUtils.contains(s, substring))\n\t\t\t\tthrow error(\"Text did not contain expected substring.\\n\\tSubstring=[{0}]\\n\\tText=[{1}]\", fix(substring), fix(s));\n\t\treturn returns();\n\t}\n","realPath":"juneau-core/juneau-marshall/src/main/java/org/apache/juneau/assertions/FluentStringAssertion.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"M"},{"authorDate":"2021-07-13 02:59:36","commitOrder":5,"curCode":"\tpublic R doesNotContain(String...values) throws AssertionError {\n\t\tassertArgNotNull(\"values\", values);\n\t\tString s = orElse(null);\n\t\tfor (String substring : values)\n\t\t\tif (substring != null && StringUtils.contains(s, substring))\n\t\t\t\tthrow error(MSG_stringContainedUnexpectedSubstring, fix(substring), fix(s));\n\t\treturn returns();\n\t}\n","date":"2021-07-13 02:59:36","endLine":386,"groupId":"102397","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doesNotContain","params":"(String...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/46/2b9f7a94379dce5e435233619529e1dd98b10d.src","preCode":"\tpublic R doesNotContain(String...values) throws AssertionError {\n\t\tassertNotNull(\"values\", values);\n\t\tString s = orElse(null);\n\t\tfor (String substring : values)\n\t\t\tif (substring != null && StringUtils.contains(s, substring))\n\t\t\t\tthrow error(\"Text contained unexpected substring.\\n\\tSubstring=[{0}]\\n\\tText=[{1}]\", fix(substring), fix(s));\n\t\treturn returns();\n\t}\n","realPath":"juneau-core/juneau-marshall/src/main/java/org/apache/juneau/assertions/FluentStringAssertion.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"M"}],"commitId":"20131ef56daa2abc9574cec942f7252666dbadb2","commitMessage":"@@@Unit tests.","date":"2021-07-13 02:59:36","modifiedFileCount":"37","status":"M","submitter":"JamesBognar"}]
