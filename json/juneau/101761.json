[{"authorTime":"2021-02-06 03:17:15","codes":[{"authorDate":"2021-02-06 03:17:15","commitOrder":1,"curCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/foo','text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(\"123\").build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(\"123\").build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(\"10\").build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"X-No-Log\").noLog().build().get(\"/headers\").run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(new StringBuilder(\"foo\")).build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(\"10\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(new StringBuilder(\"foo\")).run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","date":"2021-02-06 03:17:15","endLine":280,"groupId":"2756","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"b01_standardHeaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/0c/263263fce99769dc2c7ce5db2e33c9dc0f329a.src","preCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/foo','text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(\"123\").build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(\"123\").build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(\"10\").build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"X-No-Log\").noLog().build().get(\"/headers\").run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(new StringBuilder(\"foo\")).build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(\"10\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(new StringBuilder(\"foo\")).run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"B"},{"authorDate":"2021-02-06 03:17:15","commitOrder":1,"curCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/foo','text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","date":"2021-02-06 03:17:15","endLine":334,"groupId":"2758","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"b04_dontOverrideAccept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/0c/263263fce99769dc2c7ce5db2e33c9dc0f329a.src","preCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/foo','text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"B"}],"commitId":"be23bff717ddb90a892c743156f56c11bd5bceee","commitMessage":"@@@Move unit tests into a single top-level project.","date":"2021-02-06 03:17:15","modifiedFileCount":"0","status":"B","submitter":"JamesBognar"},{"authorTime":"2021-03-13 01:53:17","codes":[{"authorDate":"2021-03-13 01:53:17","commitOrder":2,"curCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(\"123\").build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(\"123\").build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(\"10\").build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"X-No-Log\").noLog().build().get(\"/headers\").run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(new StringBuilder(\"foo\")).build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(\"10\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(new StringBuilder(\"foo\")).run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","date":"2021-03-13 01:53:17","endLine":280,"groupId":"2756","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"b01_standardHeaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/fe/18a9f2d915b7e9ae0d09f26388720b55a38439.src","preCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/foo','text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(\"123\").build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(\"123\").build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(\"10\").build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"X-No-Log\").noLog().build().get(\"/headers\").run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(new StringBuilder(\"foo\")).build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(\"10\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(new StringBuilder(\"foo\")).run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2021-03-13 01:53:17","commitOrder":2,"curCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","date":"2021-03-13 01:53:17","endLine":334,"groupId":"2758","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"b04_dontOverrideAccept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/fe/18a9f2d915b7e9ae0d09f26388720b55a38439.src","preCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/foo','text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"}],"commitId":"09d8ab4bef2307e8108ee42498024381dd18333c","commitMessage":"@@@REST refactoring.","date":"2021-03-13 01:53:17","modifiedFileCount":"6","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-03-13 01:53:17","codes":[{"authorDate":"2021-05-10 20:36:47","commitOrder":3,"curCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(\"123\").build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(\"123\").build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(\"10\").build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"X-No-Log\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(new StringBuilder(\"foo\")).build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(\"10\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(new StringBuilder(\"foo\")).run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","date":"2021-05-10 20:36:47","endLine":281,"groupId":"3474","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"b01_standardHeaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/fa/be096f97ac383cfb192648756e2646c15f81ae.src","preCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(\"123\").build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(\"123\").build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(\"10\").build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"X-No-Log\").noLog().build().get(\"/headers\").run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(new StringBuilder(\"foo\")).build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(\"10\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(new StringBuilder(\"foo\")).run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2021-03-13 01:53:17","commitOrder":3,"curCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","date":"2021-03-13 01:53:17","endLine":334,"groupId":"2758","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"b04_dontOverrideAccept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/fe/18a9f2d915b7e9ae0d09f26388720b55a38439.src","preCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"N"}],"commitId":"4ff836265265feb383beafd0a4d3fa35771dfc8b","commitMessage":"@@@Cleanup.","date":"2021-05-10 20:36:47","modifiedFileCount":"44","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-03-13 01:53:17","codes":[{"authorDate":"2021-06-07 22:12:57","commitOrder":4,"curCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(123l).build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(Date.of(\"Sat, 29 Oct 1994 19:43:31 GMT\")).build().get(\"/headers\").run().assertBody().is(\"['Sat, 29 Oct 1994 19:43:31 GMT']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(\"Sat, 29 Oct 1994 19:43:31 GMT\").build().get(\"/headers\").run().assertBody().is(\"['Sat, 29 Oct 1994 19:43:31 GMT']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(\"Sat, 29 Oct 1994 19:43:31 GMT\").build().get(\"/headers\").run().assertBody().is(\"['Sat, 29 Oct 1994 19:43:31 GMT']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(10).build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(\"10\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(new StringBuilder(\"foo\")).run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","date":"2021-06-07 22:12:57","endLine":282,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"b01_standardHeaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/74/2df2cce99c88c858ab3e93621e2dbed66e4161.src","preCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(\"123\").build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(\"123\").build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(\"10\").build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"X-No-Log\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(new StringBuilder(\"foo\")).build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(\"10\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(new StringBuilder(\"foo\")).run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2021-03-13 01:53:17","commitOrder":4,"curCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","date":"2021-03-13 01:53:17","endLine":334,"groupId":"2758","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"b04_dontOverrideAccept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/fe/18a9f2d915b7e9ae0d09f26388720b55a38439.src","preCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"N"}],"commitId":"ee710a0d302b783b1b34d7febce24f17cf52149d","commitMessage":"@@@RestClient API improvements.","date":"2021-06-07 22:12:57","modifiedFileCount":"9","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-03-13 01:53:17","codes":[{"authorDate":"2021-06-09 22:09:16","commitOrder":5,"curCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(123l).build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(10).build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(123l).run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(10).run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(new StringBuilder(\"foo\")).run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","date":"2021-06-09 22:09:16","endLine":281,"groupId":"9494","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"b01_standardHeaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/70/0476cceba201b1797cd409f0baf87b2044715f.src","preCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(123l).build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(Date.of(\"Sat, 29 Oct 1994 19:43:31 GMT\")).build().get(\"/headers\").run().assertBody().is(\"['Sat, 29 Oct 1994 19:43:31 GMT']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(\"Sat, 29 Oct 1994 19:43:31 GMT\").build().get(\"/headers\").run().assertBody().is(\"['Sat, 29 Oct 1994 19:43:31 GMT']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(\"Sat, 29 Oct 1994 19:43:31 GMT\").build().get(\"/headers\").run().assertBody().is(\"['Sat, 29 Oct 1994 19:43:31 GMT']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(10).build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(\"123\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(\"10\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(new StringBuilder(\"foo\")).run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2021-03-13 01:53:17","commitOrder":5,"curCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","date":"2021-03-13 01:53:17","endLine":334,"groupId":"2758","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"b04_dontOverrideAccept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/fe/18a9f2d915b7e9ae0d09f26388720b55a38439.src","preCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"N"}],"commitId":"5dac8dd0b972224997796d9557708660009b5f1c","commitMessage":"@@@RestClient API improvements.","date":"2021-06-09 22:09:16","modifiedFileCount":"5","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-03-13 01:53:17","codes":[{"authorDate":"2021-06-10 04:07:06","commitOrder":6,"curCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(123l).build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(10).build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(123l).run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(10).run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","date":"2021-06-10 04:07:06","endLine":281,"groupId":"9494","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"b01_standardHeaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/1a/5be7b0582a48dfa4b1a9d1c0ee832ae614ad35.src","preCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(123l).build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(10).build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"X-Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(123l).run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(10).run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(new StringBuilder(\"foo\")).run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2021-03-13 01:53:17","commitOrder":6,"curCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","date":"2021-03-13 01:53:17","endLine":334,"groupId":"2758","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"b04_dontOverrideAccept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/fe/18a9f2d915b7e9ae0d09f26388720b55a38439.src","preCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"N"}],"commitId":"bd0b99dd8d3367be58934c78103468ac986f39c5","commitMessage":"@@@RestClient API improvements.","date":"2021-06-10 04:07:06","modifiedFileCount":"14","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-03-13 01:53:17","codes":[{"authorDate":"2021-06-12 22:39:33","commitOrder":7,"curCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(123l).build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(10).build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true','true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(123l).run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(10).run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","date":"2021-06-12 22:39:33","endLine":272,"groupId":"9494","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"b01_standardHeaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/c8/7624db1ef709ca84ca03270af4704d1a8bedb6.src","preCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(123l).build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(10).build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(123l).run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(10).run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"},{"authorDate":"2021-03-13 01:53:17","commitOrder":7,"curCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","date":"2021-03-13 01:53:17","endLine":334,"groupId":"2758","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"b04_dontOverrideAccept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/fe/18a9f2d915b7e9ae0d09f26388720b55a38439.src","preCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"N"}],"commitId":"96d3befb75198a50d3ce7592ae191597ea27689d","commitMessage":"@@@RestClient API improvements.","date":"2021-06-12 22:39:33","modifiedFileCount":"20","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-06-15 22:29:09","codes":[{"authorDate":"2021-06-15 22:29:09","commitOrder":8,"curCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(123l).build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(10).build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true','true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(123l).run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(10).run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true','true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","date":"2021-06-15 22:29:09","endLine":269,"groupId":"9494","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"b01_standardHeaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/b3/561aae4bf8bbafbe57d93ab77a42e8a7e426ae.src","preCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/foo\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(123l).build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(10).build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true','true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(123l).run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(10).run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"},{"authorDate":"2021-06-15 22:29:09","commitOrder":8,"curCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/foo','text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.debug().run().assertBody().is(\"['text/plain']\");\n\t}\n","date":"2021-06-15 22:29:09","endLine":323,"groupId":"2758","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"b04_dontOverrideAccept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/b3/561aae4bf8bbafbe57d93ab77a42e8a7e426ae.src","preCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"}],"commitId":"37108c9a30f2f8def3b32e2304c94ed8bfcc61a7","commitMessage":"@@@RestClient API improvements.","date":"2021-06-15 22:29:09","modifiedFileCount":"30","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-22 00:17:39","codes":[{"authorDate":"2021-06-15 22:29:09","commitOrder":9,"curCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(123l).build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(10).build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true','true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(123l).run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(10).run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true','true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","date":"2021-06-15 22:29:09","endLine":269,"groupId":"9494","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"b01_standardHeaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/b3/561aae4bf8bbafbe57d93ab77a42e8a7e426ae.src","preCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(123l).build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(10).build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true','true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(123l).run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(10).run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true','true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"N"},{"authorDate":"2021-08-22 00:17:39","commitOrder":9,"curCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/foo','text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","date":"2021-08-22 00:17:39","endLine":332,"groupId":"2758","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"b04_dontOverrideAccept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/e9/c453625226b8ab120c1f551faf0f5ec1b90278.src","preCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/foo','text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.debug().run().assertBody().is(\"['text/plain']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"}],"commitId":"264f7d6ab489f248e8eb0865bfffe2e7c32339a1","commitMessage":"@@@Context API refactoring.","date":"2021-08-22 00:17:39","modifiedFileCount":"115","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-22 00:17:39","codes":[{"authorDate":"2021-09-24 03:39:17","commitOrder":10,"curCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(10).build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true','true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(123l).run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(10).run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true','true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","date":"2021-09-24 03:39:17","endLine":243,"groupId":"101761","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"b01_standardHeaders","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/50/d58c9b3fe6001580f67e72af77997d6af4103d.src","preCode":"\tpublic void b01_standardHeaders() throws Exception {\n\t\tcheckClient(\"Accept\").accept(\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").acceptCharset(\"UTF-8\").build().get(\"/headers\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").acceptEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").acceptLanguage(\"en\").build().get(\"/headers\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").authorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").cacheControl(\"none\").build().get(\"/headers\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").clientVersion(\"1\").build().get(\"/headers\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").connection(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").contentLength(123l).build().get(\"/headers\").run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").contentType(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").contentEncoding(\"identity\").build().get(\"/headers\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").date(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").expect(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").forwarded(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").from(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").host(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").ifMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").ifModifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").ifNoneMatch(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").ifRange(\"\\\"foo\\\"\").build().get(\"/headers\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").ifUnmodifiedSince(ZONEDDATETIME).build().get(\"/headers\").run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").maxForwards(10).build().get(\"/headers\").run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").noTrace().build().get(\"/headers\").run().assertBody().is(\"['true','true']\");\n\t\tcheckClient(\"Origin\").origin(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").pragma(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").proxyAuthorization(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").range(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").referer(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").te(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").userAgent(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").upgrade(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").via(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").warning(\"foo\").build().get(\"/headers\").run().assertBody().is(\"['foo']\");\n\n\t\tcheckClient(\"Accept\").build().get(\"/headers\").accept(\"text/plain\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept-Charset\").build().get(\"/headers\").acceptCharset(\"UTF-8\").run().assertBody().is(\"['UTF-8']\");\n\t\tcheckClient(\"Accept-Encoding\").build().get(\"/headers\").acceptEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Accept-Language\").build().get(\"/headers\").acceptLanguage(\"en\").run().assertBody().is(\"['en']\");\n\t\tcheckClient(\"Authorization\").build().get(\"/headers\").authorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Cache-Control\").build().get(\"/headers\").cacheControl(\"none\").run().assertBody().is(\"['none']\");\n\t\tcheckClient(\"Client-Version\").build().get(\"/headers\").clientVersion(\"1\").run().assertBody().is(\"['1']\");\n\t\tcheckClient(\"Connection\").build().get(\"/headers\").connection(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Length\").build().get(\"/headers\").contentLength(123l).run().assertBody().is(\"['123']\");\n\t\tcheckClient(\"Content-Type\").build().get(\"/headers\").contentType(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Content-Encoding\").build().get(\"/headers\").contentEncoding(\"identity\").run().assertBody().is(\"['identity']\");\n\t\tcheckClient(\"Date\").build().get(\"/headers\").date(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Expect\").build().get(\"/headers\").expect(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Forwarded\").build().get(\"/headers\").forwarded(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"From\").build().get(\"/headers\").from(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Host\").build().get(\"/headers\").hostHeader(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"If-Match\").build().get(\"/headers\").ifMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Modified-Since\").build().get(\"/headers\").ifModifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"If-None-Match\").build().get(\"/headers\").ifNoneMatch(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Range\").build().get(\"/headers\").ifRange(\"\\\"foo\\\"\").run().assertBody().is(\"['\\\"foo\\\"']\");\n\t\tcheckClient(\"If-Unmodified-Since\").build().get(\"/headers\").ifUnmodifiedSince(ZONEDDATETIME).run().assertBody().is(\"['\"+PARSEDZONEDDATETIME+\"']\");\n\t\tcheckClient(\"Max-Forwards\").build().get(\"/headers\").maxForwards(10).run().assertBody().is(\"['10']\");\n\t\tcheckClient(\"No-Trace\").build().get(\"/headers\").noTrace().run().assertBody().is(\"['true','true']\");\n\t\tcheckClient(\"Origin\").build().get(\"/headers\").origin(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Pragma\").build().get(\"/headers\").pragma(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Proxy-Authorization\").build().get(\"/headers\").proxyAuthorization(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Range\").build().get(\"/headers\").range(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Referer\").build().get(\"/headers\").referer(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"TE\").build().get(\"/headers\").te(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"User-Agent\").build().get(\"/headers\").userAgent(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Upgrade\").build().get(\"/headers\").upgrade(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Via\").build().get(\"/headers\").via(\"foo\").run().assertBody().is(\"['foo']\");\n\t\tcheckClient(\"Warning\").build().get(\"/headers\").warning(\"foo\").run().assertBody().is(\"['foo']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"},{"authorDate":"2021-08-22 00:17:39","commitOrder":10,"curCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/foo','text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","date":"2021-08-22 00:17:39","endLine":332,"groupId":"101761","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"b04_dontOverrideAccept","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/e9/c453625226b8ab120c1f551faf0f5ec1b90278.src","preCode":"\tpublic void b04_dontOverrideAccept() throws Exception {\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/plain\").build().get(\"/headers\").run().assertBody().is(\"['text/plain']\");\n\t\tcheckClient(\"Accept\").header(\"Accept\",\"text/foo\").build().get(\"/headers\").header(\"Accept\",\"text/plain\").run().assertBody().is(\"['text/foo','text/plain']\");\n\t\tRestClient rc = checkClient(\"Accept\").header(\"Accept\",\"text/foo\").build();\n\t\tRestRequest req = rc.get(\"/headers\");\n\t\treq.setHeader(\"Accept\",\"text/plain\");\n\t\treq.run().assertBody().is(\"['text/plain']\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Headers_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"N"}],"commitId":"931eb6417660d8f1ca05babd29f30e326d120a27","commitMessage":"@@@Context API refactoring.","date":"2021-09-24 03:39:17","modifiedFileCount":"6","status":"M","submitter":"JamesBognar"}]
