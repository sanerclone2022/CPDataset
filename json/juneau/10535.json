[{"authorTime":"2021-02-06 03:17:15","codes":[{"authorDate":"2021-02-06 03:17:15","commitOrder":1,"curCode":"\tpublic void testStrict() throws Exception {\n\t\tJsonParser p = JsonParser.DEFAULT_STRICT;\n\t\tif (name.contains(\"utf16LE\"))\n\t\t\tp = p.builder().streamCharset(Charset.forName(\"UTF-16LE\")).build();\n\t\telse if (name.contains(\"utf16BE\"))\n\t\t\tp = p.builder().streamCharset(Charset.forName(\"UTF-16BE\")).build();\n\n\t\t\r\n\t\tif (expected == 'y') {\n\t\t\tp.parse(json, Object.class);\n\n\t\t\r\n\t\t} else if (expected == 'n') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t\tfail(\"ParseException expected.  Test=\"+name+\", Input=\" + jsonReadable);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (IOException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getMessage(), e.getMessage().contains(errorText));\n\t\t\t} catch (AssertionError e) {\n\t\t\t\tthrow e;\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\n\t\t\r\n\t\t} else if (expected == 'i') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (IOException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getMessage(), e.getMessage().contains(errorText));\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\t\t}\n\t}\n","date":"2021-02-06 03:17:15","endLine":414,"groupId":"1087","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStrict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/51/e16c439ba655555720a1a255b40d74a48e6c6a.src","preCode":"\tpublic void testStrict() throws Exception {\n\t\tJsonParser p = JsonParser.DEFAULT_STRICT;\n\t\tif (name.contains(\"utf16LE\"))\n\t\t\tp = p.builder().streamCharset(Charset.forName(\"UTF-16LE\")).build();\n\t\telse if (name.contains(\"utf16BE\"))\n\t\t\tp = p.builder().streamCharset(Charset.forName(\"UTF-16BE\")).build();\n\n\t\t\r\n\t\tif (expected == 'y') {\n\t\t\tp.parse(json, Object.class);\n\n\t\t\r\n\t\t} else if (expected == 'n') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t\tfail(\"ParseException expected.  Test=\"+name+\", Input=\" + jsonReadable);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (IOException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getMessage(), e.getMessage().contains(errorText));\n\t\t\t} catch (AssertionError e) {\n\t\t\t\tthrow e;\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\n\t\t\r\n\t\t} else if (expected == 'i') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (IOException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getMessage(), e.getMessage().contains(errorText));\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\t\t}\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/json/JsonParserEdgeCasesTest.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":372,"status":"B"},{"authorDate":"2021-02-06 03:17:15","commitOrder":1,"curCode":"\tpublic void testLax() throws Exception {\n\t\tJsonParser p = JsonParser.DEFAULT;\n\t\tif (name.contains(\"utf16LE\"))\n\t\t\tp = p.builder().streamCharset(Charset.forName(\"UTF-16LE\")).build();\n\t\telse if (name.contains(\"utf16BE\"))\n\t\t\tp = p.builder().streamCharset(Charset.forName(\"UTF-16BE\")).build();\n\n\t\t\r\n\t\tif (expected == 'y') {\n\t\t\tp.parse(json, Object.class);\n\n\t\t\r\n\t\t} else if (expected == 'n') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t\t\r\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (AssertionError e) {\n\t\t\t\tthrow e;\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\n\t\t\r\n\t\t} else if (expected == 'i') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\t\t}\n\t}\n","date":"2021-02-06 03:17:15","endLine":453,"groupId":"2237","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLax","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/51/e16c439ba655555720a1a255b40d74a48e6c6a.src","preCode":"\tpublic void testLax() throws Exception {\n\t\tJsonParser p = JsonParser.DEFAULT;\n\t\tif (name.contains(\"utf16LE\"))\n\t\t\tp = p.builder().streamCharset(Charset.forName(\"UTF-16LE\")).build();\n\t\telse if (name.contains(\"utf16BE\"))\n\t\t\tp = p.builder().streamCharset(Charset.forName(\"UTF-16BE\")).build();\n\n\t\t\r\n\t\tif (expected == 'y') {\n\t\t\tp.parse(json, Object.class);\n\n\t\t\r\n\t\t} else if (expected == 'n') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t\t\r\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (AssertionError e) {\n\t\t\t\tthrow e;\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\n\t\t\r\n\t\t} else if (expected == 'i') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\t\t}\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/json/JsonParserEdgeCasesTest.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"B"}],"commitId":"be23bff717ddb90a892c743156f56c11bd5bceee","commitMessage":"@@@Move unit tests into a single top-level project.","date":"2021-02-06 03:17:15","modifiedFileCount":"0","status":"B","submitter":"JamesBognar"},{"authorTime":"2021-03-09 01:55:14","codes":[{"authorDate":"2021-03-09 01:55:14","commitOrder":2,"curCode":"\tpublic void testStrict() throws Exception {\n\t\tJsonParser p = JsonParser.DEFAULT_STRICT;\n\t\tif (name.contains(\"utf16LE\"))\n\t\t\tp = p.copy().streamCharset(Charset.forName(\"UTF-16LE\")).build();\n\t\telse if (name.contains(\"utf16BE\"))\n\t\t\tp = p.copy().streamCharset(Charset.forName(\"UTF-16BE\")).build();\n\n\t\t\r\n\t\tif (expected == 'y') {\n\t\t\tp.parse(json, Object.class);\n\n\t\t\r\n\t\t} else if (expected == 'n') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t\tfail(\"ParseException expected.  Test=\"+name+\", Input=\" + jsonReadable);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (IOException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getMessage(), e.getMessage().contains(errorText));\n\t\t\t} catch (AssertionError e) {\n\t\t\t\tthrow e;\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\n\t\t\r\n\t\t} else if (expected == 'i') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (IOException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getMessage(), e.getMessage().contains(errorText));\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\t\t}\n\t}\n","date":"2021-03-09 01:55:14","endLine":414,"groupId":"10535","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStrict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/88/2b6e2679e97e05554e7d182313ef282aeb1d5d.src","preCode":"\tpublic void testStrict() throws Exception {\n\t\tJsonParser p = JsonParser.DEFAULT_STRICT;\n\t\tif (name.contains(\"utf16LE\"))\n\t\t\tp = p.builder().streamCharset(Charset.forName(\"UTF-16LE\")).build();\n\t\telse if (name.contains(\"utf16BE\"))\n\t\t\tp = p.builder().streamCharset(Charset.forName(\"UTF-16BE\")).build();\n\n\t\t\r\n\t\tif (expected == 'y') {\n\t\t\tp.parse(json, Object.class);\n\n\t\t\r\n\t\t} else if (expected == 'n') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t\tfail(\"ParseException expected.  Test=\"+name+\", Input=\" + jsonReadable);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (IOException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getMessage(), e.getMessage().contains(errorText));\n\t\t\t} catch (AssertionError e) {\n\t\t\t\tthrow e;\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\n\t\t\r\n\t\t} else if (expected == 'i') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (IOException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getMessage(), e.getMessage().contains(errorText));\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\t\t}\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/json/JsonParserEdgeCasesTest.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":372,"status":"M"},{"authorDate":"2021-03-09 01:55:14","commitOrder":2,"curCode":"\tpublic void testLax() throws Exception {\n\t\tJsonParser p = JsonParser.DEFAULT;\n\t\tif (name.contains(\"utf16LE\"))\n\t\t\tp = p.copy().streamCharset(Charset.forName(\"UTF-16LE\")).build();\n\t\telse if (name.contains(\"utf16BE\"))\n\t\t\tp = p.copy().streamCharset(Charset.forName(\"UTF-16BE\")).build();\n\n\t\t\r\n\t\tif (expected == 'y') {\n\t\t\tp.parse(json, Object.class);\n\n\t\t\r\n\t\t} else if (expected == 'n') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t\t\r\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (AssertionError e) {\n\t\t\t\tthrow e;\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\n\t\t\r\n\t\t} else if (expected == 'i') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\t\t}\n\t}\n","date":"2021-03-09 01:55:14","endLine":453,"groupId":"10535","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLax","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/88/2b6e2679e97e05554e7d182313ef282aeb1d5d.src","preCode":"\tpublic void testLax() throws Exception {\n\t\tJsonParser p = JsonParser.DEFAULT;\n\t\tif (name.contains(\"utf16LE\"))\n\t\t\tp = p.builder().streamCharset(Charset.forName(\"UTF-16LE\")).build();\n\t\telse if (name.contains(\"utf16BE\"))\n\t\t\tp = p.builder().streamCharset(Charset.forName(\"UTF-16BE\")).build();\n\n\t\t\r\n\t\tif (expected == 'y') {\n\t\t\tp.parse(json, Object.class);\n\n\t\t\r\n\t\t} else if (expected == 'n') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t\t\r\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (AssertionError e) {\n\t\t\t\tthrow e;\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\n\t\t\r\n\t\t} else if (expected == 'i') {\n\t\t\ttry {\n\t\t\t\tp.parse(json, Object.class);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tif (errorText != null)\n\t\t\t\t\tassertTrue(\"Got ParseException but didn't contain expected text '\"+errorText+\"'.  Test=\"+name+\", Input=\" + jsonReadable + \", Message=\" + e.getRootCause().getMessage(), e.getRootCause().getMessage().contains(errorText));\n\t\t\t} catch (Throwable t) {\n\t\t\t\tfail(\"Expected ParseException.  Test=\"+name+\", Input=\" + jsonReadable + \", Exception=\" + t.getClass().getName() + \",\" +t.getLocalizedMessage());\n\t\t\t}\n\t\t}\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/json/JsonParserEdgeCasesTest.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"M"}],"commitId":"f92adc791d652f4d4c14d544762dc3f940b53b07","commitMessage":"@@@Standardize builder-based copy constructors.","date":"2021-03-09 01:55:14","modifiedFileCount":"231","status":"M","submitter":"JamesBognar"}]
