[{"authorTime":"2021-03-06 04:05:02","codes":[{"authorDate":"2021-02-17 22:56:56","commitOrder":4,"curCode":"\tpublic void a01_BasicHttpResource() throws Exception {\n\t\tBasicHttpResource x1 = httpResource(\"foo\");\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").doesNotExist()\n\t\t\t.assertHeader(\"X-Content-Type\").doesNotExist()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x2 = httpResource(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\");\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x3 = httpResource(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").doesNotExist()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tBasicHttpResource x4 = new BasicHttpResource(\"foo\", contentType(\"text/plain\"), contentEncoding(\"identity\"));\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x5 = httpResource(\"foo\").header(\"Foo\",\"bar\").header(header(\"Baz\",\"qux\"));\n\t\tclient().build().post(\"/\",x5).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tBasicHttpResource x6 = httpResource(\"foo\").headers(Arrays.asList(header(\"Foo\",\"bar\"),header(\"Baz\",\"qux\")));\n\t\tclient().build().post(\"/\",x6).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tBasicHttpResource x7 = httpResource(new StringReader(\"foo\"));\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tBasicHttpResource x8 = httpResource(new StringReader(\"foo\")).cache();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tBasicHttpResource x9 = httpResource(null);\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\t}\n","date":"2021-02-17 22:56:56","endLine":104,"groupId":"2162","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"a01_BasicHttpResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/f6/94ebfd8e13cb93eeb34a0e4e23b9518bc846be.src","preCode":"\tpublic void a01_BasicHttpResource() throws Exception {\n\t\tBasicHttpResource x1 = httpResource(\"foo\");\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").doesNotExist()\n\t\t\t.assertHeader(\"X-Content-Type\").doesNotExist()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x2 = httpResource(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\");\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x3 = httpResource(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").doesNotExist()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tBasicHttpResource x4 = new BasicHttpResource(\"foo\", contentType(\"text/plain\"), contentEncoding(\"identity\"));\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x5 = httpResource(\"foo\").header(\"Foo\",\"bar\").header(header(\"Baz\",\"qux\"));\n\t\tclient().build().post(\"/\",x5).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tBasicHttpResource x6 = httpResource(\"foo\").headers(Arrays.asList(header(\"Foo\",\"bar\"),header(\"Baz\",\"qux\")));\n\t\tclient().build().post(\"/\",x6).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tBasicHttpResource x7 = httpResource(new StringReader(\"foo\"));\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tBasicHttpResource x8 = httpResource(new StringReader(\"foo\")).cache();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tBasicHttpResource x9 = httpResource(null);\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Body_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"NB"},{"authorDate":"2021-03-06 04:05:02","commitOrder":4,"curCode":"\tpublic void a02_StringEntity() throws Exception {\n\t\tHttpEntity x1 = stringEntity(\"foo\");\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").doesNotExist()\n\t\t\t.assertHeader(\"X-Content-Type\").doesNotExist()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x2 = stringEntity(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\");\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x3 = stringEntity(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").doesNotExist()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpEntity x4 = stringEntity(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\");\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x7 = readerEntity(new StringReader(\"foo\"));\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x8 = readerEntity(new StringReader(\"foo\")).cache();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x9 = readerEntity(null);\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\n\t\tAbstractHttpEntity x12 = stringEntity(\"foo\");\n\t\tx12.assertString().is(\"foo\");\n\t\tx12.assertBytes().asString().is(\"foo\");\n\t}\n","date":"2021-03-06 04:05:02","endLine":154,"groupId":"6696","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"a02_StringEntity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/54/dcedf0e18c16c9e0171729b131eb5ca816fb91.src","preCode":"\tpublic void a02_StringEntity() throws Exception {\n\t\tHttpEntity x1 = stringEntity(\"foo\");\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").doesNotExist()\n\t\t\t.assertHeader(\"X-Content-Type\").doesNotExist()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x2 = stringEntity(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\");\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x3 = stringEntity(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").doesNotExist()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpEntity x4 = stringEntity(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\");\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x7 = readerEntity(new StringReader(\"foo\"));\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x8 = readerEntity(new StringReader(\"foo\")).cache();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x9 = readerEntity(null);\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\n\t\tAbstractHttpEntity x12 = stringEntity(\"foo\");\n\t\tx12.assertString().is(\"foo\");\n\t\tx12.assertBytes().asString().is(\"foo\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Body_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"}],"commitId":"d063c8d02b8006bb239d02090cd9c45e50e2286d","commitMessage":"@@@REST refactoring.","date":"2021-03-06 04:05:02","modifiedFileCount":"16","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-03-06 23:03:41","codes":[{"authorDate":"2021-02-17 22:56:56","commitOrder":5,"curCode":"\tpublic void a01_BasicHttpResource() throws Exception {\n\t\tBasicHttpResource x1 = httpResource(\"foo\");\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").doesNotExist()\n\t\t\t.assertHeader(\"X-Content-Type\").doesNotExist()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x2 = httpResource(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\");\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x3 = httpResource(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").doesNotExist()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tBasicHttpResource x4 = new BasicHttpResource(\"foo\", contentType(\"text/plain\"), contentEncoding(\"identity\"));\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x5 = httpResource(\"foo\").header(\"Foo\",\"bar\").header(header(\"Baz\",\"qux\"));\n\t\tclient().build().post(\"/\",x5).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tBasicHttpResource x6 = httpResource(\"foo\").headers(Arrays.asList(header(\"Foo\",\"bar\"),header(\"Baz\",\"qux\")));\n\t\tclient().build().post(\"/\",x6).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tBasicHttpResource x7 = httpResource(new StringReader(\"foo\"));\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tBasicHttpResource x8 = httpResource(new StringReader(\"foo\")).cache();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tBasicHttpResource x9 = httpResource(null);\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\t}\n","date":"2021-02-17 22:56:56","endLine":104,"groupId":"2162","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"a01_BasicHttpResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/f6/94ebfd8e13cb93eeb34a0e4e23b9518bc846be.src","preCode":"\tpublic void a01_BasicHttpResource() throws Exception {\n\t\tBasicHttpResource x1 = httpResource(\"foo\");\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").doesNotExist()\n\t\t\t.assertHeader(\"X-Content-Type\").doesNotExist()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x2 = httpResource(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\");\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x3 = httpResource(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").doesNotExist()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tBasicHttpResource x4 = new BasicHttpResource(\"foo\", contentType(\"text/plain\"), contentEncoding(\"identity\"));\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x5 = httpResource(\"foo\").header(\"Foo\",\"bar\").header(header(\"Baz\",\"qux\"));\n\t\tclient().build().post(\"/\",x5).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tBasicHttpResource x6 = httpResource(\"foo\").headers(Arrays.asList(header(\"Foo\",\"bar\"),header(\"Baz\",\"qux\")));\n\t\tclient().build().post(\"/\",x6).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tBasicHttpResource x7 = httpResource(new StringReader(\"foo\"));\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tBasicHttpResource x8 = httpResource(new StringReader(\"foo\")).cache();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tBasicHttpResource x9 = httpResource(null);\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Body_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2021-03-06 23:03:41","commitOrder":5,"curCode":"\tpublic void a02_StringEntity() throws Exception {\n\t\tHttpEntity x1 = stringEntity(\"foo\").build();\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").doesNotExist()\n\t\t\t.assertHeader(\"X-Content-Type\").doesNotExist()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x2 = stringEntity(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x3 = stringEntity(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked().build();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").doesNotExist()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpEntity x4 = stringEntity(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x7 = readerEntity(new StringReader(\"foo\")).build();\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x8 = readerEntity(new StringReader(\"foo\")).cached().build();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x9 = readerEntity(null).build();\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\n\t\tBasicHttpEntity2 x12 = stringEntity(\"foo\").build();\n\t\tx12.assertString().is(\"foo\");\n\t\tx12.assertBytes().asString().is(\"foo\");\n\t}\n","date":"2021-03-06 23:03:41","endLine":154,"groupId":"9436","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"a02_StringEntity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/24/0bde0a9138075d164476da645eae85f218e92e.src","preCode":"\tpublic void a02_StringEntity() throws Exception {\n\t\tHttpEntity x1 = stringEntity(\"foo\");\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").doesNotExist()\n\t\t\t.assertHeader(\"X-Content-Type\").doesNotExist()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x2 = stringEntity(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\");\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x3 = stringEntity(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").doesNotExist()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpEntity x4 = stringEntity(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\");\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x7 = readerEntity(new StringReader(\"foo\"));\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x8 = readerEntity(new StringReader(\"foo\")).cache();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x9 = readerEntity(null);\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\n\t\tAbstractHttpEntity x12 = stringEntity(\"foo\");\n\t\tx12.assertString().is(\"foo\");\n\t\tx12.assertBytes().asString().is(\"foo\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Body_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"}],"commitId":"2e7ac7a78d6313d3ccae2e90e1dc450051c2799f","commitMessage":"@@@REST refactoring.","date":"2021-03-06 23:03:41","modifiedFileCount":"13","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-03-08 23:07:38","codes":[{"authorDate":"2021-03-08 23:07:38","commitOrder":6,"curCode":"\tpublic void a01_BasicHttpResource() throws Exception {\n\t\tHttpResource x1 = stringResource(\"foo\").build();\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").doesNotExist()\n\t\t\t.assertHeader(\"X-Content-Type\").doesNotExist()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpResource x2 = stringResource(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpResource x3 = stringResource(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked().build();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").doesNotExist()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpResource x4 = stringResource(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpResource x5 = stringResource(\"foo\").header(\"Foo\",\"bar\").header(header(\"Baz\",\"qux\")).build();\n\t\tclient().build().post(\"/\",x5).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tHttpResource x6 = stringResource(\"foo\").headers(Arrays.asList(header(\"Foo\",\"bar\"),header(\"Baz\",\"qux\"))).build();\n\t\tclient().build().post(\"/\",x6).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tHttpResource x7 = readerResource(new StringReader(\"foo\")).build();\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpResource x8 = readerResource(new StringReader(\"foo\")).cached().build();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpResource x9 = readerResource(null).build();\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\t}\n","date":"2021-03-08 23:07:38","endLine":106,"groupId":"9436","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"a01_BasicHttpResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/b8/9da044b0a6eec3ab038089c6128b2986ba7c35.src","preCode":"\tpublic void a01_BasicHttpResource() throws Exception {\n\t\tBasicHttpResource x1 = httpResource(\"foo\");\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").doesNotExist()\n\t\t\t.assertHeader(\"X-Content-Type\").doesNotExist()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x2 = httpResource(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\");\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x3 = httpResource(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").doesNotExist()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tBasicHttpResource x4 = new BasicHttpResource(\"foo\", contentType(\"text/plain\"), contentEncoding(\"identity\"));\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tBasicHttpResource x5 = httpResource(\"foo\").header(\"Foo\",\"bar\").header(header(\"Baz\",\"qux\"));\n\t\tclient().build().post(\"/\",x5).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tBasicHttpResource x6 = httpResource(\"foo\").headers(Arrays.asList(header(\"Foo\",\"bar\"),header(\"Baz\",\"qux\")));\n\t\tclient().build().post(\"/\",x6).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tBasicHttpResource x7 = httpResource(new StringReader(\"foo\"));\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tBasicHttpResource x8 = httpResource(new StringReader(\"foo\")).cache();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tBasicHttpResource x9 = httpResource(null);\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Body_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2021-03-08 23:07:38","commitOrder":6,"curCode":"\tpublic void a02_StringEntity() throws Exception {\n\t\tHttpEntity x1 = stringEntity(\"foo\").build();\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").doesNotExist()\n\t\t\t.assertHeader(\"X-Content-Type\").doesNotExist()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x2 = stringEntity(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x3 = stringEntity(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked().build();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").doesNotExist()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpEntity x4 = stringEntity(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x7 = readerEntity(new StringReader(\"foo\")).build();\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x8 = readerEntity(new StringReader(\"foo\")).cached().build();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x9 = readerEntity(null).build();\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\n\t\tBasicHttpEntity x12 = stringEntity(\"foo\").build();\n\t\tx12.assertString().is(\"foo\");\n\t\tx12.assertBytes().asString().is(\"foo\");\n\t}\n","date":"2021-03-08 23:07:38","endLine":155,"groupId":"9436","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"a02_StringEntity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/b8/9da044b0a6eec3ab038089c6128b2986ba7c35.src","preCode":"\tpublic void a02_StringEntity() throws Exception {\n\t\tHttpEntity x1 = stringEntity(\"foo\").build();\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").doesNotExist()\n\t\t\t.assertHeader(\"X-Content-Type\").doesNotExist()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x2 = stringEntity(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x3 = stringEntity(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked().build();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").doesNotExist()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpEntity x4 = stringEntity(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x7 = readerEntity(new StringReader(\"foo\")).build();\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x8 = readerEntity(new StringReader(\"foo\")).cached().build();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x9 = readerEntity(null).build();\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\n\t\tBasicHttpEntity2 x12 = stringEntity(\"foo\").build();\n\t\tx12.assertString().is(\"foo\");\n\t\tx12.assertBytes().asString().is(\"foo\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Body_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"8fa646e2c1771e0306393b6b4a77381d34f08ad5","commitMessage":"@@@REST refactoring.","date":"2021-03-08 23:07:38","modifiedFileCount":"24","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-07-17 21:35:04","codes":[{"authorDate":"2021-07-17 21:35:04","commitOrder":7,"curCode":"\tpublic void a01_BasicHttpResource() throws Exception {\n\t\tHttpResource x1 = stringResource(\"foo\").build();\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").isNull()\n\t\t\t.assertHeader(\"X-Content-Type\").isNull()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpResource x2 = stringResource(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpResource x3 = stringResource(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked().build();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").isNull()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpResource x4 = stringResource(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpResource x5 = stringResource(\"foo\").header(\"Foo\",\"bar\").header(header(\"Baz\",\"qux\")).build();\n\t\tclient().build().post(\"/\",x5).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tHttpResource x6 = stringResource(\"foo\").headers(Arrays.asList(header(\"Foo\",\"bar\"),header(\"Baz\",\"qux\"))).build();\n\t\tclient().build().post(\"/\",x6).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tHttpResource x7 = readerResource(new StringReader(\"foo\")).build();\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpResource x8 = readerResource(new StringReader(\"foo\")).cached().build();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpResource x9 = readerResource(null).build();\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\t}\n","date":"2021-07-17 21:35:04","endLine":106,"groupId":"7860","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"a01_BasicHttpResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/93/a5290550e3e3f1fbfe720b006bea66a34b57f5.src","preCode":"\tpublic void a01_BasicHttpResource() throws Exception {\n\t\tHttpResource x1 = stringResource(\"foo\").build();\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").doesNotExist()\n\t\t\t.assertHeader(\"X-Content-Type\").doesNotExist()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpResource x2 = stringResource(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpResource x3 = stringResource(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked().build();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").doesNotExist()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpResource x4 = stringResource(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpResource x5 = stringResource(\"foo\").header(\"Foo\",\"bar\").header(header(\"Baz\",\"qux\")).build();\n\t\tclient().build().post(\"/\",x5).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tHttpResource x6 = stringResource(\"foo\").headers(Arrays.asList(header(\"Foo\",\"bar\"),header(\"Baz\",\"qux\"))).build();\n\t\tclient().build().post(\"/\",x6).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tHttpResource x7 = readerResource(new StringReader(\"foo\")).build();\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpResource x8 = readerResource(new StringReader(\"foo\")).cached().build();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpResource x9 = readerResource(null).build();\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Body_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2021-07-17 21:35:04","commitOrder":7,"curCode":"\tpublic void a02_StringEntity() throws Exception {\n\t\tHttpEntity x1 = stringEntity(\"foo\").build();\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").isNull()\n\t\t\t.assertHeader(\"X-Content-Type\").isNull()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpEntity x2 = stringEntity(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpEntity x3 = stringEntity(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked().build();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").isNull()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpEntity x4 = stringEntity(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpEntity x7 = readerEntity(new StringReader(\"foo\")).build();\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x8 = readerEntity(new StringReader(\"foo\")).cached().build();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x9 = readerEntity(null).build();\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\n\t\tBasicHttpEntity x12 = stringEntity(\"foo\").build();\n\t\tx12.assertString().is(\"foo\");\n\t\tx12.assertBytes().asString().is(\"foo\");\n\t}\n","date":"2021-07-17 21:35:04","endLine":155,"groupId":"7862","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"a02_StringEntity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/93/a5290550e3e3f1fbfe720b006bea66a34b57f5.src","preCode":"\tpublic void a02_StringEntity() throws Exception {\n\t\tHttpEntity x1 = stringEntity(\"foo\").build();\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").doesNotExist()\n\t\t\t.assertHeader(\"X-Content-Type\").doesNotExist()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x2 = stringEntity(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x3 = stringEntity(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked().build();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").doesNotExist()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpEntity x4 = stringEntity(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").doesNotExist()\n\t\t;\n\n\t\tHttpEntity x7 = readerEntity(new StringReader(\"foo\")).build();\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x8 = readerEntity(new StringReader(\"foo\")).cached().build();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x9 = readerEntity(null).build();\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\n\t\tBasicHttpEntity x12 = stringEntity(\"foo\").build();\n\t\tx12.assertString().is(\"foo\");\n\t\tx12.assertBytes().asString().is(\"foo\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Body_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"0e2b81b7d24d9455b0e424298f970ea59ecd26c2","commitMessage":"@@@JUnit tests.","date":"2021-07-17 21:35:04","modifiedFileCount":"41","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-07-23 23:49:36","codes":[{"authorDate":"2021-07-23 23:49:36","commitOrder":8,"curCode":"\tpublic void a01_BasicHttpResource() throws Exception {\n\t\tHttpResource x1 = stringResource(\"foo\").build();\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").isNull()\n\t\t\t.assertHeader(\"X-Content-Type\").isNull()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpResource x2 = stringResource(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpResource x3 = stringResource(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked().build();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").isNull()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpResource x4 = stringResource(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpResource x5 = stringResource(\"foo\").header(\"Foo\",\"bar\").header(header(\"Baz\",\"qux\")).build();\n\t\tclient().build().post(\"/\",x5).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tHttpResource x6 = stringResource(\"foo\").headers(Arrays.asList(header(\"Foo\",\"bar\"),header(\"Baz\",\"qux\"))).build();\n\t\tclient().build().post(\"/\",x6).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tHttpResource x7 = readerResource(reader(\"foo\")).build();\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpResource x8 = readerResource(reader(\"foo\")).cached().build();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpResource x9 = readerResource(null).build();\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\t}\n","date":"2021-07-23 23:49:36","endLine":107,"groupId":"101762","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"a01_BasicHttpResource","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/86/16173fe6a4e346da2e7c75436c9106424b5c7e.src","preCode":"\tpublic void a01_BasicHttpResource() throws Exception {\n\t\tHttpResource x1 = stringResource(\"foo\").build();\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").isNull()\n\t\t\t.assertHeader(\"X-Content-Type\").isNull()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpResource x2 = stringResource(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpResource x3 = stringResource(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked().build();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").isNull()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpResource x4 = stringResource(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpResource x5 = stringResource(\"foo\").header(\"Foo\",\"bar\").header(header(\"Baz\",\"qux\")).build();\n\t\tclient().build().post(\"/\",x5).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tHttpResource x6 = stringResource(\"foo\").headers(Arrays.asList(header(\"Foo\",\"bar\"),header(\"Baz\",\"qux\"))).build();\n\t\tclient().build().post(\"/\",x6).run()\n\t\t\t.assertHeader(\"X-Foo\").is(\"bar\")\n\t\t\t.assertHeader(\"X-Baz\").is(\"qux\")\n\t\t;\n\n\t\tHttpResource x7 = readerResource(new StringReader(\"foo\")).build();\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpResource x8 = readerResource(new StringReader(\"foo\")).cached().build();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpResource x9 = readerResource(null).build();\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Body_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2021-07-23 23:49:36","commitOrder":8,"curCode":"\tpublic void a02_StringEntity() throws Exception {\n\t\tHttpEntity x1 = stringEntity(\"foo\").build();\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").isNull()\n\t\t\t.assertHeader(\"X-Content-Type\").isNull()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpEntity x2 = stringEntity(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpEntity x3 = stringEntity(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked().build();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").isNull()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpEntity x4 = stringEntity(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpEntity x7 = readerEntity(reader(\"foo\")).build();\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x8 = readerEntity(reader(\"foo\")).cached().build();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x9 = readerEntity(null).build();\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\n\t\tBasicHttpEntity x12 = stringEntity(\"foo\").build();\n\t\tx12.assertString().is(\"foo\");\n\t\tx12.assertBytes().asString().is(\"foo\");\n\t}\n","date":"2021-07-23 23:49:36","endLine":156,"groupId":"101762","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"a02_StringEntity","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/86/16173fe6a4e346da2e7c75436c9106424b5c7e.src","preCode":"\tpublic void a02_StringEntity() throws Exception {\n\t\tHttpEntity x1 = stringEntity(\"foo\").build();\n\t\tclient().build().post(\"/\", x1).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").isNull()\n\t\t\t.assertHeader(\"X-Content-Type\").isNull()\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpEntity x2 = stringEntity(\"foo\").contentType(\"text/plain\").contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x2).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpEntity x3 = stringEntity(\"foo\").contentType(contentType(\"text/plain\")).contentEncoding(contentEncoding(\"identity\")).chunked().build();\n\t\tclient().build().post(\"/\",x3).run()\n\t\t\t.assertHeader(\"X-Content-Length\").isNull()  \r\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").is(\"chunked\")\n\t\t;\n\n\t\tHttpEntity x4 = stringEntity(\"foo\", contentType(\"text/plain\")).contentEncoding(\"identity\").build();\n\t\tclient().build().post(\"/\",x4).run()\n\t\t\t.assertHeader(\"X-Content-Length\").asInteger().is(3)\n\t\t\t.assertHeader(\"X-Content-Encoding\").is(\"identity\")\n\t\t\t.assertHeader(\"X-Content-Type\").is(\"text/plain\")\n\t\t\t.assertHeader(\"X-Transfer-Encoding\").isNull()\n\t\t;\n\n\t\tHttpEntity x7 = readerEntity(new StringReader(\"foo\")).build();\n\t\tclient().build().post(\"/\",x7).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x8 = readerEntity(new StringReader(\"foo\")).cached().build();\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\t\tclient().build().post(\"/\",x8).run().assertBody().is(\"foo\");\n\n\t\tHttpEntity x9 = readerEntity(null).build();\n\t\tclient().build().post(\"/\",x9).run().assertBody().isEmpty();\n\n\t\tBasicHttpEntity x12 = stringEntity(\"foo\").build();\n\t\tx12.assertString().is(\"foo\");\n\t\tx12.assertBytes().asString().is(\"foo\");\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/rest/client/RestClient_Body_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"2284c5fc7c2b952899810997ef3797acb027f40d","commitMessage":"@@@Unit tests.","date":"2021-07-23 23:49:36","modifiedFileCount":"95","status":"M","submitter":"JamesBognar"}]
