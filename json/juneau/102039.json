[{"authorTime":"2021-02-06 03:17:15","codes":[{"authorDate":"2021-02-06 03:17:15","commitOrder":1,"curCode":"\tpublic void testMergeWithOverwriteNoSignal() throws Exception {\n\n\t\tfinal Queue<String> contents = new ConcurrentLinkedQueue<>();\n\t\tcontents.add(\"[S1]\\nk1 = v1a\");\n\t\tcontents.add(\"[S1]\\nk1 = v1b\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(null) {\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn contents.poll();\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(2);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"['SET(S1/k1 = v1b)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1c)']\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asJson().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tcm.commit();\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","date":"2021-02-06 03:17:15","endLine":513,"groupId":"3883","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeWithOverwriteNoSignal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/7f/9cf0553a7bd12a8b493e1a905352b5769e97fd.src","preCode":"\tpublic void testMergeWithOverwriteNoSignal() throws Exception {\n\n\t\tfinal Queue<String> contents = new ConcurrentLinkedQueue<>();\n\t\tcontents.add(\"[S1]\\nk1 = v1a\");\n\t\tcontents.add(\"[S1]\\nk1 = v1b\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(null) {\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn contents.poll();\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(2);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"['SET(S1/k1 = v1b)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1c)']\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asJson().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tcm.commit();\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/config/ConfigMapListenerTest.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"B"},{"authorDate":"2021-02-06 03:17:15","commitOrder":1,"curCode":"\tpublic void testMergeWithConstantlyUpdatingFile() throws Exception {\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(null) {\n\t\t\tchar c = 'a';\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn \"[S1]\\nk1 = v1\" + (c++);\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(10);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"['SET(S1/k1 = v1b)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1c)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1d)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1e)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1f)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1g)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1h)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1i)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1j)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1k)']\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asJson().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tassertThrown(()->cm.commit()).is(\"Unable to store contents of config to store.\");\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","date":"2021-02-06 03:17:15","endLine":559,"groupId":"1160","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeWithConstantlyUpdatingFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/7f/9cf0553a7bd12a8b493e1a905352b5769e97fd.src","preCode":"\tpublic void testMergeWithConstantlyUpdatingFile() throws Exception {\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(null) {\n\t\t\tchar c = 'a';\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn \"[S1]\\nk1 = v1\" + (c++);\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(10);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"['SET(S1/k1 = v1b)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1c)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1d)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1e)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1f)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1g)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1h)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1i)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1j)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1k)']\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asJson().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tassertThrown(()->cm.commit()).is(\"Unable to store contents of config to store.\");\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/config/ConfigMapListenerTest.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"B"}],"commitId":"be23bff717ddb90a892c743156f56c11bd5bceee","commitMessage":"@@@Move unit tests into a single top-level project.","date":"2021-02-06 03:17:15","modifiedFileCount":"0","status":"B","submitter":"JamesBognar"},{"authorTime":"2021-02-23 22:39:41","codes":[{"authorDate":"2021-02-23 22:39:41","commitOrder":2,"curCode":"\tpublic void testMergeWithOverwriteNoSignal() throws Exception {\n\n\t\tfinal Queue<String> contents = new ConcurrentLinkedQueue<>();\n\t\tcontents.add(\"[S1]\\nk1 = v1a\");\n\t\tcontents.add(\"[S1]\\nk1 = v1b\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(null) {\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn contents.poll();\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(2);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"[SET(S1/k1 = v1b)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1c)]\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asString().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tcm.commit();\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","date":"2021-02-23 22:39:41","endLine":513,"groupId":"3883","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeWithOverwriteNoSignal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/1e/ab908095a287c5a43171ebe4a36653c399b17f.src","preCode":"\tpublic void testMergeWithOverwriteNoSignal() throws Exception {\n\n\t\tfinal Queue<String> contents = new ConcurrentLinkedQueue<>();\n\t\tcontents.add(\"[S1]\\nk1 = v1a\");\n\t\tcontents.add(\"[S1]\\nk1 = v1b\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(null) {\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn contents.poll();\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(2);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"['SET(S1/k1 = v1b)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1c)']\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asJson().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tcm.commit();\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/config/ConfigMapListenerTest.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"M"},{"authorDate":"2021-02-23 22:39:41","commitOrder":2,"curCode":"\tpublic void testMergeWithConstantlyUpdatingFile() throws Exception {\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(null) {\n\t\t\tchar c = 'a';\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn \"[S1]\\nk1 = v1\" + (c++);\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(10);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"[SET(S1/k1 = v1b)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1c)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1d)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1e)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1f)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1g)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1h)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1i)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1j)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1k)]\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asString().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tassertThrown(()->cm.commit()).is(\"Unable to store contents of config to store.\");\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","date":"2021-02-23 22:39:41","endLine":559,"groupId":"3886","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeWithConstantlyUpdatingFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/1e/ab908095a287c5a43171ebe4a36653c399b17f.src","preCode":"\tpublic void testMergeWithConstantlyUpdatingFile() throws Exception {\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(null) {\n\t\t\tchar c = 'a';\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn \"[S1]\\nk1 = v1\" + (c++);\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(10);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"['SET(S1/k1 = v1b)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1c)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1d)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1e)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1f)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1g)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1h)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1i)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1j)']\");\n\t\t\teventList.add(\"['SET(S1/k1 = v1k)']\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asJson().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tassertThrown(()->cm.commit()).is(\"Unable to store contents of config to store.\");\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/config/ConfigMapListenerTest.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"M"}],"commitId":"5b4ebb47fcfb37d29a598d1439805fb0acf10db9","commitMessage":"@@@Clean up unnecessary @BeanIgnore annotations.","date":"2021-02-23 22:39:41","modifiedFileCount":"31","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-07-13 21:53:16","codes":[{"authorDate":"2021-02-23 22:39:41","commitOrder":3,"curCode":"\tpublic void testMergeWithOverwriteNoSignal() throws Exception {\n\n\t\tfinal Queue<String> contents = new ConcurrentLinkedQueue<>();\n\t\tcontents.add(\"[S1]\\nk1 = v1a\");\n\t\tcontents.add(\"[S1]\\nk1 = v1b\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(null) {\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn contents.poll();\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(2);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"[SET(S1/k1 = v1b)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1c)]\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asString().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tcm.commit();\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","date":"2021-02-23 22:39:41","endLine":513,"groupId":"3883","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeWithOverwriteNoSignal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/1e/ab908095a287c5a43171ebe4a36653c399b17f.src","preCode":"\tpublic void testMergeWithOverwriteNoSignal() throws Exception {\n\n\t\tfinal Queue<String> contents = new ConcurrentLinkedQueue<>();\n\t\tcontents.add(\"[S1]\\nk1 = v1a\");\n\t\tcontents.add(\"[S1]\\nk1 = v1b\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(null) {\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn contents.poll();\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(2);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"[SET(S1/k1 = v1b)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1c)]\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asString().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tcm.commit();\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/config/ConfigMapListenerTest.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"N"},{"authorDate":"2021-07-13 21:53:16","commitOrder":3,"curCode":"\tpublic void testMergeWithConstantlyUpdatingFile() throws Exception {\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(null) {\n\t\t\tchar c = 'a';\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn \"[S1]\\nk1 = v1\" + (c++);\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(10);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"[SET(S1/k1 = v1b)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1c)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1d)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1e)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1f)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1g)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1h)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1i)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1j)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1k)]\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asString().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tassertThrown(()->cm.commit()).message().is(\"Unable to store contents of config to store.\");\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","date":"2021-07-13 21:53:16","endLine":559,"groupId":"3886","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeWithConstantlyUpdatingFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/3d/4fbd40d885207925ed7923119fe1643ba94937.src","preCode":"\tpublic void testMergeWithConstantlyUpdatingFile() throws Exception {\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(null) {\n\t\t\tchar c = 'a';\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn \"[S1]\\nk1 = v1\" + (c++);\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(10);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"[SET(S1/k1 = v1b)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1c)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1d)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1e)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1f)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1g)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1h)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1i)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1j)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1k)]\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asString().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tassertThrown(()->cm.commit()).is(\"Unable to store contents of config to store.\");\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/config/ConfigMapListenerTest.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"M"}],"commitId":"e15ae5d9c2f83be7db3f0a08928702d637ae9fdb","commitMessage":"@@@Assertions API improvements and tests.","date":"2021-07-13 21:53:16","modifiedFileCount":"139","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-08 05:42:18","codes":[{"authorDate":"2021-08-08 05:42:18","commitOrder":4,"curCode":"\tpublic void testMergeWithOverwriteNoSignal() throws Exception {\n\n\t\tfinal Queue<String> contents = new ConcurrentLinkedQueue<>();\n\t\tcontents.add(\"[S1]\\nk1 = v1a\");\n\t\tcontents.add(\"[S1]\\nk1 = v1b\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(ConfigMemoryStore.create()) {\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn contents.poll();\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(2);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"[SET(S1/k1 = v1b)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1c)]\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asString().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tcm.commit();\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","date":"2021-08-08 05:42:18","endLine":513,"groupId":"102039","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testMergeWithOverwriteNoSignal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/a3/834043b8b2174871748104e73df3c3a83dd189.src","preCode":"\tpublic void testMergeWithOverwriteNoSignal() throws Exception {\n\n\t\tfinal Queue<String> contents = new ConcurrentLinkedQueue<>();\n\t\tcontents.add(\"[S1]\\nk1 = v1a\");\n\t\tcontents.add(\"[S1]\\nk1 = v1b\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\t\tcontents.add(\"[S1]\\nk1 = v1c\");\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(null) {\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn contents.poll();\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(2);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"[SET(S1/k1 = v1b)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1c)]\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asString().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tcm.commit();\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/config/ConfigMapListenerTest.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"M"},{"authorDate":"2021-08-08 05:42:18","commitOrder":4,"curCode":"\tpublic void testMergeWithConstantlyUpdatingFile() throws Exception {\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(ConfigMemoryStore.create()) {\n\t\t\tchar c = 'a';\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn \"[S1]\\nk1 = v1\" + (c++);\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(10);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"[SET(S1/k1 = v1b)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1c)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1d)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1e)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1f)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1g)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1h)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1i)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1j)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1k)]\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asString().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tassertThrown(()->cm.commit()).message().is(\"Unable to store contents of config to store.\");\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","date":"2021-08-08 05:42:18","endLine":559,"groupId":"102039","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testMergeWithConstantlyUpdatingFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/a3/834043b8b2174871748104e73df3c3a83dd189.src","preCode":"\tpublic void testMergeWithConstantlyUpdatingFile() throws Exception {\n\n\t\tConfigMemoryStore s = new ConfigMemoryStore(null) {\n\t\t\tchar c = 'a';\n\t\t\t@Override\n\t\t\tpublic synchronized String read(String name) {\n\t\t\t\treturn \"[S1]\\nk1 = v1\" + (c++);\n\t\t\t}\n\t\t};\n\t\ttry {\n\t\t\tfinal CountDownLatch latch = new CountDownLatch(10);\n\t\t\tfinal Queue<String> eventList = new ConcurrentLinkedQueue<>();\n\t\t\teventList.add(\"[SET(S1/k1 = v1b)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1c)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1d)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1e)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1f)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1g)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1h)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1i)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1j)]\");\n\t\t\teventList.add(\"[SET(S1/k1 = v1k)]\");\n\n\t\t\tLatchedListener l = new LatchedListener(latch) {\n\t\t\t\t@Override\n\t\t\t\tpublic void check(ConfigEvents events) throws Exception {\n\t\t\t\t\tassertObject(events).asString().is(eventList.poll());\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tConfigMap cm = s.getMap(\"Foo.cfg\");\n\t\t\tcm.register(l);\n\t\t\tcm.setEntry(\"S1\", \"k1\", \"v1c\", null, null, null);\n\t\t\tassertThrown(()->cm.commit()).message().is(\"Unable to store contents of config to store.\");\n\t\t\twait(latch);\n\t\t\tassertNull(l.error);\n\t\t\tcm.unregister(l);\n\n\t\t\tassertString(cm).replaceAll(\"\\\\r?\\\\n\", \"|\").is(\"[S1]|k1 = v1c|\");\n\n\t\t} finally {\n\t\t\ts.close();\n\t\t}\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/config/ConfigMapListenerTest.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"M"}],"commitId":"d75a5d34d25d79af92ad11ca951c0918dc10c0d0","commitMessage":"@@@Clean up builders.","date":"2021-08-08 05:42:18","modifiedFileCount":"11","status":"M","submitter":"JamesBognar"}]
