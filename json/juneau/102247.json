[{"authorTime":"2021-02-14 07:38:26","codes":[{"authorDate":"2021-02-14 07:38:26","commitOrder":1,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> BasicHeader.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> BasicHeader.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, Accept.of(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, ContentType.of(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-02-14 07:38:26","endLine":622,"groupId":"2418","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@ContextPropertiesBuildercpb@VarResolverSessionvr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/99/99da375136477cf0421dc810a5dbf615ae8026.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> BasicHeader.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> BasicHeader.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, Accept.of(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, ContentType.of(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"B"},{"authorDate":"2021-02-14 07:38:26","commitOrder":1,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> BasicHeader.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> BasicHeader.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, Accept.of(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, ContentType.of(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-02-14 07:38:26","endLine":622,"groupId":"2418","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@ContextPropertiesBuildercpb@VarResolverSessionvr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/39/873e139ceaa11ac14c96f10d4fbc2d6d59c8bb.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> BasicHeader.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> BasicHeader.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, Accept.of(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, ContentType.of(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"B"}],"commitId":"ea768d374d7babc93fb8c26f50f5ecf259956017","commitMessage":"@@@New RestGet/RestPut/RestPost/RestDelete annotations.","date":"2021-02-14 07:38:26","modifiedFileCount":"202","status":"B","submitter":"JamesBognar"},{"authorTime":"2021-03-04 08:37:47","codes":[{"authorDate":"2021-03-04 08:37:47","commitOrder":2,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-03-04 08:37:47","endLine":622,"groupId":"7458","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@ContextPropertiesBuildercpb@VarResolverSessionvr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/5d/c39ac55ea64582a13f6b831595e631218e5a57.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> BasicHeader.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> BasicHeader.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, Accept.of(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, ContentType.of(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"},{"authorDate":"2021-03-04 08:37:47","commitOrder":2,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-03-04 08:37:47","endLine":622,"groupId":"7458","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@ContextPropertiesBuildercpb@VarResolverSessionvr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/34/f26e1661f409e5337af9339afe5b38dd5452a7.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> BasicHeader.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> BasicHeader.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, Accept.of(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, ContentType.of(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"}],"commitId":"4dc6681f86227888fa1e401bf33716135dfb4bc1","commitMessage":"@@@REST refactoring.","date":"2021-03-04 08:37:47","modifiedFileCount":"306","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-03-04 22:24:17","codes":[{"authorDate":"2021-03-04 22:24:17","commitOrder":3,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> BasicPart.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> BasicPart.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-03-04 22:24:17","endLine":623,"groupId":"7458","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@ContextPropertiesBuildercpb@VarResolverSessionvr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/16/e259d9b54e3bdc0dbdffd1695ffb35b6631a96.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":594,"status":"M"},{"authorDate":"2021-03-04 22:24:17","commitOrder":3,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> BasicPart.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> BasicPart.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-03-04 22:24:17","endLine":623,"groupId":"7458","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@ContextPropertiesBuildercpb@VarResolverSessionvr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/63/9a9d477d1bbc0d7d67e14af5287df2979e31e5.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> BasicNameValuePair.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":594,"status":"M"}],"commitId":"d2c8cb2a497649dedaf35080c36fa23f93ccd756","commitMessage":"@@@REST refactoring.","date":"2021-03-04 22:24:17","modifiedFileCount":"40","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-03-05 00:00:50","codes":[{"authorDate":"2021-03-05 00:00:50","commitOrder":4,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-03-05 00:00:50","endLine":623,"groupId":"933","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@ContextPropertiesBuildercpb@VarResolverSessionvr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/e8/498bf3fa2f63a5ffd3e8c73dacacc7280d39d0.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> BasicPart.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> BasicPart.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":594,"status":"M"},{"authorDate":"2021-03-05 00:00:50","commitOrder":4,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-03-05 00:00:50","endLine":623,"groupId":"933","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@ContextPropertiesBuildercpb@VarResolverSessionvr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/52/c8e9847fc68010dcc651f47be1a809db0b19df.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> BasicPart.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> BasicPart.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":594,"status":"M"}],"commitId":"49752d53ef2b43e2921f95b22350eec6b51919a2","commitMessage":"@@@REST refactoring.","date":"2021-03-05 00:00:50","modifiedFileCount":"38","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-04-22 00:23:10","codes":[{"authorDate":"2021-04-22 00:23:10","commitOrder":5,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-04-22 00:23:10","endLine":622,"groupId":"933","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@ContextPropertiesBuildercpb@VarResolverSessionvr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/0d/c0b579d403c544a4d0a584e89bc6189f3bf3f8.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"},{"authorDate":"2021-04-22 00:23:10","commitOrder":5,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-04-22 00:23:10","endLine":622,"groupId":"933","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@ContextPropertiesBuildercpb@VarResolverSessionvr)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/8e/3cafd1fdb7be4ae16dc2140576ea9cca2b88ce.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> basicHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"}],"commitId":"a88b5f59873a615095b5415dc4d819f89eb9b825","commitMessage":"@@@Improvements to Header subclasses.","date":"2021-04-22 00:23:10","modifiedFileCount":"181","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-08 01:14:19","codes":[{"authorDate":"2021-08-08 01:14:19","commitOrder":6,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, ContextPropertiesBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-08-08 01:14:19","endLine":622,"groupId":"2662","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@ContextPropertiesBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/9a/5a092116780c2b36a119b79e21c0d856373e18.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"},{"authorDate":"2021-08-08 01:14:19","commitOrder":6,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, ContextPropertiesBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-08-08 01:14:19","endLine":622,"groupId":"2662","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@ContextPropertiesBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/75/bce130a64ec66a77d1d2f3cdf36c2f737753c1.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, ContextPropertiesBuilder cpb, VarResolverSession vr) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tcpb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tcpb.set(REST_serializers, merge(ConverterUtils.toType(cpb.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tcpb.set(REST_parsers, merge(ConverterUtils.toType(cpb.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tcpb.set(REST_encoders, merge(ConverterUtils.toType(cpb.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tcpb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tcpb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tcpb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> cpb.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> cpb.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> cpb.appendTo(RESTOP_defaultFormData, x));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tcpb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tcpb.prependTo(REST_converters, a.converters());\n\t\t\tcpb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tcpb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tcpb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tcpb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tcpb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> cpb.prependTo(RESTOP_path, x));\n\t\t\tcpb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> cpb.addTo(REST_rolesDeclared, x));\n\t\t\tcpb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tcpb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"}],"commitId":"097a8ff72ec2b2a9ead21347e3d0a938a3a89341","commitMessage":"@@@Minor code cleanup.","date":"2021-08-08 01:14:19","modifiedFileCount":"61","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-08 21:08:45","codes":[{"authorDate":"2021-08-08 21:08:45","commitOrder":7,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-08-08 21:08:45","endLine":621,"groupId":"2662","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/57/92137456120065f96c75c8e1b4d55ef547adf3.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, ContextPropertiesBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"},{"authorDate":"2021-08-08 21:08:45","commitOrder":7,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-08-08 21:08:45","endLine":621,"groupId":"2662","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/47/9116c9eca1ef7d27e8835a62181f97fb7df418.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, ContextPropertiesBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"}],"commitId":"efcc02d24a7adeb60d7e4ec72299ed2a48eacd2a","commitMessage":"@@@Clean up builders.","date":"2021-08-08 21:08:45","modifiedFileCount":"5","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-23 01:42:13","codes":[{"authorDate":"2021-08-23 01:42:13","commitOrder":8,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-08-23 01:42:13","endLine":621,"groupId":"2662","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/4f/026be26ce342fc9195cefe54492d720aedb945.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.setIfNotEmpty(RESTOP_httpMethod, \"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"},{"authorDate":"2021-08-23 01:42:13","commitOrder":8,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-08-23 01:42:13","endLine":621,"groupId":"2662","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/57/5184378162da83d7a0100ee02b61eca7c3db3c.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.setIfNotEmpty(RESTOP_httpMethod, \"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"}],"commitId":"bf431b12291a7d64e7e7ac4810ea8fd61b8ac98b","commitMessage":"@@@Context API refactoring.\n","date":"2021-08-23 01:42:13","modifiedFileCount":"13","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-23 01:52:41","codes":[{"authorDate":"2021-08-23 01:52:41","commitOrder":9,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tstring2(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-08-23 01:52:41","endLine":621,"groupId":"2662","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/03/6d8f54bcac19b45b1ed86311794869632fdba4.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"},{"authorDate":"2021-08-23 01:52:41","commitOrder":9,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tstring2(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-08-23 01:52:41","endLine":621,"groupId":"2662","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/f8/666d9d34535fb9da87dda3bbd2a7eb01a857ef.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tb.setIfNotEmpty(RESTOP_clientVersion, a.clientVersion());\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"}],"commitId":"a4c58bb4abf69add7b6ac0bcd2ec5e92ba141055","commitMessage":"@@@Context API refactoring.","date":"2021-08-23 01:52:41","modifiedFileCount":"7","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-23 02:03:16","codes":[{"authorDate":"2021-08-23 02:03:16","commitOrder":10,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-08-23 02:03:16","endLine":621,"groupId":"6918","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/59/3b26d784920a54fffcf409a4d1394310bf8e73.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tstring2(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"},{"authorDate":"2021-08-23 02:03:16","commitOrder":10,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","date":"2021-08-23 02:03:16","endLine":621,"groupId":"6918","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/7c/33d93faffdf60f65be5db0603f6b03d0c6165c.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tb.setIf(a.contextClass() != RestOperationContext.Null.class, RESTOP_contextClass, a.contextClass());\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tstring2(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"}],"commitId":"bf9224b1c8408d6cf59f5f1c242360fcd23cb0c8","commitMessage":"@@@Context API refactoring.","date":"2021-08-23 02:03:16","modifiedFileCount":"8","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-23 02:33:12","codes":[{"authorDate":"2021-08-23 02:33:12","commitOrder":11,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-23 02:33:12","endLine":621,"groupId":"6918","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/34/8251c110ec1c68fe8ae1aafe6d3a73b3604a06.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"},{"authorDate":"2021-08-23 02:33:12","commitOrder":11,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-23 02:33:12","endLine":621,"groupId":"6918","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/8b/72ff7b2b28bad4f8a1c9d5389383e1fed31a75.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tb.setIfNotEmpty(RESTOP_debug, string(a.debug()));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"}],"commitId":"f495e69bb84c2912f755a1c003145bce713d098c","commitMessage":"@@@Context API refactoring.","date":"2021-08-23 02:33:12","modifiedFileCount":"8","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-23 02:47:19","codes":[{"authorDate":"2021-08-23 02:47:19","commitOrder":12,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-23 02:47:19","endLine":621,"groupId":"6918","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/1f/3d9c859221808f6667533c72b4542770c30781.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"},{"authorDate":"2021-08-23 02:47:19","commitOrder":12,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-23 02:47:19","endLine":621,"groupId":"6918","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/db/d921eb89ae84045326d9fab68852740ce8b60b.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.prependTo(RESTOP_path, x));\n\t\t\tb.setIfNotEmpty(RESTOP_path, a.value());\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"}],"commitId":"055423a57cf4db99d69baa45f1416197d3e3cd4f","commitMessage":"@@@Context API refactoring.","date":"2021-08-23 02:47:19","modifiedFileCount":"7","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-28 22:29:00","codes":[{"authorDate":"2021-08-28 22:29:00","commitOrder":13,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-28 22:29:00","endLine":621,"groupId":"8022","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/e8/3d25e5f9e8ca628483a3134d516f317b78e0a4.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"},{"authorDate":"2021-08-28 22:29:00","commitOrder":13,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-28 22:29:00","endLine":621,"groupId":"8022","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/b6/9dc2367967b8a77d2f3b1bc21d2360af31ade2.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQuery()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultQuery, x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.appendTo(RESTOP_defaultFormData, x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"}],"commitId":"92b3e50d7699173d16d085d63de694fcbd1687f6","commitMessage":"@@@Context API refactoring.","date":"2021-08-28 22:29:00","modifiedFileCount":"18","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-28 23:48:29","codes":[{"authorDate":"2021-08-28 23:48:29","commitOrder":14,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-28 23:48:29","endLine":621,"groupId":"6918","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/1d/93a42a852659ff5c7a8028d5470feee6d36502.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"},{"authorDate":"2021-08-28 23:48:29","commitOrder":14,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-28 23:48:29","endLine":621,"groupId":"6918","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/10/c2494902b223597582a929192b3eff407915ee.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestAttributes, x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"}],"commitId":"69bb10c31976709f1f31a8a3e3aef84160264e41","commitMessage":"@@@Context API refactoring.","date":"2021-08-28 23:48:29","modifiedFileCount":"9","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-29 00:06:53","codes":[{"authorDate":"2021-08-29 00:06:53","commitOrder":15,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-29 00:06:53","endLine":621,"groupId":"6918","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/d4/208bdc2173114cebd52e83bf69c9f99b9278c6.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"},{"authorDate":"2021-08-29 00:06:53","commitOrder":15,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-29 00:06:53","endLine":621,"groupId":"6918","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/f3/5f6408f69acc4d760e8640e53430edb9b99e57.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultRequestHeaders, x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.appendTo(RESTOP_defaultResponseHeaders, x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"}],"commitId":"4962a4d0572ae979de07fdd377eeb07e9412ce26","commitMessage":"@@@Context API refactoring.","date":"2021-08-29 00:06:53","modifiedFileCount":"7","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-29 00:44:55","codes":[{"authorDate":"2021-08-29 00:44:55","commitOrder":16,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-29 00:44:55","endLine":620,"groupId":"6918","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/54/3f57d273ffa9768ccce3f3e14d8e2debc6c93d.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"M"},{"authorDate":"2021-08-29 00:44:55","commitOrder":16,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-29 00:44:55","endLine":620,"groupId":"6918","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOperationContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/74/c6907c9376bccc1cff36328418eb44a5e17a7a.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.prependTo(RESTOP_matchers, a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"M"}],"commitId":"3386d85ba0302d1a883a79f0e38564b73cf5ea0e","commitMessage":"@@@Context API refactoring.","date":"2021-08-29 00:44:55","modifiedFileCount":"8","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-29 01:52:50","codes":[{"authorDate":"2021-08-29 01:52:50","commitOrder":17,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOpContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-29 01:52:50","endLine":620,"groupId":"6918","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/f1/fb4b92766755ba08728e72b0a8b11d82312e7f.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOperationContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"M"},{"authorDate":"2021-08-29 01:52:50","commitOrder":17,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOpContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-29 01:52:50","endLine":620,"groupId":"6918","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/08/b62790dafe5e998f13a6b56e93a07b43f4f4e0.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOperationContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOperationContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"M"}],"commitId":"16bc8fad5aafb34417b772507039d0179b266eef","commitMessage":"@@@Context API refactoring.","date":"2021-08-29 01:52:50","modifiedFileCount":"46","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-29 03:13:37","codes":[{"authorDate":"2021-08-29 03:13:37","commitOrder":18,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOpContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-29 03:13:37","endLine":621,"groupId":"6918","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/ac/4a714ffdc8bcb60005bb9350b0a032122d58d9.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOpContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"},{"authorDate":"2021-08-29 03:13:37","commitOrder":18,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOpContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-29 03:13:37","endLine":621,"groupId":"6918","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/b9/31366f8526c2602081c5c402825cf08dec8c93.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOpContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tb.setIfNotEmpty(REST_defaultCharset, string(a.defaultCharset()));\n\t\t\tb.setIfNotEmpty(REST_maxInput, string(a.maxInput()));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"}],"commitId":"f221c6586e8f874a73496e5c4d91a4b4c33e0b42","commitMessage":"@@@Context API refactoring.","date":"2021-08-29 03:13:37","modifiedFileCount":"16","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-29 07:15:36","codes":[{"authorDate":"2021-08-29 07:15:36","commitOrder":19,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOpContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-29 07:15:36","endLine":622,"groupId":"6918","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/0c/cf4dad2883881004eff267551be89d6ed7fd79.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOpContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"},{"authorDate":"2021-08-29 07:15:36","commitOrder":19,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOpContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-29 07:15:36","endLine":622,"groupId":"6918","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/9d/0124b3b9177a59b2bb83b7036e0a79a1c2cdf0.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOpContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tb.setIfNotEmpty(REST_produces, stringList(a.produces()));\n\t\t\tb.setIfNotEmpty(REST_consumes, stringList(a.consumes()));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"}],"commitId":"d8ec44c1666fd4ccc86897643df3f4e859e56a29","commitMessage":"@@@Context API refactoring.","date":"2021-08-29 07:15:36","modifiedFileCount":"14","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-30 00:08:55","codes":[{"authorDate":"2021-08-30 00:08:55","commitOrder":20,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-30 00:08:55","endLine":622,"groupId":"6918","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/7a/6bd92b95abb9a0bbd3c4a335b24b77e12a0c7d.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOpContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"},{"authorDate":"2021-08-30 00:08:55","commitOrder":20,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-30 00:08:55","endLine":622,"groupId":"6918","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/70/45d3c940b650bade291b6279add4d2649f0633.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass(), RestOpContext.Null.class).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"}],"commitId":"371ff50e6e9e029e0c2f48cec9304d82ed146d33","commitMessage":"@@@Context API refactoring.","date":"2021-08-30 00:08:55","modifiedFileCount":"11","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-30 00:56:07","codes":[{"authorDate":"2021-08-30 00:56:07","commitOrder":21,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-30 00:56:07","endLine":622,"groupId":"6918","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/ce/348f9c6ba4413b52fb1bf622d33e9b41baccd1.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"},{"authorDate":"2021-08-30 00:56:07","commitOrder":21,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-30 00:56:07","endLine":622,"groupId":"6918","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/bb/5975bc4ff73bb5943cef33e0f1f98c7a26d65c.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.addTo(REST_rolesDeclared, x));\n\t\t\tb.addToIfNotEmpty(REST_roleGuard, string(a.roleGuard()));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"}],"commitId":"62e23b4f140c2b7c6e8beca95e7af780abb422a7","commitMessage":"@@@Context API refactoring.","date":"2021-08-30 00:56:07","modifiedFileCount":"16","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-30 01:29:08","codes":[{"authorDate":"2021-08-30 01:29:08","commitOrder":22,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-30 01:29:08","endLine":622,"groupId":"3073","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/cb/9d910729ab816acec7f01512b434e684315c86.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"},{"authorDate":"2021-08-30 01:29:08","commitOrder":22,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-30 01:29:08","endLine":622,"groupId":"3073","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/84/59b517b3d177d2c46cab6f82614f2cae8ecd33.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.prependTo(REST_guards, reverse(a.guards()));\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"}],"commitId":"7c45992d7f334d91e8971c361a80c64d4650cf7e","commitMessage":"@@@Context API refactoring.","date":"2021-08-30 01:29:08","modifiedFileCount":"18","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-08-30 04:00:50","codes":[{"authorDate":"2021-08-30 04:00:50","commitOrder":23,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-30 04:00:50","endLine":622,"groupId":"3073","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/cb/329c7ae9182d06a7a134b2d2ce97dc0fc4d15e.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"},{"authorDate":"2021-08-30 04:00:50","commitOrder":23,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-08-30 04:00:50","endLine":622,"groupId":"3073","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/46/fd32b7b7604e6fc5ce2f24f589cc0b2fc3eeba.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.prependTo(REST_converters, a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"}],"commitId":"4611d01b29564d2ad9dfc3cd2c2d95a59abeaa54","commitMessage":"@@@Context API refactoring.","date":"2021-08-30 04:00:50","modifiedFileCount":"19","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-09-04 00:01:24","codes":[{"authorDate":"2021-09-04 00:01:24","commitOrder":24,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tvalue(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tvalue(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-04 00:01:24","endLine":622,"groupId":"3073","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/f1/e84f33acfb194a918a53d68a8e743efcee0879.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"},{"authorDate":"2021-09-04 00:01:24","commitOrder":24,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tvalue(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tvalue(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-04 00:01:24","endLine":622,"groupId":"3073","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/e7/59440cc6299a12b8ff279047dbf1bc8c60d2db.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, accept(string(a.defaultAccept())));\n\t\t\tb.appendToIfNotEmpty(REST_defaultRequestHeaders, contentType(string(a.defaultContentType())));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"}],"commitId":"dea38a30e4edc62345c9788a550b0308e1d8d790","commitMessage":"@@@Context API refactoring.","date":"2021-09-04 00:01:24","modifiedFileCount":"14","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-09-04 02:03:47","codes":[{"authorDate":"2021-09-04 02:03:47","commitOrder":25,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-04 02:03:47","endLine":622,"groupId":"5882","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/e1/9b1972517a047a374219a1c2529d87b0dd58bd.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tvalue(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tvalue(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"},{"authorDate":"2021-09-04 02:03:47","commitOrder":25,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-04 02:03:47","endLine":622,"groupId":"5882","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/64/fa2c6436a99db7fb300b12f5fa0150193bd8fc.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\tvalue(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstringStream(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstringStream(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstringStream(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstringStream(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstringStream(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstringStream(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstringStream(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tvalue(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tvalue(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tvalue(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tvalue(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tvalue(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstringStream(a.path()).forEach(x -> b.path(x));\n\t\t\tvalue(a.value()).ifPresent(x -> b.path(x));\n\t\t\tcdStream(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tvalue(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tvalue(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":593,"status":"M"}],"commitId":"d70e408561a67c7d89185abbb613faf682dcbb8a","commitMessage":"@@@Context API refactoring.","date":"2021-09-04 02:03:47","modifiedFileCount":"21","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-09-06 22:18:08","codes":[{"authorDate":"2021-09-06 22:18:08","commitOrder":26,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.encoders(a.encoders());\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-06 22:18:08","endLine":625,"groupId":"5882","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/aa/ba21705ac28af8feaeb6cab04bdc783620122d.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":596,"status":"M"},{"authorDate":"2021-09-06 22:18:08","commitOrder":26,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.encoders(a.encoders());\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-06 22:18:08","endLine":625,"groupId":"5882","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/a5/d7bd0fe25cd598f07e7094c33e701138216ff0.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.set(REST_encoders, merge(ConverterUtils.toType(b.peek(REST_encoders), Object[].class), a.encoders()));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":596,"status":"M"}],"commitId":"cdea0cdccafd7ad77dac637b3036790c9bce769b","commitMessage":"@@@Context API refactoring.","date":"2021-09-06 22:18:08","modifiedFileCount":"22","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-09-08 08:27:39","codes":[{"authorDate":"2021-09-08 08:27:39","commitOrder":27,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tnone(a.serializers()).ifPresent(x -> b.getSerializers().clear());\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tnone(a.encoders()).ifPresent(x -> b.getEncoders().clear());\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-08 08:27:39","endLine":630,"groupId":"5882","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/08/e32edb9ef7e519fb1715f013aa433b2a410d94.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.encoders(a.encoders());\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":599,"status":"M"},{"authorDate":"2021-09-08 08:27:39","commitOrder":27,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tnone(a.serializers()).ifPresent(x -> b.getSerializers().clear());\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tnone(a.encoders()).ifPresent(x -> b.getEncoders().clear());\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-08 08:27:39","endLine":630,"groupId":"5882","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/76/16b3e16920810150e9a726da4e1fc3837cfc44.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tb.set(REST_serializers, merge(ConverterUtils.toType(b.peek(REST_serializers), Object[].class), a.serializers()));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tb.encoders(a.encoders());\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":599,"status":"M"}],"commitId":"c8e012691a8e754b44d7c1baa04401d2aa5ff16e","commitMessage":"@@@Context API refactoring.","date":"2021-09-08 08:27:39","modifiedFileCount":"95","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-09-09 21:20:47","codes":[{"authorDate":"2021-09-09 21:20:47","commitOrder":28,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-09 21:20:47","endLine":625,"groupId":"5882","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/7e/fddec25b34d0ea7349eed0a8197840f0264319.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tnone(a.serializers()).ifPresent(x -> b.getSerializers().clear());\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tnone(a.encoders()).ifPresent(x -> b.getEncoders().clear());\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":596,"status":"M"},{"authorDate":"2021-09-09 21:20:47","commitOrder":28,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-09 21:20:47","endLine":625,"groupId":"5882","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/f9/f221370cff567f78302168a3ab47099208b193.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tnone(a.serializers()).ifPresent(x -> b.getSerializers().clear());\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tb.set(REST_parsers, merge(ConverterUtils.toType(b.peek(REST_parsers), Object[].class), a.parsers()));\n\t\t\tnone(a.encoders()).ifPresent(x -> b.getEncoders().clear());\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":596,"status":"M"}],"commitId":"bb624d386490c0cced1a4fdaae9fb8186b05b197","commitMessage":"@@@Context API refactoring.","date":"2021-09-09 21:20:47","modifiedFileCount":"30","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-09-12 23:43:00","codes":[{"authorDate":"2021-09-12 23:43:00","commitOrder":29,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-12 23:43:00","endLine":625,"groupId":"5882","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/ee/b84e7838e8fd047b42055467c4e181a9ed82fe.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":596,"status":"M"},{"authorDate":"2021-09-12 23:43:00","commitOrder":29,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-12 23:43:00","endLine":625,"groupId":"5882","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/49/d1c6c7edc4f9ff425f7263efad82b9ad398f72.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.contextClass(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":596,"status":"M"}],"commitId":"fe80df5cf9e8fed9a15d10e74f12d574907886ed","commitMessage":"@@@Context API refactoring.","date":"2021-09-12 23:43:00","modifiedFileCount":"48","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-09-20 00:32:21","codes":[{"authorDate":"2021-09-20 00:32:21","commitOrder":30,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-20 00:32:21","endLine":640,"groupId":"8889","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/09/4bb36372a0414ec35c1fda5712d20d22f894cc.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"},{"authorDate":"2021-09-20 00:32:21","commitOrder":30,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-20 00:32:21","endLine":640,"groupId":"8889","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/1b/7d8561116e5f50a2606d7fe46a87d7f3b12572.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"}],"commitId":"82d0f2ea95cb365762b1e13416cb317c634a1074","commitMessage":"@@@Context API refactoring.","date":"2021-09-20 00:32:21","modifiedFileCount":"16","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-09-20 04:39:33","codes":[{"authorDate":"2021-09-20 04:39:33","commitOrder":31,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-20 04:39:33","endLine":640,"groupId":"8889","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/dd/1f3dd73d2b91989297e7b6b7d9837dd3e0e360.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"},{"authorDate":"2021-09-20 04:39:33","commitOrder":31,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-20 04:39:33","endLine":640,"groupId":"8889","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/35/efb14e284447d7af6b0154db1de7a9dc612bb4.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.getEncoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"}],"commitId":"4f36b33a74a3d98a3c17bba5a985ee76bf959f3c","commitMessage":"@@@Context API refactoring.","date":"2021-09-20 04:39:33","modifiedFileCount":"10","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-09-20 04:52:54","codes":[{"authorDate":"2021-09-20 04:52:54","commitOrder":32,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-20 04:52:54","endLine":640,"groupId":"8889","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/29/42db2c97bf7d7eeea1cd4ec4e62291e74a2570.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"},{"authorDate":"2021-09-20 04:52:54","commitOrder":32,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-20 04:52:54","endLine":640,"groupId":"8889","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/3d/b145a37cdfc78e91df8928dda1f2cad631664a.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.getSerializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"}],"commitId":"6a5dfda1aad6dca0ae4fb7005ed678d38cbb8e08","commitMessage":"@@@Context API refactoring.","date":"2021-09-20 04:52:54","modifiedFileCount":"9","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-09-20 05:06:29","codes":[{"authorDate":"2021-09-20 05:06:29","commitOrder":33,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.parsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-20 05:06:29","endLine":640,"groupId":"8889","id":65,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/33/087ab194c898b27ba93f9181d6acf1aff3b7bb.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"},{"authorDate":"2021-09-20 05:06:29","commitOrder":33,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.parsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-20 05:06:29","endLine":640,"groupId":"8889","id":66,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/8f/9a32744d5f484fa986899e8dcc8bc96e641a71.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.getParsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"}],"commitId":"2e6e824fc3aba386babad654a7f2865c82803432","commitMessage":"@@@Context API refactoring.","date":"2021-09-20 05:06:29","modifiedFileCount":"8","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-09-20 05:54:15","codes":[{"authorDate":"2021-09-20 05:54:15","commitOrder":34,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.parsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards().append(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-20 05:54:15","endLine":640,"groupId":"7856","id":67,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/01/ea83c88171704f643139d5fe252d9dc21fc7a2.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.parsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"},{"authorDate":"2021-09-20 05:54:15","commitOrder":34,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.parsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards().append(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-20 05:54:15","endLine":640,"groupId":"7856","id":68,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/72/5cc4bfc2cca234079751b8df417a2db78d2867.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.parsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"}],"commitId":"e469f0ec94e56c05e4586331c4e516afa444ecfc","commitMessage":"@@@Context API refactoring.","date":"2021-09-20 05:54:15","modifiedFileCount":"14","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-09-20 06:06:23","codes":[{"authorDate":"2021-09-20 06:06:23","commitOrder":35,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.parsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards().append(a.guards());\n\t\t\tb.matchers().append(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-20 06:06:23","endLine":640,"groupId":"6964","id":69,"instanceNumber":1,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/34/4dff53145a319409583d611ef6351f834199f9.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.parsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards().append(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"},{"authorDate":"2021-09-20 06:06:23","commitOrder":35,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.parsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards().append(a.guards());\n\t\t\tb.matchers().append(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-20 06:06:23","endLine":640,"groupId":"6964","id":70,"instanceNumber":2,"isCurCommit":0,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/cc/422de6fa90c9450e7a8f7536097cd21d78bede.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.parsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards().append(a.guards());\n\t\t\tb.matchers(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"}],"commitId":"3359727077ed88d9dd4cde25fa0ac46c7087550f","commitMessage":"@@@Context API refactoring.","date":"2021-09-20 06:06:23","modifiedFileCount":"7","status":"M","submitter":"JamesBognar"},{"authorTime":"2021-09-22 22:56:11","codes":[{"authorDate":"2021-09-22 22:56:11","commitOrder":36,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.parsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders().setDefault(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders().setDefault(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes().add(x));\n\t\t\tstrings(a.defaultRequestQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultRequestQueryData().setDefault(x));\n\t\t\tstrings(a.defaultRequestFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultRequestFormData().setDefault(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders().setDefault(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders().setDefault(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards().append(a.guards());\n\t\t\tb.matchers().append(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-22 22:56:11","endLine":640,"groupId":"102247","id":71,"instanceNumber":1,"isCurCommit":1,"methodName":"apply","params":"(AnnotationInfo<RestPost>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/0e/726c01119947dec5dc6a955588e4e3b256246b.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPost> ai, RestOpContextBuilder b) {\n\t\t\tRestPost a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"post\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.parsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards().append(a.guards());\n\t\t\tb.matchers().append(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPostAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"},{"authorDate":"2021-09-22 22:56:11","commitOrder":36,"curCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.parsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders().setDefault(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders().setDefault(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes().add(x));\n\t\t\tstrings(a.defaultRequestQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultRequestQueryData().setDefault(x));\n\t\t\tstrings(a.defaultRequestFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultRequestFormData().setDefault(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders().setDefault(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders().setDefault(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards().append(a.guards());\n\t\t\tb.matchers().append(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","date":"2021-09-22 22:56:11","endLine":640,"groupId":"102247","id":72,"instanceNumber":2,"isCurCommit":1,"methodName":"apply","params":"(AnnotationInfo<RestPut>ai@RestOpContextBuilderb)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/51/62cf6a642994cec917e23a4d615643702d0736.src","preCode":"\t\tpublic void apply(AnnotationInfo<RestPut> ai, RestOpContextBuilder b) {\n\t\t\tRestPut a = ai.getAnnotation();\n\n\t\t\tb.httpMethod(\"put\");\n\n\t\t\tclasses(a.serializers()).ifPresent(x -> b.serializers().set(x));\n\t\t\tclasses(a.parsers()).ifPresent(x -> b.parsers().set(x));\n\t\t\tclasses(a.encoders()).ifPresent(x -> b.encoders().set(x));\n\t\t\ttype(a.contextClass()).ifPresent(x -> b.type(x));\n\t\t\tstrings(a.produces()).map(MediaType::of).forEach(x -> b.produces(x));\n\t\t\tstrings(a.consumes()).map(MediaType::of).forEach(x -> b.consumes(x));\n\t\t\tstrings(a.defaultRequestHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultRequestHeaders(x));\n\t\t\tstrings(a.defaultResponseHeaders()).map(x -> stringHeader(x)).forEach(x -> b.defaultResponseHeaders(x));\n\t\t\tstrings(a.defaultRequestAttributes()).map(x -> BasicNamedAttribute.ofPair(x)).forEach(x -> b.defaultRequestAttributes(x));\n\t\t\tstrings(a.defaultQueryData()).map(x -> basicPart(x)).forEach(x -> b.defaultQueryData(x));\n\t\t\tstrings(a.defaultFormData()).map(x -> basicPart(x)).forEach(x -> b.defaultFormData(x));\n\t\t\tstring(a.defaultAccept()).map(x -> accept(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tstring(a.defaultContentType()).map(x -> contentType(x)).ifPresent(x -> b.defaultRequestHeaders(x));\n\t\t\tb.converters().append(a.converters());\n\t\t\tb.guards().append(a.guards());\n\t\t\tb.matchers().append(a.matchers());\n\t\t\tstring(a.clientVersion()).ifPresent(x -> b.clientVersion(x));\n\t\t\tstring(a.defaultCharset()).map(Charset::forName).ifPresent(x -> b.defaultCharset(x));\n\t\t\tstring(a.maxInput()).ifPresent(x -> b.maxInput(x));\n\t\t\tstrings(a.path()).forEach(x -> b.path(x));\n\t\t\tstring(a.value()).ifPresent(x -> b.path(x));\n\t\t\tstrings_cdl(a.rolesDeclared()).forEach(x -> b.rolesDeclared(x));\n\t\t\tstring(a.roleGuard()).ifPresent(x -> b.roleGuard(x));\n\t\t\tstring(a.debug()).map(Enablement::fromString).ifPresent(x -> b.debug(x));\n\t\t}\n","realPath":"juneau-rest/juneau-rest-server/src/main/java/org/apache/juneau/rest/annotation/RestPutAnnotation.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":611,"status":"M"}],"commitId":"182b1eb65943145872e10664ec7a6ed26fcae9ab","commitMessage":"@@@Context API refactoring.","date":"2021-09-22 22:56:11","modifiedFileCount":"24","status":"M","submitter":"JamesBognar"}]
