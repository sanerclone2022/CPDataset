[{"authorTime":"2021-02-06 03:17:15","codes":[{"authorDate":"2021-02-06 03:17:15","commitOrder":1,"curCode":"\tpublic void a05_slightlyDifferentStackTraces() {\n\t\tThrownStore db = new ThrownStore();\n\n\t\tThrowable t1 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(\"Stop\", \"baz\", \"Stop.class\", 3),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 6)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tThrowable t2 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(\"Stop\", \"baz\", \"Stop.class\", 3),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 7)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tdb.add(t1);\n\t\tdb.add(t2);\n\n\t\tassertInteger(db.getStats(t1).get().getCount()).is(1);\n\t\tassertInteger(db.getStats(t2).get().getCount()).is(1);\n\t}\n","date":"2021-02-06 03:17:15","endLine":148,"groupId":"3467","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"a05_slightlyDifferentStackTraces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/43/92477c58ef8dbbe983c256f779706cc608be7c.src","preCode":"\tpublic void a05_slightlyDifferentStackTraces() {\n\t\tThrownStore db = new ThrownStore();\n\n\t\tThrowable t1 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(\"Stop\", \"baz\", \"Stop.class\", 3),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 6)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tThrowable t2 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(\"Stop\", \"baz\", \"Stop.class\", 3),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 7)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tdb.add(t1);\n\t\tdb.add(t2);\n\n\t\tassertInteger(db.getStats(t1).get().getCount()).is(1);\n\t\tassertInteger(db.getStats(t2).get().getCount()).is(1);\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/mstat/ThrownStore_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"B"},{"authorDate":"2021-02-06 03:17:15","commitOrder":1,"curCode":"\tpublic void d01_ignoreClasses() {\n\t\tThrownStore db = ThrownStore.create().ignoreClasses(D1.class,D2.class,ThrownStore_Test.class).build();\n\n\t\tThrowable t1 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(D1.class.getName(), \"baz\", \"D1.class\", 3),\n\t\t\t\t\tnew StackTraceElement(D1.class.getName()+\"$X\", \"baz\", \"D1.X.class\", 4),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 5)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tThrowable t2 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(D2.class.getName(), \"baz\", \"D2.class\", 3),\n\t\t\t\t\tnew StackTraceElement(D2.class.getName()+\"$X\", \"baz\", \"D2.X.class\", 4),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 5)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tdb.add(t1);\n\t\tdb.add(t2);\n\n\t\tassertObject(db.getStats(t1).get().getStackTrace()).asJson().stderr().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\t\tassertObject(db.getStats(t2).get().getStackTrace()).asJson().stderr().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\n\t\tassertInteger(db.getStats(t1).get().getCount()).is(2);\n\t\tassertInteger(db.getStats(t2).get().getCount()).is(2);\n\n\t\tThrownStore db2 = ThrownStore.create().parent(db).build();\n\n\t\tdb2.add(t1);\n\t\tdb2.add(t2);\n\n\t\tassertObject(db2.getStats(t1).get().getStackTrace()).asJson().stderr().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\t\tassertObject(db2.getStats(t2).get().getStackTrace()).asJson().stderr().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\n\t\tassertInteger(db2.getStats(t1).get().getCount()).is(2);\n\t\tassertInteger(db2.getStats(t2).get().getCount()).is(2);\n\t\tassertInteger(db.getStats(t1).get().getCount()).is(4);\n\t\tassertInteger(db.getStats(t2).get().getCount()).is(4);\n\t}\n","date":"2021-02-06 03:17:15","endLine":385,"groupId":"8782","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"d01_ignoreClasses","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/43/92477c58ef8dbbe983c256f779706cc608be7c.src","preCode":"\tpublic void d01_ignoreClasses() {\n\t\tThrownStore db = ThrownStore.create().ignoreClasses(D1.class,D2.class,ThrownStore_Test.class).build();\n\n\t\tThrowable t1 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(D1.class.getName(), \"baz\", \"D1.class\", 3),\n\t\t\t\t\tnew StackTraceElement(D1.class.getName()+\"$X\", \"baz\", \"D1.X.class\", 4),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 5)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tThrowable t2 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(D2.class.getName(), \"baz\", \"D2.class\", 3),\n\t\t\t\t\tnew StackTraceElement(D2.class.getName()+\"$X\", \"baz\", \"D2.X.class\", 4),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 5)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tdb.add(t1);\n\t\tdb.add(t2);\n\n\t\tassertObject(db.getStats(t1).get().getStackTrace()).asJson().stderr().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\t\tassertObject(db.getStats(t2).get().getStackTrace()).asJson().stderr().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\n\t\tassertInteger(db.getStats(t1).get().getCount()).is(2);\n\t\tassertInteger(db.getStats(t2).get().getCount()).is(2);\n\n\t\tThrownStore db2 = ThrownStore.create().parent(db).build();\n\n\t\tdb2.add(t1);\n\t\tdb2.add(t2);\n\n\t\tassertObject(db2.getStats(t1).get().getStackTrace()).asJson().stderr().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\t\tassertObject(db2.getStats(t2).get().getStackTrace()).asJson().stderr().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\n\t\tassertInteger(db2.getStats(t1).get().getCount()).is(2);\n\t\tassertInteger(db2.getStats(t2).get().getCount()).is(2);\n\t\tassertInteger(db.getStats(t1).get().getCount()).is(4);\n\t\tassertInteger(db.getStats(t2).get().getCount()).is(4);\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/mstat/ThrownStore_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"B"}],"commitId":"be23bff717ddb90a892c743156f56c11bd5bceee","commitMessage":"@@@Move unit tests into a single top-level project.","date":"2021-02-06 03:17:15","modifiedFileCount":"0","status":"B","submitter":"JamesBognar"},{"authorTime":"2021-02-23 23:09:19","codes":[{"authorDate":"2021-02-06 03:17:15","commitOrder":2,"curCode":"\tpublic void a05_slightlyDifferentStackTraces() {\n\t\tThrownStore db = new ThrownStore();\n\n\t\tThrowable t1 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(\"Stop\", \"baz\", \"Stop.class\", 3),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 6)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tThrowable t2 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(\"Stop\", \"baz\", \"Stop.class\", 3),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 7)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tdb.add(t1);\n\t\tdb.add(t2);\n\n\t\tassertInteger(db.getStats(t1).get().getCount()).is(1);\n\t\tassertInteger(db.getStats(t2).get().getCount()).is(1);\n\t}\n","date":"2021-02-06 03:17:15","endLine":148,"groupId":"101156","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"a05_slightlyDifferentStackTraces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/43/92477c58ef8dbbe983c256f779706cc608be7c.src","preCode":"\tpublic void a05_slightlyDifferentStackTraces() {\n\t\tThrownStore db = new ThrownStore();\n\n\t\tThrowable t1 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(\"Stop\", \"baz\", \"Stop.class\", 3),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 6)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tThrowable t2 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(\"Stop\", \"baz\", \"Stop.class\", 3),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 7)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tdb.add(t1);\n\t\tdb.add(t2);\n\n\t\tassertInteger(db.getStats(t1).get().getCount()).is(1);\n\t\tassertInteger(db.getStats(t2).get().getCount()).is(1);\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/mstat/ThrownStore_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"N"},{"authorDate":"2021-02-23 23:09:19","commitOrder":2,"curCode":"\tpublic void d01_ignoreClasses() {\n\t\tThrownStore db = ThrownStore.create().ignoreClasses(D1.class,D2.class,ThrownStore_Test.class).build();\n\n\t\tThrowable t1 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(D1.class.getName(), \"baz\", \"D1.class\", 3),\n\t\t\t\t\tnew StackTraceElement(D1.class.getName()+\"$X\", \"baz\", \"D1.X.class\", 4),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 5)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tThrowable t2 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(D2.class.getName(), \"baz\", \"D2.class\", 3),\n\t\t\t\t\tnew StackTraceElement(D2.class.getName()+\"$X\", \"baz\", \"D2.X.class\", 4),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 5)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tdb.add(t1);\n\t\tdb.add(t2);\n\n\t\tassertObject(db.getStats(t1).get().getStackTrace()).asJson().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\t\tassertObject(db.getStats(t2).get().getStackTrace()).asJson().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\n\t\tassertInteger(db.getStats(t1).get().getCount()).is(2);\n\t\tassertInteger(db.getStats(t2).get().getCount()).is(2);\n\n\t\tThrownStore db2 = ThrownStore.create().parent(db).build();\n\n\t\tdb2.add(t1);\n\t\tdb2.add(t2);\n\n\t\tassertObject(db2.getStats(t1).get().getStackTrace()).asJson().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\t\tassertObject(db2.getStats(t2).get().getStackTrace()).asJson().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\n\t\tassertInteger(db2.getStats(t1).get().getCount()).is(2);\n\t\tassertInteger(db2.getStats(t2).get().getCount()).is(2);\n\t\tassertInteger(db.getStats(t1).get().getCount()).is(4);\n\t\tassertInteger(db.getStats(t2).get().getCount()).is(4);\n\t}\n","date":"2021-02-23 23:09:19","endLine":385,"groupId":"101156","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"d01_ignoreClasses","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-juneau-10-0.7/blobInfo/CC_OUT/blobs/35/70d5bdc80f83a5e237078bf53953ea5af34e9a.src","preCode":"\tpublic void d01_ignoreClasses() {\n\t\tThrownStore db = ThrownStore.create().ignoreClasses(D1.class,D2.class,ThrownStore_Test.class).build();\n\n\t\tThrowable t1 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(D1.class.getName(), \"baz\", \"D1.class\", 3),\n\t\t\t\t\tnew StackTraceElement(D1.class.getName()+\"$X\", \"baz\", \"D1.X.class\", 4),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 5)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tThrowable t2 = new Throwable() {\n\t\t\t@Override\n\t\t\tpublic StackTraceElement[] getStackTrace() {\n\t\t\t\treturn new StackTraceElement[] {\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"bar\", \"Foo.class\", 1),\n\t\t\t\t\tnew StackTraceElement(\"Foo\", \"baz\", \"Foo.class\", 2),\n\t\t\t\t\tnew StackTraceElement(D2.class.getName(), \"baz\", \"D2.class\", 3),\n\t\t\t\t\tnew StackTraceElement(D2.class.getName()+\"$X\", \"baz\", \"D2.X.class\", 4),\n\t\t\t\t\tnew StackTraceElement(\"Object\", \"baz\", \"Object.class\", 5)\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tdb.add(t1);\n\t\tdb.add(t2);\n\n\t\tassertObject(db.getStats(t1).get().getStackTrace()).asJson().stderr().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\t\tassertObject(db.getStats(t2).get().getStackTrace()).asJson().stderr().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\n\t\tassertInteger(db.getStats(t1).get().getCount()).is(2);\n\t\tassertInteger(db.getStats(t2).get().getCount()).is(2);\n\n\t\tThrownStore db2 = ThrownStore.create().parent(db).build();\n\n\t\tdb2.add(t1);\n\t\tdb2.add(t2);\n\n\t\tassertObject(db2.getStats(t1).get().getStackTrace()).asJson().stderr().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\t\tassertObject(db2.getStats(t2).get().getStackTrace()).asJson().stderr().is(\"['Foo.bar(Foo.class:1)','Foo.baz(Foo.class:2)','<ignored>','<ignored>','Object.baz(Object.class:5)']\");\n\n\t\tassertInteger(db2.getStats(t1).get().getCount()).is(2);\n\t\tassertInteger(db2.getStats(t2).get().getCount()).is(2);\n\t\tassertInteger(db.getStats(t1).get().getCount()).is(4);\n\t\tassertInteger(db.getStats(t2).get().getCount()).is(4);\n\t}\n","realPath":"juneau-utest/src/test/java/org/apache/juneau/mstat/ThrownStore_Test.java","repoName":"juneau","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"}],"commitId":"afde3b9fafa5f8c97ad23c6e8ed67e74303b4fc8","commitMessage":"@@@Assertions should display to stderr by default.","date":"2021-02-23 23:09:19","modifiedFileCount":"66","status":"M","submitter":"JamesBognar"}]
