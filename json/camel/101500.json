[{"authorTime":"2015-01-24 07:37:04","codes":[{"authorDate":"2015-09-04 04:54:51","commitOrder":5,"curCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File tarFile;\n        Exchange answer = oldExchange;\n\n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n\n        \r\n        if (oldExchange == null) {\n            try {\n                tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, new File(System.getProperty(\"java.io.tmpdir\")));\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile));\n        } else {\n            tarFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        \r\n        if (GenericFileMessage.class.isAssignableFrom(newExchange.getIn().getClass())) {\n            try {\n                File appendFile = newExchange.getIn().getMandatoryBody(File.class);\n                if (appendFile != null) {\n                    addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? newExchange.getIn().toString() : null);\n                    GenericFile<File> genericFile =\n                            FileConsumer.asGenericFile(\n                                    tarFile.getParent(),\n                                    tarFile,\n                                    null);    \r\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn()\n                        .getMessageId();\n                addEntryToTar(tarFile, entryName, buffer, buffer.length);\n                GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                        tarFile.getParent(), tarFile, null);\n                genericFile.bindToExchange(answer);\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n\n        return answer;\n    }\n","date":"2015-09-04 04:55:43","endLine":172,"groupId":"5979","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregate","params":"(ExchangeoldExchange@ExchangenewExchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ae/4ba2bc91cdfca57b211bc9bef2cf628d59e69c.src","preCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File tarFile;\n        Exchange answer = oldExchange;\n\n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n\n        \r\n        if (oldExchange == null) {\n            try {\n                tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, new File(System.getProperty(\"java.io.tmpdir\")));\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile));\n        } else {\n            tarFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        \r\n        if (GenericFileMessage.class.isAssignableFrom(newExchange.getIn().getClass())) {\n            try {\n                File appendFile = newExchange.getIn().getMandatoryBody(File.class);\n                if (appendFile != null) {\n                    addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? newExchange.getIn().toString() : null);\n                    GenericFile<File> genericFile =\n                            FileConsumer.asGenericFile(\n                                    tarFile.getParent(),\n                                    tarFile,\n                                    null);    \r\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn()\n                        .getMessageId();\n                addEntryToTar(tarFile, entryName, buffer, buffer.length);\n                GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                        tarFile.getParent(), tarFile, null);\n                genericFile.bindToExchange(answer);\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n\n        return answer;\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/processor/aggregate/tarfile/TarAggregationStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"},{"authorDate":"2015-01-24 07:37:04","commitOrder":5,"curCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File zipFile;\n        Exchange answer = oldExchange;\n        \n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n    \n        \r\n        if (oldExchange == null) {\n            try {\n                zipFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteZipFileOnCompletion(zipFile));\n        } else {\n            zipFile = oldExchange.getIn().getBody(File.class);\n        }\n        \n        \r\n        if (GenericFileMessage.class.isAssignableFrom(newExchange.getIn().getClass())) {\n            try {\n                File appendFile = newExchange.getIn().getMandatoryBody(File.class);\n                if (appendFile != null) {\n                    addFileToZip(zipFile, appendFile, this.preserveFolderStructure ? newExchange.getIn().toString() : null);\n                    GenericFile<File> genericFile = \n                        FileConsumer.asGenericFile(\n                            zipFile.getParent(), \n                            zipFile, \n                            Charset.defaultCharset().toString());\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                addEntryToZip(zipFile, entryName, buffer, buffer.length);\n                GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                    zipFile.getParent(), zipFile, Charset.defaultCharset().toString());\n                genericFile.bindToExchange(answer);\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        \n        return answer;\n    }\n","date":"2015-01-26 21:50:15","endLine":156,"groupId":"7787","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregate","params":"(ExchangeoldExchange@ExchangenewExchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b1/105fa782e573c87d94aba5630fc9e53af0e8cd.src","preCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File zipFile;\n        Exchange answer = oldExchange;\n        \n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n    \n        \r\n        if (oldExchange == null) {\n            try {\n                zipFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteZipFileOnCompletion(zipFile));\n        } else {\n            zipFile = oldExchange.getIn().getBody(File.class);\n        }\n        \n        \r\n        if (GenericFileMessage.class.isAssignableFrom(newExchange.getIn().getClass())) {\n            try {\n                File appendFile = newExchange.getIn().getMandatoryBody(File.class);\n                if (appendFile != null) {\n                    addFileToZip(zipFile, appendFile, this.preserveFolderStructure ? newExchange.getIn().toString() : null);\n                    GenericFile<File> genericFile = \n                        FileConsumer.asGenericFile(\n                            zipFile.getParent(), \n                            zipFile, \n                            Charset.defaultCharset().toString());\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                addEntryToZip(zipFile, entryName, buffer, buffer.length);\n                GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                    zipFile.getParent(), zipFile, Charset.defaultCharset().toString());\n                genericFile.bindToExchange(answer);\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        \n        return answer;\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/processor/aggregate/zipfile/ZipAggregationStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"NB"}],"commitId":"2051db4b46b7b423915fa77cad7f54e71358e659","commitMessage":"@@@CAMEL-9111 Camel Tarfile dataformat.  splitter and aggregation strategy.\n\nWith thanks to Sverker Abrahamsson. This closes #599.\n","date":"2015-09-04 04:55:43","modifiedFileCount":"0","status":"M","submitter":"Raul Kripalani"},{"authorTime":"2015-01-24 07:37:04","codes":[{"authorDate":"2016-04-23 02:58:55","commitOrder":6,"curCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File tarFile;\n        Exchange answer = oldExchange;\n\n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n\n        \r\n        if (oldExchange == null) {\n            try {\n                tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, parentDir);\n                LOG.trace(\"Created temporary file: {}\", tarFile);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile));\n        } else {\n            tarFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        \r\n        if (GenericFileMessage.class.isAssignableFrom(newExchange.getIn().getClass())) {\n            try {\n                File appendFile = newExchange.getIn().getMandatoryBody(File.class);\n                if (appendFile != null) {\n                    addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? newExchange.getIn().toString() : null);\n                    GenericFile<File> genericFile =\n                            FileConsumer.asGenericFile(\n                                    tarFile.getParent(),\n                                    tarFile,\n                                    null,      \r\n                                    false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                addEntryToTar(tarFile, entryName, buffer, buffer.length);\n                GenericFile<File> genericFile = FileConsumer.asGenericFile(tarFile.getParent(), tarFile, null, false);\n                genericFile.bindToExchange(answer);\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n\n        return answer;\n    }\n","date":"2016-04-23 02:58:55","endLine":185,"groupId":"5979","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregate","params":"(ExchangeoldExchange@ExchangenewExchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/53/9407621382bb0490aae3a0112d2754b61e3e1a.src","preCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File tarFile;\n        Exchange answer = oldExchange;\n\n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n\n        \r\n        if (oldExchange == null) {\n            try {\n                tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, new File(System.getProperty(\"java.io.tmpdir\")));\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile));\n        } else {\n            tarFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        \r\n        if (GenericFileMessage.class.isAssignableFrom(newExchange.getIn().getClass())) {\n            try {\n                File appendFile = newExchange.getIn().getMandatoryBody(File.class);\n                if (appendFile != null) {\n                    addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? newExchange.getIn().toString() : null);\n                    GenericFile<File> genericFile =\n                            FileConsumer.asGenericFile(\n                                    tarFile.getParent(),\n                                    tarFile,\n                                    null);    \r\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn()\n                        .getMessageId();\n                addEntryToTar(tarFile, entryName, buffer, buffer.length);\n                GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                        tarFile.getParent(), tarFile, null);\n                genericFile.bindToExchange(answer);\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n\n        return answer;\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/processor/aggregate/tarfile/TarAggregationStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2015-01-24 07:37:04","commitOrder":6,"curCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File zipFile;\n        Exchange answer = oldExchange;\n        \n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n    \n        \r\n        if (oldExchange == null) {\n            try {\n                zipFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteZipFileOnCompletion(zipFile));\n        } else {\n            zipFile = oldExchange.getIn().getBody(File.class);\n        }\n        \n        \r\n        if (GenericFileMessage.class.isAssignableFrom(newExchange.getIn().getClass())) {\n            try {\n                File appendFile = newExchange.getIn().getMandatoryBody(File.class);\n                if (appendFile != null) {\n                    addFileToZip(zipFile, appendFile, this.preserveFolderStructure ? newExchange.getIn().toString() : null);\n                    GenericFile<File> genericFile = \n                        FileConsumer.asGenericFile(\n                            zipFile.getParent(), \n                            zipFile, \n                            Charset.defaultCharset().toString());\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                addEntryToZip(zipFile, entryName, buffer, buffer.length);\n                GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                    zipFile.getParent(), zipFile, Charset.defaultCharset().toString());\n                genericFile.bindToExchange(answer);\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        \n        return answer;\n    }\n","date":"2015-01-26 21:50:15","endLine":156,"groupId":"7787","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregate","params":"(ExchangeoldExchange@ExchangenewExchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b1/105fa782e573c87d94aba5630fc9e53af0e8cd.src","preCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File zipFile;\n        Exchange answer = oldExchange;\n        \n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n    \n        \r\n        if (oldExchange == null) {\n            try {\n                zipFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteZipFileOnCompletion(zipFile));\n        } else {\n            zipFile = oldExchange.getIn().getBody(File.class);\n        }\n        \n        \r\n        if (GenericFileMessage.class.isAssignableFrom(newExchange.getIn().getClass())) {\n            try {\n                File appendFile = newExchange.getIn().getMandatoryBody(File.class);\n                if (appendFile != null) {\n                    addFileToZip(zipFile, appendFile, this.preserveFolderStructure ? newExchange.getIn().toString() : null);\n                    GenericFile<File> genericFile = \n                        FileConsumer.asGenericFile(\n                            zipFile.getParent(), \n                            zipFile, \n                            Charset.defaultCharset().toString());\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                addEntryToZip(zipFile, entryName, buffer, buffer.length);\n                GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                    zipFile.getParent(), zipFile, Charset.defaultCharset().toString());\n                genericFile.bindToExchange(answer);\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        \n        return answer;\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/processor/aggregate/zipfile/ZipAggregationStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"N"}],"commitId":"41249ba9daa689852ed45c2e954efc28a3f1d730","commitMessage":"@@@CAMEL-9905: TarAggregationStragegy should delete temporary files\n","date":"2016-04-23 02:58:55","modifiedFileCount":"4","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2016-06-01 21:27:50","codes":[{"authorDate":"2016-04-23 02:58:55","commitOrder":7,"curCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File tarFile;\n        Exchange answer = oldExchange;\n\n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n\n        \r\n        if (oldExchange == null) {\n            try {\n                tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, parentDir);\n                LOG.trace(\"Created temporary file: {}\", tarFile);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile));\n        } else {\n            tarFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        \r\n        if (GenericFileMessage.class.isAssignableFrom(newExchange.getIn().getClass())) {\n            try {\n                File appendFile = newExchange.getIn().getMandatoryBody(File.class);\n                if (appendFile != null) {\n                    addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? newExchange.getIn().toString() : null);\n                    GenericFile<File> genericFile =\n                            FileConsumer.asGenericFile(\n                                    tarFile.getParent(),\n                                    tarFile,\n                                    null,      \r\n                                    false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                addEntryToTar(tarFile, entryName, buffer, buffer.length);\n                GenericFile<File> genericFile = FileConsumer.asGenericFile(tarFile.getParent(), tarFile, null, false);\n                genericFile.bindToExchange(answer);\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n\n        return answer;\n    }\n","date":"2016-04-23 02:58:55","endLine":185,"groupId":"5979","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregate","params":"(ExchangeoldExchange@ExchangenewExchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/53/9407621382bb0490aae3a0112d2754b61e3e1a.src","preCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File tarFile;\n        Exchange answer = oldExchange;\n\n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n\n        \r\n        if (oldExchange == null) {\n            try {\n                tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, parentDir);\n                LOG.trace(\"Created temporary file: {}\", tarFile);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile));\n        } else {\n            tarFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        \r\n        if (GenericFileMessage.class.isAssignableFrom(newExchange.getIn().getClass())) {\n            try {\n                File appendFile = newExchange.getIn().getMandatoryBody(File.class);\n                if (appendFile != null) {\n                    addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? newExchange.getIn().toString() : null);\n                    GenericFile<File> genericFile =\n                            FileConsumer.asGenericFile(\n                                    tarFile.getParent(),\n                                    tarFile,\n                                    null,      \r\n                                    false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                addEntryToTar(tarFile, entryName, buffer, buffer.length);\n                GenericFile<File> genericFile = FileConsumer.asGenericFile(tarFile.getParent(), tarFile, null, false);\n                genericFile.bindToExchange(answer);\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n\n        return answer;\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/processor/aggregate/tarfile/TarAggregationStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"N"},{"authorDate":"2016-06-01 21:27:50","commitOrder":7,"curCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File zipFile;\n        Exchange answer = oldExchange;\n        \n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n    \n        \r\n        if (oldExchange == null) {\n            try {\n                zipFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteZipFileOnCompletion(zipFile));\n        } else {\n            zipFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n        \n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToZip(zipFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                    GenericFile<File> genericFile = \n                        FileConsumer.asGenericFile(\n                            zipFile.getParent(), zipFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToZip(zipFile, entryName, buffer, buffer.length);\n                    GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                            zipFile.getParent(), zipFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        \n        return answer;\n    }\n","date":"2016-06-01 21:27:50","endLine":172,"groupId":"47288","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregate","params":"(ExchangeoldExchange@ExchangenewExchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/89/cc8639b7382ca3bdb9527229c92733fcb8a664.src","preCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File zipFile;\n        Exchange answer = oldExchange;\n        \n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n    \n        \r\n        if (oldExchange == null) {\n            try {\n                zipFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteZipFileOnCompletion(zipFile));\n        } else {\n            zipFile = oldExchange.getIn().getBody(File.class);\n        }\n        \n        \r\n        if (GenericFileMessage.class.isAssignableFrom(newExchange.getIn().getClass())) {\n            try {\n                File appendFile = newExchange.getIn().getMandatoryBody(File.class);\n                if (appendFile != null) {\n                    addFileToZip(zipFile, appendFile, this.preserveFolderStructure ? newExchange.getIn().toString() : null);\n                    GenericFile<File> genericFile = \n                        FileConsumer.asGenericFile(\n                            zipFile.getParent(), \n                            zipFile, \n                            Charset.defaultCharset().toString());\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                addEntryToZip(zipFile, entryName, buffer, buffer.length);\n                GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                    zipFile.getParent(), zipFile, Charset.defaultCharset().toString());\n                genericFile.bindToExchange(answer);\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        \n        return answer;\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/processor/aggregate/zipfile/ZipAggregationStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"6d1d3aa3f0cab76817878f99454ddc892f9f639d","commitMessage":"@@@CAMEL-10007: camel-zipfile - ZipAggregationStrategy should ignore zero byte files. Also close resources so works better on windows.\n","date":"2016-06-01 21:27:50","modifiedFileCount":"1","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2016-06-01 21:27:50","codes":[{"authorDate":"2016-06-01 21:30:43","commitOrder":8,"curCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File tarFile;\n        Exchange answer = oldExchange;\n\n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n\n        \r\n        if (oldExchange == null) {\n            try {\n                tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, parentDir);\n                LOG.trace(\"Created temporary file: {}\", tarFile);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile));\n        } else {\n            tarFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n\n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                    GenericFile<File> genericFile =\n                            FileConsumer.asGenericFile(\n                                    tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToTar(tarFile, entryName, buffer, buffer.length);\n                    GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                            tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        return answer;\n    }\n","date":"2016-06-01 21:30:43","endLine":193,"groupId":"47288","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregate","params":"(ExchangeoldExchange@ExchangenewExchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/c1/1be84a5abc97c88edab171c68bc0987f9bead3.src","preCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File tarFile;\n        Exchange answer = oldExchange;\n\n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n\n        \r\n        if (oldExchange == null) {\n            try {\n                tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, parentDir);\n                LOG.trace(\"Created temporary file: {}\", tarFile);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile));\n        } else {\n            tarFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        \r\n        if (GenericFileMessage.class.isAssignableFrom(newExchange.getIn().getClass())) {\n            try {\n                File appendFile = newExchange.getIn().getMandatoryBody(File.class);\n                if (appendFile != null) {\n                    addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? newExchange.getIn().toString() : null);\n                    GenericFile<File> genericFile =\n                            FileConsumer.asGenericFile(\n                                    tarFile.getParent(),\n                                    tarFile,\n                                    null,      \r\n                                    false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                addEntryToTar(tarFile, entryName, buffer, buffer.length);\n                GenericFile<File> genericFile = FileConsumer.asGenericFile(tarFile.getParent(), tarFile, null, false);\n                genericFile.bindToExchange(answer);\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n\n        return answer;\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/processor/aggregate/tarfile/TarAggregationStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2016-06-01 21:27:50","commitOrder":8,"curCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File zipFile;\n        Exchange answer = oldExchange;\n        \n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n    \n        \r\n        if (oldExchange == null) {\n            try {\n                zipFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteZipFileOnCompletion(zipFile));\n        } else {\n            zipFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n        \n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToZip(zipFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                    GenericFile<File> genericFile = \n                        FileConsumer.asGenericFile(\n                            zipFile.getParent(), zipFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToZip(zipFile, entryName, buffer, buffer.length);\n                    GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                            zipFile.getParent(), zipFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        \n        return answer;\n    }\n","date":"2016-06-01 21:27:50","endLine":172,"groupId":"47288","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregate","params":"(ExchangeoldExchange@ExchangenewExchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/89/cc8639b7382ca3bdb9527229c92733fcb8a664.src","preCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File zipFile;\n        Exchange answer = oldExchange;\n        \n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n    \n        \r\n        if (oldExchange == null) {\n            try {\n                zipFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteZipFileOnCompletion(zipFile));\n        } else {\n            zipFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n        \n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToZip(zipFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                    GenericFile<File> genericFile = \n                        FileConsumer.asGenericFile(\n                            zipFile.getParent(), zipFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToZip(zipFile, entryName, buffer, buffer.length);\n                    GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                            zipFile.getParent(), zipFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        \n        return answer;\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/processor/aggregate/zipfile/ZipAggregationStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"}],"commitId":"f897449856584f64c1ce19cfb38e130ffc1edb4a","commitMessage":"@@@CAMEL-10007: camel-tarfile - TarAggregationStrategy should ignore zero byte files. Also close resources so works better on windows.\n","date":"2016-06-01 21:30:43","modifiedFileCount":"1","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2018-09-10 16:44:48","codes":[{"authorDate":"2018-09-10 16:44:48","commitOrder":9,"curCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File tarFile;\n        Exchange answer = oldExchange;\n\n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n\n        \r\n        if (oldExchange == null) {\n            try {\n                tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, this.parentDir);\n                LOG.trace(\"Created temporary file: {}\", tarFile);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile));\n        } else {\n            tarFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n\n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                    GenericFile<File> genericFile =\n                            FileConsumer.asGenericFile(\n                                    tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToTar(tarFile, entryName, buffer, buffer.length);\n                    GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                            tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        return answer;\n    }\n","date":"2018-10-21 15:49:18","endLine":193,"groupId":"47288","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregate","params":"(ExchangeoldExchange@ExchangenewExchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/51/0012bb0a096deb6f1101ad14b87201dbe94b5b.src","preCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File tarFile;\n        Exchange answer = oldExchange;\n\n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n\n        \r\n        if (oldExchange == null) {\n            try {\n                tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, parentDir);\n                LOG.trace(\"Created temporary file: {}\", tarFile);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile));\n        } else {\n            tarFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n\n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                    GenericFile<File> genericFile =\n                            FileConsumer.asGenericFile(\n                                    tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToTar(tarFile, entryName, buffer, buffer.length);\n                    GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                            tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        return answer;\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/processor/aggregate/tarfile/TarAggregationStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"},{"authorDate":"2018-09-10 16:44:48","commitOrder":9,"curCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File zipFile;\n        Exchange answer = oldExchange;\n        \n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n    \n        \r\n        if (oldExchange == null) {\n            try {\n                zipFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, this.parentDir);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteZipFileOnCompletion(zipFile));\n        } else {\n            zipFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n        \n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToZip(zipFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                    GenericFile<File> genericFile = \n                        FileConsumer.asGenericFile(\n                            zipFile.getParent(), zipFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToZip(zipFile, entryName, buffer, buffer.length);\n                    GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                            zipFile.getParent(), zipFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        \n        return answer;\n    }\n","date":"2018-10-21 15:49:18","endLine":191,"groupId":"47288","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregate","params":"(ExchangeoldExchange@ExchangenewExchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/4e/34517e1cf68edd56976a151d5a7a611ee2833e.src","preCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File zipFile;\n        Exchange answer = oldExchange;\n        \n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n    \n        \r\n        if (oldExchange == null) {\n            try {\n                zipFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteZipFileOnCompletion(zipFile));\n        } else {\n            zipFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n        \n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToZip(zipFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                    GenericFile<File> genericFile = \n                        FileConsumer.asGenericFile(\n                            zipFile.getParent(), zipFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToZip(zipFile, entryName, buffer, buffer.length);\n                    GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                            zipFile.getParent(), zipFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        \n        return answer;\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/processor/aggregate/zipfile/ZipAggregationStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"}],"commitId":"bb92b300a776b2ff367f473f467c52a44c928f63","commitMessage":"@@@[CAMEL-12818] Remove deprecated stuff\n","date":"2018-10-21 15:49:18","modifiedFileCount":"987","status":"M","submitter":"Guillaume Nodet"},{"authorTime":"2019-07-17 06:21:13","codes":[{"authorDate":"2018-09-10 16:44:48","commitOrder":10,"curCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File tarFile;\n        Exchange answer = oldExchange;\n\n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n\n        \r\n        if (oldExchange == null) {\n            try {\n                tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, this.parentDir);\n                LOG.trace(\"Created temporary file: {}\", tarFile);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile));\n        } else {\n            tarFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n\n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                    GenericFile<File> genericFile =\n                            FileConsumer.asGenericFile(\n                                    tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToTar(tarFile, entryName, buffer, buffer.length);\n                    GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                            tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        return answer;\n    }\n","date":"2018-10-21 15:49:18","endLine":193,"groupId":"47288","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregate","params":"(ExchangeoldExchange@ExchangenewExchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/51/0012bb0a096deb6f1101ad14b87201dbe94b5b.src","preCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File tarFile;\n        Exchange answer = oldExchange;\n\n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n\n        \r\n        if (oldExchange == null) {\n            try {\n                tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, this.parentDir);\n                LOG.trace(\"Created temporary file: {}\", tarFile);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile));\n        } else {\n            tarFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n\n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                    GenericFile<File> genericFile =\n                            FileConsumer.asGenericFile(\n                                    tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToTar(tarFile, entryName, buffer, buffer.length);\n                    GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                            tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        return answer;\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/processor/aggregate/tarfile/TarAggregationStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"},{"authorDate":"2019-07-17 06:21:13","commitOrder":10,"curCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File zipFile;\n        Exchange answer = oldExchange;\n        \n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n    \n        \r\n        if (oldExchange == null) {\n            try {\n                zipFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, this.parentDir);\n                newZipFile(zipFile);\n            } catch (IOException | URISyntaxException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteZipFileOnCompletion(zipFile));\n        } else {\n            zipFile = oldExchange.getIn().getBody(File.class);\n        }\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n\n        String charset = ExchangeHelper.getCharsetName(newExchange, true);\n\n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToZip(zipFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToZip(zipFile, entryName, buffer, charset);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n\n        GenericFile<File> genericFile = FileConsumer.asGenericFile(zipFile.getParent(), zipFile, charset, false);\n        genericFile.bindToExchange(answer);\n\n        return answer;\n    }\n","date":"2019-07-19 15:35:49","endLine":205,"groupId":"25444","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregate","params":"(ExchangeoldExchange@ExchangenewExchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b6/e34543b58e4149cb0f40588ecb16f3f1826e1d.src","preCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File zipFile;\n        Exchange answer = oldExchange;\n        \n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n    \n        \r\n        if (oldExchange == null) {\n            try {\n                zipFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, this.parentDir);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteZipFileOnCompletion(zipFile));\n        } else {\n            zipFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n        \n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToZip(zipFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                    GenericFile<File> genericFile = \n                        FileConsumer.asGenericFile(\n                            zipFile.getParent(), zipFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToZip(zipFile, entryName, buffer, buffer.length);\n                    GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                            zipFile.getParent(), zipFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        \n        return answer;\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/processor/aggregate/zipfile/ZipAggregationStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"30b93af3fc6f07e0dcdf0ccc2c843d7ea0b217ee","commitMessage":"@@@CAMEL-13399: Optimized ZipAggregationStrategy to use ZipFileSystem\n","date":"2019-07-19 15:35:49","modifiedFileCount":"5","status":"M","submitter":"Jan Bedn??"},{"authorTime":"2020-01-16 23:21:39","codes":[{"authorDate":"2020-01-16 23:21:39","commitOrder":11,"curCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File tarFile;\n        Exchange answer = oldExchange;\n\n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n\n        \r\n        if (oldExchange == null) {\n            try {\n                tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, this.parentDir);\n                LOG.trace(\"Created temporary file: {}\", tarFile);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.adapt(ExtendedExchange.class).addOnCompletion(new DeleteTarFileOnCompletion(tarFile));\n        } else {\n            tarFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n\n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                    GenericFile<File> genericFile =\n                            FileConsumer.asGenericFile(\n                                    tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToTar(tarFile, entryName, buffer, buffer.length);\n                    GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                            tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        return answer;\n    }\n","date":"2020-01-17 02:39:59","endLine":195,"groupId":"101500","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"aggregate","params":"(ExchangeoldExchange@ExchangenewExchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/e3/8e285688d0df4b186dee104974ac50f27d409a.src","preCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File tarFile;\n        Exchange answer = oldExchange;\n\n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n\n        \r\n        if (oldExchange == null) {\n            try {\n                tarFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, this.parentDir);\n                LOG.trace(\"Created temporary file: {}\", tarFile);\n            } catch (IOException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteTarFileOnCompletion(tarFile));\n        } else {\n            tarFile = oldExchange.getIn().getBody(File.class);\n        }\n\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n\n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToTar(tarFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                    GenericFile<File> genericFile =\n                            FileConsumer.asGenericFile(\n                                    tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToTar(tarFile, entryName, buffer, buffer.length);\n                    GenericFile<File> genericFile = FileConsumer.asGenericFile(\n                            tarFile.getParent(), tarFile, Charset.defaultCharset().toString(), false);\n                    genericFile.bindToExchange(answer);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n        return answer;\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/processor/aggregate/tarfile/TarAggregationStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"M"},{"authorDate":"2020-01-16 23:21:39","commitOrder":11,"curCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File zipFile;\n        Exchange answer = oldExchange;\n        \n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n    \n        \r\n        if (oldExchange == null) {\n            try {\n                zipFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, this.parentDir);\n                newZipFile(zipFile);\n            } catch (IOException | URISyntaxException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.adapt(ExtendedExchange.class).addOnCompletion(new DeleteZipFileOnCompletion(zipFile));\n        } else {\n            zipFile = oldExchange.getIn().getBody(File.class);\n        }\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n\n        String charset = ExchangeHelper.getCharsetName(newExchange, true);\n\n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToZip(zipFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToZip(zipFile, entryName, buffer, charset);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n\n        GenericFile<File> genericFile = FileConsumer.asGenericFile(zipFile.getParent(), zipFile, charset, false);\n        genericFile.bindToExchange(answer);\n\n        return answer;\n    }\n","date":"2020-01-17 02:39:59","endLine":206,"groupId":"101500","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"aggregate","params":"(ExchangeoldExchange@ExchangenewExchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/d2/0eec12b5458773da58378970869b7409a16a89.src","preCode":"    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {\n        File zipFile;\n        Exchange answer = oldExchange;\n        \n        \r\n        if (newExchange == null) {\n            return oldExchange;\n        }\n    \n        \r\n        if (oldExchange == null) {\n            try {\n                zipFile = FileUtil.createTempFile(this.filePrefix, this.fileSuffix, this.parentDir);\n                newZipFile(zipFile);\n            } catch (IOException | URISyntaxException e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n            answer = newExchange;\n            answer.addOnCompletion(new DeleteZipFileOnCompletion(zipFile));\n        } else {\n            zipFile = oldExchange.getIn().getBody(File.class);\n        }\n        Object body = newExchange.getIn().getBody();\n        if (body instanceof WrappedFile) {\n            body = ((WrappedFile) body).getFile();\n        }\n\n        String charset = ExchangeHelper.getCharsetName(newExchange, true);\n\n        if (body instanceof File) {\n            try {\n                File appendFile = (File) body;\n                \r\n                if (appendFile.length() > 0) {\n                    String entryName = preserveFolderStructure ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addFileToZip(zipFile, appendFile, this.preserveFolderStructure ? entryName : null);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        } else {\n            \r\n            try {\n                byte[] buffer = newExchange.getIn().getMandatoryBody(byte[].class);\n                \r\n                if (buffer.length > 0) {\n                    String entryName = useFilenameHeader ? newExchange.getIn().getHeader(Exchange.FILE_NAME, String.class) : newExchange.getIn().getMessageId();\n                    addEntryToZip(zipFile, entryName, buffer, charset);\n                }\n            } catch (Exception e) {\n                throw new GenericFileOperationFailedException(e.getMessage(), e);\n            }\n        }\n\n        GenericFile<File> genericFile = FileConsumer.asGenericFile(zipFile.getParent(), zipFile, charset, false);\n        genericFile.bindToExchange(answer);\n\n        return answer;\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/processor/aggregate/zipfile/ZipAggregationStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"8a18b8c67533bd16340f0848b15df653ee2dc5a6","commitMessage":"@@@CAMEL-14409: camel-core - ExtendedExchange for advanced API\n","date":"2020-01-17 02:39:59","modifiedFileCount":"47","status":"M","submitter":"Claus Ibsen"}]
