[{"authorTime":"2013-03-17 15:05:46","codes":[{"authorDate":"2015-09-04 04:54:51","commitOrder":3,"curCode":"    public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            InputStream is = exchange.getIn().getMandatoryBody(InputStream.class);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, new BufferedInputStream(is));\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, baos);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return baos.toByteArray();\n\n            } finally {\n                IOHelper.close(tis, baos);\n            }\n        }\n    }\n","date":"2015-09-04 04:55:43","endLine":110,"groupId":"23812","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(Exchangeexchange@InputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/75/4d932e630d2cb828fb9cd7f912ec1479aaadb3.src","preCode":"    public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            InputStream is = exchange.getIn().getMandatoryBody(InputStream.class);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, new BufferedInputStream(is));\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, baos);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return baos.toByteArray();\n\n            } finally {\n                IOHelper.close(tis, baos);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"},{"authorDate":"2013-03-17 15:05:46","commitOrder":3,"curCode":"    public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            InputStream is = exchange.getIn().getMandatoryBody(\n                    InputStream.class);\n            ZipInputStream zis = new ZipInputStream(is);\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, baos);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\n                            \"Zip file has more than 1 entry.\");\n                }\n\n                return baos.toByteArray();\n\n            } finally {\n                IOHelper.close(zis, baos);\n            }\n        }\n    }\n","date":"2013-03-17 15:05:46","endLine":99,"groupId":"23812","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(Exchangeexchange@InputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/78/336f4e2cd03fa0fa0bd24da5dbe2af47a1664c.src","preCode":"    public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            InputStream is = exchange.getIn().getMandatoryBody(\n                    InputStream.class);\n            ZipInputStream zis = new ZipInputStream(is);\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, baos);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\n                            \"Zip file has more than 1 entry.\");\n                }\n\n                return baos.toByteArray();\n\n            } finally {\n                IOHelper.close(zis, baos);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"NB"}],"commitId":"2051db4b46b7b423915fa77cad7f54e71358e659","commitMessage":"@@@CAMEL-9111 Camel Tarfile dataformat.  splitter and aggregation strategy.\n\nWith thanks to Sverker Abrahamsson. This closes #599.\n","date":"2015-09-04 04:55:43","modifiedFileCount":"0","status":"M","submitter":"Raul Kripalani"},{"authorTime":"2015-11-05 20:36:46","codes":[{"authorDate":"2015-09-04 04:54:51","commitOrder":4,"curCode":"    public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            InputStream is = exchange.getIn().getMandatoryBody(InputStream.class);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, new BufferedInputStream(is));\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, baos);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return baos.toByteArray();\n\n            } finally {\n                IOHelper.close(tis, baos);\n            }\n        }\n    }\n","date":"2015-09-04 04:55:43","endLine":110,"groupId":"23812","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(Exchangeexchange@InputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/75/4d932e630d2cb828fb9cd7f912ec1479aaadb3.src","preCode":"    public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            InputStream is = exchange.getIn().getMandatoryBody(InputStream.class);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, new BufferedInputStream(is));\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, baos);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return baos.toByteArray();\n\n            } finally {\n                IOHelper.close(tis, baos);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"N"},{"authorDate":"2015-11-05 20:36:46","commitOrder":4,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2015-11-05 20:36:46","endLine":98,"groupId":"14968","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b2/51201d2eb33b263338090bdf354b97cce6f33b.src","preCode":"    public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            InputStream is = exchange.getIn().getMandatoryBody(\n                    InputStream.class);\n            ZipInputStream zis = new ZipInputStream(is);\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, baos);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return baos.toByteArray();\n\n            } finally {\n                IOHelper.close(zis, baos);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"53f3afaf34ad1e079d93b583ecdf159d357f6bb7","commitMessage":"@@@CAMEL-9274: Data formats unmarshal should use OutputStreamBuilder so we can better support stream caching. Many thanks to Aaron Whiteside for the patch.\n","date":"2015-11-05 20:36:46","modifiedFileCount":"9","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2015-11-05 20:36:46","codes":[{"authorDate":"2015-11-19 15:48:53","commitOrder":5,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","date":"2015-11-19 15:48:53","endLine":113,"groupId":"10521","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/54/65edcc681d1a2662f1be5a099b65bc4d206f3f.src","preCode":"    public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            InputStream is = exchange.getIn().getMandatoryBody(InputStream.class);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, new BufferedInputStream(is));\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, baos);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return baos.toByteArray();\n\n            } finally {\n                IOHelper.close(tis, baos);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2015-11-05 20:36:46","commitOrder":5,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2015-11-05 20:36:46","endLine":98,"groupId":"14968","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b2/51201d2eb33b263338090bdf354b97cce6f33b.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"af73eb8fe3b695f4c8f8c2a1d1f7818af99261a5","commitMessage":"@@@CAMEL-9274: More data formats support stream caching directly. Thanks to Aaron Whiteside for the patch.\n","date":"2015-11-19 15:48:53","modifiedFileCount":"5","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2015-11-05 20:36:46","codes":[{"authorDate":"2015-12-19 19:48:27","commitOrder":6,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange, stream);\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","date":"2015-12-20 14:05:46","endLine":113,"groupId":"10521","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/49/b1a825fc7a4e3086085de4d12633bded212867.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2015-11-05 20:36:46","commitOrder":6,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2015-11-05 20:36:46","endLine":98,"groupId":"14968","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b2/51201d2eb33b263338090bdf354b97cce6f33b.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"929d437cc2dd73b284d38485adf1931c4700b9c1","commitMessage":"@@@CAMEL-9375: TarSplitter includes one extra empty entry at the end.\n","date":"2015-12-20 14:05:46","modifiedFileCount":"3","status":"M","submitter":"Sami Nurminen"},{"authorTime":"2015-11-05 20:36:46","codes":[{"authorDate":"2016-03-22 20:12:57","commitOrder":7,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","date":"2016-03-22 21:18:02","endLine":113,"groupId":"10521","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/54/65edcc681d1a2662f1be5a099b65bc4d206f3f.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange, stream);\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2015-11-05 20:36:46","commitOrder":7,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2015-11-05 20:36:46","endLine":98,"groupId":"14968","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b2/51201d2eb33b263338090bdf354b97cce6f33b.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"92cfda21164ed34debaa133ae37c46bfbe7dbfcf","commitMessage":"@@@Revert \"CAMEL-9375: TarSplitter includes one extra empty entry at the end.\"\n\nThis reverts commit 929d437cc2dd73b284d38485adf1931c4700b9c1.\n","date":"2016-03-22 21:18:02","modifiedFileCount":"3","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2017-03-13 16:04:44","codes":[{"authorDate":"2016-03-22 20:12:57","commitOrder":8,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","date":"2016-03-22 21:18:02","endLine":113,"groupId":"10521","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/54/65edcc681d1a2662f1be5a099b65bc4d206f3f.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2017-03-13 16:04:44","commitOrder":8,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (supportEmptyDirectory) {\n            exchange.getIn().setHeader(\"unzipEmptyDirectorySupported\", true);\n        } else {\n            exchange.getIn().setHeader(\"unzipEmptyDirectorySupported\", false);\n        }\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2017-03-15 01:29:38","endLine":104,"groupId":"14968","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/37/04d943513f94d2fe9209f4044e14f6c6f62329.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"033bb9d9a1f0db458c7121d93aabeefe6d4bc476","commitMessage":"@@@CAMEL-10791-added option to handle empty directories while unzipping\n","date":"2017-03-15 01:29:38","modifiedFileCount":"2","status":"M","submitter":"onders86"},{"authorTime":"2017-03-14 02:24:47","codes":[{"authorDate":"2016-03-22 20:12:57","commitOrder":9,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","date":"2016-03-22 21:18:02","endLine":113,"groupId":"10521","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/54/65edcc681d1a2662f1be5a099b65bc4d206f3f.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2017-03-14 02:24:47","commitOrder":9,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        exchange.getIn().setHeader(\"unzipEmptyDirectorySupported\", isSupportEmptyDirectory());\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2017-03-15 01:29:38","endLine":100,"groupId":"14968","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/8a/e24b2e2eb016893fe86fc9f057df41d3d1481c.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (supportEmptyDirectory) {\n            exchange.getIn().setHeader(\"unzipEmptyDirectorySupported\", true);\n        } else {\n            exchange.getIn().setHeader(\"unzipEmptyDirectorySupported\", false);\n        }\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"928cdb1edf7754a990b23d058fced8fd35ed9de6","commitMessage":"@@@CAMEL-10791-only component update\n","date":"2017-03-15 01:29:38","modifiedFileCount":"3","status":"M","submitter":"onders86"},{"authorTime":"2017-03-14 18:12:26","codes":[{"authorDate":"2016-03-22 20:12:57","commitOrder":10,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","date":"2016-03-22 21:18:02","endLine":113,"groupId":"10521","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/54/65edcc681d1a2662f1be5a099b65bc4d206f3f.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2017-03-14 18:12:26","commitOrder":10,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange.getIn());\n            zipIterator.setSupportIteratorForEmptyDirectory(supportIteratorForEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2017-03-15 01:29:38","endLine":101,"groupId":"14968","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/72/b4ce55581ff7a4b27d21e6f65238eb51a7fce5.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        exchange.getIn().setHeader(\"unzipEmptyDirectorySupported\", isSupportEmptyDirectory());\n        if (usingIterator) {\n            return new ZipIterator(exchange.getIn());\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"fc72a19af4722ae162de1f15bd14fe18276cb70e","commitMessage":"@@@CAMEL-10791-review adjustment and some proper naming for the option\n","date":"2017-03-15 01:29:38","modifiedFileCount":"3","status":"M","submitter":"onders86"},{"authorTime":"2017-03-14 23:31:54","codes":[{"authorDate":"2016-03-22 20:12:57","commitOrder":11,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","date":"2016-03-22 21:18:02","endLine":113,"groupId":"10521","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/54/65edcc681d1a2662f1be5a099b65bc4d206f3f.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2017-03-14 23:31:54","commitOrder":11,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange.getIn());\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2017-03-15 01:29:38","endLine":101,"groupId":"14968","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/4b/b582419165e5203c749217b4833bb6d6daf048.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange.getIn());\n            zipIterator.setSupportIteratorForEmptyDirectory(supportIteratorForEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"09cf89cc702aa3d7e3b5bed68651939341635df5","commitMessage":"@@@CAMEL-10701 - proper naming considering review and added option for xml dsl\n","date":"2017-03-15 01:29:38","modifiedFileCount":"4","status":"M","submitter":"onders86"},{"authorTime":"2017-03-14 23:31:54","codes":[{"authorDate":"2017-03-19 05:03:30","commitOrder":12,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n        \tTarIterator tarIterator = new TarIterator(exchange.getIn(), stream);\n        \ttarIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n        \treturn tarIterator;\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","date":"2017-03-23 04:23:44","endLine":116,"groupId":"10521","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/1f/17f308509e5070b273b3e07d4c1158f19abde5.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            return new TarIterator(exchange.getIn(), stream);\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2017-03-14 23:31:54","commitOrder":12,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange.getIn());\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2017-03-15 01:29:38","endLine":101,"groupId":"14968","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/4b/b582419165e5203c749217b4833bb6d6daf048.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange.getIn());\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"}],"commitId":"47f863e12a14f4b500d3a77db1d150b03aa0cbb4","commitMessage":"@@@CAMEL-11016-add allowEmptyDirectory option added\n","date":"2017-03-23 04:23:44","modifiedFileCount":"3","status":"M","submitter":"onders86"},{"authorTime":"2017-03-14 23:31:54","codes":[{"authorDate":"2017-06-28 00:10:12","commitOrder":13,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            TarIterator tarIterator = new TarIterator(exchange, stream);\n            tarIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return tarIterator;\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","date":"2017-06-28 23:39:23","endLine":116,"groupId":"10521","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b2/26c6ee777a44fd783a8bc8b740f0ff2e34a5ab.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            TarIterator tarIterator = new TarIterator(exchange.getIn(), stream);\n            tarIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return tarIterator;\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2017-03-14 23:31:54","commitOrder":13,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange.getIn());\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2017-03-15 01:29:38","endLine":101,"groupId":"14968","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/4b/b582419165e5203c749217b4833bb6d6daf048.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange.getIn());\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"}],"commitId":"c40ccf32dcd898a2a0d680a36424f23e22df7122","commitMessage":"@@@CAMEL-11466 align source code with camel-zipfile + add non regression unit test to test if resources correctly released after splitting tar\n","date":"2017-06-28 23:39:23","modifiedFileCount":"3","status":"M","submitter":"Adrien PAILHES"},{"authorTime":"2017-06-26 18:43:12","codes":[{"authorDate":"2017-06-28 00:10:12","commitOrder":14,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            TarIterator tarIterator = new TarIterator(exchange, stream);\n            tarIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return tarIterator;\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","date":"2017-06-28 23:39:23","endLine":116,"groupId":"10521","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b2/26c6ee777a44fd783a8bc8b740f0ff2e34a5ab.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            TarIterator tarIterator = new TarIterator(exchange, stream);\n            tarIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return tarIterator;\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"},{"authorDate":"2017-06-26 18:43:12","commitOrder":14,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange, inputStream);\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2017-06-28 23:44:59","endLine":101,"groupId":"14968","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/17/1858e0b691d4d19621b2924fa57d7ef5cb95fb.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange.getIn());\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"bd350d89e213679b67f2e832316118183fef4966","commitMessage":"@@@CAMEL-11454 use provided input stream when unmarshalling instead of creating a new one\n","date":"2017-06-28 23:44:59","modifiedFileCount":"3","status":"M","submitter":"Adrien PAILHES"},{"authorTime":"2019-08-04 17:50:27","codes":[{"authorDate":"2017-06-28 00:10:12","commitOrder":15,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            TarIterator tarIterator = new TarIterator(exchange, stream);\n            tarIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return tarIterator;\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","date":"2017-06-28 23:39:23","endLine":116,"groupId":"10521","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b2/26c6ee777a44fd783a8bc8b740f0ff2e34a5ab.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            TarIterator tarIterator = new TarIterator(exchange, stream);\n            tarIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return tarIterator;\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"},{"authorDate":"2019-08-04 17:50:27","commitOrder":15,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange, inputStream);\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getMessage().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2019-08-04 17:50:27","endLine":113,"groupId":"43882","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/fe/889f5994a09af1ebbb4e67e2350cbe8cee0ac1.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange, inputStream);\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"096ec2aa953065fca5141d415d74eaf00e5aa637","commitMessage":"@@@Polished\n","date":"2019-08-04 17:50:27","modifiedFileCount":"1","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2020-03-21 00:07:25","codes":[{"authorDate":"2017-06-28 00:10:12","commitOrder":16,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            TarIterator tarIterator = new TarIterator(exchange, stream);\n            tarIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return tarIterator;\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","date":"2017-06-28 23:39:23","endLine":116,"groupId":"10521","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b2/26c6ee777a44fd783a8bc8b740f0ff2e34a5ab.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            TarIterator tarIterator = new TarIterator(exchange, stream);\n            tarIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return tarIterator;\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"},{"authorDate":"2020-03-21 00:07:25","commitOrder":16,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange, inputStream);\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getMessage().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                } else {\n                    throw new IllegalStateException(\"Unable to unzip the file, it may be corrupted.\");\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2020-03-21 00:07:25","endLine":115,"groupId":"43882","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/f1/686423a7db9f337d457c47fe77ab0349bed7ac.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange, inputStream);\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getMessage().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"e1ed962275890e99cc8544f598ecfa3301aa9671","commitMessage":"@@@Merge pull request #3657 from omarsmak/CAMEL-14748\n\nCAMEL-14748: Throw an error with corrupt zip file","date":"2020-03-21 00:07:25","modifiedFileCount":"2","status":"M","submitter":"Omar Al-Safi"},{"authorTime":"2020-03-21 00:07:25","codes":[{"authorDate":"2020-03-23 19:16:09","commitOrder":17,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            TarIterator tarIterator = new TarIterator(exchange, stream);\n            tarIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return tarIterator;\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getMessage().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                } else {\n                    throw new IllegalStateException(\"Unable to untar the file, it may be corrupted.\");\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","date":"2020-03-23 19:16:09","endLine":127,"groupId":"43882","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/25/89795637bfe634e95f676b05e6f5f8136985e4.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            TarIterator tarIterator = new TarIterator(exchange, stream);\n            tarIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return tarIterator;\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getOut().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2020-03-21 00:07:25","commitOrder":17,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange, inputStream);\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getMessage().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                } else {\n                    throw new IllegalStateException(\"Unable to unzip the file, it may be corrupted.\");\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2020-03-21 00:07:25","endLine":115,"groupId":"43882","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/f1/686423a7db9f337d457c47fe77ab0349bed7ac.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange, inputStream);\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getMessage().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                } else {\n                    throw new IllegalStateException(\"Unable to unzip the file, it may be corrupted.\");\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"}],"commitId":"03706629b87c310466c650c15ecb741ee13e22bc","commitMessage":"@@@Merge pull request #3664 from omarsmak/CAMEL-14752\n\nCAMEL-14752: Throw an exception on corrupted tarfiles","date":"2020-03-23 19:16:09","modifiedFileCount":"2","status":"M","submitter":"Omar Al-Safi"},{"authorTime":"2020-10-02 17:41:21","codes":[{"authorDate":"2020-10-02 17:41:21","commitOrder":18,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            TarIterator tarIterator = new TarIterator(exchange, stream);\n            tarIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return tarIterator;\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory()\n                    .createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getMessage().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb, IOHelper.DEFAULT_BUFFER_SIZE, false, maxDecompressedSize);\n                } else {\n                    throw new IllegalStateException(\"Unable to untar the file, it may be corrupted.\");\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","date":"2020-10-02 17:41:21","endLine":132,"groupId":"101496","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ed/3332ef09c80a46016a1144dd8594b595b3615e.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {\n        if (usingIterator) {\n            TarIterator tarIterator = new TarIterator(exchange, stream);\n            tarIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return tarIterator;\n        } else {\n            BufferedInputStream bis = new BufferedInputStream(stream);\n            TarArchiveInputStream tis = (TarArchiveInputStream) new ArchiveStreamFactory()\n                    .createArchiveInputStream(ArchiveStreamFactory.TAR, bis);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                TarArchiveEntry entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    exchange.getMessage().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(tis, osb);\n                } else {\n                    throw new IllegalStateException(\"Unable to untar the file, it may be corrupted.\");\n                }\n\n                entry = tis.getNextTarEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Tar file has more than 1 entry.\");\n                }\n\n                return osb.build();\n\n            } finally {\n                IOHelper.close(osb, tis, bis);\n            }\n        }\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2020-10-02 17:41:21","commitOrder":18,"curCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange, inputStream);\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getMessage().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb, IOHelper.DEFAULT_BUFFER_SIZE, false, maxDecompressedSize);\n                } else {\n                    throw new IllegalStateException(\"Unable to unzip the file, it may be corrupted.\");\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","date":"2020-10-02 17:41:21","endLine":119,"groupId":"101496","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"unmarshal","params":"(finalExchangeexchange@finalInputStreaminputStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/e1/295d628b73f41ae7761e3d8f847bb29f44101d.src","preCode":"    public Object unmarshal(final Exchange exchange, final InputStream inputStream) throws Exception {\n        if (usingIterator) {\n            ZipIterator zipIterator = new ZipIterator(exchange, inputStream);\n            zipIterator.setAllowEmptyDirectory(allowEmptyDirectory);\n            return zipIterator;\n        } else {\n            ZipInputStream zis = new ZipInputStream(inputStream);\n            OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange);\n\n            try {\n                ZipEntry entry = zis.getNextEntry();\n                if (entry != null) {\n                    exchange.getMessage().setHeader(FILE_NAME, entry.getName());\n                    IOHelper.copy(zis, osb);\n                } else {\n                    throw new IllegalStateException(\"Unable to unzip the file, it may be corrupted.\");\n                }\n\n                entry = zis.getNextEntry();\n                if (entry != null) {\n                    throw new IllegalStateException(\"Zip file has more than 1 entry.\");\n                }\n\n                return osb.build();\n            } finally {\n                IOHelper.close(zis, osb);\n            }\n        }\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"c63633853a2bbfb01ea0b951de57c2ddfa0e41e0","commitMessage":"@@@CAMEL-15591 - Put a configurable limit on the size of unzipped data using camel-zipfile + camel-tarfile (#4314)\n\n","date":"2020-10-02 17:41:21","modifiedFileCount":"12","status":"M","submitter":"Colm O hEigeartaigh"}]
