[{"authorTime":"2013-02-16 18:07:20","codes":[{"authorDate":"2015-09-04 04:54:51","commitOrder":2,"curCode":"    public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filename != null) {\n            filename = new File(filename).getName(); \r\n        } else {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        TarArchiveEntry entry = new TarArchiveEntry(filename);\n        entry.setSize(filelength);\n        tos.putArchiveEntry(entry);\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2015-09-04 04:55:43","endLine":81,"groupId":"41254","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"marshal","params":"(Exchangeexchange@Objectgraph@OutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/75/4d932e630d2cb828fb9cd7f912ec1479aaadb3.src","preCode":"    public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filename != null) {\n            filename = new File(filename).getName(); \r\n        } else {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        TarArchiveEntry entry = new TarArchiveEntry(filename);\n        entry.setSize(filelength);\n        tos.putArchiveEntry(entry);\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2013-02-16 18:07:20","commitOrder":2,"curCode":"    public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filename != null) {\n            filename = new File(filename).getName(); \r\n        } else {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n        zos.putNextEntry(new ZipEntry(filename));\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2013-02-16 18:07:20","endLine":63,"groupId":"27023","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"marshal","params":"(Exchangeexchange@Objectgraph@OutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/3d/c9fdd852607198ba0fd3582a2bf1ec8a7b2a73.src","preCode":"    public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filename != null) {\n            filename = new File(filename).getName(); \r\n        } else {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n        zos.putNextEntry(new ZipEntry(filename));\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"NB"}],"commitId":"2051db4b46b7b423915fa77cad7f54e71358e659","commitMessage":"@@@CAMEL-9111 Camel Tarfile dataformat.  splitter and aggregation strategy.\n\nWith thanks to Sverker Abrahamsson. This closes #599.\n","date":"2015-09-04 04:55:43","modifiedFileCount":"0","status":"M","submitter":"Raul Kripalani"},{"authorTime":"2015-10-18 03:38:40","codes":[{"authorDate":"2015-09-04 04:54:51","commitOrder":3,"curCode":"    public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filename != null) {\n            filename = new File(filename).getName(); \r\n        } else {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        TarArchiveEntry entry = new TarArchiveEntry(filename);\n        entry.setSize(filelength);\n        tos.putArchiveEntry(entry);\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2015-09-04 04:55:43","endLine":81,"groupId":"41254","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"marshal","params":"(Exchangeexchange@Objectgraph@OutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/75/4d932e630d2cb828fb9cd7f912ec1479aaadb3.src","preCode":"    public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filename != null) {\n            filename = new File(filename).getName(); \r\n        } else {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        TarArchiveEntry entry = new TarArchiveEntry(filename);\n        entry.setSize(filelength);\n        tos.putArchiveEntry(entry);\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2015-10-18 03:38:40","commitOrder":3,"curCode":"    public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filename != null) {\n            filename = new File(filename).getName(); \r\n        } else {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n        zos.putNextEntry(new ZipEntry(filename));\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2015-10-18 14:54:42","endLine":71,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"marshal","params":"(Exchangeexchange@Objectgraph@OutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/e5/cffacff712dc44af47606deb72dc6f3888a517.src","preCode":"    public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filename != null) {\n            filename = new File(filename).getName(); \r\n        } else {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n        zos.putNextEntry(new ZipEntry(filename));\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"03c25ca7060c0f072d22f27789e485eda732ea55","commitMessage":"@@@CAMEL-9233 fix\nExchange is added as parameter for the TypeConverter\n","date":"2015-10-18 14:54:42","modifiedFileCount":"1","status":"M","submitter":"rendesg"},{"authorTime":"2015-11-05 20:36:46","codes":[{"authorDate":"2015-09-04 04:54:51","commitOrder":4,"curCode":"    public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filename != null) {\n            filename = new File(filename).getName(); \r\n        } else {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        TarArchiveEntry entry = new TarArchiveEntry(filename);\n        entry.setSize(filelength);\n        tos.putArchiveEntry(entry);\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2015-09-04 04:55:43","endLine":81,"groupId":"41254","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"marshal","params":"(Exchangeexchange@Objectgraph@OutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/75/4d932e630d2cb828fb9cd7f912ec1479aaadb3.src","preCode":"    public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filename != null) {\n            filename = new File(filename).getName(); \r\n        } else {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        TarArchiveEntry entry = new TarArchiveEntry(filename);\n        entry.setSize(filelength);\n        tos.putArchiveEntry(entry);\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2015-11-05 20:36:46","commitOrder":4,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filename == null) {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filename).getFileName().toString(); \r\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n        zos.putNextEntry(new ZipEntry(filename));\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2015-11-05 20:36:46","endLine":71,"groupId":"33801","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b2/51201d2eb33b263338090bdf354b97cce6f33b.src","preCode":"    public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filename != null) {\n            filename = new File(filename).getName(); \r\n        } else {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n        zos.putNextEntry(new ZipEntry(filename));\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"53f3afaf34ad1e079d93b583ecdf159d357f6bb7","commitMessage":"@@@CAMEL-9274: Data formats unmarshal should use OutputStreamBuilder so we can better support stream caching. Many thanks to Aaron Whiteside for the patch.\n","date":"2015-11-05 20:36:46","modifiedFileCount":"9","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2015-11-05 20:36:46","codes":[{"authorDate":"2015-11-19 15:48:53","commitOrder":5,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filename == null) {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filename).getFileName().toString(); \r\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        TarArchiveEntry entry = new TarArchiveEntry(filename);\n        entry.setSize(filelength);\n        tos.putArchiveEntry(entry);\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2015-11-19 15:48:53","endLine":84,"groupId":"23250","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/54/65edcc681d1a2662f1be5a099b65bc4d206f3f.src","preCode":"    public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filename != null) {\n            filename = new File(filename).getName(); \r\n        } else {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        TarArchiveEntry entry = new TarArchiveEntry(filename);\n        entry.setSize(filelength);\n        tos.putArchiveEntry(entry);\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2015-11-05 20:36:46","commitOrder":5,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filename == null) {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filename).getFileName().toString(); \r\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n        zos.putNextEntry(new ZipEntry(filename));\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2015-11-05 20:36:46","endLine":71,"groupId":"33801","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b2/51201d2eb33b263338090bdf354b97cce6f33b.src","preCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filename == null) {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filename).getFileName().toString(); \r\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n        zos.putNextEntry(new ZipEntry(filename));\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"af73eb8fe3b695f4c8f8c2a1d1f7818af99261a5","commitMessage":"@@@CAMEL-9274: More data formats support stream caching directly. Thanks to Aaron Whiteside for the patch.\n","date":"2015-11-19 15:48:53","modifiedFileCount":"5","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2017-10-10 20:46:20","codes":[{"authorDate":"2017-10-10 20:46:20","commitOrder":6,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        if (preservePathElements) {\n            createTarEntries(tos, filepath, filelength);\n        } else {\n            createTarEntries(tos, filename, filelength);\n        }\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2017-10-16 17:04:32","endLine":92,"groupId":"45216","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/35/b1a9c2605360bad64bcac9165f33718e789173.src","preCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filename == null) {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filename).getFileName().toString(); \r\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        TarArchiveEntry entry = new TarArchiveEntry(filename);\n        entry.setSize(filelength);\n        tos.putArchiveEntry(entry);\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2017-10-10 20:46:20","commitOrder":6,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n\n        if (preservePathElements) {\n            createZipEntries(zos, filepath);\n        } else {\n            createZipEntries(zos, filename);\n        }\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2017-10-16 17:04:32","endLine":82,"groupId":"26778","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/28/ce82c5c656c2600721dd91551af6171e7be407.src","preCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filename == null) {\n            \r\n            filename = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filename).getFileName().toString(); \r\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n        zos.putNextEntry(new ZipEntry(filename));\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"38ff6658f0a3c0b3fa69a8a1923f708ce4ef97d1","commitMessage":"@@@Add unit test to support folders in zip files.\n\nAdd implementation to support folders in zip files.\n\nAdd backwards compatibility and separate entries for folders.\n\nAdd options to camel-core for ZipFileDataFormat and TarFileDataFormat.\n\nAdd unit test to support folders in tar files.\n\nAdd implementation to support folders in tar files with backwards\ncompatibility.\n\nFix checkstyle errors.\n","date":"2017-10-16 17:04:32","modifiedFileCount":"7","status":"M","submitter":"Vreijsen"},{"authorTime":"2019-08-04 17:50:27","codes":[{"authorDate":"2017-10-10 20:46:20","commitOrder":7,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        if (preservePathElements) {\n            createTarEntries(tos, filepath, filelength);\n        } else {\n            createTarEntries(tos, filename, filelength);\n        }\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2017-10-16 17:04:32","endLine":92,"groupId":"45216","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/35/b1a9c2605360bad64bcac9165f33718e789173.src","preCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        if (preservePathElements) {\n            createTarEntries(tos, filepath, filelength);\n        } else {\n            createTarEntries(tos, filename, filelength);\n        }\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"},{"authorDate":"2019-08-04 17:50:27","commitOrder":7,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n\n        if (preservePathElements) {\n            createZipEntries(zos, filepath);\n        } else {\n            createZipEntries(zos, filename);\n        }\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getMessage().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2019-08-04 17:50:27","endLine":84,"groupId":"26778","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/fe/889f5994a09af1ebbb4e67e2350cbe8cee0ac1.src","preCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n\n        if (preservePathElements) {\n            createZipEntries(zos, filepath);\n        } else {\n            createZipEntries(zos, filename);\n        }\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"096ec2aa953065fca5141d415d74eaf00e5aa637","commitMessage":"@@@Polished\n","date":"2019-08-04 17:50:27","modifiedFileCount":"1","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2019-08-07 18:54:59","codes":[{"authorDate":"2017-10-10 20:46:20","commitOrder":8,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        if (preservePathElements) {\n            createTarEntries(tos, filepath, filelength);\n        } else {\n            createTarEntries(tos, filename, filelength);\n        }\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2017-10-16 17:04:32","endLine":92,"groupId":"45216","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/35/b1a9c2605360bad64bcac9165f33718e789173.src","preCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        if (preservePathElements) {\n            createTarEntries(tos, filepath, filelength);\n        } else {\n            createTarEntries(tos, filename, filelength);\n        }\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"},{"authorDate":"2019-08-07 18:54:59","commitOrder":8,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n\n        if (preservePathElements) {\n            createZipEntries(zos, filepath);\n        } else {\n            createZipEntries(zos, filename);\n        }\n\n        Object body = exchange.getIn().getBody();\n        TypeConverter converter = exchange.getContext().getTypeConverter();\n        \r\n        InputStream is = converter.tryConvertTo(InputStream.class, exchange, body);\n        if (is == null) {\n            \r\n            Iterator it = converter.tryConvertTo(Iterator.class, exchange, body);\n            if (it != null) {\n                is = new InputStreamIterator(converter, it);\n                is = new BufferedInputStream(is);\n            }\n        }\n        if (is == null) {\n            throw new InvalidPayloadException(exchange, body.getClass());\n        }\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getMessage().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2019-08-07 18:55:35","endLine":102,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/5f/d9f4e561e7e8f8293086e9c1cbb677d971af84.src","preCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n\n        if (preservePathElements) {\n            createZipEntries(zos, filepath);\n        } else {\n            createZipEntries(zos, filename);\n        }\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getMessage().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"3417c9ef5fa45f86dfa386c8b38a9ce4bf0bdd30","commitMessage":"@@@CAMEL-13774: camel-zipfile now supports marshal an iterator to zipfile\n","date":"2019-08-07 18:55:35","modifiedFileCount":"1","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2019-08-07 19:33:41","codes":[{"authorDate":"2017-10-10 20:46:20","commitOrder":9,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        if (preservePathElements) {\n            createTarEntries(tos, filepath, filelength);\n        } else {\n            createTarEntries(tos, filename, filelength);\n        }\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2017-10-16 17:04:32","endLine":92,"groupId":"45216","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/35/b1a9c2605360bad64bcac9165f33718e789173.src","preCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        if (preservePathElements) {\n            createTarEntries(tos, filepath, filelength);\n        } else {\n            createTarEntries(tos, filename, filelength);\n        }\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"},{"authorDate":"2019-08-07 19:33:41","commitOrder":9,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n\n        if (preservePathElements) {\n            createZipEntries(zos, filepath);\n        } else {\n            createZipEntries(zos, filename);\n        }\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getMessage().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2019-08-07 19:33:41","endLine":88,"groupId":"26778","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/88/31baa81c89581467f101f17828ca06cd22b297.src","preCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n\n        if (preservePathElements) {\n            createZipEntries(zos, filepath);\n        } else {\n            createZipEntries(zos, filename);\n        }\n\n        Object body = exchange.getIn().getBody();\n        TypeConverter converter = exchange.getContext().getTypeConverter();\n        \r\n        InputStream is = converter.tryConvertTo(InputStream.class, exchange, body);\n        if (is == null) {\n            \r\n            Iterator it = converter.tryConvertTo(Iterator.class, exchange, body);\n            if (it != null) {\n                is = new InputStreamIterator(converter, it);\n                is = new BufferedInputStream(is);\n            }\n        }\n        if (is == null) {\n            throw new InvalidPayloadException(exchange, body.getClass());\n        }\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getMessage().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"b8cd49965e6ff00ff4de03ce13a18fc8ce8d0686","commitMessage":"@@@CAMEL-13774: camel-zipfile now supports marshal an iterator to zipfile. And made it more general with a type converter so we can also write directly to a file via the file component.\n","date":"2019-08-07 19:33:41","modifiedFileCount":"2","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2019-08-07 19:33:41","codes":[{"authorDate":"2020-03-23 19:16:09","commitOrder":10,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        if (preservePathElements) {\n            createTarEntries(tos, filepath, filelength);\n        } else {\n            createTarEntries(tos, filename, filelength);\n        }\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getMessage().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2020-03-23 19:16:09","endLine":94,"groupId":"45216","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/25/89795637bfe634e95f676b05e6f5f8136985e4.src","preCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        if (preservePathElements) {\n            createTarEntries(tos, filepath, filelength);\n        } else {\n            createTarEntries(tos, filename, filelength);\n        }\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getOut().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2019-08-07 19:33:41","commitOrder":10,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n\n        if (preservePathElements) {\n            createZipEntries(zos, filepath);\n        } else {\n            createZipEntries(zos, filename);\n        }\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getMessage().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2019-08-07 19:33:41","endLine":88,"groupId":"26778","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/88/31baa81c89581467f101f17828ca06cd22b297.src","preCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n\n        if (preservePathElements) {\n            createZipEntries(zos, filepath);\n        } else {\n            createZipEntries(zos, filename);\n        }\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getMessage().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"}],"commitId":"03706629b87c310466c650c15ecb741ee13e22bc","commitMessage":"@@@Merge pull request #3664 from omarsmak/CAMEL-14752\n\nCAMEL-14752: Throw an exception on corrupted tarfiles","date":"2020-03-23 19:16:09","modifiedFileCount":"2","status":"M","submitter":"Omar Al-Safi"},{"authorTime":"2021-07-21 15:24:35","codes":[{"authorDate":"2020-03-23 19:16:09","commitOrder":11,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        if (preservePathElements) {\n            createTarEntries(tos, filepath, filelength);\n        } else {\n            createTarEntries(tos, filename, filelength);\n        }\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getMessage().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2020-03-23 19:16:09","endLine":94,"groupId":"101495","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/25/89795637bfe634e95f676b05e6f5f8136985e4.src","preCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        Long filelength = exchange.getIn().getHeader(FILE_LENGTH, Long.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        TarArchiveOutputStream tos = new TarArchiveOutputStream(stream);\n        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, graph);\n        if (filelength == null) {\n            filelength = (long) is.available();\n        }\n\n        if (preservePathElements) {\n            createTarEntries(tos, filepath, filelength);\n        } else {\n            createTarEntries(tos, filename, filelength);\n        }\n\n        try {\n            IOHelper.copy(is, tos);\n        } finally {\n            tos.closeArchiveEntry();\n            IOHelper.close(is, tos);\n        }\n\n        String newFilename = filename + \".tar\";\n        exchange.getMessage().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-tarfile/src/main/java/org/apache/camel/dataformat/tarfile/TarFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"N"},{"authorDate":"2021-07-21 15:24:35","commitOrder":11,"curCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            Path filenamePath = Paths.get(filepath).getFileName();\n            if (filenamePath != null) {\n                filename = filenamePath.toString(); \r\n            } else {\n                \r\n                return;\n            }\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n\n        if (preservePathElements) {\n            createZipEntries(zos, filepath);\n        } else {\n            createZipEntries(zos, filename);\n        }\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getMessage().setHeader(FILE_NAME, newFilename);\n    }\n","date":"2021-07-21 15:24:35","endLine":94,"groupId":"101495","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"marshal","params":"(finalExchangeexchange@finalObjectgraph@finalOutputStreamstream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/a2/a3cde691627a6c6e1c8a943d70192ab4b3c6c1.src","preCode":"    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {\n        String filename;\n        String filepath = exchange.getIn().getHeader(FILE_NAME, String.class);\n        if (filepath == null) {\n            \r\n            filename = filepath = StringHelper.sanitize(exchange.getIn().getMessageId());\n        } else {\n            filename = Paths.get(filepath).getFileName().toString(); \r\n        }\n\n        ZipOutputStream zos = new ZipOutputStream(stream);\n\n        if (preservePathElements) {\n            createZipEntries(zos, filepath);\n        } else {\n            createZipEntries(zos, filename);\n        }\n\n        InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, graph);\n\n        try {\n            IOHelper.copy(is, zos);\n        } finally {\n            IOHelper.close(is, zos);\n        }\n\n        String newFilename = filename + \".zip\";\n        exchange.getMessage().setHeader(FILE_NAME, newFilename);\n    }\n","realPath":"components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"abefdfd9cb3366057eb2020c6b1404016e19015f","commitMessage":"@@@fixes based on static analysis check with FindBugs (#5842)\n\nFixes based on static analysis check with FindBugs\n\n* fixed format issue\n* fixed format issue\n* fixed checkstyle issue\n* changes based on review by orpiske\n* fixed format issues\n* fixed format issues\n* cleanup of commented code\n\nCo-authored-by: Dmitry Kriukov <dk2k@ya.ru>","date":"2021-07-21 15:24:35","modifiedFileCount":"85","status":"M","submitter":"dk2k"}]
