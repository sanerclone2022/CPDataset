[{"authorTime":"2014-11-19 02:36:22","codes":[{"authorDate":"2015-01-05 23:32:31","commitOrder":3,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.trace(\"Resolve consumer dropbox attached client:\" + configuration.getClient());\n        DropboxScheduledPollConsumer consumer = null;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2015-01-05 23:33:47","endLine":104,"groupId":"21086","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/a3/f59920afd9e778e0cfcec4ef03b5fad3278dad.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.trace(\"Resolve consumer dropbox attached client:\" + configuration.getClient());\n        DropboxScheduledPollConsumer consumer = null;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-dropbox/src/main/java/org/apache/camel/component/dropbox/DropboxEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"NB"},{"authorDate":"2014-11-19 02:36:22","commitOrder":3,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.debug(\"resolve consumer atmos endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.debug(\"resolve consumer atmos attached client:\" + configuration.getClient());\n        AtmosScheduledPollConsumer consumer = null;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2015-01-30 13:02:29","endLine":94,"groupId":"31534","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/f2/72ab4403789dc2a4f5eb51ecbe2ccd1802dc9f.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.debug(\"resolve consumer atmos endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.debug(\"resolve consumer atmos attached client:\" + configuration.getClient());\n        AtmosScheduledPollConsumer consumer = null;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"b7db5c8dea76650e3b0c7f1f36134ea1014c0707","commitMessage":"@@@CAMEL-8055 Added the atmos component implementation\n","date":"2015-01-30 13:02:29","modifiedFileCount":"0","status":"M","submitter":"Alessio Cervellin"},{"authorTime":"2015-01-31 15:04:30","codes":[{"authorDate":"2015-01-05 23:32:31","commitOrder":4,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.trace(\"Resolve consumer dropbox attached client:\" + configuration.getClient());\n        DropboxScheduledPollConsumer consumer = null;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2015-01-05 23:33:47","endLine":104,"groupId":"21086","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/a3/f59920afd9e778e0cfcec4ef03b5fad3278dad.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.trace(\"Resolve consumer dropbox attached client:\" + configuration.getClient());\n        DropboxScheduledPollConsumer consumer = null;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-dropbox/src/main/java/org/apache/camel/component/dropbox/DropboxEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"},{"authorDate":"2015-01-31 15:04:30","commitOrder":4,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.debug(\"resolve consumer atmos endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.debug(\"resolve consumer atmos attached client:\" + configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2015-01-31 15:04:30","endLine":107,"groupId":"24241","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/2f/0019956bd01a2f0696035485cc3fdc6de10238.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.debug(\"resolve consumer atmos endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.debug(\"resolve consumer atmos attached client:\" + configuration.getClient());\n        AtmosScheduledPollConsumer consumer = null;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"484789537bb9b692d69a877a72c49a2cc0c00fbb","commitMessage":"@@@Add camel-atmos to kit. Polish the component so it has out of the box documentation. Add name option so the endpoint can have a logical name so the endpoints can be more natural.\n","date":"2015-01-31 15:04:30","modifiedFileCount":"5","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2015-01-31 15:04:30","codes":[{"authorDate":"2016-11-17 21:31:01","commitOrder":5,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.trace(\"Resolve consumer dropbox attached client:\" + configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2016-11-25 16:50:07","endLine":107,"groupId":"41589","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/de/cb759f3d66f9b2fbe5c98b1e2f5e4c891c200f.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.trace(\"Resolve consumer dropbox attached client:\" + configuration.getClient());\n        DropboxScheduledPollConsumer consumer = null;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-dropbox/src/main/java/org/apache/camel/component/dropbox/DropboxEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2015-01-31 15:04:30","commitOrder":5,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.debug(\"resolve consumer atmos endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.debug(\"resolve consumer atmos attached client:\" + configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2015-01-31 15:04:30","endLine":107,"groupId":"24241","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/2f/0019956bd01a2f0696035485cc3fdc6de10238.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.debug(\"resolve consumer atmos endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.debug(\"resolve consumer atmos attached client:\" + configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"}],"commitId":"c7c20caadd2259cc0fab598db54e071a6dd14c89","commitMessage":"@@@Various tweaks and corrections suggested by IntelliJ\n","date":"2016-11-25 16:50:07","modifiedFileCount":"41","status":"M","submitter":"Edoardo Causarano"},{"authorTime":"2015-01-31 15:04:30","codes":[{"authorDate":"2017-05-28 22:26:02","commitOrder":6,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.trace(\"Resolve consumer dropbox attached client:\" + configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2017-05-28 22:41:58","endLine":106,"groupId":"5249","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b1/c64ba550f25657fd392ff234e14581cc16bfc0.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.trace(\"Resolve consumer dropbox attached client:\" + configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-dropbox/src/main/java/org/apache/camel/component/dropbox/DropboxEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2015-01-31 15:04:30","commitOrder":6,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.debug(\"resolve consumer atmos endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.debug(\"resolve consumer atmos attached client:\" + configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2015-01-31 15:04:30","endLine":107,"groupId":"24241","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/2f/0019956bd01a2f0696035485cc3fdc6de10238.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.debug(\"resolve consumer atmos endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.debug(\"resolve consumer atmos attached client:\" + configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"}],"commitId":"e4ba8a7bd448193da89ddadcc03cfdff1ce8d433","commitMessage":"@@@Prefix headers with CamelDropbox.\nMove header declaration from enum to DropboxConstants interface as plain String.\n","date":"2017-05-28 22:41:58","modifiedFileCount":"19","status":"M","submitter":"Thomas Lehoux"},{"authorTime":"2018-09-10 03:12:39","codes":[{"authorDate":"2018-09-10 03:12:39","commitOrder":7,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {{}}\", configuration.getOperation().toString());\n        LOG.trace(\"Resolve consumer dropbox attached client: {}\", configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2018-09-12 01:32:22","endLine":106,"groupId":"5249","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/8d/b68547427c9d4de6c41b31c3a5853d97d42d79.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.trace(\"Resolve consumer dropbox attached client:\" + configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-dropbox/src/main/java/org/apache/camel/component/dropbox/DropboxEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2018-09-10 03:12:39","commitOrder":7,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.debug(\"resolve consumer atmos endpoint {{}}\", configuration.getOperation().toString());\n        LOG.debug(\"resolve consumer atmos attached client:{}\", configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2018-09-12 01:32:22","endLine":110,"groupId":"24241","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/27/79e0b8a791a4a039f74643ea380462922a9b24.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.debug(\"resolve consumer atmos endpoint {\" + configuration.getOperation().toString() + \"}\");\n        LOG.debug(\"resolve consumer atmos attached client:\" + configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"d757c59030ba9979951af8cdc23508b34e47d559","commitMessage":"@@@Replace string concatenation in logging with placeholders.\n","date":"2018-09-12 01:32:22","modifiedFileCount":"154","status":"M","submitter":"Pascal Schumacher"},{"authorTime":"2018-09-12 01:39:31","codes":[{"authorDate":"2018-09-12 01:39:31","commitOrder":8,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {{}}\", configuration.getOperation());\n        LOG.trace(\"Resolve consumer dropbox attached client: {}\", configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2018-09-12 01:39:31","endLine":106,"groupId":"5249","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/53/00ffa3bb18599be3cea024d63f5b13156e5191.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {{}}\", configuration.getOperation().toString());\n        LOG.trace(\"Resolve consumer dropbox attached client: {}\", configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-dropbox/src/main/java/org/apache/camel/component/dropbox/DropboxEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2018-09-12 01:39:31","commitOrder":8,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.debug(\"resolve consumer atmos endpoint {{}}\", configuration.getOperation());\n        LOG.debug(\"resolve consumer atmos attached client:{}\", configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2018-09-12 01:39:31","endLine":110,"groupId":"24241","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/82/61c4488fee33b75bc2f9f48a74415ac6fc84c1.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.debug(\"resolve consumer atmos endpoint {{}}\", configuration.getOperation().toString());\n        LOG.debug(\"resolve consumer atmos attached client:{}\", configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"59780e61a34970e37bf8e205e1759e5ca06e42a1","commitMessage":"@@@Remove #toString calls on arguments of parameterized log messages.\n","date":"2018-09-12 01:39:31","modifiedFileCount":"5","status":"M","submitter":"Pascal Schumacher"},{"authorTime":"2018-09-28 23:33:23","codes":[{"authorDate":"2018-09-12 01:39:31","commitOrder":9,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {{}}\", configuration.getOperation());\n        LOG.trace(\"Resolve consumer dropbox attached client: {}\", configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2018-09-12 01:39:31","endLine":106,"groupId":"5249","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/53/00ffa3bb18599be3cea024d63f5b13156e5191.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {{}}\", configuration.getOperation());\n        LOG.trace(\"Resolve consumer dropbox attached client: {}\", configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-dropbox/src/main/java/org/apache/camel/component/dropbox/DropboxEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"N"},{"authorDate":"2018-09-28 23:33:23","commitOrder":9,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        log.debug(\"resolve consumer atmos endpoint {{}}\", configuration.getOperation());\n        log.debug(\"resolve consumer atmos attached client:{}\", configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2018-10-21 15:49:20","endLine":102,"groupId":"24241","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/df/507ea6e15b785cf439a988d62f6c3307504753.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.debug(\"resolve consumer atmos endpoint {{}}\", configuration.getOperation());\n        LOG.debug(\"resolve consumer atmos attached client:{}\", configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"ed632bb00a01ecb37fe651f2668504f8d10f3ddd","commitMessage":"@@@Add a protected logger on ServiceSupport and use it instead of a static one\n\n# Conflicts:\n#\tcamel-core/src/main/java/org/apache/camel/processor/Resequencer.java\n","date":"2018-10-21 15:49:20","modifiedFileCount":"348","status":"M","submitter":"Guillaume Nodet"},{"authorTime":"2019-12-10 20:04:00","codes":[{"authorDate":"2018-09-12 01:39:31","commitOrder":10,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {{}}\", configuration.getOperation());\n        LOG.trace(\"Resolve consumer dropbox attached client: {}\", configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2018-09-12 01:39:31","endLine":106,"groupId":"5249","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/53/00ffa3bb18599be3cea024d63f5b13156e5191.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {{}}\", configuration.getOperation());\n        LOG.trace(\"Resolve consumer dropbox attached client: {}\", configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-dropbox/src/main/java/org/apache/camel/component/dropbox/DropboxEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"N"},{"authorDate":"2019-12-10 20:04:00","commitOrder":10,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        log.debug(\"resolve consumer atmos endpoint {{}}\", configuration.getOperation());\n        log.debug(\"resolve consumer atmos attached client:{}\", configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            configureConsumer(consumer);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2019-12-10 20:04:00","endLine":103,"groupId":"24241","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/a9/c0e1c8b5a215170a399ddf7009e4629a1ca152.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        log.debug(\"resolve consumer atmos endpoint {{}}\", configuration.getOperation());\n        log.debug(\"resolve consumer atmos attached client:{}\", configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"f1ac2da08224eed1601c07fe41210ef6aefe2373","commitMessage":"@@@CAMEL-14284: Configuring endpoint should set properties on endpoint and not configuration object\n","date":"2019-12-10 20:04:00","modifiedFileCount":"2","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2019-12-10 20:04:00","codes":[{"authorDate":"2019-12-11 15:51:59","commitOrder":11,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {{}}\", configuration.getOperation());\n        LOG.trace(\"Resolve consumer dropbox attached client: {}\", configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            configureConsumer(consumer);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            configureConsumer(consumer);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2019-12-11 15:51:59","endLine":110,"groupId":"5249","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/5d/e67aac3a1a7f758e768aecc8885af35c7b5610.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {{}}\", configuration.getOperation());\n        LOG.trace(\"Resolve consumer dropbox attached client: {}\", configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-dropbox/src/main/java/org/apache/camel/component/dropbox/DropboxEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2019-12-10 20:04:00","commitOrder":11,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        log.debug(\"resolve consumer atmos endpoint {{}}\", configuration.getOperation());\n        log.debug(\"resolve consumer atmos attached client:{}\", configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            configureConsumer(consumer);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2019-12-10 20:04:00","endLine":103,"groupId":"24241","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/a9/c0e1c8b5a215170a399ddf7009e4629a1ca152.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        log.debug(\"resolve consumer atmos endpoint {{}}\", configuration.getOperation());\n        log.debug(\"resolve consumer atmos attached client:{}\", configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            configureConsumer(consumer);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"}],"commitId":"184079af017a2fb65f26c518ccf652bfe6591d2a","commitMessage":"@@@CAMEL-14284: Configuring endpoint should set properties on endpoint and not configuration object - Dropbox component\n","date":"2019-12-11 15:51:59","modifiedFileCount":"2","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2020-01-23 12:38:05","codes":[{"authorDate":"2019-12-11 15:51:59","commitOrder":12,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {{}}\", configuration.getOperation());\n        LOG.trace(\"Resolve consumer dropbox attached client: {}\", configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            configureConsumer(consumer);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            configureConsumer(consumer);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2019-12-11 15:51:59","endLine":110,"groupId":"102855","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/5d/e67aac3a1a7f758e768aecc8885af35c7b5610.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        LOG.trace(\"Resolve consumer dropbox endpoint {{}}\", configuration.getOperation());\n        LOG.trace(\"Resolve consumer dropbox attached client: {}\", configuration.getClient());\n        DropboxScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == DropboxOperation.search) {\n            consumer = new DropboxScheduledPollSearchConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            configureConsumer(consumer);\n            return consumer;\n        } else if (this.configuration.getOperation() == DropboxOperation.get) {\n            consumer = new DropboxScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(DropboxConstants.POLL_CONSUMER_DELAY);\n            configureConsumer(consumer);\n            return consumer;\n        } else {\n            throw new DropboxException(\"Operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-dropbox/src/main/java/org/apache/camel/component/dropbox/DropboxEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"},{"authorDate":"2020-01-23 12:38:05","commitOrder":12,"curCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            configureConsumer(consumer);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","date":"2020-01-23 13:06:51","endLine":98,"groupId":"102855","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"createConsumer","params":"(Processorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/61/a74fb07813bc95d55767bba875b04823b780e8.src","preCode":"    public Consumer createConsumer(Processor processor) throws Exception {\n        log.debug(\"resolve consumer atmos endpoint {{}}\", configuration.getOperation());\n        log.debug(\"resolve consumer atmos attached client:{}\", configuration.getClient());\n\n        AtmosScheduledPollConsumer consumer;\n        if (this.configuration.getOperation() == AtmosOperation.get) {\n            consumer = new AtmosScheduledPollGetConsumer(this, processor, configuration);\n            consumer.setDelay(POLL_CONSUMER_DELAY);\n            configureConsumer(consumer);\n            return consumer;\n        } else {\n            throw new AtmosException(\"operation specified is not valid for consumer!\");\n        }\n    }\n","realPath":"components/camel-atmos/src/main/java/org/apache/camel/component/atmos/AtmosEndpoint.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"2ae0cd8c24b35707d4cc40fd09310977cff57a68","commitMessage":"@@@CAMEL-14421: optimize core - ServiceSupport should not have instance logger. Use static logger instead.\n","date":"2020-01-23 13:06:51","modifiedFileCount":"351","status":"M","submitter":"Claus Ibsen"}]
