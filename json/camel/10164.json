[{"authorTime":"2017-02-01 01:29:18","codes":[{"authorDate":"2017-02-01 01:29:18","commitOrder":1,"curCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"flatpack\"));\n\n        \r\n        assertTrue(json.contains(\"\\\"textQualifier\\\": { \\\"kind\\\": \\\"attribute\\\", \\\"required\\\": \\\"false\\\", \\\"type\\\": \\\"string\\\"\"\n            + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": \\\"false\\\", \\\"secret\\\": \\\"false\\\", \\\"defaultValue\\\": \\\"\\\\\\\"\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(10, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"textQualifier\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\"\", found.get(\"defaultValue\"));\n        assertEquals(\"If the text is qualified with a char such as \\\"\", found.get(\"description\"));\n    }\n","date":"2017-02-01 01:29:18","endLine":94,"groupId":"45203","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlatpackDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/33/f732b7374e5bcf4f6ee100ed1eb6cff284b162.src","preCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"flatpack\"));\n\n        \r\n        assertTrue(json.contains(\"\\\"textQualifier\\\": { \\\"kind\\\": \\\"attribute\\\", \\\"required\\\": \\\"false\\\", \\\"type\\\": \\\"string\\\"\"\n            + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": \\\"false\\\", \\\"secret\\\": \\\"false\\\", \\\"defaultValue\\\": \\\"\\\\\\\"\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(10, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"textQualifier\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\"\", found.get(\"defaultValue\"));\n        assertEquals(\"If the text is qualified with a char such as \\\"\", found.get(\"description\"));\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2017-02-01 01:29:18","commitOrder":1,"curCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"univocity-tsv\"));\n\n        \r\n\r\n            + \" \\\"deprecated\\\": \\\"false\\\", \\\"secret\\\": \\\"false\\\", \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(16, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"escapeChar\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\\\", found.get(\"defaultValue\"));\n        assertEquals(\"The escape character.\", found.get(\"description\"));\n    }\n","date":"2017-02-01 01:29:18","endLine":128,"groupId":"45203","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUniVocityTsvEscapeChar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/33/f732b7374e5bcf4f6ee100ed1eb6cff284b162.src","preCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"univocity-tsv\"));\n\n        \r\n\r\n            + \" \\\"deprecated\\\": \\\"false\\\", \\\"secret\\\": \\\"false\\\", \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(16, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"escapeChar\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\\\", found.get(\"defaultValue\"));\n        assertEquals(\"The escape character.\", found.get(\"description\"));\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"57ccbe1d89764a4f569f4d95563d04205a87354b","commitMessage":"@@@CAMEL-10523: Move test out of camel-core to itest\n","date":"2017-02-01 01:29:18","modifiedFileCount":"0","status":"B","submitter":"Claus Ibsen"},{"authorTime":"2017-02-16 20:25:04","codes":[{"authorDate":"2017-02-16 20:25:04","commitOrder":2,"curCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"flatpack\"));\n\n        \r\n        assertTrue(json.contains(\"\\\"textQualifier\\\": { \\\"kind\\\": \\\"attribute\\\", \\\"required\\\": false, \\\"type\\\": \\\"string\\\"\"\n            + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": false, \\\"secret\\\": false, \\\"defaultValue\\\": \\\"\\\\\\\"\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(10, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"textQualifier\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\"\", found.get(\"defaultValue\"));\n        assertEquals(\"If the text is qualified with a char such as \\\"\", found.get(\"description\"));\n    }\n","date":"2017-02-16 20:25:04","endLine":87,"groupId":"45203","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlatpackDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/48/3d7e3a9b15bcec8e394e6236575e3f0fa0055e.src","preCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"flatpack\"));\n\n        \r\n        assertTrue(json.contains(\"\\\"textQualifier\\\": { \\\"kind\\\": \\\"attribute\\\", \\\"required\\\": \\\"false\\\", \\\"type\\\": \\\"string\\\"\"\n            + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": \\\"false\\\", \\\"secret\\\": \\\"false\\\", \\\"defaultValue\\\": \\\"\\\\\\\"\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(10, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"textQualifier\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\"\", found.get(\"defaultValue\"));\n        assertEquals(\"If the text is qualified with a char such as \\\"\", found.get(\"description\"));\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2017-02-16 20:25:04","commitOrder":2,"curCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"univocity-tsv\"));\n\n        \r\n\r\n            + \" \\\"deprecated\\\": false, \\\"secret\\\": false, \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(16, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"escapeChar\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\\\", found.get(\"defaultValue\"));\n        assertEquals(\"The escape character.\", found.get(\"description\"));\n    }\n","date":"2017-02-16 20:25:04","endLine":121,"groupId":"45203","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUniVocityTsvEscapeChar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/48/3d7e3a9b15bcec8e394e6236575e3f0fa0055e.src","preCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"univocity-tsv\"));\n\n        \r\n\r\n            + \" \\\"deprecated\\\": \\\"false\\\", \\\"secret\\\": \\\"false\\\", \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(16, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"escapeChar\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\\\", found.get(\"defaultValue\"));\n        assertEquals(\"The escape character.\", found.get(\"description\"));\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"c4607e6c519541a1870ce225cbdd8fa8a3ea2e3e","commitMessage":"@@@CAMEL-10842: Component JSon schema - JSon values should not always be string types\n","date":"2017-02-16 20:25:04","modifiedFileCount":"15","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2017-02-16 20:25:04","codes":[{"authorDate":"2017-02-17 04:24:07","commitOrder":3,"curCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"flatpack\"));\n\n        \r\n        assertTrue(json.contains(\"\\\"textQualifier\\\": { \\\"kind\\\": \\\"attribute\\\", \\\"displayName\\\": \\\"Text Qualifier\\\", \\\"required\\\": false, \\\"type\\\": \\\"string\\\"\"\n            + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": false, \\\"secret\\\": false, \\\"defaultValue\\\": \\\"\\\\\\\"\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(10, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"textQualifier\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\"\", found.get(\"defaultValue\"));\n        assertEquals(\"If the text is qualified with a char such as \\\"\", found.get(\"description\"));\n    }\n","date":"2017-02-17 04:24:07","endLine":87,"groupId":"45203","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlatpackDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ba/96182ee2386558ef110df30e530520e3a42675.src","preCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"flatpack\"));\n\n        \r\n        assertTrue(json.contains(\"\\\"textQualifier\\\": { \\\"kind\\\": \\\"attribute\\\", \\\"required\\\": false, \\\"type\\\": \\\"string\\\"\"\n            + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": false, \\\"secret\\\": false, \\\"defaultValue\\\": \\\"\\\\\\\"\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(10, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"textQualifier\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\"\", found.get(\"defaultValue\"));\n        assertEquals(\"If the text is qualified with a char such as \\\"\", found.get(\"description\"));\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2017-02-16 20:25:04","commitOrder":3,"curCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"univocity-tsv\"));\n\n        \r\n\r\n            + \" \\\"deprecated\\\": false, \\\"secret\\\": false, \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(16, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"escapeChar\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\\\", found.get(\"defaultValue\"));\n        assertEquals(\"The escape character.\", found.get(\"description\"));\n    }\n","date":"2017-02-16 20:25:04","endLine":121,"groupId":"45203","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUniVocityTsvEscapeChar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/48/3d7e3a9b15bcec8e394e6236575e3f0fa0055e.src","preCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"univocity-tsv\"));\n\n        \r\n\r\n            + \" \\\"deprecated\\\": false, \\\"secret\\\": false, \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(16, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"escapeChar\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\\\", found.get(\"defaultValue\"));\n        assertEquals(\"The escape character.\", found.get(\"description\"));\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"}],"commitId":"357093bdf7b262cc7c75479cb3b389f30988b635","commitMessage":"@@@CAMEL-10847: Component json schema - Include display name for options\n","date":"2017-02-17 04:24:07","modifiedFileCount":"29","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2017-02-16 20:25:04","codes":[{"authorDate":"2017-09-25 03:09:26","commitOrder":4,"curCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"flatpack\"));\n\n        \r\n        assertTrue(json.contains(\"\\\"textQualifier\\\": { \\\"kind\\\": \\\"attribute\\\", \\\"displayName\\\": \\\"Text Qualifier\\\", \\\"required\\\": false, \\\"type\\\": \\\"string\\\"\"\n            + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": false, \\\"secret\\\": false\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(10, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"textQualifier\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"If the text is qualified with a character. Uses quote character by default.\", found.get(\"description\"));\n    }\n","date":"2017-09-25 04:03:23","endLine":86,"groupId":"45203","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlatpackDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/e9/52fc0ccba2cc3fd4ff0e51d74097c26e3e84c6.src","preCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"flatpack\"));\n\n        \r\n        assertTrue(json.contains(\"\\\"textQualifier\\\": { \\\"kind\\\": \\\"attribute\\\", \\\"displayName\\\": \\\"Text Qualifier\\\", \\\"required\\\": false, \\\"type\\\": \\\"string\\\"\"\n            + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": false, \\\"secret\\\": false, \\\"defaultValue\\\": \\\"\\\\\\\"\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(10, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"textQualifier\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\"\", found.get(\"defaultValue\"));\n        assertEquals(\"If the text is qualified with a char such as \\\"\", found.get(\"description\"));\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2017-02-16 20:25:04","commitOrder":4,"curCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"univocity-tsv\"));\n\n        \r\n\r\n            + \" \\\"deprecated\\\": false, \\\"secret\\\": false, \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(16, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"escapeChar\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\\\", found.get(\"defaultValue\"));\n        assertEquals(\"The escape character.\", found.get(\"description\"));\n    }\n","date":"2017-02-16 20:25:04","endLine":121,"groupId":"45203","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testUniVocityTsvEscapeChar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/48/3d7e3a9b15bcec8e394e6236575e3f0fa0055e.src","preCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"univocity-tsv\"));\n\n        \r\n\r\n            + \" \\\"deprecated\\\": false, \\\"secret\\\": false, \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(16, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"escapeChar\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\\\", found.get(\"defaultValue\"));\n        assertEquals(\"The escape character.\", found.get(\"description\"));\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"}],"commitId":"2c316a88b287c50c9780018d5dc65c6644970144","commitMessage":"@@@CAMEL-10696: Ensure json value is escaped and avoid new line problems in description and in docs.\n","date":"2017-09-25 04:03:23","modifiedFileCount":"1","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2019-01-30 16:51:23","codes":[{"authorDate":"2019-01-30 16:51:23","commitOrder":5,"curCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"flatpack\"));\n\n        \r\n        assertTrue(json.contains(\"\\\"textQualifier\\\": { \\\"kind\\\": \\\"attribute\\\", \\\"displayName\\\": \\\"Text Qualifier\\\", \\\"required\\\": false, \\\"type\\\": \\\"string\\\"\"\n            + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": false, \\\"secret\\\": false\"));\n\n        List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(10, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"textQualifier\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"If the text is qualified with a character. Uses quote character by default.\", found.get(\"description\"));\n    }\n","date":"2019-01-30 16:51:36","endLine":66,"groupId":"45203","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlatpackDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/2f/3b583f2f08d7aa8c7460b735bf8f55f92a8808.src","preCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"flatpack\"));\n\n        \r\n        assertTrue(json.contains(\"\\\"textQualifier\\\": { \\\"kind\\\": \\\"attribute\\\", \\\"displayName\\\": \\\"Text Qualifier\\\", \\\"required\\\": false, \\\"type\\\": \\\"string\\\"\"\n            + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": false, \\\"secret\\\": false\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(10, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"textQualifier\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"If the text is qualified with a character. Uses quote character by default.\", found.get(\"description\"));\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2019-01-30 16:51:23","commitOrder":5,"curCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"univocity-tsv\"));\n\n        \r\n\r\n            + \" \\\"deprecated\\\": false, \\\"secret\\\": false, \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n\n        List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(16, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"escapeChar\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\\\", found.get(\"defaultValue\"));\n        assertEquals(\"The escape character.\", found.get(\"description\"));\n    }\n","date":"2019-01-30 16:51:36","endLine":100,"groupId":"45203","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testUniVocityTsvEscapeChar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/2f/3b583f2f08d7aa8c7460b735bf8f55f92a8808.src","preCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"univocity-tsv\"));\n\n        \r\n\r\n            + \" \\\"deprecated\\\": false, \\\"secret\\\": false, \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n\n        List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(16, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"escapeChar\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\\\", found.get(\"defaultValue\"));\n        assertEquals(\"The escape character.\", found.get(\"description\"));\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"f77a9833a76d18499ecc5d22de3e444fbdcc1ebe","commitMessage":"@@@Consolidate to use the same JSonSchemaHelper from camel-support\n","date":"2019-01-30 16:51:36","modifiedFileCount":"14","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2019-03-12 19:13:53","codes":[{"authorDate":"2019-03-12 19:13:53","commitOrder":6,"curCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.adapt(CatalogCamelContext.class).getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"flatpack\"));\n\n        \r\n        assertTrue(json.contains(\"\\\"textQualifier\\\": { \\\"kind\\\": \\\"attribute\\\", \\\"displayName\\\": \\\"Text Qualifier\\\", \\\"required\\\": false, \\\"type\\\": \\\"string\\\"\"\n            + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": false, \\\"secret\\\": false\"));\n\n        List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(10, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"textQualifier\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"If the text is qualified with a character. Uses quote character by default.\", found.get(\"description\"));\n    }\n","date":"2019-03-12 19:18:09","endLine":67,"groupId":"45203","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlatpackDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/c1/9392dd4949d9fe679085235368726801ea6180.src","preCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"flatpack\"));\n\n        \r\n        assertTrue(json.contains(\"\\\"textQualifier\\\": { \\\"kind\\\": \\\"attribute\\\", \\\"displayName\\\": \\\"Text Qualifier\\\", \\\"required\\\": false, \\\"type\\\": \\\"string\\\"\"\n            + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": false, \\\"secret\\\": false\"));\n\n        List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(10, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"textQualifier\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"If the text is qualified with a character. Uses quote character by default.\", found.get(\"description\"));\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2019-03-12 19:13:53","commitOrder":6,"curCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.adapt(CatalogCamelContext.class).getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"univocity-tsv\"));\n\n        \r\n\r\n            + \" \\\"deprecated\\\": false, \\\"secret\\\": false, \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n\n        List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(16, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"escapeChar\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\\\", found.get(\"defaultValue\"));\n        assertEquals(\"The escape character.\", found.get(\"description\"));\n    }\n","date":"2019-03-12 19:18:09","endLine":101,"groupId":"45203","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testUniVocityTsvEscapeChar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/c1/9392dd4949d9fe679085235368726801ea6180.src","preCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"univocity-tsv\"));\n\n        \r\n\r\n            + \" \\\"deprecated\\\": false, \\\"secret\\\": false, \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n\n        List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(16, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"escapeChar\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\\\", found.get(\"defaultValue\"));\n        assertEquals(\"The escape character.\", found.get(\"description\"));\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"1bfa41ea0ddfd506a6dd8501380d7a64ced46df5","commitMessage":"@@@CAMEL-13301: Move catalog apis from CamelContext to CatalogCamelContext to have them separated.\n","date":"2019-03-12 19:18:09","modifiedFileCount":"7","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2020-01-29 05:16:59","codes":[{"authorDate":"2020-01-29 05:16:59","commitOrder":7,"curCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.adapt(CatalogCamelContext.class).getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        DataFormatModel model = JsonMapper.generateDataFormatModel(json);\n        assertEquals(\"flatpack\", model.getName());\n\n        Map<String, DataFormatOptionModel> options = model.getOptions().stream()\n                .collect(Collectors.toMap(BaseOptionModel::getName, o -> o));\n\n        assertEquals(10, options.size());\n        BaseOptionModel found = options.get(\"textQualifier\");\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.getName());\n        assertEquals(\"attribute\", found.getKind());\n        assertEquals(false, found.isRequired());\n        assertEquals(\"string\", found.getType());\n        assertEquals(\"java.lang.String\", found.getJavaType());\n        assertEquals(false, found.isDeprecated());\n        assertEquals(false, found.isSecret());\n        assertEquals(\"If the text is qualified with a character. Uses quote character by default.\", found.getDescription());\n    }\n","date":"2020-01-29 06:08:29","endLine":62,"groupId":"24447","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlatpackDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/26/9cf8b5ecfb313fd12bea41516f7a456dc2bed8.src","preCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.adapt(CatalogCamelContext.class).getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"flatpack\"));\n\n        \r\n        assertTrue(json.contains(\"\\\"textQualifier\\\": { \\\"kind\\\": \\\"attribute\\\", \\\"displayName\\\": \\\"Text Qualifier\\\", \\\"required\\\": false, \\\"type\\\": \\\"string\\\"\"\n            + \", \\\"javaType\\\": \\\"java.lang.String\\\", \\\"deprecated\\\": false, \\\"secret\\\": false\"));\n\n        List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(10, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"textQualifier\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"If the text is qualified with a character. Uses quote character by default.\", found.get(\"description\"));\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2020-01-29 05:16:59","commitOrder":7,"curCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.adapt(CatalogCamelContext.class).getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        DataFormatModel model = JsonMapper.generateDataFormatModel(json);\n        assertEquals(\"univocity-tsv\", model.getName());\n\n        Map<String, DataFormatOptionModel> options = model.getOptions().stream()\n                .collect(Collectors.toMap(BaseOptionModel::getName, o -> o));\n\n        assertEquals(16, options.size());\n        BaseOptionModel found = options.get(\"escapeChar\");\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.getName());\n        assertEquals(\"attribute\", found.getKind());\n        assertEquals(false, found.isRequired());\n        assertEquals(\"string\", found.getType());\n        assertEquals(\"java.lang.String\", found.getJavaType());\n        assertEquals(false, found.isDeprecated());\n        assertEquals(false, found.isSecret());\n        assertEquals(\"\\\\\", found.getDefaultValue());\n        assertEquals(\"The escape character.\", found.getDescription());\n    }\n","date":"2020-01-29 06:08:29","endLine":88,"groupId":"24447","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testUniVocityTsvEscapeChar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/26/9cf8b5ecfb313fd12bea41516f7a456dc2bed8.src","preCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.adapt(CatalogCamelContext.class).getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        assertTrue(json.contains(\"\\\"name\\\": \\\"univocity-tsv\"));\n\n        \r\n\r\n            + \" \\\"deprecated\\\": false, \\\"secret\\\": false, \\\"defaultValue\\\": \\\"\\\\\\\\\\\", \\\"description\\\": \\\"The escape character.\\\"\"));\n\n        List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n        assertEquals(16, rows.size());\n\n        Map<String, String> found = null;\n        for (Map<String, String> row : rows) {\n            if (\"escapeChar\".equals(row.get(\"name\"))) {\n                found = row;\n                break;\n            }\n        }\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.get(\"name\"));\n        assertEquals(\"attribute\", found.get(\"kind\"));\n        assertEquals(\"false\", found.get(\"required\"));\n        assertEquals(\"string\", found.get(\"type\"));\n        assertEquals(\"java.lang.String\", found.get(\"javaType\"));\n        assertEquals(\"false\", found.get(\"deprecated\"));\n        assertEquals(\"false\", found.get(\"secret\"));\n        assertEquals(\"\\\\\", found.get(\"defaultValue\"));\n        assertEquals(\"The escape character.\", found.get(\"description\"));\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"d88e0c1032b6ed7a293ad2f1e056db2674a98961","commitMessage":"@@@[CAMEL-14437] Refactor and align camel-main metamodel.  finally remove JSonSchemaHelper\n","date":"2020-01-29 06:08:29","modifiedFileCount":"18","status":"M","submitter":"Guillaume Nodet"},{"authorTime":"2020-06-27 00:25:10","codes":[{"authorDate":"2020-06-27 00:25:10","commitOrder":8,"curCode":"    void testFlatpackDefaultValue() throws Exception {\n        try (CamelContext context = new DefaultCamelContext()) {\n            String json = context.adapt(CatalogCamelContext.class).getEipParameterJsonSchema(\"flatpack\");\n            assertNotNull(json);\n\n            DataFormatModel model = JsonMapper.generateDataFormatModel(json);\n            assertEquals(\"flatpack\", model.getName());\n\n            Map<String, DataFormatOptionModel> options = model.getOptions().stream().collect(Collectors.toMap(BaseOptionModel::getName, o -> o));\n\n            assertEquals(10, options.size());\n            BaseOptionModel found = options.get(\"textQualifier\");\n            assertNotNull(found);\n            assertEquals(\"textQualifier\", found.getName());\n            assertEquals(\"attribute\", found.getKind());\n            assertEquals(false, found.isRequired());\n            assertEquals(\"string\", found.getType());\n            assertEquals(\"java.lang.String\", found.getJavaType());\n            assertEquals(false, found.isDeprecated());\n            assertEquals(false, found.isSecret());\n            assertEquals(\"If the text is qualified with a character. Uses quote character by default.\", found.getDescription());\n        }\n    }\n","date":"2020-06-27 00:36:45","endLine":65,"groupId":"10164","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlatpackDefaultValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/c9/25f3f90dbd4e7f89589a775dae349e6353244d.src","preCode":"    public void testFlatpackDefaultValue() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.adapt(CatalogCamelContext.class).getEipParameterJsonSchema(\"flatpack\");\n        assertNotNull(json);\n\n        DataFormatModel model = JsonMapper.generateDataFormatModel(json);\n        assertEquals(\"flatpack\", model.getName());\n\n        Map<String, DataFormatOptionModel> options = model.getOptions().stream()\n                .collect(Collectors.toMap(BaseOptionModel::getName, o -> o));\n\n        assertEquals(10, options.size());\n        BaseOptionModel found = options.get(\"textQualifier\");\n        assertNotNull(found);\n        assertEquals(\"textQualifier\", found.getName());\n        assertEquals(\"attribute\", found.getKind());\n        assertEquals(false, found.isRequired());\n        assertEquals(\"string\", found.getType());\n        assertEquals(\"java.lang.String\", found.getJavaType());\n        assertEquals(false, found.isDeprecated());\n        assertEquals(false, found.isSecret());\n        assertEquals(\"If the text is qualified with a character. Uses quote character by default.\", found.getDescription());\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2020-06-27 00:25:10","commitOrder":8,"curCode":"    void testUniVocityTsvEscapeChar() throws Exception {\n        try (CamelContext context = new DefaultCamelContext()) {\n            String json = context.adapt(CatalogCamelContext.class).getEipParameterJsonSchema(\"univocity-tsv\");\n            assertNotNull(json);\n\n            DataFormatModel model = JsonMapper.generateDataFormatModel(json);\n            assertEquals(\"univocity-tsv\", model.getName());\n\n            Map<String, DataFormatOptionModel> options = model.getOptions().stream().collect(Collectors.toMap(BaseOptionModel::getName, o -> o));\n\n            assertEquals(16, options.size());\n            BaseOptionModel found = options.get(\"escapeChar\");\n            assertNotNull(found);\n            assertEquals(\"escapeChar\", found.getName());\n            assertEquals(\"attribute\", found.getKind());\n            assertEquals(false, found.isRequired());\n            assertEquals(\"string\", found.getType());\n            assertEquals(\"java.lang.String\", found.getJavaType());\n            assertEquals(false, found.isDeprecated());\n            assertEquals(false, found.isSecret());\n            assertEquals(\"\\\\\", found.getDefaultValue());\n            assertEquals(\"The escape character.\", found.getDescription());\n        }\n    }\n","date":"2020-06-27 00:36:45","endLine":91,"groupId":"10164","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testUniVocityTsvEscapeChar","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/c9/25f3f90dbd4e7f89589a775dae349e6353244d.src","preCode":"    public void testUniVocityTsvEscapeChar() throws Exception {\n        CamelContext context = new DefaultCamelContext();\n        String json = context.adapt(CatalogCamelContext.class).getEipParameterJsonSchema(\"univocity-tsv\");\n        assertNotNull(json);\n\n        DataFormatModel model = JsonMapper.generateDataFormatModel(json);\n        assertEquals(\"univocity-tsv\", model.getName());\n\n        Map<String, DataFormatOptionModel> options = model.getOptions().stream()\n                .collect(Collectors.toMap(BaseOptionModel::getName, o -> o));\n\n        assertEquals(16, options.size());\n        BaseOptionModel found = options.get(\"escapeChar\");\n        assertNotNull(found);\n        assertEquals(\"escapeChar\", found.getName());\n        assertEquals(\"attribute\", found.getKind());\n        assertEquals(false, found.isRequired());\n        assertEquals(\"string\", found.getType());\n        assertEquals(\"java.lang.String\", found.getJavaType());\n        assertEquals(false, found.isDeprecated());\n        assertEquals(false, found.isSecret());\n        assertEquals(\"\\\\\", found.getDefaultValue());\n        assertEquals(\"The escape character.\", found.getDescription());\n    }\n","realPath":"tests/camel-itest/src/test/java/org/apache/camel/itest/doc/DataFormatComponentConfigurationAndDocumentationTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"ee931a8ff38003860be3fbe6d6c9aef767aff5f8","commitMessage":"@@@CAMEL-11807: Migrated camel-itest to JUnit 5\n","date":"2020-06-27 00:36:45","modifiedFileCount":"113","status":"M","submitter":"aldettinger"}]
