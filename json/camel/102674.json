[{"authorTime":"2019-01-23 19:53:41","codes":[{"authorDate":"2019-01-23 19:53:41","commitOrder":1,"curCode":"    public void releaseExclusiveReadLockOnCommit(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {\n        String key = asKey(file);\n        Runnable r = () -> {\n            if (removeOnCommit) {\n                idempotentRepository.remove(key);\n            } else {\n                \r\n                idempotentRepository.confirm(key);\n            }\n\n            try {\n                changed.releaseExclusiveReadLockOnCommit(operations, file, exchange);\n            } catch (Exception e) {\n                log.warn(\"Error during releasing exclusive readlock on rollback. This exception is ignored.\", e);\n            }\n        };\n\n        if (readLockIdempotentReleaseDelay > 0 && readLockIdempotentReleaseExecutorService != null) {\n            log.debug(\"Scheduling readlock release task to run asynchronous delayed after {} millis\", readLockIdempotentReleaseDelay);\n            readLockIdempotentReleaseExecutorService.schedule(r, readLockIdempotentReleaseDelay, TimeUnit.MILLISECONDS);\n        } else if (readLockIdempotentReleaseDelay > 0) {\n            log.debug(\"Delaying readlock release task {} millis\", readLockIdempotentReleaseDelay);\n            Thread.sleep(readLockIdempotentReleaseDelay);\n            r.run();\n        } else {\n            r.run();\n        }\n    }\n","date":"2019-01-23 21:40:02","endLine":161,"groupId":"15983","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"releaseExclusiveReadLockOnCommit","params":"(GenericFileOperations<File>operations@GenericFile<File>file@Exchangeexchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/4a/d6d231a4b22f752b100dd0745c9ca2639e9b15.src","preCode":"    public void releaseExclusiveReadLockOnCommit(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {\n        String key = asKey(file);\n        Runnable r = () -> {\n            if (removeOnCommit) {\n                idempotentRepository.remove(key);\n            } else {\n                \r\n                idempotentRepository.confirm(key);\n            }\n\n            try {\n                changed.releaseExclusiveReadLockOnCommit(operations, file, exchange);\n            } catch (Exception e) {\n                log.warn(\"Error during releasing exclusive readlock on rollback. This exception is ignored.\", e);\n            }\n        };\n\n        if (readLockIdempotentReleaseDelay > 0 && readLockIdempotentReleaseExecutorService != null) {\n            log.debug(\"Scheduling readlock release task to run asynchronous delayed after {} millis\", readLockIdempotentReleaseDelay);\n            readLockIdempotentReleaseExecutorService.schedule(r, readLockIdempotentReleaseDelay, TimeUnit.MILLISECONDS);\n        } else if (readLockIdempotentReleaseDelay > 0) {\n            log.debug(\"Delaying readlock release task {} millis\", readLockIdempotentReleaseDelay);\n            Thread.sleep(readLockIdempotentReleaseDelay);\n            r.run();\n        } else {\n            r.run();\n        }\n    }\n","realPath":"components/camel-file/src/main/java/org/apache/camel/component/file/strategy/FileIdempotentChangedRepositoryReadLockStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"},{"authorDate":"2019-01-23 19:53:41","commitOrder":1,"curCode":"    public void releaseExclusiveReadLockOnCommit(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {\n        String key = asKey(file);\n        Runnable r = () -> {\n            if (removeOnCommit) {\n                idempotentRepository.remove(key);\n            } else {\n                \r\n                idempotentRepository.confirm(key);\n            }\n        };\n\n        if (readLockIdempotentReleaseDelay > 0 && readLockIdempotentReleaseExecutorService != null) {\n            log.debug(\"Scheduling readlock release task to run asynchronous delayed after {} millis\", readLockIdempotentReleaseDelay);\n            readLockIdempotentReleaseExecutorService.schedule(r, readLockIdempotentReleaseDelay, TimeUnit.MILLISECONDS);\n        } else if (readLockIdempotentReleaseDelay > 0) {\n            log.debug(\"Delaying readlock release task {} millis\", readLockIdempotentReleaseDelay);\n            Thread.sleep(readLockIdempotentReleaseDelay);\n            r.run();\n        } else {\n            r.run();\n        }\n    }\n","date":"2019-01-23 21:40:02","endLine":130,"groupId":"15983","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"releaseExclusiveReadLockOnCommit","params":"(GenericFileOperations<File>operations@GenericFile<File>file@Exchangeexchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/af/a7280c6c21bdf475ba6cef1e644f84f8a87c8d.src","preCode":"    public void releaseExclusiveReadLockOnCommit(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {\n        String key = asKey(file);\n        Runnable r = () -> {\n            if (removeOnCommit) {\n                idempotentRepository.remove(key);\n            } else {\n                \r\n                idempotentRepository.confirm(key);\n            }\n        };\n\n        if (readLockIdempotentReleaseDelay > 0 && readLockIdempotentReleaseExecutorService != null) {\n            log.debug(\"Scheduling readlock release task to run asynchronous delayed after {} millis\", readLockIdempotentReleaseDelay);\n            readLockIdempotentReleaseExecutorService.schedule(r, readLockIdempotentReleaseDelay, TimeUnit.MILLISECONDS);\n        } else if (readLockIdempotentReleaseDelay > 0) {\n            log.debug(\"Delaying readlock release task {} millis\", readLockIdempotentReleaseDelay);\n            Thread.sleep(readLockIdempotentReleaseDelay);\n            r.run();\n        } else {\n            r.run();\n        }\n    }\n","realPath":"components/camel-file/src/main/java/org/apache/camel/component/file/strategy/FileIdempotentRepositoryReadLockStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"}],"commitId":"b0e6341d438a3cfbdf637e84f5cf2c6ec6584b14","commitMessage":"@@@CAMEL-13112: Move file component out of camel core\n","date":"2019-01-23 21:40:02","modifiedFileCount":"25","status":"B","submitter":"Claus Ibsen"},{"authorTime":"2020-01-23 12:38:05","codes":[{"authorDate":"2020-01-23 12:38:05","commitOrder":2,"curCode":"    public void releaseExclusiveReadLockOnCommit(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {\n        String key = asKey(file);\n        Runnable r = () -> {\n            if (removeOnCommit) {\n                idempotentRepository.remove(key);\n            } else {\n                \r\n                idempotentRepository.confirm(key);\n            }\n\n            try {\n                changed.releaseExclusiveReadLockOnCommit(operations, file, exchange);\n            } catch (Exception e) {\n                LOG.warn(\"Error during releasing exclusive readlock on rollback. This exception is ignored.\", e);\n            }\n        };\n\n        if (readLockIdempotentReleaseDelay > 0 && readLockIdempotentReleaseExecutorService != null) {\n            LOG.debug(\"Scheduling readlock release task to run asynchronous delayed after {} millis\", readLockIdempotentReleaseDelay);\n            readLockIdempotentReleaseExecutorService.schedule(r, readLockIdempotentReleaseDelay, TimeUnit.MILLISECONDS);\n        } else if (readLockIdempotentReleaseDelay > 0) {\n            LOG.debug(\"Delaying readlock release task {} millis\", readLockIdempotentReleaseDelay);\n            Thread.sleep(readLockIdempotentReleaseDelay);\n            r.run();\n        } else {\n            r.run();\n        }\n    }\n","date":"2020-01-23 13:06:51","endLine":165,"groupId":"15983","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"releaseExclusiveReadLockOnCommit","params":"(GenericFileOperations<File>operations@GenericFile<File>file@Exchangeexchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/9c/83f8fc20e6729bc8a6e78a3c727b3a10971983.src","preCode":"    public void releaseExclusiveReadLockOnCommit(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {\n        String key = asKey(file);\n        Runnable r = () -> {\n            if (removeOnCommit) {\n                idempotentRepository.remove(key);\n            } else {\n                \r\n                idempotentRepository.confirm(key);\n            }\n\n            try {\n                changed.releaseExclusiveReadLockOnCommit(operations, file, exchange);\n            } catch (Exception e) {\n                log.warn(\"Error during releasing exclusive readlock on rollback. This exception is ignored.\", e);\n            }\n        };\n\n        if (readLockIdempotentReleaseDelay > 0 && readLockIdempotentReleaseExecutorService != null) {\n            log.debug(\"Scheduling readlock release task to run asynchronous delayed after {} millis\", readLockIdempotentReleaseDelay);\n            readLockIdempotentReleaseExecutorService.schedule(r, readLockIdempotentReleaseDelay, TimeUnit.MILLISECONDS);\n        } else if (readLockIdempotentReleaseDelay > 0) {\n            log.debug(\"Delaying readlock release task {} millis\", readLockIdempotentReleaseDelay);\n            Thread.sleep(readLockIdempotentReleaseDelay);\n            r.run();\n        } else {\n            r.run();\n        }\n    }\n","realPath":"components/camel-file/src/main/java/org/apache/camel/component/file/strategy/FileIdempotentChangedRepositoryReadLockStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2020-01-23 12:38:05","commitOrder":2,"curCode":"    public void releaseExclusiveReadLockOnCommit(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {\n        String key = asKey(file);\n        Runnable r = () -> {\n            if (removeOnCommit) {\n                idempotentRepository.remove(key);\n            } else {\n                \r\n                idempotentRepository.confirm(key);\n            }\n        };\n\n        if (readLockIdempotentReleaseDelay > 0 && readLockIdempotentReleaseExecutorService != null) {\n            LOG.debug(\"Scheduling readlock release task to run asynchronous delayed after {} millis\", readLockIdempotentReleaseDelay);\n            readLockIdempotentReleaseExecutorService.schedule(r, readLockIdempotentReleaseDelay, TimeUnit.MILLISECONDS);\n        } else if (readLockIdempotentReleaseDelay > 0) {\n            LOG.debug(\"Delaying readlock release task {} millis\", readLockIdempotentReleaseDelay);\n            Thread.sleep(readLockIdempotentReleaseDelay);\n            r.run();\n        } else {\n            r.run();\n        }\n    }\n","date":"2020-01-23 13:06:51","endLine":133,"groupId":"15983","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"releaseExclusiveReadLockOnCommit","params":"(GenericFileOperations<File>operations@GenericFile<File>file@Exchangeexchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/8f/be17a7fed982415f54b0727101484c882d9f4e.src","preCode":"    public void releaseExclusiveReadLockOnCommit(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {\n        String key = asKey(file);\n        Runnable r = () -> {\n            if (removeOnCommit) {\n                idempotentRepository.remove(key);\n            } else {\n                \r\n                idempotentRepository.confirm(key);\n            }\n        };\n\n        if (readLockIdempotentReleaseDelay > 0 && readLockIdempotentReleaseExecutorService != null) {\n            log.debug(\"Scheduling readlock release task to run asynchronous delayed after {} millis\", readLockIdempotentReleaseDelay);\n            readLockIdempotentReleaseExecutorService.schedule(r, readLockIdempotentReleaseDelay, TimeUnit.MILLISECONDS);\n        } else if (readLockIdempotentReleaseDelay > 0) {\n            log.debug(\"Delaying readlock release task {} millis\", readLockIdempotentReleaseDelay);\n            Thread.sleep(readLockIdempotentReleaseDelay);\n            r.run();\n        } else {\n            r.run();\n        }\n    }\n","realPath":"components/camel-file/src/main/java/org/apache/camel/component/file/strategy/FileIdempotentRepositoryReadLockStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"2ae0cd8c24b35707d4cc40fd09310977cff57a68","commitMessage":"@@@CAMEL-14421: optimize core - ServiceSupport should not have instance logger. Use static logger instead.\n","date":"2020-01-23 13:06:51","modifiedFileCount":"351","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2020-06-04 12:29:28","codes":[{"authorDate":"2020-06-04 12:29:28","commitOrder":3,"curCode":"    public void releaseExclusiveReadLockOnCommit(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {\n        String key = asKey(file);\n        Runnable r = () -> {\n            if (removeOnCommit) {\n                idempotentRepository.remove(exchange, key);\n            } else {\n                \r\n                idempotentRepository.confirm(exchange, key);\n            }\n\n            try {\n                changed.releaseExclusiveReadLockOnCommit(operations, file, exchange);\n            } catch (Exception e) {\n                LOG.warn(\"Error during releasing exclusive readlock on rollback. This exception is ignored.\", e);\n            }\n        };\n\n        if (readLockIdempotentReleaseDelay > 0 && readLockIdempotentReleaseExecutorService != null) {\n            LOG.debug(\"Scheduling readlock release task to run asynchronous delayed after {} millis\", readLockIdempotentReleaseDelay);\n            readLockIdempotentReleaseExecutorService.schedule(r, readLockIdempotentReleaseDelay, TimeUnit.MILLISECONDS);\n        } else if (readLockIdempotentReleaseDelay > 0) {\n            LOG.debug(\"Delaying readlock release task {} millis\", readLockIdempotentReleaseDelay);\n            Thread.sleep(readLockIdempotentReleaseDelay);\n            r.run();\n        } else {\n            r.run();\n        }\n    }\n","date":"2020-06-04 12:29:28","endLine":169,"groupId":"102674","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"releaseExclusiveReadLockOnCommit","params":"(GenericFileOperations<File>operations@GenericFile<File>file@Exchangeexchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/6e/31b8c8f8d20788bff50bbf2b7ec2fd3b990bd9.src","preCode":"    public void releaseExclusiveReadLockOnCommit(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {\n        String key = asKey(file);\n        Runnable r = () -> {\n            if (removeOnCommit) {\n                idempotentRepository.remove(key);\n            } else {\n                \r\n                idempotentRepository.confirm(key);\n            }\n\n            try {\n                changed.releaseExclusiveReadLockOnCommit(operations, file, exchange);\n            } catch (Exception e) {\n                LOG.warn(\"Error during releasing exclusive readlock on rollback. This exception is ignored.\", e);\n            }\n        };\n\n        if (readLockIdempotentReleaseDelay > 0 && readLockIdempotentReleaseExecutorService != null) {\n            LOG.debug(\"Scheduling readlock release task to run asynchronous delayed after {} millis\", readLockIdempotentReleaseDelay);\n            readLockIdempotentReleaseExecutorService.schedule(r, readLockIdempotentReleaseDelay, TimeUnit.MILLISECONDS);\n        } else if (readLockIdempotentReleaseDelay > 0) {\n            LOG.debug(\"Delaying readlock release task {} millis\", readLockIdempotentReleaseDelay);\n            Thread.sleep(readLockIdempotentReleaseDelay);\n            r.run();\n        } else {\n            r.run();\n        }\n    }\n","realPath":"components/camel-file/src/main/java/org/apache/camel/component/file/strategy/FileIdempotentChangedRepositoryReadLockStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2020-06-04 12:29:28","commitOrder":3,"curCode":"    public void releaseExclusiveReadLockOnCommit(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {\n        String key = asKey(file);\n        Runnable r = () -> {\n            if (removeOnCommit) {\n                idempotentRepository.remove(exchange, key);\n            } else {\n                \r\n                idempotentRepository.confirm(exchange, key);\n            }\n        };\n\n        if (readLockIdempotentReleaseDelay > 0 && readLockIdempotentReleaseExecutorService != null) {\n            LOG.debug(\"Scheduling readlock release task to run asynchronous delayed after {} millis\", readLockIdempotentReleaseDelay);\n            readLockIdempotentReleaseExecutorService.schedule(r, readLockIdempotentReleaseDelay, TimeUnit.MILLISECONDS);\n        } else if (readLockIdempotentReleaseDelay > 0) {\n            LOG.debug(\"Delaying readlock release task {} millis\", readLockIdempotentReleaseDelay);\n            Thread.sleep(readLockIdempotentReleaseDelay);\n            r.run();\n        } else {\n            r.run();\n        }\n    }\n","date":"2020-06-04 12:29:28","endLine":137,"groupId":"102674","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"releaseExclusiveReadLockOnCommit","params":"(GenericFileOperations<File>operations@GenericFile<File>file@Exchangeexchange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/72/57cd577737ab9c44287eb0b3cfe0a033860896.src","preCode":"    public void releaseExclusiveReadLockOnCommit(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {\n        String key = asKey(file);\n        Runnable r = () -> {\n            if (removeOnCommit) {\n                idempotentRepository.remove(key);\n            } else {\n                \r\n                idempotentRepository.confirm(key);\n            }\n        };\n\n        if (readLockIdempotentReleaseDelay > 0 && readLockIdempotentReleaseExecutorService != null) {\n            LOG.debug(\"Scheduling readlock release task to run asynchronous delayed after {} millis\", readLockIdempotentReleaseDelay);\n            readLockIdempotentReleaseExecutorService.schedule(r, readLockIdempotentReleaseDelay, TimeUnit.MILLISECONDS);\n        } else if (readLockIdempotentReleaseDelay > 0) {\n            LOG.debug(\"Delaying readlock release task {} millis\", readLockIdempotentReleaseDelay);\n            Thread.sleep(readLockIdempotentReleaseDelay);\n            r.run();\n        } else {\n            r.run();\n        }\n    }\n","realPath":"components/camel-file/src/main/java/org/apache/camel/component/file/strategy/FileIdempotentRepositoryReadLockStrategy.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"d70b4fb1ef7ffa93f0d56dc2bd30b7b3a10ebec5","commitMessage":"@@@Pass exchange as parameter to idempotentRepository methods (#3885)\n\n","date":"2020-06-04 12:29:28","modifiedFileCount":"3","status":"M","submitter":"perttuk"}]
