[{"authorTime":"2021-02-24 19:04:05","codes":[{"authorDate":"2021-02-24 19:04:05","commitOrder":1,"curCode":"        protected boolean setProperty(IdempotentConsumerDefinition target, String propertyKey,\n                String propertyName, Node node) {\n            switch(propertyKey) {\n                case \"completion-eager\": {\n                    String val = asText(node);\n                    target.setCompletionEager(val);\n                    break;\n                }\n                case \"eager\": {\n                    String val = asText(node);\n                    target.setEager(val);\n                    break;\n                }\n                case \"expression\": {\n                    org.apache.camel.model.language.ExpressionDefinition val = asType(node, org.apache.camel.model.language.ExpressionDefinition.class);\n                    target.setExpression(val);\n                    break;\n                }\n                case \"inherit-error-handler\": {\n                    String val = asText(node);\n                    target.setInheritErrorHandler(java.lang.Boolean.valueOf(val));\n                    break;\n                }\n                case \"message-id-repository-ref\": {\n                    String val = asText(node);\n                    target.setMessageIdRepositoryRef(val);\n                    break;\n                }\n                case \"remove-on-failure\": {\n                    String val = asText(node);\n                    target.setRemoveOnFailure(val);\n                    break;\n                }\n                case \"skip-duplicate\": {\n                    String val = asText(node);\n                    target.setSkipDuplicate(val);\n                    break;\n                }\n                case \"steps\": {\n                    for (ProcessorDefinition<?> definition: asFlatList(node, ProcessorDefinition.class)) {\n                        target.addOutput(definition);\n                    }\n                    break;\n                }\n                default: {\n                    ExpressionDefinition ed = target.getExpressionType();\n                    if (ed != null) {\n                        throw new org.apache.camel.dsl.yaml.common.exception.UnsupportedFieldException(propertyName, \"an expression has already been configured (\" + ed + \")\");\n                    }\n                    ed = ExpressionDeserializers.constructExpressionType(propertyKey, node);\n                    if (ed != null) {\n                        target.setExpressionType(ed);\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n","date":"2021-02-26 18:08:11","endLine":5859,"groupId":"44268","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setProperty","params":"(IdempotentConsumerDefinitiontarget@StringpropertyKey@StringpropertyName@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/0b/6836351bafdacf9199915aad6ff68c9acaec4b.src","preCode":"        protected boolean setProperty(IdempotentConsumerDefinition target, String propertyKey,\n                String propertyName, Node node) {\n            switch(propertyKey) {\n                case \"completion-eager\": {\n                    String val = asText(node);\n                    target.setCompletionEager(val);\n                    break;\n                }\n                case \"eager\": {\n                    String val = asText(node);\n                    target.setEager(val);\n                    break;\n                }\n                case \"expression\": {\n                    org.apache.camel.model.language.ExpressionDefinition val = asType(node, org.apache.camel.model.language.ExpressionDefinition.class);\n                    target.setExpression(val);\n                    break;\n                }\n                case \"inherit-error-handler\": {\n                    String val = asText(node);\n                    target.setInheritErrorHandler(java.lang.Boolean.valueOf(val));\n                    break;\n                }\n                case \"message-id-repository-ref\": {\n                    String val = asText(node);\n                    target.setMessageIdRepositoryRef(val);\n                    break;\n                }\n                case \"remove-on-failure\": {\n                    String val = asText(node);\n                    target.setRemoveOnFailure(val);\n                    break;\n                }\n                case \"skip-duplicate\": {\n                    String val = asText(node);\n                    target.setSkipDuplicate(val);\n                    break;\n                }\n                case \"steps\": {\n                    for (ProcessorDefinition<?> definition: asFlatList(node, ProcessorDefinition.class)) {\n                        target.addOutput(definition);\n                    }\n                    break;\n                }\n                default: {\n                    ExpressionDefinition ed = target.getExpressionType();\n                    if (ed != null) {\n                        throw new org.apache.camel.dsl.yaml.common.exception.UnsupportedFieldException(propertyName, \"an expression has already been configured (\" + ed + \")\");\n                    }\n                    ed = ExpressionDeserializers.constructExpressionType(propertyKey, node);\n                    if (ed != null) {\n                        target.setExpressionType(ed);\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n","realPath":"dsl/camel-yaml-dsl/camel-yaml-dsl-deserializers/src/generated/java/org/apache/camel/dsl/yaml/deserializers/ModelDeserializers.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":5801,"status":"B"},{"authorDate":"2021-02-24 19:04:05","commitOrder":1,"curCode":"        protected boolean setProperty(RecipientListDefinition target, String propertyKey,\n                String propertyName, Node node) {\n            switch(propertyKey) {\n                case \"cache-size\": {\n                    String val = asText(node);\n                    target.setCacheSize(val);\n                    break;\n                }\n                case \"delimiter\": {\n                    String val = asText(node);\n                    target.setDelimiter(val);\n                    break;\n                }\n                case \"executor-service-ref\": {\n                    String val = asText(node);\n                    target.setExecutorServiceRef(val);\n                    break;\n                }\n                case \"expression\": {\n                    org.apache.camel.model.language.ExpressionDefinition val = asType(node, org.apache.camel.model.language.ExpressionDefinition.class);\n                    target.setExpression(val);\n                    break;\n                }\n                case \"ignore-invalid-endpoints\": {\n                    String val = asText(node);\n                    target.setIgnoreInvalidEndpoints(val);\n                    break;\n                }\n                case \"inherit-error-handler\": {\n                    String val = asText(node);\n                    target.setInheritErrorHandler(java.lang.Boolean.valueOf(val));\n                    break;\n                }\n                case \"on-prepare-ref\": {\n                    String val = asText(node);\n                    target.setOnPrepareRef(val);\n                    break;\n                }\n                case \"parallel-aggregate\": {\n                    String val = asText(node);\n                    target.setParallelAggregate(val);\n                    break;\n                }\n                case \"parallel-processing\": {\n                    String val = asText(node);\n                    target.setParallelProcessing(val);\n                    break;\n                }\n                case \"share-unit-of-work\": {\n                    String val = asText(node);\n                    target.setShareUnitOfWork(val);\n                    break;\n                }\n                case \"stop-on-aggregate-exception\": {\n                    String val = asText(node);\n                    target.setStopOnAggregateException(val);\n                    break;\n                }\n                case \"stop-on-exception\": {\n                    String val = asText(node);\n                    target.setStopOnException(val);\n                    break;\n                }\n                case \"strategy-method-allow-null\": {\n                    String val = asText(node);\n                    target.setStrategyMethodAllowNull(val);\n                    break;\n                }\n                case \"strategy-method-name\": {\n                    String val = asText(node);\n                    target.setStrategyMethodName(val);\n                    break;\n                }\n                case \"strategy-ref\": {\n                    String val = asText(node);\n                    target.setStrategyRef(val);\n                    break;\n                }\n                case \"streaming\": {\n                    String val = asText(node);\n                    target.setStreaming(val);\n                    break;\n                }\n                case \"timeout\": {\n                    String val = asText(node);\n                    target.setTimeout(val);\n                    break;\n                }\n                default: {\n                    ExpressionDefinition ed = target.getExpressionType();\n                    if (ed != null) {\n                        throw new org.apache.camel.dsl.yaml.common.exception.UnsupportedFieldException(propertyName, \"an expression has already been configured (\" + ed + \")\");\n                    }\n                    ed = ExpressionDeserializers.constructExpressionType(propertyKey, node);\n                    if (ed != null) {\n                        target.setExpressionType(ed);\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n","date":"2021-02-26 18:08:11","endLine":9631,"groupId":"2971","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setProperty","params":"(RecipientListDefinitiontarget@StringpropertyKey@StringpropertyName@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/0b/6836351bafdacf9199915aad6ff68c9acaec4b.src","preCode":"        protected boolean setProperty(RecipientListDefinition target, String propertyKey,\n                String propertyName, Node node) {\n            switch(propertyKey) {\n                case \"cache-size\": {\n                    String val = asText(node);\n                    target.setCacheSize(val);\n                    break;\n                }\n                case \"delimiter\": {\n                    String val = asText(node);\n                    target.setDelimiter(val);\n                    break;\n                }\n                case \"executor-service-ref\": {\n                    String val = asText(node);\n                    target.setExecutorServiceRef(val);\n                    break;\n                }\n                case \"expression\": {\n                    org.apache.camel.model.language.ExpressionDefinition val = asType(node, org.apache.camel.model.language.ExpressionDefinition.class);\n                    target.setExpression(val);\n                    break;\n                }\n                case \"ignore-invalid-endpoints\": {\n                    String val = asText(node);\n                    target.setIgnoreInvalidEndpoints(val);\n                    break;\n                }\n                case \"inherit-error-handler\": {\n                    String val = asText(node);\n                    target.setInheritErrorHandler(java.lang.Boolean.valueOf(val));\n                    break;\n                }\n                case \"on-prepare-ref\": {\n                    String val = asText(node);\n                    target.setOnPrepareRef(val);\n                    break;\n                }\n                case \"parallel-aggregate\": {\n                    String val = asText(node);\n                    target.setParallelAggregate(val);\n                    break;\n                }\n                case \"parallel-processing\": {\n                    String val = asText(node);\n                    target.setParallelProcessing(val);\n                    break;\n                }\n                case \"share-unit-of-work\": {\n                    String val = asText(node);\n                    target.setShareUnitOfWork(val);\n                    break;\n                }\n                case \"stop-on-aggregate-exception\": {\n                    String val = asText(node);\n                    target.setStopOnAggregateException(val);\n                    break;\n                }\n                case \"stop-on-exception\": {\n                    String val = asText(node);\n                    target.setStopOnException(val);\n                    break;\n                }\n                case \"strategy-method-allow-null\": {\n                    String val = asText(node);\n                    target.setStrategyMethodAllowNull(val);\n                    break;\n                }\n                case \"strategy-method-name\": {\n                    String val = asText(node);\n                    target.setStrategyMethodName(val);\n                    break;\n                }\n                case \"strategy-ref\": {\n                    String val = asText(node);\n                    target.setStrategyRef(val);\n                    break;\n                }\n                case \"streaming\": {\n                    String val = asText(node);\n                    target.setStreaming(val);\n                    break;\n                }\n                case \"timeout\": {\n                    String val = asText(node);\n                    target.setTimeout(val);\n                    break;\n                }\n                default: {\n                    ExpressionDefinition ed = target.getExpressionType();\n                    if (ed != null) {\n                        throw new org.apache.camel.dsl.yaml.common.exception.UnsupportedFieldException(propertyName, \"an expression has already been configured (\" + ed + \")\");\n                    }\n                    ed = ExpressionDeserializers.constructExpressionType(propertyKey, node);\n                    if (ed != null) {\n                        target.setExpressionType(ed);\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n","realPath":"dsl/camel-yaml-dsl/camel-yaml-dsl-deserializers/src/generated/java/org/apache/camel/dsl/yaml/deserializers/ModelDeserializers.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":9529,"status":"B"}],"commitId":"547ecc32db3fe7921e94426d04cb400fb3836493","commitMessage":"@@@CAMEL-12545: create a yaml based route loader\n","date":"2021-02-26 18:08:11","modifiedFileCount":"2","status":"B","submitter":"Luca Burgazzoli"},{"authorTime":"2021-02-24 19:04:05","codes":[{"authorDate":"2021-04-15 01:06:29","commitOrder":2,"curCode":"        protected boolean setProperty(IdempotentConsumerDefinition target, String propertyKey,\n                String propertyName, Node node) {\n            switch(propertyKey) {\n                case \"completion-eager\": {\n                    String val = asText(node);\n                    target.setCompletionEager(val);\n                    break;\n                }\n                case \"eager\": {\n                    String val = asText(node);\n                    target.setEager(val);\n                    break;\n                }\n                case \"expression\": {\n                    org.apache.camel.model.language.ExpressionDefinition val = asType(node, org.apache.camel.model.language.ExpressionDefinition.class);\n                    target.setExpression(val);\n                    break;\n                }\n                case \"inherit-error-handler\": {\n                    String val = asText(node);\n                    target.setInheritErrorHandler(java.lang.Boolean.valueOf(val));\n                    break;\n                }\n                case \"message-id-repository-ref\": {\n                    String val = asText(node);\n                    target.setMessageIdRepositoryRef(val);\n                    break;\n                }\n                case \"remove-on-failure\": {\n                    String val = asText(node);\n                    target.setRemoveOnFailure(val);\n                    break;\n                }\n                case \"skip-duplicate\": {\n                    String val = asText(node);\n                    target.setSkipDuplicate(val);\n                    break;\n                }\n                case \"steps\": {\n                    setSteps(target, node);;\n                    break;\n                }\n                default: {\n                    ExpressionDefinition ed = target.getExpressionType();\n                    if (ed != null) {\n                        throw new org.apache.camel.dsl.yaml.common.exception.UnsupportedFieldException(propertyName, \"an expression has already been configured (\" + ed + \")\");\n                    }\n                    ed = ExpressionDeserializers.constructExpressionType(propertyKey, node);\n                    if (ed != null) {\n                        target.setExpressionType(ed);\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n","date":"2021-04-15 16:53:20","endLine":5852,"groupId":"33835","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setProperty","params":"(IdempotentConsumerDefinitiontarget@StringpropertyKey@StringpropertyName@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/f1/2f10dbb6df549acfb50dd47949d3f60219a67f.src","preCode":"        protected boolean setProperty(IdempotentConsumerDefinition target, String propertyKey,\n                String propertyName, Node node) {\n            switch(propertyKey) {\n                case \"completion-eager\": {\n                    String val = asText(node);\n                    target.setCompletionEager(val);\n                    break;\n                }\n                case \"eager\": {\n                    String val = asText(node);\n                    target.setEager(val);\n                    break;\n                }\n                case \"expression\": {\n                    org.apache.camel.model.language.ExpressionDefinition val = asType(node, org.apache.camel.model.language.ExpressionDefinition.class);\n                    target.setExpression(val);\n                    break;\n                }\n                case \"inherit-error-handler\": {\n                    String val = asText(node);\n                    target.setInheritErrorHandler(java.lang.Boolean.valueOf(val));\n                    break;\n                }\n                case \"message-id-repository-ref\": {\n                    String val = asText(node);\n                    target.setMessageIdRepositoryRef(val);\n                    break;\n                }\n                case \"remove-on-failure\": {\n                    String val = asText(node);\n                    target.setRemoveOnFailure(val);\n                    break;\n                }\n                case \"skip-duplicate\": {\n                    String val = asText(node);\n                    target.setSkipDuplicate(val);\n                    break;\n                }\n                case \"steps\": {\n                    for (ProcessorDefinition<?> definition: asFlatList(node, ProcessorDefinition.class)) {\n                        target.addOutput(definition);\n                    }\n                    break;\n                }\n                default: {\n                    ExpressionDefinition ed = target.getExpressionType();\n                    if (ed != null) {\n                        throw new org.apache.camel.dsl.yaml.common.exception.UnsupportedFieldException(propertyName, \"an expression has already been configured (\" + ed + \")\");\n                    }\n                    ed = ExpressionDeserializers.constructExpressionType(propertyKey, node);\n                    if (ed != null) {\n                        target.setExpressionType(ed);\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n","realPath":"dsl/camel-yaml-dsl/camel-yaml-dsl-deserializers/src/generated/java/org/apache/camel/dsl/yaml/deserializers/ModelDeserializers.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":5796,"status":"M"},{"authorDate":"2021-02-24 19:04:05","commitOrder":2,"curCode":"        protected boolean setProperty(RecipientListDefinition target, String propertyKey,\n                String propertyName, Node node) {\n            switch(propertyKey) {\n                case \"cache-size\": {\n                    String val = asText(node);\n                    target.setCacheSize(val);\n                    break;\n                }\n                case \"delimiter\": {\n                    String val = asText(node);\n                    target.setDelimiter(val);\n                    break;\n                }\n                case \"executor-service-ref\": {\n                    String val = asText(node);\n                    target.setExecutorServiceRef(val);\n                    break;\n                }\n                case \"expression\": {\n                    org.apache.camel.model.language.ExpressionDefinition val = asType(node, org.apache.camel.model.language.ExpressionDefinition.class);\n                    target.setExpression(val);\n                    break;\n                }\n                case \"ignore-invalid-endpoints\": {\n                    String val = asText(node);\n                    target.setIgnoreInvalidEndpoints(val);\n                    break;\n                }\n                case \"inherit-error-handler\": {\n                    String val = asText(node);\n                    target.setInheritErrorHandler(java.lang.Boolean.valueOf(val));\n                    break;\n                }\n                case \"on-prepare-ref\": {\n                    String val = asText(node);\n                    target.setOnPrepareRef(val);\n                    break;\n                }\n                case \"parallel-aggregate\": {\n                    String val = asText(node);\n                    target.setParallelAggregate(val);\n                    break;\n                }\n                case \"parallel-processing\": {\n                    String val = asText(node);\n                    target.setParallelProcessing(val);\n                    break;\n                }\n                case \"share-unit-of-work\": {\n                    String val = asText(node);\n                    target.setShareUnitOfWork(val);\n                    break;\n                }\n                case \"stop-on-aggregate-exception\": {\n                    String val = asText(node);\n                    target.setStopOnAggregateException(val);\n                    break;\n                }\n                case \"stop-on-exception\": {\n                    String val = asText(node);\n                    target.setStopOnException(val);\n                    break;\n                }\n                case \"strategy-method-allow-null\": {\n                    String val = asText(node);\n                    target.setStrategyMethodAllowNull(val);\n                    break;\n                }\n                case \"strategy-method-name\": {\n                    String val = asText(node);\n                    target.setStrategyMethodName(val);\n                    break;\n                }\n                case \"strategy-ref\": {\n                    String val = asText(node);\n                    target.setStrategyRef(val);\n                    break;\n                }\n                case \"streaming\": {\n                    String val = asText(node);\n                    target.setStreaming(val);\n                    break;\n                }\n                case \"timeout\": {\n                    String val = asText(node);\n                    target.setTimeout(val);\n                    break;\n                }\n                default: {\n                    ExpressionDefinition ed = target.getExpressionType();\n                    if (ed != null) {\n                        throw new org.apache.camel.dsl.yaml.common.exception.UnsupportedFieldException(propertyName, \"an expression has already been configured (\" + ed + \")\");\n                    }\n                    ed = ExpressionDeserializers.constructExpressionType(propertyKey, node);\n                    if (ed != null) {\n                        target.setExpressionType(ed);\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n","date":"2021-02-26 18:08:11","endLine":9631,"groupId":"2971","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setProperty","params":"(RecipientListDefinitiontarget@StringpropertyKey@StringpropertyName@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/0b/6836351bafdacf9199915aad6ff68c9acaec4b.src","preCode":"        protected boolean setProperty(RecipientListDefinition target, String propertyKey,\n                String propertyName, Node node) {\n            switch(propertyKey) {\n                case \"cache-size\": {\n                    String val = asText(node);\n                    target.setCacheSize(val);\n                    break;\n                }\n                case \"delimiter\": {\n                    String val = asText(node);\n                    target.setDelimiter(val);\n                    break;\n                }\n                case \"executor-service-ref\": {\n                    String val = asText(node);\n                    target.setExecutorServiceRef(val);\n                    break;\n                }\n                case \"expression\": {\n                    org.apache.camel.model.language.ExpressionDefinition val = asType(node, org.apache.camel.model.language.ExpressionDefinition.class);\n                    target.setExpression(val);\n                    break;\n                }\n                case \"ignore-invalid-endpoints\": {\n                    String val = asText(node);\n                    target.setIgnoreInvalidEndpoints(val);\n                    break;\n                }\n                case \"inherit-error-handler\": {\n                    String val = asText(node);\n                    target.setInheritErrorHandler(java.lang.Boolean.valueOf(val));\n                    break;\n                }\n                case \"on-prepare-ref\": {\n                    String val = asText(node);\n                    target.setOnPrepareRef(val);\n                    break;\n                }\n                case \"parallel-aggregate\": {\n                    String val = asText(node);\n                    target.setParallelAggregate(val);\n                    break;\n                }\n                case \"parallel-processing\": {\n                    String val = asText(node);\n                    target.setParallelProcessing(val);\n                    break;\n                }\n                case \"share-unit-of-work\": {\n                    String val = asText(node);\n                    target.setShareUnitOfWork(val);\n                    break;\n                }\n                case \"stop-on-aggregate-exception\": {\n                    String val = asText(node);\n                    target.setStopOnAggregateException(val);\n                    break;\n                }\n                case \"stop-on-exception\": {\n                    String val = asText(node);\n                    target.setStopOnException(val);\n                    break;\n                }\n                case \"strategy-method-allow-null\": {\n                    String val = asText(node);\n                    target.setStrategyMethodAllowNull(val);\n                    break;\n                }\n                case \"strategy-method-name\": {\n                    String val = asText(node);\n                    target.setStrategyMethodName(val);\n                    break;\n                }\n                case \"strategy-ref\": {\n                    String val = asText(node);\n                    target.setStrategyRef(val);\n                    break;\n                }\n                case \"streaming\": {\n                    String val = asText(node);\n                    target.setStreaming(val);\n                    break;\n                }\n                case \"timeout\": {\n                    String val = asText(node);\n                    target.setTimeout(val);\n                    break;\n                }\n                default: {\n                    ExpressionDefinition ed = target.getExpressionType();\n                    if (ed != null) {\n                        throw new org.apache.camel.dsl.yaml.common.exception.UnsupportedFieldException(propertyName, \"an expression has already been configured (\" + ed + \")\");\n                    }\n                    ed = ExpressionDeserializers.constructExpressionType(propertyKey, node);\n                    if (ed != null) {\n                        target.setExpressionType(ed);\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n","realPath":"dsl/camel-yaml-dsl/camel-yaml-dsl-deserializers/src/generated/java/org/apache/camel/dsl/yaml/deserializers/ModelDeserializers.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":9529,"status":"N"}],"commitId":"910f142ce013234868fc6da5eda7cffb80b45b2b","commitMessage":"@@@[CAMEL-16504] YAML Dsl : support for \"flow\" like route definition\n","date":"2021-04-15 16:53:20","modifiedFileCount":"8","status":"M","submitter":"Luca Burgazzoli"},{"authorTime":"2021-06-17 16:48:24","codes":[{"authorDate":"2021-06-17 16:48:24","commitOrder":3,"curCode":"        protected boolean setProperty(IdempotentConsumerDefinition target, String propertyKey,\n                String propertyName, Node node) {\n            switch(propertyKey) {\n                case \"completion-eager\": {\n                    String val = asText(node);\n                    target.setCompletionEager(val);\n                    break;\n                }\n                case \"eager\": {\n                    String val = asText(node);\n                    target.setEager(val);\n                    break;\n                }\n                case \"expression\": {\n                    org.apache.camel.model.language.ExpressionDefinition val = asType(node, org.apache.camel.model.language.ExpressionDefinition.class);\n                    target.setExpression(val);\n                    break;\n                }\n                case \"inherit-error-handler\": {\n                    String val = asText(node);\n                    target.setInheritErrorHandler(java.lang.Boolean.valueOf(val));\n                    break;\n                }\n                case \"message-id-repository-ref\": {\n                    String val = asText(node);\n                    target.setMessageIdRepositoryRef(val);\n                    break;\n                }\n                case \"remove-on-failure\": {\n                    String val = asText(node);\n                    target.setRemoveOnFailure(val);\n                    break;\n                }\n                case \"skip-duplicate\": {\n                    String val = asText(node);\n                    target.setSkipDuplicate(val);\n                    break;\n                }\n                case \"id\": {\n                    String val = asText(node);\n                    target.setId(val);\n                    break;\n                }\n                case \"description\": {\n                    org.apache.camel.model.DescriptionDefinition val = asType(node, org.apache.camel.model.DescriptionDefinition.class);\n                    target.setDescription(val);\n                    break;\n                }\n                case \"steps\": {\n                    setSteps(target, node);;\n                    break;\n                }\n                default: {\n                    ExpressionDefinition ed = target.getExpressionType();\n                    if (ed != null) {\n                        throw new org.apache.camel.dsl.yaml.common.exception.UnsupportedFieldException(propertyName, \"an expression has already been configured (\" + ed + \")\");\n                    }\n                    ed = ExpressionDeserializers.constructExpressionType(propertyKey, node);\n                    if (ed != null) {\n                        target.setExpressionType(ed);\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n","date":"2021-06-17 16:48:24","endLine":6366,"groupId":"11876","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setProperty","params":"(IdempotentConsumerDefinitiontarget@StringpropertyKey@StringpropertyName@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ed/86c6420ebdb4b8d0da81e13a5315736da1f5fa.src","preCode":"        protected boolean setProperty(IdempotentConsumerDefinition target, String propertyKey,\n                String propertyName, Node node) {\n            switch(propertyKey) {\n                case \"completion-eager\": {\n                    String val = asText(node);\n                    target.setCompletionEager(val);\n                    break;\n                }\n                case \"eager\": {\n                    String val = asText(node);\n                    target.setEager(val);\n                    break;\n                }\n                case \"expression\": {\n                    org.apache.camel.model.language.ExpressionDefinition val = asType(node, org.apache.camel.model.language.ExpressionDefinition.class);\n                    target.setExpression(val);\n                    break;\n                }\n                case \"inherit-error-handler\": {\n                    String val = asText(node);\n                    target.setInheritErrorHandler(java.lang.Boolean.valueOf(val));\n                    break;\n                }\n                case \"message-id-repository-ref\": {\n                    String val = asText(node);\n                    target.setMessageIdRepositoryRef(val);\n                    break;\n                }\n                case \"remove-on-failure\": {\n                    String val = asText(node);\n                    target.setRemoveOnFailure(val);\n                    break;\n                }\n                case \"skip-duplicate\": {\n                    String val = asText(node);\n                    target.setSkipDuplicate(val);\n                    break;\n                }\n                case \"steps\": {\n                    setSteps(target, node);;\n                    break;\n                }\n                default: {\n                    ExpressionDefinition ed = target.getExpressionType();\n                    if (ed != null) {\n                        throw new org.apache.camel.dsl.yaml.common.exception.UnsupportedFieldException(propertyName, \"an expression has already been configured (\" + ed + \")\");\n                    }\n                    ed = ExpressionDeserializers.constructExpressionType(propertyKey, node);\n                    if (ed != null) {\n                        target.setExpressionType(ed);\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n","realPath":"dsl/camel-yaml-dsl/camel-yaml-dsl-deserializers/src/generated/java/org/apache/camel/dsl/yaml/deserializers/ModelDeserializers.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":6300,"status":"M"},{"authorDate":"2021-06-17 16:48:24","commitOrder":3,"curCode":"        protected boolean setProperty(RecipientListDefinition target, String propertyKey,\n                String propertyName, Node node) {\n            switch(propertyKey) {\n                case \"cache-size\": {\n                    String val = asText(node);\n                    target.setCacheSize(val);\n                    break;\n                }\n                case \"delimiter\": {\n                    String val = asText(node);\n                    target.setDelimiter(val);\n                    break;\n                }\n                case \"executor-service-ref\": {\n                    String val = asText(node);\n                    target.setExecutorServiceRef(val);\n                    break;\n                }\n                case \"expression\": {\n                    org.apache.camel.model.language.ExpressionDefinition val = asType(node, org.apache.camel.model.language.ExpressionDefinition.class);\n                    target.setExpression(val);\n                    break;\n                }\n                case \"ignore-invalid-endpoints\": {\n                    String val = asText(node);\n                    target.setIgnoreInvalidEndpoints(val);\n                    break;\n                }\n                case \"inherit-error-handler\": {\n                    String val = asText(node);\n                    target.setInheritErrorHandler(java.lang.Boolean.valueOf(val));\n                    break;\n                }\n                case \"on-prepare-ref\": {\n                    String val = asText(node);\n                    target.setOnPrepareRef(val);\n                    break;\n                }\n                case \"parallel-aggregate\": {\n                    String val = asText(node);\n                    target.setParallelAggregate(val);\n                    break;\n                }\n                case \"parallel-processing\": {\n                    String val = asText(node);\n                    target.setParallelProcessing(val);\n                    break;\n                }\n                case \"share-unit-of-work\": {\n                    String val = asText(node);\n                    target.setShareUnitOfWork(val);\n                    break;\n                }\n                case \"stop-on-aggregate-exception\": {\n                    String val = asText(node);\n                    target.setStopOnAggregateException(val);\n                    break;\n                }\n                case \"stop-on-exception\": {\n                    String val = asText(node);\n                    target.setStopOnException(val);\n                    break;\n                }\n                case \"strategy-method-allow-null\": {\n                    String val = asText(node);\n                    target.setStrategyMethodAllowNull(val);\n                    break;\n                }\n                case \"strategy-method-name\": {\n                    String val = asText(node);\n                    target.setStrategyMethodName(val);\n                    break;\n                }\n                case \"strategy-ref\": {\n                    String val = asText(node);\n                    target.setStrategyRef(val);\n                    break;\n                }\n                case \"streaming\": {\n                    String val = asText(node);\n                    target.setStreaming(val);\n                    break;\n                }\n                case \"timeout\": {\n                    String val = asText(node);\n                    target.setTimeout(val);\n                    break;\n                }\n                case \"id\": {\n                    String val = asText(node);\n                    target.setId(val);\n                    break;\n                }\n                case \"description\": {\n                    org.apache.camel.model.DescriptionDefinition val = asType(node, org.apache.camel.model.DescriptionDefinition.class);\n                    target.setDescription(val);\n                    break;\n                }\n                default: {\n                    ExpressionDefinition ed = target.getExpressionType();\n                    if (ed != null) {\n                        throw new org.apache.camel.dsl.yaml.common.exception.UnsupportedFieldException(propertyName, \"an expression has already been configured (\" + ed + \")\");\n                    }\n                    ed = ExpressionDeserializers.constructExpressionType(propertyKey, node);\n                    if (ed != null) {\n                        target.setExpressionType(ed);\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n","date":"2021-06-17 16:48:24","endLine":10546,"groupId":"11876","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setProperty","params":"(RecipientListDefinitiontarget@StringpropertyKey@StringpropertyName@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ed/86c6420ebdb4b8d0da81e13a5315736da1f5fa.src","preCode":"        protected boolean setProperty(RecipientListDefinition target, String propertyKey,\n                String propertyName, Node node) {\n            switch(propertyKey) {\n                case \"cache-size\": {\n                    String val = asText(node);\n                    target.setCacheSize(val);\n                    break;\n                }\n                case \"delimiter\": {\n                    String val = asText(node);\n                    target.setDelimiter(val);\n                    break;\n                }\n                case \"executor-service-ref\": {\n                    String val = asText(node);\n                    target.setExecutorServiceRef(val);\n                    break;\n                }\n                case \"expression\": {\n                    org.apache.camel.model.language.ExpressionDefinition val = asType(node, org.apache.camel.model.language.ExpressionDefinition.class);\n                    target.setExpression(val);\n                    break;\n                }\n                case \"ignore-invalid-endpoints\": {\n                    String val = asText(node);\n                    target.setIgnoreInvalidEndpoints(val);\n                    break;\n                }\n                case \"inherit-error-handler\": {\n                    String val = asText(node);\n                    target.setInheritErrorHandler(java.lang.Boolean.valueOf(val));\n                    break;\n                }\n                case \"on-prepare-ref\": {\n                    String val = asText(node);\n                    target.setOnPrepareRef(val);\n                    break;\n                }\n                case \"parallel-aggregate\": {\n                    String val = asText(node);\n                    target.setParallelAggregate(val);\n                    break;\n                }\n                case \"parallel-processing\": {\n                    String val = asText(node);\n                    target.setParallelProcessing(val);\n                    break;\n                }\n                case \"share-unit-of-work\": {\n                    String val = asText(node);\n                    target.setShareUnitOfWork(val);\n                    break;\n                }\n                case \"stop-on-aggregate-exception\": {\n                    String val = asText(node);\n                    target.setStopOnAggregateException(val);\n                    break;\n                }\n                case \"stop-on-exception\": {\n                    String val = asText(node);\n                    target.setStopOnException(val);\n                    break;\n                }\n                case \"strategy-method-allow-null\": {\n                    String val = asText(node);\n                    target.setStrategyMethodAllowNull(val);\n                    break;\n                }\n                case \"strategy-method-name\": {\n                    String val = asText(node);\n                    target.setStrategyMethodName(val);\n                    break;\n                }\n                case \"strategy-ref\": {\n                    String val = asText(node);\n                    target.setStrategyRef(val);\n                    break;\n                }\n                case \"streaming\": {\n                    String val = asText(node);\n                    target.setStreaming(val);\n                    break;\n                }\n                case \"timeout\": {\n                    String val = asText(node);\n                    target.setTimeout(val);\n                    break;\n                }\n                default: {\n                    ExpressionDefinition ed = target.getExpressionType();\n                    if (ed != null) {\n                        throw new org.apache.camel.dsl.yaml.common.exception.UnsupportedFieldException(propertyName, \"an expression has already been configured (\" + ed + \")\");\n                    }\n                    ed = ExpressionDeserializers.constructExpressionType(propertyKey, node);\n                    if (ed != null) {\n                        target.setExpressionType(ed);\n                    } else {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n","realPath":"dsl/camel-yaml-dsl/camel-yaml-dsl-deserializers/src/generated/java/org/apache/camel/dsl/yaml/deserializers/ModelDeserializers.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":10434,"status":"M"}],"commitId":"0db5aba53e69d649bcaa4ecefcfe39b6c1e3649b","commitMessage":"@@@Improve YAML DSL (#5685)\n\n* yaml-dsl: support inline rest verbs\n\n* yaml-dsl: support RestConfiguration\n\n* yaml-dsl: sort yaml properties to avoid code changes in the geenrated code\n\n* yaml-dsl: simplify deserializers generator\n\n* yaml-dsl: support DescriptionDefinition","date":"2021-06-17 16:48:24","modifiedFileCount":"5","status":"M","submitter":"Luca Burgazzoli"}]
