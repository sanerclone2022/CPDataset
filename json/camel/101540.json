[{"authorTime":"2020-07-15 19:55:00","codes":[{"authorDate":"2020-07-15 19:54:37","commitOrder":2,"curCode":"    public static DirectoryService createDS(CreateDS dsBuilder)\n            throws Exception {\n        LOG.debug(\"Starting DS {}...\", dsBuilder.name());\n        Class<?> factory = dsBuilder.factory();\n        DirectoryServiceFactory dsf = (DirectoryServiceFactory) factory\n                .getDeclaredConstructor().newInstance();\n\n        DirectoryService service = dsf.getDirectoryService();\n        service.setAccessControlEnabled(dsBuilder.enableAccessControl());\n        service.setAllowAnonymousAccess(dsBuilder.allowAnonAccess());\n        service.getChangeLog().setEnabled(dsBuilder.enableChangeLog());\n\n        dsf.init(dsBuilder.name());\n\n        for (Class<?> interceptorClass : dsBuilder.additionalInterceptors()) {\n            service.addLast((Interceptor) interceptorClass.getDeclaredConstructor().newInstance());\n        }\n\n        List<Interceptor> interceptorList = service.getInterceptors();\n\n        if (dsBuilder.authenticators().length != 0) {\n            AuthenticationInterceptor authenticationInterceptor = null;\n\n            for (Interceptor interceptor : interceptorList) {\n                if (interceptor instanceof AuthenticationInterceptor) {\n                    authenticationInterceptor = (AuthenticationInterceptor) interceptor;\n                    break;\n                }\n            }\n\n            if (authenticationInterceptor == null) {\n                throw new IllegalStateException(\n                        \"authentication interceptor not found\");\n            }\n\n            Set<Authenticator> authenticators = new HashSet<Authenticator>();\n\n            for (CreateAuthenticator createAuthenticator : dsBuilder.authenticators()) {\n                Authenticator auth = createAuthenticator.type().getDeclaredConstructor().newInstance();\n\n                if (auth instanceof DelegatingAuthenticator) {\n                    DelegatingAuthenticator dauth = (DelegatingAuthenticator) auth;\n\n                    String host = createAuthenticator.delegateHost();\n\n                    if (Strings.isEmpty(host)) {\n                        host = Network.LOOPBACK_HOSTNAME;\n                    }\n\n                    dauth.setDelegateHost(host);\n                    dauth.setDelegatePort(createAuthenticator.delegatePort());\n                    dauth.setDelegateSsl(createAuthenticator.delegateSsl());\n                    dauth.setDelegateTls(createAuthenticator.delegateTls());\n                    dauth.setBaseDn(service.getDnFactory().create(createAuthenticator.baseDn()));\n                    dauth.setDelegateSslTrustManagerFQCN(createAuthenticator.delegateSslTrustManagerFQCN());\n                    dauth.setDelegateTlsTrustManagerFQCN(createAuthenticator.delegateTlsTrustManagerFQCN());\n                }\n\n                authenticators.add(auth);\n            }\n\n            authenticationInterceptor.setAuthenticators(authenticators);\n            authenticationInterceptor.init(service);\n        }\n\n        service.setInterceptors(interceptorList);\n\n        SchemaManager schemaManager = service.getSchemaManager();\n\n        \r\n        for (LoadSchema loadedSchema : dsBuilder.loadedSchemas()) {\n            String schemaName = loadedSchema.name();\n            Boolean enabled = loadedSchema.enabled();\n\n            \r\n            boolean isLoaded = schemaManager.isSchemaLoaded(schemaName);\n\n            if (!isLoaded) {\n                \r\n                try {\n                    isLoaded = schemaManager.load(schemaName);\n                } catch (LdapUnwillingToPerformException lutpe) {\n                    \r\n                    LOG.error(lutpe.getMessage());\n                    continue;\n                }\n            }\n\n            if (isLoaded) {\n                if (enabled) {\n                    schemaManager.enable(schemaName);\n\n                    if (schemaManager.isDisabled(schemaName)) {\n                        LOG.error(\"Cannot enable \" + schemaName);\n                    }\n                } else {\n                    schemaManager.disable(schemaName);\n\n                    if (schemaManager.isEnabled(schemaName)) {\n                        LOG.error(\"Cannot disable \" + schemaName);\n                    }\n                }\n            }\n\n            LOG.debug(\"Loading schema {}, enabled= {}\", schemaName, enabled);\n        }\n\n        \r\n        for (CreatePartition createPartition : dsBuilder.partitions()) {\n            Partition partition;\n\n            \r\n            if (createPartition.type() == Partition.class) {\n                \r\n                \r\n                \r\n                PartitionFactory partitionFactory = dsf.getPartitionFactory();\n                partition = partitionFactory.createPartition(\n                        schemaManager,\n                        service.getDnFactory(),\n                        createPartition.name(),\n                        createPartition.suffix(),\n                        createPartition.cacheSize(),\n                        new File(service.getInstanceLayout().getPartitionsDirectory(), createPartition.name()));\n\n                partition.setCacheService(service.getCacheService());\n\n                CreateIndex[] indexes = createPartition.indexes();\n\n                for (CreateIndex createIndex : indexes) {\n                    partitionFactory.addIndex(partition,\n                            createIndex.attribute(), createIndex.cacheSize());\n                }\n\n                partition.initialize();\n            } else {\n                \r\n                \r\n                Class<?>[] partypes = new Class[] {\n                    SchemaManager.class, DnFactory.class };\n                Constructor<?> constructor = createPartition.type().getConstructor(partypes);\n                partition = (Partition) constructor.newInstance(new Object[] {\n                    schemaManager, service.getDnFactory() });\n                partition.setId(createPartition.name());\n                partition.setSuffixDn(new Dn(schemaManager, createPartition.suffix()));\n\n                if (partition instanceof AbstractBTreePartition) {\n                    AbstractBTreePartition btreePartition = (AbstractBTreePartition) partition;\n                    btreePartition.setCacheService(service.getCacheService());\n                    btreePartition.setCacheSize(createPartition.cacheSize());\n                    btreePartition.setPartitionPath(new File(service\n                            .getInstanceLayout().getPartitionsDirectory(),\n                            createPartition.name()).toURI());\n\n                    \r\n                    CreateIndex[] indexes = createPartition.indexes();\n\n                    for (CreateIndex createIndex : indexes) {\n                        if (createIndex.type() == JdbmIndex.class) {\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else if (createIndex.type() == MavibotIndex.class) {\n                            \r\n                            MavibotIndex index = new MavibotIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else {\n                            \r\n                            \r\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        }\n                    }\n                }\n            }\n\n            partition.setSchemaManager(schemaManager);\n\n            \r\n            service.addPartition(partition);\n\n            \r\n            ContextEntry contextEntry = createPartition.contextEntry();\n\n            if (contextEntry != null) {\n                injectEntries(service, contextEntry.entryLdif());\n            }\n        }\n\n        return service;\n    }\n","date":"2020-07-16 01:11:10","endLine":279,"groupId":"18857","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDS","params":"(CreateDSdsBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/68/b64b03ef2a4850fe64c87c4406c0f460dd7957.src","preCode":"    public static DirectoryService createDS(CreateDS dsBuilder)\n            throws Exception {\n        LOG.debug(\"Starting DS {}...\", dsBuilder.name());\n        Class<?> factory = dsBuilder.factory();\n        DirectoryServiceFactory dsf = (DirectoryServiceFactory) factory\n                .getDeclaredConstructor().newInstance();\n\n        DirectoryService service = dsf.getDirectoryService();\n        service.setAccessControlEnabled(dsBuilder.enableAccessControl());\n        service.setAllowAnonymousAccess(dsBuilder.allowAnonAccess());\n        service.getChangeLog().setEnabled(dsBuilder.enableChangeLog());\n\n        dsf.init(dsBuilder.name());\n\n        for (Class<?> interceptorClass : dsBuilder.additionalInterceptors()) {\n            service.addLast((Interceptor) interceptorClass.getDeclaredConstructor().newInstance());\n        }\n\n        List<Interceptor> interceptorList = service.getInterceptors();\n\n        if (dsBuilder.authenticators().length != 0) {\n            AuthenticationInterceptor authenticationInterceptor = null;\n\n            for (Interceptor interceptor : interceptorList) {\n                if (interceptor instanceof AuthenticationInterceptor) {\n                    authenticationInterceptor = (AuthenticationInterceptor) interceptor;\n                    break;\n                }\n            }\n\n            if (authenticationInterceptor == null) {\n                throw new IllegalStateException(\n                        \"authentication interceptor not found\");\n            }\n\n            Set<Authenticator> authenticators = new HashSet<Authenticator>();\n\n            for (CreateAuthenticator createAuthenticator : dsBuilder.authenticators()) {\n                Authenticator auth = createAuthenticator.type().getDeclaredConstructor().newInstance();\n\n                if (auth instanceof DelegatingAuthenticator) {\n                    DelegatingAuthenticator dauth = (DelegatingAuthenticator) auth;\n\n                    String host = createAuthenticator.delegateHost();\n\n                    if (Strings.isEmpty(host)) {\n                        host = Network.LOOPBACK_HOSTNAME;\n                    }\n\n                    dauth.setDelegateHost(host);\n                    dauth.setDelegatePort(createAuthenticator.delegatePort());\n                    dauth.setDelegateSsl(createAuthenticator.delegateSsl());\n                    dauth.setDelegateTls(createAuthenticator.delegateTls());\n                    dauth.setBaseDn(service.getDnFactory().create(createAuthenticator.baseDn()));\n                    dauth.setDelegateSslTrustManagerFQCN(createAuthenticator.delegateSslTrustManagerFQCN());\n                    dauth.setDelegateTlsTrustManagerFQCN(createAuthenticator.delegateTlsTrustManagerFQCN());\n                }\n\n                authenticators.add(auth);\n            }\n\n            authenticationInterceptor.setAuthenticators(authenticators);\n            authenticationInterceptor.init(service);\n        }\n\n        service.setInterceptors(interceptorList);\n\n        SchemaManager schemaManager = service.getSchemaManager();\n\n        \r\n        for (LoadSchema loadedSchema : dsBuilder.loadedSchemas()) {\n            String schemaName = loadedSchema.name();\n            Boolean enabled = loadedSchema.enabled();\n\n            \r\n            boolean isLoaded = schemaManager.isSchemaLoaded(schemaName);\n\n            if (!isLoaded) {\n                \r\n                try {\n                    isLoaded = schemaManager.load(schemaName);\n                } catch (LdapUnwillingToPerformException lutpe) {\n                    \r\n                    LOG.error(lutpe.getMessage());\n                    continue;\n                }\n            }\n\n            if (isLoaded) {\n                if (enabled) {\n                    schemaManager.enable(schemaName);\n\n                    if (schemaManager.isDisabled(schemaName)) {\n                        LOG.error(\"Cannot enable \" + schemaName);\n                    }\n                } else {\n                    schemaManager.disable(schemaName);\n\n                    if (schemaManager.isEnabled(schemaName)) {\n                        LOG.error(\"Cannot disable \" + schemaName);\n                    }\n                }\n            }\n\n            LOG.debug(\"Loading schema {}, enabled= {}\", schemaName, enabled);\n        }\n\n        \r\n        for (CreatePartition createPartition : dsBuilder.partitions()) {\n            Partition partition;\n\n            \r\n            if (createPartition.type() == Partition.class) {\n                \r\n                \r\n                \r\n                PartitionFactory partitionFactory = dsf.getPartitionFactory();\n                partition = partitionFactory.createPartition(\n                        schemaManager,\n                        service.getDnFactory(),\n                        createPartition.name(),\n                        createPartition.suffix(),\n                        createPartition.cacheSize(),\n                        new File(service.getInstanceLayout().getPartitionsDirectory(), createPartition.name()));\n\n                partition.setCacheService(service.getCacheService());\n\n                CreateIndex[] indexes = createPartition.indexes();\n\n                for (CreateIndex createIndex : indexes) {\n                    partitionFactory.addIndex(partition,\n                            createIndex.attribute(), createIndex.cacheSize());\n                }\n\n                partition.initialize();\n            } else {\n                \r\n                \r\n                Class<?>[] partypes = new Class[] {\n                    SchemaManager.class, DnFactory.class };\n                Constructor<?> constructor = createPartition.type().getConstructor(partypes);\n                partition = (Partition) constructor.newInstance(new Object[] {\n                    schemaManager, service.getDnFactory() });\n                partition.setId(createPartition.name());\n                partition.setSuffixDn(new Dn(schemaManager, createPartition.suffix()));\n\n                if (partition instanceof AbstractBTreePartition) {\n                    AbstractBTreePartition btreePartition = (AbstractBTreePartition) partition;\n                    btreePartition.setCacheService(service.getCacheService());\n                    btreePartition.setCacheSize(createPartition.cacheSize());\n                    btreePartition.setPartitionPath(new File(service\n                            .getInstanceLayout().getPartitionsDirectory(),\n                            createPartition.name()).toURI());\n\n                    \r\n                    CreateIndex[] indexes = createPartition.indexes();\n\n                    for (CreateIndex createIndex : indexes) {\n                        if (createIndex.type() == JdbmIndex.class) {\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else if (createIndex.type() == MavibotIndex.class) {\n                            \r\n                            MavibotIndex index = new MavibotIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else {\n                            \r\n                            \r\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        }\n                    }\n                }\n            }\n\n            partition.setSchemaManager(schemaManager);\n\n            \r\n            service.addPartition(partition);\n\n            \r\n            ContextEntry contextEntry = createPartition.contextEntry();\n\n            if (contextEntry != null) {\n                injectEntries(service, contextEntry.entryLdif());\n            }\n        }\n\n        return service;\n    }\n","realPath":"components/camel-ldif/src/test/java/org/apache/directory/server/core/integ5/DSAnnotationProcessor.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"NB"},{"authorDate":"2020-07-15 19:55:00","commitOrder":2,"curCode":"    public static DirectoryService createDS(CreateDS dsBuilder)\n            throws Exception {\n        LOG.debug(\"Starting DS {}...\", dsBuilder.name());\n        Class<?> factory = dsBuilder.factory();\n        DirectoryServiceFactory dsf = (DirectoryServiceFactory) factory\n                .getDeclaredConstructor().newInstance();\n\n        DirectoryService service = dsf.getDirectoryService();\n        service.setAccessControlEnabled(dsBuilder.enableAccessControl());\n        service.setAllowAnonymousAccess(dsBuilder.allowAnonAccess());\n        service.getChangeLog().setEnabled(dsBuilder.enableChangeLog());\n\n        dsf.init(dsBuilder.name());\n\n        for (Class<?> interceptorClass : dsBuilder.additionalInterceptors()) {\n            service.addLast((Interceptor) interceptorClass.getDeclaredConstructor().newInstance());\n        }\n\n        List<Interceptor> interceptorList = service.getInterceptors();\n\n        if (dsBuilder.authenticators().length != 0) {\n            AuthenticationInterceptor authenticationInterceptor = null;\n\n            for (Interceptor interceptor : interceptorList) {\n                if (interceptor instanceof AuthenticationInterceptor) {\n                    authenticationInterceptor = (AuthenticationInterceptor) interceptor;\n                    break;\n                }\n            }\n\n            if (authenticationInterceptor == null) {\n                throw new IllegalStateException(\n                        \"authentication interceptor not found\");\n            }\n\n            Set<Authenticator> authenticators = new HashSet<Authenticator>();\n\n            for (CreateAuthenticator createAuthenticator : dsBuilder.authenticators()) {\n                Authenticator auth = createAuthenticator.type().getDeclaredConstructor().newInstance();\n\n                if (auth instanceof DelegatingAuthenticator) {\n                    DelegatingAuthenticator dauth = (DelegatingAuthenticator) auth;\n\n                    String host = createAuthenticator.delegateHost();\n\n                    if (Strings.isEmpty(host)) {\n                        host = Network.LOOPBACK_HOSTNAME;\n                    }\n\n                    dauth.setDelegateHost(host);\n                    dauth.setDelegatePort(createAuthenticator.delegatePort());\n                    dauth.setDelegateSsl(createAuthenticator.delegateSsl());\n                    dauth.setDelegateTls(createAuthenticator.delegateTls());\n                    dauth.setBaseDn(service.getDnFactory().create(createAuthenticator.baseDn()));\n                    dauth.setDelegateSslTrustManagerFQCN(createAuthenticator.delegateSslTrustManagerFQCN());\n                    dauth.setDelegateTlsTrustManagerFQCN(createAuthenticator.delegateTlsTrustManagerFQCN());\n                }\n\n                authenticators.add(auth);\n            }\n\n            authenticationInterceptor.setAuthenticators(authenticators);\n            authenticationInterceptor.init(service);\n        }\n\n        service.setInterceptors(interceptorList);\n\n        SchemaManager schemaManager = service.getSchemaManager();\n\n        \r\n        for (LoadSchema loadedSchema : dsBuilder.loadedSchemas()) {\n            String schemaName = loadedSchema.name();\n            Boolean enabled = loadedSchema.enabled();\n\n            \r\n            boolean isLoaded = schemaManager.isSchemaLoaded(schemaName);\n\n            if (!isLoaded) {\n                \r\n                try {\n                    isLoaded = schemaManager.load(schemaName);\n                } catch (LdapUnwillingToPerformException lutpe) {\n                    \r\n                    LOG.error(lutpe.getMessage());\n                    continue;\n                }\n            }\n\n            if (isLoaded) {\n                if (enabled) {\n                    schemaManager.enable(schemaName);\n\n                    if (schemaManager.isDisabled(schemaName)) {\n                        LOG.error(\"Cannot enable \" + schemaName);\n                    }\n                } else {\n                    schemaManager.disable(schemaName);\n\n                    if (schemaManager.isEnabled(schemaName)) {\n                        LOG.error(\"Cannot disable \" + schemaName);\n                    }\n                }\n            }\n\n            LOG.debug(\"Loading schema {}, enabled= {}\", schemaName, enabled);\n        }\n\n        \r\n        for (CreatePartition createPartition : dsBuilder.partitions()) {\n            Partition partition;\n\n            \r\n            if (createPartition.type() == Partition.class) {\n                \r\n                \r\n                \r\n                PartitionFactory partitionFactory = dsf.getPartitionFactory();\n                partition = partitionFactory.createPartition(\n                        schemaManager,\n                        service.getDnFactory(),\n                        createPartition.name(),\n                        createPartition.suffix(),\n                        createPartition.cacheSize(),\n                        new File(service.getInstanceLayout().getPartitionsDirectory(), createPartition.name()));\n\n                partition.setCacheService(service.getCacheService());\n\n                CreateIndex[] indexes = createPartition.indexes();\n\n                for (CreateIndex createIndex : indexes) {\n                    partitionFactory.addIndex(partition,\n                            createIndex.attribute(), createIndex.cacheSize());\n                }\n\n                partition.initialize();\n            } else {\n                \r\n                \r\n                Class<?>[] partypes = new Class[] {\n                    SchemaManager.class, DnFactory.class };\n                Constructor<?> constructor = createPartition.type().getConstructor(partypes);\n                partition = (Partition) constructor.newInstance(new Object[] {\n                    schemaManager, service.getDnFactory() });\n                partition.setId(createPartition.name());\n                partition.setSuffixDn(new Dn(schemaManager, createPartition.suffix()));\n\n                if (partition instanceof AbstractBTreePartition) {\n                    AbstractBTreePartition btreePartition = (AbstractBTreePartition) partition;\n                    btreePartition.setCacheService(service.getCacheService());\n                    btreePartition.setCacheSize(createPartition.cacheSize());\n                    btreePartition.setPartitionPath(new File(service\n                            .getInstanceLayout().getPartitionsDirectory(),\n                            createPartition.name()).toURI());\n\n                    \r\n                    CreateIndex[] indexes = createPartition.indexes();\n\n                    for (CreateIndex createIndex : indexes) {\n                        if (createIndex.type() == JdbmIndex.class) {\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else if (createIndex.type() == MavibotIndex.class) {\n                            \r\n                            MavibotIndex index = new MavibotIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else {\n                            \r\n                            \r\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        }\n                    }\n                }\n            }\n\n            partition.setSchemaManager(schemaManager);\n\n            \r\n            service.addPartition(partition);\n\n            \r\n            ContextEntry contextEntry = createPartition.contextEntry();\n\n            if (contextEntry != null) {\n                injectEntries(service, contextEntry.entryLdif());\n            }\n        }\n\n        return service;\n    }\n","date":"2020-07-16 01:11:10","endLine":279,"groupId":"18857","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createDS","params":"(CreateDSdsBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/68/b64b03ef2a4850fe64c87c4406c0f460dd7957.src","preCode":"    public static DirectoryService createDS(CreateDS dsBuilder)\n            throws Exception {\n        LOG.debug(\"Starting DS {}...\", dsBuilder.name());\n        Class<?> factory = dsBuilder.factory();\n        DirectoryServiceFactory dsf = (DirectoryServiceFactory) factory\n                .getDeclaredConstructor().newInstance();\n\n        DirectoryService service = dsf.getDirectoryService();\n        service.setAccessControlEnabled(dsBuilder.enableAccessControl());\n        service.setAllowAnonymousAccess(dsBuilder.allowAnonAccess());\n        service.getChangeLog().setEnabled(dsBuilder.enableChangeLog());\n\n        dsf.init(dsBuilder.name());\n\n        for (Class<?> interceptorClass : dsBuilder.additionalInterceptors()) {\n            service.addLast((Interceptor) interceptorClass.getDeclaredConstructor().newInstance());\n        }\n\n        List<Interceptor> interceptorList = service.getInterceptors();\n\n        if (dsBuilder.authenticators().length != 0) {\n            AuthenticationInterceptor authenticationInterceptor = null;\n\n            for (Interceptor interceptor : interceptorList) {\n                if (interceptor instanceof AuthenticationInterceptor) {\n                    authenticationInterceptor = (AuthenticationInterceptor) interceptor;\n                    break;\n                }\n            }\n\n            if (authenticationInterceptor == null) {\n                throw new IllegalStateException(\n                        \"authentication interceptor not found\");\n            }\n\n            Set<Authenticator> authenticators = new HashSet<Authenticator>();\n\n            for (CreateAuthenticator createAuthenticator : dsBuilder.authenticators()) {\n                Authenticator auth = createAuthenticator.type().getDeclaredConstructor().newInstance();\n\n                if (auth instanceof DelegatingAuthenticator) {\n                    DelegatingAuthenticator dauth = (DelegatingAuthenticator) auth;\n\n                    String host = createAuthenticator.delegateHost();\n\n                    if (Strings.isEmpty(host)) {\n                        host = Network.LOOPBACK_HOSTNAME;\n                    }\n\n                    dauth.setDelegateHost(host);\n                    dauth.setDelegatePort(createAuthenticator.delegatePort());\n                    dauth.setDelegateSsl(createAuthenticator.delegateSsl());\n                    dauth.setDelegateTls(createAuthenticator.delegateTls());\n                    dauth.setBaseDn(service.getDnFactory().create(createAuthenticator.baseDn()));\n                    dauth.setDelegateSslTrustManagerFQCN(createAuthenticator.delegateSslTrustManagerFQCN());\n                    dauth.setDelegateTlsTrustManagerFQCN(createAuthenticator.delegateTlsTrustManagerFQCN());\n                }\n\n                authenticators.add(auth);\n            }\n\n            authenticationInterceptor.setAuthenticators(authenticators);\n            authenticationInterceptor.init(service);\n        }\n\n        service.setInterceptors(interceptorList);\n\n        SchemaManager schemaManager = service.getSchemaManager();\n\n        \r\n        for (LoadSchema loadedSchema : dsBuilder.loadedSchemas()) {\n            String schemaName = loadedSchema.name();\n            Boolean enabled = loadedSchema.enabled();\n\n            \r\n            boolean isLoaded = schemaManager.isSchemaLoaded(schemaName);\n\n            if (!isLoaded) {\n                \r\n                try {\n                    isLoaded = schemaManager.load(schemaName);\n                } catch (LdapUnwillingToPerformException lutpe) {\n                    \r\n                    LOG.error(lutpe.getMessage());\n                    continue;\n                }\n            }\n\n            if (isLoaded) {\n                if (enabled) {\n                    schemaManager.enable(schemaName);\n\n                    if (schemaManager.isDisabled(schemaName)) {\n                        LOG.error(\"Cannot enable \" + schemaName);\n                    }\n                } else {\n                    schemaManager.disable(schemaName);\n\n                    if (schemaManager.isEnabled(schemaName)) {\n                        LOG.error(\"Cannot disable \" + schemaName);\n                    }\n                }\n            }\n\n            LOG.debug(\"Loading schema {}, enabled= {}\", schemaName, enabled);\n        }\n\n        \r\n        for (CreatePartition createPartition : dsBuilder.partitions()) {\n            Partition partition;\n\n            \r\n            if (createPartition.type() == Partition.class) {\n                \r\n                \r\n                \r\n                PartitionFactory partitionFactory = dsf.getPartitionFactory();\n                partition = partitionFactory.createPartition(\n                        schemaManager,\n                        service.getDnFactory(),\n                        createPartition.name(),\n                        createPartition.suffix(),\n                        createPartition.cacheSize(),\n                        new File(service.getInstanceLayout().getPartitionsDirectory(), createPartition.name()));\n\n                partition.setCacheService(service.getCacheService());\n\n                CreateIndex[] indexes = createPartition.indexes();\n\n                for (CreateIndex createIndex : indexes) {\n                    partitionFactory.addIndex(partition,\n                            createIndex.attribute(), createIndex.cacheSize());\n                }\n\n                partition.initialize();\n            } else {\n                \r\n                \r\n                Class<?>[] partypes = new Class[] {\n                    SchemaManager.class, DnFactory.class };\n                Constructor<?> constructor = createPartition.type().getConstructor(partypes);\n                partition = (Partition) constructor.newInstance(new Object[] {\n                    schemaManager, service.getDnFactory() });\n                partition.setId(createPartition.name());\n                partition.setSuffixDn(new Dn(schemaManager, createPartition.suffix()));\n\n                if (partition instanceof AbstractBTreePartition) {\n                    AbstractBTreePartition btreePartition = (AbstractBTreePartition) partition;\n                    btreePartition.setCacheService(service.getCacheService());\n                    btreePartition.setCacheSize(createPartition.cacheSize());\n                    btreePartition.setPartitionPath(new File(service\n                            .getInstanceLayout().getPartitionsDirectory(),\n                            createPartition.name()).toURI());\n\n                    \r\n                    CreateIndex[] indexes = createPartition.indexes();\n\n                    for (CreateIndex createIndex : indexes) {\n                        if (createIndex.type() == JdbmIndex.class) {\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else if (createIndex.type() == MavibotIndex.class) {\n                            \r\n                            MavibotIndex index = new MavibotIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else {\n                            \r\n                            \r\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        }\n                    }\n                }\n            }\n\n            partition.setSchemaManager(schemaManager);\n\n            \r\n            service.addPartition(partition);\n\n            \r\n            ContextEntry contextEntry = createPartition.contextEntry();\n\n            if (contextEntry != null) {\n                injectEntries(service, contextEntry.entryLdif());\n            }\n        }\n\n        return service;\n    }\n","realPath":"components/camel-ldap/src/test/java/org/apache/directory/server/core/integ5/DSAnnotationProcessor.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"}],"commitId":"e7c6f29e344efef6fc29850f43c865296ea9bc73","commitMessage":"@@@[CAMEL-11807] Upgrade camel-ldap to junit5\n","date":"2020-07-16 01:11:10","modifiedFileCount":"2","status":"M","submitter":"Guillaume Nodet"},{"authorTime":"2020-07-15 19:55:00","codes":[{"authorDate":"2020-09-22 13:27:27","commitOrder":3,"curCode":"    public static DirectoryService createDS(CreateDS dsBuilder)\n            throws Exception {\n        LOG.debug(\"Starting DS {}...\", dsBuilder.name());\n        Class<?> factory = dsBuilder.factory();\n        DirectoryServiceFactory dsf = (DirectoryServiceFactory) factory\n                .getDeclaredConstructor().newInstance();\n\n        DirectoryService service = dsf.getDirectoryService();\n        service.setAccessControlEnabled(dsBuilder.enableAccessControl());\n        service.setAllowAnonymousAccess(dsBuilder.allowAnonAccess());\n        service.getChangeLog().setEnabled(dsBuilder.enableChangeLog());\n\n        dsf.init(dsBuilder.name());\n\n        for (Class<?> interceptorClass : dsBuilder.additionalInterceptors()) {\n            service.addLast((Interceptor) interceptorClass.getDeclaredConstructor().newInstance());\n        }\n\n        List<Interceptor> interceptorList = service.getInterceptors();\n\n        if (dsBuilder.authenticators().length != 0) {\n            AuthenticationInterceptor authenticationInterceptor = null;\n\n            for (Interceptor interceptor : interceptorList) {\n                if (interceptor instanceof AuthenticationInterceptor) {\n                    authenticationInterceptor = (AuthenticationInterceptor) interceptor;\n                    break;\n                }\n            }\n\n            if (authenticationInterceptor == null) {\n                throw new IllegalStateException(\n                        \"authentication interceptor not found\");\n            }\n\n            Set<Authenticator> authenticators = new HashSet<Authenticator>();\n\n            for (CreateAuthenticator createAuthenticator : dsBuilder.authenticators()) {\n                Authenticator auth = createAuthenticator.type().getDeclaredConstructor().newInstance();\n\n                if (auth instanceof DelegatingAuthenticator) {\n                    DelegatingAuthenticator dauth = (DelegatingAuthenticator) auth;\n\n                    String host = createAuthenticator.delegateHost();\n\n                    if (Strings.isEmpty(host)) {\n                        host = Network.LOOPBACK_HOSTNAME;\n                    }\n\n                    dauth.setDelegateHost(host);\n                    dauth.setDelegatePort(createAuthenticator.delegatePort());\n                    dauth.setDelegateSsl(createAuthenticator.delegateSsl());\n                    dauth.setDelegateTls(createAuthenticator.delegateTls());\n                    dauth.setBaseDn(service.getDnFactory().create(createAuthenticator.baseDn()));\n                    dauth.setDelegateSslTrustManagerFQCN(createAuthenticator.delegateSslTrustManagerFQCN());\n                    dauth.setDelegateTlsTrustManagerFQCN(createAuthenticator.delegateTlsTrustManagerFQCN());\n                }\n\n                authenticators.add(auth);\n            }\n\n            authenticationInterceptor.setAuthenticators(authenticators);\n            authenticationInterceptor.init(service);\n        }\n\n        service.setInterceptors(interceptorList);\n\n        SchemaManager schemaManager = service.getSchemaManager();\n\n        \r\n        for (LoadSchema loadedSchema : dsBuilder.loadedSchemas()) {\n            String schemaName = loadedSchema.name();\n            Boolean enabled = loadedSchema.enabled();\n\n            \r\n            boolean isLoaded = schemaManager.isSchemaLoaded(schemaName);\n\n            if (!isLoaded) {\n                \r\n                try {\n                    isLoaded = schemaManager.load(schemaName);\n                } catch (LdapUnwillingToPerformException lutpe) {\n                    \r\n                    LOG.error(lutpe.getMessage());\n                    continue;\n                }\n            }\n\n            if (isLoaded) {\n                if (enabled) {\n                    schemaManager.enable(schemaName);\n\n                    if (schemaManager.isDisabled(schemaName)) {\n                        LOG.error(\"Cannot enable \" + schemaName);\n                    }\n                } else {\n                    schemaManager.disable(schemaName);\n\n                    if (schemaManager.isEnabled(schemaName)) {\n                        LOG.error(\"Cannot disable \" + schemaName);\n                    }\n                }\n            }\n\n            LOG.debug(\"Loading schema {}, enabled= {}\", schemaName, enabled);\n        }\n\n        \r\n        for (CreatePartition createPartition : dsBuilder.partitions()) {\n            Partition partition;\n\n            \r\n            if (createPartition.type() == Partition.class) {\n                \r\n                \r\n                \r\n                PartitionFactory partitionFactory = dsf.getPartitionFactory();\n                partition = partitionFactory.createPartition(\n                        schemaManager,\n                        service.getDnFactory(),\n                        createPartition.name(),\n                        createPartition.suffix(),\n                        createPartition.cacheSize(),\n                        new File(service.getInstanceLayout().getPartitionsDirectory(), createPartition.name()));\n\n                CreateIndex[] indexes = createPartition.indexes();\n\n                for (CreateIndex createIndex : indexes) {\n                    partitionFactory.addIndex(partition,\n                            createIndex.attribute(), createIndex.cacheSize());\n                }\n\n                partition.initialize();\n            } else {\n                \r\n                \r\n                Class<?>[] partypes = new Class[] {\n                        SchemaManager.class, DnFactory.class };\n                Constructor<?> constructor = createPartition.type().getConstructor(partypes);\n                partition = (Partition) constructor.newInstance(new Object[] {\n                        schemaManager, service.getDnFactory() });\n                partition.setId(createPartition.name());\n                partition.setSuffixDn(new Dn(schemaManager, createPartition.suffix()));\n\n                if (partition instanceof AbstractBTreePartition) {\n                    AbstractBTreePartition btreePartition = (AbstractBTreePartition) partition;\n                    btreePartition.setCacheSize(createPartition.cacheSize());\n                    btreePartition.setPartitionPath(new File(\n                            service\n                                    .getInstanceLayout().getPartitionsDirectory(),\n                            createPartition.name()).toURI());\n\n                    \r\n                    CreateIndex[] indexes = createPartition.indexes();\n\n                    for (CreateIndex createIndex : indexes) {\n                        if (createIndex.type() == JdbmIndex.class) {\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else if (createIndex.type() == MavibotIndex.class) {\n                            \r\n                            MavibotIndex index = new MavibotIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else {\n                            \r\n                            \r\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        }\n                    }\n                }\n            }\n\n            partition.setSchemaManager(schemaManager);\n\n            \r\n            service.addPartition(partition);\n\n            \r\n            ContextEntry contextEntry = createPartition.contextEntry();\n\n            if (contextEntry != null) {\n                injectEntries(service, contextEntry.entryLdif());\n            }\n        }\n\n        return service;\n    }\n","date":"2020-09-22 13:27:38","endLine":275,"groupId":"18857","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDS","params":"(CreateDSdsBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/79/c5c286d22ce3d52eb90267b25c07097bfd9ce5.src","preCode":"    public static DirectoryService createDS(CreateDS dsBuilder)\n            throws Exception {\n        LOG.debug(\"Starting DS {}...\", dsBuilder.name());\n        Class<?> factory = dsBuilder.factory();\n        DirectoryServiceFactory dsf = (DirectoryServiceFactory) factory\n                .getDeclaredConstructor().newInstance();\n\n        DirectoryService service = dsf.getDirectoryService();\n        service.setAccessControlEnabled(dsBuilder.enableAccessControl());\n        service.setAllowAnonymousAccess(dsBuilder.allowAnonAccess());\n        service.getChangeLog().setEnabled(dsBuilder.enableChangeLog());\n\n        dsf.init(dsBuilder.name());\n\n        for (Class<?> interceptorClass : dsBuilder.additionalInterceptors()) {\n            service.addLast((Interceptor) interceptorClass.getDeclaredConstructor().newInstance());\n        }\n\n        List<Interceptor> interceptorList = service.getInterceptors();\n\n        if (dsBuilder.authenticators().length != 0) {\n            AuthenticationInterceptor authenticationInterceptor = null;\n\n            for (Interceptor interceptor : interceptorList) {\n                if (interceptor instanceof AuthenticationInterceptor) {\n                    authenticationInterceptor = (AuthenticationInterceptor) interceptor;\n                    break;\n                }\n            }\n\n            if (authenticationInterceptor == null) {\n                throw new IllegalStateException(\n                        \"authentication interceptor not found\");\n            }\n\n            Set<Authenticator> authenticators = new HashSet<Authenticator>();\n\n            for (CreateAuthenticator createAuthenticator : dsBuilder.authenticators()) {\n                Authenticator auth = createAuthenticator.type().getDeclaredConstructor().newInstance();\n\n                if (auth instanceof DelegatingAuthenticator) {\n                    DelegatingAuthenticator dauth = (DelegatingAuthenticator) auth;\n\n                    String host = createAuthenticator.delegateHost();\n\n                    if (Strings.isEmpty(host)) {\n                        host = Network.LOOPBACK_HOSTNAME;\n                    }\n\n                    dauth.setDelegateHost(host);\n                    dauth.setDelegatePort(createAuthenticator.delegatePort());\n                    dauth.setDelegateSsl(createAuthenticator.delegateSsl());\n                    dauth.setDelegateTls(createAuthenticator.delegateTls());\n                    dauth.setBaseDn(service.getDnFactory().create(createAuthenticator.baseDn()));\n                    dauth.setDelegateSslTrustManagerFQCN(createAuthenticator.delegateSslTrustManagerFQCN());\n                    dauth.setDelegateTlsTrustManagerFQCN(createAuthenticator.delegateTlsTrustManagerFQCN());\n                }\n\n                authenticators.add(auth);\n            }\n\n            authenticationInterceptor.setAuthenticators(authenticators);\n            authenticationInterceptor.init(service);\n        }\n\n        service.setInterceptors(interceptorList);\n\n        SchemaManager schemaManager = service.getSchemaManager();\n\n        \r\n        for (LoadSchema loadedSchema : dsBuilder.loadedSchemas()) {\n            String schemaName = loadedSchema.name();\n            Boolean enabled = loadedSchema.enabled();\n\n            \r\n            boolean isLoaded = schemaManager.isSchemaLoaded(schemaName);\n\n            if (!isLoaded) {\n                \r\n                try {\n                    isLoaded = schemaManager.load(schemaName);\n                } catch (LdapUnwillingToPerformException lutpe) {\n                    \r\n                    LOG.error(lutpe.getMessage());\n                    continue;\n                }\n            }\n\n            if (isLoaded) {\n                if (enabled) {\n                    schemaManager.enable(schemaName);\n\n                    if (schemaManager.isDisabled(schemaName)) {\n                        LOG.error(\"Cannot enable \" + schemaName);\n                    }\n                } else {\n                    schemaManager.disable(schemaName);\n\n                    if (schemaManager.isEnabled(schemaName)) {\n                        LOG.error(\"Cannot disable \" + schemaName);\n                    }\n                }\n            }\n\n            LOG.debug(\"Loading schema {}, enabled= {}\", schemaName, enabled);\n        }\n\n        \r\n        for (CreatePartition createPartition : dsBuilder.partitions()) {\n            Partition partition;\n\n            \r\n            if (createPartition.type() == Partition.class) {\n                \r\n                \r\n                \r\n                PartitionFactory partitionFactory = dsf.getPartitionFactory();\n                partition = partitionFactory.createPartition(\n                        schemaManager,\n                        service.getDnFactory(),\n                        createPartition.name(),\n                        createPartition.suffix(),\n                        createPartition.cacheSize(),\n                        new File(service.getInstanceLayout().getPartitionsDirectory(), createPartition.name()));\n\n                partition.setCacheService(service.getCacheService());\n\n                CreateIndex[] indexes = createPartition.indexes();\n\n                for (CreateIndex createIndex : indexes) {\n                    partitionFactory.addIndex(partition,\n                            createIndex.attribute(), createIndex.cacheSize());\n                }\n\n                partition.initialize();\n            } else {\n                \r\n                \r\n                Class<?>[] partypes = new Class[] {\n                        SchemaManager.class, DnFactory.class };\n                Constructor<?> constructor = createPartition.type().getConstructor(partypes);\n                partition = (Partition) constructor.newInstance(new Object[] {\n                        schemaManager, service.getDnFactory() });\n                partition.setId(createPartition.name());\n                partition.setSuffixDn(new Dn(schemaManager, createPartition.suffix()));\n\n                if (partition instanceof AbstractBTreePartition) {\n                    AbstractBTreePartition btreePartition = (AbstractBTreePartition) partition;\n                    btreePartition.setCacheService(service.getCacheService());\n                    btreePartition.setCacheSize(createPartition.cacheSize());\n                    btreePartition.setPartitionPath(new File(\n                            service\n                                    .getInstanceLayout().getPartitionsDirectory(),\n                            createPartition.name()).toURI());\n\n                    \r\n                    CreateIndex[] indexes = createPartition.indexes();\n\n                    for (CreateIndex createIndex : indexes) {\n                        if (createIndex.type() == JdbmIndex.class) {\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else if (createIndex.type() == MavibotIndex.class) {\n                            \r\n                            MavibotIndex index = new MavibotIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else {\n                            \r\n                            \r\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        }\n                    }\n                }\n            }\n\n            partition.setSchemaManager(schemaManager);\n\n            \r\n            service.addPartition(partition);\n\n            \r\n            ContextEntry contextEntry = createPartition.contextEntry();\n\n            if (contextEntry != null) {\n                injectEntries(service, contextEntry.entryLdif());\n            }\n        }\n\n        return service;\n    }\n","realPath":"components/camel-ldif/src/test/java/org/apache/directory/server/core/integ5/DSAnnotationProcessor.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2020-07-15 19:55:00","commitOrder":3,"curCode":"    public static DirectoryService createDS(CreateDS dsBuilder)\n            throws Exception {\n        LOG.debug(\"Starting DS {}...\", dsBuilder.name());\n        Class<?> factory = dsBuilder.factory();\n        DirectoryServiceFactory dsf = (DirectoryServiceFactory) factory\n                .getDeclaredConstructor().newInstance();\n\n        DirectoryService service = dsf.getDirectoryService();\n        service.setAccessControlEnabled(dsBuilder.enableAccessControl());\n        service.setAllowAnonymousAccess(dsBuilder.allowAnonAccess());\n        service.getChangeLog().setEnabled(dsBuilder.enableChangeLog());\n\n        dsf.init(dsBuilder.name());\n\n        for (Class<?> interceptorClass : dsBuilder.additionalInterceptors()) {\n            service.addLast((Interceptor) interceptorClass.getDeclaredConstructor().newInstance());\n        }\n\n        List<Interceptor> interceptorList = service.getInterceptors();\n\n        if (dsBuilder.authenticators().length != 0) {\n            AuthenticationInterceptor authenticationInterceptor = null;\n\n            for (Interceptor interceptor : interceptorList) {\n                if (interceptor instanceof AuthenticationInterceptor) {\n                    authenticationInterceptor = (AuthenticationInterceptor) interceptor;\n                    break;\n                }\n            }\n\n            if (authenticationInterceptor == null) {\n                throw new IllegalStateException(\n                        \"authentication interceptor not found\");\n            }\n\n            Set<Authenticator> authenticators = new HashSet<Authenticator>();\n\n            for (CreateAuthenticator createAuthenticator : dsBuilder.authenticators()) {\n                Authenticator auth = createAuthenticator.type().getDeclaredConstructor().newInstance();\n\n                if (auth instanceof DelegatingAuthenticator) {\n                    DelegatingAuthenticator dauth = (DelegatingAuthenticator) auth;\n\n                    String host = createAuthenticator.delegateHost();\n\n                    if (Strings.isEmpty(host)) {\n                        host = Network.LOOPBACK_HOSTNAME;\n                    }\n\n                    dauth.setDelegateHost(host);\n                    dauth.setDelegatePort(createAuthenticator.delegatePort());\n                    dauth.setDelegateSsl(createAuthenticator.delegateSsl());\n                    dauth.setDelegateTls(createAuthenticator.delegateTls());\n                    dauth.setBaseDn(service.getDnFactory().create(createAuthenticator.baseDn()));\n                    dauth.setDelegateSslTrustManagerFQCN(createAuthenticator.delegateSslTrustManagerFQCN());\n                    dauth.setDelegateTlsTrustManagerFQCN(createAuthenticator.delegateTlsTrustManagerFQCN());\n                }\n\n                authenticators.add(auth);\n            }\n\n            authenticationInterceptor.setAuthenticators(authenticators);\n            authenticationInterceptor.init(service);\n        }\n\n        service.setInterceptors(interceptorList);\n\n        SchemaManager schemaManager = service.getSchemaManager();\n\n        \r\n        for (LoadSchema loadedSchema : dsBuilder.loadedSchemas()) {\n            String schemaName = loadedSchema.name();\n            Boolean enabled = loadedSchema.enabled();\n\n            \r\n            boolean isLoaded = schemaManager.isSchemaLoaded(schemaName);\n\n            if (!isLoaded) {\n                \r\n                try {\n                    isLoaded = schemaManager.load(schemaName);\n                } catch (LdapUnwillingToPerformException lutpe) {\n                    \r\n                    LOG.error(lutpe.getMessage());\n                    continue;\n                }\n            }\n\n            if (isLoaded) {\n                if (enabled) {\n                    schemaManager.enable(schemaName);\n\n                    if (schemaManager.isDisabled(schemaName)) {\n                        LOG.error(\"Cannot enable \" + schemaName);\n                    }\n                } else {\n                    schemaManager.disable(schemaName);\n\n                    if (schemaManager.isEnabled(schemaName)) {\n                        LOG.error(\"Cannot disable \" + schemaName);\n                    }\n                }\n            }\n\n            LOG.debug(\"Loading schema {}, enabled= {}\", schemaName, enabled);\n        }\n\n        \r\n        for (CreatePartition createPartition : dsBuilder.partitions()) {\n            Partition partition;\n\n            \r\n            if (createPartition.type() == Partition.class) {\n                \r\n                \r\n                \r\n                PartitionFactory partitionFactory = dsf.getPartitionFactory();\n                partition = partitionFactory.createPartition(\n                        schemaManager,\n                        service.getDnFactory(),\n                        createPartition.name(),\n                        createPartition.suffix(),\n                        createPartition.cacheSize(),\n                        new File(service.getInstanceLayout().getPartitionsDirectory(), createPartition.name()));\n\n                partition.setCacheService(service.getCacheService());\n\n                CreateIndex[] indexes = createPartition.indexes();\n\n                for (CreateIndex createIndex : indexes) {\n                    partitionFactory.addIndex(partition,\n                            createIndex.attribute(), createIndex.cacheSize());\n                }\n\n                partition.initialize();\n            } else {\n                \r\n                \r\n                Class<?>[] partypes = new Class[] {\n                    SchemaManager.class, DnFactory.class };\n                Constructor<?> constructor = createPartition.type().getConstructor(partypes);\n                partition = (Partition) constructor.newInstance(new Object[] {\n                    schemaManager, service.getDnFactory() });\n                partition.setId(createPartition.name());\n                partition.setSuffixDn(new Dn(schemaManager, createPartition.suffix()));\n\n                if (partition instanceof AbstractBTreePartition) {\n                    AbstractBTreePartition btreePartition = (AbstractBTreePartition) partition;\n                    btreePartition.setCacheService(service.getCacheService());\n                    btreePartition.setCacheSize(createPartition.cacheSize());\n                    btreePartition.setPartitionPath(new File(service\n                            .getInstanceLayout().getPartitionsDirectory(),\n                            createPartition.name()).toURI());\n\n                    \r\n                    CreateIndex[] indexes = createPartition.indexes();\n\n                    for (CreateIndex createIndex : indexes) {\n                        if (createIndex.type() == JdbmIndex.class) {\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else if (createIndex.type() == MavibotIndex.class) {\n                            \r\n                            MavibotIndex index = new MavibotIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else {\n                            \r\n                            \r\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        }\n                    }\n                }\n            }\n\n            partition.setSchemaManager(schemaManager);\n\n            \r\n            service.addPartition(partition);\n\n            \r\n            ContextEntry contextEntry = createPartition.contextEntry();\n\n            if (contextEntry != null) {\n                injectEntries(service, contextEntry.entryLdif());\n            }\n        }\n\n        return service;\n    }\n","date":"2020-07-16 01:11:10","endLine":279,"groupId":"18857","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createDS","params":"(CreateDSdsBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/68/b64b03ef2a4850fe64c87c4406c0f460dd7957.src","preCode":"    public static DirectoryService createDS(CreateDS dsBuilder)\n            throws Exception {\n        LOG.debug(\"Starting DS {}...\", dsBuilder.name());\n        Class<?> factory = dsBuilder.factory();\n        DirectoryServiceFactory dsf = (DirectoryServiceFactory) factory\n                .getDeclaredConstructor().newInstance();\n\n        DirectoryService service = dsf.getDirectoryService();\n        service.setAccessControlEnabled(dsBuilder.enableAccessControl());\n        service.setAllowAnonymousAccess(dsBuilder.allowAnonAccess());\n        service.getChangeLog().setEnabled(dsBuilder.enableChangeLog());\n\n        dsf.init(dsBuilder.name());\n\n        for (Class<?> interceptorClass : dsBuilder.additionalInterceptors()) {\n            service.addLast((Interceptor) interceptorClass.getDeclaredConstructor().newInstance());\n        }\n\n        List<Interceptor> interceptorList = service.getInterceptors();\n\n        if (dsBuilder.authenticators().length != 0) {\n            AuthenticationInterceptor authenticationInterceptor = null;\n\n            for (Interceptor interceptor : interceptorList) {\n                if (interceptor instanceof AuthenticationInterceptor) {\n                    authenticationInterceptor = (AuthenticationInterceptor) interceptor;\n                    break;\n                }\n            }\n\n            if (authenticationInterceptor == null) {\n                throw new IllegalStateException(\n                        \"authentication interceptor not found\");\n            }\n\n            Set<Authenticator> authenticators = new HashSet<Authenticator>();\n\n            for (CreateAuthenticator createAuthenticator : dsBuilder.authenticators()) {\n                Authenticator auth = createAuthenticator.type().getDeclaredConstructor().newInstance();\n\n                if (auth instanceof DelegatingAuthenticator) {\n                    DelegatingAuthenticator dauth = (DelegatingAuthenticator) auth;\n\n                    String host = createAuthenticator.delegateHost();\n\n                    if (Strings.isEmpty(host)) {\n                        host = Network.LOOPBACK_HOSTNAME;\n                    }\n\n                    dauth.setDelegateHost(host);\n                    dauth.setDelegatePort(createAuthenticator.delegatePort());\n                    dauth.setDelegateSsl(createAuthenticator.delegateSsl());\n                    dauth.setDelegateTls(createAuthenticator.delegateTls());\n                    dauth.setBaseDn(service.getDnFactory().create(createAuthenticator.baseDn()));\n                    dauth.setDelegateSslTrustManagerFQCN(createAuthenticator.delegateSslTrustManagerFQCN());\n                    dauth.setDelegateTlsTrustManagerFQCN(createAuthenticator.delegateTlsTrustManagerFQCN());\n                }\n\n                authenticators.add(auth);\n            }\n\n            authenticationInterceptor.setAuthenticators(authenticators);\n            authenticationInterceptor.init(service);\n        }\n\n        service.setInterceptors(interceptorList);\n\n        SchemaManager schemaManager = service.getSchemaManager();\n\n        \r\n        for (LoadSchema loadedSchema : dsBuilder.loadedSchemas()) {\n            String schemaName = loadedSchema.name();\n            Boolean enabled = loadedSchema.enabled();\n\n            \r\n            boolean isLoaded = schemaManager.isSchemaLoaded(schemaName);\n\n            if (!isLoaded) {\n                \r\n                try {\n                    isLoaded = schemaManager.load(schemaName);\n                } catch (LdapUnwillingToPerformException lutpe) {\n                    \r\n                    LOG.error(lutpe.getMessage());\n                    continue;\n                }\n            }\n\n            if (isLoaded) {\n                if (enabled) {\n                    schemaManager.enable(schemaName);\n\n                    if (schemaManager.isDisabled(schemaName)) {\n                        LOG.error(\"Cannot enable \" + schemaName);\n                    }\n                } else {\n                    schemaManager.disable(schemaName);\n\n                    if (schemaManager.isEnabled(schemaName)) {\n                        LOG.error(\"Cannot disable \" + schemaName);\n                    }\n                }\n            }\n\n            LOG.debug(\"Loading schema {}, enabled= {}\", schemaName, enabled);\n        }\n\n        \r\n        for (CreatePartition createPartition : dsBuilder.partitions()) {\n            Partition partition;\n\n            \r\n            if (createPartition.type() == Partition.class) {\n                \r\n                \r\n                \r\n                PartitionFactory partitionFactory = dsf.getPartitionFactory();\n                partition = partitionFactory.createPartition(\n                        schemaManager,\n                        service.getDnFactory(),\n                        createPartition.name(),\n                        createPartition.suffix(),\n                        createPartition.cacheSize(),\n                        new File(service.getInstanceLayout().getPartitionsDirectory(), createPartition.name()));\n\n                partition.setCacheService(service.getCacheService());\n\n                CreateIndex[] indexes = createPartition.indexes();\n\n                for (CreateIndex createIndex : indexes) {\n                    partitionFactory.addIndex(partition,\n                            createIndex.attribute(), createIndex.cacheSize());\n                }\n\n                partition.initialize();\n            } else {\n                \r\n                \r\n                Class<?>[] partypes = new Class[] {\n                    SchemaManager.class, DnFactory.class };\n                Constructor<?> constructor = createPartition.type().getConstructor(partypes);\n                partition = (Partition) constructor.newInstance(new Object[] {\n                    schemaManager, service.getDnFactory() });\n                partition.setId(createPartition.name());\n                partition.setSuffixDn(new Dn(schemaManager, createPartition.suffix()));\n\n                if (partition instanceof AbstractBTreePartition) {\n                    AbstractBTreePartition btreePartition = (AbstractBTreePartition) partition;\n                    btreePartition.setCacheService(service.getCacheService());\n                    btreePartition.setCacheSize(createPartition.cacheSize());\n                    btreePartition.setPartitionPath(new File(service\n                            .getInstanceLayout().getPartitionsDirectory(),\n                            createPartition.name()).toURI());\n\n                    \r\n                    CreateIndex[] indexes = createPartition.indexes();\n\n                    for (CreateIndex createIndex : indexes) {\n                        if (createIndex.type() == JdbmIndex.class) {\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else if (createIndex.type() == MavibotIndex.class) {\n                            \r\n                            MavibotIndex index = new MavibotIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else {\n                            \r\n                            \r\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        }\n                    }\n                }\n            }\n\n            partition.setSchemaManager(schemaManager);\n\n            \r\n            service.addPartition(partition);\n\n            \r\n            ContextEntry contextEntry = createPartition.contextEntry();\n\n            if (contextEntry != null) {\n                injectEntries(service, contextEntry.entryLdif());\n            }\n        }\n\n        return service;\n    }\n","realPath":"components/camel-ldap/src/test/java/org/apache/directory/server/core/integ5/DSAnnotationProcessor.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"}],"commitId":"8b4b6d0f53fe227a8f25139e64635291380f8740","commitMessage":"@@@camel-ldif - fixed tests\n","date":"2020-09-22 13:27:38","modifiedFileCount":"2","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2020-09-22 15:01:22","codes":[{"authorDate":"2020-09-22 13:27:27","commitOrder":4,"curCode":"    public static DirectoryService createDS(CreateDS dsBuilder)\n            throws Exception {\n        LOG.debug(\"Starting DS {}...\", dsBuilder.name());\n        Class<?> factory = dsBuilder.factory();\n        DirectoryServiceFactory dsf = (DirectoryServiceFactory) factory\n                .getDeclaredConstructor().newInstance();\n\n        DirectoryService service = dsf.getDirectoryService();\n        service.setAccessControlEnabled(dsBuilder.enableAccessControl());\n        service.setAllowAnonymousAccess(dsBuilder.allowAnonAccess());\n        service.getChangeLog().setEnabled(dsBuilder.enableChangeLog());\n\n        dsf.init(dsBuilder.name());\n\n        for (Class<?> interceptorClass : dsBuilder.additionalInterceptors()) {\n            service.addLast((Interceptor) interceptorClass.getDeclaredConstructor().newInstance());\n        }\n\n        List<Interceptor> interceptorList = service.getInterceptors();\n\n        if (dsBuilder.authenticators().length != 0) {\n            AuthenticationInterceptor authenticationInterceptor = null;\n\n            for (Interceptor interceptor : interceptorList) {\n                if (interceptor instanceof AuthenticationInterceptor) {\n                    authenticationInterceptor = (AuthenticationInterceptor) interceptor;\n                    break;\n                }\n            }\n\n            if (authenticationInterceptor == null) {\n                throw new IllegalStateException(\n                        \"authentication interceptor not found\");\n            }\n\n            Set<Authenticator> authenticators = new HashSet<Authenticator>();\n\n            for (CreateAuthenticator createAuthenticator : dsBuilder.authenticators()) {\n                Authenticator auth = createAuthenticator.type().getDeclaredConstructor().newInstance();\n\n                if (auth instanceof DelegatingAuthenticator) {\n                    DelegatingAuthenticator dauth = (DelegatingAuthenticator) auth;\n\n                    String host = createAuthenticator.delegateHost();\n\n                    if (Strings.isEmpty(host)) {\n                        host = Network.LOOPBACK_HOSTNAME;\n                    }\n\n                    dauth.setDelegateHost(host);\n                    dauth.setDelegatePort(createAuthenticator.delegatePort());\n                    dauth.setDelegateSsl(createAuthenticator.delegateSsl());\n                    dauth.setDelegateTls(createAuthenticator.delegateTls());\n                    dauth.setBaseDn(service.getDnFactory().create(createAuthenticator.baseDn()));\n                    dauth.setDelegateSslTrustManagerFQCN(createAuthenticator.delegateSslTrustManagerFQCN());\n                    dauth.setDelegateTlsTrustManagerFQCN(createAuthenticator.delegateTlsTrustManagerFQCN());\n                }\n\n                authenticators.add(auth);\n            }\n\n            authenticationInterceptor.setAuthenticators(authenticators);\n            authenticationInterceptor.init(service);\n        }\n\n        service.setInterceptors(interceptorList);\n\n        SchemaManager schemaManager = service.getSchemaManager();\n\n        \r\n        for (LoadSchema loadedSchema : dsBuilder.loadedSchemas()) {\n            String schemaName = loadedSchema.name();\n            Boolean enabled = loadedSchema.enabled();\n\n            \r\n            boolean isLoaded = schemaManager.isSchemaLoaded(schemaName);\n\n            if (!isLoaded) {\n                \r\n                try {\n                    isLoaded = schemaManager.load(schemaName);\n                } catch (LdapUnwillingToPerformException lutpe) {\n                    \r\n                    LOG.error(lutpe.getMessage());\n                    continue;\n                }\n            }\n\n            if (isLoaded) {\n                if (enabled) {\n                    schemaManager.enable(schemaName);\n\n                    if (schemaManager.isDisabled(schemaName)) {\n                        LOG.error(\"Cannot enable \" + schemaName);\n                    }\n                } else {\n                    schemaManager.disable(schemaName);\n\n                    if (schemaManager.isEnabled(schemaName)) {\n                        LOG.error(\"Cannot disable \" + schemaName);\n                    }\n                }\n            }\n\n            LOG.debug(\"Loading schema {}, enabled= {}\", schemaName, enabled);\n        }\n\n        \r\n        for (CreatePartition createPartition : dsBuilder.partitions()) {\n            Partition partition;\n\n            \r\n            if (createPartition.type() == Partition.class) {\n                \r\n                \r\n                \r\n                PartitionFactory partitionFactory = dsf.getPartitionFactory();\n                partition = partitionFactory.createPartition(\n                        schemaManager,\n                        service.getDnFactory(),\n                        createPartition.name(),\n                        createPartition.suffix(),\n                        createPartition.cacheSize(),\n                        new File(service.getInstanceLayout().getPartitionsDirectory(), createPartition.name()));\n\n                CreateIndex[] indexes = createPartition.indexes();\n\n                for (CreateIndex createIndex : indexes) {\n                    partitionFactory.addIndex(partition,\n                            createIndex.attribute(), createIndex.cacheSize());\n                }\n\n                partition.initialize();\n            } else {\n                \r\n                \r\n                Class<?>[] partypes = new Class[] {\n                        SchemaManager.class, DnFactory.class };\n                Constructor<?> constructor = createPartition.type().getConstructor(partypes);\n                partition = (Partition) constructor.newInstance(new Object[] {\n                        schemaManager, service.getDnFactory() });\n                partition.setId(createPartition.name());\n                partition.setSuffixDn(new Dn(schemaManager, createPartition.suffix()));\n\n                if (partition instanceof AbstractBTreePartition) {\n                    AbstractBTreePartition btreePartition = (AbstractBTreePartition) partition;\n                    btreePartition.setCacheSize(createPartition.cacheSize());\n                    btreePartition.setPartitionPath(new File(\n                            service\n                                    .getInstanceLayout().getPartitionsDirectory(),\n                            createPartition.name()).toURI());\n\n                    \r\n                    CreateIndex[] indexes = createPartition.indexes();\n\n                    for (CreateIndex createIndex : indexes) {\n                        if (createIndex.type() == JdbmIndex.class) {\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else if (createIndex.type() == MavibotIndex.class) {\n                            \r\n                            MavibotIndex index = new MavibotIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else {\n                            \r\n                            \r\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        }\n                    }\n                }\n            }\n\n            partition.setSchemaManager(schemaManager);\n\n            \r\n            service.addPartition(partition);\n\n            \r\n            ContextEntry contextEntry = createPartition.contextEntry();\n\n            if (contextEntry != null) {\n                injectEntries(service, contextEntry.entryLdif());\n            }\n        }\n\n        return service;\n    }\n","date":"2020-09-22 13:27:38","endLine":275,"groupId":"101540","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createDS","params":"(CreateDSdsBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/79/c5c286d22ce3d52eb90267b25c07097bfd9ce5.src","preCode":"    public static DirectoryService createDS(CreateDS dsBuilder)\n            throws Exception {\n        LOG.debug(\"Starting DS {}...\", dsBuilder.name());\n        Class<?> factory = dsBuilder.factory();\n        DirectoryServiceFactory dsf = (DirectoryServiceFactory) factory\n                .getDeclaredConstructor().newInstance();\n\n        DirectoryService service = dsf.getDirectoryService();\n        service.setAccessControlEnabled(dsBuilder.enableAccessControl());\n        service.setAllowAnonymousAccess(dsBuilder.allowAnonAccess());\n        service.getChangeLog().setEnabled(dsBuilder.enableChangeLog());\n\n        dsf.init(dsBuilder.name());\n\n        for (Class<?> interceptorClass : dsBuilder.additionalInterceptors()) {\n            service.addLast((Interceptor) interceptorClass.getDeclaredConstructor().newInstance());\n        }\n\n        List<Interceptor> interceptorList = service.getInterceptors();\n\n        if (dsBuilder.authenticators().length != 0) {\n            AuthenticationInterceptor authenticationInterceptor = null;\n\n            for (Interceptor interceptor : interceptorList) {\n                if (interceptor instanceof AuthenticationInterceptor) {\n                    authenticationInterceptor = (AuthenticationInterceptor) interceptor;\n                    break;\n                }\n            }\n\n            if (authenticationInterceptor == null) {\n                throw new IllegalStateException(\n                        \"authentication interceptor not found\");\n            }\n\n            Set<Authenticator> authenticators = new HashSet<Authenticator>();\n\n            for (CreateAuthenticator createAuthenticator : dsBuilder.authenticators()) {\n                Authenticator auth = createAuthenticator.type().getDeclaredConstructor().newInstance();\n\n                if (auth instanceof DelegatingAuthenticator) {\n                    DelegatingAuthenticator dauth = (DelegatingAuthenticator) auth;\n\n                    String host = createAuthenticator.delegateHost();\n\n                    if (Strings.isEmpty(host)) {\n                        host = Network.LOOPBACK_HOSTNAME;\n                    }\n\n                    dauth.setDelegateHost(host);\n                    dauth.setDelegatePort(createAuthenticator.delegatePort());\n                    dauth.setDelegateSsl(createAuthenticator.delegateSsl());\n                    dauth.setDelegateTls(createAuthenticator.delegateTls());\n                    dauth.setBaseDn(service.getDnFactory().create(createAuthenticator.baseDn()));\n                    dauth.setDelegateSslTrustManagerFQCN(createAuthenticator.delegateSslTrustManagerFQCN());\n                    dauth.setDelegateTlsTrustManagerFQCN(createAuthenticator.delegateTlsTrustManagerFQCN());\n                }\n\n                authenticators.add(auth);\n            }\n\n            authenticationInterceptor.setAuthenticators(authenticators);\n            authenticationInterceptor.init(service);\n        }\n\n        service.setInterceptors(interceptorList);\n\n        SchemaManager schemaManager = service.getSchemaManager();\n\n        \r\n        for (LoadSchema loadedSchema : dsBuilder.loadedSchemas()) {\n            String schemaName = loadedSchema.name();\n            Boolean enabled = loadedSchema.enabled();\n\n            \r\n            boolean isLoaded = schemaManager.isSchemaLoaded(schemaName);\n\n            if (!isLoaded) {\n                \r\n                try {\n                    isLoaded = schemaManager.load(schemaName);\n                } catch (LdapUnwillingToPerformException lutpe) {\n                    \r\n                    LOG.error(lutpe.getMessage());\n                    continue;\n                }\n            }\n\n            if (isLoaded) {\n                if (enabled) {\n                    schemaManager.enable(schemaName);\n\n                    if (schemaManager.isDisabled(schemaName)) {\n                        LOG.error(\"Cannot enable \" + schemaName);\n                    }\n                } else {\n                    schemaManager.disable(schemaName);\n\n                    if (schemaManager.isEnabled(schemaName)) {\n                        LOG.error(\"Cannot disable \" + schemaName);\n                    }\n                }\n            }\n\n            LOG.debug(\"Loading schema {}, enabled= {}\", schemaName, enabled);\n        }\n\n        \r\n        for (CreatePartition createPartition : dsBuilder.partitions()) {\n            Partition partition;\n\n            \r\n            if (createPartition.type() == Partition.class) {\n                \r\n                \r\n                \r\n                PartitionFactory partitionFactory = dsf.getPartitionFactory();\n                partition = partitionFactory.createPartition(\n                        schemaManager,\n                        service.getDnFactory(),\n                        createPartition.name(),\n                        createPartition.suffix(),\n                        createPartition.cacheSize(),\n                        new File(service.getInstanceLayout().getPartitionsDirectory(), createPartition.name()));\n\n                CreateIndex[] indexes = createPartition.indexes();\n\n                for (CreateIndex createIndex : indexes) {\n                    partitionFactory.addIndex(partition,\n                            createIndex.attribute(), createIndex.cacheSize());\n                }\n\n                partition.initialize();\n            } else {\n                \r\n                \r\n                Class<?>[] partypes = new Class[] {\n                        SchemaManager.class, DnFactory.class };\n                Constructor<?> constructor = createPartition.type().getConstructor(partypes);\n                partition = (Partition) constructor.newInstance(new Object[] {\n                        schemaManager, service.getDnFactory() });\n                partition.setId(createPartition.name());\n                partition.setSuffixDn(new Dn(schemaManager, createPartition.suffix()));\n\n                if (partition instanceof AbstractBTreePartition) {\n                    AbstractBTreePartition btreePartition = (AbstractBTreePartition) partition;\n                    btreePartition.setCacheSize(createPartition.cacheSize());\n                    btreePartition.setPartitionPath(new File(\n                            service\n                                    .getInstanceLayout().getPartitionsDirectory(),\n                            createPartition.name()).toURI());\n\n                    \r\n                    CreateIndex[] indexes = createPartition.indexes();\n\n                    for (CreateIndex createIndex : indexes) {\n                        if (createIndex.type() == JdbmIndex.class) {\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else if (createIndex.type() == MavibotIndex.class) {\n                            \r\n                            MavibotIndex index = new MavibotIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else {\n                            \r\n                            \r\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        }\n                    }\n                }\n            }\n\n            partition.setSchemaManager(schemaManager);\n\n            \r\n            service.addPartition(partition);\n\n            \r\n            ContextEntry contextEntry = createPartition.contextEntry();\n\n            if (contextEntry != null) {\n                injectEntries(service, contextEntry.entryLdif());\n            }\n        }\n\n        return service;\n    }\n","realPath":"components/camel-ldif/src/test/java/org/apache/directory/server/core/integ5/DSAnnotationProcessor.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"N"},{"authorDate":"2020-09-22 15:01:22","commitOrder":4,"curCode":"    public static DirectoryService createDS(CreateDS dsBuilder)\n            throws Exception {\n        LOG.debug(\"Starting DS {}...\", dsBuilder.name());\n        Class<?> factory = dsBuilder.factory();\n        DirectoryServiceFactory dsf = (DirectoryServiceFactory) factory\n                .getDeclaredConstructor().newInstance();\n\n        DirectoryService service = dsf.getDirectoryService();\n        service.setAccessControlEnabled(dsBuilder.enableAccessControl());\n        service.setAllowAnonymousAccess(dsBuilder.allowAnonAccess());\n        service.getChangeLog().setEnabled(dsBuilder.enableChangeLog());\n\n        dsf.init(dsBuilder.name());\n\n        for (Class<?> interceptorClass : dsBuilder.additionalInterceptors()) {\n            service.addLast((Interceptor) interceptorClass.getDeclaredConstructor().newInstance());\n        }\n\n        List<Interceptor> interceptorList = service.getInterceptors();\n\n        if (dsBuilder.authenticators().length != 0) {\n            AuthenticationInterceptor authenticationInterceptor = null;\n\n            for (Interceptor interceptor : interceptorList) {\n                if (interceptor instanceof AuthenticationInterceptor) {\n                    authenticationInterceptor = (AuthenticationInterceptor) interceptor;\n                    break;\n                }\n            }\n\n            if (authenticationInterceptor == null) {\n                throw new IllegalStateException(\n                        \"authentication interceptor not found\");\n            }\n\n            Set<Authenticator> authenticators = new HashSet<Authenticator>();\n\n            for (CreateAuthenticator createAuthenticator : dsBuilder.authenticators()) {\n                Authenticator auth = createAuthenticator.type().getDeclaredConstructor().newInstance();\n\n                if (auth instanceof DelegatingAuthenticator) {\n                    DelegatingAuthenticator dauth = (DelegatingAuthenticator) auth;\n\n                    String host = createAuthenticator.delegateHost();\n\n                    if (Strings.isEmpty(host)) {\n                        host = Network.LOOPBACK_HOSTNAME;\n                    }\n\n                    dauth.setDelegateHost(host);\n                    dauth.setDelegatePort(createAuthenticator.delegatePort());\n                    dauth.setDelegateSsl(createAuthenticator.delegateSsl());\n                    dauth.setDelegateTls(createAuthenticator.delegateTls());\n                    dauth.setBaseDn(service.getDnFactory().create(createAuthenticator.baseDn()));\n                    dauth.setDelegateSslTrustManagerFQCN(createAuthenticator.delegateSslTrustManagerFQCN());\n                    dauth.setDelegateTlsTrustManagerFQCN(createAuthenticator.delegateTlsTrustManagerFQCN());\n                }\n\n                authenticators.add(auth);\n            }\n\n            authenticationInterceptor.setAuthenticators(authenticators);\n            authenticationInterceptor.init(service);\n        }\n\n        service.setInterceptors(interceptorList);\n\n        SchemaManager schemaManager = service.getSchemaManager();\n\n        \r\n        for (LoadSchema loadedSchema : dsBuilder.loadedSchemas()) {\n            String schemaName = loadedSchema.name();\n            Boolean enabled = loadedSchema.enabled();\n\n            \r\n            boolean isLoaded = schemaManager.isSchemaLoaded(schemaName);\n\n            if (!isLoaded) {\n                \r\n                try {\n                    isLoaded = schemaManager.load(schemaName);\n                } catch (LdapUnwillingToPerformException lutpe) {\n                    \r\n                    LOG.error(lutpe.getMessage());\n                    continue;\n                }\n            }\n\n            if (isLoaded) {\n                if (enabled) {\n                    schemaManager.enable(schemaName);\n\n                    if (schemaManager.isDisabled(schemaName)) {\n                        LOG.error(\"Cannot enable \" + schemaName);\n                    }\n                } else {\n                    schemaManager.disable(schemaName);\n\n                    if (schemaManager.isEnabled(schemaName)) {\n                        LOG.error(\"Cannot disable \" + schemaName);\n                    }\n                }\n            }\n\n            LOG.debug(\"Loading schema {}, enabled= {}\", schemaName, enabled);\n        }\n\n        \r\n        for (CreatePartition createPartition : dsBuilder.partitions()) {\n            Partition partition;\n\n            \r\n            if (createPartition.type() == Partition.class) {\n                \r\n                \r\n                \r\n                PartitionFactory partitionFactory = dsf.getPartitionFactory();\n                partition = partitionFactory.createPartition(\n                        schemaManager,\n                        service.getDnFactory(),\n                        createPartition.name(),\n                        createPartition.suffix(),\n                        createPartition.cacheSize(),\n                        new File(service.getInstanceLayout().getPartitionsDirectory(), createPartition.name()));\n\n                CreateIndex[] indexes = createPartition.indexes();\n\n                for (CreateIndex createIndex : indexes) {\n                    partitionFactory.addIndex(partition,\n                            createIndex.attribute(), createIndex.cacheSize());\n                }\n\n                partition.initialize();\n            } else {\n                \r\n                \r\n                Class<?>[] partypes = new Class[] {\n                        SchemaManager.class, DnFactory.class };\n                Constructor<?> constructor = createPartition.type().getConstructor(partypes);\n                partition = (Partition) constructor.newInstance(new Object[] {\n                        schemaManager, service.getDnFactory() });\n                partition.setId(createPartition.name());\n                partition.setSuffixDn(new Dn(schemaManager, createPartition.suffix()));\n\n                if (partition instanceof AbstractBTreePartition) {\n                    AbstractBTreePartition btreePartition = (AbstractBTreePartition) partition;\n                    btreePartition.setCacheSize(createPartition.cacheSize());\n                    btreePartition.setPartitionPath(new File(\n                            service\n                                    .getInstanceLayout().getPartitionsDirectory(),\n                            createPartition.name()).toURI());\n\n                    \r\n                    CreateIndex[] indexes = createPartition.indexes();\n\n                    for (CreateIndex createIndex : indexes) {\n                        if (createIndex.type() == JdbmIndex.class) {\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else if (createIndex.type() == MavibotIndex.class) {\n                            \r\n                            MavibotIndex index = new MavibotIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else {\n                            \r\n                            \r\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        }\n                    }\n                }\n            }\n\n            partition.setSchemaManager(schemaManager);\n\n            \r\n            service.addPartition(partition);\n\n            \r\n            ContextEntry contextEntry = createPartition.contextEntry();\n\n            if (contextEntry != null) {\n                injectEntries(service, contextEntry.entryLdif());\n            }\n        }\n\n        return service;\n    }\n","date":"2020-09-22 15:01:22","endLine":275,"groupId":"101540","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createDS","params":"(CreateDSdsBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/79/c5c286d22ce3d52eb90267b25c07097bfd9ce5.src","preCode":"    public static DirectoryService createDS(CreateDS dsBuilder)\n            throws Exception {\n        LOG.debug(\"Starting DS {}...\", dsBuilder.name());\n        Class<?> factory = dsBuilder.factory();\n        DirectoryServiceFactory dsf = (DirectoryServiceFactory) factory\n                .getDeclaredConstructor().newInstance();\n\n        DirectoryService service = dsf.getDirectoryService();\n        service.setAccessControlEnabled(dsBuilder.enableAccessControl());\n        service.setAllowAnonymousAccess(dsBuilder.allowAnonAccess());\n        service.getChangeLog().setEnabled(dsBuilder.enableChangeLog());\n\n        dsf.init(dsBuilder.name());\n\n        for (Class<?> interceptorClass : dsBuilder.additionalInterceptors()) {\n            service.addLast((Interceptor) interceptorClass.getDeclaredConstructor().newInstance());\n        }\n\n        List<Interceptor> interceptorList = service.getInterceptors();\n\n        if (dsBuilder.authenticators().length != 0) {\n            AuthenticationInterceptor authenticationInterceptor = null;\n\n            for (Interceptor interceptor : interceptorList) {\n                if (interceptor instanceof AuthenticationInterceptor) {\n                    authenticationInterceptor = (AuthenticationInterceptor) interceptor;\n                    break;\n                }\n            }\n\n            if (authenticationInterceptor == null) {\n                throw new IllegalStateException(\n                        \"authentication interceptor not found\");\n            }\n\n            Set<Authenticator> authenticators = new HashSet<Authenticator>();\n\n            for (CreateAuthenticator createAuthenticator : dsBuilder.authenticators()) {\n                Authenticator auth = createAuthenticator.type().getDeclaredConstructor().newInstance();\n\n                if (auth instanceof DelegatingAuthenticator) {\n                    DelegatingAuthenticator dauth = (DelegatingAuthenticator) auth;\n\n                    String host = createAuthenticator.delegateHost();\n\n                    if (Strings.isEmpty(host)) {\n                        host = Network.LOOPBACK_HOSTNAME;\n                    }\n\n                    dauth.setDelegateHost(host);\n                    dauth.setDelegatePort(createAuthenticator.delegatePort());\n                    dauth.setDelegateSsl(createAuthenticator.delegateSsl());\n                    dauth.setDelegateTls(createAuthenticator.delegateTls());\n                    dauth.setBaseDn(service.getDnFactory().create(createAuthenticator.baseDn()));\n                    dauth.setDelegateSslTrustManagerFQCN(createAuthenticator.delegateSslTrustManagerFQCN());\n                    dauth.setDelegateTlsTrustManagerFQCN(createAuthenticator.delegateTlsTrustManagerFQCN());\n                }\n\n                authenticators.add(auth);\n            }\n\n            authenticationInterceptor.setAuthenticators(authenticators);\n            authenticationInterceptor.init(service);\n        }\n\n        service.setInterceptors(interceptorList);\n\n        SchemaManager schemaManager = service.getSchemaManager();\n\n        \r\n        for (LoadSchema loadedSchema : dsBuilder.loadedSchemas()) {\n            String schemaName = loadedSchema.name();\n            Boolean enabled = loadedSchema.enabled();\n\n            \r\n            boolean isLoaded = schemaManager.isSchemaLoaded(schemaName);\n\n            if (!isLoaded) {\n                \r\n                try {\n                    isLoaded = schemaManager.load(schemaName);\n                } catch (LdapUnwillingToPerformException lutpe) {\n                    \r\n                    LOG.error(lutpe.getMessage());\n                    continue;\n                }\n            }\n\n            if (isLoaded) {\n                if (enabled) {\n                    schemaManager.enable(schemaName);\n\n                    if (schemaManager.isDisabled(schemaName)) {\n                        LOG.error(\"Cannot enable \" + schemaName);\n                    }\n                } else {\n                    schemaManager.disable(schemaName);\n\n                    if (schemaManager.isEnabled(schemaName)) {\n                        LOG.error(\"Cannot disable \" + schemaName);\n                    }\n                }\n            }\n\n            LOG.debug(\"Loading schema {}, enabled= {}\", schemaName, enabled);\n        }\n\n        \r\n        for (CreatePartition createPartition : dsBuilder.partitions()) {\n            Partition partition;\n\n            \r\n            if (createPartition.type() == Partition.class) {\n                \r\n                \r\n                \r\n                PartitionFactory partitionFactory = dsf.getPartitionFactory();\n                partition = partitionFactory.createPartition(\n                        schemaManager,\n                        service.getDnFactory(),\n                        createPartition.name(),\n                        createPartition.suffix(),\n                        createPartition.cacheSize(),\n                        new File(service.getInstanceLayout().getPartitionsDirectory(), createPartition.name()));\n\n                partition.setCacheService(service.getCacheService());\n\n                CreateIndex[] indexes = createPartition.indexes();\n\n                for (CreateIndex createIndex : indexes) {\n                    partitionFactory.addIndex(partition,\n                            createIndex.attribute(), createIndex.cacheSize());\n                }\n\n                partition.initialize();\n            } else {\n                \r\n                \r\n                Class<?>[] partypes = new Class[] {\n                        SchemaManager.class, DnFactory.class };\n                Constructor<?> constructor = createPartition.type().getConstructor(partypes);\n                partition = (Partition) constructor.newInstance(new Object[] {\n                        schemaManager, service.getDnFactory() });\n                partition.setId(createPartition.name());\n                partition.setSuffixDn(new Dn(schemaManager, createPartition.suffix()));\n\n                if (partition instanceof AbstractBTreePartition) {\n                    AbstractBTreePartition btreePartition = (AbstractBTreePartition) partition;\n                    btreePartition.setCacheService(service.getCacheService());\n                    btreePartition.setCacheSize(createPartition.cacheSize());\n                    btreePartition.setPartitionPath(new File(\n                            service\n                                    .getInstanceLayout().getPartitionsDirectory(),\n                            createPartition.name()).toURI());\n\n                    \r\n                    CreateIndex[] indexes = createPartition.indexes();\n\n                    for (CreateIndex createIndex : indexes) {\n                        if (createIndex.type() == JdbmIndex.class) {\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else if (createIndex.type() == MavibotIndex.class) {\n                            \r\n                            MavibotIndex index = new MavibotIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        } else {\n                            \r\n                            \r\n                            \r\n                            JdbmIndex index = new JdbmIndex(createIndex.attribute(), false);\n\n                            btreePartition.addIndexedAttributes(index);\n                        }\n                    }\n                }\n            }\n\n            partition.setSchemaManager(schemaManager);\n\n            \r\n            service.addPartition(partition);\n\n            \r\n            ContextEntry contextEntry = createPartition.contextEntry();\n\n            if (contextEntry != null) {\n                injectEntries(service, contextEntry.entryLdif());\n            }\n        }\n\n        return service;\n    }\n","realPath":"components/camel-ldap/src/test/java/org/apache/directory/server/core/integ5/DSAnnotationProcessor.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"698c99d8f0e119d95eea3f314b507f75e7872e1d","commitMessage":"@@@Camel-LDAP: Fixed build\n","date":"2020-09-22 15:01:22","modifiedFileCount":"1","status":"M","submitter":"Andrea Cosentino"}]
