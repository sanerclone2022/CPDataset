[{"authorTime":"2020-03-03 00:02:17","codes":[{"authorDate":"2020-03-03 00:02:17","commitOrder":1,"curCode":"    public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl) {\n        return new ExpressionAdapter() {\n            public Object evaluate(Exchange exchange) {\n                String text = ExpressionBuilder.simpleExpression(name).evaluate(exchange, String.class);\n                Class<?> type;\n                try {\n                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text);\n                } catch (ClassNotFoundException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Object body;\n                try {\n                    body = exchange.getIn().getMandatoryBody(type);\n                } catch (InvalidPayloadException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Expression exp = ExpressionBuilder.beanExpression(body, ognl);\n                return exp.evaluate(exchange, Object.class);\n            }\n\n            @Override\n            public String toString() {\n                return \"mandatoryBodyAs[\" + name + \"](\" + ognl + \")\";\n            }\n        };\n    }\n","date":"2020-03-03 04:55:50","endLine":545,"groupId":"34268","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"mandatoryBodyOgnlExpression","params":"(finalStringname@finalStringognl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/42/0695ed7c2810a57d7554fe3416e7c1f92cc2b4.src","preCode":"    public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl) {\n        return new ExpressionAdapter() {\n            public Object evaluate(Exchange exchange) {\n                String text = ExpressionBuilder.simpleExpression(name).evaluate(exchange, String.class);\n                Class<?> type;\n                try {\n                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text);\n                } catch (ClassNotFoundException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Object body;\n                try {\n                    body = exchange.getIn().getMandatoryBody(type);\n                } catch (InvalidPayloadException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Expression exp = ExpressionBuilder.beanExpression(body, ognl);\n                return exp.evaluate(exchange, Object.class);\n            }\n\n            @Override\n            public String toString() {\n                return \"mandatoryBodyAs[\" + name + \"](\" + ognl + \")\";\n            }\n        };\n    }\n","realPath":"core/camel-core-languages/src/main/java/org/apache/camel/language/simple/SimpleExpressionBuilder.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":520,"status":"B"},{"authorDate":"2020-03-03 00:02:17","commitOrder":1,"curCode":"    public static Expression bodyOgnlExpression(final String name, final String ognl) {\n        return new ExpressionAdapter() {\n            public Object evaluate(Exchange exchange) {\n                String text = ExpressionBuilder.simpleExpression(name).evaluate(exchange, String.class);\n                Class<?> type;\n                try {\n                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text);\n                } catch (ClassNotFoundException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Object body = exchange.getIn().getBody(type);\n                if (body != null) {\n                    \r\n                    \r\n                    return ExpressionBuilder.beanExpression(body, ognl)\n                            .evaluate(exchange, Object.class);\n                } else {\n                    return null;\n                }\n            }\n\n            @Override\n            public String toString() {\n                return \"bodyOgnlAs[\" + name + \"](\" + ognl + \")\";\n            }\n        };\n    }\n","date":"2020-03-03 04:55:50","endLine":605,"groupId":"39525","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"bodyOgnlExpression","params":"(finalStringname@finalStringognl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/42/0695ed7c2810a57d7554fe3416e7c1f92cc2b4.src","preCode":"    public static Expression bodyOgnlExpression(final String name, final String ognl) {\n        return new ExpressionAdapter() {\n            public Object evaluate(Exchange exchange) {\n                String text = ExpressionBuilder.simpleExpression(name).evaluate(exchange, String.class);\n                Class<?> type;\n                try {\n                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text);\n                } catch (ClassNotFoundException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Object body = exchange.getIn().getBody(type);\n                if (body != null) {\n                    \r\n                    \r\n                    return ExpressionBuilder.beanExpression(body, ognl)\n                            .evaluate(exchange, Object.class);\n                } else {\n                    return null;\n                }\n            }\n\n            @Override\n            public String toString() {\n                return \"bodyOgnlAs[\" + name + \"](\" + ognl + \")\";\n            }\n        };\n    }\n","realPath":"core/camel-core-languages/src/main/java/org/apache/camel/language/simple/SimpleExpressionBuilder.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"B"}],"commitId":"60f4190eb3b844039462455040f471ea139c3ca5","commitMessage":"@@@Extract languages into camel-core-languages so that we don't have a build cycle between camel-base / camel-core-engine\n","date":"2020-03-03 04:55:50","modifiedFileCount":"4","status":"B","submitter":"Guillaume Nodet"},{"authorTime":"2020-10-07 16:22:31","codes":[{"authorDate":"2020-10-07 16:22:31","commitOrder":2,"curCode":"    public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl) {\n        return new ExpressionAdapter() {\n            private ClassResolver classResolver;\n            private Expression exp;\n            private Language bean;\n\n            public Object evaluate(Exchange exchange) {\n                String text = exp.evaluate(exchange, String.class);\n                Class<?> type;\n                try {\n                    type = classResolver.resolveMandatoryClass(text);\n                } catch (ClassNotFoundException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Object body;\n                try {\n                    body = exchange.getIn().getMandatoryBody(type);\n                } catch (InvalidPayloadException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Map<String, Object> properties = new HashMap<>(2);\n                properties.put(\"bean\", body);\n                properties.put(\"method\", ognl);\n                Expression ognlExp = bean.createExpression(null, properties);\n                ognlExp.init(exchange.getContext());\n                return ognlExp.evaluate(exchange, Object.class);\n            }\n\n            @Override\n            public void init(CamelContext context) {\n                classResolver = context.getClassResolver();\n                exp = ExpressionBuilder.simpleExpression(name);\n                exp.init(context);\n                bean = context.resolveLanguage(\"bean\");\n            }\n\n            @Override\n            public String toString() {\n                return \"mandatoryBodyAs[\" + name + \"](\" + ognl + \")\";\n            }\n        };\n    }\n","date":"2020-10-07 16:22:31","endLine":604,"groupId":"15498","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"mandatoryBodyOgnlExpression","params":"(finalStringname@finalStringognl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/6e/9b9433d1366de4611dd86d9cdefc445e618e38.src","preCode":"    public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl) {\n        return new ExpressionAdapter() {\n            public Object evaluate(Exchange exchange) {\n                String text = ExpressionBuilder.simpleExpression(name).evaluate(exchange, String.class);\n                Class<?> type;\n                try {\n                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text);\n                } catch (ClassNotFoundException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Object body;\n                try {\n                    body = exchange.getIn().getMandatoryBody(type);\n                } catch (InvalidPayloadException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Expression exp = ExpressionBuilder.beanExpression(body, ognl);\n                return exp.evaluate(exchange, Object.class);\n            }\n\n            @Override\n            public String toString() {\n                return \"mandatoryBodyAs[\" + name + \"](\" + ognl + \")\";\n            }\n        };\n    }\n","realPath":"core/camel-core-languages/src/main/java/org/apache/camel/language/simple/SimpleExpressionBuilder.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":563,"status":"M"},{"authorDate":"2020-10-07 16:22:31","commitOrder":2,"curCode":"    public static Expression bodyOgnlExpression(final String name, final String ognl) {\n        return new ExpressionAdapter() {\n            private ClassResolver classResolver;\n            private Expression exp;\n            private Language bean;\n\n            public Object evaluate(Exchange exchange) {\n                String text = exp.evaluate(exchange, String.class);\n                Class<?> type;\n                try {\n                    type = classResolver.resolveMandatoryClass(text);\n                } catch (ClassNotFoundException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Object body = exchange.getIn().getBody(type);\n                if (body != null) {\n                    \r\n                    \r\n                    Map<String, Object> properties = new HashMap<>(2);\n                    properties.put(\"bean\", body);\n                    properties.put(\"method\", ognl);\n                    Expression ognlExp = bean.createExpression(null, properties);\n                    ognlExp.init(exchange.getContext());\n                    return ognlExp.evaluate(exchange, Object.class);\n                } else {\n                    return null;\n                }\n            }\n\n            @Override\n            public void init(CamelContext context) {\n                classResolver = context.getClassResolver();\n                exp = ExpressionBuilder.simpleExpression(name);\n                exp.init(context);\n                bean = context.resolveLanguage(\"bean\");\n            }\n\n            @Override\n            public String toString() {\n                return \"bodyOgnlAs[\" + name + \"](\" + ognl + \")\";\n            }\n        };\n    }\n","date":"2020-10-07 16:22:31","endLine":689,"groupId":"15499","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"bodyOgnlExpression","params":"(finalStringname@finalStringognl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/6e/9b9433d1366de4611dd86d9cdefc445e618e38.src","preCode":"    public static Expression bodyOgnlExpression(final String name, final String ognl) {\n        return new ExpressionAdapter() {\n            public Object evaluate(Exchange exchange) {\n                String text = ExpressionBuilder.simpleExpression(name).evaluate(exchange, String.class);\n                Class<?> type;\n                try {\n                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text);\n                } catch (ClassNotFoundException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Object body = exchange.getIn().getBody(type);\n                if (body != null) {\n                    \r\n                    \r\n                    return ExpressionBuilder.beanExpression(body, ognl)\n                            .evaluate(exchange, Object.class);\n                } else {\n                    return null;\n                }\n            }\n\n            @Override\n            public String toString() {\n                return \"bodyOgnlAs[\" + name + \"](\" + ognl + \")\";\n            }\n        };\n    }\n","realPath":"core/camel-core-languages/src/main/java/org/apache/camel/language/simple/SimpleExpressionBuilder.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":647,"status":"M"}],"commitId":"f309786df86c8b809b248f1d55b47549686d5215","commitMessage":"@@@CAMEL-15627: camel-core - optiomize - Initialize of expression to avoid runtime check\n","date":"2020-10-07 16:22:31","modifiedFileCount":"5","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2020-10-08 17:05:33","codes":[{"authorDate":"2020-10-08 17:05:33","commitOrder":3,"curCode":"    public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl) {\n        return new ExpressionAdapter() {\n            private ClassResolver classResolver;\n            private Expression exp;\n            private Language bean;\n\n            public Object evaluate(Exchange exchange) {\n                String text = exp.evaluate(exchange, String.class);\n                Class<?> type;\n                try {\n                    type = classResolver.resolveMandatoryClass(text);\n                } catch (ClassNotFoundException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Object body;\n                try {\n                    body = exchange.getIn().getMandatoryBody(type);\n                } catch (InvalidPayloadException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Expression ognlExp = bean.createExpression(null, new Object[] { body, ognl });\n                ognlExp.init(exchange.getContext());\n                return ognlExp.evaluate(exchange, Object.class);\n            }\n\n            @Override\n            public void init(CamelContext context) {\n                classResolver = context.getClassResolver();\n                exp = ExpressionBuilder.simpleExpression(name);\n                exp.init(context);\n                bean = context.resolveLanguage(\"bean\");\n            }\n\n            @Override\n            public String toString() {\n                return \"mandatoryBodyAs[\" + name + \"](\" + ognl + \")\";\n            }\n        };\n    }\n","date":"2020-10-08 17:05:33","endLine":599,"groupId":"122817","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"mandatoryBodyOgnlExpression","params":"(finalStringname@finalStringognl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/a0/81852486e5e2a9c73d8fcd7d7c44418dc868bc.src","preCode":"    public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl) {\n        return new ExpressionAdapter() {\n            private ClassResolver classResolver;\n            private Expression exp;\n            private Language bean;\n\n            public Object evaluate(Exchange exchange) {\n                String text = exp.evaluate(exchange, String.class);\n                Class<?> type;\n                try {\n                    type = classResolver.resolveMandatoryClass(text);\n                } catch (ClassNotFoundException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Object body;\n                try {\n                    body = exchange.getIn().getMandatoryBody(type);\n                } catch (InvalidPayloadException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Map<String, Object> properties = new HashMap<>(2);\n                properties.put(\"bean\", body);\n                properties.put(\"method\", ognl);\n                Expression ognlExp = bean.createExpression(null, properties);\n                ognlExp.init(exchange.getContext());\n                return ognlExp.evaluate(exchange, Object.class);\n            }\n\n            @Override\n            public void init(CamelContext context) {\n                classResolver = context.getClassResolver();\n                exp = ExpressionBuilder.simpleExpression(name);\n                exp.init(context);\n                bean = context.resolveLanguage(\"bean\");\n            }\n\n            @Override\n            public String toString() {\n                return \"mandatoryBodyAs[\" + name + \"](\" + ognl + \")\";\n            }\n        };\n    }\n","realPath":"core/camel-core-languages/src/main/java/org/apache/camel/language/simple/SimpleExpressionBuilder.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":561,"status":"M"},{"authorDate":"2020-10-08 17:05:33","commitOrder":3,"curCode":"    public static Expression bodyOgnlExpression(final String name, final String ognl) {\n        return new ExpressionAdapter() {\n            private ClassResolver classResolver;\n            private Expression exp;\n            private Language bean;\n\n            public Object evaluate(Exchange exchange) {\n                String text = exp.evaluate(exchange, String.class);\n                Class<?> type;\n                try {\n                    type = classResolver.resolveMandatoryClass(text);\n                } catch (ClassNotFoundException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Object body = exchange.getIn().getBody(type);\n                if (body != null) {\n                    \r\n                    \r\n                    Expression ognlExp = bean.createExpression(null, new Object[] { body, ognl });\n                    ognlExp.init(exchange.getContext());\n                    return ognlExp.evaluate(exchange, Object.class);\n                } else {\n                    return null;\n                }\n            }\n\n            @Override\n            public void init(CamelContext context) {\n                classResolver = context.getClassResolver();\n                exp = ExpressionBuilder.simpleExpression(name);\n                exp.init(context);\n                bean = context.resolveLanguage(\"bean\");\n            }\n\n            @Override\n            public String toString() {\n                return \"bodyOgnlAs[\" + name + \"](\" + ognl + \")\";\n            }\n        };\n    }\n","date":"2020-10-08 17:05:33","endLine":681,"groupId":"122817","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"bodyOgnlExpression","params":"(finalStringname@finalStringognl)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/a0/81852486e5e2a9c73d8fcd7d7c44418dc868bc.src","preCode":"    public static Expression bodyOgnlExpression(final String name, final String ognl) {\n        return new ExpressionAdapter() {\n            private ClassResolver classResolver;\n            private Expression exp;\n            private Language bean;\n\n            public Object evaluate(Exchange exchange) {\n                String text = exp.evaluate(exchange, String.class);\n                Class<?> type;\n                try {\n                    type = classResolver.resolveMandatoryClass(text);\n                } catch (ClassNotFoundException e) {\n                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e);\n                }\n                Object body = exchange.getIn().getBody(type);\n                if (body != null) {\n                    \r\n                    \r\n                    Map<String, Object> properties = new HashMap<>(2);\n                    properties.put(\"bean\", body);\n                    properties.put(\"method\", ognl);\n                    Expression ognlExp = bean.createExpression(null, properties);\n                    ognlExp.init(exchange.getContext());\n                    return ognlExp.evaluate(exchange, Object.class);\n                } else {\n                    return null;\n                }\n            }\n\n            @Override\n            public void init(CamelContext context) {\n                classResolver = context.getClassResolver();\n                exp = ExpressionBuilder.simpleExpression(name);\n                exp.init(context);\n                bean = context.resolveLanguage(\"bean\");\n            }\n\n            @Override\n            public String toString() {\n                return \"bodyOgnlAs[\" + name + \"](\" + ognl + \")\";\n            }\n        };\n    }\n","realPath":"core/camel-core-languages/src/main/java/org/apache/camel/language/simple/SimpleExpressionBuilder.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":642,"status":"M"}],"commitId":"45f9e4c0b5e55bdaf59208f5447d1baa3941a16a","commitMessage":"@@@CAMEL-15654: camel-core - Optimize language with properties\n","date":"2020-10-08 17:05:33","modifiedFileCount":"16","status":"M","submitter":"Claus Ibsen"}]
