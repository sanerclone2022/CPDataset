[{"authorTime":"2015-07-18 17:07:15","codes":[{"authorDate":"2015-07-18 17:06:56","commitOrder":2,"curCode":"    public void statusBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = template.requestBody(\"direct:status\", \"\", Status.class);\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        \n        template.sendBody(\"direct:create-branch\", \"\");\n        \n        Git git = new Git(repository);\n        \n        List<Ref> ref = git.branchList().call();\n        boolean branchCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/heads/\" + BRANCH_TEST)) {\n                branchCreated = true;\n            }\n        }\n        assertEquals(branchCreated, true);\n        \n        File fileToAddDifferent = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAddDifferent.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        status = template.requestBody(\"direct:status-branch\", \"\", Status.class);\n        assertTrue(status.getAdded().contains(FILENAME_BRANCH_TO_ADD));\n        \n        repository.close();\n    }\n","date":"2015-07-18 17:08:15","endLine":574,"groupId":"36493","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"statusBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/5a/9c7f30badbd4736b5a092cb640d96255acc28c.src","preCode":"    public void statusBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = template.requestBody(\"direct:status\", \"\", Status.class);\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        \n        template.sendBody(\"direct:create-branch\", \"\");\n        \n        Git git = new Git(repository);\n        \n        List<Ref> ref = git.branchList().call();\n        boolean branchCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/heads/\" + BRANCH_TEST)) {\n                branchCreated = true;\n            }\n        }\n        assertEquals(branchCreated, true);\n        \n        File fileToAddDifferent = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAddDifferent.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        status = template.requestBody(\"direct:status-branch\", \"\", Status.class);\n        assertTrue(status.getAdded().contains(FILENAME_BRANCH_TO_ADD));\n        \n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":521,"status":"NB"},{"authorDate":"2015-07-18 17:07:15","commitOrder":2,"curCode":"    public void tagConsumerTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        \n        Git git = new Git(repository);\n        \n        template.sendBody(\"direct:create-tag\", \"\");\n        \n        List<Ref> ref = git.tagList().call();\n        boolean tagCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/tags/\" + TAG_TEST)) {\n                tagCreated = true;\n            }\n        }\n        assertEquals(tagCreated, true);\n        \n        MockEndpoint added = getMockEndpoint(\"mock:result-tag\");\n        \n        Thread.sleep(1 * 5000);\n        assertEquals(added.getExchanges().size(), 1);\n        repository.close();\n    }\n","date":"2015-07-18 17:08:16","endLine":153,"groupId":"18922","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"tagConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/a0/80e232b5acc9748f35103d615dddf0529c6871.src","preCode":"    public void tagConsumerTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        \n        Git git = new Git(repository);\n        \n        template.sendBody(\"direct:create-tag\", \"\");\n        \n        List<Ref> ref = git.tagList().call();\n        boolean tagCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/tags/\" + TAG_TEST)) {\n                tagCreated = true;\n            }\n        }\n        assertEquals(tagCreated, true);\n        \n        MockEndpoint added = getMockEndpoint(\"mock:result-tag\");\n        \n        Thread.sleep(1 * 5000);\n        assertEquals(added.getExchanges().size(), 1);\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"}],"commitId":"2cbeee721769e385743b4595ff796d0c293869ae","commitMessage":"@@@CAMEL-7982: camel-git - A generic git component.  add branches consumer\n","date":"2015-07-18 17:08:16","modifiedFileCount":"3","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2015-07-18 17:07:19","codes":[{"authorDate":"2015-07-18 17:07:19","commitOrder":3,"curCode":"    public void statusBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = template.requestBody(\"direct:status\", \"\", Status.class);\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        \n        template.sendBody(\"direct:create-branch\", \"\");\n        \n        Git git = new Git(repository);\n        \n        List<Ref> ref = git.branchList().call();\n        boolean branchCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/heads/\" + branchTest)) {\n                branchCreated = true;\n            }\n        }\n        assertEquals(branchCreated, true);\n        \n        File fileToAddDifferent = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAddDifferent.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n        \n        status = template.requestBody(\"direct:status-branch\", \"\", Status.class);\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        \n        repository.close();\n    }\n","date":"2015-07-18 17:08:16","endLine":569,"groupId":"36493","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"statusBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/21/2be8f63c986a46e6ea31ca0bfcf71bd1194e96.src","preCode":"    public void statusBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = template.requestBody(\"direct:status\", \"\", Status.class);\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        \n        template.sendBody(\"direct:create-branch\", \"\");\n        \n        Git git = new Git(repository);\n        \n        List<Ref> ref = git.branchList().call();\n        boolean branchCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/heads/\" + branchTest)) {\n                branchCreated = true;\n            }\n        }\n        assertEquals(branchCreated, true);\n        \n        File fileToAddDifferent = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAddDifferent.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n        \n        status = template.requestBody(\"direct:status-branch\", \"\", Status.class);\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        \n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"MB"},{"authorDate":"2015-07-18 17:07:19","commitOrder":3,"curCode":"    public void tagConsumerTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        \n        Git git = new Git(repository);\n        \n        template.sendBody(\"direct:create-tag\", \"\");\n        \n        List<Ref> ref = git.tagList().call();\n        boolean tagCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/tags/\" + tagTest)) {\n                tagCreated = true;\n            }\n        }\n        assertEquals(tagCreated, true);\n        \n        MockEndpoint added = getMockEndpoint(\"mock:result-tag\");\n        \n        Thread.sleep(1 * 5000);\n        assertEquals(added.getExchanges().size(), 1);\n        repository.close();\n    }\n","date":"2015-07-18 17:08:16","endLine":153,"groupId":"18922","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"tagConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/2b/de385628c61d3336d29195fbd470e1ab6af98d.src","preCode":"    public void tagConsumerTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        \n        Git git = new Git(repository);\n        \n        template.sendBody(\"direct:create-tag\", \"\");\n        \n        List<Ref> ref = git.tagList().call();\n        boolean tagCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/tags/\" + tagTest)) {\n                tagCreated = true;\n            }\n        }\n        assertEquals(tagCreated, true);\n        \n        MockEndpoint added = getMockEndpoint(\"mock:result-tag\");\n        \n        Thread.sleep(1 * 5000);\n        assertEquals(added.getExchanges().size(), 1);\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"MB"}],"commitId":"69fdbd1569544ee339bf1ef063c047662814f492","commitMessage":"@@@Fixed CS\n","date":"2015-07-18 17:08:16","modifiedFileCount":"4","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2016-11-22 05:34:03","codes":[{"authorDate":"2016-11-22 05:34:03","commitOrder":4,"curCode":"    public void statusBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.branchCreate().setName(branchTest).call();\n        List<Ref> ref = git.branchList().call();\n        boolean branchCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/heads/\" + branchTest)) {\n                branchCreated = true;\n            }\n        }\n        assertEquals(branchCreated, true);\n        File fileToAddDifferent = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAddDifferent.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n\n        \r\n        status = template.requestBody(\"direct:status-branch\", \"\", Status.class);\n\n        \r\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        Status gitStatus = git.status().call();\n        assertEquals(gitStatus.getAdded(), status.getAdded());\n\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":505,"groupId":"43177","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"statusBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/94/edb9c8aca9980dc1c9cbcba9f967f24aa6059c.src","preCode":"    public void statusBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n\n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n\n        Status status = template.requestBody(\"direct:status\", \"\", Status.class);\n        assertTrue(status.getAdded().contains(filenameToAdd));\n\n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n\n        template.sendBody(\"direct:create-branch\", \"\");\n\n        Git git = new Git(repository);\n\n        List<Ref> ref = git.branchList().call();\n        boolean branchCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/heads/\" + branchTest)) {\n                branchCreated = true;\n            }\n        }\n        assertEquals(branchCreated, true);\n\n        File fileToAddDifferent = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAddDifferent.createNewFile();\n\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        status = template.requestBody(\"direct:status-branch\", \"\", Status.class);\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"M"},{"authorDate":"2016-11-22 05:34:03","commitOrder":4,"curCode":"    public void tagConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultTag = getMockEndpoint(\"mock:result-tag\");\n        mockResultTag.expectedMessageCount(1);\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.tag().setName(tagTest).call();\n        List<Ref> ref = git.tagList().call();\n        boolean tagCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/tags/\" + tagTest)) {\n                tagCreated = true;\n            }\n        }\n        assertEquals(tagCreated, true);\n\n        \r\n        mockResultTag.assertIsSatisfied();\n\n        \r\n        Exchange exchange = mockResultTag.getExchanges().get(0);\n        assertEquals(\"refs/tags/\" + tagTest, exchange.getOut().getBody(ObjectIdRef.Unpeeled.class).getName());\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":110,"groupId":"43177","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"tagConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/f2/b5db1898d15b933062578c1791f098239e37d0.src","preCode":"    public void tagConsumerTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        \n        Git git = new Git(repository);\n        \n        template.sendBody(\"direct:create-tag\", \"\");\n        \n        List<Ref> ref = git.tagList().call();\n        boolean tagCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/tags/\" + tagTest)) {\n                tagCreated = true;\n            }\n        }\n        assertEquals(tagCreated, true);\n        \n        MockEndpoint added = getMockEndpoint(\"mock:result-tag\");\n        \n        Thread.sleep(1 * 5000);\n        assertEquals(added.getExchanges().size(), 1);\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"e396f77d3ba24e8271fc8d6169c68a9af0e23afb","commitMessage":"@@@Refactor unit tests using Jgit instead of camel-git to initialise the context\n","date":"2016-11-22 17:34:41","modifiedFileCount":"3","status":"M","submitter":"Olivier Antibi"},{"authorTime":"2019-08-07 14:06:01","codes":[{"authorDate":"2016-11-22 05:34:03","commitOrder":5,"curCode":"    public void statusBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.branchCreate().setName(branchTest).call();\n        List<Ref> ref = git.branchList().call();\n        boolean branchCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/heads/\" + branchTest)) {\n                branchCreated = true;\n            }\n        }\n        assertEquals(branchCreated, true);\n        File fileToAddDifferent = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAddDifferent.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n\n        \r\n        status = template.requestBody(\"direct:status-branch\", \"\", Status.class);\n\n        \r\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        Status gitStatus = git.status().call();\n        assertEquals(gitStatus.getAdded(), status.getAdded());\n\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":505,"groupId":"43177","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"statusBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/94/edb9c8aca9980dc1c9cbcba9f967f24aa6059c.src","preCode":"    public void statusBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.branchCreate().setName(branchTest).call();\n        List<Ref> ref = git.branchList().call();\n        boolean branchCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/heads/\" + branchTest)) {\n                branchCreated = true;\n            }\n        }\n        assertEquals(branchCreated, true);\n        File fileToAddDifferent = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAddDifferent.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n\n        \r\n        status = template.requestBody(\"direct:status-branch\", \"\", Status.class);\n\n        \r\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        Status gitStatus = git.status().call();\n        assertEquals(gitStatus.getAdded(), status.getAdded());\n\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"N"},{"authorDate":"2019-08-07 14:06:01","commitOrder":5,"curCode":"    public void tagConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultTag = getMockEndpoint(\"mock:result-tag\");\n        mockResultTag.expectedMessageCount(1);\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.tag().setName(tagTest).call();\n        List<Ref> ref = git.tagList().call();\n        boolean tagCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/tags/\" + tagTest)) {\n                tagCreated = true;\n            }\n        }\n        assertEquals(tagCreated, true);\n\n        \r\n        mockResultTag.assertIsSatisfied();\n\n        \r\n        Exchange exchange = mockResultTag.getExchanges().get(0);\n        assertEquals(\"refs/tags/\" + tagTest, exchange.getMessage().getBody(ObjectIdRef.Unpeeled.class).getName());\n        git.close();\n    }\n","date":"2019-08-07 14:06:01","endLine":98,"groupId":"43177","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"tagConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ba/39d3e56690d27d4aea8219cdfd155401430a6c.src","preCode":"    public void tagConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultTag = getMockEndpoint(\"mock:result-tag\");\n        mockResultTag.expectedMessageCount(1);\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.tag().setName(tagTest).call();\n        List<Ref> ref = git.tagList().call();\n        boolean tagCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/tags/\" + tagTest)) {\n                tagCreated = true;\n            }\n        }\n        assertEquals(tagCreated, true);\n\n        \r\n        mockResultTag.assertIsSatisfied();\n\n        \r\n        Exchange exchange = mockResultTag.getExchanges().get(0);\n        assertEquals(\"refs/tags/\" + tagTest, exchange.getOut().getBody(ObjectIdRef.Unpeeled.class).getName());\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"010cbdd69df83c8361183e44f1c3283e7f15e39c","commitMessage":"@@@CAMEL-10910: A route with a single output should also use a pipeline so its the same behaviour as if the route has 2+ outputs.\n","date":"2019-08-07 14:06:01","modifiedFileCount":"1","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2020-08-22 01:19:27","codes":[{"authorDate":"2016-11-22 05:34:03","commitOrder":6,"curCode":"    public void statusBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.branchCreate().setName(branchTest).call();\n        List<Ref> ref = git.branchList().call();\n        boolean branchCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/heads/\" + branchTest)) {\n                branchCreated = true;\n            }\n        }\n        assertEquals(branchCreated, true);\n        File fileToAddDifferent = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAddDifferent.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n\n        \r\n        status = template.requestBody(\"direct:status-branch\", \"\", Status.class);\n\n        \r\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        Status gitStatus = git.status().call();\n        assertEquals(gitStatus.getAdded(), status.getAdded());\n\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":505,"groupId":"43177","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"statusBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/94/edb9c8aca9980dc1c9cbcba9f967f24aa6059c.src","preCode":"    public void statusBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.branchCreate().setName(branchTest).call();\n        List<Ref> ref = git.branchList().call();\n        boolean branchCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/heads/\" + branchTest)) {\n                branchCreated = true;\n            }\n        }\n        assertEquals(branchCreated, true);\n        File fileToAddDifferent = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAddDifferent.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n\n        \r\n        status = template.requestBody(\"direct:status-branch\", \"\", Status.class);\n\n        \r\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        Status gitStatus = git.status().call();\n        assertEquals(gitStatus.getAdded(), status.getAdded());\n\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"N"},{"authorDate":"2020-08-22 01:19:27","commitOrder":6,"curCode":"    public void tagConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultTag = getMockEndpoint(\"mock:result-tag\");\n        mockResultTag.expectedMessageCount(1);\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.tag().setName(tagTest).call();\n        List<Ref> ref = git.tagList().call();\n        boolean tagCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/tags/\" + tagTest)) {\n                tagCreated = true;\n            }\n        }\n        assertEquals(true, tagCreated);\n\n        \r\n        mockResultTag.assertIsSatisfied();\n\n        \r\n        Exchange exchange = mockResultTag.getExchanges().get(0);\n        assertEquals(\"refs/tags/\" + tagTest, exchange.getMessage().getBody(ObjectIdRef.Unpeeled.class).getName());\n        git.close();\n    }\n","date":"2020-08-22 01:19:27","endLine":101,"groupId":"35757","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"tagConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/e5/574f19663fe07a2e39e1f7803adefa7526ac24.src","preCode":"    public void tagConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultTag = getMockEndpoint(\"mock:result-tag\");\n        mockResultTag.expectedMessageCount(1);\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.tag().setName(tagTest).call();\n        List<Ref> ref = git.tagList().call();\n        boolean tagCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/tags/\" + tagTest)) {\n                tagCreated = true;\n            }\n        }\n        assertEquals(tagCreated, true);\n\n        \r\n        mockResultTag.assertIsSatisfied();\n\n        \r\n        Exchange exchange = mockResultTag.getExchanges().get(0);\n        assertEquals(\"refs/tags/\" + tagTest, exchange.getMessage().getBody(ObjectIdRef.Unpeeled.class).getName());\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"2fd065371821831d6884c5d9449302931e2dc217","commitMessage":"@@@CAMEL-15444: fix incorrect assertion order (#4116)\n\nThis makes it easier to identify expected results on test reports","date":"2020-08-22 01:19:27","modifiedFileCount":"135","status":"M","submitter":"Otavio Rodolfo Piske"},{"authorTime":"2020-11-11 21:24:45","codes":[{"authorDate":"2016-11-22 05:34:03","commitOrder":7,"curCode":"    public void statusBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.branchCreate().setName(branchTest).call();\n        List<Ref> ref = git.branchList().call();\n        boolean branchCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/heads/\" + branchTest)) {\n                branchCreated = true;\n            }\n        }\n        assertEquals(branchCreated, true);\n        File fileToAddDifferent = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAddDifferent.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n\n        \r\n        status = template.requestBody(\"direct:status-branch\", \"\", Status.class);\n\n        \r\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        Status gitStatus = git.status().call();\n        assertEquals(gitStatus.getAdded(), status.getAdded());\n\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":505,"groupId":"43177","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"statusBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/94/edb9c8aca9980dc1c9cbcba9f967f24aa6059c.src","preCode":"    public void statusBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.branchCreate().setName(branchTest).call();\n        List<Ref> ref = git.branchList().call();\n        boolean branchCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/heads/\" + branchTest)) {\n                branchCreated = true;\n            }\n        }\n        assertEquals(branchCreated, true);\n        File fileToAddDifferent = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAddDifferent.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n\n        \r\n        status = template.requestBody(\"direct:status-branch\", \"\", Status.class);\n\n        \r\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        Status gitStatus = git.status().call();\n        assertEquals(gitStatus.getAdded(), status.getAdded());\n\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"N"},{"authorDate":"2020-11-11 21:24:45","commitOrder":7,"curCode":"    public void tagConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultTag = getMockEndpoint(\"mock:result-tag\");\n        mockResultTag.expectedMessageCount(1);\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.tag().setName(tagTest).call();\n        List<Ref> ref = git.tagList().call();\n        boolean tagCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/tags/\" + tagTest)) {\n                tagCreated = true;\n            }\n        }\n        assertEquals(true, tagCreated);\n\n        \r\n        mockResultTag.assertIsSatisfied();\n\n        \r\n        Exchange exchange = mockResultTag.getExchanges().get(0);\n        assertEquals(\"refs/tags/\" + tagTest, exchange.getMessage().getBody(String.class));\n        git.close();\n    }\n","date":"2020-11-11 21:24:45","endLine":125,"groupId":"35757","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"tagConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ca/fa067999bc011921d591babe03aed63bccd011.src","preCode":"    public void tagConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultTag = getMockEndpoint(\"mock:result-tag\");\n        mockResultTag.expectedMessageCount(1);\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.tag().setName(tagTest).call();\n        List<Ref> ref = git.tagList().call();\n        boolean tagCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/tags/\" + tagTest)) {\n                tagCreated = true;\n            }\n        }\n        assertEquals(true, tagCreated);\n\n        \r\n        mockResultTag.assertIsSatisfied();\n\n        \r\n        Exchange exchange = mockResultTag.getExchanges().get(0);\n        assertEquals(\"refs/tags/\" + tagTest, exchange.getMessage().getBody(ObjectIdRef.Unpeeled.class).getName());\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"d7f394a74808f9e29f2b810a410492bbc9c92f4b","commitMessage":"@@@CAMEL-15812 - Tag consumer fixed test\n","date":"2020-11-11 21:24:45","modifiedFileCount":"1","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2020-11-11 21:24:45","codes":[{"authorDate":"2021-04-24 22:32:39","commitOrder":8,"curCode":"    public void statusBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.branchCreate().setName(branchTest).call();\n        List<Ref> ref = git.branchList().call();\n        boolean branchCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/heads/\" + branchTest)) {\n                branchCreated = true;\n            }\n        }\n        assertEquals(true, branchCreated);\n        File fileToAddDifferent = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAddDifferent.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n\n        \r\n        status = template.requestBody(\"direct:status-branch\", \"\", Status.class);\n\n        \r\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        Status gitStatus = git.status().call();\n        assertEquals(gitStatus.getAdded(), status.getAdded());\n\n        git.close();\n    }\n","date":"2021-04-24 22:32:39","endLine":509,"groupId":"101843","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"statusBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/be/255a5e97081a65f2d671d2629876c794c32ce1.src","preCode":"    public void statusBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.branchCreate().setName(branchTest).call();\n        List<Ref> ref = git.branchList().call();\n        boolean branchCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/heads/\" + branchTest)) {\n                branchCreated = true;\n            }\n        }\n        assertEquals(branchCreated, true);\n        File fileToAddDifferent = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAddDifferent.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n\n        \r\n        status = template.requestBody(\"direct:status-branch\", \"\", Status.class);\n\n        \r\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        Status gitStatus = git.status().call();\n        assertEquals(gitStatus.getAdded(), status.getAdded());\n\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":476,"status":"M"},{"authorDate":"2020-11-11 21:24:45","commitOrder":8,"curCode":"    public void tagConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultTag = getMockEndpoint(\"mock:result-tag\");\n        mockResultTag.expectedMessageCount(1);\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.tag().setName(tagTest).call();\n        List<Ref> ref = git.tagList().call();\n        boolean tagCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/tags/\" + tagTest)) {\n                tagCreated = true;\n            }\n        }\n        assertEquals(true, tagCreated);\n\n        \r\n        mockResultTag.assertIsSatisfied();\n\n        \r\n        Exchange exchange = mockResultTag.getExchanges().get(0);\n        assertEquals(\"refs/tags/\" + tagTest, exchange.getMessage().getBody(String.class));\n        git.close();\n    }\n","date":"2020-11-11 21:24:45","endLine":125,"groupId":"101843","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"tagConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ca/fa067999bc011921d591babe03aed63bccd011.src","preCode":"    public void tagConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultTag = getMockEndpoint(\"mock:result-tag\");\n        mockResultTag.expectedMessageCount(1);\n        Git git = getGitTestRepository();\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        git.tag().setName(tagTest).call();\n        List<Ref> ref = git.tagList().call();\n        boolean tagCreated = false;\n        for (Ref refInternal : ref) {\n            if (refInternal.getName().equals(\"refs/tags/\" + tagTest)) {\n                tagCreated = true;\n            }\n        }\n        assertEquals(true, tagCreated);\n\n        \r\n        mockResultTag.assertIsSatisfied();\n\n        \r\n        Exchange exchange = mockResultTag.getExchanges().get(0);\n        assertEquals(\"refs/tags/\" + tagTest, exchange.getMessage().getBody(String.class));\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"}],"commitId":"7303e3102c5f78794f7350387c2339bde58110cd","commitMessage":"@@@(chores): fix incorrect assertion order in tests (#5463)\n\nThis prevents confusing messages when evaluating test results","date":"2021-04-24 22:32:39","modifiedFileCount":"46","status":"M","submitter":"Otavio Rodolfo Piske"}]
