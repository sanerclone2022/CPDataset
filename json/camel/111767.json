[{"authorTime":"2021-03-08 23:48:38","codes":[{"authorDate":"2021-03-08 23:48:38","commitOrder":1,"curCode":"        private void logFailedDelivery(Exchange exchange, String message, Throwable e) {\n            if (logger == null) {\n                return;\n            }\n\n            if (e == null) {\n                e = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class);\n            }\n\n            if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                String msg = \"Rollback \" + ExchangeHelper.logIds(exchange);\n                Throwable cause = exchange.getException() != null\n                        ? exchange.getException() : exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class);\n                if (cause != null) {\n                    msg = msg + \" due: \" + cause.getMessage();\n                }\n\n                \r\n                if (redeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (redeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, false);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (logger.getLevel() == LoggingLevel.ERROR) {\n                    \r\n                    logger.log(msg, LoggingLevel.WARN);\n                } else {\n                    \r\n                    logger.log(msg);\n                }\n            } else {\n                String msg = message;\n                \r\n                if (redeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (redeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter,\n                            e != null && redeliveryPolicy.isLogStackTrace());\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (e != null && redeliveryPolicy.isLogStackTrace()) {\n                    logger.log(msg, e);\n                } else {\n                    logger.log(msg);\n                }\n            }\n        }\n","date":"2021-03-08 23:48:38","endLine":603,"groupId":"24017","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"logFailedDelivery","params":"(Exchangeexchange@Stringmessage@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ad/0ac3fac6faa4e9571bae42f6e3b63e517c5a82.src","preCode":"        private void logFailedDelivery(Exchange exchange, String message, Throwable e) {\n            if (logger == null) {\n                return;\n            }\n\n            if (e == null) {\n                e = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class);\n            }\n\n            if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                String msg = \"Rollback \" + ExchangeHelper.logIds(exchange);\n                Throwable cause = exchange.getException() != null\n                        ? exchange.getException() : exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class);\n                if (cause != null) {\n                    msg = msg + \" due: \" + cause.getMessage();\n                }\n\n                \r\n                if (redeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (redeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, false);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (logger.getLevel() == LoggingLevel.ERROR) {\n                    \r\n                    logger.log(msg, LoggingLevel.WARN);\n                } else {\n                    \r\n                    logger.log(msg);\n                }\n            } else {\n                String msg = message;\n                \r\n                if (redeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (redeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter,\n                            e != null && redeliveryPolicy.isLogStackTrace());\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (e != null && redeliveryPolicy.isLogStackTrace()) {\n                    logger.log(msg, e);\n                } else {\n                    logger.log(msg);\n                }\n            }\n        }\n","realPath":"core/camel-core-processor/src/main/java/org/apache/camel/processor/errorhandler/RedeliveryErrorHandler.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":544,"status":"B"},{"authorDate":"2021-03-08 23:48:38","commitOrder":1,"curCode":"        private void logFailedDelivery(\n                boolean shouldRedeliver, boolean newException, boolean handled, boolean continued, boolean isDeadLetterChannel,\n                Exchange exchange, String message, Throwable e) {\n            if (logger == null) {\n                return;\n            }\n\n            if (!exchange.isRollbackOnly() && !exchange.isRollbackOnlyLast()) {\n                if (newException && !currentRedeliveryPolicy.isLogNewException()) {\n                    \r\n                    return;\n                }\n\n                \r\n\n                if (!newException && handled && !currentRedeliveryPolicy.isLogHandled()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && continued && !currentRedeliveryPolicy.isLogContinued()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && shouldRedeliver && !currentRedeliveryPolicy.isLogRetryAttempted()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && shouldRedeliver) {\n                    if (currentRedeliveryPolicy.isLogRetryAttempted()) {\n                        if ((currentRedeliveryPolicy.getRetryAttemptedLogInterval() > 1)\n                                && (redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval()) != 0) {\n                            \r\n                            return;\n                        }\n                    } else {\n                        \r\n                        return;\n                    }\n                }\n\n                if (!newException && !shouldRedeliver && !currentRedeliveryPolicy.isLogExhausted()) {\n                    \r\n                    return;\n                }\n            }\n\n            LoggingLevel newLogLevel;\n            boolean logStackTrace;\n            if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                newLogLevel = currentRedeliveryPolicy.getRetriesExhaustedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogStackTrace();\n            } else if (shouldRedeliver) {\n                newLogLevel = currentRedeliveryPolicy.getRetryAttemptedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogRetryStackTrace();\n            } else {\n                newLogLevel = currentRedeliveryPolicy.getRetriesExhaustedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogStackTrace();\n            }\n            if (e == null) {\n                e = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class);\n            }\n\n            if (newException) {\n                \r\n                if (newLogLevel == LoggingLevel.ERROR) {\n                    newLogLevel = LoggingLevel.WARN;\n                }\n                String msg = message;\n                if (msg == null) {\n                    msg = \"New exception \" + ExchangeHelper.logIds(exchange);\n                    \r\n                    Throwable cause = e;\n                    if (cause != null) {\n                        msg = msg + \" due: \" + cause.getMessage();\n                    }\n                }\n\n                if (e != null && logStackTrace) {\n                    logger.log(msg, e, newLogLevel);\n                } else {\n                    logger.log(msg, newLogLevel);\n                }\n            } else if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                String msg = \"Rollback \" + ExchangeHelper.logIds(exchange);\n                Throwable cause = exchange.getException() != null\n                        ? exchange.getException() : exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class);\n                if (cause != null) {\n                    msg = msg + \" due: \" + cause.getMessage();\n                }\n\n                \r\n                if (!shouldRedeliver && currentRedeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (currentRedeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, false);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (newLogLevel == LoggingLevel.ERROR) {\n                    \r\n                    logger.log(msg, LoggingLevel.WARN);\n                } else {\n                    \r\n                    logger.log(msg, newLogLevel);\n                }\n            } else {\n                String msg = message;\n                \r\n                if (!shouldRedeliver && currentRedeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (currentRedeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace\n                            = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, e != null && logStackTrace);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (e != null && logStackTrace) {\n                    logger.log(msg, e, newLogLevel);\n                } else {\n                    logger.log(msg, newLogLevel);\n                }\n            }\n        }\n","date":"2021-03-08 23:48:38","endLine":1435,"groupId":"3583","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"logFailedDelivery","params":"(booleanshouldRedeliver@booleannewException@booleanhandled@booleancontinued@booleanisDeadLetterChannel@Exchangeexchange@Stringmessage@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ad/0ac3fac6faa4e9571bae42f6e3b63e517c5a82.src","preCode":"        private void logFailedDelivery(\n                boolean shouldRedeliver, boolean newException, boolean handled, boolean continued, boolean isDeadLetterChannel,\n                Exchange exchange, String message, Throwable e) {\n            if (logger == null) {\n                return;\n            }\n\n            if (!exchange.isRollbackOnly() && !exchange.isRollbackOnlyLast()) {\n                if (newException && !currentRedeliveryPolicy.isLogNewException()) {\n                    \r\n                    return;\n                }\n\n                \r\n\n                if (!newException && handled && !currentRedeliveryPolicy.isLogHandled()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && continued && !currentRedeliveryPolicy.isLogContinued()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && shouldRedeliver && !currentRedeliveryPolicy.isLogRetryAttempted()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && shouldRedeliver) {\n                    if (currentRedeliveryPolicy.isLogRetryAttempted()) {\n                        if ((currentRedeliveryPolicy.getRetryAttemptedLogInterval() > 1)\n                                && (redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval()) != 0) {\n                            \r\n                            return;\n                        }\n                    } else {\n                        \r\n                        return;\n                    }\n                }\n\n                if (!newException && !shouldRedeliver && !currentRedeliveryPolicy.isLogExhausted()) {\n                    \r\n                    return;\n                }\n            }\n\n            LoggingLevel newLogLevel;\n            boolean logStackTrace;\n            if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                newLogLevel = currentRedeliveryPolicy.getRetriesExhaustedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogStackTrace();\n            } else if (shouldRedeliver) {\n                newLogLevel = currentRedeliveryPolicy.getRetryAttemptedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogRetryStackTrace();\n            } else {\n                newLogLevel = currentRedeliveryPolicy.getRetriesExhaustedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogStackTrace();\n            }\n            if (e == null) {\n                e = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class);\n            }\n\n            if (newException) {\n                \r\n                if (newLogLevel == LoggingLevel.ERROR) {\n                    newLogLevel = LoggingLevel.WARN;\n                }\n                String msg = message;\n                if (msg == null) {\n                    msg = \"New exception \" + ExchangeHelper.logIds(exchange);\n                    \r\n                    Throwable cause = e;\n                    if (cause != null) {\n                        msg = msg + \" due: \" + cause.getMessage();\n                    }\n                }\n\n                if (e != null && logStackTrace) {\n                    logger.log(msg, e, newLogLevel);\n                } else {\n                    logger.log(msg, newLogLevel);\n                }\n            } else if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                String msg = \"Rollback \" + ExchangeHelper.logIds(exchange);\n                Throwable cause = exchange.getException() != null\n                        ? exchange.getException() : exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class);\n                if (cause != null) {\n                    msg = msg + \" due: \" + cause.getMessage();\n                }\n\n                \r\n                if (!shouldRedeliver && currentRedeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (currentRedeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, false);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (newLogLevel == LoggingLevel.ERROR) {\n                    \r\n                    logger.log(msg, LoggingLevel.WARN);\n                } else {\n                    \r\n                    logger.log(msg, newLogLevel);\n                }\n            } else {\n                String msg = message;\n                \r\n                if (!shouldRedeliver && currentRedeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (currentRedeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace\n                            = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, e != null && logStackTrace);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (e != null && logStackTrace) {\n                    logger.log(msg, e, newLogLevel);\n                } else {\n                    logger.log(msg, newLogLevel);\n                }\n            }\n        }\n","realPath":"core/camel-core-processor/src/main/java/org/apache/camel/processor/errorhandler/RedeliveryErrorHandler.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":1300,"status":"B"}],"commitId":"31ba781997e413bf4e5a57653f47c8b6af6271b3","commitMessage":"@@@CAMEL-16279: camel-core - Optimize core to reduce object allocations ? (#5183)\n\nCAMEL-16279: camel-core - Optimize core to reduce object allocations by pooloing reusable tasks in the routing engine.\n\nCAMEL-16314: camel-core - Some components does not work well with pooled exchanges","date":"2021-03-08 23:48:38","modifiedFileCount":"28","status":"B","submitter":"Claus Ibsen"},{"authorTime":"2021-03-12 16:08:55","codes":[{"authorDate":"2021-03-12 16:08:55","commitOrder":2,"curCode":"        private void logFailedDelivery(Exchange exchange, String message, Throwable e) {\n            if (logger == null) {\n                return;\n            }\n\n            if (e == null) {\n                e = exchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT, Exception.class);\n            }\n\n            if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                String msg = \"Rollback \" + ExchangeHelper.logIds(exchange);\n                Throwable cause = exchange.getException() != null\n                        ? exchange.getException() : exchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT, Throwable.class);\n                if (cause != null) {\n                    msg = msg + \" due: \" + cause.getMessage();\n                }\n\n                \r\n                if (redeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (redeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, false);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (logger.getLevel() == LoggingLevel.ERROR) {\n                    \r\n                    logger.log(msg, LoggingLevel.WARN);\n                } else {\n                    \r\n                    logger.log(msg);\n                }\n            } else {\n                String msg = message;\n                \r\n                if (redeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (redeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter,\n                            e != null && redeliveryPolicy.isLogStackTrace());\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (e != null && redeliveryPolicy.isLogStackTrace()) {\n                    logger.log(msg, e);\n                } else {\n                    logger.log(msg);\n                }\n            }\n        }\n","date":"2021-03-12 16:08:55","endLine":605,"groupId":"24017","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"logFailedDelivery","params":"(Exchangeexchange@Stringmessage@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/a3/b1e4c467bc0621b0dcec16107c61b9f601dbd0.src","preCode":"        private void logFailedDelivery(Exchange exchange, String message, Throwable e) {\n            if (logger == null) {\n                return;\n            }\n\n            if (e == null) {\n                e = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class);\n            }\n\n            if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                String msg = \"Rollback \" + ExchangeHelper.logIds(exchange);\n                Throwable cause = exchange.getException() != null\n                        ? exchange.getException() : exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class);\n                if (cause != null) {\n                    msg = msg + \" due: \" + cause.getMessage();\n                }\n\n                \r\n                if (redeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (redeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, false);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (logger.getLevel() == LoggingLevel.ERROR) {\n                    \r\n                    logger.log(msg, LoggingLevel.WARN);\n                } else {\n                    \r\n                    logger.log(msg);\n                }\n            } else {\n                String msg = message;\n                \r\n                if (redeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (redeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter,\n                            e != null && redeliveryPolicy.isLogStackTrace());\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (e != null && redeliveryPolicy.isLogStackTrace()) {\n                    logger.log(msg, e);\n                } else {\n                    logger.log(msg);\n                }\n            }\n        }\n","realPath":"core/camel-core-processor/src/main/java/org/apache/camel/processor/errorhandler/RedeliveryErrorHandler.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":546,"status":"M"},{"authorDate":"2021-03-12 16:08:55","commitOrder":2,"curCode":"        private void logFailedDelivery(\n                boolean shouldRedeliver, boolean newException, boolean handled, boolean continued, boolean isDeadLetterChannel,\n                Exchange exchange, String message, Throwable e) {\n            if (logger == null) {\n                return;\n            }\n\n            if (!exchange.isRollbackOnly() && !exchange.isRollbackOnlyLast()) {\n                if (newException && !currentRedeliveryPolicy.isLogNewException()) {\n                    \r\n                    return;\n                }\n\n                \r\n\n                if (!newException && handled && !currentRedeliveryPolicy.isLogHandled()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && continued && !currentRedeliveryPolicy.isLogContinued()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && shouldRedeliver && !currentRedeliveryPolicy.isLogRetryAttempted()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && shouldRedeliver) {\n                    if (currentRedeliveryPolicy.isLogRetryAttempted()) {\n                        if ((currentRedeliveryPolicy.getRetryAttemptedLogInterval() > 1)\n                                && (redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval()) != 0) {\n                            \r\n                            return;\n                        }\n                    } else {\n                        \r\n                        return;\n                    }\n                }\n\n                if (!newException && !shouldRedeliver && !currentRedeliveryPolicy.isLogExhausted()) {\n                    \r\n                    return;\n                }\n            }\n\n            LoggingLevel newLogLevel;\n            boolean logStackTrace;\n            if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                newLogLevel = currentRedeliveryPolicy.getRetriesExhaustedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogStackTrace();\n            } else if (shouldRedeliver) {\n                newLogLevel = currentRedeliveryPolicy.getRetryAttemptedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogRetryStackTrace();\n            } else {\n                newLogLevel = currentRedeliveryPolicy.getRetriesExhaustedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogStackTrace();\n            }\n            if (e == null) {\n                e = exchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT, Exception.class);\n            }\n\n            if (newException) {\n                \r\n                if (newLogLevel == LoggingLevel.ERROR) {\n                    newLogLevel = LoggingLevel.WARN;\n                }\n                String msg = message;\n                if (msg == null) {\n                    msg = \"New exception \" + ExchangeHelper.logIds(exchange);\n                    \r\n                    Throwable cause = e;\n                    if (cause != null) {\n                        msg = msg + \" due: \" + cause.getMessage();\n                    }\n                }\n\n                if (e != null && logStackTrace) {\n                    logger.log(msg, e, newLogLevel);\n                } else {\n                    logger.log(msg, newLogLevel);\n                }\n            } else if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                String msg = \"Rollback \" + ExchangeHelper.logIds(exchange);\n                Throwable cause = exchange.getException() != null\n                        ? exchange.getException() : exchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT, Throwable.class);\n                if (cause != null) {\n                    msg = msg + \" due: \" + cause.getMessage();\n                }\n\n                \r\n                if (!shouldRedeliver && currentRedeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (currentRedeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, false);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (newLogLevel == LoggingLevel.ERROR) {\n                    \r\n                    logger.log(msg, LoggingLevel.WARN);\n                } else {\n                    \r\n                    logger.log(msg, newLogLevel);\n                }\n            } else {\n                String msg = message;\n                \r\n                if (!shouldRedeliver && currentRedeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (currentRedeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace\n                            = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, e != null && logStackTrace);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (e != null && logStackTrace) {\n                    logger.log(msg, e, newLogLevel);\n                } else {\n                    logger.log(msg, newLogLevel);\n                }\n            }\n        }\n","date":"2021-03-12 16:08:55","endLine":1439,"groupId":"43502","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"logFailedDelivery","params":"(booleanshouldRedeliver@booleannewException@booleanhandled@booleancontinued@booleanisDeadLetterChannel@Exchangeexchange@Stringmessage@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/a3/b1e4c467bc0621b0dcec16107c61b9f601dbd0.src","preCode":"        private void logFailedDelivery(\n                boolean shouldRedeliver, boolean newException, boolean handled, boolean continued, boolean isDeadLetterChannel,\n                Exchange exchange, String message, Throwable e) {\n            if (logger == null) {\n                return;\n            }\n\n            if (!exchange.isRollbackOnly() && !exchange.isRollbackOnlyLast()) {\n                if (newException && !currentRedeliveryPolicy.isLogNewException()) {\n                    \r\n                    return;\n                }\n\n                \r\n\n                if (!newException && handled && !currentRedeliveryPolicy.isLogHandled()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && continued && !currentRedeliveryPolicy.isLogContinued()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && shouldRedeliver && !currentRedeliveryPolicy.isLogRetryAttempted()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && shouldRedeliver) {\n                    if (currentRedeliveryPolicy.isLogRetryAttempted()) {\n                        if ((currentRedeliveryPolicy.getRetryAttemptedLogInterval() > 1)\n                                && (redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval()) != 0) {\n                            \r\n                            return;\n                        }\n                    } else {\n                        \r\n                        return;\n                    }\n                }\n\n                if (!newException && !shouldRedeliver && !currentRedeliveryPolicy.isLogExhausted()) {\n                    \r\n                    return;\n                }\n            }\n\n            LoggingLevel newLogLevel;\n            boolean logStackTrace;\n            if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                newLogLevel = currentRedeliveryPolicy.getRetriesExhaustedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogStackTrace();\n            } else if (shouldRedeliver) {\n                newLogLevel = currentRedeliveryPolicy.getRetryAttemptedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogRetryStackTrace();\n            } else {\n                newLogLevel = currentRedeliveryPolicy.getRetriesExhaustedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogStackTrace();\n            }\n            if (e == null) {\n                e = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class);\n            }\n\n            if (newException) {\n                \r\n                if (newLogLevel == LoggingLevel.ERROR) {\n                    newLogLevel = LoggingLevel.WARN;\n                }\n                String msg = message;\n                if (msg == null) {\n                    msg = \"New exception \" + ExchangeHelper.logIds(exchange);\n                    \r\n                    Throwable cause = e;\n                    if (cause != null) {\n                        msg = msg + \" due: \" + cause.getMessage();\n                    }\n                }\n\n                if (e != null && logStackTrace) {\n                    logger.log(msg, e, newLogLevel);\n                } else {\n                    logger.log(msg, newLogLevel);\n                }\n            } else if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                String msg = \"Rollback \" + ExchangeHelper.logIds(exchange);\n                Throwable cause = exchange.getException() != null\n                        ? exchange.getException() : exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class);\n                if (cause != null) {\n                    msg = msg + \" due: \" + cause.getMessage();\n                }\n\n                \r\n                if (!shouldRedeliver && currentRedeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (currentRedeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, false);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (newLogLevel == LoggingLevel.ERROR) {\n                    \r\n                    logger.log(msg, LoggingLevel.WARN);\n                } else {\n                    \r\n                    logger.log(msg, newLogLevel);\n                }\n            } else {\n                String msg = message;\n                \r\n                if (!shouldRedeliver && currentRedeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (currentRedeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace\n                            = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, e != null && logStackTrace);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (e != null && logStackTrace) {\n                    logger.log(msg, e, newLogLevel);\n                } else {\n                    logger.log(msg, newLogLevel);\n                }\n            }\n        }\n","realPath":"core/camel-core-processor/src/main/java/org/apache/camel/processor/errorhandler/RedeliveryErrorHandler.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":1304,"status":"M"}],"commitId":"e37cffe2d94ceb0828b5696fd1e1548de2bca8a3","commitMessage":"@@@CAMEL-16326: camel-core - Optimize usage of exchanage properties for state in routing engine.\n","date":"2021-03-12 16:08:55","modifiedFileCount":"133","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2021-05-04 16:50:08","codes":[{"authorDate":"2021-03-12 16:08:55","commitOrder":3,"curCode":"        private void logFailedDelivery(Exchange exchange, String message, Throwable e) {\n            if (logger == null) {\n                return;\n            }\n\n            if (e == null) {\n                e = exchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT, Exception.class);\n            }\n\n            if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                String msg = \"Rollback \" + ExchangeHelper.logIds(exchange);\n                Throwable cause = exchange.getException() != null\n                        ? exchange.getException() : exchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT, Throwable.class);\n                if (cause != null) {\n                    msg = msg + \" due: \" + cause.getMessage();\n                }\n\n                \r\n                if (redeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (redeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, false);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (logger.getLevel() == LoggingLevel.ERROR) {\n                    \r\n                    logger.log(msg, LoggingLevel.WARN);\n                } else {\n                    \r\n                    logger.log(msg);\n                }\n            } else {\n                String msg = message;\n                \r\n                if (redeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (redeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter,\n                            e != null && redeliveryPolicy.isLogStackTrace());\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (e != null && redeliveryPolicy.isLogStackTrace()) {\n                    logger.log(msg, e);\n                } else {\n                    logger.log(msg);\n                }\n            }\n        }\n","date":"2021-03-12 16:08:55","endLine":605,"groupId":"111767","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"logFailedDelivery","params":"(Exchangeexchange@Stringmessage@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/a3/b1e4c467bc0621b0dcec16107c61b9f601dbd0.src","preCode":"        private void logFailedDelivery(Exchange exchange, String message, Throwable e) {\n            if (logger == null) {\n                return;\n            }\n\n            if (e == null) {\n                e = exchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT, Exception.class);\n            }\n\n            if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                String msg = \"Rollback \" + ExchangeHelper.logIds(exchange);\n                Throwable cause = exchange.getException() != null\n                        ? exchange.getException() : exchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT, Throwable.class);\n                if (cause != null) {\n                    msg = msg + \" due: \" + cause.getMessage();\n                }\n\n                \r\n                if (redeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (redeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, false);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (logger.getLevel() == LoggingLevel.ERROR) {\n                    \r\n                    logger.log(msg, LoggingLevel.WARN);\n                } else {\n                    \r\n                    logger.log(msg);\n                }\n            } else {\n                String msg = message;\n                \r\n                if (redeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (redeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter,\n                            e != null && redeliveryPolicy.isLogStackTrace());\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (e != null && redeliveryPolicy.isLogStackTrace()) {\n                    logger.log(msg, e);\n                } else {\n                    logger.log(msg);\n                }\n            }\n        }\n","realPath":"core/camel-core-processor/src/main/java/org/apache/camel/processor/errorhandler/RedeliveryErrorHandler.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":546,"status":"N"},{"authorDate":"2021-05-04 16:50:08","commitOrder":3,"curCode":"        private void logFailedDelivery(\n                boolean shouldRedeliver, boolean newException, boolean handled, boolean continued, boolean isDeadLetterChannel,\n                Exchange exchange, String message, Throwable e) {\n            if (logger == null) {\n                return;\n            }\n\n            if (!exchange.isRollbackOnly() && !exchange.isRollbackOnlyLast()) {\n                if (newException && !currentRedeliveryPolicy.isLogNewException()) {\n                    \r\n                    return;\n                }\n\n                \r\n\n                if (!newException && handled && !currentRedeliveryPolicy.isLogHandled()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && continued && !currentRedeliveryPolicy.isLogContinued()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && shouldRedeliver && !currentRedeliveryPolicy.isLogRetryAttempted()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && shouldRedeliver) {\n                    if (currentRedeliveryPolicy.isLogRetryAttempted()) {\n                        if (currentRedeliveryPolicy.getRetryAttemptedLogInterval() > 1\n                                && redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval() != 0) {\n                            \r\n                            return;\n                        }\n                    } else {\n                        \r\n                        return;\n                    }\n                }\n\n                if (!newException && !shouldRedeliver && !currentRedeliveryPolicy.isLogExhausted()) {\n                    \r\n                    return;\n                }\n            }\n\n            LoggingLevel newLogLevel;\n            boolean logStackTrace;\n            if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                newLogLevel = currentRedeliveryPolicy.getRetriesExhaustedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogStackTrace();\n            } else if (shouldRedeliver) {\n                newLogLevel = currentRedeliveryPolicy.getRetryAttemptedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogRetryStackTrace();\n            } else {\n                newLogLevel = currentRedeliveryPolicy.getRetriesExhaustedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogStackTrace();\n            }\n            if (e == null) {\n                e = exchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT, Exception.class);\n            }\n\n            if (newException) {\n                \r\n                if (newLogLevel == LoggingLevel.ERROR) {\n                    newLogLevel = LoggingLevel.WARN;\n                }\n                String msg = message;\n                if (msg == null) {\n                    msg = \"New exception \" + ExchangeHelper.logIds(exchange);\n                    \r\n                    Throwable cause = e;\n                    if (cause != null) {\n                        msg = msg + \" due: \" + cause.getMessage();\n                    }\n                }\n\n                if (e != null && logStackTrace) {\n                    logger.log(msg, e, newLogLevel);\n                } else {\n                    logger.log(msg, newLogLevel);\n                }\n            } else if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                String msg = \"Rollback \" + ExchangeHelper.logIds(exchange);\n                Throwable cause = exchange.getException() != null\n                        ? exchange.getException() : exchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT, Throwable.class);\n                if (cause != null) {\n                    msg = msg + \" due: \" + cause.getMessage();\n                }\n\n                \r\n                if (!shouldRedeliver && currentRedeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (currentRedeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, false);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (newLogLevel == LoggingLevel.ERROR) {\n                    \r\n                    logger.log(msg, LoggingLevel.WARN);\n                } else {\n                    \r\n                    logger.log(msg, newLogLevel);\n                }\n            } else {\n                String msg = message;\n                \r\n                if (!shouldRedeliver && currentRedeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (currentRedeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace\n                            = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, e != null && logStackTrace);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (e != null && logStackTrace) {\n                    logger.log(msg, e, newLogLevel);\n                } else {\n                    logger.log(msg, newLogLevel);\n                }\n            }\n        }\n","date":"2021-05-04 16:50:12","endLine":1463,"groupId":"111767","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"logFailedDelivery","params":"(booleanshouldRedeliver@booleannewException@booleanhandled@booleancontinued@booleanisDeadLetterChannel@Exchangeexchange@Stringmessage@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/7d/e06ee5d37bf66cb70b9749fd5f3f0c4d09be10.src","preCode":"        private void logFailedDelivery(\n                boolean shouldRedeliver, boolean newException, boolean handled, boolean continued, boolean isDeadLetterChannel,\n                Exchange exchange, String message, Throwable e) {\n            if (logger == null) {\n                return;\n            }\n\n            if (!exchange.isRollbackOnly() && !exchange.isRollbackOnlyLast()) {\n                if (newException && !currentRedeliveryPolicy.isLogNewException()) {\n                    \r\n                    return;\n                }\n\n                \r\n\n                if (!newException && handled && !currentRedeliveryPolicy.isLogHandled()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && continued && !currentRedeliveryPolicy.isLogContinued()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && shouldRedeliver && !currentRedeliveryPolicy.isLogRetryAttempted()) {\n                    \r\n                    return;\n                }\n\n                if (!newException && shouldRedeliver) {\n                    if (currentRedeliveryPolicy.isLogRetryAttempted()) {\n                        if ((currentRedeliveryPolicy.getRetryAttemptedLogInterval() > 1)\n                                && (redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval()) != 0) {\n                            \r\n                            return;\n                        }\n                    } else {\n                        \r\n                        return;\n                    }\n                }\n\n                if (!newException && !shouldRedeliver && !currentRedeliveryPolicy.isLogExhausted()) {\n                    \r\n                    return;\n                }\n            }\n\n            LoggingLevel newLogLevel;\n            boolean logStackTrace;\n            if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                newLogLevel = currentRedeliveryPolicy.getRetriesExhaustedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogStackTrace();\n            } else if (shouldRedeliver) {\n                newLogLevel = currentRedeliveryPolicy.getRetryAttemptedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogRetryStackTrace();\n            } else {\n                newLogLevel = currentRedeliveryPolicy.getRetriesExhaustedLogLevel();\n                logStackTrace = currentRedeliveryPolicy.isLogStackTrace();\n            }\n            if (e == null) {\n                e = exchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT, Exception.class);\n            }\n\n            if (newException) {\n                \r\n                if (newLogLevel == LoggingLevel.ERROR) {\n                    newLogLevel = LoggingLevel.WARN;\n                }\n                String msg = message;\n                if (msg == null) {\n                    msg = \"New exception \" + ExchangeHelper.logIds(exchange);\n                    \r\n                    Throwable cause = e;\n                    if (cause != null) {\n                        msg = msg + \" due: \" + cause.getMessage();\n                    }\n                }\n\n                if (e != null && logStackTrace) {\n                    logger.log(msg, e, newLogLevel);\n                } else {\n                    logger.log(msg, newLogLevel);\n                }\n            } else if (exchange.isRollbackOnly() || exchange.isRollbackOnlyLast()) {\n                String msg = \"Rollback \" + ExchangeHelper.logIds(exchange);\n                Throwable cause = exchange.getException() != null\n                        ? exchange.getException() : exchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT, Throwable.class);\n                if (cause != null) {\n                    msg = msg + \" due: \" + cause.getMessage();\n                }\n\n                \r\n                if (!shouldRedeliver && currentRedeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (currentRedeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, false);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (newLogLevel == LoggingLevel.ERROR) {\n                    \r\n                    logger.log(msg, LoggingLevel.WARN);\n                } else {\n                    \r\n                    logger.log(msg, newLogLevel);\n                }\n            } else {\n                String msg = message;\n                \r\n                if (!shouldRedeliver && currentRedeliveryPolicy.isLogExhaustedMessageHistory()) {\n                    \r\n                    ExchangeFormatter formatter = customExchangeFormatter\n                            ? exchangeFormatter\n                            : (currentRedeliveryPolicy.isLogExhaustedMessageBody() || camelContext.isLogExhaustedMessageBody()\n                                    ? exchangeFormatter : null);\n                    String routeStackTrace\n                            = MessageHelper.dumpMessageHistoryStacktrace(exchange, formatter, e != null && logStackTrace);\n                    if (routeStackTrace != null) {\n                        msg = msg + \"\\n\" + routeStackTrace;\n                    }\n                }\n\n                if (e != null && logStackTrace) {\n                    logger.log(msg, e, newLogLevel);\n                } else {\n                    logger.log(msg, newLogLevel);\n                }\n            }\n        }\n","realPath":"core/camel-core-processor/src/main/java/org/apache/camel/processor/errorhandler/RedeliveryErrorHandler.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":1328,"status":"M"}],"commitId":"a928f30615d92df96af62970ffcc6426b662ef40","commitMessage":"@@@Fixed CS\n","date":"2021-05-04 16:50:12","modifiedFileCount":"26","status":"M","submitter":"Claus Ibsen"}]
