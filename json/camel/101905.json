[{"authorTime":"2015-07-18 17:06:56","codes":[{"authorDate":"2015-07-18 17:07:15","commitOrder":2,"curCode":"\tprotected int poll() throws Exception {\n\t\tint count = 0;\n\t\tList<Ref> call = getGit().branchList().call();\n        for (Ref ref : call) {\n        \tif (!used.contains(ref.getName())) {\n            Exchange e = getEndpoint().createExchange();\n            e.getOut().setBody(ref);\n            getProcessor().process(e);\n            used.add(ref.getName());\n            count++;\n        \t}\n        }\n        return count;\n\t}\n","date":"2015-07-18 17:08:16","endLine":50,"groupId":"42395","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"poll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/d9/06d7a5ce3934a7973e86999038bfd33b6f01ea.src","preCode":"\tprotected int poll() throws Exception {\n\t\tint count = 0;\n\t\tList<Ref> call = getGit().branchList().call();\n        for (Ref ref : call) {\n        \tif (!used.contains(ref.getName())) {\n            Exchange e = getEndpoint().createExchange();\n            e.getOut().setBody(ref);\n            getProcessor().process(e);\n            used.add(ref.getName());\n            count++;\n        \t}\n        }\n        return count;\n\t}\n","realPath":"components/camel-git/src/main/java/org/apache/camel/component/git/consumer/GitBranchConsumer.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"},{"authorDate":"2015-07-18 17:06:56","commitOrder":2,"curCode":"\tprotected int poll() throws Exception {\n\t\tint count = 0;\n\t\tList<Ref> call = getGit().tagList().call();\n        for (Ref ref : call) {\n        \tif (!used.contains(ref.getName())) {\n            Exchange e = getEndpoint().createExchange();\n            e.getOut().setBody(ref);\n            getProcessor().process(e);\n            used.add(ref.getName());\n            count++;\n        \t}\n        }\n        return count;\n\t}\n","date":"2015-07-18 17:08:15","endLine":50,"groupId":"42395","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"poll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ca/063f3345a8d5944b333514e73f03f74126adb6.src","preCode":"\tprotected int poll() throws Exception {\n\t\tint count = 0;\n\t\tList<Ref> call = getGit().tagList().call();\n        for (Ref ref : call) {\n        \tif (!used.contains(ref.getName())) {\n            Exchange e = getEndpoint().createExchange();\n            e.getOut().setBody(ref);\n            getProcessor().process(e);\n            used.add(ref.getName());\n            count++;\n        \t}\n        }\n        return count;\n\t}\n","realPath":"components/camel-git/src/main/java/org/apache/camel/component/git/consumer/GitTagConsumer.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"NB"}],"commitId":"2cbeee721769e385743b4595ff796d0c293869ae","commitMessage":"@@@CAMEL-7982: camel-git - A generic git component.  add branches consumer\n","date":"2015-07-18 17:08:16","modifiedFileCount":"3","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2015-07-18 17:07:47","codes":[{"authorDate":"2015-07-18 17:07:47","commitOrder":3,"curCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().branchList().call();\n        for (Ref ref : call) {\n            if (!branchesConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getOut().setBody(ref);\n                getProcessor().process(e);\n                branchesConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","date":"2015-07-18 17:08:17","endLine":49,"groupId":"42395","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"poll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/2e/f41f0a8fd52e8d3909f629e3771b73c96bafbd.src","preCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().branchList().call();\n        for (Ref ref : call) {\n            if (!used.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getOut().setBody(ref);\n                getProcessor().process(e);\n                used.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","realPath":"components/camel-git/src/main/java/org/apache/camel/component/git/consumer/GitBranchConsumer.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2015-07-18 17:07:47","commitOrder":3,"curCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().tagList().call();\n        for (Ref ref : call) {\n            if (!tagsConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getOut().setBody(ref);\n                getProcessor().process(e);\n                tagsConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","date":"2015-07-18 17:08:17","endLine":49,"groupId":"42395","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"poll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ce/8fec98c89a1d954d5cc4d862b1e3f9561afa40.src","preCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().tagList().call();\n        for (Ref ref : call) {\n            if (!used.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getOut().setBody(ref);\n                getProcessor().process(e);\n                used.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","realPath":"components/camel-git/src/main/java/org/apache/camel/component/git/consumer/GitTagConsumer.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"46d61b8c562d03a8c9039f26963eee6e2d4c2d6a","commitMessage":"@@@Camel-7982: camel-git.  latest change to code\n","date":"2015-07-18 17:08:17","modifiedFileCount":"3","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2015-07-18 17:07:47","codes":[{"authorDate":"2020-11-05 21:29:02","commitOrder":4,"curCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().branchList().setListMode(ListMode.ALL).call();\n        for (Ref ref : call) {\n            if (!branchesConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getOut().setBody(ref);\n                getProcessor().process(e);\n                branchesConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","date":"2020-11-05 21:29:02","endLine":50,"groupId":"42395","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"poll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/72/9ee023ee20e21d3b256483eeb70d7aa94dc84a.src","preCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().branchList().call();\n        for (Ref ref : call) {\n            if (!branchesConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getOut().setBody(ref);\n                getProcessor().process(e);\n                branchesConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","realPath":"components/camel-git/src/main/java/org/apache/camel/component/git/consumer/GitBranchConsumer.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2015-07-18 17:07:47","commitOrder":4,"curCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().tagList().call();\n        for (Ref ref : call) {\n            if (!tagsConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getOut().setBody(ref);\n                getProcessor().process(e);\n                tagsConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","date":"2015-07-18 17:08:17","endLine":49,"groupId":"42395","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"poll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ce/8fec98c89a1d954d5cc4d862b1e3f9561afa40.src","preCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().tagList().call();\n        for (Ref ref : call) {\n            if (!tagsConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getOut().setBody(ref);\n                getProcessor().process(e);\n                tagsConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","realPath":"components/camel-git/src/main/java/org/apache/camel/component/git/consumer/GitTagConsumer.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"N"}],"commitId":"72e23c977ec98f3d5c29b36d5354403d5b31e417","commitMessage":"@@@Camel-Git Branches Consumer: Added the ListMode.ALL to the call\n","date":"2020-11-05 21:29:02","modifiedFileCount":"1","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2015-07-18 17:07:47","codes":[{"authorDate":"2020-11-05 21:29:51","commitOrder":5,"curCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().branchList().setListMode(ListMode.ALL).call();\n        for (Ref ref : call) {\n            if (!branchesConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getMessage().setBody(ref);\n                getProcessor().process(e);\n                branchesConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","date":"2020-11-05 21:29:51","endLine":50,"groupId":"3788","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"poll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/e0/6a839ab6d4a1104b0bb35d3203fa73bd1dee8d.src","preCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().branchList().setListMode(ListMode.ALL).call();\n        for (Ref ref : call) {\n            if (!branchesConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getOut().setBody(ref);\n                getProcessor().process(e);\n                branchesConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","realPath":"components/camel-git/src/main/java/org/apache/camel/component/git/consumer/GitBranchConsumer.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2015-07-18 17:07:47","commitOrder":5,"curCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().tagList().call();\n        for (Ref ref : call) {\n            if (!tagsConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getOut().setBody(ref);\n                getProcessor().process(e);\n                tagsConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","date":"2015-07-18 17:08:17","endLine":49,"groupId":"42395","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"poll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ce/8fec98c89a1d954d5cc4d862b1e3f9561afa40.src","preCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().tagList().call();\n        for (Ref ref : call) {\n            if (!tagsConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getOut().setBody(ref);\n                getProcessor().process(e);\n                tagsConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","realPath":"components/camel-git/src/main/java/org/apache/camel/component/git/consumer/GitTagConsumer.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"N"}],"commitId":"05fe7af6209b23d00d8fdcd1d3d26e484d95d322","commitMessage":"@@@Camel-Git Branch Consumer: Remove getOut call and use GetMessage\n","date":"2020-11-05 21:29:51","modifiedFileCount":"1","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2015-07-18 17:07:47","codes":[{"authorDate":"2020-11-10 22:18:41","commitOrder":6,"curCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().branchList().setListMode(ListMode.ALL).call();\n        for (Ref ref : call) {\n            if (!branchesConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getMessage().setBody(ref.getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_LEAF, ref.getLeaf().getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_OBJECT_ID, ref.getObjectId().getName());\n                getProcessor().process(e);\n                branchesConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","date":"2020-11-10 22:18:41","endLine":53,"groupId":"3788","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"poll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/49/d94561e460042e2741db78c39892125d7d91cd.src","preCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().branchList().setListMode(ListMode.ALL).call();\n        for (Ref ref : call) {\n            if (!branchesConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getMessage().setBody(ref);\n                getProcessor().process(e);\n                branchesConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","realPath":"components/camel-git/src/main/java/org/apache/camel/component/git/consumer/GitBranchConsumer.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2015-07-18 17:07:47","commitOrder":6,"curCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().tagList().call();\n        for (Ref ref : call) {\n            if (!tagsConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getOut().setBody(ref);\n                getProcessor().process(e);\n                tagsConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","date":"2015-07-18 17:08:17","endLine":49,"groupId":"42395","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"poll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ce/8fec98c89a1d954d5cc4d862b1e3f9561afa40.src","preCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().tagList().call();\n        for (Ref ref : call) {\n            if (!tagsConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getOut().setBody(ref);\n                getProcessor().process(e);\n                tagsConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","realPath":"components/camel-git/src/main/java/org/apache/camel/component/git/consumer/GitTagConsumer.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"N"}],"commitId":"7b148e6ee23cd8fbed5e2f752ca3e3f9317020da","commitMessage":"@@@Camel-Git: Better structure for consumer returned object - Branch consumer\n","date":"2020-11-10 22:18:41","modifiedFileCount":"3","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2020-11-11 21:22:36","codes":[{"authorDate":"2020-11-10 22:18:41","commitOrder":7,"curCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().branchList().setListMode(ListMode.ALL).call();\n        for (Ref ref : call) {\n            if (!branchesConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getMessage().setBody(ref.getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_LEAF, ref.getLeaf().getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_OBJECT_ID, ref.getObjectId().getName());\n                getProcessor().process(e);\n                branchesConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","date":"2020-11-10 22:18:41","endLine":53,"groupId":"3788","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"poll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/49/d94561e460042e2741db78c39892125d7d91cd.src","preCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().branchList().setListMode(ListMode.ALL).call();\n        for (Ref ref : call) {\n            if (!branchesConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getMessage().setBody(ref.getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_LEAF, ref.getLeaf().getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_OBJECT_ID, ref.getObjectId().getName());\n                getProcessor().process(e);\n                branchesConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","realPath":"components/camel-git/src/main/java/org/apache/camel/component/git/consumer/GitBranchConsumer.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2020-11-11 21:22:36","commitOrder":7,"curCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().tagList().call();\n        for (Ref ref : call) {\n            if (!tagsConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getMessage().setBody(ref.getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_LEAF, ref.getLeaf().getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_OBJECT_ID, ref.getObjectId().getName());\n                getProcessor().process(e);\n                tagsConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","date":"2020-11-11 21:22:36","endLine":52,"groupId":"3788","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"poll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/31/ea39a01c57a60cbdcc58503f5d2cb907bd00cb.src","preCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().tagList().call();\n        for (Ref ref : call) {\n            if (!tagsConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getOut().setBody(ref);\n                getProcessor().process(e);\n                tagsConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","realPath":"components/camel-git/src/main/java/org/apache/camel/component/git/consumer/GitTagConsumer.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"a3da7b578c9a02fc2527336bdcf154b3c49da889","commitMessage":"@@@CAMEL-15812 - Camel-Git: Better structure for consumer returned object - Tag consumer\n","date":"2020-11-11 21:22:36","modifiedFileCount":"2","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2021-02-25 14:20:17","codes":[{"authorDate":"2021-02-25 14:20:17","commitOrder":8,"curCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().branchList().setListMode(ListMode.ALL).call();\n        for (Ref ref : call) {\n            if (!branchesConsumed.contains(ref.getName())) {\n                Exchange e = createExchange(true);\n                e.getMessage().setBody(ref.getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_LEAF, ref.getLeaf().getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_OBJECT_ID, ref.getObjectId().getName());\n                getProcessor().process(e);\n                branchesConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","date":"2021-02-25 14:20:17","endLine":53,"groupId":"101905","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"poll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/6d/c075d43acefcf2028e1ffe1b7d96b0341a4634.src","preCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().branchList().setListMode(ListMode.ALL).call();\n        for (Ref ref : call) {\n            if (!branchesConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getMessage().setBody(ref.getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_LEAF, ref.getLeaf().getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_OBJECT_ID, ref.getObjectId().getName());\n                getProcessor().process(e);\n                branchesConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","realPath":"components/camel-git/src/main/java/org/apache/camel/component/git/consumer/GitBranchConsumer.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2021-02-25 14:20:17","commitOrder":8,"curCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().tagList().call();\n        for (Ref ref : call) {\n            if (!tagsConsumed.contains(ref.getName())) {\n                Exchange e = createExchange(true);\n                e.getMessage().setBody(ref.getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_LEAF, ref.getLeaf().getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_OBJECT_ID, ref.getObjectId().getName());\n                getProcessor().process(e);\n                tagsConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","date":"2021-02-25 14:20:17","endLine":52,"groupId":"101905","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"poll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/70/52764487eb07e8ac6d9fa6e5c9e6d00f5245de.src","preCode":"    protected int poll() throws Exception {\n        int count = 0;\n        List<Ref> call = getGit().tagList().call();\n        for (Ref ref : call) {\n            if (!tagsConsumed.contains(ref.getName())) {\n                Exchange e = getEndpoint().createExchange();\n                e.getMessage().setBody(ref.getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_LEAF, ref.getLeaf().getName());\n                e.getMessage().setHeader(GitConstants.GIT_BRANCH_OBJECT_ID, ref.getObjectId().getName());\n                getProcessor().process(e);\n                tagsConsumed.add(ref.getName());\n                count++;\n            }\n        }\n        return count;\n    }\n","realPath":"components/camel-git/src/main/java/org/apache/camel/component/git/consumer/GitTagConsumer.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"22c7af563c067fc34c141da3de1338d7e37c3525","commitMessage":"@@@CAMEL-16222: camel-core - ExchangeFactory SPI to allow to use exchange pooling (#5122)\n\nCAMEL-16222: camel-core - ExchangeFactory SPI to allow to use exchange pooling","date":"2021-02-25 14:20:17","modifiedFileCount":"284","status":"M","submitter":"Claus Ibsen"}]
