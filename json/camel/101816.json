[{"authorTime":"2015-07-18 17:06:56","codes":[{"authorDate":"2015-07-18 17:06:56","commitOrder":1,"curCode":"    public void commitBranchTest() throws Exception {\n\n    \tRepository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(BRANCH_TEST).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        template.send(\"direct:commit-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE_BRANCH);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n        \tif (count == 0) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE_BRANCH);\n        \tif (count == 1) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","date":"2015-07-18 17:08:15","endLine":220,"groupId":"18919","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"commitBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/5a/9c7f30badbd4736b5a092cb640d96255acc28c.src","preCode":"    public void commitBranchTest() throws Exception {\n\n    \tRepository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(BRANCH_TEST).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        template.send(\"direct:commit-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE_BRANCH);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n        \tif (count == 0) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE_BRANCH);\n        \tif (count == 1) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"B"},{"authorDate":"2015-07-18 17:06:56","commitOrder":1,"curCode":"    public void removeFileBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(BRANCH_TEST).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        File fileToAdd1 = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE_ALL);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE_ALL);\n            if (count == 1) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        template.send(\"direct:remove-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        \n        git = new Git(repository);\n        git.checkout().setCreateBranch(false).setName(BRANCH_TEST).call();\n        \n        status = git.status().call();\n        assertFalse(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        repository.close();\n    }\n","date":"2015-07-18 17:08:15","endLine":400,"groupId":"18917","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"removeFileBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/5a/9c7f30badbd4736b5a092cb640d96255acc28c.src","preCode":"    public void removeFileBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(BRANCH_TEST).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        File fileToAdd1 = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE_ALL);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE_ALL);\n            if (count == 1) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        template.send(\"direct:remove-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        \n        git = new Git(repository);\n        git.checkout().setCreateBranch(false).setName(BRANCH_TEST).call();\n        \n        status = git.status().call();\n        assertFalse(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"B"}],"commitId":"828dc8b3bd49352398310fa8a42c9420e28102cf","commitMessage":"@@@CAMEL-7982: camel-git - A generic git component.  add tag consumer\n","date":"2015-07-18 17:08:15","modifiedFileCount":"4","status":"B","submitter":"Andrea Cosentino"},{"authorTime":"2015-07-18 17:07:19","codes":[{"authorDate":"2015-07-18 17:07:19","commitOrder":2,"curCode":"    public void commitBranchTest() throws Exception {\n\n    \tRepository repository = getTestRepository();\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(branchTest).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        template.send(\"direct:commit-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageBranch);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n        \tif (count == 0) assertEquals(rev.getShortMessage(), commitMessageBranch);\n        \tif (count == 1) assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","date":"2015-07-18 17:08:16","endLine":215,"groupId":"18919","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"commitBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/21/2be8f63c986a46e6ea31ca0bfcf71bd1194e96.src","preCode":"    public void commitBranchTest() throws Exception {\n\n    \tRepository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(BRANCH_TEST).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        template.send(\"direct:commit-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE_BRANCH);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n        \tif (count == 0) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE_BRANCH);\n        \tif (count == 1) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2015-07-18 17:07:19","commitOrder":2,"curCode":"    public void removeFileBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(branchTest).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n        \n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) assertEquals(rev.getShortMessage(), commitMessageAll);\n            if (count == 1) assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        template.send(\"direct:remove-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        \n        git = new Git(repository);\n        git.checkout().setCreateBranch(false).setName(branchTest).call();\n        \n        status = git.status().call();\n        assertFalse(status.getAdded().contains(filenameToAdd));\n        \n        repository.close();\n    }\n","date":"2015-07-18 17:08:16","endLine":395,"groupId":"18917","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"removeFileBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/21/2be8f63c986a46e6ea31ca0bfcf71bd1194e96.src","preCode":"    public void removeFileBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(BRANCH_TEST).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        File fileToAdd1 = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE_ALL);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE_ALL);\n            if (count == 1) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        template.send(\"direct:remove-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        \n        git = new Git(repository);\n        git.checkout().setCreateBranch(false).setName(BRANCH_TEST).call();\n        \n        status = git.status().call();\n        assertFalse(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"69fdbd1569544ee339bf1ef063c047662814f492","commitMessage":"@@@Fixed CS\n","date":"2015-07-18 17:08:16","modifiedFileCount":"4","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2015-07-18 17:07:24","codes":[{"authorDate":"2015-07-18 17:07:24","commitOrder":3,"curCode":"    public void commitBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(branchTest).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        template.send(\"direct:commit-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageBranch);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) {\n                assertEquals(rev.getShortMessage(), commitMessageBranch);\n            }\n            if (count == 1) {\n                assertEquals(rev.getShortMessage(), commitMessage);\n            }\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","date":"2015-07-18 17:08:16","endLine":219,"groupId":"18919","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"commitBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/f4/5d503262e672192b5615124309c02acad608da.src","preCode":"    public void commitBranchTest() throws Exception {\n\n    \tRepository repository = getTestRepository();\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(branchTest).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        template.send(\"direct:commit-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageBranch);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n        \tif (count == 0) assertEquals(rev.getShortMessage(), commitMessageBranch);\n        \tif (count == 1) assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2015-07-18 17:07:24","commitOrder":3,"curCode":"    public void removeFileBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(branchTest).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n        \n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) {\n                assertEquals(rev.getShortMessage(), commitMessageAll);\n            }\n            if (count == 1) {\n                assertEquals(rev.getShortMessage(), commitMessage);\n            }\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        template.send(\"direct:remove-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        \n        git = new Git(repository);\n        git.checkout().setCreateBranch(false).setName(branchTest).call();\n        \n        status = git.status().call();\n        assertFalse(status.getAdded().contains(filenameToAdd));\n        \n        repository.close();\n    }\n","date":"2015-07-18 17:08:16","endLine":407,"groupId":"18917","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"removeFileBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/f4/5d503262e672192b5615124309c02acad608da.src","preCode":"    public void removeFileBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(branchTest).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n        \n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) assertEquals(rev.getShortMessage(), commitMessageAll);\n            if (count == 1) assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        template.send(\"direct:remove-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        \n        git = new Git(repository);\n        git.checkout().setCreateBranch(false).setName(branchTest).call();\n        \n        status = git.status().call();\n        assertFalse(status.getAdded().contains(filenameToAdd));\n        \n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"465352619d40f9bc35c3a3cd8fa087eb221124ba","commitMessage":"@@@Fixed CS\n","date":"2015-07-18 17:08:16","modifiedFileCount":"11","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2016-11-22 05:34:03","codes":[{"authorDate":"2016-11-22 05:34:03","commitOrder":4,"curCode":"    public void commitBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        Iterable<RevCommit> logs = git.log().call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n\n        \r\n        template.send(\"direct:commit-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageBranch);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) {\n                assertEquals(rev.getShortMessage(), commitMessageBranch);\n            }\n            if (count == 1) {\n                assertEquals(rev.getShortMessage(), commitMessage);\n            }\n            count++;\n        }\n        assertEquals(count, 2);\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":254,"groupId":"35766","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"commitBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/94/edb9c8aca9980dc1c9cbcba9f967f24aa6059c.src","preCode":"    public void commitBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n\n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n\n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n\n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log().call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        template.send(\"direct:commit-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageBranch);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) {\n                assertEquals(rev.getShortMessage(), commitMessageBranch);\n            }\n            if (count == 1) {\n                assertEquals(rev.getShortMessage(), commitMessage);\n            }\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2016-11-22 05:34:03","commitOrder":4,"curCode":"    public void removeFileBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        Iterable<RevCommit> logs = git.log().call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        git.commit().setMessage(commitMessageAll).call();\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) {\n                assertEquals(rev.getShortMessage(), commitMessageAll);\n            }\n            if (count == 1) {\n                assertEquals(rev.getShortMessage(), commitMessage);\n            }\n            count++;\n        }\n        assertEquals(count, 2);\n\n        \r\n        template.send(\"direct:remove-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n\n        \r\n        git.checkout().setCreateBranch(false).setName(branchTest).call();\n        status = git.status().call();\n        assertFalse(status.getAdded().contains(filenameToAdd));\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":385,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"removeFileBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/94/edb9c8aca9980dc1c9cbcba9f967f24aa6059c.src","preCode":"    public void removeFileBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n\n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n\n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n\n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log().call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n\n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) {\n                assertEquals(rev.getShortMessage(), commitMessageAll);\n            }\n            if (count == 1) {\n                assertEquals(rev.getShortMessage(), commitMessage);\n            }\n            count++;\n        }\n        assertEquals(count, 2);\n\n        template.send(\"direct:remove-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n\n        git = new Git(repository);\n        git.checkout().setCreateBranch(false).setName(branchTest).call();\n\n        status = git.status().call();\n        assertFalse(status.getAdded().contains(filenameToAdd));\n\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"}],"commitId":"e396f77d3ba24e8271fc8d6169c68a9af0e23afb","commitMessage":"@@@Refactor unit tests using Jgit instead of camel-git to initialise the context\n","date":"2016-11-22 17:34:41","modifiedFileCount":"3","status":"M","submitter":"Olivier Antibi"},{"authorTime":"2016-11-22 17:34:25","codes":[{"authorDate":"2016-11-22 17:34:25","commitOrder":5,"curCode":"    public void commitBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n\n        \r\n        template.send(\"direct:commit-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageBranch);\n            }\n        });\n        validateGitLogs(git, commitMessageBranch, commitMessage);\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":219,"groupId":"35766","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"commitBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/c0/fa7992816b2386523f56a464a955640db33eea.src","preCode":"    public void commitBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        Iterable<RevCommit> logs = git.log().call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n\n        \r\n        template.send(\"direct:commit-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageBranch);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) {\n                assertEquals(rev.getShortMessage(), commitMessageBranch);\n            }\n            if (count == 1) {\n                assertEquals(rev.getShortMessage(), commitMessage);\n            }\n            count++;\n        }\n        assertEquals(count, 2);\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"},{"authorDate":"2016-11-22 17:34:25","commitOrder":5,"curCode":"    public void removeFileBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        git.commit().setMessage(commitMessageAll).call();\n        validateGitLogs(git, commitMessageAll, commitMessage);\n\n        \r\n        template.send(\"direct:remove-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n\n        \r\n        git.checkout().setCreateBranch(false).setName(branchTest).call();\n        status = git.status().call();\n        assertFalse(status.getAdded().contains(filenameToAdd));\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":308,"groupId":"35766","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"removeFileBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/c0/fa7992816b2386523f56a464a955640db33eea.src","preCode":"    public void removeFileBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        Iterable<RevCommit> logs = git.log().call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        git.commit().setMessage(commitMessageAll).call();\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) {\n                assertEquals(rev.getShortMessage(), commitMessageAll);\n            }\n            if (count == 1) {\n                assertEquals(rev.getShortMessage(), commitMessage);\n            }\n            count++;\n        }\n        assertEquals(count, 2);\n\n        \r\n        template.send(\"direct:remove-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n\n        \r\n        git.checkout().setCreateBranch(false).setName(branchTest).call();\n        status = git.status().call();\n        assertFalse(status.getAdded().contains(filenameToAdd));\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"}],"commitId":"1a8b2c4bd662edd8b2769b91daca0814d4d88b4f","commitMessage":"@@@Capitalize on validateLogs\n","date":"2016-11-22 17:34:41","modifiedFileCount":"3","status":"M","submitter":"Olivier Antibi"},{"authorTime":"2021-04-24 22:32:39","codes":[{"authorDate":"2021-04-24 22:32:39","commitOrder":6,"curCode":"    public void commitBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n\n        \r\n        template.send(\"direct:commit-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageBranch);\n            }\n        });\n        validateGitLogs(git, commitMessageBranch, commitMessage);\n        git.close();\n    }\n","date":"2021-04-24 22:32:39","endLine":300,"groupId":"101816","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"commitBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/be/255a5e97081a65f2d671d2629876c794c32ce1.src","preCode":"    public void commitBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n\n        \r\n        template.send(\"direct:commit-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageBranch);\n            }\n        });\n        validateGitLogs(git, commitMessageBranch, commitMessage);\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"},{"authorDate":"2021-04-24 22:32:39","commitOrder":6,"curCode":"    public void removeFileBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        git.commit().setMessage(commitMessageAll).call();\n        validateGitLogs(git, commitMessageAll, commitMessage);\n\n        \r\n        template.send(\"direct:remove-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n\n        \r\n        git.checkout().setCreateBranch(false).setName(branchTest).call();\n        status = git.status().call();\n        assertFalse(status.getAdded().contains(filenameToAdd));\n        git.close();\n    }\n","date":"2021-04-24 22:32:39","endLine":389,"groupId":"101816","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"removeFileBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/be/255a5e97081a65f2d671d2629876c794c32ce1.src","preCode":"    public void removeFileBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        git.commit().setMessage(commitMessageAll).call();\n        validateGitLogs(git, commitMessageAll, commitMessage);\n\n        \r\n        template.send(\"direct:remove-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n\n        \r\n        git.checkout().setCreateBranch(false).setName(branchTest).call();\n        status = git.status().call();\n        assertFalse(status.getAdded().contains(filenameToAdd));\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"}],"commitId":"7303e3102c5f78794f7350387c2339bde58110cd","commitMessage":"@@@(chores): fix incorrect assertion order in tests (#5463)\n\nThis prevents confusing messages when evaluating test results","date":"2021-04-24 22:32:39","modifiedFileCount":"46","status":"M","submitter":"Otavio Rodolfo Piske"}]
