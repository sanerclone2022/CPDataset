[{"authorTime":"2015-07-18 17:06:56","codes":[{"authorDate":"2015-07-18 17:06:56","commitOrder":1,"curCode":"    public void commitAllDifferentBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(BRANCH_TEST).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        File fileToAdd1 = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE_ALL);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE_ALL);\n            if (count == 1) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","date":"2015-07-18 17:08:15","endLine":320,"groupId":"18917","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"commitAllDifferentBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/5a/9c7f30badbd4736b5a092cb640d96255acc28c.src","preCode":"    public void commitAllDifferentBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(BRANCH_TEST).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        File fileToAdd1 = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE_ALL);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE_ALL);\n            if (count == 1) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"B"},{"authorDate":"2015-07-18 17:06:56","commitOrder":1,"curCode":"    public void commitConsumerTest() throws Exception {\n\n    \tRepository repository = getTestRepository();\n        MockEndpoint added = getMockEndpoint(\"mock:result\");\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        File fileToAdd1 = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_BRANCH_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, \"Test test Commit\");\n            }\n        });\n        logs  = new Git(repository).log()\n                .call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        Thread.sleep(1 * 5000);\n        Exchange ex1 = added.getExchanges().get(0);\n        Exchange ex2 = added.getExchanges().get(1);\n        assertEquals(COMMIT_MESSAGE, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        repository.close();\n    }\n","date":"2015-07-18 17:08:15","endLine":105,"groupId":"36500","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/21/273e21b06dbf96dccf2a729632ad461456cbce.src","preCode":"    public void commitConsumerTest() throws Exception {\n\n    \tRepository repository = getTestRepository();\n        MockEndpoint added = getMockEndpoint(\"mock:result\");\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        File fileToAdd1 = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_BRANCH_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, \"Test test Commit\");\n            }\n        });\n        logs  = new Git(repository).log()\n                .call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        Thread.sleep(1 * 5000);\n        Exchange ex1 = added.getExchanges().get(0);\n        Exchange ex2 = added.getExchanges().get(1);\n        assertEquals(COMMIT_MESSAGE, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"}],"commitId":"828dc8b3bd49352398310fa8a42c9420e28102cf","commitMessage":"@@@CAMEL-7982: camel-git - A generic git component.  add tag consumer\n","date":"2015-07-18 17:08:15","modifiedFileCount":"4","status":"B","submitter":"Andrea Cosentino"},{"authorTime":"2015-07-18 17:07:15","codes":[{"authorDate":"2015-07-18 17:06:56","commitOrder":2,"curCode":"    public void commitAllDifferentBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(BRANCH_TEST).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        File fileToAdd1 = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE_ALL);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE_ALL);\n            if (count == 1) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","date":"2015-07-18 17:08:15","endLine":320,"groupId":"18917","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"commitAllDifferentBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/5a/9c7f30badbd4736b5a092cb640d96255acc28c.src","preCode":"    public void commitAllDifferentBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(BRANCH_TEST).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        File fileToAdd1 = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE_ALL);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE_ALL);\n            if (count == 1) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"N"},{"authorDate":"2015-07-18 17:07:15","commitOrder":2,"curCode":"    public void commitConsumerTest() throws Exception {\n\n    \tRepository repository = getTestRepository();\n        MockEndpoint added = getMockEndpoint(\"mock:result-commit\");\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        File fileToAdd1 = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_BRANCH_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, \"Test test Commit\");\n            }\n        });\n        logs  = new Git(repository).log()\n                .call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        Thread.sleep(1 * 5000);\n        Exchange ex1 = added.getExchanges().get(0);\n        Exchange ex2 = added.getExchanges().get(1);\n        assertEquals(COMMIT_MESSAGE, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        repository.close();\n    }\n","date":"2015-07-18 17:08:16","endLine":106,"groupId":"36500","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/a0/80e232b5acc9748f35103d615dddf0529c6871.src","preCode":"    public void commitConsumerTest() throws Exception {\n\n    \tRepository repository = getTestRepository();\n        MockEndpoint added = getMockEndpoint(\"mock:result\");\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        File fileToAdd1 = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_BRANCH_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, \"Test test Commit\");\n            }\n        });\n        logs  = new Git(repository).log()\n                .call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        Thread.sleep(1 * 5000);\n        Exchange ex1 = added.getExchanges().get(0);\n        Exchange ex2 = added.getExchanges().get(1);\n        assertEquals(COMMIT_MESSAGE, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"}],"commitId":"2cbeee721769e385743b4595ff796d0c293869ae","commitMessage":"@@@CAMEL-7982: camel-git - A generic git component.  add branches consumer\n","date":"2015-07-18 17:08:16","modifiedFileCount":"3","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2015-07-18 17:07:19","codes":[{"authorDate":"2015-07-18 17:07:19","commitOrder":3,"curCode":"    public void commitAllDifferentBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(branchTest).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n        \n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) assertEquals(rev.getShortMessage(), commitMessageAll);\n            if (count == 1) assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","date":"2015-07-18 17:08:16","endLine":315,"groupId":"18917","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"commitAllDifferentBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/21/2be8f63c986a46e6ea31ca0bfcf71bd1194e96.src","preCode":"    public void commitAllDifferentBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(BRANCH_TEST).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        File fileToAdd1 = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE_ALL);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE_ALL);\n            if (count == 1) assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2015-07-18 17:07:19","commitOrder":3,"curCode":"    public void commitConsumerTest() throws Exception {\n\n    \tRepository repository = getTestRepository();\n        MockEndpoint added = getMockEndpoint(\"mock:result-commit\");\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n        \n        status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, \"Test test Commit\");\n            }\n        });\n        logs  = new Git(repository).log()\n                .call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        Thread.sleep(1 * 5000);\n        Exchange ex1 = added.getExchanges().get(0);\n        Exchange ex2 = added.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        repository.close();\n    }\n","date":"2015-07-18 17:08:16","endLine":106,"groupId":"36500","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/2b/de385628c61d3336d29195fbd470e1ab6af98d.src","preCode":"    public void commitConsumerTest() throws Exception {\n\n    \tRepository repository = getTestRepository();\n        MockEndpoint added = getMockEndpoint(\"mock:result-commit\");\n        \n        File fileToAdd = new File(GIT_LOCAL_REPO, FILENAME_TO_ADD);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_TO_ADD);\n            }\n        });\n        File gitDir = new File(GIT_LOCAL_REPO, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, COMMIT_MESSAGE);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), COMMIT_MESSAGE);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        File fileToAdd1 = new File(GIT_LOCAL_REPO, FILENAME_BRANCH_TO_ADD);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, FILENAME_BRANCH_TO_ADD);\n            }\n        });\n        \n        status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(FILENAME_BRANCH_TO_ADD));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, \"Test test Commit\");\n            }\n        });\n        logs  = new Git(repository).log()\n                .call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        Thread.sleep(1 * 5000);\n        Exchange ex1 = added.getExchanges().get(0);\n        Exchange ex2 = added.getExchanges().get(1);\n        assertEquals(COMMIT_MESSAGE, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"}],"commitId":"69fdbd1569544ee339bf1ef063c047662814f492","commitMessage":"@@@Fixed CS\n","date":"2015-07-18 17:08:16","modifiedFileCount":"4","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2015-07-18 17:07:19","codes":[{"authorDate":"2015-07-18 17:07:24","commitOrder":4,"curCode":"    public void commitAllDifferentBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(branchTest).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n        \n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) {\n                assertEquals(rev.getShortMessage(), commitMessageAll);\n            }\n            if (count == 1) {\n                assertEquals(rev.getShortMessage(), commitMessage);\n            }\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","date":"2015-07-18 17:08:16","endLine":323,"groupId":"18917","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"commitAllDifferentBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/f4/5d503262e672192b5615124309c02acad608da.src","preCode":"    public void commitAllDifferentBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(branchTest).\n        setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        \n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n        \n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) assertEquals(rev.getShortMessage(), commitMessageAll);\n            if (count == 1) assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"},{"authorDate":"2015-07-18 17:07:19","commitOrder":4,"curCode":"    public void commitConsumerTest() throws Exception {\n\n    \tRepository repository = getTestRepository();\n        MockEndpoint added = getMockEndpoint(\"mock:result-commit\");\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n        \n        status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, \"Test test Commit\");\n            }\n        });\n        logs  = new Git(repository).log()\n                .call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        Thread.sleep(1 * 5000);\n        Exchange ex1 = added.getExchanges().get(0);\n        Exchange ex2 = added.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        repository.close();\n    }\n","date":"2015-07-18 17:08:16","endLine":106,"groupId":"36500","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/2b/de385628c61d3336d29195fbd470e1ab6af98d.src","preCode":"    public void commitConsumerTest() throws Exception {\n\n    \tRepository repository = getTestRepository();\n        MockEndpoint added = getMockEndpoint(\"mock:result-commit\");\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n        \n        status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, \"Test test Commit\");\n            }\n        });\n        logs  = new Git(repository).log()\n                .call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        Thread.sleep(1 * 5000);\n        Exchange ex1 = added.getExchanges().get(0);\n        Exchange ex2 = added.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"}],"commitId":"465352619d40f9bc35c3a3cd8fa087eb221124ba","commitMessage":"@@@Fixed CS\n","date":"2015-07-18 17:08:16","modifiedFileCount":"11","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2016-11-22 05:34:03","codes":[{"authorDate":"2016-11-22 05:34:03","commitOrder":5,"curCode":"    public void commitAllDifferentBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        Iterable<RevCommit> logs = git.log().call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        \r\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n\n        \r\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) {\n                assertEquals(rev.getShortMessage(), commitMessageAll);\n            }\n            if (count == 1) {\n                assertEquals(rev.getShortMessage(), commitMessage);\n            }\n            count++;\n        }\n        assertEquals(count, 2);\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":333,"groupId":"35766","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"commitAllDifferentBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/94/edb9c8aca9980dc1c9cbcba9f967f24aa6059c.src","preCode":"    public void commitAllDifferentBranchTest() throws Exception {\n\n        Repository repository = getTestRepository();\n\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n\n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n\n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n\n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log().call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n\n        Git git = new Git(repository);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) {\n                assertEquals(rev.getShortMessage(), commitMessageAll);\n            }\n            if (count == 1) {\n                assertEquals(rev.getShortMessage(), commitMessage);\n            }\n            count++;\n        }\n        assertEquals(count, 2);\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"},{"authorDate":"2016-11-22 05:34:03","commitOrder":5,"curCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        Iterable<RevCommit> logs = git.log().call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            count++;\n        }\n        assertEquals(count, 2);\n\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":77,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/f2/b5db1898d15b933062578c1791f098239e37d0.src","preCode":"    public void commitConsumerTest() throws Exception {\n\n        Repository repository = getTestRepository();\n        MockEndpoint added = getMockEndpoint(\"mock:result-commit\");\n        \n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameToAdd);\n            }\n        });\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        \n        Status status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n            }\n        });\n        Iterable<RevCommit> logs = new Git(repository).log()\n                .call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n        \n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        \n        template.send(\"direct:add\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n        \n        status = new Git(repository).status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        \n        template.send(\"direct:commit\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, \"Test test Commit\");\n            }\n        });\n        logs  = new Git(repository).log()\n                .call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            count++;\n        }\n        assertEquals(count, 2);\n        \n        Thread.sleep(1 * 5000);\n        Exchange ex1 = added.getExchanges().get(0);\n        Exchange ex2 = added.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        repository.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"e396f77d3ba24e8271fc8d6169c68a9af0e23afb","commitMessage":"@@@Refactor unit tests using Jgit instead of camel-git to initialise the context\n","date":"2016-11-22 17:34:41","modifiedFileCount":"3","status":"M","submitter":"Olivier Antibi"},{"authorTime":"2016-11-22 17:34:25","codes":[{"authorDate":"2016-11-22 17:34:25","commitOrder":6,"curCode":"    public void commitAllDifferentBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        \r\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n\n        \r\n        validateGitLogs(git, commitMessageAll, commitMessage);\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":273,"groupId":"35766","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"commitAllDifferentBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/c0/fa7992816b2386523f56a464a955640db33eea.src","preCode":"    public void commitAllDifferentBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        Iterable<RevCommit> logs = git.log().call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            assertEquals(rev.getShortMessage(), commitMessage);\n            count++;\n        }\n        assertEquals(count, 1);\n\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        \r\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n\n        \r\n        logs = git.log().call();\n        count = 0;\n        for (RevCommit rev : logs) {\n            if (count == 0) {\n                assertEquals(rev.getShortMessage(), commitMessageAll);\n            }\n            if (count == 1) {\n                assertEquals(rev.getShortMessage(), commitMessage);\n            }\n            count++;\n        }\n        assertEquals(count, 2);\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2016-11-22 17:34:25","commitOrder":6,"curCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        Iterable<RevCommit> logs = git.log().call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":66,"groupId":"23146","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/bb/3d594727999afb87ce4b9a96c9cf533eb5a513.src","preCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        Iterable<RevCommit> logs = git.log().call();\n        int count = 0;\n        for (RevCommit rev : logs) {\n            count++;\n        }\n        assertEquals(count, 2);\n\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"1a8b2c4bd662edd8b2769b91daca0814d4d88b4f","commitMessage":"@@@Capitalize on validateLogs\n","date":"2016-11-22 17:34:41","modifiedFileCount":"3","status":"M","submitter":"Olivier Antibi"},{"authorTime":"2018-04-18 03:45:38","codes":[{"authorDate":"2016-11-22 17:34:25","commitOrder":7,"curCode":"    public void commitAllDifferentBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        \r\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n\n        \r\n        validateGitLogs(git, commitMessageAll, commitMessage);\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":273,"groupId":"35766","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"commitAllDifferentBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/c0/fa7992816b2386523f56a464a955640db33eea.src","preCode":"    public void commitAllDifferentBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        \r\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n\n        \r\n        validateGitLogs(git, commitMessageAll, commitMessage);\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"N"},{"authorDate":"2018-04-18 03:45:38","commitOrder":7,"curCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","date":"2018-04-18 03:45:38","endLine":65,"groupId":"35766","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/0c/7bc72183f2e65ddfe7a2e92b58eaf61d4351f4.src","preCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        Iterable<RevCommit> logs = git.log().call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"5a0e1aadf1949c0e729f085d42831e6731bc1c3e","commitMessage":"@@@polish\n","date":"2018-04-18 03:45:38","modifiedFileCount":"82","status":"M","submitter":"Babak Vahdat"},{"authorTime":"2019-08-07 14:06:01","codes":[{"authorDate":"2016-11-22 17:34:25","commitOrder":8,"curCode":"    public void commitAllDifferentBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        \r\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n\n        \r\n        validateGitLogs(git, commitMessageAll, commitMessage);\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":273,"groupId":"35766","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"commitAllDifferentBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/c0/fa7992816b2386523f56a464a955640db33eea.src","preCode":"    public void commitAllDifferentBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        \r\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n\n        \r\n        validateGitLogs(git, commitMessageAll, commitMessage);\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"N"},{"authorDate":"2019-08-07 14:06:01","commitOrder":8,"curCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getMessage().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getMessage().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","date":"2019-08-07 14:06:01","endLine":65,"groupId":"35766","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ba/39d3e56690d27d4aea8219cdfd155401430a6c.src","preCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"010cbdd69df83c8361183e44f1c3283e7f15e39c","commitMessage":"@@@CAMEL-10910: A route with a single output should also use a pipeline so its the same behaviour as if the route has 2+ outputs.\n","date":"2019-08-07 14:06:01","modifiedFileCount":"1","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2020-08-22 01:19:27","codes":[{"authorDate":"2016-11-22 17:34:25","commitOrder":9,"curCode":"    public void commitAllDifferentBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        \r\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n\n        \r\n        validateGitLogs(git, commitMessageAll, commitMessage);\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":273,"groupId":"35766","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"commitAllDifferentBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/c0/fa7992816b2386523f56a464a955640db33eea.src","preCode":"    public void commitAllDifferentBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        \r\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n\n        \r\n        validateGitLogs(git, commitMessageAll, commitMessage);\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"N"},{"authorDate":"2020-08-22 01:19:27","commitOrder":9,"curCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getMessage().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getMessage().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","date":"2020-08-22 01:19:27","endLine":68,"groupId":"35766","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/e5/574f19663fe07a2e39e1f7803adefa7526ac24.src","preCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getMessage().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getMessage().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"2fd065371821831d6884c5d9449302931e2dc217","commitMessage":"@@@CAMEL-15444: fix incorrect assertion order (#4116)\n\nThis makes it easier to identify expected results on test reports","date":"2020-08-22 01:19:27","modifiedFileCount":"135","status":"M","submitter":"Otavio Rodolfo Piske"},{"authorTime":"2020-11-05 20:58:11","codes":[{"authorDate":"2016-11-22 17:34:25","commitOrder":10,"curCode":"    public void commitAllDifferentBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        \r\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n\n        \r\n        validateGitLogs(git, commitMessageAll, commitMessage);\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":273,"groupId":"35766","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"commitAllDifferentBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/c0/fa7992816b2386523f56a464a955640db33eea.src","preCode":"    public void commitAllDifferentBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        \r\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n\n        \r\n        validateGitLogs(git, commitMessageAll, commitMessage);\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"N"},{"authorDate":"2020-11-05 20:58:11","commitOrder":10,"curCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getMessage().getBody(String.class));\n        assertEquals(\"Test test Commit\", ex1.getMessage().getBody(String.class));\n        git.close();\n    }\n","date":"2020-11-05 21:21:21","endLine":68,"groupId":"35766","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/55/36c2144f00e77bfe6b172586c95259cc2f3366.src","preCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getMessage().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getMessage().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"938e9467e6e62337fb8e67e121261b482c6b9c0f","commitMessage":"@@@Camel-Git Commit Consumer Test: Fixed and aligned related tests\n","date":"2020-11-05 21:21:21","modifiedFileCount":"1","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2020-11-05 20:58:11","codes":[{"authorDate":"2021-04-24 22:32:39","commitOrder":11,"curCode":"    public void commitAllDifferentBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        \r\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n\n        \r\n        validateGitLogs(git, commitMessageAll, commitMessage);\n        git.close();\n    }\n","date":"2021-04-24 22:32:39","endLine":354,"groupId":"101824","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"commitAllDifferentBranchTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/be/255a5e97081a65f2d671d2629876c794c32ce1.src","preCode":"    public void commitAllDifferentBranchTest() throws Exception {\n        \r\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        validateGitLogs(git, commitMessage);\n        git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n\n        \r\n        template.send(\"direct:add-on-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_FILE_NAME, filenameBranchToAdd);\n            }\n        });\n\n        template.send(\"direct:commit-all-branch\", new Processor() {\n            @Override\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE, commitMessageAll);\n            }\n        });\n\n        \r\n        validateGitLogs(git, commitMessageAll, commitMessage);\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"},{"authorDate":"2020-11-05 20:58:11","commitOrder":11,"curCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getMessage().getBody(String.class));\n        assertEquals(\"Test test Commit\", ex1.getMessage().getBody(String.class));\n        git.close();\n    }\n","date":"2020-11-05 21:21:21","endLine":68,"groupId":"101824","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/55/36c2144f00e77bfe6b172586c95259cc2f3366.src","preCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getMessage().getBody(String.class));\n        assertEquals(\"Test test Commit\", ex1.getMessage().getBody(String.class));\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"7303e3102c5f78794f7350387c2339bde58110cd","commitMessage":"@@@(chores): fix incorrect assertion order in tests (#5463)\n\nThis prevents confusing messages when evaluating test results","date":"2021-04-24 22:32:39","modifiedFileCount":"46","status":"M","submitter":"Otavio Rodolfo Piske"}]
