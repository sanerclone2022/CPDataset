[{"authorTime":"2016-11-22 17:34:25","codes":[{"authorDate":"2018-03-19 21:29:06","commitOrder":6,"curCode":"    public void gcTest() throws Exception {\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n\n        \r\n        template.requestBodyAndHeader(\"direct:commit\", \"\", GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n\n        \r\n        validateGitLogs(git, commitMessage, commitMessage);\n\n        \r\n        Properties gcResult = template.requestBodyAndHeader(\"direct:gc\", \"\", GitConstants.GIT_FILE_NAME, filenameToAdd, Properties.class);\n\n\n        assertNotNull(gcResult);\n        git.close();\n    }\n","date":"2018-03-19 21:29:06","endLine":748,"groupId":"35766","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"gcTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/8f/c324a14d449050bb26db0d4bb497484d373c8f.src","preCode":"    public void gcTest() throws Exception {\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n\n        \r\n        template.requestBodyAndHeader(\"direct:commit\", \"\", GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n\n        \r\n        validateGitLogs(git, commitMessage, commitMessage);\n\n        \r\n        Properties gcResult = template.requestBodyAndHeader(\"direct:gc\", \"\", GitConstants.GIT_FILE_NAME, filenameToAdd, Properties.class);\n\n\n        assertNotNull(gcResult);\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":725,"status":"B"},{"authorDate":"2016-11-22 17:34:25","commitOrder":6,"curCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        Iterable<RevCommit> logs = git.log().call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","date":"2016-11-22 17:34:41","endLine":66,"groupId":"23146","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/bb/3d594727999afb87ce4b9a96c9cf533eb5a513.src","preCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        Iterable<RevCommit> logs = git.log().call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"NB"}],"commitId":"02c124d19f6776eb537dc0622ffdcc2798f137fa","commitMessage":"@@@CAMEL-12369 - Camel-Git: Add GC operation\n","date":"2018-03-19 21:29:06","modifiedFileCount":"3","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2018-04-18 03:45:38","codes":[{"authorDate":"2018-03-19 21:29:06","commitOrder":7,"curCode":"    public void gcTest() throws Exception {\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n\n        \r\n        template.requestBodyAndHeader(\"direct:commit\", \"\", GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n\n        \r\n        validateGitLogs(git, commitMessage, commitMessage);\n\n        \r\n        Properties gcResult = template.requestBodyAndHeader(\"direct:gc\", \"\", GitConstants.GIT_FILE_NAME, filenameToAdd, Properties.class);\n\n\n        assertNotNull(gcResult);\n        git.close();\n    }\n","date":"2018-03-19 21:29:06","endLine":748,"groupId":"35766","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"gcTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/8f/c324a14d449050bb26db0d4bb497484d373c8f.src","preCode":"    public void gcTest() throws Exception {\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n\n        \r\n        template.requestBodyAndHeader(\"direct:commit\", \"\", GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n\n        \r\n        validateGitLogs(git, commitMessage, commitMessage);\n\n        \r\n        Properties gcResult = template.requestBodyAndHeader(\"direct:gc\", \"\", GitConstants.GIT_FILE_NAME, filenameToAdd, Properties.class);\n\n\n        assertNotNull(gcResult);\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":725,"status":"N"},{"authorDate":"2018-04-18 03:45:38","commitOrder":7,"curCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","date":"2018-04-18 03:45:38","endLine":65,"groupId":"35766","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/0c/7bc72183f2e65ddfe7a2e92b58eaf61d4351f4.src","preCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        Iterable<RevCommit> logs = git.log().call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"5a0e1aadf1949c0e729f085d42831e6731bc1c3e","commitMessage":"@@@polish\n","date":"2018-04-18 03:45:38","modifiedFileCount":"82","status":"M","submitter":"Babak Vahdat"},{"authorTime":"2019-08-07 14:06:01","codes":[{"authorDate":"2018-03-19 21:29:06","commitOrder":8,"curCode":"    public void gcTest() throws Exception {\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n\n        \r\n        template.requestBodyAndHeader(\"direct:commit\", \"\", GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n\n        \r\n        validateGitLogs(git, commitMessage, commitMessage);\n\n        \r\n        Properties gcResult = template.requestBodyAndHeader(\"direct:gc\", \"\", GitConstants.GIT_FILE_NAME, filenameToAdd, Properties.class);\n\n\n        assertNotNull(gcResult);\n        git.close();\n    }\n","date":"2018-03-19 21:29:06","endLine":748,"groupId":"35766","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"gcTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/8f/c324a14d449050bb26db0d4bb497484d373c8f.src","preCode":"    public void gcTest() throws Exception {\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n\n        \r\n        template.requestBodyAndHeader(\"direct:commit\", \"\", GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n\n        \r\n        validateGitLogs(git, commitMessage, commitMessage);\n\n        \r\n        Properties gcResult = template.requestBodyAndHeader(\"direct:gc\", \"\", GitConstants.GIT_FILE_NAME, filenameToAdd, Properties.class);\n\n\n        assertNotNull(gcResult);\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":725,"status":"N"},{"authorDate":"2019-08-07 14:06:01","commitOrder":8,"curCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getMessage().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getMessage().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","date":"2019-08-07 14:06:01","endLine":65,"groupId":"35766","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ba/39d3e56690d27d4aea8219cdfd155401430a6c.src","preCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getOut().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getOut().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"010cbdd69df83c8361183e44f1c3283e7f15e39c","commitMessage":"@@@CAMEL-10910: A route with a single output should also use a pipeline so its the same behaviour as if the route has 2+ outputs.\n","date":"2019-08-07 14:06:01","modifiedFileCount":"1","status":"M","submitter":"Claus Ibsen"},{"authorTime":"2020-08-22 01:19:27","codes":[{"authorDate":"2018-03-19 21:29:06","commitOrder":9,"curCode":"    public void gcTest() throws Exception {\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n\n        \r\n        template.requestBodyAndHeader(\"direct:commit\", \"\", GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n\n        \r\n        validateGitLogs(git, commitMessage, commitMessage);\n\n        \r\n        Properties gcResult = template.requestBodyAndHeader(\"direct:gc\", \"\", GitConstants.GIT_FILE_NAME, filenameToAdd, Properties.class);\n\n\n        assertNotNull(gcResult);\n        git.close();\n    }\n","date":"2018-03-19 21:29:06","endLine":748,"groupId":"35766","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"gcTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/8f/c324a14d449050bb26db0d4bb497484d373c8f.src","preCode":"    public void gcTest() throws Exception {\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n\n        \r\n        template.requestBodyAndHeader(\"direct:commit\", \"\", GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n\n        \r\n        validateGitLogs(git, commitMessage, commitMessage);\n\n        \r\n        Properties gcResult = template.requestBodyAndHeader(\"direct:gc\", \"\", GitConstants.GIT_FILE_NAME, filenameToAdd, Properties.class);\n\n\n        assertNotNull(gcResult);\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":725,"status":"N"},{"authorDate":"2020-08-22 01:19:27","commitOrder":9,"curCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getMessage().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getMessage().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","date":"2020-08-22 01:19:27","endLine":68,"groupId":"35766","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/e5/574f19663fe07a2e39e1f7803adefa7526ac24.src","preCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getMessage().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getMessage().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"2fd065371821831d6884c5d9449302931e2dc217","commitMessage":"@@@CAMEL-15444: fix incorrect assertion order (#4116)\n\nThis makes it easier to identify expected results on test reports","date":"2020-08-22 01:19:27","modifiedFileCount":"135","status":"M","submitter":"Otavio Rodolfo Piske"},{"authorTime":"2020-11-05 20:58:11","codes":[{"authorDate":"2018-03-19 21:29:06","commitOrder":10,"curCode":"    public void gcTest() throws Exception {\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n\n        \r\n        template.requestBodyAndHeader(\"direct:commit\", \"\", GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n\n        \r\n        validateGitLogs(git, commitMessage, commitMessage);\n\n        \r\n        Properties gcResult = template.requestBodyAndHeader(\"direct:gc\", \"\", GitConstants.GIT_FILE_NAME, filenameToAdd, Properties.class);\n\n\n        assertNotNull(gcResult);\n        git.close();\n    }\n","date":"2018-03-19 21:29:06","endLine":748,"groupId":"35766","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"gcTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/8f/c324a14d449050bb26db0d4bb497484d373c8f.src","preCode":"    public void gcTest() throws Exception {\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n\n        \r\n        template.requestBodyAndHeader(\"direct:commit\", \"\", GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n\n        \r\n        validateGitLogs(git, commitMessage, commitMessage);\n\n        \r\n        Properties gcResult = template.requestBodyAndHeader(\"direct:gc\", \"\", GitConstants.GIT_FILE_NAME, filenameToAdd, Properties.class);\n\n\n        assertNotNull(gcResult);\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":725,"status":"N"},{"authorDate":"2020-11-05 20:58:11","commitOrder":10,"curCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getMessage().getBody(String.class));\n        assertEquals(\"Test test Commit\", ex1.getMessage().getBody(String.class));\n        git.close();\n    }\n","date":"2020-11-05 21:21:21","endLine":68,"groupId":"35766","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/55/36c2144f00e77bfe6b172586c95259cc2f3366.src","preCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getMessage().getBody(RevCommit.class).getShortMessage());\n        assertEquals(\"Test test Commit\", ex1.getMessage().getBody(RevCommit.class).getShortMessage());\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"}],"commitId":"938e9467e6e62337fb8e67e121261b482c6b9c0f","commitMessage":"@@@Camel-Git Commit Consumer Test: Fixed and aligned related tests\n","date":"2020-11-05 21:21:21","modifiedFileCount":"1","status":"M","submitter":"Andrea Cosentino"},{"authorTime":"2020-11-05 20:58:11","codes":[{"authorDate":"2021-04-24 22:32:39","commitOrder":11,"curCode":"    public void gcTest() throws Exception {\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n\n        \r\n        template.requestBodyAndHeader(\"direct:commit\", \"\", GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n\n        \r\n        validateGitLogs(git, commitMessage, commitMessage);\n\n        \r\n        Properties gcResult\n                = template.requestBodyAndHeader(\"direct:gc\", \"\", GitConstants.GIT_FILE_NAME, filenameToAdd, Properties.class);\n\n        assertNotNull(gcResult);\n        git.close();\n    }\n","date":"2021-04-24 22:32:39","endLine":828,"groupId":"101831","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"gcTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/be/255a5e97081a65f2d671d2629876c794c32ce1.src","preCode":"    public void gcTest() throws Exception {\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(gitDir.exists(), true);\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n\n        \r\n        template.requestBodyAndHeader(\"direct:commit\", \"\", GitConstants.GIT_COMMIT_MESSAGE, commitMessage);\n\n        \r\n        validateGitLogs(git, commitMessage, commitMessage);\n\n        \r\n        Properties gcResult\n                = template.requestBodyAndHeader(\"direct:gc\", \"\", GitConstants.GIT_FILE_NAME, filenameToAdd, Properties.class);\n\n        assertNotNull(gcResult);\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/producer/GitProducerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":805,"status":"M"},{"authorDate":"2020-11-05 20:58:11","commitOrder":11,"curCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getMessage().getBody(String.class));\n        assertEquals(\"Test test Commit\", ex1.getMessage().getBody(String.class));\n        git.close();\n    }\n","date":"2020-11-05 21:21:21","endLine":68,"groupId":"101831","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"commitConsumerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/55/36c2144f00e77bfe6b172586c95259cc2f3366.src","preCode":"    public void commitConsumerTest() throws Exception {\n        \r\n        MockEndpoint mockResultCommit = getMockEndpoint(\"mock:result-commit\");\n        mockResultCommit.expectedMessageCount(2);\n        Git git = getGitTestRepository();\n        File gitDir = new File(gitLocalRepo, \".git\");\n        assertEquals(true, gitDir.exists());\n        File fileToAdd = new File(gitLocalRepo, filenameToAdd);\n        fileToAdd.createNewFile();\n        git.add().addFilepattern(filenameToAdd).call();\n        Status status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameToAdd));\n        git.commit().setMessage(commitMessage).call();\n        File fileToAdd1 = new File(gitLocalRepo, filenameBranchToAdd);\n        fileToAdd1.createNewFile();\n        git.add().addFilepattern(filenameBranchToAdd).call();\n        status = git.status().call();\n        assertTrue(status.getAdded().contains(filenameBranchToAdd));\n        git.commit().setMessage(\"Test test Commit\").call();\n        validateGitLogs(git, \"Test test Commit\", commitMessage);\n        \r\n        mockResultCommit.assertIsSatisfied();\n\n        \r\n        Exchange ex1 = mockResultCommit.getExchanges().get(0);\n        Exchange ex2 = mockResultCommit.getExchanges().get(1);\n        assertEquals(commitMessage, ex2.getMessage().getBody(String.class));\n        assertEquals(\"Test test Commit\", ex1.getMessage().getBody(String.class));\n        git.close();\n    }\n","realPath":"components/camel-git/src/test/java/org/apache/camel/component/git/consumer/GitConsumerTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"}],"commitId":"7303e3102c5f78794f7350387c2339bde58110cd","commitMessage":"@@@(chores): fix incorrect assertion order in tests (#5463)\n\nThis prevents confusing messages when evaluating test results","date":"2021-04-24 22:32:39","modifiedFileCount":"46","status":"M","submitter":"Otavio Rodolfo Piske"}]
