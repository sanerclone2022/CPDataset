[{"authorTime":"2019-02-13 16:55:11","codes":[{"authorDate":"2019-02-13 16:55:11","commitOrder":1,"curCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName()) || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && args.size() > 0) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand()) && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    Long num1 = val1 != null ? Long.valueOf(val1) : 0;\n                    Long num2 = val2 != null ? Long.valueOf(val2) : 0;\n                    answer = \"\" + (num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                Long num3 = val3 != null ? Long.valueOf(val3) : 0;\n                                Long num = Long.valueOf(answer);\n                                answer = \"\" + (num + num3);\n                            } else {\n                                answer += val3 != null ? val3 : \"\";\n                            }\n                        }\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","date":"2019-02-13 17:43:38","endLine":486,"groupId":"14634","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getLiteralValue","params":"(JavaClassSourceclazz@Blockblock@Expressionexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/d9/87c105983c3869e5944029ac97d05878e81bae.src","preCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName()) || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && args.size() > 0) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand()) && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    Long num1 = val1 != null ? Long.valueOf(val1) : 0;\n                    Long num2 = val2 != null ? Long.valueOf(val2) : 0;\n                    answer = \"\" + (num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                Long num3 = val3 != null ? Long.valueOf(val3) : 0;\n                                Long num = Long.valueOf(answer);\n                                answer = \"\" + (num + num3);\n                            } else {\n                                answer += val3 != null ? val3 : \"\";\n                            }\n                        }\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","realPath":"catalog/camel-route-parser/src/main/java/org/apache/camel/parser/helper/CamelJavaTreeParserHelper.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"B"},{"authorDate":"2019-02-13 16:55:11","commitOrder":1,"curCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName()) || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && args.size() > 0) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand()) && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    Long num1 = val1 != null ? Long.valueOf(val1) : 0;\n                    Long num2 = val2 != null ? Long.valueOf(val2) : 0;\n                    answer = \"\" + (num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                Long num3 = val3 != null ? Long.valueOf(val3) : 0;\n                                Long num = Long.valueOf(answer);\n                                answer = \"\" + (num + num3);\n                            } else {\n                                answer += val3 != null ? val3 : \"\";\n                            }\n                        }\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","date":"2019-02-13 17:43:38","endLine":712,"groupId":"14634","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getLiteralValue","params":"(JavaClassSourceclazz@Blockblock@Expressionexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/89/b665c4832a1fe1759d9fc10c40e64cdc77dd25.src","preCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName()) || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && args.size() > 0) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand()) && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    Long num1 = val1 != null ? Long.valueOf(val1) : 0;\n                    Long num2 = val2 != null ? Long.valueOf(val2) : 0;\n                    answer = \"\" + (num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                Long num3 = val3 != null ? Long.valueOf(val3) : 0;\n                                Long num = Long.valueOf(answer);\n                                answer = \"\" + (num + num3);\n                            } else {\n                                answer += val3 != null ? val3 : \"\";\n                            }\n                        }\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","realPath":"catalog/camel-route-parser/src/main/java/org/apache/camel/parser/helper/CamelJavaParserHelper.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":586,"status":"B"}],"commitId":"794ae6f40cc1a61ff1d184a37e1844d009d8eb8d","commitMessage":"@@@CAMEL-13189: Splitup camel-maven-plugin\n","date":"2019-02-13 17:43:38","modifiedFileCount":"0","status":"B","submitter":"Claus Ibsen"},{"authorTime":"2020-01-19 18:24:00","codes":[{"authorDate":"2020-01-19 18:24:00","commitOrder":2,"curCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName()) || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && args.size() > 0) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand()) && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    long num1 = val1 != null ? Long.parseLong(val1) : 0;\n                    long num2 = val2 != null ? Long.parseLong(val2) : 0;\n                    answer = Long.toString(num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                long num3 = val3 != null ? Long.parseLong(val3) : 0;\n                                long num = Long.parseLong(answer);\n                                answer = Long.toString(num + num3);\n                            } else {\n                                answer += val3 != null ? val3 : \"\";\n                            }\n                        }\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","date":"2020-01-20 19:02:35","endLine":486,"groupId":"14634","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getLiteralValue","params":"(JavaClassSourceclazz@Blockblock@Expressionexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/fe/936fe7a47585229d419b2052504acdd59db077.src","preCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName()) || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && args.size() > 0) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand()) && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    Long num1 = val1 != null ? Long.valueOf(val1) : 0;\n                    Long num2 = val2 != null ? Long.valueOf(val2) : 0;\n                    answer = \"\" + (num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                Long num3 = val3 != null ? Long.valueOf(val3) : 0;\n                                Long num = Long.valueOf(answer);\n                                answer = \"\" + (num + num3);\n                            } else {\n                                answer += val3 != null ? val3 : \"\";\n                            }\n                        }\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","realPath":"catalog/camel-route-parser/src/main/java/org/apache/camel/parser/helper/CamelJavaTreeParserHelper.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"},{"authorDate":"2020-01-19 18:24:00","commitOrder":2,"curCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName()) || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && args.size() > 0) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand()) && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    long num1 = val1 != null ? Long.parseLong(val1) : 0;\n                    long num2 = val2 != null ? Long.parseLong(val2) : 0;\n                    answer = Long.toString(num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                long num3 = val3 != null ? Long.parseLong(val3) : 0;\n                                long num = Long.parseLong(answer);\n                                answer = Long.toString(num + num3);\n                            } else {\n                                answer += val3 != null ? val3 : \"\";\n                            }\n                        }\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","date":"2020-01-20 19:02:35","endLine":712,"groupId":"14634","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getLiteralValue","params":"(JavaClassSourceclazz@Blockblock@Expressionexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/fe/830effb2a3a939246434affcef809243dd7be1.src","preCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName()) || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && args.size() > 0) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand()) && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    Long num1 = val1 != null ? Long.valueOf(val1) : 0;\n                    Long num2 = val2 != null ? Long.valueOf(val2) : 0;\n                    answer = \"\" + (num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                Long num3 = val3 != null ? Long.valueOf(val3) : 0;\n                                Long num = Long.valueOf(answer);\n                                answer = \"\" + (num + num3);\n                            } else {\n                                answer += val3 != null ? val3 : \"\";\n                            }\n                        }\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","realPath":"catalog/camel-route-parser/src/main/java/org/apache/camel/parser/helper/CamelJavaParserHelper.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":586,"status":"M"}],"commitId":"73a7ef7b74b41bcc4d8bb7f41b915ede5f84f6a2","commitMessage":"@@@Fix \"Boxed variable is never null\" warnings reported by lgtm.com.\n","date":"2020-01-20 19:02:35","modifiedFileCount":"8","status":"M","submitter":"Pascal Schumacher"},{"authorTime":"2020-01-19 18:24:00","codes":[{"authorDate":"2020-10-21 13:05:38","commitOrder":3,"curCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName())\n                                || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && !args.isEmpty()) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand())\n                        && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    long num1 = val1 != null ? Long.parseLong(val1) : 0;\n                    long num2 = val2 != null ? Long.parseLong(val2) : 0;\n                    answer = Long.toString(num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                long num3 = val3 != null ? Long.parseLong(val3) : 0;\n                                long num = Long.parseLong(answer);\n                                answer = Long.toString(num + num3);\n                            } else {\n                                answer += val3 != null ? val3 : \"\";\n                            }\n                        }\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","date":"2020-10-21 13:05:38","endLine":472,"groupId":"22947","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getLiteralValue","params":"(JavaClassSourceclazz@Blockblock@Expressionexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/c5/a5d540759642157da926bf71b69135eb45d46b.src","preCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName())\n                                || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && args.size() > 0) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand())\n                        && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    long num1 = val1 != null ? Long.parseLong(val1) : 0;\n                    long num2 = val2 != null ? Long.parseLong(val2) : 0;\n                    answer = Long.toString(num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                long num3 = val3 != null ? Long.parseLong(val3) : 0;\n                                long num = Long.parseLong(answer);\n                                answer = Long.toString(num + num3);\n                            } else {\n                                answer += val3 != null ? val3 : \"\";\n                            }\n                        }\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","realPath":"catalog/camel-route-parser/src/main/java/org/apache/camel/parser/helper/CamelJavaTreeParserHelper.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"M"},{"authorDate":"2020-01-19 18:24:00","commitOrder":3,"curCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName()) || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && args.size() > 0) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand()) && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    long num1 = val1 != null ? Long.parseLong(val1) : 0;\n                    long num2 = val2 != null ? Long.parseLong(val2) : 0;\n                    answer = Long.toString(num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                long num3 = val3 != null ? Long.parseLong(val3) : 0;\n                                long num = Long.parseLong(answer);\n                                answer = Long.toString(num + num3);\n                            } else {\n                                answer += val3 != null ? val3 : \"\";\n                            }\n                        }\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","date":"2020-01-20 19:02:35","endLine":712,"groupId":"14634","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getLiteralValue","params":"(JavaClassSourceclazz@Blockblock@Expressionexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/fe/830effb2a3a939246434affcef809243dd7be1.src","preCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName()) || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && args.size() > 0) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand()) && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    long num1 = val1 != null ? Long.parseLong(val1) : 0;\n                    long num2 = val2 != null ? Long.parseLong(val2) : 0;\n                    answer = Long.toString(num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                long num3 = val3 != null ? Long.parseLong(val3) : 0;\n                                long num = Long.parseLong(answer);\n                                answer = Long.toString(num + num3);\n                            } else {\n                                answer += val3 != null ? val3 : \"\";\n                            }\n                        }\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","realPath":"catalog/camel-route-parser/src/main/java/org/apache/camel/parser/helper/CamelJavaParserHelper.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":586,"status":"N"}],"commitId":"a23eac09b3f6b4506db15a640c209d4a086ef61b","commitMessage":"@@@Use isEmpty for checking whether collections are empty since it runs in constant time (#4486)\n\n","date":"2020-10-21 13:05:38","modifiedFileCount":"67","status":"M","submitter":"Otavio Rodolfo Piske"},{"authorTime":"2021-03-16 01:13:01","codes":[{"authorDate":"2021-03-16 01:13:01","commitOrder":4,"curCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName())\n                                || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && !args.isEmpty()) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand())\n                        && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    long num1 = val1 != null ? Long.parseLong(val1) : 0;\n                    long num2 = val2 != null ? Long.parseLong(val2) : 0;\n                    answer = Long.toString(num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        StringBuilder answerBuilder = new StringBuilder(answer);\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                long num3 = val3 != null ? Long.parseLong(val3) : 0;\n                                long num = Long.parseLong(answerBuilder.toString());\n                                answerBuilder = new StringBuilder(Long.toString(num + num3));\n                            } else {\n                                answerBuilder.append(val3 != null ? val3 : \"\");\n                            }\n                        }\n                        answer = answerBuilder.toString();\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","date":"2021-03-16 01:13:01","endLine":474,"groupId":"22947","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getLiteralValue","params":"(JavaClassSourceclazz@Blockblock@Expressionexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ef/0778cdcca85749f04299f735c89f018a5ef9f8.src","preCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName())\n                                || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && !args.isEmpty()) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand())\n                        && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    long num1 = val1 != null ? Long.parseLong(val1) : 0;\n                    long num2 = val2 != null ? Long.parseLong(val2) : 0;\n                    answer = Long.toString(num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                long num3 = val3 != null ? Long.parseLong(val3) : 0;\n                                long num = Long.parseLong(answer);\n                                answer = Long.toString(num + num3);\n                            } else {\n                                answer += val3 != null ? val3 : \"\";\n                            }\n                        }\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","realPath":"catalog/camel-route-parser/src/main/java/org/apache/camel/parser/helper/CamelJavaTreeParserHelper.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"M"},{"authorDate":"2021-03-16 01:13:01","commitOrder":4,"curCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName())\n                                || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && args.size() > 0) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand())\n                        && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    long num1 = val1 != null ? Long.parseLong(val1) : 0;\n                    long num2 = val2 != null ? Long.parseLong(val2) : 0;\n                    answer = Long.toString(num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        StringBuilder answerBuilder = new StringBuilder(answer);\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                long num3 = val3 != null ? Long.parseLong(val3) : 0;\n                                long num = Long.parseLong(answerBuilder.toString());\n                                answerBuilder = new StringBuilder(Long.toString(num + num3));\n                            } else {\n                                answerBuilder.append(val3 != null ? val3 : \"\");\n                            }\n                        }\n                        answer = answerBuilder.toString();\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","date":"2021-03-16 01:13:01","endLine":725,"groupId":"14634","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getLiteralValue","params":"(JavaClassSourceclazz@Blockblock@Expressionexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/5d/66ba0ab361d5ca50cb9b2476f3d612873cdd54.src","preCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName())\n                                || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && args.size() > 0) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand())\n                        && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    long num1 = val1 != null ? Long.parseLong(val1) : 0;\n                    long num2 = val2 != null ? Long.parseLong(val2) : 0;\n                    answer = Long.toString(num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                long num3 = val3 != null ? Long.parseLong(val3) : 0;\n                                long num = Long.parseLong(answer);\n                                answer = Long.toString(num + num3);\n                            } else {\n                                answer += val3 != null ? val3 : \"\";\n                            }\n                        }\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","realPath":"catalog/camel-route-parser/src/main/java/org/apache/camel/parser/helper/CamelJavaParserHelper.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":595,"status":"M"}],"commitId":"31a143ab63dcfbb530beaa459fe3c246d25e8dd8","commitMessage":"@@@Enhance some code lines (#5209)\n\nenhance some code lines","date":"2021-03-16 01:13:01","modifiedFileCount":"44","status":"M","submitter":"Boualem DJELAILI"},{"authorTime":"2021-04-23 22:43:07","codes":[{"authorDate":"2021-03-16 01:13:01","commitOrder":5,"curCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName())\n                                || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && !args.isEmpty()) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand())\n                        && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    long num1 = val1 != null ? Long.parseLong(val1) : 0;\n                    long num2 = val2 != null ? Long.parseLong(val2) : 0;\n                    answer = Long.toString(num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        StringBuilder answerBuilder = new StringBuilder(answer);\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                long num3 = val3 != null ? Long.parseLong(val3) : 0;\n                                long num = Long.parseLong(answerBuilder.toString());\n                                answerBuilder = new StringBuilder(Long.toString(num + num3));\n                            } else {\n                                answerBuilder.append(val3 != null ? val3 : \"\");\n                            }\n                        }\n                        answer = answerBuilder.toString();\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","date":"2021-03-16 01:13:01","endLine":474,"groupId":"10339","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getLiteralValue","params":"(JavaClassSourceclazz@Blockblock@Expressionexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/ef/0778cdcca85749f04299f735c89f018a5ef9f8.src","preCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName())\n                                || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && !args.isEmpty()) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand())\n                        && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    long num1 = val1 != null ? Long.parseLong(val1) : 0;\n                    long num2 = val2 != null ? Long.parseLong(val2) : 0;\n                    answer = Long.toString(num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        StringBuilder answerBuilder = new StringBuilder(answer);\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                long num3 = val3 != null ? Long.parseLong(val3) : 0;\n                                long num = Long.parseLong(answerBuilder.toString());\n                                answerBuilder = new StringBuilder(Long.toString(num + num3));\n                            } else {\n                                answerBuilder.append(val3 != null ? val3 : \"\");\n                            }\n                        }\n                        answer = answerBuilder.toString();\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","realPath":"catalog/camel-route-parser/src/main/java/org/apache/camel/parser/helper/CamelJavaTreeParserHelper.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"N"},{"authorDate":"2021-04-23 22:43:07","commitOrder":5,"curCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName())\n                                || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && !args.isEmpty()) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand())\n                        && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    long num1 = val1 != null ? Long.parseLong(val1) : 0;\n                    long num2 = val2 != null ? Long.parseLong(val2) : 0;\n                    answer = Long.toString(num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        StringBuilder answerBuilder = new StringBuilder(answer);\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                long num3 = val3 != null ? Long.parseLong(val3) : 0;\n                                long num = Long.parseLong(answerBuilder.toString());\n                                answerBuilder = new StringBuilder(Long.toString(num + num3));\n                            } else {\n                                answerBuilder.append(val3 != null ? val3 : \"\");\n                            }\n                        }\n                        answer = answerBuilder.toString();\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","date":"2021-04-23 22:43:07","endLine":725,"groupId":"10339","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"getLiteralValue","params":"(JavaClassSourceclazz@Blockblock@Expressionexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/7d/93ca2702b2dafdeec02247997bcc7199af521b.src","preCode":"    public static String getLiteralValue(JavaClassSource clazz, Block block, Expression expression) {\n        \r\n        if (expression instanceof ParenthesizedExpression) {\n            expression = ((ParenthesizedExpression) expression).getExpression();\n        }\n\n        if (expression instanceof StringLiteral) {\n            return ((StringLiteral) expression).getLiteralValue();\n        } else if (expression instanceof BooleanLiteral) {\n            return \"\" + ((BooleanLiteral) expression).booleanValue();\n        } else if (expression instanceof NumberLiteral) {\n            return ((NumberLiteral) expression).getToken();\n        }\n\n        \r\n        if (expression instanceof MethodInvocation) {\n            String name = ((MethodInvocation) expression).getName().getIdentifier();\n            return \"{{\" + name + \"}}\";\n        }\n\n        \r\n        \r\n        \r\n        if (expression instanceof QualifiedName) {\n            QualifiedName qn = (QualifiedName) expression;\n            String name = qn.getFullyQualifiedName();\n            return \"{{\" + name + \"}}\";\n        }\n\n        if (expression instanceof SimpleName) {\n            FieldSource<JavaClassSource> field = getField(clazz, block, (SimpleName) expression);\n            if (field != null) {\n                \r\n                if (field.getAnnotations() != null) {\n                    for (Annotation ann : field.getAnnotations()) {\n                        boolean valid = \"org.apache.camel.EndpointInject\".equals(ann.getQualifiedName())\n                                || \"org.apache.camel.cdi.Uri\".equals(ann.getQualifiedName());\n                        if (valid) {\n                            Expression exp = (Expression) ann.getInternal();\n                            if (exp instanceof SingleMemberAnnotation) {\n                                exp = ((SingleMemberAnnotation) exp).getValue();\n                            } else if (exp instanceof NormalAnnotation) {\n                                List values = ((NormalAnnotation) exp).values();\n                                for (Object value : values) {\n                                    MemberValuePair pair = (MemberValuePair) value;\n                                    if (\"uri\".equals(pair.getName().toString())) {\n                                        exp = pair.getValue();\n                                        break;\n                                    }\n                                }\n                            }\n                            if (exp != null) {\n                                return getLiteralValue(clazz, block, exp);\n                            }\n                        }\n                    }\n                }\n                \r\n                if (\"Endpoint\".equals(field.getType().getSimpleName())) {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression instanceof MethodInvocation) {\n                        MethodInvocation mi = (MethodInvocation) expression;\n                        List args = mi.arguments();\n                        if (args != null && args.size() > 0) {\n                            \r\n                            expression = (Expression) args.get(0);\n                            return getLiteralValue(clazz, block, expression);\n                        }\n                    }\n                } else {\n                    \r\n                    VariableDeclarationFragment vdf = (VariableDeclarationFragment) field.getInternal();\n                    expression = vdf.getInitializer();\n                    if (expression == null) {\n                        \r\n                        return \"{{\" + field.getName() + \"}}\";\n                    } else {\n                        return getLiteralValue(clazz, block, expression);\n                    }\n                }\n            } else {\n                \r\n                final String fieldName = ((SimpleName) expression).getIdentifier();\n                return \"{{\" + fieldName + \"}}\";\n            }\n        } else if (expression instanceof InfixExpression) {\n            String answer = null;\n            \r\n            InfixExpression ie = (InfixExpression) expression;\n            if (InfixExpression.Operator.PLUS.equals(ie.getOperator())) {\n\n                String val1 = getLiteralValue(clazz, block, ie.getLeftOperand());\n                String val2 = getLiteralValue(clazz, block, ie.getRightOperand());\n\n                \r\n                boolean numeric = isNumericOperator(clazz, block, ie.getLeftOperand())\n                        && isNumericOperator(clazz, block, ie.getRightOperand());\n                if (numeric) {\n                    long num1 = val1 != null ? Long.parseLong(val1) : 0;\n                    long num2 = val2 != null ? Long.parseLong(val2) : 0;\n                    answer = Long.toString(num1 + num2);\n                } else {\n                    answer = (val1 != null ? val1 : \"\") + (val2 != null ? val2 : \"\");\n                }\n\n                if (!answer.isEmpty()) {\n                    \r\n                    List extended = ie.extendedOperands();\n                    if (extended != null) {\n                        StringBuilder answerBuilder = new StringBuilder(answer);\n                        for (Object ext : extended) {\n                            String val3 = getLiteralValue(clazz, block, (Expression) ext);\n                            if (numeric) {\n                                long num3 = val3 != null ? Long.parseLong(val3) : 0;\n                                long num = Long.parseLong(answerBuilder.toString());\n                                answerBuilder = new StringBuilder(Long.toString(num + num3));\n                            } else {\n                                answerBuilder.append(val3 != null ? val3 : \"\");\n                            }\n                        }\n                        answer = answerBuilder.toString();\n                    }\n                }\n            }\n            return answer;\n        }\n\n        return null;\n    }\n","realPath":"catalog/camel-route-parser/src/main/java/org/apache/camel/parser/helper/CamelJavaParserHelper.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":595,"status":"M"}],"commitId":"b798e191f1809250242785e313f317646e95435a","commitMessage":"@@@Use isEmpty for checking whether collections are empty since it runs in constant time (#5462)\n\n","date":"2021-04-23 22:43:07","modifiedFileCount":"33","status":"M","submitter":"Otavio Rodolfo Piske"}]
