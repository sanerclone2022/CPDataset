[{"authorTime":"2019-02-04 15:15:59","codes":[{"authorDate":"2019-02-04 15:15:59","commitOrder":1,"curCode":"    public void testCacheStreamToFileAndCloseStream() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(\"UTF-8\"));\n        \n        File file = new File(\"target/cachedir\");\n        String[] files = file.list();\n        assertEquals(\"we should have a temp file\", 1, files.length);\n        assertTrue(\"The file name should start with cos\", files[0].startsWith(\"cos\"));\n\n        StreamCache cache = cos.newStreamCache();\n        assertTrue(\"Should get the FileInputStreamCache\", cache instanceof FileInputStreamCache);\n        String temp = toString((InputStream)cache);\n\n        ((InputStream)cache).close();\n        files = file.list();\n        assertEquals(\"we should have a temp file\", 1, files.length);\n        assertEquals(\"Cached a wrong file\", temp, TEST_STRING);\n        exchange.getUnitOfWork().done(exchange);\n\n        try {\n            cache.reset();\n            \r\n            fail(\"we expect the exception here\");\n        } catch (Exception exception) {\n            \r\n        }\n\n\n        files = file.list();\n        assertEquals(\"we should have no temp file\", 0, files.length);\n\n        IOHelper.close(cos);\n    }\n","date":"2019-02-04 15:15:59","endLine":140,"groupId":"34309","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheStreamToFileAndCloseStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/23/a5196ee8f411b497dd0467b4acd123c1ded7e8.src","preCode":"    public void testCacheStreamToFileAndCloseStream() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(\"UTF-8\"));\n        \n        File file = new File(\"target/cachedir\");\n        String[] files = file.list();\n        assertEquals(\"we should have a temp file\", 1, files.length);\n        assertTrue(\"The file name should start with cos\", files[0].startsWith(\"cos\"));\n\n        StreamCache cache = cos.newStreamCache();\n        assertTrue(\"Should get the FileInputStreamCache\", cache instanceof FileInputStreamCache);\n        String temp = toString((InputStream)cache);\n\n        ((InputStream)cache).close();\n        files = file.list();\n        assertEquals(\"we should have a temp file\", 1, files.length);\n        assertEquals(\"Cached a wrong file\", temp, TEST_STRING);\n        exchange.getUnitOfWork().done(exchange);\n\n        try {\n            cache.reset();\n            \r\n            fail(\"we expect the exception here\");\n        } catch (Exception exception) {\n            \r\n        }\n\n\n        files = file.list();\n        assertEquals(\"we should have no temp file\", 0, files.length);\n\n        IOHelper.close(cos);\n    }\n","realPath":"core/camel-core/src/test/java/org/apache/camel/converter/stream/CachedOutputStreamTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2019-02-04 15:15:59","commitOrder":1,"curCode":"    public void testCacheStreamToFileCloseStreamBeforeDone() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(\"UTF-8\"));\n\n        File file = new File(\"target/cachedir\");\n        String[] files = file.list();\n        assertEquals(\"we should have a temp file\", 1, files.length);\n        assertTrue(\"The file name should start with cos\", files[0].startsWith(\"cos\"));\n        \n        StreamCache cache = cos.newStreamCache();\n        assertTrue(\"Should get the FileInputStreamCache\", cache instanceof FileInputStreamCache);\n        String temp = toString((InputStream)cache);\n        assertEquals(\"Cached a wrong file\", temp, TEST_STRING);\n        cache.reset();\n        temp = toString((InputStream)cache);\n        assertEquals(\"Cached a wrong file\", temp, TEST_STRING);        \n        ((InputStream)cache).close();\n        files = file.list();\n        assertEquals(\"we should have a temp file\", 1, files.length);\n        \n        exchange.getUnitOfWork().done(exchange);\n        files = file.list();\n        assertEquals(\"we should have no temp file\", 0, files.length);       \n\n        IOHelper.close(cos);\n    }\n","date":"2019-02-04 15:15:59","endLine":215,"groupId":"31231","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheStreamToFileCloseStreamBeforeDone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/23/a5196ee8f411b497dd0467b4acd123c1ded7e8.src","preCode":"    public void testCacheStreamToFileCloseStreamBeforeDone() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(\"UTF-8\"));\n\n        File file = new File(\"target/cachedir\");\n        String[] files = file.list();\n        assertEquals(\"we should have a temp file\", 1, files.length);\n        assertTrue(\"The file name should start with cos\", files[0].startsWith(\"cos\"));\n        \n        StreamCache cache = cos.newStreamCache();\n        assertTrue(\"Should get the FileInputStreamCache\", cache instanceof FileInputStreamCache);\n        String temp = toString((InputStream)cache);\n        assertEquals(\"Cached a wrong file\", temp, TEST_STRING);\n        cache.reset();\n        temp = toString((InputStream)cache);\n        assertEquals(\"Cached a wrong file\", temp, TEST_STRING);        \n        ((InputStream)cache).close();\n        files = file.list();\n        assertEquals(\"we should have a temp file\", 1, files.length);\n        \n        exchange.getUnitOfWork().done(exchange);\n        files = file.list();\n        assertEquals(\"we should have no temp file\", 0, files.length);       \n\n        IOHelper.close(cos);\n    }\n","realPath":"core/camel-core/src/test/java/org/apache/camel/converter/stream/CachedOutputStreamTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"B"}],"commitId":"0759e2f9e548ad6af1f58a82a4e06a9134a9382d","commitMessage":"@@@[CAMEL-13040] Move modules to core/ folder\n","date":"2019-02-04 15:15:59","modifiedFileCount":"2","status":"B","submitter":"Guillaume Nodet"},{"authorTime":"2020-05-29 15:09:59","codes":[{"authorDate":"2020-05-29 15:09:59","commitOrder":2,"curCode":"    public void testCacheStreamToFileAndCloseStream() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(\"UTF-8\"));\n\n        File file = new File(\"target/cachedir\");\n        String[] files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertTrue(files[0].startsWith(\"cos\"), \"The file name should start with cos\");\n\n        StreamCache cache = cos.newStreamCache();\n        boolean b = cache instanceof FileInputStreamCache;\n        assertTrue(b, \"Should get the FileInputStreamCache\");\n        String temp = toString((InputStream)cache);\n\n        ((InputStream)cache).close();\n        files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertEquals(temp, TEST_STRING, \"Cached a wrong file\");\n        exchange.getUnitOfWork().done(exchange);\n\n        try {\n            cache.reset();\n            \r\n            fail(\"we expect the exception here\");\n        } catch (Exception exception) {\n            \r\n        }\n\n        files = file.list();\n        assertEquals(0, files.length, \"we should have no temp file\");\n\n        IOHelper.close(cos);\n    }\n","date":"2020-06-11 10:43:11","endLine":143,"groupId":"567","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheStreamToFileAndCloseStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/19/12c1b3e0e0d2a0260c5ebf76d6ec059c242de9.src","preCode":"    public void testCacheStreamToFileAndCloseStream() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(\"UTF-8\"));\n\n        File file = new File(\"target/cachedir\");\n        String[] files = file.list();\n        assertEquals(\"we should have a temp file\", 1, files.length);\n        assertTrue(\"The file name should start with cos\", files[0].startsWith(\"cos\"));\n\n        StreamCache cache = cos.newStreamCache();\n        assertTrue(\"Should get the FileInputStreamCache\", cache instanceof FileInputStreamCache);\n        String temp = toString((InputStream)cache);\n\n        ((InputStream)cache).close();\n        files = file.list();\n        assertEquals(\"we should have a temp file\", 1, files.length);\n        assertEquals(\"Cached a wrong file\", temp, TEST_STRING);\n        exchange.getUnitOfWork().done(exchange);\n\n        try {\n            cache.reset();\n            \r\n            fail(\"we expect the exception here\");\n        } catch (Exception exception) {\n            \r\n        }\n\n        files = file.list();\n        assertEquals(\"we should have no temp file\", 0, files.length);\n\n        IOHelper.close(cos);\n    }\n","realPath":"core/camel-core/src/test/java/org/apache/camel/converter/stream/CachedOutputStreamTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2020-05-29 15:09:59","commitOrder":2,"curCode":"    public void testCacheStreamToFileCloseStreamBeforeDone() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(\"UTF-8\"));\n\n        File file = new File(\"target/cachedir\");\n        String[] files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertTrue(files[0].startsWith(\"cos\"), \"The file name should start with cos\");\n\n        StreamCache cache = cos.newStreamCache();\n        boolean b = cache instanceof FileInputStreamCache;\n        assertTrue(b, \"Should get the FileInputStreamCache\");\n        String temp = toString((InputStream)cache);\n        assertEquals(temp, TEST_STRING, \"Cached a wrong file\");\n        cache.reset();\n        temp = toString((InputStream)cache);\n        assertEquals(temp, TEST_STRING, \"Cached a wrong file\");\n        ((InputStream)cache).close();\n        files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n\n        exchange.getUnitOfWork().done(exchange);\n        files = file.list();\n        assertEquals(0, files.length, \"we should have no temp file\");\n\n        IOHelper.close(cos);\n    }\n","date":"2020-06-11 10:43:11","endLine":219,"groupId":"27270","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheStreamToFileCloseStreamBeforeDone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/19/12c1b3e0e0d2a0260c5ebf76d6ec059c242de9.src","preCode":"    public void testCacheStreamToFileCloseStreamBeforeDone() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(\"UTF-8\"));\n\n        File file = new File(\"target/cachedir\");\n        String[] files = file.list();\n        assertEquals(\"we should have a temp file\", 1, files.length);\n        assertTrue(\"The file name should start with cos\", files[0].startsWith(\"cos\"));\n\n        StreamCache cache = cos.newStreamCache();\n        assertTrue(\"Should get the FileInputStreamCache\", cache instanceof FileInputStreamCache);\n        String temp = toString((InputStream)cache);\n        assertEquals(\"Cached a wrong file\", temp, TEST_STRING);\n        cache.reset();\n        temp = toString((InputStream)cache);\n        assertEquals(\"Cached a wrong file\", temp, TEST_STRING);\n        ((InputStream)cache).close();\n        files = file.list();\n        assertEquals(\"we should have a temp file\", 1, files.length);\n\n        exchange.getUnitOfWork().done(exchange);\n        files = file.list();\n        assertEquals(\"we should have no temp file\", 0, files.length);\n\n        IOHelper.close(cos);\n    }\n","realPath":"core/camel-core/src/test/java/org/apache/camel/converter/stream/CachedOutputStreamTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"}],"commitId":"20d531fac30d2a3e89d4b588e4dc37a97d6b1e5d","commitMessage":"@@@[CAMEL-11807] Upgrade camel-core to junit5\n","date":"2020-06-11 10:43:11","modifiedFileCount":"2260","status":"M","submitter":"Guillaume Nodet"},{"authorTime":"2020-08-22 01:19:27","codes":[{"authorDate":"2020-08-22 01:19:27","commitOrder":3,"curCode":"    public void testCacheStreamToFileAndCloseStream() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(\"UTF-8\"));\n\n        File file = new File(\"target/cachedir\");\n        String[] files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertTrue(files[0].startsWith(\"cos\"), \"The file name should start with cos\");\n\n        StreamCache cache = cos.newStreamCache();\n        boolean b = cache instanceof FileInputStreamCache;\n        assertTrue(b, \"Should get the FileInputStreamCache\");\n        String temp = toString((InputStream) cache);\n\n        ((InputStream) cache).close();\n        files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertEquals(TEST_STRING, temp, \"Cached a wrong file\");\n        exchange.getUnitOfWork().done(exchange);\n\n        try {\n            cache.reset();\n            \r\n            fail(\"we expect the exception here\");\n        } catch (Exception exception) {\n            \r\n        }\n\n        files = file.list();\n        assertEquals(0, files.length, \"we should have no temp file\");\n\n        IOHelper.close(cos);\n    }\n","date":"2020-08-22 01:19:27","endLine":147,"groupId":"567","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheStreamToFileAndCloseStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/fe/7c78937d2d6c02b9d1b6de1e5f1ff7685903d7.src","preCode":"    public void testCacheStreamToFileAndCloseStream() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(\"UTF-8\"));\n\n        File file = new File(\"target/cachedir\");\n        String[] files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertTrue(files[0].startsWith(\"cos\"), \"The file name should start with cos\");\n\n        StreamCache cache = cos.newStreamCache();\n        boolean b = cache instanceof FileInputStreamCache;\n        assertTrue(b, \"Should get the FileInputStreamCache\");\n        String temp = toString((InputStream) cache);\n\n        ((InputStream) cache).close();\n        files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertEquals(temp, TEST_STRING, \"Cached a wrong file\");\n        exchange.getUnitOfWork().done(exchange);\n\n        try {\n            cache.reset();\n            \r\n            fail(\"we expect the exception here\");\n        } catch (Exception exception) {\n            \r\n        }\n\n        files = file.list();\n        assertEquals(0, files.length, \"we should have no temp file\");\n\n        IOHelper.close(cos);\n    }\n","realPath":"core/camel-core/src/test/java/org/apache/camel/converter/stream/CachedOutputStreamTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2020-08-22 01:19:27","commitOrder":3,"curCode":"    public void testCacheStreamToFileCloseStreamBeforeDone() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(\"UTF-8\"));\n\n        File file = new File(\"target/cachedir\");\n        String[] files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertTrue(files[0].startsWith(\"cos\"), \"The file name should start with cos\");\n\n        StreamCache cache = cos.newStreamCache();\n        boolean b = cache instanceof FileInputStreamCache;\n        assertTrue(b, \"Should get the FileInputStreamCache\");\n        String temp = toString((InputStream) cache);\n        assertEquals(TEST_STRING, temp, \"Cached a wrong file\");\n        cache.reset();\n        temp = toString((InputStream) cache);\n        assertEquals(TEST_STRING, temp, \"Cached a wrong file\");\n        ((InputStream) cache).close();\n        files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n\n        exchange.getUnitOfWork().done(exchange);\n        files = file.list();\n        assertEquals(0, files.length, \"we should have no temp file\");\n\n        IOHelper.close(cos);\n    }\n","date":"2020-08-22 01:19:27","endLine":223,"groupId":"27270","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheStreamToFileCloseStreamBeforeDone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/fe/7c78937d2d6c02b9d1b6de1e5f1ff7685903d7.src","preCode":"    public void testCacheStreamToFileCloseStreamBeforeDone() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(\"UTF-8\"));\n\n        File file = new File(\"target/cachedir\");\n        String[] files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertTrue(files[0].startsWith(\"cos\"), \"The file name should start with cos\");\n\n        StreamCache cache = cos.newStreamCache();\n        boolean b = cache instanceof FileInputStreamCache;\n        assertTrue(b, \"Should get the FileInputStreamCache\");\n        String temp = toString((InputStream) cache);\n        assertEquals(temp, TEST_STRING, \"Cached a wrong file\");\n        cache.reset();\n        temp = toString((InputStream) cache);\n        assertEquals(temp, TEST_STRING, \"Cached a wrong file\");\n        ((InputStream) cache).close();\n        files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n\n        exchange.getUnitOfWork().done(exchange);\n        files = file.list();\n        assertEquals(0, files.length, \"we should have no temp file\");\n\n        IOHelper.close(cos);\n    }\n","realPath":"core/camel-core/src/test/java/org/apache/camel/converter/stream/CachedOutputStreamTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"2fd065371821831d6884c5d9449302931e2dc217","commitMessage":"@@@CAMEL-15444: fix incorrect assertion order (#4116)\n\nThis makes it easier to identify expected results on test reports","date":"2020-08-22 01:19:27","modifiedFileCount":"135","status":"M","submitter":"Otavio Rodolfo Piske"},{"authorTime":"2021-03-12 20:46:15","codes":[{"authorDate":"2021-03-12 20:46:15","commitOrder":4,"curCode":"    public void testCacheStreamToFileAndCloseStream() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(StandardCharsets.UTF_8));\n\n        File file = testDirectory().toFile();\n        String[] files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertTrue(files[0].startsWith(\"cos\"), \"The file name should start with cos\");\n\n        StreamCache cache = cos.newStreamCache();\n        boolean b = cache instanceof FileInputStreamCache;\n        assertTrue(b, \"Should get the FileInputStreamCache\");\n        String temp = toString((InputStream) cache);\n\n        ((InputStream) cache).close();\n        files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertEquals(TEST_STRING, temp, \"Cached a wrong file\");\n        exchange.getUnitOfWork().done(exchange);\n\n        try {\n            cache.reset();\n            \r\n            fail(\"we expect the exception here\");\n        } catch (Exception exception) {\n            \r\n        }\n\n        files = file.list();\n        assertEquals(0, files.length, \"we should have no temp file\");\n\n        IOHelper.close(cos);\n    }\n","date":"2021-03-13 04:01:08","endLine":145,"groupId":"10415","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCacheStreamToFileAndCloseStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/88/542c8995c6360cf7db5a649e958ae49cb4e59c.src","preCode":"    public void testCacheStreamToFileAndCloseStream() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(\"UTF-8\"));\n\n        File file = new File(\"target/cachedir\");\n        String[] files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertTrue(files[0].startsWith(\"cos\"), \"The file name should start with cos\");\n\n        StreamCache cache = cos.newStreamCache();\n        boolean b = cache instanceof FileInputStreamCache;\n        assertTrue(b, \"Should get the FileInputStreamCache\");\n        String temp = toString((InputStream) cache);\n\n        ((InputStream) cache).close();\n        files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertEquals(TEST_STRING, temp, \"Cached a wrong file\");\n        exchange.getUnitOfWork().done(exchange);\n\n        try {\n            cache.reset();\n            \r\n            fail(\"we expect the exception here\");\n        } catch (Exception exception) {\n            \r\n        }\n\n        files = file.list();\n        assertEquals(0, files.length, \"we should have no temp file\");\n\n        IOHelper.close(cos);\n    }\n","realPath":"core/camel-core/src/test/java/org/apache/camel/converter/stream/CachedOutputStreamTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2021-03-12 20:46:15","commitOrder":4,"curCode":"    public void testCacheStreamToFileCloseStreamBeforeDone() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(StandardCharsets.UTF_8));\n\n        File file = testDirectory().toFile();\n        String[] files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertTrue(files[0].startsWith(\"cos\"), \"The file name should start with cos\");\n\n        StreamCache cache = cos.newStreamCache();\n        boolean b = cache instanceof FileInputStreamCache;\n        assertTrue(b, \"Should get the FileInputStreamCache\");\n        String temp = toString((InputStream) cache);\n        assertEquals(TEST_STRING, temp, \"Cached a wrong file\");\n        cache.reset();\n        temp = toString((InputStream) cache);\n        assertEquals(TEST_STRING, temp, \"Cached a wrong file\");\n        ((InputStream) cache).close();\n        files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n\n        exchange.getUnitOfWork().done(exchange);\n        files = file.list();\n        assertEquals(0, files.length, \"we should have no temp file\");\n\n        IOHelper.close(cos);\n    }\n","date":"2021-03-13 04:01:08","endLine":221,"groupId":"10415","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCacheStreamToFileCloseStreamBeforeDone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/88/542c8995c6360cf7db5a649e958ae49cb4e59c.src","preCode":"    public void testCacheStreamToFileCloseStreamBeforeDone() throws Exception {\n        context.start();\n\n        CachedOutputStream cos = new CachedOutputStream(exchange);\n        cos.write(TEST_STRING.getBytes(\"UTF-8\"));\n\n        File file = new File(\"target/cachedir\");\n        String[] files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n        assertTrue(files[0].startsWith(\"cos\"), \"The file name should start with cos\");\n\n        StreamCache cache = cos.newStreamCache();\n        boolean b = cache instanceof FileInputStreamCache;\n        assertTrue(b, \"Should get the FileInputStreamCache\");\n        String temp = toString((InputStream) cache);\n        assertEquals(TEST_STRING, temp, \"Cached a wrong file\");\n        cache.reset();\n        temp = toString((InputStream) cache);\n        assertEquals(TEST_STRING, temp, \"Cached a wrong file\");\n        ((InputStream) cache).close();\n        files = file.list();\n        assertEquals(1, files.length, \"we should have a temp file\");\n\n        exchange.getUnitOfWork().done(exchange);\n        files = file.list();\n        assertEquals(0, files.length, \"we should have no temp file\");\n\n        IOHelper.close(cos);\n    }\n","realPath":"core/camel-core/src/test/java/org/apache/camel/converter/stream/CachedOutputStreamTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"ab8219262470cb15e9f62c7656e9837ed3c1b5e3","commitMessage":"@@@Make tests in core run in parallel\n\n# Conflicts:\n#\tcore/camel-core/src/test/java/org/apache/camel/component/file/FileConsumePollEnrichFileUsingProcessorTest.java\n","date":"2021-03-13 04:01:08","modifiedFileCount":"576","status":"M","submitter":"Guillaume Nodet"}]
