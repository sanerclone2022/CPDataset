[{"authorTime":"2017-06-26 18:43:12","codes":[{"authorDate":"2017-06-28 00:10:12","commitOrder":2,"curCode":"    public void testDeleteTarFileWhenUnmarshalWithDataFormat() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context).from(\"file://target/\" + \"testDeleteTarFileWhenUnmarshalWithDataFormat\").whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(3);\n        String tarFile = createTarFile(\"testDeleteTarFileWhenUnmarshalWithDataFormat\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesMockWaitTime();\n\n        \r\n        assertFalse(\"File should been deleted\", new File(tarFile).exists());\n    }\n","date":"2017-06-28 23:39:23","endLine":54,"groupId":"13239","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteTarFileWhenUnmarshalWithDataFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/28/50fb85e13a69306a2093e4fe25d61b1ec13649.src","preCode":"    public void testDeleteTarFileWhenUnmarshalWithDataFormat() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context).from(\"file://target/\" + \"testDeleteTarFileWhenUnmarshalWithDataFormat\").whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(3);\n        String tarFile = createTarFile(\"testDeleteTarFileWhenUnmarshalWithDataFormat\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesMockWaitTime();\n\n        \r\n        assertFalse(\"File should been deleted\", new File(tarFile).exists());\n    }\n","realPath":"components/camel-tarfile/src/test/java/org/apache/camel/dataformat/tarfile/TarFileSplitAndDeleteTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"NB"},{"authorDate":"2017-06-26 18:43:12","commitOrder":2,"curCode":"    public void testDeleteZipFileWhenUnmarshalWithSplitter() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context).from(\"file://target/\" + \"testDeleteZipFileWhenUnmarshalWithSplitter\").whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(2);\n        String zipFile = createZipFile(\"testDeleteZipFileWhenUnmarshalWithSplitter\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesMockWaitTime();\n\n        \r\n        assertFalse(\"File should been deleted\", new File(zipFile).exists());\n    }\n","date":"2017-06-28 23:44:59","endLine":69,"groupId":"2043","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteZipFileWhenUnmarshalWithSplitter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/cc/8c999a9af14cc64bc0324c39072cb6dbe9b8c0.src","preCode":"    public void testDeleteZipFileWhenUnmarshalWithSplitter() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context).from(\"file://target/\" + \"testDeleteZipFileWhenUnmarshalWithSplitter\").whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(2);\n        String zipFile = createZipFile(\"testDeleteZipFileWhenUnmarshalWithSplitter\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesMockWaitTime();\n\n        \r\n        assertFalse(\"File should been deleted\", new File(zipFile).exists());\n    }\n","realPath":"components/camel-zipfile/src/test/java/org/apache/camel/dataformat/zipfile/ZipFileSplitAndDeleteTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"}],"commitId":"bd350d89e213679b67f2e832316118183fef4966","commitMessage":"@@@CAMEL-11454 use provided input stream when unmarshalling instead of creating a new one\n","date":"2017-06-28 23:44:59","modifiedFileCount":"3","status":"M","submitter":"Adrien PAILHES"},{"authorTime":"2017-06-26 18:43:12","codes":[{"authorDate":"2020-07-24 17:58:29","commitOrder":3,"curCode":"    public void testDeleteTarFileWhenUnmarshalWithDataFormat() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context).from(\"file://target/\" + \"testDeleteTarFileWhenUnmarshalWithDataFormat\").whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(3);\n        String tarFile = createTarFile(\"testDeleteTarFileWhenUnmarshalWithDataFormat\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesMockWaitTime();\n\n        \r\n        assertFalse(new File(tarFile).exists(), \"File should been deleted\");\n    }\n","date":"2020-07-25 04:52:12","endLine":59,"groupId":"13239","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteTarFileWhenUnmarshalWithDataFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/de/45208d139f59a8a90d6ee3a94ff6d9940b9c7c.src","preCode":"    public void testDeleteTarFileWhenUnmarshalWithDataFormat() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context).from(\"file://target/\" + \"testDeleteTarFileWhenUnmarshalWithDataFormat\").whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(3);\n        String tarFile = createTarFile(\"testDeleteTarFileWhenUnmarshalWithDataFormat\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesMockWaitTime();\n\n        \r\n        assertFalse(\"File should been deleted\", new File(tarFile).exists());\n    }\n","realPath":"components/camel-tarfile/src/test/java/org/apache/camel/dataformat/tarfile/TarFileSplitAndDeleteTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2017-06-26 18:43:12","commitOrder":3,"curCode":"    public void testDeleteZipFileWhenUnmarshalWithSplitter() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context).from(\"file://target/\" + \"testDeleteZipFileWhenUnmarshalWithSplitter\").whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(2);\n        String zipFile = createZipFile(\"testDeleteZipFileWhenUnmarshalWithSplitter\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesMockWaitTime();\n\n        \r\n        assertFalse(\"File should been deleted\", new File(zipFile).exists());\n    }\n","date":"2017-06-28 23:44:59","endLine":69,"groupId":"2043","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteZipFileWhenUnmarshalWithSplitter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/cc/8c999a9af14cc64bc0324c39072cb6dbe9b8c0.src","preCode":"    public void testDeleteZipFileWhenUnmarshalWithSplitter() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context).from(\"file://target/\" + \"testDeleteZipFileWhenUnmarshalWithSplitter\").whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(2);\n        String zipFile = createZipFile(\"testDeleteZipFileWhenUnmarshalWithSplitter\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesMockWaitTime();\n\n        \r\n        assertFalse(\"File should been deleted\", new File(zipFile).exists());\n    }\n","realPath":"components/camel-zipfile/src/test/java/org/apache/camel/dataformat/zipfile/ZipFileSplitAndDeleteTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"N"}],"commitId":"13aada9e6a7514f335fa1ffd8ffc750700c93ff6","commitMessage":"@@@[CAMEL-11807] Upgrade camel-tarfile to junit5\n","date":"2020-07-25 04:52:12","modifiedFileCount":"10","status":"M","submitter":"Guillaume Nodet"},{"authorTime":"2020-07-27 17:35:49","codes":[{"authorDate":"2020-07-24 17:58:29","commitOrder":4,"curCode":"    public void testDeleteTarFileWhenUnmarshalWithDataFormat() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context).from(\"file://target/\" + \"testDeleteTarFileWhenUnmarshalWithDataFormat\").whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(3);\n        String tarFile = createTarFile(\"testDeleteTarFileWhenUnmarshalWithDataFormat\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesMockWaitTime();\n\n        \r\n        assertFalse(new File(tarFile).exists(), \"File should been deleted\");\n    }\n","date":"2020-07-25 04:52:12","endLine":59,"groupId":"13239","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteTarFileWhenUnmarshalWithDataFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/de/45208d139f59a8a90d6ee3a94ff6d9940b9c7c.src","preCode":"    public void testDeleteTarFileWhenUnmarshalWithDataFormat() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context).from(\"file://target/\" + \"testDeleteTarFileWhenUnmarshalWithDataFormat\").whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(3);\n        String tarFile = createTarFile(\"testDeleteTarFileWhenUnmarshalWithDataFormat\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesMockWaitTime();\n\n        \r\n        assertFalse(new File(tarFile).exists(), \"File should been deleted\");\n    }\n","realPath":"components/camel-tarfile/src/test/java/org/apache/camel/dataformat/tarfile/TarFileSplitAndDeleteTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2020-07-27 17:35:49","commitOrder":4,"curCode":"    public void testDeleteZipFileWhenUnmarshalWithSplitter() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context).from(\"file://target/\" + \"testDeleteZipFileWhenUnmarshalWithSplitter\").whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(2);\n        String zipFile = createZipFile(\"testDeleteZipFileWhenUnmarshalWithSplitter\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesMockWaitTime();\n\n        \r\n        assertFalse(new File(zipFile).exists(), \"File should been deleted\");\n    }\n","date":"2020-07-27 23:38:21","endLine":74,"groupId":"2043","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteZipFileWhenUnmarshalWithSplitter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/62/e601e83367502ef26fa723013693a3761014de.src","preCode":"    public void testDeleteZipFileWhenUnmarshalWithSplitter() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context).from(\"file://target/\" + \"testDeleteZipFileWhenUnmarshalWithSplitter\").whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(2);\n        String zipFile = createZipFile(\"testDeleteZipFileWhenUnmarshalWithSplitter\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesMockWaitTime();\n\n        \r\n        assertFalse(\"File should been deleted\", new File(zipFile).exists());\n    }\n","realPath":"components/camel-zipfile/src/test/java/org/apache/camel/dataformat/zipfile/ZipFileSplitAndDeleteTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"153f25160e0a6a31e2c107ea4c42a245cc1188cf","commitMessage":"@@@[CAMEL-11807] Upgrade camel-zipfile to junit5\n","date":"2020-07-27 23:38:21","modifiedFileCount":"12","status":"M","submitter":"Guillaume Nodet"},{"authorTime":"2020-08-28 13:32:10","codes":[{"authorDate":"2020-08-28 13:32:10","commitOrder":5,"curCode":"    public void testDeleteTarFileWhenUnmarshalWithDataFormat() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context)\n                .from(\"file://target/\" + \"testDeleteTarFileWhenUnmarshalWithDataFormat\").whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(3);\n        String tarFile = createTarFile(\"testDeleteTarFileWhenUnmarshalWithDataFormat\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesWaitTime();\n\n        \r\n        assertFalse(new File(tarFile).exists(), \"File should been deleted\");\n    }\n","date":"2020-08-28 13:32:10","endLine":60,"groupId":"101471","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testDeleteTarFileWhenUnmarshalWithDataFormat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/f7/420996a68639e5fa7f4cd517e4eab96c543ae5.src","preCode":"    public void testDeleteTarFileWhenUnmarshalWithDataFormat() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context)\n                .from(\"file://target/\" + \"testDeleteTarFileWhenUnmarshalWithDataFormat\").whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(3);\n        String tarFile = createTarFile(\"testDeleteTarFileWhenUnmarshalWithDataFormat\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesMockWaitTime();\n\n        \r\n        assertFalse(new File(tarFile).exists(), \"File should been deleted\");\n    }\n","realPath":"components/camel-tarfile/src/test/java/org/apache/camel/dataformat/tarfile/TarFileSplitAndDeleteTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-08-28 13:32:10","commitOrder":5,"curCode":"    public void testDeleteZipFileWhenUnmarshalWithSplitter() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context).from(\"file://target/\" + \"testDeleteZipFileWhenUnmarshalWithSplitter\")\n                .whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(2);\n        String zipFile = createZipFile(\"testDeleteZipFileWhenUnmarshalWithSplitter\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesWaitTime();\n\n        \r\n        assertFalse(new File(zipFile).exists(), \"File should been deleted\");\n    }\n","date":"2020-08-28 13:32:10","endLine":75,"groupId":"101471","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteZipFileWhenUnmarshalWithSplitter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-camel-10-0.7/blobInfo/CC_OUT/blobs/b0/700bceff3bf29ba100731aa36cdd6ce5616fb6.src","preCode":"    public void testDeleteZipFileWhenUnmarshalWithSplitter() throws Exception {\n        NotifyBuilder notify = new NotifyBuilder(context).from(\"file://target/\" + \"testDeleteZipFileWhenUnmarshalWithSplitter\")\n                .whenDone(1).create();\n        getMockEndpoint(\"mock:end\").expectedMessageCount(2);\n        String zipFile = createZipFile(\"testDeleteZipFileWhenUnmarshalWithSplitter\");\n\n        assertMockEndpointsSatisfied();\n\n        notify.matchesMockWaitTime();\n\n        \r\n        assertFalse(new File(zipFile).exists(), \"File should been deleted\");\n    }\n","realPath":"components/camel-zipfile/src/test/java/org/apache/camel/dataformat/zipfile/ZipFileSplitAndDeleteTest.java","repoName":"camel","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"ed33d3ca32b5582d14a7b4ad56315c2a9b703527","commitMessage":"@@@Fix deprecations spread across multiple modules (#4139)\n\n* Fixed usages of deprecated Charsets.UTF_8 in test code\n\nComponents modified:\n* camel-atom\n* camel-xmlsecurity\n\n* Fixed usages of deprecated Integer constructor in test code\n\nComponents modified:\n* camel-aws2-sqs\n* camel-aws-cw\n* camel-aws-sqs\n* camel-cometd\n* camel-digitalocean\n* camel-elsql\n* camel-exec\n* camel-quartz\n* camel-resteasy\n* camel-sql\n* camel-syslog\n* camel-thrift\n* camel-twitter\n\n* Fixed usages of deprecated Long constructor in test code\n\nComponents modified:\n* camel-hazelcast\n* camel-jira\n* core/camel-management\n* camel-micrometer\n* camel-quartz\n* camel-twitter\n\n* Fixed usages of deprecated Double constructor in test code\n\nComponents modified:\n* camel-bindy\n* camel-kafka\n\n* Fixed usages of deprecated matchesMockWaitTime method in test code\n\nComponents modified:\n* camel-mail\n* camel-tarfile\n* camel-zip-deflater\n* camel-zipfile\n\n* camel-google-bigquery: fixed usage of inOnly","date":"2020-08-28 13:32:10","modifiedFileCount":"41","status":"M","submitter":"Otavio Rodolfo Piske"}]
