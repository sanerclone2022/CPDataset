[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public synchronized void stop() throws IOException, TimeoutException {\n    if (this.stopped) {\n      return;\n    }\n\n    LOGGER.info(\"Stopping the \" + GobblinYarnAppLauncher.class.getSimpleName());\n\n    try {\n      if (this.applicationId.isPresent() && !this.applicationCompleted) {\n        \r\n        sendShutdownRequest();\n      }\n\n      if (this.serviceManager.isPresent()) {\n        this.serviceManager.get().stopAsync().awaitStopped(5, TimeUnit.MINUTES);\n      }\n\n      ExecutorsUtils.shutdownExecutorService(this.applicationStatusMonitor, Optional.of(LOGGER), 5, TimeUnit.MINUTES);\n\n      stopYarnClient();\n\n      disconnectHelixManager();\n    } finally {\n      try {\n        if (this.applicationId.isPresent()) {\n          cleanUpAppWorkDirectory(this.applicationId.get());\n        }\n      } finally {\n        this.closer.close();\n      }\n    }\n\n    this.stopped = true;\n  }\n","date":"2017-07-31 15:51:25","endLine":341,"groupId":"5802","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"stop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/51/4386c262296489137875d96278142acb58e013.src","preCode":"  public synchronized void stop() throws IOException, TimeoutException {\n    if (this.stopped) {\n      return;\n    }\n\n    LOGGER.info(\"Stopping the \" + GobblinYarnAppLauncher.class.getSimpleName());\n\n    try {\n      if (this.applicationId.isPresent() && !this.applicationCompleted) {\n        \r\n        sendShutdownRequest();\n      }\n\n      if (this.serviceManager.isPresent()) {\n        this.serviceManager.get().stopAsync().awaitStopped(5, TimeUnit.MINUTES);\n      }\n\n      ExecutorsUtils.shutdownExecutorService(this.applicationStatusMonitor, Optional.of(LOGGER), 5, TimeUnit.MINUTES);\n\n      stopYarnClient();\n\n      disconnectHelixManager();\n    } finally {\n      try {\n        if (this.applicationId.isPresent()) {\n          cleanUpAppWorkDirectory(this.applicationId.get());\n        }\n      } finally {\n        this.closer.close();\n      }\n    }\n\n    this.stopped = true;\n  }\n","realPath":"gobblin-yarn/src/main/java/org/apache/gobblin/yarn/GobblinYarnAppLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public synchronized void stop() throws IOException, TimeoutException {\n    if (this.stopped) {\n      return;\n    }\n\n    LOGGER.info(\"Stopping the \" + GobblinAWSClusterLauncher.class.getSimpleName());\n\n    try {\n      if (this.clusterId.isPresent()) {\n        sendShutdownRequest();\n      }\n\n      disconnectHelixManager();\n    } finally {\n      try {\n        if (this.clusterId.isPresent()) {\n          cleanUpClusterWorkDirectory(this.clusterId.get());\n        }\n      } finally {\n        this.closer.close();\n      }\n    }\n\n    this.countDownLatch.countDown();\n    this.stopped = true;\n  }\n","date":"2017-07-31 15:51:25","endLine":302,"groupId":"7887","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"stop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c2/b0d5db5a466fe7884f12f2885bd64d89b7ab45.src","preCode":"  public synchronized void stop() throws IOException, TimeoutException {\n    if (this.stopped) {\n      return;\n    }\n\n    LOGGER.info(\"Stopping the \" + GobblinAWSClusterLauncher.class.getSimpleName());\n\n    try {\n      if (this.clusterId.isPresent()) {\n        sendShutdownRequest();\n      }\n\n      disconnectHelixManager();\n    } finally {\n      try {\n        if (this.clusterId.isPresent()) {\n          cleanUpClusterWorkDirectory(this.clusterId.get());\n        }\n      } finally {\n        this.closer.close();\n      }\n    }\n\n    this.countDownLatch.countDown();\n    this.stopped = true;\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/GobblinAWSClusterLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2020-03-28 12:26:00","commitOrder":2,"curCode":"  public synchronized void stop() throws IOException, TimeoutException {\n    if (this.stopped) {\n      return;\n    }\n\n    LOGGER.info(\"Stopping the \" + GobblinYarnAppLauncher.class.getSimpleName());\n\n    try {\n      if (this.applicationId.isPresent() && !this.applicationCompleted) {\n        \r\n        sendShutdownRequest();\n      }\n\n      if (this.serviceManager.isPresent()) {\n        this.serviceManager.get().stopAsync().awaitStopped(5, TimeUnit.MINUTES);\n      }\n\n      ExecutorsUtils.shutdownExecutorService(this.applicationStatusMonitor, Optional.of(LOGGER), 5, TimeUnit.MINUTES);\n\n      stopYarnClient();\n\n      LOGGER.info(\"Disabling all live Helix instances..\");\n      disableLiveHelixInstances();\n\n      disconnectHelixManager();\n    } finally {\n      try {\n        if (this.applicationId.isPresent()) {\n          cleanUpAppWorkDirectory(this.applicationId.get());\n        }\n      } finally {\n        this.closer.close();\n      }\n    }\n\n    this.stopped = true;\n  }\n","date":"2020-03-28 12:26:00","endLine":420,"groupId":"5802","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"stop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/82/842f245446c450595278fe1606a7c6827fdd52.src","preCode":"  public synchronized void stop() throws IOException, TimeoutException {\n    if (this.stopped) {\n      return;\n    }\n\n    LOGGER.info(\"Stopping the \" + GobblinYarnAppLauncher.class.getSimpleName());\n\n    try {\n      if (this.applicationId.isPresent() && !this.applicationCompleted) {\n        \r\n        sendShutdownRequest();\n      }\n\n      if (this.serviceManager.isPresent()) {\n        this.serviceManager.get().stopAsync().awaitStopped(5, TimeUnit.MINUTES);\n      }\n\n      ExecutorsUtils.shutdownExecutorService(this.applicationStatusMonitor, Optional.of(LOGGER), 5, TimeUnit.MINUTES);\n\n      stopYarnClient();\n\n      disconnectHelixManager();\n    } finally {\n      try {\n        if (this.applicationId.isPresent()) {\n          cleanUpAppWorkDirectory(this.applicationId.get());\n        }\n      } finally {\n        this.closer.close();\n      }\n    }\n\n    this.stopped = true;\n  }\n","realPath":"gobblin-yarn/src/main/java/org/apache/gobblin/yarn/GobblinYarnAppLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public synchronized void stop() throws IOException, TimeoutException {\n    if (this.stopped) {\n      return;\n    }\n\n    LOGGER.info(\"Stopping the \" + GobblinAWSClusterLauncher.class.getSimpleName());\n\n    try {\n      if (this.clusterId.isPresent()) {\n        sendShutdownRequest();\n      }\n\n      disconnectHelixManager();\n    } finally {\n      try {\n        if (this.clusterId.isPresent()) {\n          cleanUpClusterWorkDirectory(this.clusterId.get());\n        }\n      } finally {\n        this.closer.close();\n      }\n    }\n\n    this.countDownLatch.countDown();\n    this.stopped = true;\n  }\n","date":"2017-07-31 15:51:25","endLine":302,"groupId":"7887","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"stop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c2/b0d5db5a466fe7884f12f2885bd64d89b7ab45.src","preCode":"  public synchronized void stop() throws IOException, TimeoutException {\n    if (this.stopped) {\n      return;\n    }\n\n    LOGGER.info(\"Stopping the \" + GobblinAWSClusterLauncher.class.getSimpleName());\n\n    try {\n      if (this.clusterId.isPresent()) {\n        sendShutdownRequest();\n      }\n\n      disconnectHelixManager();\n    } finally {\n      try {\n        if (this.clusterId.isPresent()) {\n          cleanUpClusterWorkDirectory(this.clusterId.get());\n        }\n      } finally {\n        this.closer.close();\n      }\n    }\n\n    this.countDownLatch.countDown();\n    this.stopped = true;\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/GobblinAWSClusterLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"N"}],"commitId":"cf6af89995369e80afbd661ef0d7d2852d1ca4c9","commitMessage":"@@@[GOBBLIN-1099] Handle orphaned Yarn containers in Gobblin-on-Yarn clus?\n\nCloses #2940 from sv2000/yarnOrphans\n","date":"2020-03-28 12:26:00","modifiedFileCount":"9","status":"M","submitter":"sv2000"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2020-06-02 23:08:22","commitOrder":3,"curCode":"  public synchronized void stop() throws IOException, TimeoutException {\n    if (this.stopped) {\n      return;\n    }\n\n    LOGGER.info(\"Stopping the \" + GobblinYarnAppLauncher.class.getSimpleName());\n\n    try {\n      if (this.applicationId.isPresent() && !this.applicationCompleted && !this.detachOnExitEnabled) {\n        \r\n        sendShutdownRequest();\n      }\n\n      if (this.serviceManager.isPresent()) {\n        this.serviceManager.get().stopAsync().awaitStopped(5, TimeUnit.MINUTES);\n      }\n\n      ExecutorsUtils.shutdownExecutorService(this.applicationStatusMonitor, Optional.of(LOGGER), 5, TimeUnit.MINUTES);\n\n      stopYarnClient();\n\n      if (!this.detachOnExitEnabled) {\n        LOGGER.info(\"Disabling all live Helix instances..\");\n        disableLiveHelixInstances();\n      }\n\n      disconnectHelixManager();\n    } finally {\n      try {\n        if (this.applicationId.isPresent() && !this.detachOnExitEnabled) {\n          cleanUpAppWorkDirectory(this.applicationId.get());\n        }\n      } finally {\n        this.closer.close();\n      }\n    }\n\n    this.stopped = true;\n  }\n","date":"2020-06-02 23:08:22","endLine":449,"groupId":"10155","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"stop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/38/d4c38c82be34674e51e474ba979dcf61d57c23.src","preCode":"  public synchronized void stop() throws IOException, TimeoutException {\n    if (this.stopped) {\n      return;\n    }\n\n    LOGGER.info(\"Stopping the \" + GobblinYarnAppLauncher.class.getSimpleName());\n\n    try {\n      if (this.applicationId.isPresent() && !this.applicationCompleted) {\n        \r\n        sendShutdownRequest();\n      }\n\n      if (this.serviceManager.isPresent()) {\n        this.serviceManager.get().stopAsync().awaitStopped(5, TimeUnit.MINUTES);\n      }\n\n      ExecutorsUtils.shutdownExecutorService(this.applicationStatusMonitor, Optional.of(LOGGER), 5, TimeUnit.MINUTES);\n\n      stopYarnClient();\n\n      LOGGER.info(\"Disabling all live Helix instances..\");\n      disableLiveHelixInstances();\n\n      disconnectHelixManager();\n    } finally {\n      try {\n        if (this.applicationId.isPresent()) {\n          cleanUpAppWorkDirectory(this.applicationId.get());\n        }\n      } finally {\n        this.closer.close();\n      }\n    }\n\n    this.stopped = true;\n  }\n","realPath":"gobblin-yarn/src/main/java/org/apache/gobblin/yarn/GobblinYarnAppLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":3,"curCode":"  public synchronized void stop() throws IOException, TimeoutException {\n    if (this.stopped) {\n      return;\n    }\n\n    LOGGER.info(\"Stopping the \" + GobblinAWSClusterLauncher.class.getSimpleName());\n\n    try {\n      if (this.clusterId.isPresent()) {\n        sendShutdownRequest();\n      }\n\n      disconnectHelixManager();\n    } finally {\n      try {\n        if (this.clusterId.isPresent()) {\n          cleanUpClusterWorkDirectory(this.clusterId.get());\n        }\n      } finally {\n        this.closer.close();\n      }\n    }\n\n    this.countDownLatch.countDown();\n    this.stopped = true;\n  }\n","date":"2017-07-31 15:51:25","endLine":302,"groupId":"10155","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"stop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c2/b0d5db5a466fe7884f12f2885bd64d89b7ab45.src","preCode":"  public synchronized void stop() throws IOException, TimeoutException {\n    if (this.stopped) {\n      return;\n    }\n\n    LOGGER.info(\"Stopping the \" + GobblinAWSClusterLauncher.class.getSimpleName());\n\n    try {\n      if (this.clusterId.isPresent()) {\n        sendShutdownRequest();\n      }\n\n      disconnectHelixManager();\n    } finally {\n      try {\n        if (this.clusterId.isPresent()) {\n          cleanUpClusterWorkDirectory(this.clusterId.get());\n        }\n      } finally {\n        this.closer.close();\n      }\n    }\n\n    this.countDownLatch.countDown();\n    this.stopped = true;\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/GobblinAWSClusterLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"N"}],"commitId":"2747b8d31f022388fc6808d0fbea5177c343c644","commitMessage":"@@@[GOBBLIN-1175] Provide an option to all GobblinYarnAppLauncher to detach from Yarn application\n\nCloses #3020 from sv2000/azkabanIgnoreKill\n","date":"2020-06-02 23:08:22","modifiedFileCount":"3","status":"M","submitter":"sv2000"}]
