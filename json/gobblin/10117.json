[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public static void main(String[] args) throws Exception {\n    Options options = buildOptions();\n    try {\n      CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) || !cmd\n          .hasOption(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      Log4jConfigurationHelper.updateLog4jConfiguration(GobblinTaskRunner.class,\n          GobblinClusterConfigurationKeys.GOBBLIN_CLUSTER_LOG4J_CONFIGURATION_FILE,\n          GobblinClusterConfigurationKeys.GOBBLIN_CLUSTER_LOG4J_CONFIGURATION_FILE);\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      String applicationName = cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME);\n      String helixInstanceName = cmd.getOptionValue(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME);\n\n      GobblinTaskRunner gobblinWorkUnitRunner =\n          new GobblinTaskRunner(applicationName, helixInstanceName, getApplicationId(), getTaskRunnerId(),\n              ConfigFactory.load(), Optional.<Path>absent());\n      gobblinWorkUnitRunner.start();\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":492,"groupId":"6767","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/83/8abe69e1e94adca851a37ce219ce3636971776.src","preCode":"  public static void main(String[] args) throws Exception {\n    Options options = buildOptions();\n    try {\n      CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) || !cmd\n          .hasOption(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      Log4jConfigurationHelper.updateLog4jConfiguration(GobblinTaskRunner.class,\n          GobblinClusterConfigurationKeys.GOBBLIN_CLUSTER_LOG4J_CONFIGURATION_FILE,\n          GobblinClusterConfigurationKeys.GOBBLIN_CLUSTER_LOG4J_CONFIGURATION_FILE);\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      String applicationName = cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME);\n      String helixInstanceName = cmd.getOptionValue(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME);\n\n      GobblinTaskRunner gobblinWorkUnitRunner =\n          new GobblinTaskRunner(applicationName, helixInstanceName, getApplicationId(), getTaskRunnerId(),\n              ConfigFactory.load(), Optional.<Path>absent());\n      gobblinWorkUnitRunner.start();\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinTaskRunner.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":465,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      Log4jConfigHelper.updateLog4jConfiguration(GobblinAWSClusterManager.class,\n          GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      \r\n      \r\n      final String applicationId = \"1\";\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      try (GobblinAWSClusterManager clusterMaster = new GobblinAWSClusterManager(\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME), applicationId,\n          ConfigFactory.load(), Optional.of(new Path(appWorkDir)))) {\n\n        clusterMaster.start();\n      }\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":186,"groupId":"3100","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e1/8ca5b5fa0beb915dbfc272086cb8ea14e2e837.src","preCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      Log4jConfigHelper.updateLog4jConfiguration(GobblinAWSClusterManager.class,\n          GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      \r\n      \r\n      final String applicationId = \"1\";\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      try (GobblinAWSClusterManager clusterMaster = new GobblinAWSClusterManager(\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME), applicationId,\n          ConfigFactory.load(), Optional.of(new Path(appWorkDir)))) {\n\n        clusterMaster.start();\n      }\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/GobblinAWSClusterManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-08-11 14:05:36","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public static void main(String[] args) throws Exception {\n    Options options = buildOptions();\n    try {\n      CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) || !cmd\n          .hasOption(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      Log4jConfigurationHelper.updateLog4jConfiguration(GobblinTaskRunner.class,\n          GobblinClusterConfigurationKeys.GOBBLIN_CLUSTER_LOG4J_CONFIGURATION_FILE,\n          GobblinClusterConfigurationKeys.GOBBLIN_CLUSTER_LOG4J_CONFIGURATION_FILE);\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      String applicationName = cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME);\n      String helixInstanceName = cmd.getOptionValue(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME);\n\n      GobblinTaskRunner gobblinWorkUnitRunner =\n          new GobblinTaskRunner(applicationName, helixInstanceName, getApplicationId(), getTaskRunnerId(),\n              ConfigFactory.load(), Optional.<Path>absent());\n      gobblinWorkUnitRunner.start();\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":492,"groupId":"6767","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/83/8abe69e1e94adca851a37ce219ce3636971776.src","preCode":"  public static void main(String[] args) throws Exception {\n    Options options = buildOptions();\n    try {\n      CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) || !cmd\n          .hasOption(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      Log4jConfigurationHelper.updateLog4jConfiguration(GobblinTaskRunner.class,\n          GobblinClusterConfigurationKeys.GOBBLIN_CLUSTER_LOG4J_CONFIGURATION_FILE,\n          GobblinClusterConfigurationKeys.GOBBLIN_CLUSTER_LOG4J_CONFIGURATION_FILE);\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      String applicationName = cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME);\n      String helixInstanceName = cmd.getOptionValue(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME);\n\n      GobblinTaskRunner gobblinWorkUnitRunner =\n          new GobblinTaskRunner(applicationName, helixInstanceName, getApplicationId(), getTaskRunnerId(),\n              ConfigFactory.load(), Optional.<Path>absent());\n      gobblinWorkUnitRunner.start();\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinTaskRunner.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":465,"status":"N"},{"authorDate":"2017-08-11 14:05:36","commitOrder":2,"curCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      if (System.getProperty(\"log4j.configuration\") == null) {\n        Log4jConfigHelper.updateLog4jConfiguration(GobblinAWSClusterManager.class,\n                GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n      }\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      \r\n      \r\n      final String applicationId = \"1\";\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      try (GobblinAWSClusterManager clusterMaster = new GobblinAWSClusterManager(\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME), applicationId,\n          ConfigFactory.load(), Optional.of(new Path(appWorkDir)))) {\n\n        clusterMaster.start();\n      }\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","date":"2017-08-11 14:05:36","endLine":188,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/17/865df20b45819d7fbea2e057a8d84d01e0e553.src","preCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      Log4jConfigHelper.updateLog4jConfiguration(GobblinAWSClusterManager.class,\n          GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      \r\n      \r\n      final String applicationId = \"1\";\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      try (GobblinAWSClusterManager clusterMaster = new GobblinAWSClusterManager(\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME), applicationId,\n          ConfigFactory.load(), Optional.of(new Path(appWorkDir)))) {\n\n        clusterMaster.start();\n      }\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/GobblinAWSClusterManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"c111fa13116c69416e4fd4535d56a1132f90387f","commitMessage":"@@@[GOBBLIN-192] Allow log4j configuration to be specified on command line\n\nCurrently.  `GobblinAWSClusterManager` and\n`GobblinAWSTaskRunner` hardcodes the log4j\nconfiguration.  This PR allows\n`log4j.configuration` to be specified on the\ncommand line.  If so.  it overrides the hardcoded\nconfiguration.  This lets users bootstrap the AWS\ncluster on their own without relying on\n`GobblinAWSClusterLauncher`.\n\nCloses #2043 from\nkadaan/AllowOverrideOfLog4jConfig\n","date":"2017-08-11 14:05:36","modifiedFileCount":"2","status":"M","submitter":"Joel Baranick"},{"authorTime":"2017-08-11 14:05:36","codes":[{"authorDate":"2017-11-29 08:29:11","commitOrder":3,"curCode":"  public static void main(String[] args) throws Exception {\n    Options options = buildOptions();\n    try {\n      CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) || !cmd\n          .hasOption(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      String applicationName = cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME);\n      String helixInstanceName = cmd.getOptionValue(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME);\n\n      GobblinTaskRunner gobblinWorkUnitRunner =\n          new GobblinTaskRunner(applicationName, helixInstanceName, getApplicationId(), getTaskRunnerId(),\n              ConfigFactory.load(), Optional.<Path>absent());\n      gobblinWorkUnitRunner.start();\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","date":"2017-11-29 08:29:11","endLine":496,"groupId":"2021","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f8/6874b612faebcfe9b6fa7f3603c573ef6310c6.src","preCode":"  public static void main(String[] args) throws Exception {\n    Options options = buildOptions();\n    try {\n      CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) || !cmd\n          .hasOption(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      Log4jConfigurationHelper.updateLog4jConfiguration(GobblinTaskRunner.class,\n          GobblinClusterConfigurationKeys.GOBBLIN_CLUSTER_LOG4J_CONFIGURATION_FILE,\n          GobblinClusterConfigurationKeys.GOBBLIN_CLUSTER_LOG4J_CONFIGURATION_FILE);\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      String applicationName = cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME);\n      String helixInstanceName = cmd.getOptionValue(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME);\n\n      GobblinTaskRunner gobblinWorkUnitRunner =\n          new GobblinTaskRunner(applicationName, helixInstanceName, getApplicationId(), getTaskRunnerId(),\n              ConfigFactory.load(), Optional.<Path>absent());\n      gobblinWorkUnitRunner.start();\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinTaskRunner.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"M"},{"authorDate":"2017-08-11 14:05:36","commitOrder":3,"curCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      if (System.getProperty(\"log4j.configuration\") == null) {\n        Log4jConfigHelper.updateLog4jConfiguration(GobblinAWSClusterManager.class,\n                GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n      }\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      \r\n      \r\n      final String applicationId = \"1\";\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      try (GobblinAWSClusterManager clusterMaster = new GobblinAWSClusterManager(\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME), applicationId,\n          ConfigFactory.load(), Optional.of(new Path(appWorkDir)))) {\n\n        clusterMaster.start();\n      }\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","date":"2017-08-11 14:05:36","endLine":188,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/17/865df20b45819d7fbea2e057a8d84d01e0e553.src","preCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      if (System.getProperty(\"log4j.configuration\") == null) {\n        Log4jConfigHelper.updateLog4jConfiguration(GobblinAWSClusterManager.class,\n                GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n      }\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      \r\n      \r\n      final String applicationId = \"1\";\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      try (GobblinAWSClusterManager clusterMaster = new GobblinAWSClusterManager(\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME), applicationId,\n          ConfigFactory.load(), Optional.of(new Path(appWorkDir)))) {\n\n        clusterMaster.start();\n      }\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/GobblinAWSClusterManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"}],"commitId":"98ca09210f10fe42f09c162934c071cc1449c946","commitMessage":"@@@[GOBBLIN-322] The cluster mode failed to find a log4j config file\n\nIssue:\n\nWhen running the bin/gobblin-cluster-master.sh\nI got an exception below:\nException in thread \"main\"\njava.io.FileNotFoundException: log4j-\ncluster.properties (No such file or directory)\nat java.io.FileInputStream.open0(Native Method)\nat java.io.FileInputStream.open(FileInputStream.ja\nva:195)\nat java.io.FileInputStream.<init>(FileInputStream.\njava:138)\nat java.io.FileInputStream.<init>(FileInputStream.\njava:93)\nat org.apache.gobblin.util.logs.Log4jConfiguration\nHelper.updateLog4jConfiguration(Log4jConfiguration\nHelper.java:51)\nat org.apache.gobblin.cluster.GobblinClusterManage\nr.main(GobblinClusterManager.java:724)\nbin/gobblin-cluster-worker.sh has a similar issue.\n\nAnalysis:\n\npublic static void\nupdateLog4jConfiguration(Class<?> targetClass. \nString log4jPath.  String log4jFileName)\nthrows IOException {\nCloser closer = Closer.create();\ntry {\nInputStream fileInputStream = closer.register(new\nFileInputStream(log4jPath));\n\nThe caller passes a simple file name\nLog4jConfigurationHelper.updateLog4jConfiguration(\nGobblinClusterManager.class. \nGobblinClusterConfigurationKeys.GOBBLIN_CLUSTER_LO\nG4J_CONFIGURATION_FILE. \nGobblinClusterConfigurationKeys.GOBBLIN_CLUSTER_LO\nG4J_CONFIGURATION_FILE);\n\nSolution:\nThis logic can be removed.\n\nUsers can simply pass in a custom log4j\nconfiguration directly if needed.\ne.g.\n-Dlog4j.configuration=file:/Users/foo/oss/gobblin/\ntemp/my-log4j.properties\nOr\nadd a custom log4j.properties file in the class\npath.\n\nCloses #2173 from HappyRay/remove-log4j-update-\ncode\n","date":"2017-11-29 08:29:11","modifiedFileCount":"2","status":"M","submitter":"Ray Yang"},{"authorTime":"2017-08-11 14:05:36","codes":[{"authorDate":"2017-12-21 06:59:23","commitOrder":4,"curCode":"  public static void main(String[] args)\n      throws Exception {\n    Options options = buildOptions();\n    try {\n      CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) || !cmd\n          .hasOption(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      logger.info(JvmUtils.getJvmInputArguments());\n\n      String applicationName =\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME);\n      String helixInstanceName =\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME);\n\n      GobblinTaskRunner gobblinWorkUnitRunner =\n          new GobblinTaskRunner(applicationName, helixInstanceName, getApplicationId(),\n              getTaskRunnerId(), ConfigFactory.load(), Optional.<Path>absent());\n      gobblinWorkUnitRunner.start();\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","date":"2017-12-21 06:59:23","endLine":568,"groupId":"10117","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/25/80b0e99c4592c643add9d55e0223f00f4f9148.src","preCode":"  public static void main(String[] args)\n      throws Exception {\n    Options options = buildOptions();\n    try {\n      CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) || !cmd\n          .hasOption(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      String applicationName =\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME);\n      String helixInstanceName =\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME);\n\n      GobblinTaskRunner gobblinWorkUnitRunner =\n          new GobblinTaskRunner(applicationName, helixInstanceName, getApplicationId(),\n              getTaskRunnerId(), ConfigFactory.load(), Optional.<Path>absent());\n      gobblinWorkUnitRunner.start();\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinTaskRunner.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":542,"status":"M"},{"authorDate":"2017-08-11 14:05:36","commitOrder":4,"curCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      if (System.getProperty(\"log4j.configuration\") == null) {\n        Log4jConfigHelper.updateLog4jConfiguration(GobblinAWSClusterManager.class,\n                GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n      }\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      \r\n      \r\n      final String applicationId = \"1\";\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      try (GobblinAWSClusterManager clusterMaster = new GobblinAWSClusterManager(\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME), applicationId,\n          ConfigFactory.load(), Optional.of(new Path(appWorkDir)))) {\n\n        clusterMaster.start();\n      }\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","date":"2017-08-11 14:05:36","endLine":188,"groupId":"10117","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/17/865df20b45819d7fbea2e057a8d84d01e0e553.src","preCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      if (System.getProperty(\"log4j.configuration\") == null) {\n        Log4jConfigHelper.updateLog4jConfiguration(GobblinAWSClusterManager.class,\n                GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n      }\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      \r\n      \r\n      final String applicationId = \"1\";\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      try (GobblinAWSClusterManager clusterMaster = new GobblinAWSClusterManager(\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME), applicationId,\n          ConfigFactory.load(), Optional.of(new Path(appWorkDir)))) {\n\n        clusterMaster.start();\n      }\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/GobblinAWSClusterManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"}],"commitId":"0fabaa7a4cb692222456ba3a41e6948f64684825","commitMessage":"@@@[GOBBLIN-336] Only start necessary services in cluster workers\n\nCloses #2225 from HappyRay/improve-task-runner\n","date":"2017-12-21 06:59:23","modifiedFileCount":"1","status":"M","submitter":"Ray Yang"}]
