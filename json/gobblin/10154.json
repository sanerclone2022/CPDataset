[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testSendShutdownRequest() throws Exception {\n    this.helixManager.connect();\n    this.helixManager.getMessagingService().registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE,\n        new TestShutdownMessageHandlerFactory(this));\n\n    this.gobblinYarnAppLauncher.connectHelixManager();\n    this.gobblinYarnAppLauncher.sendShutdownRequest();\n\n    Assert.assertEquals(this.curatorFramework.checkExists()\n        .forPath(String.format(\"/%s/CONTROLLER/MESSAGES\", GobblinYarnAppLauncherTest.class.getSimpleName()))\n        .getVersion(), 0);\n    YarnSecurityManagerTest.GetControllerMessageNumFunc getCtrlMessageNum =\n        new YarnSecurityManagerTest.GetControllerMessageNumFunc(GobblinYarnAppLauncherTest.class.getSimpleName(),\n            this.curatorFramework);\n    AssertWithBackoff assertWithBackoff =\n        AssertWithBackoff.create().logger(LoggerFactory.getLogger(\"testSendShutdownRequest\")).timeoutMs(20000);\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 1, \"1 controller message queued\");\n\n    \r\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 0, \"all controller messages processed\");\n  }\n","date":"2017-07-31 15:51:25","endLine":249,"groupId":"2727","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendShutdownRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/15/3e9bd962ba0838230292e4319bdbc66806d32d.src","preCode":"  public void testSendShutdownRequest() throws Exception {\n    this.helixManager.connect();\n    this.helixManager.getMessagingService().registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE,\n        new TestShutdownMessageHandlerFactory(this));\n\n    this.gobblinYarnAppLauncher.connectHelixManager();\n    this.gobblinYarnAppLauncher.sendShutdownRequest();\n\n    Assert.assertEquals(this.curatorFramework.checkExists()\n        .forPath(String.format(\"/%s/CONTROLLER/MESSAGES\", GobblinYarnAppLauncherTest.class.getSimpleName()))\n        .getVersion(), 0);\n    YarnSecurityManagerTest.GetControllerMessageNumFunc getCtrlMessageNum =\n        new YarnSecurityManagerTest.GetControllerMessageNumFunc(GobblinYarnAppLauncherTest.class.getSimpleName(),\n            this.curatorFramework);\n    AssertWithBackoff assertWithBackoff =\n        AssertWithBackoff.create().logger(LoggerFactory.getLogger(\"testSendShutdownRequest\")).timeoutMs(20000);\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 1, \"1 controller message queued\");\n\n    \r\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 0, \"all controller messages processed\");\n  }\n","realPath":"gobblin-yarn/src/test/java/org/apache/gobblin/yarn/GobblinYarnAppLauncherTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testSendShutdownRequest() throws Exception {\n    \r\n    this.helixManager.connect();\n    this.helixManager.getMessagingService().registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE,\n        new TestShutdownMessageHandlerFactory(this));\n\n    \r\n    this.gobblinAwsClusterLauncher.connectHelixManager();\n    this.gobblinAwsClusterLauncher.sendShutdownRequest();\n\n    Assert.assertEquals(this.curatorFramework.checkExists()\n        .forPath(String.format(\"/%s/CONTROLLER/MESSAGES\", this.helixClusterName)).getVersion(), 0);\n    GetControllerMessageNumFunc getCtrlMessageNum =\n        new GetControllerMessageNumFunc(this.helixClusterName, this.curatorFramework);\n\n    \r\n    AssertWithBackoff assertWithBackoff =\n        AssertWithBackoff.create().logger(LoggerFactory.getLogger(\"testSendShutdownRequest\")).timeoutMs(20000);\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 1, \"1 controller message queued\");\n\n    \r\n    \r\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 0, \"all controller messages processed\");\n  }\n","date":"2017-07-31 15:51:25","endLine":244,"groupId":"7044","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"testSendShutdownRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/94/ca55e8e2572432506f1212abedaf8b9c1f12fc.src","preCode":"  public void testSendShutdownRequest() throws Exception {\n    \r\n    this.helixManager.connect();\n    this.helixManager.getMessagingService().registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE,\n        new TestShutdownMessageHandlerFactory(this));\n\n    \r\n    this.gobblinAwsClusterLauncher.connectHelixManager();\n    this.gobblinAwsClusterLauncher.sendShutdownRequest();\n\n    Assert.assertEquals(this.curatorFramework.checkExists()\n        .forPath(String.format(\"/%s/CONTROLLER/MESSAGES\", this.helixClusterName)).getVersion(), 0);\n    GetControllerMessageNumFunc getCtrlMessageNum =\n        new GetControllerMessageNumFunc(this.helixClusterName, this.curatorFramework);\n\n    \r\n    AssertWithBackoff assertWithBackoff =\n        AssertWithBackoff.create().logger(LoggerFactory.getLogger(\"testSendShutdownRequest\")).timeoutMs(20000);\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 1, \"1 controller message queued\");\n\n    \r\n    \r\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 0, \"all controller messages processed\");\n  }\n","realPath":"gobblin-aws/src/test/java/org/apache/gobblin/aws/GobblinAWSClusterLauncherTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2020-01-15 07:15:09","commitOrder":2,"curCode":"  public void testSendShutdownRequest() throws Exception {\n    this.helixManager.connect();\n    this.helixManager.getMessagingService().registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE,\n        new TestShutdownMessageHandlerFactory(this));\n\n    this.gobblinYarnAppLauncher.connectHelixManager();\n    this.gobblinYarnAppLauncher.sendShutdownRequest();\n\n    Assert.assertEquals(this.curatorFramework.checkExists()\n        .forPath(String.format(\"/%s/CONTROLLER/MESSAGES\", GobblinYarnAppLauncherTest.class.getSimpleName()))\n        .getVersion(), 0);\n    YarnSecurityManagerTest.GetHelixMessageNumFunc getCtrlMessageNum =\n        new YarnSecurityManagerTest.GetHelixMessageNumFunc(GobblinYarnAppLauncherTest.class.getSimpleName(), InstanceType.CONTROLLER, \"\",\n            this.curatorFramework);\n    AssertWithBackoff assertWithBackoff =\n        AssertWithBackoff.create().logger(LoggerFactory.getLogger(\"testSendShutdownRequest\")).timeoutMs(20000);\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 1, \"1 controller message queued\");\n\n    \r\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 0, \"all controller messages processed\");\n\n    this.helixManagerManagedHelix.connect();\n    this.helixManagerManagedHelix.getMessagingService().registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE,\n        new TestShutdownMessageHandlerFactory(this));\n\n    this.gobblinYarnAppLauncherManagedHelix.connectHelixManager();\n    this.gobblinYarnAppLauncherManagedHelix.sendShutdownRequest();\n\n    Assert.assertEquals(this.curatorFramework.checkExists()\n        .forPath(String.format(\"/%s/INSTANCES/%s/MESSAGES\", this.configManagedHelix.getString(GobblinClusterConfigurationKeys.HELIX_CLUSTER_NAME_KEY), TEST_HELIX_INSTANCE_NAME_MANAGED))\n        .getVersion(), 0);\n    YarnSecurityManagerTest.GetHelixMessageNumFunc getInstanceMessageNum =\n        new YarnSecurityManagerTest.GetHelixMessageNumFunc(this.configManagedHelix.getString(\n            GobblinClusterConfigurationKeys.HELIX_CLUSTER_NAME_KEY),\n            InstanceType.PARTICIPANT, TEST_HELIX_INSTANCE_NAME_MANAGED, this.curatorFramework);\n    assertWithBackoff =\n        AssertWithBackoff.create().logger(LoggerFactory.getLogger(\"testSendShutdownRequest\")).timeoutMs(20000);\n    assertWithBackoff.assertEquals(getInstanceMessageNum, 1, \"1 controller message queued\");\n\n    \r\n    assertWithBackoff.assertEquals(getInstanceMessageNum, 0, \"all controller messages processed\");\n  }\n","date":"2020-01-15 07:15:09","endLine":330,"groupId":"10154","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendShutdownRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/9c/37748bd738bf3aa4b4c4a80f5b4f8bfab022ca.src","preCode":"  public void testSendShutdownRequest() throws Exception {\n    this.helixManager.connect();\n    this.helixManager.getMessagingService().registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE,\n        new TestShutdownMessageHandlerFactory(this));\n\n    this.gobblinYarnAppLauncher.connectHelixManager();\n    this.gobblinYarnAppLauncher.sendShutdownRequest();\n\n    Assert.assertEquals(this.curatorFramework.checkExists()\n        .forPath(String.format(\"/%s/CONTROLLER/MESSAGES\", GobblinYarnAppLauncherTest.class.getSimpleName()))\n        .getVersion(), 0);\n    YarnSecurityManagerTest.GetControllerMessageNumFunc getCtrlMessageNum =\n        new YarnSecurityManagerTest.GetControllerMessageNumFunc(GobblinYarnAppLauncherTest.class.getSimpleName(),\n            this.curatorFramework);\n    AssertWithBackoff assertWithBackoff =\n        AssertWithBackoff.create().logger(LoggerFactory.getLogger(\"testSendShutdownRequest\")).timeoutMs(20000);\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 1, \"1 controller message queued\");\n\n    \r\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 0, \"all controller messages processed\");\n  }\n","realPath":"gobblin-yarn/src/test/java/org/apache/gobblin/yarn/GobblinYarnAppLauncherTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void testSendShutdownRequest() throws Exception {\n    \r\n    this.helixManager.connect();\n    this.helixManager.getMessagingService().registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE,\n        new TestShutdownMessageHandlerFactory(this));\n\n    \r\n    this.gobblinAwsClusterLauncher.connectHelixManager();\n    this.gobblinAwsClusterLauncher.sendShutdownRequest();\n\n    Assert.assertEquals(this.curatorFramework.checkExists()\n        .forPath(String.format(\"/%s/CONTROLLER/MESSAGES\", this.helixClusterName)).getVersion(), 0);\n    GetControllerMessageNumFunc getCtrlMessageNum =\n        new GetControllerMessageNumFunc(this.helixClusterName, this.curatorFramework);\n\n    \r\n    AssertWithBackoff assertWithBackoff =\n        AssertWithBackoff.create().logger(LoggerFactory.getLogger(\"testSendShutdownRequest\")).timeoutMs(20000);\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 1, \"1 controller message queued\");\n\n    \r\n    \r\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 0, \"all controller messages processed\");\n  }\n","date":"2017-07-31 15:51:25","endLine":244,"groupId":"10154","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testSendShutdownRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/94/ca55e8e2572432506f1212abedaf8b9c1f12fc.src","preCode":"  public void testSendShutdownRequest() throws Exception {\n    \r\n    this.helixManager.connect();\n    this.helixManager.getMessagingService().registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE,\n        new TestShutdownMessageHandlerFactory(this));\n\n    \r\n    this.gobblinAwsClusterLauncher.connectHelixManager();\n    this.gobblinAwsClusterLauncher.sendShutdownRequest();\n\n    Assert.assertEquals(this.curatorFramework.checkExists()\n        .forPath(String.format(\"/%s/CONTROLLER/MESSAGES\", this.helixClusterName)).getVersion(), 0);\n    GetControllerMessageNumFunc getCtrlMessageNum =\n        new GetControllerMessageNumFunc(this.helixClusterName, this.curatorFramework);\n\n    \r\n    AssertWithBackoff assertWithBackoff =\n        AssertWithBackoff.create().logger(LoggerFactory.getLogger(\"testSendShutdownRequest\")).timeoutMs(20000);\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 1, \"1 controller message queued\");\n\n    \r\n    \r\n    assertWithBackoff.assertEquals(getCtrlMessageNum, 0, \"all controller messages processed\");\n  }\n","realPath":"gobblin-aws/src/test/java/org/apache/gobblin/aws/GobblinAWSClusterLauncherTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"}],"commitId":"ff0b417082d9e92634bb4c2719c8f3decb17491e","commitMessage":"@@@[GOBBLIN-1016] Allow Gobblin Application Master to join Helix cluster ?\n\nCloses #2863 from sv2000/sendShutdown\n","date":"2020-01-15 07:15:09","modifiedFileCount":"7","status":"M","submitter":"sv2000"}]
