[{"authorTime":"2019-11-09 03:16:16","codes":[{"authorDate":"2019-11-09 03:16:16","commitOrder":3,"curCode":"  void testFlowSlaWithConfig() throws Exception {\n    long flowExecutionId = System.currentTimeMillis();\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"4\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(flowExecutionId));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    Assert.assertEquals(dagManager.dagManagerThreads[queue].dagToSLA.get(dagId).longValue(), TimeUnit.SECONDS.toMillis(7L));\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","date":"2019-11-09 03:16:16","endLine":215,"groupId":"5509","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlowSlaWithConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ae/9877f27bed307294803b5e6eb4e520d78a5312.src","preCode":"  void testFlowSlaWithConfig() throws Exception {\n    long flowExecutionId = System.currentTimeMillis();\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"4\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(flowExecutionId));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    Assert.assertEquals(dagManager.dagManagerThreads[queue].dagToSLA.get(dagId).longValue(), TimeUnit.SECONDS.toMillis(7L));\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerFlowTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"MB"},{"authorDate":"2019-11-09 03:16:16","commitOrder":3,"curCode":"  void testOrphanFlowKill() throws Exception {\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\", 234567891L, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(234567891L));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_START_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_START_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    Mockito.doReturn(DagManagerTest.getMockJobStatus(\"flow6\", \"group6\", 234567891L,\n        \"group0\", \"job0\", String.valueOf(ExecutionStatus.ORCHESTRATED)))\n        .when(dagManager.getJobStatusRetriever()).getJobStatusesForFlowExecution(\"flow6\", \"group6\",\n        234567891L, \"job0\", \"group6\");\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","date":"2019-11-09 03:16:16","endLine":256,"groupId":"7768","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrphanFlowKill","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ae/9877f27bed307294803b5e6eb4e520d78a5312.src","preCode":"  void testOrphanFlowKill() throws Exception {\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\", 234567891L, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(234567891L));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_START_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_START_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    Mockito.doReturn(DagManagerTest.getMockJobStatus(\"flow6\", \"group6\", 234567891L,\n        \"group0\", \"job0\", String.valueOf(ExecutionStatus.ORCHESTRATED)))\n        .when(dagManager.getJobStatusRetriever()).getJobStatusesForFlowExecution(\"flow6\", \"group6\",\n        234567891L, \"job0\", \"group6\");\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerFlowTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"MB"}],"commitId":"66376ec7a57df20adc6cd097da0fffb86bd19f68","commitMessage":"@@@[GOBBLIN-950] Avoid persisting dag right after loading it on startup\n\nCloses #2798 from jack-moseley/dag-optimizations\n","date":"2019-11-09 03:16:16","modifiedFileCount":"3","status":"M","submitter":"Jack Moseley"},{"authorTime":"2019-11-26 06:45:06","codes":[{"authorDate":"2019-11-09 03:16:16","commitOrder":4,"curCode":"  void testFlowSlaWithConfig() throws Exception {\n    long flowExecutionId = System.currentTimeMillis();\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"4\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(flowExecutionId));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    Assert.assertEquals(dagManager.dagManagerThreads[queue].dagToSLA.get(dagId).longValue(), TimeUnit.SECONDS.toMillis(7L));\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","date":"2019-11-09 03:16:16","endLine":215,"groupId":"5509","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlowSlaWithConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ae/9877f27bed307294803b5e6eb4e520d78a5312.src","preCode":"  void testFlowSlaWithConfig() throws Exception {\n    long flowExecutionId = System.currentTimeMillis();\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"4\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(flowExecutionId));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    Assert.assertEquals(dagManager.dagManagerThreads[queue].dagToSLA.get(dagId).longValue(), TimeUnit.SECONDS.toMillis(7L));\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerFlowTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"},{"authorDate":"2019-11-26 06:45:06","commitOrder":4,"curCode":"  void testOrphanFlowKill() throws Exception {\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\", 234567891L, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(234567891L));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    Mockito.doReturn(DagManagerTest.getMockJobStatus(\"flow6\", \"group6\", 234567891L,\n        \"group0\", \"job0\", String.valueOf(ExecutionStatus.ORCHESTRATED)))\n        .when(dagManager.getJobStatusRetriever()).getJobStatusesForFlowExecution(\"flow6\", \"group6\",\n        234567891L, \"job0\", \"group6\");\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","date":"2019-11-26 06:45:06","endLine":256,"groupId":"7768","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrphanFlowKill","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ed/c881f9a2de3c9ed070cc5fb95885255f0f7bac.src","preCode":"  void testOrphanFlowKill() throws Exception {\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\", 234567891L, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(234567891L));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_START_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_START_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    Mockito.doReturn(DagManagerTest.getMockJobStatus(\"flow6\", \"group6\", 234567891L,\n        \"group0\", \"job0\", String.valueOf(ExecutionStatus.ORCHESTRATED)))\n        .when(dagManager.getJobStatusRetriever()).getJobStatusesForFlowExecution(\"flow6\", \"group6\",\n        234567891L, \"job0\", \"group6\");\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerFlowTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"}],"commitId":"10b73339187e85c03924143d923699e9bfc9b770","commitMessage":"@@@[GOBBLIN-978] Use job start time instead of flow start time to kill jobs stuck in ORCHESTRATED state[]\n\nCloses #2825 from sv2000/killOrphanedJob\n","date":"2019-11-26 06:45:06","modifiedFileCount":"7","status":"M","submitter":"sv2000"},{"authorTime":"2020-08-30 09:03:54","codes":[{"authorDate":"2019-11-09 03:16:16","commitOrder":5,"curCode":"  void testFlowSlaWithConfig() throws Exception {\n    long flowExecutionId = System.currentTimeMillis();\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"4\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(flowExecutionId));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    Assert.assertEquals(dagManager.dagManagerThreads[queue].dagToSLA.get(dagId).longValue(), TimeUnit.SECONDS.toMillis(7L));\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","date":"2019-11-09 03:16:16","endLine":215,"groupId":"5509","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlowSlaWithConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ae/9877f27bed307294803b5e6eb4e520d78a5312.src","preCode":"  void testFlowSlaWithConfig() throws Exception {\n    long flowExecutionId = System.currentTimeMillis();\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"4\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(flowExecutionId));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    Assert.assertEquals(dagManager.dagManagerThreads[queue].dagToSLA.get(dagId).longValue(), TimeUnit.SECONDS.toMillis(7L));\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerFlowTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"},{"authorDate":"2020-08-30 09:03:54","commitOrder":5,"curCode":"  void testOrphanFlowKill() throws Exception {\n    Long flowExecutionId = System.currentTimeMillis() - TimeUnit.SECONDS.toMillis(10);\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    Mockito.doReturn(DagManagerTest.getMockJobStatus(\"flow6\", \"group6\", flowExecutionId,\n        \"group6\", \"job0\", String.valueOf(ExecutionStatus.ORCHESTRATED)))\n        .when(dagManager.getJobStatusRetriever()).getJobStatusesForFlowExecution(\"flow6\", \"group6\",\n        flowExecutionId, \"job0\", \"group6\");\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","date":"2020-08-30 09:03:54","endLine":258,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrphanFlowKill","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ec/d90faa2bb1a65a2eb72d3851f7fc7a357d61d7.src","preCode":"  void testOrphanFlowKill() throws Exception {\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\", 234567891L, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(234567891L));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    Mockito.doReturn(DagManagerTest.getMockJobStatus(\"flow6\", \"group6\", 234567891L,\n        \"group0\", \"job0\", String.valueOf(ExecutionStatus.ORCHESTRATED)))\n        .when(dagManager.getJobStatusRetriever()).getJobStatusesForFlowExecution(\"flow6\", \"group6\",\n        234567891L, \"job0\", \"group6\");\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerFlowTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"05f5640d557c4d6c4a9ddf4d986dcad6563e7a2f","commitMessage":"@@@[GOBBLIN-1252] Provide a default flow SLA for Gobblin Service flows[]\n\nCloses #3093 from sv2000/flowSla\n","date":"2020-08-30 09:03:54","modifiedFileCount":"5","status":"M","submitter":"sv2000"},{"authorTime":"2021-01-15 04:11:22","codes":[{"authorDate":"2021-01-15 04:11:22","commitOrder":6,"curCode":"  void testFlowSlaWithConfig() throws Exception {\n    long flowExecutionId = System.currentTimeMillis();\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"4\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(flowExecutionId));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    Assert.assertEquals(dagManager.dagManagerThreads[queue].dagToSLA.get(dagId).longValue(), TimeUnit.SECONDS.toMillis(7L));\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","date":"2021-01-15 04:11:22","endLine":219,"groupId":"5509","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlowSlaWithConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f9/b8bd916f2a43a1968df8fbba5c3dd87cca2bc6.src","preCode":"  void testFlowSlaWithConfig() throws Exception {\n    long flowExecutionId = System.currentTimeMillis();\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"4\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(flowExecutionId));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    Assert.assertEquals(dagManager.dagManagerThreads[queue].dagToSLA.get(dagId).longValue(), TimeUnit.SECONDS.toMillis(7L));\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerFlowTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"},{"authorDate":"2021-01-15 04:11:22","commitOrder":6,"curCode":"  void testOrphanFlowKill() throws Exception {\n    Long flowExecutionId = System.currentTimeMillis() - TimeUnit.SECONDS.toMillis(10);\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    Mockito.doReturn(DagManagerTest.getMockJobStatus(\"flow6\", \"group6\", flowExecutionId,\n        \"group6\", \"job0\", String.valueOf(ExecutionStatus.ORCHESTRATED)))\n        .when(dagManager.getJobStatusRetriever()).getJobStatusesForFlowExecution(\"flow6\", \"group6\",\n        flowExecutionId, \"job0\", \"group6\");\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","date":"2021-01-15 04:11:22","endLine":258,"groupId":"440","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrphanFlowKill","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f9/b8bd916f2a43a1968df8fbba5c3dd87cca2bc6.src","preCode":"  void testOrphanFlowKill() throws Exception {\n    Long flowExecutionId = System.currentTimeMillis() - TimeUnit.SECONDS.toMillis(10);\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    Mockito.doReturn(DagManagerTest.getMockJobStatus(\"flow6\", \"group6\", flowExecutionId,\n        \"group6\", \"job0\", String.valueOf(ExecutionStatus.ORCHESTRATED)))\n        .when(dagManager.getJobStatusRetriever()).getJobStatusesForFlowExecution(\"flow6\", \"group6\",\n        flowExecutionId, \"job0\", \"group6\");\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerFlowTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"4e9326bd96ab9b5ec05dd1cd5e8010a7d6175f0c","commitMessage":"@@@[GOBBLIN-1342] Add API to resume a flow\n\nAdd API to resume a flow\n\nAddress comments\n\nCloses #3179 from jack-moseley/resume-flow\n","date":"2021-01-15 04:11:22","modifiedFileCount":"17","status":"M","submitter":"Jack Moseley"},{"authorTime":"2021-05-11 08:15:28","codes":[{"authorDate":"2021-05-11 08:15:28","commitOrder":7,"curCode":"  void testFlowSlaWithConfig() throws Exception {\n    long flowExecutionId = System.currentTimeMillis();\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"4\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(flowExecutionId));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    Assert.assertEquals(dagManager.dagManagerThreads[queue].dagToSLA.get(dagId).longValue(), TimeUnit.SECONDS.toMillis(7L));\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new CancelPredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","date":"2021-05-11 08:15:28","endLine":219,"groupId":"101070","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlowSlaWithConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/67/ade4353b341bf71cd4f2b3f34d8dd8a6967bc6.src","preCode":"  void testFlowSlaWithConfig() throws Exception {\n    long flowExecutionId = System.currentTimeMillis();\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"4\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    when(this.dagManager.getJobStatusRetriever().getLatestExecutionIdsForFlow(eq(\"flow4\"), eq(\"group4\"), anyInt()))\n        .thenReturn(Collections.singletonList(flowExecutionId));\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_FLOW_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    Assert.assertEquals(dagManager.dagManagerThreads[queue].dagToSLA.get(dagId).longValue(), TimeUnit.SECONDS.toMillis(7L));\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerFlowTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"},{"authorDate":"2021-05-11 08:15:28","commitOrder":7,"curCode":"  void testOrphanFlowKill() throws Exception {\n    Long flowExecutionId = System.currentTimeMillis() - TimeUnit.SECONDS.toMillis(10);\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    Mockito.doReturn(DagManagerTest.getMockJobStatus(\"flow6\", \"group6\", flowExecutionId,\n        \"group6\", \"job0\", String.valueOf(ExecutionStatus.ORCHESTRATED)))\n        .when(dagManager.getJobStatusRetriever()).getJobStatusesForFlowExecution(\"flow6\", \"group6\",\n        flowExecutionId, \"job0\", \"group6\");\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new CancelPredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","date":"2021-05-11 08:15:28","endLine":258,"groupId":"101070","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testOrphanFlowKill","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/67/ade4353b341bf71cd4f2b3f34d8dd8a6967bc6.src","preCode":"  void testOrphanFlowKill() throws Exception {\n    Long flowExecutionId = System.currentTimeMillis() - TimeUnit.SECONDS.toMillis(10);\n    Dag<JobExecutionPlan> dag = DagManagerTest.buildDag(\"6\", flowExecutionId, \"FINISH_RUNNING\", 1);\n    String dagId = DagManagerUtils.generateDagId(dag);\n    int queue = DagManagerUtils.getDagQueueId(dag, dagNumThreads);\n\n    \r\n    Config jobConfig = dag.getStartNodes().get(0).getValue().getJobSpec().getConfig();\n    jobConfig = jobConfig\n        .withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME, ConfigValueFactory.fromAnyRef(\"7\"))\n        .withValue(ConfigurationKeys.GOBBLIN_JOB_START_SLA_TIME_UNIT, ConfigValueFactory.fromAnyRef(TimeUnit.SECONDS.name()));\n    dag.getStartNodes().get(0).getValue().getJobSpec().setConfig(jobConfig);\n\n    \r\n    dagManager.addDag(dag, true, true);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n\n    Mockito.doReturn(DagManagerTest.getMockJobStatus(\"flow6\", \"group6\", flowExecutionId,\n        \"group6\", \"job0\", String.valueOf(ExecutionStatus.ORCHESTRATED)))\n        .when(dagManager.getJobStatusRetriever()).getJobStatusesForFlowExecution(\"flow6\", \"group6\",\n        flowExecutionId, \"job0\", \"group6\");\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> dagManager.dagManagerThreads[queue].dagToJobs.containsKey(dagId), ERROR_MESSAGE);\n\n    \r\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).assertTrue(new DeletePredicate(dag), ERROR_MESSAGE);\n\n    \r\n    AssertWithBackoff.create().maxSleepMs(5000).backoffFactor(1).\n        assertTrue(input -> !dagManager.dagManagerThreads[queue].dagToSLA.containsKey(dagId), ERROR_MESSAGE);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerFlowTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"6dd91a0707e93ca68c96f0b11e0204dbb6a0525d","commitMessage":"@@@[GOBBLIN-1437] cleaning/refactoring flowConfig/delete and flowExecutions/delete code\n\nCloses #3275 from arjun4084346/deleteKillSemantics\n","date":"2021-05-11 08:15:28","modifiedFileCount":"6","status":"M","submitter":"Arjun"}]
