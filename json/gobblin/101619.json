[{"authorTime":"2017-08-10 23:55:40","codes":[{"authorDate":"2018-01-31 09:26:03","commitOrder":3,"curCode":"  public void testSetFsDatasets() throws URISyntaxException {\n    FileSystem originFs = mock(FileSystem.class);\n    String originFsUri = \"hdfs://source.company.biz:2000\";\n    String originPath = \"/data/databases/source/profile\";\n    when(originFs.getUri()).thenReturn(new URI(originFsUri));\n    when(originFs.getScheme()).thenReturn(\"hdfs\");\n\n    FileSystem targetFs = mock(FileSystem.class);\n    String targetFsUri = \"file:///\";\n    String destinationPath = \"/data/databases/destination/profile\";\n    when(targetFs.getUri()).thenReturn(new URI(targetFsUri));\n    when(targetFs.getScheme()).thenReturn(\"file\");\n\n    \r\n    FileStatus origin = new FileStatus(0l, false, 0, 0l, 0l, new Path(originPath));\n    CopyableFile copyableFile = new CopyableFile(origin, new Path(destinationPath), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0, 0, Maps.<String, String>newHashMap(), \"\");\n    copyableFile.setFsDatasets(originFs, targetFs);\n    DatasetDescriptor source = copyableFile.getSourceDataset();\n    Assert.assertEquals(source.getName(), \"/data/databases/source\");\n    Assert.assertEquals(source.getPlatform(), \"hdfs\");\n    Assert.assertEquals(source.getMetadata().get(\"fsUri\"), originFsUri);\n    DatasetDescriptor destination = copyableFile.getDestinationDataset();\n    Assert.assertEquals(destination.getName(), \"/data/databases/destination\");\n    Assert.assertEquals(destination.getPlatform(), \"file\");\n    Assert.assertEquals(destination.getMetadata().get(\"fsUri\"), targetFsUri);\n\n    \r\n    originPath = originFsUri + originPath;\n    destinationPath = targetFsUri + destinationPath;\n    origin = new FileStatus(0l, true, 0, 0l, 0l, new Path(originPath));\n    copyableFile = new CopyableFile(origin, new Path(destinationPath), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0, 0, Maps.<String, String>newHashMap(), \"\");\n    copyableFile.setFsDatasets(originFs, targetFs);\n    source = copyableFile.getSourceDataset();\n    Assert.assertEquals(source.getName(), \"/data/databases/source/profile\");\n    Assert.assertEquals(source.getPlatform(), \"hdfs\");\n    Assert.assertEquals(source.getMetadata().get(\"fsUri\"), originFsUri);\n    destination = copyableFile.getDestinationDataset();\n    Assert.assertEquals(destination.getName(), \"/data/databases/destination/profile\");\n    Assert.assertEquals(destination.getPlatform(), \"file\");\n    Assert.assertEquals(destination.getMetadata().get(\"fsUri\"), targetFsUri);\n  }\n","date":"2018-01-31 09:26:03","endLine":138,"groupId":"4622","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetFsDatasets","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/98/6efeb8a616ea9ff25d1b83d365e05860593009.src","preCode":"  public void testSetFsDatasets() throws URISyntaxException {\n    FileSystem originFs = mock(FileSystem.class);\n    String originFsUri = \"hdfs://source.company.biz:2000\";\n    String originPath = \"/data/databases/source/profile\";\n    when(originFs.getUri()).thenReturn(new URI(originFsUri));\n    when(originFs.getScheme()).thenReturn(\"hdfs\");\n\n    FileSystem targetFs = mock(FileSystem.class);\n    String targetFsUri = \"file:///\";\n    String destinationPath = \"/data/databases/destination/profile\";\n    when(targetFs.getUri()).thenReturn(new URI(targetFsUri));\n    when(targetFs.getScheme()).thenReturn(\"file\");\n\n    \r\n    FileStatus origin = new FileStatus(0l, false, 0, 0l, 0l, new Path(originPath));\n    CopyableFile copyableFile = new CopyableFile(origin, new Path(destinationPath), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0, 0, Maps.<String, String>newHashMap(), \"\");\n    copyableFile.setFsDatasets(originFs, targetFs);\n    DatasetDescriptor source = copyableFile.getSourceDataset();\n    Assert.assertEquals(source.getName(), \"/data/databases/source\");\n    Assert.assertEquals(source.getPlatform(), \"hdfs\");\n    Assert.assertEquals(source.getMetadata().get(\"fsUri\"), originFsUri);\n    DatasetDescriptor destination = copyableFile.getDestinationDataset();\n    Assert.assertEquals(destination.getName(), \"/data/databases/destination\");\n    Assert.assertEquals(destination.getPlatform(), \"file\");\n    Assert.assertEquals(destination.getMetadata().get(\"fsUri\"), targetFsUri);\n\n    \r\n    originPath = originFsUri + originPath;\n    destinationPath = targetFsUri + destinationPath;\n    origin = new FileStatus(0l, true, 0, 0l, 0l, new Path(originPath));\n    copyableFile = new CopyableFile(origin, new Path(destinationPath), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0, 0, Maps.<String, String>newHashMap(), \"\");\n    copyableFile.setFsDatasets(originFs, targetFs);\n    source = copyableFile.getSourceDataset();\n    Assert.assertEquals(source.getName(), \"/data/databases/source/profile\");\n    Assert.assertEquals(source.getPlatform(), \"hdfs\");\n    Assert.assertEquals(source.getMetadata().get(\"fsUri\"), originFsUri);\n    destination = copyableFile.getDestinationDataset();\n    Assert.assertEquals(destination.getName(), \"/data/databases/destination/profile\");\n    Assert.assertEquals(destination.getPlatform(), \"file\");\n    Assert.assertEquals(destination.getMetadata().get(\"fsUri\"), targetFsUri);\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/copy/CopyableFileTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"},{"authorDate":"2017-08-10 23:55:40","commitOrder":3,"curCode":"  public static CopyableFile createTestCopyableFile(String resourcePath) throws IOException {\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    fs.create(new Path(resourcePath));\n\n    FileStatus status = new FileStatus(0l, false, 0, 0l, 0l, new Path(resourcePath));\n\n    return new CopyableFile(status, new Path(getRandomPath()), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0 ,0, Maps.<String, String>newHashMap(), \"\");\n  }\n","date":"2017-08-10 23:55:40","endLine":43,"groupId":"6048","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestCopyableFile","params":"(StringresourcePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d8/cb9384e3b6d3979457b460423d87b908f2ccc3.src","preCode":"  public static CopyableFile createTestCopyableFile(String resourcePath) throws IOException {\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    fs.create(new Path(resourcePath));\n\n    FileStatus status = new FileStatus(0l, false, 0, 0l, 0l, new Path(resourcePath));\n\n    return new CopyableFile(status, new Path(getRandomPath()), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0 ,0, Maps.<String, String>newHashMap(), \"\");\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/copy/CopyableFileUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"NB"}],"commitId":"161bef09dd5cbbbb65f9f6965008c57b632fb075","commitMessage":"@@@[GOBBLIN-395] Add lineage for copying config based dataset\n\nCloses #2269 from zxcware/c2\n","date":"2018-01-31 09:26:03","modifiedFileCount":"5","status":"M","submitter":"zhchen"},{"authorTime":"2017-08-10 23:55:40","codes":[{"authorDate":"2018-09-12 00:14:46","commitOrder":4,"curCode":"  public void testSetFsDatasets() throws URISyntaxException {\n    FileSystem originFs = mock(FileSystem.class);\n    String originFsUri = \"hdfs://source.company.biz:2000\";\n    String originPath = \"/data/databases/source/profile\";\n    when(originFs.getUri()).thenReturn(new URI(originFsUri));\n    when(originFs.getScheme()).thenReturn(\"hdfs\");\n\n    FileSystem targetFs = mock(FileSystem.class);\n    String targetFsUri = \"file:///\";\n    String destinationPath = \"/data/databases/destination/profile\";\n    when(targetFs.getUri()).thenReturn(new URI(targetFsUri));\n    when(targetFs.getScheme()).thenReturn(\"file\");\n\n    \r\n    FileStatus origin = new FileStatus(0l, false, 0, 0l, 0l, new Path(originPath));\n    CopyableFile copyableFile = new CopyableFile(origin, new Path(destinationPath), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0, 0, Maps.<String, String>newHashMap(), \"\");\n    copyableFile.setFsDatasets(originFs, targetFs);\n    DatasetDescriptor source = (DatasetDescriptor) copyableFile.getSourceData();\n    Assert.assertEquals(source.getName(), \"/data/databases/source\");\n    Assert.assertEquals(source.getPlatform(), \"hdfs\");\n    Assert.assertEquals(source.getMetadata().get(\"fsUri\"), originFsUri);\n    DatasetDescriptor destination = (DatasetDescriptor) copyableFile.getDestinationData();\n    Assert.assertEquals(destination.getName(), \"/data/databases/destination\");\n    Assert.assertEquals(destination.getPlatform(), \"file\");\n    Assert.assertEquals(destination.getMetadata().get(\"fsUri\"), targetFsUri);\n\n    \r\n    originPath = originFsUri + originPath;\n    destinationPath = targetFsUri + destinationPath;\n    origin = new FileStatus(0l, true, 0, 0l, 0l, new Path(originPath));\n    copyableFile = new CopyableFile(origin, new Path(destinationPath), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0, 0, Maps.<String, String>newHashMap(), \"\");\n    copyableFile.setFsDatasets(originFs, targetFs);\n    source = (DatasetDescriptor) copyableFile.getSourceData();\n    Assert.assertEquals(source.getName(), \"/data/databases/source/profile\");\n    Assert.assertEquals(source.getPlatform(), \"hdfs\");\n    Assert.assertEquals(source.getMetadata().get(\"fsUri\"), originFsUri);\n    destination = (DatasetDescriptor) copyableFile.getDestinationData();\n    Assert.assertEquals(destination.getName(), \"/data/databases/destination/profile\");\n    Assert.assertEquals(destination.getPlatform(), \"file\");\n    Assert.assertEquals(destination.getMetadata().get(\"fsUri\"), targetFsUri);\n  }\n","date":"2018-09-12 00:14:46","endLine":143,"groupId":"4622","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSetFsDatasets","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/65/425fa2a96ee9d45d371b350344c0e7a53839aa.src","preCode":"  public void testSetFsDatasets() throws URISyntaxException {\n    FileSystem originFs = mock(FileSystem.class);\n    String originFsUri = \"hdfs://source.company.biz:2000\";\n    String originPath = \"/data/databases/source/profile\";\n    when(originFs.getUri()).thenReturn(new URI(originFsUri));\n    when(originFs.getScheme()).thenReturn(\"hdfs\");\n\n    FileSystem targetFs = mock(FileSystem.class);\n    String targetFsUri = \"file:///\";\n    String destinationPath = \"/data/databases/destination/profile\";\n    when(targetFs.getUri()).thenReturn(new URI(targetFsUri));\n    when(targetFs.getScheme()).thenReturn(\"file\");\n\n    \r\n    FileStatus origin = new FileStatus(0l, false, 0, 0l, 0l, new Path(originPath));\n    CopyableFile copyableFile = new CopyableFile(origin, new Path(destinationPath), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0, 0, Maps.<String, String>newHashMap(), \"\");\n    copyableFile.setFsDatasets(originFs, targetFs);\n    DatasetDescriptor source = copyableFile.getSourceDataset();\n    Assert.assertEquals(source.getName(), \"/data/databases/source\");\n    Assert.assertEquals(source.getPlatform(), \"hdfs\");\n    Assert.assertEquals(source.getMetadata().get(\"fsUri\"), originFsUri);\n    DatasetDescriptor destination = copyableFile.getDestinationDataset();\n    Assert.assertEquals(destination.getName(), \"/data/databases/destination\");\n    Assert.assertEquals(destination.getPlatform(), \"file\");\n    Assert.assertEquals(destination.getMetadata().get(\"fsUri\"), targetFsUri);\n\n    \r\n    originPath = originFsUri + originPath;\n    destinationPath = targetFsUri + destinationPath;\n    origin = new FileStatus(0l, true, 0, 0l, 0l, new Path(originPath));\n    copyableFile = new CopyableFile(origin, new Path(destinationPath), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0, 0, Maps.<String, String>newHashMap(), \"\");\n    copyableFile.setFsDatasets(originFs, targetFs);\n    source = copyableFile.getSourceDataset();\n    Assert.assertEquals(source.getName(), \"/data/databases/source/profile\");\n    Assert.assertEquals(source.getPlatform(), \"hdfs\");\n    Assert.assertEquals(source.getMetadata().get(\"fsUri\"), originFsUri);\n    destination = copyableFile.getDestinationDataset();\n    Assert.assertEquals(destination.getName(), \"/data/databases/destination/profile\");\n    Assert.assertEquals(destination.getPlatform(), \"file\");\n    Assert.assertEquals(destination.getMetadata().get(\"fsUri\"), targetFsUri);\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/copy/CopyableFileTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2017-08-10 23:55:40","commitOrder":4,"curCode":"  public static CopyableFile createTestCopyableFile(String resourcePath) throws IOException {\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    fs.create(new Path(resourcePath));\n\n    FileStatus status = new FileStatus(0l, false, 0, 0l, 0l, new Path(resourcePath));\n\n    return new CopyableFile(status, new Path(getRandomPath()), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0 ,0, Maps.<String, String>newHashMap(), \"\");\n  }\n","date":"2017-08-10 23:55:40","endLine":43,"groupId":"6048","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createTestCopyableFile","params":"(StringresourcePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d8/cb9384e3b6d3979457b460423d87b908f2ccc3.src","preCode":"  public static CopyableFile createTestCopyableFile(String resourcePath) throws IOException {\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    fs.create(new Path(resourcePath));\n\n    FileStatus status = new FileStatus(0l, false, 0, 0l, 0l, new Path(resourcePath));\n\n    return new CopyableFile(status, new Path(getRandomPath()), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0 ,0, Maps.<String, String>newHashMap(), \"\");\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/copy/CopyableFileUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"N"}],"commitId":"29d403aec044756ad711b4bce5a7395d01168439","commitMessage":"@@@[GOBBLIN-576] Send partition level lineage in hive distcp\n\nCloses #2442 from zxcware/pd\n","date":"2018-09-12 00:14:46","modifiedFileCount":"7","status":"M","submitter":"zhchen"},{"authorTime":"2019-04-25 02:24:24","codes":[{"authorDate":"2019-04-25 02:24:24","commitOrder":5,"curCode":"  public void testSetFsDatasets() throws URISyntaxException {\n    FileSystem originFs = mock(FileSystem.class);\n    String originFsUri = \"hdfs://source.company.biz:2000\";\n    String originPath = \"/data/databases/source/profile\";\n    when(originFs.getUri()).thenReturn(new URI(originFsUri));\n    when(originFs.getScheme()).thenReturn(\"hdfs\");\n\n    FileSystem targetFs = mock(FileSystem.class);\n    String targetFsUri = \"file:///\";\n    String destinationPath = \"/data/databases/destination/profile\";\n    when(targetFs.getUri()).thenReturn(new URI(targetFsUri));\n    when(targetFs.getScheme()).thenReturn(\"file\");\n\n    \r\n    FileStatus origin = new FileStatus(0l, false, 0, 0l, 0l, new Path(originPath));\n    CopyableFile copyableFile = new CopyableFile(origin, new Path(destinationPath), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0, 0, Maps.<String, String>newHashMap(), \"\", null);\n    copyableFile.setFsDatasets(originFs, targetFs);\n    DatasetDescriptor source = (DatasetDescriptor) copyableFile.getSourceData();\n    Assert.assertEquals(source.getName(), \"/data/databases/source\");\n    Assert.assertEquals(source.getPlatform(), \"hdfs\");\n    Assert.assertEquals(source.getMetadata().get(\"fsUri\"), originFsUri);\n    DatasetDescriptor destination = (DatasetDescriptor) copyableFile.getDestinationData();\n    Assert.assertEquals(destination.getName(), \"/data/databases/destination\");\n    Assert.assertEquals(destination.getPlatform(), \"file\");\n    Assert.assertEquals(destination.getMetadata().get(\"fsUri\"), targetFsUri);\n\n    \r\n    originPath = originFsUri + originPath;\n    destinationPath = targetFsUri + destinationPath;\n    origin = new FileStatus(0l, true, 0, 0l, 0l, new Path(originPath));\n    copyableFile = new CopyableFile(origin, new Path(destinationPath), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0, 0, Maps.<String, String>newHashMap(), \"\", null);\n    copyableFile.setFsDatasets(originFs, targetFs);\n    source = (DatasetDescriptor) copyableFile.getSourceData();\n    Assert.assertEquals(source.getName(), \"/data/databases/source/profile\");\n    Assert.assertEquals(source.getPlatform(), \"hdfs\");\n    Assert.assertEquals(source.getMetadata().get(\"fsUri\"), originFsUri);\n    destination = (DatasetDescriptor) copyableFile.getDestinationData();\n    Assert.assertEquals(destination.getName(), \"/data/databases/destination/profile\");\n    Assert.assertEquals(destination.getPlatform(), \"file\");\n    Assert.assertEquals(destination.getMetadata().get(\"fsUri\"), targetFsUri);\n  }\n","date":"2019-04-25 02:24:24","endLine":143,"groupId":"101619","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testSetFsDatasets","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/5c/8ac96b5374e3741f9f1b721c5af429ceda2780.src","preCode":"  public void testSetFsDatasets() throws URISyntaxException {\n    FileSystem originFs = mock(FileSystem.class);\n    String originFsUri = \"hdfs://source.company.biz:2000\";\n    String originPath = \"/data/databases/source/profile\";\n    when(originFs.getUri()).thenReturn(new URI(originFsUri));\n    when(originFs.getScheme()).thenReturn(\"hdfs\");\n\n    FileSystem targetFs = mock(FileSystem.class);\n    String targetFsUri = \"file:///\";\n    String destinationPath = \"/data/databases/destination/profile\";\n    when(targetFs.getUri()).thenReturn(new URI(targetFsUri));\n    when(targetFs.getScheme()).thenReturn(\"file\");\n\n    \r\n    FileStatus origin = new FileStatus(0l, false, 0, 0l, 0l, new Path(originPath));\n    CopyableFile copyableFile = new CopyableFile(origin, new Path(destinationPath), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0, 0, Maps.<String, String>newHashMap(), \"\");\n    copyableFile.setFsDatasets(originFs, targetFs);\n    DatasetDescriptor source = (DatasetDescriptor) copyableFile.getSourceData();\n    Assert.assertEquals(source.getName(), \"/data/databases/source\");\n    Assert.assertEquals(source.getPlatform(), \"hdfs\");\n    Assert.assertEquals(source.getMetadata().get(\"fsUri\"), originFsUri);\n    DatasetDescriptor destination = (DatasetDescriptor) copyableFile.getDestinationData();\n    Assert.assertEquals(destination.getName(), \"/data/databases/destination\");\n    Assert.assertEquals(destination.getPlatform(), \"file\");\n    Assert.assertEquals(destination.getMetadata().get(\"fsUri\"), targetFsUri);\n\n    \r\n    originPath = originFsUri + originPath;\n    destinationPath = targetFsUri + destinationPath;\n    origin = new FileStatus(0l, true, 0, 0l, 0l, new Path(originPath));\n    copyableFile = new CopyableFile(origin, new Path(destinationPath), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0, 0, Maps.<String, String>newHashMap(), \"\");\n    copyableFile.setFsDatasets(originFs, targetFs);\n    source = (DatasetDescriptor) copyableFile.getSourceData();\n    Assert.assertEquals(source.getName(), \"/data/databases/source/profile\");\n    Assert.assertEquals(source.getPlatform(), \"hdfs\");\n    Assert.assertEquals(source.getMetadata().get(\"fsUri\"), originFsUri);\n    destination = (DatasetDescriptor) copyableFile.getDestinationData();\n    Assert.assertEquals(destination.getName(), \"/data/databases/destination/profile\");\n    Assert.assertEquals(destination.getPlatform(), \"file\");\n    Assert.assertEquals(destination.getMetadata().get(\"fsUri\"), targetFsUri);\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/copy/CopyableFileTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2019-04-25 02:24:24","commitOrder":5,"curCode":"  public static CopyableFile createTestCopyableFile(String resourcePath) throws IOException {\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    fs.create(new Path(resourcePath));\n\n    FileStatus status = new FileStatus(0l, false, 0, 0l, 0l, new Path(resourcePath));\n\n    return new CopyableFile(status, new Path(getRandomPath()), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0 ,0, Maps.<String, String>newHashMap(), \"\", null);\n  }\n","date":"2019-04-25 02:24:24","endLine":43,"groupId":"101619","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"createTestCopyableFile","params":"(StringresourcePath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4e/85d5a74dde5ac94defc925b68885a96d23defa.src","preCode":"  public static CopyableFile createTestCopyableFile(String resourcePath) throws IOException {\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    fs.create(new Path(resourcePath));\n\n    FileStatus status = new FileStatus(0l, false, 0, 0l, 0l, new Path(resourcePath));\n\n    return new CopyableFile(status, new Path(getRandomPath()), null, null, null,\n        PreserveAttributes.fromMnemonicString(\"\"), \"\", 0 ,0, Maps.<String, String>newHashMap(), \"\");\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/copy/CopyableFileUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"67e986e92337fe41bcb975d6f212ab4582dbf4dd","commitMessage":"@@@[GOBBLIN-751] Make enforced file size matching to be configurable\n\nMake enforced file size matching to be\nconfigurable.\n\nDear Gobblin maintainers. \n\nPlease accept this PR. I understand that it will\nnot be reviewed until I have checked off all the\nsteps below!\n\n\n JIRA\n- [x] My PR addresses the following [Gobblin JIRA]\n(https://issues.apache.org/jira/browse/GOBBLIN/)\nissues and references them in the PR title. For\nexample.  \"[GOBBLIN-XXX] My Gobblin PR\"\n    -\nhttps://issues.apache.org/jira/browse/GOBBLIN-751\n\n\n Description\n- [x] Here are some details about my PR.  including\nscreenshots (if applicable):\n  For better rollout (selectively rollout a few\ndatasets for validation)\n   (1)This PR makes 'enforced file size matching' to\nbe configurable when we copy data files.\n   (2)This PR also make the dataFileVersionStrategy\nto be configurable for different dataset during\nthe publisher phase.\n\n\n Tests\n- [x] My PR adds the following unit tests __OR__\ndoes not need testing for this extremely good\nreason:\n\n\n Commits\n- [ ] My commits all reference JIRA issues in\ntheir subject lines.  and I have squashed multiple\ncommits if they address the same issue. In\naddition.  my commits follow the guidelines from\n\"[How to write a good git commit\nmessage](http://chris.beams.io/posts/git-\ncommit/)\":\n    1. Subject is separated from body by a blank line\n    2. Subject is limited to 50 characters\n    3. Subject does not end with a period\n    4. Subject uses the imperative mood (\"add\".  not\n\"adding\")\n    5. Body wraps at 72 characters\n    6. Body explains \"what\" and \"why\".  not \"how\"\n\nMake enforced file size matching to be\nconfigurable for different ConfigBasedDataset\n\nFix the spelling\n\nCloses #2616 from yukuai518/cuz\n","date":"2019-04-25 02:24:24","modifiedFileCount":"11","status":"M","submitter":"Kuai Yu"}]
