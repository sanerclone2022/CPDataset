[{"authorTime":"2019-03-15 07:07:35","codes":[{"authorDate":"2019-03-15 07:07:35","commitOrder":1,"curCode":"   public void testWorkUnitStream () throws Exception {\n     File basePath = Files.createTempDir();\n     basePath.deleteOnExit();\n     GenericRecord r1 = createRandomRecord();\n     \r\n     for (int i = 22; i < 24; ++i) {\n       String path = \"Identity/MemberAccount/minutely/2017/04/03/\" + i + \"/20_30/run_2017-04-03-10-20\";\n       File jobDir = new File(basePath, path);\n       Assert.assertTrue(jobDir.mkdirs());\n\n       writeFileWithContent(jobDir, \"file_random\", r1, 20);\n     }\n\n     EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin(\"workunit_stream\", basePath.getAbsolutePath().toString());\n     JobExecutionResult result = embeddedGobblin.run();\n\n     Assert.assertTrue(result.isSuccessful());\n   }\n","date":"2019-03-15 07:07:35","endLine":222,"groupId":"7116","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWorkUnitStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/90/9d97cec9dbebe2276f2d75a9ee60bad84c7ba2.src","preCode":"   public void testWorkUnitStream () throws Exception {\n     File basePath = Files.createTempDir();\n     basePath.deleteOnExit();\n     GenericRecord r1 = createRandomRecord();\n     \r\n     for (int i = 22; i < 24; ++i) {\n       String path = \"Identity/MemberAccount/minutely/2017/04/03/\" + i + \"/20_30/run_2017-04-03-10-20\";\n       File jobDir = new File(basePath, path);\n       Assert.assertTrue(jobDir.mkdirs());\n\n       writeFileWithContent(jobDir, \"file_random\", r1, 20);\n     }\n\n     EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin(\"workunit_stream\", basePath.getAbsolutePath().toString());\n     JobExecutionResult result = embeddedGobblin.run();\n\n     Assert.assertTrue(result.isSuccessful());\n   }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"B"},{"authorDate":"2019-03-15 07:07:35","commitOrder":1,"curCode":"  public void testWorkUnitStreamForAllFailures () throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n    GenericRecord r1 = createRandomRecord();\n    \r\n    for (int i = 1; i < 24; ++i) {\n      String path = \"Identity/MemberAccount/minutely/2017/04/03/\" + i + \"/20_30/run_2017-04-03-10-20\";\n      File jobDir = new File(basePath, path);\n      Assert.assertTrue(jobDir.mkdirs());\n\n      writeFileWithContent(jobDir, \"file_random\", r1, 20);\n    }\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblinForAllFailures(\"workunit_stream_all_failure\", basePath.getAbsolutePath().toString());\n    JobExecutionResult result = embeddedGobblin.run();\n\n    Assert.assertFalse(result.isSuccessful());\n  }\n","date":"2019-03-15 07:07:35","endLine":242,"groupId":"7116","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWorkUnitStreamForAllFailures","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/90/9d97cec9dbebe2276f2d75a9ee60bad84c7ba2.src","preCode":"  public void testWorkUnitStreamForAllFailures () throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n    GenericRecord r1 = createRandomRecord();\n    \r\n    for (int i = 1; i < 24; ++i) {\n      String path = \"Identity/MemberAccount/minutely/2017/04/03/\" + i + \"/20_30/run_2017-04-03-10-20\";\n      File jobDir = new File(basePath, path);\n      Assert.assertTrue(jobDir.mkdirs());\n\n      writeFileWithContent(jobDir, \"file_random\", r1, 20);\n    }\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblinForAllFailures(\"workunit_stream_all_failure\", basePath.getAbsolutePath().toString());\n    JobExecutionResult result = embeddedGobblin.run();\n\n    Assert.assertFalse(result.isSuccessful());\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"B"}],"commitId":"f589c732e298735039e4f2be8058bfdbbe04526b","commitMessage":"@@@[GOBBLIN-699] Orc compaction impl.\n\nCloses #2570 from autumnust/orcCompactionImpl\n","date":"2019-03-15 07:07:35","modifiedFileCount":"14","status":"B","submitter":"Lei Sun"},{"authorTime":"2019-03-15 07:07:35","codes":[{"authorDate":"2020-09-09 02:26:14","commitOrder":2,"curCode":"   public void testWorkUnitStream() throws Exception {\n     File basePath = Files.createTempDir();\n     basePath.deleteOnExit();\n     GenericRecord r1 = createRandomRecord();\n     \r\n     for (int i = 22; i < 24; ++i) {\n       String path = \"Identity/MemberAccount/minutely/2017/04/03/\" + i + \"/20_30/run_2017-04-03-10-20\";\n       File jobDir = new File(basePath, path);\n       Assert.assertTrue(jobDir.mkdirs());\n\n       writeFileWithContent(jobDir, \"file_random\", r1, 20);\n     }\n\n     EmbeddedGobblin embeddedGobblin = createEmbeddedGobblinCompactionJob(\"workunit_stream\", basePath.getAbsolutePath().toString());\n     JobExecutionResult result = embeddedGobblin.run();\n\n     Assert.assertTrue(result.isSuccessful());\n   }\n","date":"2020-09-09 02:26:14","endLine":349,"groupId":"101558","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWorkUnitStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/22/3fc571bd2c078621822a93c90869863a1115bd.src","preCode":"   public void testWorkUnitStream() throws Exception {\n     File basePath = Files.createTempDir();\n     basePath.deleteOnExit();\n     GenericRecord r1 = createRandomRecord();\n     \r\n     for (int i = 22; i < 24; ++i) {\n       String path = \"Identity/MemberAccount/minutely/2017/04/03/\" + i + \"/20_30/run_2017-04-03-10-20\";\n       File jobDir = new File(basePath, path);\n       Assert.assertTrue(jobDir.mkdirs());\n\n       writeFileWithContent(jobDir, \"file_random\", r1, 20);\n     }\n\n     EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin(\"workunit_stream\", basePath.getAbsolutePath().toString());\n     JobExecutionResult result = embeddedGobblin.run();\n\n     Assert.assertTrue(result.isSuccessful());\n   }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"},{"authorDate":"2019-03-15 07:07:35","commitOrder":2,"curCode":"  public void testWorkUnitStreamForAllFailures () throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n    GenericRecord r1 = createRandomRecord();\n    \r\n    for (int i = 1; i < 24; ++i) {\n      String path = \"Identity/MemberAccount/minutely/2017/04/03/\" + i + \"/20_30/run_2017-04-03-10-20\";\n      File jobDir = new File(basePath, path);\n      Assert.assertTrue(jobDir.mkdirs());\n\n      writeFileWithContent(jobDir, \"file_random\", r1, 20);\n    }\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblinForAllFailures(\"workunit_stream_all_failure\", basePath.getAbsolutePath().toString());\n    JobExecutionResult result = embeddedGobblin.run();\n\n    Assert.assertFalse(result.isSuccessful());\n  }\n","date":"2019-03-15 07:07:35","endLine":242,"groupId":"101558","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWorkUnitStreamForAllFailures","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/90/9d97cec9dbebe2276f2d75a9ee60bad84c7ba2.src","preCode":"  public void testWorkUnitStreamForAllFailures () throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n    GenericRecord r1 = createRandomRecord();\n    \r\n    for (int i = 1; i < 24; ++i) {\n      String path = \"Identity/MemberAccount/minutely/2017/04/03/\" + i + \"/20_30/run_2017-04-03-10-20\";\n      File jobDir = new File(basePath, path);\n      Assert.assertTrue(jobDir.mkdirs());\n\n      writeFileWithContent(jobDir, \"file_random\", r1, 20);\n    }\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblinForAllFailures(\"workunit_stream_all_failure\", basePath.getAbsolutePath().toString());\n    JobExecutionResult result = embeddedGobblin.run();\n\n    Assert.assertFalse(result.isSuccessful());\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"N"}],"commitId":"778a8634978981e63d3a096af336b14f79aebeca","commitMessage":"@@@[GOBBLIN-1257] Fix the handling of collection field types during ORC schema up-conversion in compaction[]\n\nCloses #3097 from sv2000/orcCompaction\n","date":"2020-09-09 02:26:14","modifiedFileCount":"4","status":"M","submitter":"sv2000"}]
