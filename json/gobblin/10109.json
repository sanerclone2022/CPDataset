[{"authorTime":"2018-06-16 07:07:37","codes":[{"authorDate":"2018-06-16 07:07:37","commitOrder":3,"curCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    LOGGER.info(\"Waiting for job to complete...\");\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixQueueName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.helixTaskDriverWaitToStop(helixManager, helixTaskDriver, helixQueueName, 10L);\n      try {\n        cancelJob(this.jobListener);\n      } catch (JobException e) {\n        throw new RuntimeException(\"Unable to cancel job \" + jobContext.getJobName() + \": \", e);\n      }\n      this.helixTaskDriver.resume(this.helixQueueName);\n      LOGGER.info(\"stopped the queue, deleted the job\");\n    }\n  }\n","date":"2018-06-16 07:07:37","endLine":380,"groupId":"2232","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/23/1575ed042f3f2a527187c7b4dfd7f051cf1a47.src","preCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    LOGGER.info(\"Waiting for job to complete...\");\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixQueueName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.helixTaskDriverWaitToStop(helixManager, helixTaskDriver, helixQueueName, 10L);\n      try {\n        cancelJob(this.jobListener);\n      } catch (JobException e) {\n        throw new RuntimeException(\"Unable to cancel job \" + jobContext.getJobName() + \": \", e);\n      }\n      this.helixTaskDriver.resume(this.helixQueueName);\n      LOGGER.info(\"stopped the queue, deleted the job\");\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixJobLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"MB"},{"authorDate":"2018-06-16 07:07:37","commitOrder":3,"curCode":"  private DistributeJobResult waitForJobCompletion(String planningName, String planningId) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          planningName,\n          planningId,\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.helixTaskDriverWaitToStop(helixManager, helixTaskDriver, planningName, 10L);\n      this.helixTaskDriver.delete(planningName);\n      this.helixTaskDriver.resume(planningName);\n      log.info(\"stopped the queue, deleted the job\");\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","date":"2018-06-16 07:07:37","endLine":240,"groupId":"7057","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"(StringplanningName@StringplanningId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/58/00e8d02a6042b74ba38117f4124039c5c2a8e8.src","preCode":"  private DistributeJobResult waitForJobCompletion(String planningName, String planningId) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          planningName,\n          planningId,\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.helixTaskDriverWaitToStop(helixManager, helixTaskDriver, planningName, 10L);\n      this.helixTaskDriver.delete(planningName);\n      this.helixTaskDriver.resume(planningName);\n      log.info(\"stopped the queue, deleted the job\");\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixDistributeJobExecutionLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"B"}],"commitId":"c1e9cf250c3e844dcf649b730fb9a6b464b740a9","commitMessage":"@@@[GOBBLIN-490] Allow jobs to be re-distributed to worker nodes and launch there\n\nCloses #2360 from yukuai518/jobDistribute\n","date":"2018-06-16 07:07:37","modifiedFileCount":"13","status":"M","submitter":"Kuai Yu"},{"authorTime":"2018-07-14 02:33:11","codes":[{"authorDate":"2018-07-14 02:33:11","commitOrder":4,"curCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    LOGGER.info(\"Waiting for job to complete...\");\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixQueueName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      helixTaskDriver.waitToStop(helixQueueName, 10L);\n      try {\n        cancelJob(this.jobListener);\n      } catch (JobException e) {\n        throw new RuntimeException(\"Unable to cancel job \" + jobContext.getJobName() + \": \", e);\n      }\n      this.helixTaskDriver.resume(this.helixQueueName);\n      LOGGER.info(\"stopped the queue, deleted the job\");\n    }\n  }\n","date":"2018-07-14 02:33:11","endLine":380,"groupId":"5325","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/39/c6e5b4ba61ca858a79a982304ef29e7dad6ca6.src","preCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    LOGGER.info(\"Waiting for job to complete...\");\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixQueueName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.helixTaskDriverWaitToStop(helixManager, helixTaskDriver, helixQueueName, 10L);\n      try {\n        cancelJob(this.jobListener);\n      } catch (JobException e) {\n        throw new RuntimeException(\"Unable to cancel job \" + jobContext.getJobName() + \": \", e);\n      }\n      this.helixTaskDriver.resume(this.helixQueueName);\n      LOGGER.info(\"stopped the queue, deleted the job\");\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixJobLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"},{"authorDate":"2018-07-14 02:33:11","commitOrder":4,"curCode":"  private DistributeJobResult waitForJobCompletion(String planningName, String planningId) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          planningName,\n          planningId,\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      helixTaskDriver.waitToStop(planningName, 10L);\n      this.helixTaskDriver.delete(planningName);\n      this.helixTaskDriver.resume(planningName);\n      log.info(\"stopped the queue, deleted the job\");\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","date":"2018-07-14 02:33:11","endLine":240,"groupId":"7057","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"(StringplanningName@StringplanningId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/87/613a61601c27abf1aacdb782373ec76889d974.src","preCode":"  private DistributeJobResult waitForJobCompletion(String planningName, String planningId) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          planningName,\n          planningId,\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.helixTaskDriverWaitToStop(helixManager, helixTaskDriver, planningName, 10L);\n      this.helixTaskDriver.delete(planningName);\n      this.helixTaskDriver.resume(planningName);\n      log.info(\"stopped the queue, deleted the job\");\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixDistributeJobExecutionLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"}],"commitId":"6232b416a59613db32f6c08cde703c71555d37b8","commitMessage":"@@@[GOBBLIN-533] upgrade helix to 0.8.1\n\nCloses #2396 from arjun4084346/helixUpgrade\n","date":"2018-07-14 02:33:11","modifiedFileCount":"5","status":"M","submitter":"Arjun"},{"authorTime":"2018-07-14 08:36:51","codes":[{"authorDate":"2018-07-14 02:33:11","commitOrder":5,"curCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    LOGGER.info(\"Waiting for job to complete...\");\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixQueueName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      helixTaskDriver.waitToStop(helixQueueName, 10L);\n      try {\n        cancelJob(this.jobListener);\n      } catch (JobException e) {\n        throw new RuntimeException(\"Unable to cancel job \" + jobContext.getJobName() + \": \", e);\n      }\n      this.helixTaskDriver.resume(this.helixQueueName);\n      LOGGER.info(\"stopped the queue, deleted the job\");\n    }\n  }\n","date":"2018-07-14 02:33:11","endLine":380,"groupId":"5325","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/39/c6e5b4ba61ca858a79a982304ef29e7dad6ca6.src","preCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    LOGGER.info(\"Waiting for job to complete...\");\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixQueueName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      helixTaskDriver.waitToStop(helixQueueName, 10L);\n      try {\n        cancelJob(this.jobListener);\n      } catch (JobException e) {\n        throw new RuntimeException(\"Unable to cancel job \" + jobContext.getJobName() + \": \", e);\n      }\n      this.helixTaskDriver.resume(this.helixQueueName);\n      LOGGER.info(\"stopped the queue, deleted the job\");\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixJobLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"N"},{"authorDate":"2018-07-14 08:36:51","commitOrder":5,"curCode":"  private DistributeJobResult waitForJobCompletion(String planningName, String planningId) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          planningName,\n          planningId,\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      helixTaskDriver.waitToStop(planningName, 10L);\n      log.info(\"[DELETE] workflow {} timeout.\", planningName);\n      this.helixTaskDriver.delete(planningName);\n      this.helixTaskDriver.resume(planningName);\n      log.info(\"stopped the queue, deleted the job\");\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","date":"2018-07-14 08:36:51","endLine":256,"groupId":"7057","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"(StringplanningName@StringplanningId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/7e/f24fc98a8f486598b86e9a80e17aa703a33731.src","preCode":"  private DistributeJobResult waitForJobCompletion(String planningName, String planningId) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          planningName,\n          planningId,\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      helixTaskDriver.waitToStop(planningName, 10L);\n      this.helixTaskDriver.delete(planningName);\n      this.helixTaskDriver.resume(planningName);\n      log.info(\"stopped the queue, deleted the job\");\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixDistributeJobExecutionLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"}],"commitId":"45fc9dfca69dd8479504ee6b9878d196c722a329","commitMessage":"@@@[GOBBLIN-535] Add second hop for distributed job launcher\n\nCloses #2398 from yukuai518/hop2\n","date":"2018-07-14 08:36:51","modifiedFileCount":"13","status":"M","submitter":"Kuai Yu"},{"authorTime":"2018-07-14 08:36:51","codes":[{"authorDate":"2018-07-17 04:21:52","commitOrder":6,"curCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    LOGGER.info(\"Waiting for job to complete...\");\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      helixTaskDriver.waitToStop(helixWorkFlowName, 10L);\n      try {\n        cancelJob(this.jobListener);\n      } catch (JobException e) {\n        throw new RuntimeException(\"Unable to cancel job \" + jobContext.getJobName() + \": \", e);\n      }\n      this.helixTaskDriver.resume(this.helixWorkFlowName);\n      LOGGER.info(\"stopped the queue, deleted the job\");\n    }\n  }\n","date":"2018-07-17 04:21:52","endLine":384,"groupId":"5325","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/60/a5405f5860fc1f6d80c2720005c36a44001159.src","preCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    LOGGER.info(\"Waiting for job to complete...\");\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixQueueName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      helixTaskDriver.waitToStop(helixQueueName, 10L);\n      try {\n        cancelJob(this.jobListener);\n      } catch (JobException e) {\n        throw new RuntimeException(\"Unable to cancel job \" + jobContext.getJobName() + \": \", e);\n      }\n      this.helixTaskDriver.resume(this.helixQueueName);\n      LOGGER.info(\"stopped the queue, deleted the job\");\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixJobLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"},{"authorDate":"2018-07-14 08:36:51","commitOrder":6,"curCode":"  private DistributeJobResult waitForJobCompletion(String planningName, String planningId) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          planningName,\n          planningId,\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      helixTaskDriver.waitToStop(planningName, 10L);\n      log.info(\"[DELETE] workflow {} timeout.\", planningName);\n      this.helixTaskDriver.delete(planningName);\n      this.helixTaskDriver.resume(planningName);\n      log.info(\"stopped the queue, deleted the job\");\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","date":"2018-07-14 08:36:51","endLine":256,"groupId":"7057","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"(StringplanningName@StringplanningId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/7e/f24fc98a8f486598b86e9a80e17aa703a33731.src","preCode":"  private DistributeJobResult waitForJobCompletion(String planningName, String planningId) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          planningName,\n          planningId,\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      helixTaskDriver.waitToStop(planningName, 10L);\n      log.info(\"[DELETE] workflow {} timeout.\", planningName);\n      this.helixTaskDriver.delete(planningName);\n      this.helixTaskDriver.resume(planningName);\n      log.info(\"stopped the queue, deleted the job\");\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixDistributeJobExecutionLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"}],"commitId":"870ca08dee69424344bacb78d53ef2934b22dbf7","commitMessage":"@@@[GOBBLIN-534] switched from helix job queue to work flow\n\nCloses #2397 from arjun4084346/helixChanges\n","date":"2018-07-17 04:21:52","modifiedFileCount":"3","status":"M","submitter":"Arjun"},{"authorTime":"2018-08-15 08:17:13","codes":[{"authorDate":"2018-08-15 08:17:13","commitOrder":7,"curCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(helixWorkFlowName, jobContext.getJobId(),\n          helixManager, this, this.jobListener);\n    }\n  }\n","date":"2018-08-15 08:17:13","endLine":395,"groupId":"2232","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/66/72923d907f31bf55269c485da004ccac302eba.src","preCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    LOGGER.info(\"Waiting for job to complete...\");\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      helixTaskDriver.waitToStop(helixWorkFlowName, 10L);\n      try {\n        cancelJob(this.jobListener);\n      } catch (JobException e) {\n        throw new RuntimeException(\"Unable to cancel job \" + jobContext.getJobName() + \": \", e);\n      }\n      this.helixTaskDriver.resume(this.helixWorkFlowName);\n      LOGGER.info(\"stopped the queue, deleted the job\");\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixJobLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":379,"status":"M"},{"authorDate":"2018-08-15 08:17:13","commitOrder":7,"curCode":"  private DistributeJobResult waitForJobCompletion(String workFlowName, String jobName) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          workFlowName,\n          jobName,\n          timeoutEnabled ? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(workFlowName, jobName,\n          helixManager, this, null);\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","date":"2018-08-15 08:17:13","endLine":272,"groupId":"335","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"(StringworkFlowName@StringjobName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b5/f89284b1ec0ca0b80425d8172405430aedcd75.src","preCode":"  private DistributeJobResult waitForJobCompletion(String planningName, String planningId) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          planningName,\n          planningId,\n          timeoutEnabled ? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      helixTaskDriver.waitToStop(planningName, 10L);\n      log.info(\"[DELETE] workflow {} timeout.\", planningName);\n      this.helixTaskDriver.delete(planningName);\n      this.helixTaskDriver.resume(planningName);\n      log.info(\"stopped the queue, deleted the job\");\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixDistributeJobExecutionLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"}],"commitId":"81898c07a79440738ccf8892c3079bc0cfa89f0f","commitMessage":"@@@[GOBBLIN-518] Add option to cancel a running job in service\n\nCloses #2425 from arjun4084346/cancelHelixJob\n","date":"2018-08-15 08:17:13","modifiedFileCount":"6","status":"M","submitter":"Arjun"},{"authorTime":"2018-09-13 04:14:21","codes":[{"authorDate":"2018-09-13 04:14:21","commitOrder":8,"curCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(helixWorkFlowName, jobContext.getJobId(),\n          helixManager, this, this.jobListener);\n    }\n  }\n","date":"2018-09-13 04:14:21","endLine":405,"groupId":"2232","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/85/23e217e10b5c8624c2350c0de8b8266741115b.src","preCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(helixWorkFlowName, jobContext.getJobId(),\n          helixManager, this, this.jobListener);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixJobLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"M"},{"authorDate":"2018-09-13 04:14:21","commitOrder":8,"curCode":"  private DistributeJobResult waitForJobCompletion(String workFlowName, String jobName) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProperties.getProperty(GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProperties.getProperty(GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          workFlowName,\n          jobName,\n          timeoutEnabled ? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(workFlowName, jobName,\n          helixManager, this, null);\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","date":"2018-09-13 04:14:21","endLine":285,"groupId":"335","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"(StringworkFlowName@StringjobName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/eb/78938f8003fb09cd4ae3fdd9477b874cd99dd1.src","preCode":"  private DistributeJobResult waitForJobCompletion(String workFlowName, String jobName) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProperties.getProperty(ConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        ConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          workFlowName,\n          jobName,\n          timeoutEnabled ? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(workFlowName, jobName,\n          helixManager, this, null);\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixDistributeJobExecutionLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"}],"commitId":"a6ec4a9af528039b69f6c7f33f968723214c557b","commitMessage":"@@@[GOBBLIN-584] Improve the Helix configuration naming.\n\nCloses #2450 from yukuai518/distmetrics\n","date":"2018-09-13 04:14:21","modifiedFileCount":"6","status":"M","submitter":"Kuai Yu"},{"authorTime":"2018-10-24 07:04:44","codes":[{"authorDate":"2018-09-13 04:14:21","commitOrder":9,"curCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(helixWorkFlowName, jobContext.getJobId(),\n          helixManager, this, this.jobListener);\n    }\n  }\n","date":"2018-09-13 04:14:21","endLine":405,"groupId":"2232","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/85/23e217e10b5c8624c2350c0de8b8266741115b.src","preCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(helixWorkFlowName, jobContext.getJobId(),\n          helixManager, this, this.jobListener);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixJobLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"N"},{"authorDate":"2018-10-24 07:04:44","commitOrder":9,"curCode":"  private DistributeJobResult waitForJobCompletion(String workFlowName, String jobName) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobPlanningProps.getProperty(GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobPlanningProps.getProperty(GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          workFlowName,\n          jobName,\n          timeoutEnabled ? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(workFlowName, jobName,\n          helixManager, this, null);\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","date":"2018-10-24 07:04:44","endLine":281,"groupId":"335","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"(StringworkFlowName@StringjobName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f7/b0a830f82e985c53d17fda75de17ece5abebf2.src","preCode":"  private DistributeJobResult waitForJobCompletion(String workFlowName, String jobName) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProperties.getProperty(GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProperties.getProperty(GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          workFlowName,\n          jobName,\n          timeoutEnabled ? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(workFlowName, jobName,\n          helixManager, this, null);\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixDistributeJobExecutionLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"}],"commitId":"1155cdc5e1944c536ef6c9707bf947dd1a57d67b","commitMessage":"@@@[GOBBLIN-617] Add distributed job launcher metrics and some refactoring.\n\nCloses #2484 from yukuai518/distMetrics\n","date":"2018-10-24 07:04:44","modifiedFileCount":"20","status":"M","submitter":"Kuai Yu"},{"authorTime":"2018-12-08 10:35:54","codes":[{"authorDate":"2018-09-13 04:14:21","commitOrder":10,"curCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(helixWorkFlowName, jobContext.getJobId(),\n          helixManager, this, this.jobListener);\n    }\n  }\n","date":"2018-09-13 04:14:21","endLine":405,"groupId":"2232","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/85/23e217e10b5c8624c2350c0de8b8266741115b.src","preCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(helixWorkFlowName, jobContext.getJobId(),\n          helixManager, this, this.jobListener);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixJobLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"N"},{"authorDate":"2018-12-08 10:35:54","commitOrder":10,"curCode":"  private DistributeJobResult waitForJobCompletion(String workFlowName, String jobName) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobPlanningProps.getProperty(GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobPlanningProps.getProperty(GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          workFlowName,\n          jobName,\n          timeoutEnabled ? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(workFlowName, jobName,\n          helixManager, this, null);\n      return new DistributeJobResult(false);\n    }\n  }\n","date":"2018-12-08 10:35:54","endLine":272,"groupId":"335","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"(StringworkFlowName@StringjobName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/60/9639e54802b18275b9b4bf3e5827bf0242a798.src","preCode":"  private DistributeJobResult waitForJobCompletion(String workFlowName, String jobName) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobPlanningProps.getProperty(GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobPlanningProps.getProperty(GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          workFlowName,\n          jobName,\n          timeoutEnabled ? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(workFlowName, jobName,\n          helixManager, this, null);\n      return new DistributeJobResult(Optional.empty(), Optional.of(te));\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixDistributeJobExecutionLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"}],"commitId":"11a1c46ab9907c403f384b51a81f56c2d281ccaf","commitMessage":"@@@[GOBBLIN-647] Move early stop logic to task driver instance.\n\nCloses #2517 from kyuamazon/td\n","date":"2018-12-08 10:35:54","modifiedFileCount":"8","status":"M","submitter":"Kuai Yu"},{"authorTime":"2018-12-11 09:28:41","codes":[{"authorDate":"2018-09-13 04:14:21","commitOrder":11,"curCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(helixWorkFlowName, jobContext.getJobId(),\n          helixManager, this, this.jobListener);\n    }\n  }\n","date":"2018-09-13 04:14:21","endLine":405,"groupId":"2232","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/85/23e217e10b5c8624c2350c0de8b8266741115b.src","preCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(helixWorkFlowName, jobContext.getJobId(),\n          helixManager, this, this.jobListener);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixJobLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"N"},{"authorDate":"2018-12-11 09:28:41","commitOrder":11,"curCode":"  private DistributeJobResult waitForJobCompletion(String workFlowName, String jobName) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobPlanningProps.getProperty(GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobPlanningProps.getProperty(GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.planningJobHelixManager,\n          workFlowName,\n          jobName,\n          timeoutEnabled ? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(workFlowName, jobName,\n          planningJobHelixManager, this, null);\n      return new DistributeJobResult(false);\n    }\n  }\n","date":"2018-12-11 09:28:41","endLine":282,"groupId":"335","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"(StringworkFlowName@StringjobName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/1d/592c40989998f47fce175cd9876f336858fe8b.src","preCode":"  private DistributeJobResult waitForJobCompletion(String workFlowName, String jobName) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobPlanningProps.getProperty(GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobPlanningProps.getProperty(GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.helixManager,\n          workFlowName,\n          jobName,\n          timeoutEnabled ? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(workFlowName, jobName,\n          helixManager, this, null);\n      return new DistributeJobResult(false);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixDistributeJobExecutionLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"}],"commitId":"d10bae881aead4ba9c91b06048434aefd7583285","commitMessage":"@@@[GOBBLIN-649] Add task driver cluster\n\nAdd task driver cluster\n\nFix comments and add more metrics\n\nCloses #2518 from kyuamazon/td3\n","date":"2018-12-11 09:28:41","modifiedFileCount":"16","status":"M","submitter":"Kuai Yu"},{"authorTime":"2019-03-26 08:13:05","codes":[{"authorDate":"2018-09-13 04:14:21","commitOrder":12,"curCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(helixWorkFlowName, jobContext.getJobId(),\n          helixManager, this, this.jobListener);\n    }\n  }\n","date":"2018-09-13 04:14:21","endLine":405,"groupId":"2232","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/85/23e217e10b5c8624c2350c0de8b8266741115b.src","preCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(helixWorkFlowName, jobContext.getJobId(),\n          helixManager, this, this.jobListener);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixJobLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"N"},{"authorDate":"2019-03-26 08:13:05","commitOrder":12,"curCode":"  private DistributeJobResult waitForJobCompletion(String workFlowName, String jobName) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobPlanningProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobPlanningProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.planningJobHelixManager,\n          workFlowName,\n          jobName,\n          timeoutEnabled ? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(workFlowName, jobName,\n          planningJobHelixManager, this, null);\n      return new DistributeJobResult();\n    }\n  }\n","date":"2019-03-26 08:13:05","endLine":319,"groupId":"335","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"(StringworkFlowName@StringjobName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/36/239a2166c946ad49a315da301d32e99de97512.src","preCode":"  private DistributeJobResult waitForJobCompletion(String workFlowName, String jobName) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobPlanningProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobPlanningProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.planningJobHelixManager,\n          workFlowName,\n          jobName,\n          timeoutEnabled ? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(workFlowName, jobName,\n          planningJobHelixManager, this, null);\n      return new DistributeJobResult(false);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixDistributeJobExecutionLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"}],"commitId":"3e38ce3b963b746f1ee55e5a6261f454f8eefaa2","commitMessage":"@@@[GOBBLIN-703] Allow planning job to be running in non-blocking mode\n\nCloses #2573 from yukuai518/nonblock\n","date":"2019-03-26 08:13:05","modifiedFileCount":"5","status":"M","submitter":"Kuai Yu"},{"authorTime":"2019-08-10 06:12:30","codes":[{"authorDate":"2019-08-10 06:12:30","commitOrder":13,"curCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    long stoppingStateTimeoutInSeconds = PropertiesUtils\n        .getPropAsLong(this.jobProps, GobblinClusterConfigurationKeys.HELIX_JOB_STOPPING_STATE_TIMEOUT_SECONDS,\n            GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_STOPPING_STATE_TIMEOUT_SECONDS);\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty(),\n          stoppingStateTimeoutInSeconds);\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(helixWorkFlowName, jobContext.getJobId(),\n          helixManager, this, this.jobListener);\n    }\n  }\n","date":"2019-08-10 06:12:30","endLine":448,"groupId":"10109","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d3/7dab13390f5a22d2f7ac564e0d0e5df21c7e32.src","preCode":"  private void waitForJobCompletion()  throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          this.helixManager,\n          this.helixWorkFlowName,\n          this.jobContext.getJobId(),\n          timeoutEnabled? Optional.of(timeoutInSeconds) : Optional.empty());\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(helixWorkFlowName, jobContext.getJobId(),\n          helixManager, this, this.jobListener);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixJobLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"M"},{"authorDate":"2019-08-10 06:12:30","commitOrder":13,"curCode":"  private DistributeJobResult waitForJobCompletion(String workFlowName, String jobName) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobPlanningProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobPlanningProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    long stoppingStateTimeoutInSeconds = PropertiesUtils\n        .getPropAsLong(this.jobPlanningProps, GobblinClusterConfigurationKeys.HELIX_JOB_STOPPING_STATE_TIMEOUT_SECONDS,\n            GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_STOPPING_STATE_TIMEOUT_SECONDS);\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.planningJobHelixManager,\n          workFlowName,\n          jobName,\n          timeoutEnabled ? Optional.of(timeoutInSeconds) : Optional.empty(),\n          stoppingStateTimeoutInSeconds);\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(workFlowName, jobName,\n          planningJobHelixManager, this, null);\n      return new DistributeJobResult();\n    }\n  }\n","date":"2019-08-10 06:12:30","endLine":323,"groupId":"10109","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForJobCompletion","params":"(StringworkFlowName@StringjobName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/cf/07e38996c1a9f869df73976fc9ead3a927e439.src","preCode":"  private DistributeJobResult waitForJobCompletion(String workFlowName, String jobName) throws InterruptedException {\n    boolean timeoutEnabled = Boolean.parseBoolean(this.jobPlanningProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_ENABLED_KEY,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_ENABLED));\n    long timeoutInSeconds = Long.parseLong(this.jobPlanningProps.getProperty(\n        GobblinClusterConfigurationKeys.HELIX_JOB_TIMEOUT_SECONDS,\n        GobblinClusterConfigurationKeys.DEFAULT_HELIX_JOB_TIMEOUT_SECONDS));\n\n    try {\n      HelixUtils.waitJobCompletion(\n          GobblinHelixDistributeJobExecutionLauncher.this.planningJobHelixManager,\n          workFlowName,\n          jobName,\n          timeoutEnabled ? Optional.of(timeoutInSeconds) : Optional.empty());\n      return getResultFromUserContent();\n    } catch (TimeoutException te) {\n      HelixUtils.handleJobTimeout(workFlowName, jobName,\n          planningJobHelixManager, this, null);\n      return new DistributeJobResult();\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixDistributeJobExecutionLauncher.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"}],"commitId":"50280ee6bd591e74746faf4cb4452733095e3c36","commitMessage":"@@@[GOBBLIN-817] Implement a workaround for Helix Workflow being stuck in STOPPING state.[]\n\nCloses #2681 from sv2000/helixStoppingWorkaround\n","date":"2019-08-10 06:12:30","modifiedFileCount":"4","status":"M","submitter":"sv2000"}]
