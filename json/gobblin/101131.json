[{"authorTime":"2019-04-11 02:59:27","codes":[{"authorDate":"2019-04-11 02:59:27","commitOrder":1,"curCode":"  public void testGetJobStatusesForFlowExecution() throws IOException {\n    Long flowExecutionId = 1234L;\n    addJobStatusToStateStore(flowExecutionId, JobStatusRetriever.NA_KEY);\n\n    Iterator<JobStatus>\n        jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.COMPILED.name());\n    Assert.assertEquals(jobStatus.getJobName(), (JobStatusRetriever.NA_KEY));\n    Assert.assertEquals(jobStatus.getJobGroup(), JobStatusRetriever.NA_KEY);\n    Assert.assertEquals(jobStatus.getProcessedCount(), 0);\n    Assert.assertEquals(jobStatus.getLowWatermark(), \"\");\n    Assert.assertEquals(jobStatus.getHighWatermark(), \"\");\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_1);\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.RUNNING.name());\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), jobGroup);\n    Assert.assertFalse(jobStatusIterator.hasNext());\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_2);\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    Assert.assertTrue(jobStatus.getJobName().equals(MY_JOB_NAME_1) || jobStatus.getJobName().equals(MY_JOB_NAME_2));\n\n    String jobName = jobStatus.getJobName();\n    String nextExpectedJobName = (MY_JOB_NAME_1.equals(jobName)) ? MY_JOB_NAME_2 : MY_JOB_NAME_1;\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), nextExpectedJobName);\n  }\n","date":"2019-04-11 02:59:27","endLine":109,"groupId":"898","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetJobStatusesForFlowExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/83/cb0fec3bb7be12d812d5940c808b6fe3e64255.src","preCode":"  public void testGetJobStatusesForFlowExecution() throws IOException {\n    Long flowExecutionId = 1234L;\n    addJobStatusToStateStore(flowExecutionId, JobStatusRetriever.NA_KEY);\n\n    Iterator<JobStatus>\n        jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.COMPILED.name());\n    Assert.assertEquals(jobStatus.getJobName(), (JobStatusRetriever.NA_KEY));\n    Assert.assertEquals(jobStatus.getJobGroup(), JobStatusRetriever.NA_KEY);\n    Assert.assertEquals(jobStatus.getProcessedCount(), 0);\n    Assert.assertEquals(jobStatus.getLowWatermark(), \"\");\n    Assert.assertEquals(jobStatus.getHighWatermark(), \"\");\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_1);\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.RUNNING.name());\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), jobGroup);\n    Assert.assertFalse(jobStatusIterator.hasNext());\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_2);\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    Assert.assertTrue(jobStatus.getJobName().equals(MY_JOB_NAME_1) || jobStatus.getJobName().equals(MY_JOB_NAME_2));\n\n    String jobName = jobStatus.getJobName();\n    String nextExpectedJobName = (MY_JOB_NAME_1.equals(jobName)) ? MY_JOB_NAME_2 : MY_JOB_NAME_1;\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), nextExpectedJobName);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/monitoring/JobStatusRetrieverTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2019-04-11 02:59:27","commitOrder":1,"curCode":"  public void testGetJobStatusesForFlowExecution1() {\n    long flowExecutionId = 1234L;\n    Iterator<JobStatus> jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId,\n        MY_JOB_NAME_1, myJobGroup);\n\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), myJobGroup);\n    Assert.assertEquals(jobStatus.getJobExecutionId(), JOB_EXECUTION_ID);\n    Assert.assertEquals(jobStatus.getFlowName(), FLOW_NAME);\n    Assert.assertEquals(jobStatus.getFlowGroup(), FLOW_GROUP);\n    Assert.assertEquals(jobStatus.getFlowExecutionId(), flowExecutionId);\n    Assert.assertEquals(jobStatus.getMessage(), MESSAGE);\n  }\n","date":"2019-04-11 02:59:27","endLine":126,"groupId":"6426","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetJobStatusesForFlowExecution1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/83/cb0fec3bb7be12d812d5940c808b6fe3e64255.src","preCode":"  public void testGetJobStatusesForFlowExecution1() {\n    long flowExecutionId = 1234L;\n    Iterator<JobStatus> jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId,\n        MY_JOB_NAME_1, myJobGroup);\n\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), myJobGroup);\n    Assert.assertEquals(jobStatus.getJobExecutionId(), JOB_EXECUTION_ID);\n    Assert.assertEquals(jobStatus.getFlowName(), FLOW_NAME);\n    Assert.assertEquals(jobStatus.getFlowGroup(), FLOW_GROUP);\n    Assert.assertEquals(jobStatus.getFlowExecutionId(), flowExecutionId);\n    Assert.assertEquals(jobStatus.getMessage(), MESSAGE);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/monitoring/JobStatusRetrieverTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"B"}],"commitId":"b28ddaf16948dd270b43ac2fc2b27824d4b6a5f8","commitMessage":"@@@[GOBBLIN-725] add a mysql based job status retriever\n\nCloses #2592 from\narjun4084346/jobstatusstoretomysql\n","date":"2019-04-11 02:59:27","modifiedFileCount":"12","status":"B","submitter":"Arjun"},{"authorTime":"2019-04-11 02:59:27","codes":[{"authorDate":"2019-04-17 10:17:07","commitOrder":2,"curCode":"  public void testGetJobStatusesForFlowExecution() throws IOException {\n    Long flowExecutionId = 1234L;\n    addJobStatusToStateStore(flowExecutionId, JobStatusRetriever.NA_KEY, ExecutionStatus.COMPILED.name());\n\n    Iterator<JobStatus>\n        jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.COMPILED.name());\n    Assert.assertEquals(jobStatus.getJobName(), JobStatusRetriever.NA_KEY);\n    Assert.assertEquals(jobStatus.getJobGroup(), JobStatusRetriever.NA_KEY);\n    Assert.assertEquals(jobStatus.getProcessedCount(), 0);\n    Assert.assertEquals(jobStatus.getLowWatermark(), \"\");\n    Assert.assertEquals(jobStatus.getHighWatermark(), \"\");\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_1, ExecutionStatus.RUNNING.name(), JOB_START_TIME, JOB_START_TIME);\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.RUNNING.name());\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), jobGroup);\n    Assert.assertFalse(jobStatusIterator.hasNext());\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_2, ExecutionStatus.RUNNING.name());\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    Assert.assertTrue(jobStatus.getJobName().equals(MY_JOB_NAME_1) || jobStatus.getJobName().equals(MY_JOB_NAME_2));\n\n    String jobName = jobStatus.getJobName();\n    String nextExpectedJobName = (MY_JOB_NAME_1.equals(jobName)) ? MY_JOB_NAME_2 : MY_JOB_NAME_1;\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), nextExpectedJobName);\n  }\n","date":"2019-04-17 10:17:07","endLine":115,"groupId":"898","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetJobStatusesForFlowExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/34/8967f0c2f274a6a36de3310618fa66c32009b8.src","preCode":"  public void testGetJobStatusesForFlowExecution() throws IOException {\n    Long flowExecutionId = 1234L;\n    addJobStatusToStateStore(flowExecutionId, JobStatusRetriever.NA_KEY);\n\n    Iterator<JobStatus>\n        jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.COMPILED.name());\n    Assert.assertEquals(jobStatus.getJobName(), (JobStatusRetriever.NA_KEY));\n    Assert.assertEquals(jobStatus.getJobGroup(), JobStatusRetriever.NA_KEY);\n    Assert.assertEquals(jobStatus.getProcessedCount(), 0);\n    Assert.assertEquals(jobStatus.getLowWatermark(), \"\");\n    Assert.assertEquals(jobStatus.getHighWatermark(), \"\");\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_1);\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.RUNNING.name());\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), jobGroup);\n    Assert.assertFalse(jobStatusIterator.hasNext());\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_2);\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    Assert.assertTrue(jobStatus.getJobName().equals(MY_JOB_NAME_1) || jobStatus.getJobName().equals(MY_JOB_NAME_2));\n\n    String jobName = jobStatus.getJobName();\n    String nextExpectedJobName = (MY_JOB_NAME_1.equals(jobName)) ? MY_JOB_NAME_2 : MY_JOB_NAME_1;\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), nextExpectedJobName);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/monitoring/JobStatusRetrieverTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2019-04-11 02:59:27","commitOrder":2,"curCode":"  public void testGetJobStatusesForFlowExecution1() {\n    long flowExecutionId = 1234L;\n    Iterator<JobStatus> jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId,\n        MY_JOB_NAME_1, myJobGroup);\n\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), myJobGroup);\n    Assert.assertEquals(jobStatus.getJobExecutionId(), JOB_EXECUTION_ID);\n    Assert.assertEquals(jobStatus.getFlowName(), FLOW_NAME);\n    Assert.assertEquals(jobStatus.getFlowGroup(), FLOW_GROUP);\n    Assert.assertEquals(jobStatus.getFlowExecutionId(), flowExecutionId);\n    Assert.assertEquals(jobStatus.getMessage(), MESSAGE);\n  }\n","date":"2019-04-11 02:59:27","endLine":126,"groupId":"6426","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetJobStatusesForFlowExecution1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/83/cb0fec3bb7be12d812d5940c808b6fe3e64255.src","preCode":"  public void testGetJobStatusesForFlowExecution1() {\n    long flowExecutionId = 1234L;\n    Iterator<JobStatus> jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId,\n        MY_JOB_NAME_1, myJobGroup);\n\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), myJobGroup);\n    Assert.assertEquals(jobStatus.getJobExecutionId(), JOB_EXECUTION_ID);\n    Assert.assertEquals(jobStatus.getFlowName(), FLOW_NAME);\n    Assert.assertEquals(jobStatus.getFlowGroup(), FLOW_GROUP);\n    Assert.assertEquals(jobStatus.getFlowExecutionId(), flowExecutionId);\n    Assert.assertEquals(jobStatus.getMessage(), MESSAGE);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/monitoring/JobStatusRetrieverTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"}],"commitId":"946762b323c2a82dc7d7fd5674d7fd4bf57ea281","commitMessage":"@@@[GOBBLIN-730] added job start and end time in flow status retriever\n\nDear Gobblin maintainers. \n\nPlease accept this PR. I understand that it will\nnot be reviewed until I have checked off all the\nsteps below! sv2000 please review\n\n\n JIRA\n- [x] My PR addresses the following [Gobblin JIRA]\n(https://issues.apache.org/jira/browse/GOBBLIN/)\nissues and references them in the PR title. For\nexample.  \"[GOBBLIN-XXX] My Gobblin PR\"\n    - https://issues.apache.org/jira/browse/GOBBLIN-\nXXX\n\n\n Description\n- [x] Here are some details about my PR.  including\nscreenshots (if applicable):\nit adds job start and end time in job status.\nwhile writing gobblintrackingevent to state store. \nwe add some extra properties.  which\njobstatusretriever uses to show the start/end time\n\n\n Tests\n- [x] My PR adds the following unit tests __OR__\ndoes not need testing for this extremely good\nreason:\nadd a test in MysqlJobStatusRetrieverTest.java\n\n\n Commits\n- [x] My commits all reference JIRA issues in\ntheir subject lines.  and I have squashed multiple\ncommits if they address the same issue. In\naddition.  my commits follow the guidelines from\n\"[How to write a good git commit\nmessage](http://chris.beams.io/posts/git-\ncommit/)\":\n    1. Subject is separated from body by a blank line\n    2. Subject is limited to 50 characters\n    3. Subject does not end with a period\n    4. Subject uses the imperative mood (\"add\".  not\n\"adding\")\n    5. Body wraps at 72 characters\n    6. Body explains \"what\" and \"why\".  not \"how\"\n\nadded job start and end time in flow status\nretriever\n\nfix a bug\n\naddressed review comments\n\naddress review comments\n\nTrigger notification\n\nCloses #2597 from arjun4084346/jobTime\n","date":"2019-04-17 10:17:07","modifiedFileCount":"11","status":"M","submitter":"Arjun"},{"authorTime":"2020-03-18 08:42:43","codes":[{"authorDate":"2020-03-18 08:42:43","commitOrder":3,"curCode":"  public void testGetJobStatusesForFlowExecution() throws IOException {\n    long flowExecutionId = 1234L;\n    addJobStatusToStateStore(flowExecutionId, JobStatusRetriever.NA_KEY, ExecutionStatus.COMPILED.name());\n\n    Iterator<JobStatus>\n        jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.COMPILED.name());\n    Assert.assertEquals(jobStatus.getJobName(), JobStatusRetriever.NA_KEY);\n    Assert.assertEquals(jobStatus.getJobGroup(), JobStatusRetriever.NA_KEY);\n    Assert.assertEquals(jobStatus.getProcessedCount(), 0);\n    Assert.assertEquals(jobStatus.getLowWatermark(), \"\");\n    Assert.assertEquals(jobStatus.getHighWatermark(), \"\");\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_1, ExecutionStatus.RUNNING.name(), JOB_START_TIME, JOB_START_TIME);\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId, MY_JOB_NAME_1, MY_JOB_GROUP);\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.RUNNING.name());\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), jobGroup);\n    Assert.assertFalse(jobStatusIterator.hasNext());\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_2, ExecutionStatus.RUNNING.name());\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    if (jobStatus.getJobName().equals(JobStatusRetriever.NA_KEY)) {\n      jobStatus = jobStatusIterator.next();\n    }\n    Assert.assertTrue(jobStatus.getJobName().equals(MY_JOB_NAME_1) || jobStatus.getJobName().equals(MY_JOB_NAME_2));\n\n    String jobName = jobStatus.getJobName();\n    String nextExpectedJobName = (MY_JOB_NAME_1.equals(jobName)) ? MY_JOB_NAME_2 : MY_JOB_NAME_1;\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), nextExpectedJobName);\n  }\n","date":"2020-03-18 08:42:43","endLine":119,"groupId":"7528","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetJobStatusesForFlowExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/1a/b3b24e175fdb465310f3e35a783664b2b7497f.src","preCode":"  public void testGetJobStatusesForFlowExecution() throws IOException {\n    Long flowExecutionId = 1234L;\n    addJobStatusToStateStore(flowExecutionId, JobStatusRetriever.NA_KEY, ExecutionStatus.COMPILED.name());\n\n    Iterator<JobStatus>\n        jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.COMPILED.name());\n    Assert.assertEquals(jobStatus.getJobName(), JobStatusRetriever.NA_KEY);\n    Assert.assertEquals(jobStatus.getJobGroup(), JobStatusRetriever.NA_KEY);\n    Assert.assertEquals(jobStatus.getProcessedCount(), 0);\n    Assert.assertEquals(jobStatus.getLowWatermark(), \"\");\n    Assert.assertEquals(jobStatus.getHighWatermark(), \"\");\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_1, ExecutionStatus.RUNNING.name(), JOB_START_TIME, JOB_START_TIME);\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.RUNNING.name());\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), jobGroup);\n    Assert.assertFalse(jobStatusIterator.hasNext());\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_2, ExecutionStatus.RUNNING.name());\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    Assert.assertTrue(jobStatus.getJobName().equals(MY_JOB_NAME_1) || jobStatus.getJobName().equals(MY_JOB_NAME_2));\n\n    String jobName = jobStatus.getJobName();\n    String nextExpectedJobName = (MY_JOB_NAME_1.equals(jobName)) ? MY_JOB_NAME_2 : MY_JOB_NAME_1;\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), nextExpectedJobName);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/monitoring/JobStatusRetrieverTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2020-03-18 08:42:43","commitOrder":3,"curCode":"  public void testGetJobStatusesForFlowExecution1() {\n    long flowExecutionId = 1234L;\n    Iterator<JobStatus> jobStatusIterator = this.jobStatusRetriever.\n        getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId, MY_JOB_NAME_1, MY_JOB_GROUP);\n\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), MY_JOB_GROUP);\n    Assert.assertEquals(jobStatus.getJobExecutionId(), JOB_EXECUTION_ID);\n    Assert.assertEquals(jobStatus.getFlowName(), FLOW_NAME);\n    Assert.assertEquals(jobStatus.getFlowGroup(), FLOW_GROUP);\n    Assert.assertEquals(jobStatus.getFlowExecutionId(), flowExecutionId);\n    Assert.assertEquals(jobStatus.getMessage(), MESSAGE);\n  }\n","date":"2020-03-18 08:42:43","endLine":171,"groupId":"6426","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetJobStatusesForFlowExecution1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/1a/b3b24e175fdb465310f3e35a783664b2b7497f.src","preCode":"  public void testGetJobStatusesForFlowExecution1() {\n    long flowExecutionId = 1234L;\n    Iterator<JobStatus> jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId,\n        MY_JOB_NAME_1, myJobGroup);\n\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), myJobGroup);\n    Assert.assertEquals(jobStatus.getJobExecutionId(), JOB_EXECUTION_ID);\n    Assert.assertEquals(jobStatus.getFlowName(), FLOW_NAME);\n    Assert.assertEquals(jobStatus.getFlowGroup(), FLOW_GROUP);\n    Assert.assertEquals(jobStatus.getFlowExecutionId(), flowExecutionId);\n    Assert.assertEquals(jobStatus.getMessage(), MESSAGE);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/monitoring/JobStatusRetrieverTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"a77636eafad8b95c0198a5ad821eedacb204ee43","commitMessage":"@@@[GOBBLIN-1086] Add job orchestrated time.  use job start/prepare time to set job start time in GaaS jobs\n\nCloses #2927 from arjun4084346/fixStart\n","date":"2020-03-18 08:42:43","modifiedFileCount":"9","status":"M","submitter":"Arjun"},{"authorTime":"2020-03-18 08:42:43","codes":[{"authorDate":"2020-05-21 06:37:12","commitOrder":4,"curCode":"  public void testGetJobStatusesForFlowExecution() throws IOException {\n    long flowExecutionId = 1234L;\n    addJobStatusToStateStore(flowExecutionId, JobStatusRetriever.NA_KEY, ExecutionStatus.COMPILED.name());\n\n    Iterator<JobStatus>\n        jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.COMPILED.name());\n    Assert.assertEquals(jobStatus.getJobName(), JobStatusRetriever.NA_KEY);\n    Assert.assertEquals(jobStatus.getJobGroup(), JobStatusRetriever.NA_KEY);\n    Assert.assertEquals(jobStatus.getProcessedCount(), 0);\n    Assert.assertEquals(jobStatus.getLowWatermark(), \"\");\n    Assert.assertEquals(jobStatus.getHighWatermark(), \"\");\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_1, ExecutionStatus.RUNNING.name(), JOB_START_TIME, JOB_START_TIME);\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId, MY_JOB_NAME_1, MY_JOB_GROUP);\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.RUNNING.name());\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), jobGroup);\n    Assert.assertFalse(jobStatusIterator.hasNext());\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_2, ExecutionStatus.RUNNING.name());\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    if (JobStatusRetriever.isFlowStatus(jobStatus)) {\n      jobStatus = jobStatusIterator.next();\n    }\n    Assert.assertTrue(jobStatus.getJobName().equals(MY_JOB_NAME_1) || jobStatus.getJobName().equals(MY_JOB_NAME_2));\n\n    String jobName = jobStatus.getJobName();\n    String nextExpectedJobName = (MY_JOB_NAME_1.equals(jobName)) ? MY_JOB_NAME_2 : MY_JOB_NAME_1;\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    if (JobStatusRetriever.isFlowStatus(jobStatus)) {\n      Assert.assertTrue(jobStatusIterator.hasNext());\n      jobStatus = jobStatusIterator.next();\n    }\n\n    Assert.assertEquals(jobStatus.getJobName(), nextExpectedJobName);\n  }\n","date":"2020-05-21 06:37:12","endLine":124,"groupId":"101131","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetJobStatusesForFlowExecution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a6/546e26570458b43a103adccde8b5a1d183892c.src","preCode":"  public void testGetJobStatusesForFlowExecution() throws IOException {\n    long flowExecutionId = 1234L;\n    addJobStatusToStateStore(flowExecutionId, JobStatusRetriever.NA_KEY, ExecutionStatus.COMPILED.name());\n\n    Iterator<JobStatus>\n        jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.COMPILED.name());\n    Assert.assertEquals(jobStatus.getJobName(), JobStatusRetriever.NA_KEY);\n    Assert.assertEquals(jobStatus.getJobGroup(), JobStatusRetriever.NA_KEY);\n    Assert.assertEquals(jobStatus.getProcessedCount(), 0);\n    Assert.assertEquals(jobStatus.getLowWatermark(), \"\");\n    Assert.assertEquals(jobStatus.getHighWatermark(), \"\");\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_1, ExecutionStatus.RUNNING.name(), JOB_START_TIME, JOB_START_TIME);\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId, MY_JOB_NAME_1, MY_JOB_GROUP);\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getEventName(), ExecutionStatus.RUNNING.name());\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), jobGroup);\n    Assert.assertFalse(jobStatusIterator.hasNext());\n\n    addJobStatusToStateStore(flowExecutionId, MY_JOB_NAME_2, ExecutionStatus.RUNNING.name());\n    jobStatusIterator = this.jobStatusRetriever.getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId);\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    if (jobStatus.getJobName().equals(JobStatusRetriever.NA_KEY)) {\n      jobStatus = jobStatusIterator.next();\n    }\n    Assert.assertTrue(jobStatus.getJobName().equals(MY_JOB_NAME_1) || jobStatus.getJobName().equals(MY_JOB_NAME_2));\n\n    String jobName = jobStatus.getJobName();\n    String nextExpectedJobName = (MY_JOB_NAME_1.equals(jobName)) ? MY_JOB_NAME_2 : MY_JOB_NAME_1;\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), nextExpectedJobName);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/monitoring/JobStatusRetrieverTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2020-03-18 08:42:43","commitOrder":4,"curCode":"  public void testGetJobStatusesForFlowExecution1() {\n    long flowExecutionId = 1234L;\n    Iterator<JobStatus> jobStatusIterator = this.jobStatusRetriever.\n        getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId, MY_JOB_NAME_1, MY_JOB_GROUP);\n\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), MY_JOB_GROUP);\n    Assert.assertEquals(jobStatus.getJobExecutionId(), JOB_EXECUTION_ID);\n    Assert.assertEquals(jobStatus.getFlowName(), FLOW_NAME);\n    Assert.assertEquals(jobStatus.getFlowGroup(), FLOW_GROUP);\n    Assert.assertEquals(jobStatus.getFlowExecutionId(), flowExecutionId);\n    Assert.assertEquals(jobStatus.getMessage(), MESSAGE);\n  }\n","date":"2020-03-18 08:42:43","endLine":171,"groupId":"101131","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetJobStatusesForFlowExecution1","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/1a/b3b24e175fdb465310f3e35a783664b2b7497f.src","preCode":"  public void testGetJobStatusesForFlowExecution1() {\n    long flowExecutionId = 1234L;\n    Iterator<JobStatus> jobStatusIterator = this.jobStatusRetriever.\n        getJobStatusesForFlowExecution(FLOW_NAME, FLOW_GROUP, flowExecutionId, MY_JOB_NAME_1, MY_JOB_GROUP);\n\n    Assert.assertTrue(jobStatusIterator.hasNext());\n    JobStatus jobStatus = jobStatusIterator.next();\n    Assert.assertEquals(jobStatus.getJobName(), MY_JOB_NAME_1);\n    Assert.assertEquals(jobStatus.getJobGroup(), MY_JOB_GROUP);\n    Assert.assertEquals(jobStatus.getJobExecutionId(), JOB_EXECUTION_ID);\n    Assert.assertEquals(jobStatus.getFlowName(), FLOW_NAME);\n    Assert.assertEquals(jobStatus.getFlowGroup(), FLOW_GROUP);\n    Assert.assertEquals(jobStatus.getFlowExecutionId(), flowExecutionId);\n    Assert.assertEquals(jobStatus.getMessage(), MESSAGE);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/monitoring/JobStatusRetrieverTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"N"}],"commitId":"72373eebff6b669bd8e001966ffab4e6ded8ab7b","commitMessage":"@@@[GOBBLIN-1150] spec catalog table schema change\n\nCloses #2988 from arjun4084346/jsonConfig\n","date":"2020-05-21 06:37:12","modifiedFileCount":"10","status":"M","submitter":"Arjun"}]
