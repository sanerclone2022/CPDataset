[{"authorTime":"2017-09-12 17:29:05","codes":[{"authorDate":"2019-06-06 11:49:49","commitOrder":3,"curCode":"  public FsJobConfigurationManager(EventBus eventBus, Config config, MutableJobCatalog jobCatalog) {\n    super(eventBus, config);\n    this._jobCatalogOptional = jobCatalog != null ? Optional.of(jobCatalog) : Optional.absent();\n    this.refreshIntervalInSeconds = ConfigUtils.getLong(config, GobblinClusterConfigurationKeys.JOB_SPEC_REFRESH_INTERVAL,\n        DEFAULT_JOB_SPEC_REFRESH_INTERVAL);\n\n    this.fetchJobSpecExecutor = Executors.newSingleThreadScheduledExecutor(\n        ExecutorsUtils.newThreadFactory(Optional.of(log), Optional.of(\"FetchJobSpecExecutor\")));\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecConsumer.class);\n    try {\n      String specConsumerClassName = ConfigUtils.getString(config, GobblinClusterConfigurationKeys.SPEC_CONSUMER_CLASS_KEY,\n          GobblinClusterConfigurationKeys.DEFAULT_SPEC_CONSUMER_CLASS);\n      log.info(\"Using SpecConsumer ClassNameclass name/alias \" + specConsumerClassName);\n      this._specConsumer = (SpecConsumer) ConstructorUtils\n          .invokeConstructor(Class.forName(this.aliasResolver.resolve(specConsumerClassName)), config);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2019-06-06 11:49:49","endLine":91,"groupId":"3578","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"FsJobConfigurationManager","params":"(EventBuseventBus@Configconfig@MutableJobCatalogjobCatalog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/5f/d0d6ad5b6166efcf9ebf5dab000fe974d255bb.src","preCode":"  public FsJobConfigurationManager(EventBus eventBus, Config config, MutableJobCatalog jobCatalog) {\n    super(eventBus, config);\n    this._jobCatalogOptional = jobCatalog != null ? Optional.of(jobCatalog) : Optional.absent();\n    this.refreshIntervalInSeconds = ConfigUtils.getLong(config, GobblinClusterConfigurationKeys.JOB_SPEC_REFRESH_INTERVAL,\n        DEFAULT_JOB_SPEC_REFRESH_INTERVAL);\n\n    this.fetchJobSpecExecutor = Executors.newSingleThreadScheduledExecutor(\n        ExecutorsUtils.newThreadFactory(Optional.of(log), Optional.of(\"FetchJobSpecExecutor\")));\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecConsumer.class);\n    try {\n      String specConsumerClassName = ConfigUtils.getString(config, GobblinClusterConfigurationKeys.SPEC_CONSUMER_CLASS_KEY,\n          GobblinClusterConfigurationKeys.DEFAULT_SPEC_CONSUMER_CLASS);\n      log.info(\"Using SpecConsumer ClassNameclass name/alias \" + specConsumerClassName);\n      this._specConsumer = (SpecConsumer) ConstructorUtils\n          .invokeConstructor(Class.forName(this.aliasResolver.resolve(specConsumerClassName)), config);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/FsJobConfigurationManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"},{"authorDate":"2017-09-12 17:29:05","commitOrder":3,"curCode":"  public ScheduledJobConfigurationManager(EventBus eventBus, Config config) {\n    super(eventBus, config);\n\n    this.jobSpecs = Maps.newHashMap();\n    this.refreshIntervalInSeconds = ConfigUtils.getLong(config, GobblinClusterConfigurationKeys.JOB_SPEC_REFRESH_INTERVAL,\n        DEFAULT_JOB_SPEC_REFRESH_INTERVAL);\n\n    this.fetchJobSpecExecutor = Executors.newSingleThreadScheduledExecutor(\n        ExecutorsUtils.newThreadFactory(Optional.of(LOGGER), Optional.of(\"FetchJobSpecExecutor\")));\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecConsumer.class);\n    try {\n      String specConsumerClassName = GobblinClusterConfigurationKeys.DEFAULT_SPEC_CONSUMER_CLASS;\n      if (config.hasPath(GobblinClusterConfigurationKeys.SPEC_CONSUMER_CLASS_KEY)) {\n        specConsumerClassName = config.getString(GobblinClusterConfigurationKeys.SPEC_CONSUMER_CLASS_KEY);\n      }\n      LOGGER.info(\"Using SpecConsumer ClassNameclass name/alias \" + specConsumerClassName);\n      this._specConsumer = (SpecConsumer) ConstructorUtils\n          .invokeConstructor(Class.forName(this.aliasResolver.resolve(specConsumerClassName)), config);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2017-09-12 17:29:21","endLine":88,"groupId":"5965","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"ScheduledJobConfigurationManager","params":"(EventBuseventBus@Configconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/0f/2d3569d6efe14697371d86c3d97837055c0cdd.src","preCode":"  public ScheduledJobConfigurationManager(EventBus eventBus, Config config) {\n    super(eventBus, config);\n\n    this.jobSpecs = Maps.newHashMap();\n    this.refreshIntervalInSeconds = ConfigUtils.getLong(config, GobblinClusterConfigurationKeys.JOB_SPEC_REFRESH_INTERVAL,\n        DEFAULT_JOB_SPEC_REFRESH_INTERVAL);\n\n    this.fetchJobSpecExecutor = Executors.newSingleThreadScheduledExecutor(\n        ExecutorsUtils.newThreadFactory(Optional.of(LOGGER), Optional.of(\"FetchJobSpecExecutor\")));\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecConsumer.class);\n    try {\n      String specConsumerClassName = GobblinClusterConfigurationKeys.DEFAULT_SPEC_CONSUMER_CLASS;\n      if (config.hasPath(GobblinClusterConfigurationKeys.SPEC_CONSUMER_CLASS_KEY)) {\n        specConsumerClassName = config.getString(GobblinClusterConfigurationKeys.SPEC_CONSUMER_CLASS_KEY);\n      }\n      LOGGER.info(\"Using SpecConsumer ClassNameclass name/alias \" + specConsumerClassName);\n      this._specConsumer = (SpecConsumer) ConstructorUtils\n          .invokeConstructor(Class.forName(this.aliasResolver.resolve(specConsumerClassName)), config);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/ScheduledJobConfigurationManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"NB"}],"commitId":"388855876b731ddc6a22231c8961be631230b582","commitMessage":"@@@[GOBBLIN-795] Make JobCatalog optional for FsJobConfigurationManager\n\nCloses #2662 from sv2000/fsConfigManager\n","date":"2019-06-06 11:49:49","modifiedFileCount":"4","status":"M","submitter":"sv2000"},{"authorTime":"2017-09-12 17:29:05","codes":[{"authorDate":"2020-02-25 03:53:38","commitOrder":4,"curCode":"  public FsJobConfigurationManager(EventBus eventBus, Config config, MutableJobCatalog jobCatalog, FileSystem fs) {\n    super(eventBus, config);\n    this.jobCatalogOptional = jobCatalog != null ? Optional.of(jobCatalog) : Optional.absent();\n    this.refreshIntervalInSeconds = ConfigUtils.getLong(config, GobblinClusterConfigurationKeys.JOB_SPEC_REFRESH_INTERVAL,\n        DEFAULT_JOB_SPEC_REFRESH_INTERVAL);\n\n    this.fetchJobSpecExecutor = Executors.newSingleThreadScheduledExecutor(\n        ExecutorsUtils.newThreadFactory(Optional.of(log), Optional.of(\"FetchJobSpecExecutor\")));\n    this.specConsumer = new FsSpecConsumer(fs, config);\n  }\n","date":"2020-02-25 03:53:38","endLine":73,"groupId":"10104","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"FsJobConfigurationManager","params":"(EventBuseventBus@Configconfig@MutableJobCatalogjobCatalog@FileSystemfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/3b/65e42d16cf816c76d88980b758631a332db518.src","preCode":"  public FsJobConfigurationManager(EventBus eventBus, Config config, MutableJobCatalog jobCatalog) {\n    super(eventBus, config);\n    this._jobCatalogOptional = jobCatalog != null ? Optional.of(jobCatalog) : Optional.absent();\n    this.refreshIntervalInSeconds = ConfigUtils.getLong(config, GobblinClusterConfigurationKeys.JOB_SPEC_REFRESH_INTERVAL,\n        DEFAULT_JOB_SPEC_REFRESH_INTERVAL);\n\n    this.fetchJobSpecExecutor = Executors.newSingleThreadScheduledExecutor(\n        ExecutorsUtils.newThreadFactory(Optional.of(log), Optional.of(\"FetchJobSpecExecutor\")));\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecConsumer.class);\n    try {\n      String specConsumerClassName = ConfigUtils.getString(config, GobblinClusterConfigurationKeys.SPEC_CONSUMER_CLASS_KEY,\n          GobblinClusterConfigurationKeys.DEFAULT_SPEC_CONSUMER_CLASS);\n      log.info(\"Using SpecConsumer ClassNameclass name/alias \" + specConsumerClassName);\n      this._specConsumer = (SpecConsumer) ConstructorUtils\n          .invokeConstructor(Class.forName(this.aliasResolver.resolve(specConsumerClassName)), config);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/FsJobConfigurationManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2017-09-12 17:29:05","commitOrder":4,"curCode":"  public ScheduledJobConfigurationManager(EventBus eventBus, Config config) {\n    super(eventBus, config);\n\n    this.jobSpecs = Maps.newHashMap();\n    this.refreshIntervalInSeconds = ConfigUtils.getLong(config, GobblinClusterConfigurationKeys.JOB_SPEC_REFRESH_INTERVAL,\n        DEFAULT_JOB_SPEC_REFRESH_INTERVAL);\n\n    this.fetchJobSpecExecutor = Executors.newSingleThreadScheduledExecutor(\n        ExecutorsUtils.newThreadFactory(Optional.of(LOGGER), Optional.of(\"FetchJobSpecExecutor\")));\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecConsumer.class);\n    try {\n      String specConsumerClassName = GobblinClusterConfigurationKeys.DEFAULT_SPEC_CONSUMER_CLASS;\n      if (config.hasPath(GobblinClusterConfigurationKeys.SPEC_CONSUMER_CLASS_KEY)) {\n        specConsumerClassName = config.getString(GobblinClusterConfigurationKeys.SPEC_CONSUMER_CLASS_KEY);\n      }\n      LOGGER.info(\"Using SpecConsumer ClassNameclass name/alias \" + specConsumerClassName);\n      this._specConsumer = (SpecConsumer) ConstructorUtils\n          .invokeConstructor(Class.forName(this.aliasResolver.resolve(specConsumerClassName)), config);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2017-09-12 17:29:21","endLine":88,"groupId":"10104","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"ScheduledJobConfigurationManager","params":"(EventBuseventBus@Configconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/0f/2d3569d6efe14697371d86c3d97837055c0cdd.src","preCode":"  public ScheduledJobConfigurationManager(EventBus eventBus, Config config) {\n    super(eventBus, config);\n\n    this.jobSpecs = Maps.newHashMap();\n    this.refreshIntervalInSeconds = ConfigUtils.getLong(config, GobblinClusterConfigurationKeys.JOB_SPEC_REFRESH_INTERVAL,\n        DEFAULT_JOB_SPEC_REFRESH_INTERVAL);\n\n    this.fetchJobSpecExecutor = Executors.newSingleThreadScheduledExecutor(\n        ExecutorsUtils.newThreadFactory(Optional.of(LOGGER), Optional.of(\"FetchJobSpecExecutor\")));\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecConsumer.class);\n    try {\n      String specConsumerClassName = GobblinClusterConfigurationKeys.DEFAULT_SPEC_CONSUMER_CLASS;\n      if (config.hasPath(GobblinClusterConfigurationKeys.SPEC_CONSUMER_CLASS_KEY)) {\n        specConsumerClassName = config.getString(GobblinClusterConfigurationKeys.SPEC_CONSUMER_CLASS_KEY);\n      }\n      LOGGER.info(\"Using SpecConsumer ClassNameclass name/alias \" + specConsumerClassName);\n      this._specConsumer = (SpecConsumer) ConstructorUtils\n          .invokeConstructor(Class.forName(this.aliasResolver.resolve(specConsumerClassName)), config);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/ScheduledJobConfigurationManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"}],"commitId":"096fc0c78f820df26958f22b53558ca4b082f7ce","commitMessage":"@@@[GOBBLIN-1052] Create a spec consumer path if it does not exist in FS ?\n\nCloses #2892 from sv2000/specConsumer\n","date":"2020-02-25 03:53:38","modifiedFileCount":"10","status":"M","submitter":"sv2000"}]
