[{"authorTime":"2019-05-11 04:50:52","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void setUp() throws IOException {\n\n    this.schema = new Schema.Parser().parse(AVRO_SCHEMA);\n\n    \r\n    DateTime now = new DateTime(TZ).minusHours(6);\n    this.startDateTime =\n        new DateTime(now.getYear(), now.getMonthOfYear(), now.getDayOfMonth(), now.getHourOfDay(), 30, 0, TZ);\n\n    \r\n    DateTime recordDt = startDateTime;\n    recordTimestamps[0] = recordDt.getMillis();\n    recordDt = recordDt.plusHours(4);\n    for (int i = 1; i < RECORD_SIZE; i++) {\n      recordDt = recordDt.plusMinutes(1);\n      recordTimestamps[i] = recordDt.getMillis();\n    }\n\n    \r\n    State state = new State();\n    state.setProp(TimeBasedAvroWriterPartitioner.WRITER_PARTITION_COLUMNS, PARTITION_COLUMN_NAME);\n    state.setProp(ConfigurationKeys.WRITER_BUFFER_SIZE, ConfigurationKeys.DEFAULT_BUFFER_SIZE);\n    state.setProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI, ConfigurationKeys.LOCAL_FS_URI);\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, STAGING_DIR);\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, OUTPUT_DIR);\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, SOURCE_ENTITY);\n    state.setProp(ConfigurationKeys.WRITER_FILE_NAME, FILE_NAME);\n    state.setProp(TimeBasedWriterPartitioner.WRITER_PARTITION_PATTERN, DATE_PATTERN);\n    state.setProp(TimeBasedWriterPartitioner.WRITER_PARTITION_PREFIX, PREFIX);\n    state.setProp(TimeBasedWriterPartitioner.WRITER_PARTITION_SUFFIX, SUFFIX);\n    state.setProp(ConfigurationKeys.WRITER_PARTITIONER_CLASS, TimeBasedAvroWriterPartitioner.class.getName());\n\n    DataWriterBuilder<Schema, GenericRecord> builder = new AvroDataWriterBuilder()\n        .writeTo(Destination.of(Destination.DestinationType.HDFS, state))\n        .writeInFormat(WriterOutputFormat.AVRO)\n        .withWriterId(\"writer-1\")\n        .withSchema(this.schema)\n        .withBranches(1).forBranch(0);\n\n    this.writer = new PartitionedDataWriter<Schema, GenericRecord>(builder, state);\n\n    GenericRecordBuilder genericRecordBuilder = new GenericRecordBuilder(this.schema);\n    for (int i = 0; i < RECORD_SIZE; i++) {\n      genericRecordBuilder.set(PARTITION_COLUMN_NAME, recordTimestamps[i]);\n      this.writer.writeEnvelope(new RecordEnvelope<>(genericRecordBuilder.build()));\n    }\n\n    this.writer.close();\n    this.writer.commit();\n\n  }\n","date":"2017-07-31 15:51:25","endLine":146,"groupId":"6830","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/be/4f16153981bdea1aa1bc4b05aa2b535eab42fb.src","preCode":"  public void setUp() throws IOException {\n\n    this.schema = new Schema.Parser().parse(AVRO_SCHEMA);\n\n    \r\n    DateTime now = new DateTime(TZ).minusHours(6);\n    this.startDateTime =\n        new DateTime(now.getYear(), now.getMonthOfYear(), now.getDayOfMonth(), now.getHourOfDay(), 30, 0, TZ);\n\n    \r\n    DateTime recordDt = startDateTime;\n    recordTimestamps[0] = recordDt.getMillis();\n    recordDt = recordDt.plusHours(4);\n    for (int i = 1; i < RECORD_SIZE; i++) {\n      recordDt = recordDt.plusMinutes(1);\n      recordTimestamps[i] = recordDt.getMillis();\n    }\n\n    \r\n    State state = new State();\n    state.setProp(TimeBasedAvroWriterPartitioner.WRITER_PARTITION_COLUMNS, PARTITION_COLUMN_NAME);\n    state.setProp(ConfigurationKeys.WRITER_BUFFER_SIZE, ConfigurationKeys.DEFAULT_BUFFER_SIZE);\n    state.setProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI, ConfigurationKeys.LOCAL_FS_URI);\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, STAGING_DIR);\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, OUTPUT_DIR);\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, SOURCE_ENTITY);\n    state.setProp(ConfigurationKeys.WRITER_FILE_NAME, FILE_NAME);\n    state.setProp(TimeBasedWriterPartitioner.WRITER_PARTITION_PATTERN, DATE_PATTERN);\n    state.setProp(TimeBasedWriterPartitioner.WRITER_PARTITION_PREFIX, PREFIX);\n    state.setProp(TimeBasedWriterPartitioner.WRITER_PARTITION_SUFFIX, SUFFIX);\n    state.setProp(ConfigurationKeys.WRITER_PARTITIONER_CLASS, TimeBasedAvroWriterPartitioner.class.getName());\n\n    DataWriterBuilder<Schema, GenericRecord> builder = new AvroDataWriterBuilder()\n        .writeTo(Destination.of(Destination.DestinationType.HDFS, state))\n        .writeInFormat(WriterOutputFormat.AVRO)\n        .withWriterId(\"writer-1\")\n        .withSchema(this.schema)\n        .withBranches(1).forBranch(0);\n\n    this.writer = new PartitionedDataWriter<Schema, GenericRecord>(builder, state);\n\n    GenericRecordBuilder genericRecordBuilder = new GenericRecordBuilder(this.schema);\n    for (int i = 0; i < RECORD_SIZE; i++) {\n      genericRecordBuilder.set(PARTITION_COLUMN_NAME, recordTimestamps[i]);\n      this.writer.writeEnvelope(new RecordEnvelope<>(genericRecordBuilder.build()));\n    }\n\n    this.writer.close();\n    this.writer.commit();\n\n  }\n","realPath":"gobblin-core/src/test/java/org/apache/gobblin/source/extractor/DatePartitionedAvroFileExtractorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"NB"},{"authorDate":"2019-05-11 04:50:52","commitOrder":2,"curCode":"  private DataWriter<GenericRecord> getWriter(State state)\n      throws IOException {\n    \r\n    DataWriterBuilder<Schema, GenericRecord> builder = new AvroDataWriterBuilder()\n        .writeTo(Destination.of(Destination.DestinationType.HDFS, state)).writeInFormat(WriterOutputFormat.AVRO)\n        .withWriterId(WRITER_ID).withSchema(this.schema).withBranches(1).forBranch(0);\n    return new PartitionedDataWriter<Schema, GenericRecord>(builder, state);\n  }\n","date":"2019-05-11 04:50:52","endLine":109,"groupId":"2929","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getWriter","params":"(Statestate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/bc/c5905aa88a9234490177a5a384b1886a454206.src","preCode":"  private DataWriter<GenericRecord> getWriter(State state)\n      throws IOException {\n    \r\n    DataWriterBuilder<Schema, GenericRecord> builder = new AvroDataWriterBuilder()\n        .writeTo(Destination.of(Destination.DestinationType.HDFS, state)).writeInFormat(WriterOutputFormat.AVRO)\n        .withWriterId(WRITER_ID).withSchema(this.schema).withBranches(1).forBranch(0);\n    return new PartitionedDataWriter<Schema, GenericRecord>(builder, state);\n  }\n","realPath":"gobblin-core/src/test/java/org/apache/gobblin/writer/partitioner/TimeBasedAvroWriterPartitionerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"}],"commitId":"bca2e1f5166406ba938d62f4649878b6f6c0b9b6","commitMessage":"@@@[GOBBLIN-767] Support different time units in TimeBasedWriterPartitioner\n\nCloses #2630 from zxcware/tp\n","date":"2019-05-11 04:50:52","modifiedFileCount":"3","status":"M","submitter":"zhchen"},{"authorTime":"2019-05-15 01:40:32","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":3,"curCode":"  public void setUp() throws IOException {\n\n    this.schema = new Schema.Parser().parse(AVRO_SCHEMA);\n\n    \r\n    DateTime now = new DateTime(TZ).minusHours(6);\n    this.startDateTime =\n        new DateTime(now.getYear(), now.getMonthOfYear(), now.getDayOfMonth(), now.getHourOfDay(), 30, 0, TZ);\n\n    \r\n    DateTime recordDt = startDateTime;\n    recordTimestamps[0] = recordDt.getMillis();\n    recordDt = recordDt.plusHours(4);\n    for (int i = 1; i < RECORD_SIZE; i++) {\n      recordDt = recordDt.plusMinutes(1);\n      recordTimestamps[i] = recordDt.getMillis();\n    }\n\n    \r\n    State state = new State();\n    state.setProp(TimeBasedAvroWriterPartitioner.WRITER_PARTITION_COLUMNS, PARTITION_COLUMN_NAME);\n    state.setProp(ConfigurationKeys.WRITER_BUFFER_SIZE, ConfigurationKeys.DEFAULT_BUFFER_SIZE);\n    state.setProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI, ConfigurationKeys.LOCAL_FS_URI);\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, STAGING_DIR);\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, OUTPUT_DIR);\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, SOURCE_ENTITY);\n    state.setProp(ConfigurationKeys.WRITER_FILE_NAME, FILE_NAME);\n    state.setProp(TimeBasedWriterPartitioner.WRITER_PARTITION_PATTERN, DATE_PATTERN);\n    state.setProp(TimeBasedWriterPartitioner.WRITER_PARTITION_PREFIX, PREFIX);\n    state.setProp(TimeBasedWriterPartitioner.WRITER_PARTITION_SUFFIX, SUFFIX);\n    state.setProp(ConfigurationKeys.WRITER_PARTITIONER_CLASS, TimeBasedAvroWriterPartitioner.class.getName());\n\n    DataWriterBuilder<Schema, GenericRecord> builder = new AvroDataWriterBuilder()\n        .writeTo(Destination.of(Destination.DestinationType.HDFS, state))\n        .writeInFormat(WriterOutputFormat.AVRO)\n        .withWriterId(\"writer-1\")\n        .withSchema(this.schema)\n        .withBranches(1).forBranch(0);\n\n    this.writer = new PartitionedDataWriter<Schema, GenericRecord>(builder, state);\n\n    GenericRecordBuilder genericRecordBuilder = new GenericRecordBuilder(this.schema);\n    for (int i = 0; i < RECORD_SIZE; i++) {\n      genericRecordBuilder.set(PARTITION_COLUMN_NAME, recordTimestamps[i]);\n      this.writer.writeEnvelope(new RecordEnvelope<>(genericRecordBuilder.build()));\n    }\n\n    this.writer.close();\n    this.writer.commit();\n\n  }\n","date":"2017-07-31 15:51:25","endLine":146,"groupId":"101275","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/be/4f16153981bdea1aa1bc4b05aa2b535eab42fb.src","preCode":"  public void setUp() throws IOException {\n\n    this.schema = new Schema.Parser().parse(AVRO_SCHEMA);\n\n    \r\n    DateTime now = new DateTime(TZ).minusHours(6);\n    this.startDateTime =\n        new DateTime(now.getYear(), now.getMonthOfYear(), now.getDayOfMonth(), now.getHourOfDay(), 30, 0, TZ);\n\n    \r\n    DateTime recordDt = startDateTime;\n    recordTimestamps[0] = recordDt.getMillis();\n    recordDt = recordDt.plusHours(4);\n    for (int i = 1; i < RECORD_SIZE; i++) {\n      recordDt = recordDt.plusMinutes(1);\n      recordTimestamps[i] = recordDt.getMillis();\n    }\n\n    \r\n    State state = new State();\n    state.setProp(TimeBasedAvroWriterPartitioner.WRITER_PARTITION_COLUMNS, PARTITION_COLUMN_NAME);\n    state.setProp(ConfigurationKeys.WRITER_BUFFER_SIZE, ConfigurationKeys.DEFAULT_BUFFER_SIZE);\n    state.setProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI, ConfigurationKeys.LOCAL_FS_URI);\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, STAGING_DIR);\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, OUTPUT_DIR);\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, SOURCE_ENTITY);\n    state.setProp(ConfigurationKeys.WRITER_FILE_NAME, FILE_NAME);\n    state.setProp(TimeBasedWriterPartitioner.WRITER_PARTITION_PATTERN, DATE_PATTERN);\n    state.setProp(TimeBasedWriterPartitioner.WRITER_PARTITION_PREFIX, PREFIX);\n    state.setProp(TimeBasedWriterPartitioner.WRITER_PARTITION_SUFFIX, SUFFIX);\n    state.setProp(ConfigurationKeys.WRITER_PARTITIONER_CLASS, TimeBasedAvroWriterPartitioner.class.getName());\n\n    DataWriterBuilder<Schema, GenericRecord> builder = new AvroDataWriterBuilder()\n        .writeTo(Destination.of(Destination.DestinationType.HDFS, state))\n        .writeInFormat(WriterOutputFormat.AVRO)\n        .withWriterId(\"writer-1\")\n        .withSchema(this.schema)\n        .withBranches(1).forBranch(0);\n\n    this.writer = new PartitionedDataWriter<Schema, GenericRecord>(builder, state);\n\n    GenericRecordBuilder genericRecordBuilder = new GenericRecordBuilder(this.schema);\n    for (int i = 0; i < RECORD_SIZE; i++) {\n      genericRecordBuilder.set(PARTITION_COLUMN_NAME, recordTimestamps[i]);\n      this.writer.writeEnvelope(new RecordEnvelope<>(genericRecordBuilder.build()));\n    }\n\n    this.writer.close();\n    this.writer.commit();\n\n  }\n","realPath":"gobblin-core/src/test/java/org/apache/gobblin/source/extractor/DatePartitionedAvroFileExtractorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"},{"authorDate":"2019-05-15 01:40:32","commitOrder":3,"curCode":"  private DataWriter<GenericRecord> getWriter(Schema schema, State state)\n      throws IOException {\n    \r\n    DataWriterBuilder<Schema, GenericRecord> builder = new AvroDataWriterBuilder()\n        .writeTo(Destination.of(Destination.DestinationType.HDFS, state)).writeInFormat(WriterOutputFormat.AVRO)\n        .withWriterId(WRITER_ID).withSchema(schema).withBranches(1).forBranch(0);\n    return new PartitionedDataWriter<Schema, GenericRecord>(builder, state);\n  }\n","date":"2019-05-15 01:40:32","endLine":180,"groupId":"101275","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"getWriter","params":"(Schemaschema@Statestate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/eb/2ddc08777b306b027bf262ead00c88bf496fe3.src","preCode":"  private DataWriter<GenericRecord> getWriter(State state)\n      throws IOException {\n    \r\n    DataWriterBuilder<Schema, GenericRecord> builder = new AvroDataWriterBuilder()\n        .writeTo(Destination.of(Destination.DestinationType.HDFS, state)).writeInFormat(WriterOutputFormat.AVRO)\n        .withWriterId(WRITER_ID).withSchema(this.schema).withBranches(1).forBranch(0);\n    return new PartitionedDataWriter<Schema, GenericRecord>(builder, state);\n  }\n","realPath":"gobblin-core/src/test/java/org/apache/gobblin/writer/partitioner/TimeBasedAvroWriterPartitionerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"39239fabeac25c5cd5e7fcd95f2e4ee9624be81d","commitMessage":"@@@[GOBBLIN-769] Support string record timestamp in TimeBasedAvroWriterPartitioner\n\nCloses #2632 from zxcware/sp\n","date":"2019-05-15 01:40:32","modifiedFileCount":"3","status":"M","submitter":"zhchen"}]
