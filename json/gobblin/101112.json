[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testCreate() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    long schedulingStartTime = System.currentTimeMillis();\n    this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n\n    \r\n    GobblinServiceManager master;\n    if (this.node1GobblinServiceManager.isLeader()) {\n      master = this.node1GobblinServiceManager;\n    } else if (this.node2GobblinServiceManager.isLeader()) {\n      master = this.node2GobblinServiceManager;\n    } else {\n      Assert.fail(\"No leader found in service cluster\");\n      return;\n    }\n\n    int attempt = 0;\n    boolean assertSuccess = false;\n    while (attempt < 800) {\n      int masterJobs = master.flowCatalog.getSpecs().size();\n      if (masterJobs == 2) {\n        assertSuccess = true;\n        break;\n      }\n      Thread.sleep(5);\n      attempt ++;\n    }\n    long schedulingEndTime = System.currentTimeMillis();\n    logger.info(\"Total scheduling time in ms: \" + (schedulingEndTime - schedulingStartTime));\n\n    Assert.assertTrue(assertSuccess, \"Flow that was created is not reflecting in FlowCatalog\");\n  }\n","date":"2017-07-31 15:51:25","endLine":282,"groupId":"2580","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/01/d028567436c469107bb4a5215c1f0990069497.src","preCode":"  public void testCreate() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    long schedulingStartTime = System.currentTimeMillis();\n    this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n\n    \r\n    GobblinServiceManager master;\n    if (this.node1GobblinServiceManager.isLeader()) {\n      master = this.node1GobblinServiceManager;\n    } else if (this.node2GobblinServiceManager.isLeader()) {\n      master = this.node2GobblinServiceManager;\n    } else {\n      Assert.fail(\"No leader found in service cluster\");\n      return;\n    }\n\n    int attempt = 0;\n    boolean assertSuccess = false;\n    while (attempt < 800) {\n      int masterJobs = master.flowCatalog.getSpecs().size();\n      if (masterJobs == 2) {\n        assertSuccess = true;\n        break;\n      }\n      Thread.sleep(5);\n      attempt ++;\n    }\n    long schedulingEndTime = System.currentTimeMillis();\n    logger.info(\"Total scheduling time in ms: \" + (schedulingEndTime - schedulingStartTime));\n\n    Assert.assertTrue(assertSuccess, \"Flow that was created is not reflecting in FlowCatalog\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    try {\n      this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n      Assert.fail(\"Get should have gotten a 409 error\");\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.CONFLICT_409);\n    }\n\n    try {\n      this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n      Assert.fail(\"Get should have gotten a 409 error\");\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.CONFLICT_409);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":316,"groupId":"2580","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateAgain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/01/d028567436c469107bb4a5215c1f0990069497.src","preCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    try {\n      this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n      Assert.fail(\"Get should have gotten a 409 error\");\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.CONFLICT_409);\n    }\n\n    try {\n      this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n      Assert.fail(\"Get should have gotten a 409 error\");\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.CONFLICT_409);\n    }\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-11-08 06:04:53","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void testCreate() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    long schedulingStartTime = System.currentTimeMillis();\n    this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n\n    \r\n    GobblinServiceManager master;\n    if (this.node1GobblinServiceManager.isLeader()) {\n      master = this.node1GobblinServiceManager;\n    } else if (this.node2GobblinServiceManager.isLeader()) {\n      master = this.node2GobblinServiceManager;\n    } else {\n      Assert.fail(\"No leader found in service cluster\");\n      return;\n    }\n\n    int attempt = 0;\n    boolean assertSuccess = false;\n    while (attempt < 800) {\n      int masterJobs = master.flowCatalog.getSpecs().size();\n      if (masterJobs == 2) {\n        assertSuccess = true;\n        break;\n      }\n      Thread.sleep(5);\n      attempt ++;\n    }\n    long schedulingEndTime = System.currentTimeMillis();\n    logger.info(\"Total scheduling time in ms: \" + (schedulingEndTime - schedulingStartTime));\n\n    Assert.assertTrue(assertSuccess, \"Flow that was created is not reflecting in FlowCatalog\");\n  }\n","date":"2017-07-31 15:51:25","endLine":282,"groupId":"2580","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/01/d028567436c469107bb4a5215c1f0990069497.src","preCode":"  public void testCreate() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    long schedulingStartTime = System.currentTimeMillis();\n    this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n\n    \r\n    GobblinServiceManager master;\n    if (this.node1GobblinServiceManager.isLeader()) {\n      master = this.node1GobblinServiceManager;\n    } else if (this.node2GobblinServiceManager.isLeader()) {\n      master = this.node2GobblinServiceManager;\n    } else {\n      Assert.fail(\"No leader found in service cluster\");\n      return;\n    }\n\n    int attempt = 0;\n    boolean assertSuccess = false;\n    while (attempt < 800) {\n      int masterJobs = master.flowCatalog.getSpecs().size();\n      if (masterJobs == 2) {\n        assertSuccess = true;\n        break;\n      }\n      Thread.sleep(5);\n      attempt ++;\n    }\n    long schedulingEndTime = System.currentTimeMillis();\n    logger.info(\"Total scheduling time in ms: \" + (schedulingEndTime - schedulingStartTime));\n\n    Assert.assertTrue(assertSuccess, \"Flow that was created is not reflecting in FlowCatalog\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"N"},{"authorDate":"2017-11-08 06:04:53","commitOrder":2,"curCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    try {\n      this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n\n    try {\n      this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n  }\n","date":"2017-11-08 06:04:53","endLine":313,"groupId":"2580","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateAgain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ad/4180aa44aa25822bd497bd77eac3b5b2bb5c20.src","preCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    try {\n      this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n      Assert.fail(\"Get should have gotten a 409 error\");\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.CONFLICT_409);\n    }\n\n    try {\n      this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n      Assert.fail(\"Get should have gotten a 409 error\");\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.CONFLICT_409);\n    }\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"}],"commitId":"c385f1dddb0124f0ff2545d9a591f3b055f76080","commitMessage":"@@@[GOBBLIN-304] Change default version of flow specs to null.\n\nCloses #2159 from arjun4084346/removeSpecVersion\n","date":"2017-11-08 06:04:53","modifiedFileCount":"14","status":"M","submitter":"Arjun"},{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2018-05-17 02:40:22","commitOrder":3,"curCode":"  public void testCreate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testCreate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    long schedulingStartTime = System.currentTimeMillis();\n    this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n\n    \r\n    GobblinServiceManager master;\n    if (this.node1GobblinServiceManager.isLeader()) {\n      master = this.node1GobblinServiceManager;\n      logger.info(\"#### node 1 is manager\");\n    } else if (this.node2GobblinServiceManager.isLeader()) {\n      master = this.node2GobblinServiceManager;\n      logger.info(\"#### node 2 is manager\");\n    } else {\n      Assert.fail(\"No leader found in service cluster\");\n      return;\n    }\n\n    int attempt = 0;\n    boolean assertSuccess = false;\n\n    \r\n    \r\n    \r\n    Thread.sleep(3000);\n\n    while (attempt < 800) {\n      int masterJobs = master.flowCatalog.getSpecs().size();\n      if (masterJobs == 2) {\n        assertSuccess = true;\n        break;\n      }\n      Thread.sleep(5);\n      attempt ++;\n    }\n    long schedulingEndTime = System.currentTimeMillis();\n    logger.info(\"Total scheduling time in ms: \" + (schedulingEndTime - schedulingStartTime));\n\n    Assert.assertTrue(assertSuccess, \"Flow that was created is not reflecting in FlowCatalog\");\n    logger.info(\"+++++++++++++++++++ testCreate END\");\n  }\n","date":"2018-05-17 02:40:22","endLine":300,"groupId":"2580","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2b/4332fb6b1dc8ada72e6d2bf685a064b33be3b3.src","preCode":"  public void testCreate() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    long schedulingStartTime = System.currentTimeMillis();\n    this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n\n    \r\n    GobblinServiceManager master;\n    if (this.node1GobblinServiceManager.isLeader()) {\n      master = this.node1GobblinServiceManager;\n    } else if (this.node2GobblinServiceManager.isLeader()) {\n      master = this.node2GobblinServiceManager;\n    } else {\n      Assert.fail(\"No leader found in service cluster\");\n      return;\n    }\n\n    int attempt = 0;\n    boolean assertSuccess = false;\n    while (attempt < 800) {\n      int masterJobs = master.flowCatalog.getSpecs().size();\n      if (masterJobs == 2) {\n        assertSuccess = true;\n        break;\n      }\n      Thread.sleep(5);\n      attempt ++;\n    }\n    long schedulingEndTime = System.currentTimeMillis();\n    logger.info(\"Total scheduling time in ms: \" + (schedulingEndTime - schedulingStartTime));\n\n    Assert.assertTrue(assertSuccess, \"Flow that was created is not reflecting in FlowCatalog\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2018-05-17 02:40:22","commitOrder":3,"curCode":"  public void testCreateAgain() throws Exception {\n    logger.info(\"+++++++++++++++++++ testCreateAgain START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    try {\n      this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n\n    try {\n      this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n\n    logger.info(\"+++++++++++++++++++ testCreateAgain END\");\n  }\n","date":"2018-05-17 02:40:22","endLine":336,"groupId":"2580","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateAgain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2b/4332fb6b1dc8ada72e6d2bf685a064b33be3b3.src","preCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    try {\n      this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n\n    try {\n      this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"M"}],"commitId":"01302a6db2c468507c0adea5daa69de997aaf14b","commitMessage":"@@@[GOBBLIN-458] Refactor flowConfig resource handler\n\nCloses #2329 from yukuai518/delete\n","date":"2018-05-17 02:40:22","modifiedFileCount":"9","status":"M","submitter":"Kuai Yu"},{"authorTime":"2019-12-10 06:26:30","codes":[{"authorDate":"2018-05-17 02:40:22","commitOrder":4,"curCode":"  public void testCreate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testCreate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    long schedulingStartTime = System.currentTimeMillis();\n    this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n\n    \r\n    GobblinServiceManager master;\n    if (this.node1GobblinServiceManager.isLeader()) {\n      master = this.node1GobblinServiceManager;\n      logger.info(\"#### node 1 is manager\");\n    } else if (this.node2GobblinServiceManager.isLeader()) {\n      master = this.node2GobblinServiceManager;\n      logger.info(\"#### node 2 is manager\");\n    } else {\n      Assert.fail(\"No leader found in service cluster\");\n      return;\n    }\n\n    int attempt = 0;\n    boolean assertSuccess = false;\n\n    \r\n    \r\n    \r\n    Thread.sleep(3000);\n\n    while (attempt < 800) {\n      int masterJobs = master.flowCatalog.getSpecs().size();\n      if (masterJobs == 2) {\n        assertSuccess = true;\n        break;\n      }\n      Thread.sleep(5);\n      attempt ++;\n    }\n    long schedulingEndTime = System.currentTimeMillis();\n    logger.info(\"Total scheduling time in ms: \" + (schedulingEndTime - schedulingStartTime));\n\n    Assert.assertTrue(assertSuccess, \"Flow that was created is not reflecting in FlowCatalog\");\n    logger.info(\"+++++++++++++++++++ testCreate END\");\n  }\n","date":"2018-05-17 02:40:22","endLine":300,"groupId":"2580","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2b/4332fb6b1dc8ada72e6d2bf685a064b33be3b3.src","preCode":"  public void testCreate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testCreate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    long schedulingStartTime = System.currentTimeMillis();\n    this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n\n    \r\n    GobblinServiceManager master;\n    if (this.node1GobblinServiceManager.isLeader()) {\n      master = this.node1GobblinServiceManager;\n      logger.info(\"#### node 1 is manager\");\n    } else if (this.node2GobblinServiceManager.isLeader()) {\n      master = this.node2GobblinServiceManager;\n      logger.info(\"#### node 2 is manager\");\n    } else {\n      Assert.fail(\"No leader found in service cluster\");\n      return;\n    }\n\n    int attempt = 0;\n    boolean assertSuccess = false;\n\n    \r\n    \r\n    \r\n    Thread.sleep(3000);\n\n    while (attempt < 800) {\n      int masterJobs = master.flowCatalog.getSpecs().size();\n      if (masterJobs == 2) {\n        assertSuccess = true;\n        break;\n      }\n      Thread.sleep(5);\n      attempt ++;\n    }\n    long schedulingEndTime = System.currentTimeMillis();\n    logger.info(\"Total scheduling time in ms: \" + (schedulingEndTime - schedulingStartTime));\n\n    Assert.assertTrue(assertSuccess, \"Flow that was created is not reflecting in FlowCatalog\");\n    logger.info(\"+++++++++++++++++++ testCreate END\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"N"},{"authorDate":"2019-12-10 06:26:30","commitOrder":4,"curCode":"  public void testCreateAgain() throws Exception {\n    logger.info(\"+++++++++++++++++++ testCreateAgain START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    RestLiResponseException exception1 = null;\n    try {\n      this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    } catch (RestLiResponseException e) {\n      exception1 = e;\n    }\n    Assert.assertNotNull(exception1);\n    Assert.assertEquals(exception1.getStatus(), com.linkedin.restli.common.HttpStatus.S_409_CONFLICT.getCode());\n\n    RestLiResponseException exception2 = null;\n    try {\n      this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n    } catch (RestLiResponseException e) {\n      exception2 = e;\n    }\n    Assert.assertNotNull(exception2);\n    Assert.assertEquals(exception2.getStatus(), com.linkedin.restli.common.HttpStatus.S_409_CONFLICT.getCode());\n\n    logger.info(\"+++++++++++++++++++ testCreateAgain END\");\n  }\n","date":"2019-12-10 06:26:30","endLine":339,"groupId":"2580","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateAgain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/27/52add997ef1abe86a4f1b255a5b25565a78127.src","preCode":"  public void testCreateAgain() throws Exception {\n    logger.info(\"+++++++++++++++++++ testCreateAgain START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    try {\n      this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n\n    try {\n      this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n\n    logger.info(\"+++++++++++++++++++ testCreateAgain END\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"}],"commitId":"0a1debc30734ec57d2be7351270894756a6c18af","commitMessage":"@@@[GOBBLIN-990] Don't allow creation of flow config that already exists\n\nCloses #2836 from jack-moseley/create-conflict\n","date":"2019-12-10 06:26:30","modifiedFileCount":"6","status":"M","submitter":"Jack Moseley"},{"authorTime":"2020-04-07 03:52:55","codes":[{"authorDate":"2018-05-17 02:40:22","commitOrder":5,"curCode":"  public void testCreate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testCreate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    long schedulingStartTime = System.currentTimeMillis();\n    this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n\n    \r\n    GobblinServiceManager master;\n    if (this.node1GobblinServiceManager.isLeader()) {\n      master = this.node1GobblinServiceManager;\n      logger.info(\"#### node 1 is manager\");\n    } else if (this.node2GobblinServiceManager.isLeader()) {\n      master = this.node2GobblinServiceManager;\n      logger.info(\"#### node 2 is manager\");\n    } else {\n      Assert.fail(\"No leader found in service cluster\");\n      return;\n    }\n\n    int attempt = 0;\n    boolean assertSuccess = false;\n\n    \r\n    \r\n    \r\n    Thread.sleep(3000);\n\n    while (attempt < 800) {\n      int masterJobs = master.flowCatalog.getSpecs().size();\n      if (masterJobs == 2) {\n        assertSuccess = true;\n        break;\n      }\n      Thread.sleep(5);\n      attempt ++;\n    }\n    long schedulingEndTime = System.currentTimeMillis();\n    logger.info(\"Total scheduling time in ms: \" + (schedulingEndTime - schedulingStartTime));\n\n    Assert.assertTrue(assertSuccess, \"Flow that was created is not reflecting in FlowCatalog\");\n    logger.info(\"+++++++++++++++++++ testCreate END\");\n  }\n","date":"2018-05-17 02:40:22","endLine":300,"groupId":"101112","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2b/4332fb6b1dc8ada72e6d2bf685a064b33be3b3.src","preCode":"  public void testCreate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testCreate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    long schedulingStartTime = System.currentTimeMillis();\n    this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n\n    \r\n    GobblinServiceManager master;\n    if (this.node1GobblinServiceManager.isLeader()) {\n      master = this.node1GobblinServiceManager;\n      logger.info(\"#### node 1 is manager\");\n    } else if (this.node2GobblinServiceManager.isLeader()) {\n      master = this.node2GobblinServiceManager;\n      logger.info(\"#### node 2 is manager\");\n    } else {\n      Assert.fail(\"No leader found in service cluster\");\n      return;\n    }\n\n    int attempt = 0;\n    boolean assertSuccess = false;\n\n    \r\n    \r\n    \r\n    Thread.sleep(3000);\n\n    while (attempt < 800) {\n      int masterJobs = master.flowCatalog.getSpecs().size();\n      if (masterJobs == 2) {\n        assertSuccess = true;\n        break;\n      }\n      Thread.sleep(5);\n      attempt ++;\n    }\n    long schedulingEndTime = System.currentTimeMillis();\n    logger.info(\"Total scheduling time in ms: \" + (schedulingEndTime - schedulingStartTime));\n\n    Assert.assertTrue(assertSuccess, \"Flow that was created is not reflecting in FlowCatalog\");\n    logger.info(\"+++++++++++++++++++ testCreate END\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"N"},{"authorDate":"2020-04-07 03:52:55","commitOrder":5,"curCode":"  public void testCreateAgain() throws Exception {\n    logger.info(\"+++++++++++++++++++ testCreateAgain START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    try {\n      this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n\n    try {\n      this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n\n    logger.info(\"+++++++++++++++++++ testCreateAgain END\");\n  }\n","date":"2020-04-07 03:52:55","endLine":333,"groupId":"101112","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateAgain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/21/327781ce20495ad5d8fe1952ac529671e60a4b.src","preCode":"  public void testCreateAgain() throws Exception {\n    logger.info(\"+++++++++++++++++++ testCreateAgain START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    FlowConfig flowConfig1 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_1).setFlowName(TEST_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n    FlowConfig flowConfig2 = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_GROUP_NAME_2).setFlowName(TEST_FLOW_NAME_2))\n        .setTemplateUris(TEST_TEMPLATE_URI_2).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_2).\n            setRunImmediately(true))\n        .setProperties(new StringMap(flowProperties));\n\n    \r\n    RestLiResponseException exception1 = null;\n    try {\n      this.node1FlowConfigClient.createFlowConfig(flowConfig1);\n    } catch (RestLiResponseException e) {\n      exception1 = e;\n    }\n    Assert.assertNotNull(exception1);\n    Assert.assertEquals(exception1.getStatus(), com.linkedin.restli.common.HttpStatus.S_409_CONFLICT.getCode());\n\n    RestLiResponseException exception2 = null;\n    try {\n      this.node2FlowConfigClient.createFlowConfig(flowConfig2);\n    } catch (RestLiResponseException e) {\n      exception2 = e;\n    }\n    Assert.assertNotNull(exception2);\n    Assert.assertEquals(exception2.getStatus(), com.linkedin.restli.common.HttpStatus.S_409_CONFLICT.getCode());\n\n    logger.info(\"+++++++++++++++++++ testCreateAgain END\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"}],"commitId":"4b8df7af59efb2ac5096bd3db6b0cdf5c3b83d1a","commitMessage":"@@@[GOBBLIN-1109] partial rollback of PR#2836\n\nDear Gobblin maintainers. \n\nPlease accept this PR. I understand that it will\nnot be reviewed until I have checked off all the\nsteps below! jack-moseley please review\n\n\n JIRA\n- [x] My PR addresses the following [Gobblin JIRA]\n(https://issues.apache.org/jira/browse/GOBBLIN/)\nissues and references them in the PR title. For\nexample.  \"[GOBBLIN-XXX] My Gobblin PR\"\n    -\nhttps://issues.apache.org/jira/browse/GOBBLIN-1109\n\n\n Description\n- [x] Here are some details about my PR.  including\nscreenshots (if applicable):\npartial rollback of PR#2836.  because we want to\nkeep the behavior of flowConfigV1 API unchanged\n\n\n Tests\n- [x] My PR adds the following unit tests __OR__\ndoes not need testing for this extremely good\nreason:\nNA\n\n\n Commits\n- [x] My commits all reference JIRA issues in\ntheir subject lines.  and I have squashed multiple\ncommits if they address the same issue. In\naddition.  my commits follow the guidelines from\n\"[How to write a good git commit\nmessage](http://chris.beams.io/posts/git-\ncommit/)\":\n    1. Subject is separated from body by a blank line\n    2. Subject is limited to 50 characters\n    3. Subject does not end with a period\n    4. Subject uses the imperative mood (\"add\".  not\n\"adding\")\n    5. Body wraps at 72 characters\n    6. Body explains \"what\" and \"why\".  not \"how\"\n\nCloses #2949 from arjun4084346/rollbackV1Changes\n","date":"2020-04-07 03:52:55","modifiedFileCount":"4","status":"M","submitter":"Arjun"}]
