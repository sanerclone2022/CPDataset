[{"authorTime":"2018-06-12 05:23:21","codes":[{"authorDate":"2018-06-12 05:23:21","commitOrder":1,"curCode":"  private void addDataNode(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), NODE_FILE_DEPTH)) {\n      Path nodeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadNodeFileWithOverrides(nodeFilePath);\n        Class dataNodeClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.DATA_NODE_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_DATA_NODE_CLASS));\n        DataNode dataNode = (DataNode) GobblinConstructorUtils.invokeLongestConstructor(dataNodeClass, config);\n        if (!this.flowGraph.addDataNode(dataNode)) {\n          log.warn(\"Could not add DataNode {} to FlowGraph; skipping\", dataNode.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add DataNode defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","date":"2018-06-12 05:23:21","endLine":147,"groupId":"2773","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addDataNode","params":"(DiffEntrychange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c7/dd226ac2cd46d024ad29cf9a7ec782d5250a3e.src","preCode":"  private void addDataNode(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), NODE_FILE_DEPTH)) {\n      Path nodeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadNodeFileWithOverrides(nodeFilePath);\n        Class dataNodeClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.DATA_NODE_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_DATA_NODE_CLASS));\n        DataNode dataNode = (DataNode) GobblinConstructorUtils.invokeLongestConstructor(dataNodeClass, config);\n        if (!this.flowGraph.addDataNode(dataNode)) {\n          log.warn(\"Could not add DataNode {} to FlowGraph; skipping\", dataNode.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add DataNode defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"},{"authorDate":"2018-06-12 05:23:21","commitOrder":1,"curCode":"  private void addFlowEdge(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), EDGE_FILE_DEPTH)) {\n      Path edgeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadEdgeFileWithOverrides(edgeFilePath);\n        Class flowEdgeFactoryClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.FLOW_EDGE_FACTORY_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_FLOW_EDGE_FACTORY_CLASS));\n        FlowEdgeFactory flowEdgeFactory = (FlowEdgeFactory) GobblinConstructorUtils.invokeLongestConstructor(flowEdgeFactoryClass, config);\n        FlowEdge edge = flowEdgeFactory.createFlowEdge(config, flowCatalog);\n        if (!this.flowGraph.addFlowEdge(edge)) {\n          log.warn(\"Could not add edge {} to FlowGraph; skipping\", edge.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add edge defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","date":"2018-06-12 05:23:21","endLine":186,"groupId":"3177","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addFlowEdge","params":"(DiffEntrychange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c7/dd226ac2cd46d024ad29cf9a7ec782d5250a3e.src","preCode":"  private void addFlowEdge(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), EDGE_FILE_DEPTH)) {\n      Path edgeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadEdgeFileWithOverrides(edgeFilePath);\n        Class flowEdgeFactoryClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.FLOW_EDGE_FACTORY_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_FLOW_EDGE_FACTORY_CLASS));\n        FlowEdgeFactory flowEdgeFactory = (FlowEdgeFactory) GobblinConstructorUtils.invokeLongestConstructor(flowEdgeFactoryClass, config);\n        FlowEdge edge = flowEdgeFactory.createFlowEdge(config, flowCatalog);\n        if (!this.flowGraph.addFlowEdge(edge)) {\n          log.warn(\"Could not add edge {} to FlowGraph; skipping\", edge.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add edge defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"}],"commitId":"6b1201852aa71b904da5f8a49a550e8596fe59fc","commitMessage":"@@@[GOBBLIN-505] Implement a Git-based FlowGraph Monitor.\n\nCloses #2382 from sv2000/gitGraphMonitor\n","date":"2018-06-12 05:23:21","modifiedFileCount":"8","status":"B","submitter":"suvasude"},{"authorTime":"2018-10-13 01:19:40","codes":[{"authorDate":"2018-10-13 01:19:40","commitOrder":2,"curCode":"  private void addDataNode(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), NODE_FILE_DEPTH)) {\n      Path nodeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadNodeFileWithOverrides(nodeFilePath);\n        Class dataNodeClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.DATA_NODE_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_DATA_NODE_CLASS));\n        DataNode dataNode = (DataNode) GobblinConstructorUtils.invokeLongestConstructor(dataNodeClass, config);\n        if (!this.flowGraph.addDataNode(dataNode)) {\n          log.warn(\"Could not add DataNode {} to FlowGraph; skipping\", dataNode.getId());\n        } else {\n          log.info(\"Added Datanode {} to FlowGraph\", dataNode.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add DataNode defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","date":"2018-10-13 01:19:40","endLine":175,"groupId":"2773","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addDataNode","params":"(DiffEntrychange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e1/2e8398dd7053c575545d00bf6a1ffac7f6bfb0.src","preCode":"  private void addDataNode(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), NODE_FILE_DEPTH)) {\n      Path nodeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadNodeFileWithOverrides(nodeFilePath);\n        Class dataNodeClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.DATA_NODE_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_DATA_NODE_CLASS));\n        DataNode dataNode = (DataNode) GobblinConstructorUtils.invokeLongestConstructor(dataNodeClass, config);\n        if (!this.flowGraph.addDataNode(dataNode)) {\n          log.warn(\"Could not add DataNode {} to FlowGraph; skipping\", dataNode.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add DataNode defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2018-10-13 01:19:40","commitOrder":2,"curCode":"  private void addFlowEdge(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), EDGE_FILE_DEPTH)) {\n      Path edgeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadEdgeFileWithOverrides(edgeFilePath);\n        Class flowEdgeFactoryClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.FLOW_EDGE_FACTORY_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_FLOW_EDGE_FACTORY_CLASS));\n        FlowEdgeFactory flowEdgeFactory = (FlowEdgeFactory) GobblinConstructorUtils.invokeLongestConstructor(flowEdgeFactoryClass, config);\n        FlowEdge edge = flowEdgeFactory.createFlowEdge(config, flowCatalog);\n        if (!this.flowGraph.addFlowEdge(edge)) {\n          log.warn(\"Could not add edge {} to FlowGraph; skipping\", edge.getId());\n        } else {\n          log.info(\"Added edge {} to FlowGraph\", edge.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add edge defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","date":"2018-10-13 01:19:40","endLine":218,"groupId":"3177","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addFlowEdge","params":"(DiffEntrychange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e1/2e8398dd7053c575545d00bf6a1ffac7f6bfb0.src","preCode":"  private void addFlowEdge(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), EDGE_FILE_DEPTH)) {\n      Path edgeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadEdgeFileWithOverrides(edgeFilePath);\n        Class flowEdgeFactoryClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.FLOW_EDGE_FACTORY_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_FLOW_EDGE_FACTORY_CLASS));\n        FlowEdgeFactory flowEdgeFactory = (FlowEdgeFactory) GobblinConstructorUtils.invokeLongestConstructor(flowEdgeFactoryClass, config);\n        FlowEdge edge = flowEdgeFactory.createFlowEdge(config, flowCatalog);\n        if (!this.flowGraph.addFlowEdge(edge)) {\n          log.warn(\"Could not add edge {} to FlowGraph; skipping\", edge.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add edge defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"4f2f2b3a5c3d354d6e13d91e93bda7a3ade096a9","commitMessage":"@@@[GOBBLIN-611] Ensure node events are processed before edge events in GitFlowGraphMonitor.[]\n\nCloses #2477 from\nsv2000/flowGraphMonitorChangeDepth\n","date":"2018-10-13 01:19:40","modifiedFileCount":"3","status":"M","submitter":"sv2000"},{"authorTime":"2018-12-08 01:01:05","codes":[{"authorDate":"2018-10-13 01:19:40","commitOrder":3,"curCode":"  private void addDataNode(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), NODE_FILE_DEPTH)) {\n      Path nodeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadNodeFileWithOverrides(nodeFilePath);\n        Class dataNodeClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.DATA_NODE_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_DATA_NODE_CLASS));\n        DataNode dataNode = (DataNode) GobblinConstructorUtils.invokeLongestConstructor(dataNodeClass, config);\n        if (!this.flowGraph.addDataNode(dataNode)) {\n          log.warn(\"Could not add DataNode {} to FlowGraph; skipping\", dataNode.getId());\n        } else {\n          log.info(\"Added Datanode {} to FlowGraph\", dataNode.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add DataNode defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","date":"2018-10-13 01:19:40","endLine":175,"groupId":"2773","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addDataNode","params":"(DiffEntrychange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e1/2e8398dd7053c575545d00bf6a1ffac7f6bfb0.src","preCode":"  private void addDataNode(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), NODE_FILE_DEPTH)) {\n      Path nodeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadNodeFileWithOverrides(nodeFilePath);\n        Class dataNodeClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.DATA_NODE_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_DATA_NODE_CLASS));\n        DataNode dataNode = (DataNode) GobblinConstructorUtils.invokeLongestConstructor(dataNodeClass, config);\n        if (!this.flowGraph.addDataNode(dataNode)) {\n          log.warn(\"Could not add DataNode {} to FlowGraph; skipping\", dataNode.getId());\n        } else {\n          log.info(\"Added Datanode {} to FlowGraph\", dataNode.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add DataNode defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"N"},{"authorDate":"2018-12-08 01:01:05","commitOrder":3,"curCode":"  private void addFlowEdge(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), EDGE_FILE_DEPTH)) {\n      Path edgeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config edgeConfig = loadEdgeFileWithOverrides(edgeFilePath);\n        List<SpecExecutor> specExecutors = getSpecExecutors(edgeConfig);\n        Class flowEdgeFactoryClass = Class.forName(ConfigUtils.getString(edgeConfig, FlowGraphConfigurationKeys.FLOW_EDGE_FACTORY_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_FLOW_EDGE_FACTORY_CLASS));\n        FlowEdgeFactory flowEdgeFactory = (FlowEdgeFactory) GobblinConstructorUtils.invokeLongestConstructor(flowEdgeFactoryClass, edgeConfig);\n        FlowEdge edge = flowEdgeFactory.createFlowEdge(edgeConfig, flowCatalog, specExecutors);\n        if (!this.flowGraph.addFlowEdge(edge)) {\n          log.warn(\"Could not add edge {} to FlowGraph; skipping\", edge.getId());\n        } else {\n          log.info(\"Added edge {} to FlowGraph\", edge.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add edge defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","date":"2018-12-08 01:01:05","endLine":229,"groupId":"1156","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addFlowEdge","params":"(DiffEntrychange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/54/544a191dd9f632db37fbf74b1d8293021ade0b.src","preCode":"  private void addFlowEdge(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), EDGE_FILE_DEPTH)) {\n      Path edgeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadEdgeFileWithOverrides(edgeFilePath);\n        Class flowEdgeFactoryClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.FLOW_EDGE_FACTORY_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_FLOW_EDGE_FACTORY_CLASS));\n        FlowEdgeFactory flowEdgeFactory = (FlowEdgeFactory) GobblinConstructorUtils.invokeLongestConstructor(flowEdgeFactoryClass, config);\n        FlowEdge edge = flowEdgeFactory.createFlowEdge(config, flowCatalog);\n        if (!this.flowGraph.addFlowEdge(edge)) {\n          log.warn(\"Could not add edge {} to FlowGraph; skipping\", edge.getId());\n        } else {\n          log.info(\"Added edge {} to FlowGraph\", edge.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add edge defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"}],"commitId":"ccaa02c6e132a5731706a61620f04abd89be75fe","commitMessage":"@@@[GOBBLIN-646] Refactor MultiHopFlowCompiler to use SpecExecutor configs from TopologySpecMap.[]\n\nCloses #2516 from sv2000/specExecutorsRefactor\n","date":"2018-12-08 01:01:05","modifiedFileCount":"8","status":"M","submitter":"suvasude"},{"authorTime":"2019-01-23 22:38:08","codes":[{"authorDate":"2018-10-13 01:19:40","commitOrder":4,"curCode":"  private void addDataNode(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), NODE_FILE_DEPTH)) {\n      Path nodeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadNodeFileWithOverrides(nodeFilePath);\n        Class dataNodeClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.DATA_NODE_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_DATA_NODE_CLASS));\n        DataNode dataNode = (DataNode) GobblinConstructorUtils.invokeLongestConstructor(dataNodeClass, config);\n        if (!this.flowGraph.addDataNode(dataNode)) {\n          log.warn(\"Could not add DataNode {} to FlowGraph; skipping\", dataNode.getId());\n        } else {\n          log.info(\"Added Datanode {} to FlowGraph\", dataNode.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add DataNode defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","date":"2018-10-13 01:19:40","endLine":175,"groupId":"2773","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"addDataNode","params":"(DiffEntrychange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e1/2e8398dd7053c575545d00bf6a1ffac7f6bfb0.src","preCode":"  private void addDataNode(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), NODE_FILE_DEPTH)) {\n      Path nodeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadNodeFileWithOverrides(nodeFilePath);\n        Class dataNodeClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.DATA_NODE_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_DATA_NODE_CLASS));\n        DataNode dataNode = (DataNode) GobblinConstructorUtils.invokeLongestConstructor(dataNodeClass, config);\n        if (!this.flowGraph.addDataNode(dataNode)) {\n          log.warn(\"Could not add DataNode {} to FlowGraph; skipping\", dataNode.getId());\n        } else {\n          log.info(\"Added Datanode {} to FlowGraph\", dataNode.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add DataNode defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"N"},{"authorDate":"2019-01-23 22:38:08","commitOrder":4,"curCode":"  private void addFlowEdge(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), EDGE_FILE_DEPTH)) {\n      Path edgeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config edgeConfig = loadEdgeFileWithOverrides(edgeFilePath);\n        List<SpecExecutor> specExecutors = getSpecExecutors(edgeConfig);\n        Class flowEdgeFactoryClass = Class.forName(ConfigUtils.getString(edgeConfig, FlowGraphConfigurationKeys.FLOW_EDGE_FACTORY_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_FLOW_EDGE_FACTORY_CLASS));\n        FlowEdgeFactory flowEdgeFactory = (FlowEdgeFactory) GobblinConstructorUtils.invokeLongestConstructor(flowEdgeFactoryClass, edgeConfig);\n        if (flowCatalog.isPresent()) {\n          FlowEdge edge = flowEdgeFactory.createFlowEdge(edgeConfig, flowCatalog.get(), specExecutors);\n          if (!this.flowGraph.addFlowEdge(edge)) {\n            log.warn(\"Could not add edge {} to FlowGraph; skipping\", edge.getId());\n          } else {\n            log.info(\"Added edge {} to FlowGraph\", edge.getId());\n          }\n        } else {\n          log.warn(\"Could not add edge defined in {} to FlowGraph as FlowCatalog is absent\", change.getNewPath());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add edge defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","date":"2019-01-23 22:38:08","endLine":241,"groupId":"632","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"addFlowEdge","params":"(DiffEntrychange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/97/8875f381d7330b5694cdc46c41529017a2cfe9.src","preCode":"  private void addFlowEdge(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), EDGE_FILE_DEPTH)) {\n      Path edgeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config edgeConfig = loadEdgeFileWithOverrides(edgeFilePath);\n        List<SpecExecutor> specExecutors = getSpecExecutors(edgeConfig);\n        Class flowEdgeFactoryClass = Class.forName(ConfigUtils.getString(edgeConfig, FlowGraphConfigurationKeys.FLOW_EDGE_FACTORY_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_FLOW_EDGE_FACTORY_CLASS));\n        FlowEdgeFactory flowEdgeFactory = (FlowEdgeFactory) GobblinConstructorUtils.invokeLongestConstructor(flowEdgeFactoryClass, edgeConfig);\n        FlowEdge edge = flowEdgeFactory.createFlowEdge(edgeConfig, flowCatalog, specExecutors);\n        if (!this.flowGraph.addFlowEdge(edge)) {\n          log.warn(\"Could not add edge {} to FlowGraph; skipping\", edge.getId());\n        } else {\n          log.info(\"Added edge {} to FlowGraph\", edge.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add edge defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"}],"commitId":"55a19bbfe693e68828ff2a85e6e0666b754b6a9b","commitMessage":"@@@[GOBBLIN-670] Ensure MultiHopFlowCompiler is initialized when job template catalog location is not provided.[]\n\nCloses #2540 from sv2000/startUp\n","date":"2019-01-23 22:38:08","modifiedFileCount":"3","status":"M","submitter":"suvasude"},{"authorTime":"2019-05-02 02:49:26","codes":[{"authorDate":"2018-10-13 01:19:40","commitOrder":5,"curCode":"  private void addDataNode(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), NODE_FILE_DEPTH)) {\n      Path nodeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadNodeFileWithOverrides(nodeFilePath);\n        Class dataNodeClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.DATA_NODE_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_DATA_NODE_CLASS));\n        DataNode dataNode = (DataNode) GobblinConstructorUtils.invokeLongestConstructor(dataNodeClass, config);\n        if (!this.flowGraph.addDataNode(dataNode)) {\n          log.warn(\"Could not add DataNode {} to FlowGraph; skipping\", dataNode.getId());\n        } else {\n          log.info(\"Added Datanode {} to FlowGraph\", dataNode.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add DataNode defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","date":"2018-10-13 01:19:40","endLine":175,"groupId":"2773","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"addDataNode","params":"(DiffEntrychange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e1/2e8398dd7053c575545d00bf6a1ffac7f6bfb0.src","preCode":"  private void addDataNode(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), NODE_FILE_DEPTH)) {\n      Path nodeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadNodeFileWithOverrides(nodeFilePath);\n        Class dataNodeClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.DATA_NODE_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_DATA_NODE_CLASS));\n        DataNode dataNode = (DataNode) GobblinConstructorUtils.invokeLongestConstructor(dataNodeClass, config);\n        if (!this.flowGraph.addDataNode(dataNode)) {\n          log.warn(\"Could not add DataNode {} to FlowGraph; skipping\", dataNode.getId());\n        } else {\n          log.info(\"Added Datanode {} to FlowGraph\", dataNode.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add DataNode defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"N"},{"authorDate":"2019-05-02 02:49:26","commitOrder":5,"curCode":"  private void addFlowEdge(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), EDGE_FILE_DEPTH)) {\n      Path edgeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config edgeConfig = loadEdgeFileWithOverrides(edgeFilePath);\n        List<SpecExecutor> specExecutors = getSpecExecutors(edgeConfig);\n        Class flowEdgeFactoryClass = Class.forName(ConfigUtils.getString(edgeConfig, FlowGraphConfigurationKeys.FLOW_EDGE_FACTORY_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_FLOW_EDGE_FACTORY_CLASS));\n        FlowEdgeFactory flowEdgeFactory = (FlowEdgeFactory) GobblinConstructorUtils.invokeLongestConstructor(flowEdgeFactoryClass, edgeConfig);\n        if (flowTemplateCatalog.isPresent()) {\n          FlowEdge edge = flowEdgeFactory.createFlowEdge(edgeConfig, flowTemplateCatalog.get(), specExecutors);\n          if (!this.flowGraph.addFlowEdge(edge)) {\n            log.warn(\"Could not add edge {} to FlowGraph; skipping\", edge.getId());\n          } else {\n            log.info(\"Added edge {} to FlowGraph\", edge.getId());\n          }\n        } else {\n          log.warn(\"Could not add edge defined in {} to FlowGraph as FlowTemplateCatalog is absent\", change.getNewPath());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add edge defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","date":"2019-05-02 02:49:26","endLine":242,"groupId":"632","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"addFlowEdge","params":"(DiffEntrychange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/5a/69371377288a8aeb59eff18bed9b7d48c735ec.src","preCode":"  private void addFlowEdge(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), EDGE_FILE_DEPTH)) {\n      Path edgeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config edgeConfig = loadEdgeFileWithOverrides(edgeFilePath);\n        List<SpecExecutor> specExecutors = getSpecExecutors(edgeConfig);\n        Class flowEdgeFactoryClass = Class.forName(ConfigUtils.getString(edgeConfig, FlowGraphConfigurationKeys.FLOW_EDGE_FACTORY_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_FLOW_EDGE_FACTORY_CLASS));\n        FlowEdgeFactory flowEdgeFactory = (FlowEdgeFactory) GobblinConstructorUtils.invokeLongestConstructor(flowEdgeFactoryClass, edgeConfig);\n        if (flowCatalog.isPresent()) {\n          FlowEdge edge = flowEdgeFactory.createFlowEdge(edgeConfig, flowCatalog.get(), specExecutors);\n          if (!this.flowGraph.addFlowEdge(edge)) {\n            log.warn(\"Could not add edge {} to FlowGraph; skipping\", edge.getId());\n          } else {\n            log.info(\"Added edge {} to FlowGraph\", edge.getId());\n          }\n        } else {\n          log.warn(\"Could not add edge defined in {} to FlowGraph as FlowCatalog is absent\", change.getNewPath());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add edge defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"}],"commitId":"4e238b7b823304cc3640db872498e3ab12d45aae","commitMessage":"@@@[GOBBLIN-756] Add flow catalog that updates when filesystem is modified\n\nCloses #2620 from jack-moseley/dynamic-flow-\ntemplate\n","date":"2019-05-02 02:49:26","modifiedFileCount":"6","status":"M","submitter":"Jack Moseley"},{"authorTime":"2019-05-02 02:49:26","codes":[{"authorDate":"2019-09-09 22:15:49","commitOrder":6,"curCode":"  private void addDataNode(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), NODE_FILE_DEPTH)) {\n      Path nodeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadNodeFileWithOverrides(nodeFilePath);\n        Class dataNodeClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.DATA_NODE_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_DATA_NODE_CLASS));\n        DataNode dataNode = (DataNode) GobblinConstructorUtils.invokeLongestConstructor(dataNodeClass, config);\n        if (!this.flowGraph.addDataNode(dataNode)) {\n          log.warn(\"Could not add DataNode {} to FlowGraph; skipping\", dataNode.getId());\n        } else {\n          log.info(\"Added Datanode {} to FlowGraph\", dataNode.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add DataNode defined in {} due to exception {}\", change.getNewPath(), e);\n      }\n    }\n  }\n","date":"2019-09-09 22:15:49","endLine":194,"groupId":"101164","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"addDataNode","params":"(DiffEntrychange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/44/dd01a794afdf2c253f79b2dcd304ab66e0eeed.src","preCode":"  private void addDataNode(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), NODE_FILE_DEPTH)) {\n      Path nodeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config config = loadNodeFileWithOverrides(nodeFilePath);\n        Class dataNodeClass = Class.forName(ConfigUtils.getString(config, FlowGraphConfigurationKeys.DATA_NODE_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_DATA_NODE_CLASS));\n        DataNode dataNode = (DataNode) GobblinConstructorUtils.invokeLongestConstructor(dataNodeClass, config);\n        if (!this.flowGraph.addDataNode(dataNode)) {\n          log.warn(\"Could not add DataNode {} to FlowGraph; skipping\", dataNode.getId());\n        } else {\n          log.info(\"Added Datanode {} to FlowGraph\", dataNode.getId());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add DataNode defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"},{"authorDate":"2019-05-02 02:49:26","commitOrder":6,"curCode":"  private void addFlowEdge(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), EDGE_FILE_DEPTH)) {\n      Path edgeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config edgeConfig = loadEdgeFileWithOverrides(edgeFilePath);\n        List<SpecExecutor> specExecutors = getSpecExecutors(edgeConfig);\n        Class flowEdgeFactoryClass = Class.forName(ConfigUtils.getString(edgeConfig, FlowGraphConfigurationKeys.FLOW_EDGE_FACTORY_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_FLOW_EDGE_FACTORY_CLASS));\n        FlowEdgeFactory flowEdgeFactory = (FlowEdgeFactory) GobblinConstructorUtils.invokeLongestConstructor(flowEdgeFactoryClass, edgeConfig);\n        if (flowTemplateCatalog.isPresent()) {\n          FlowEdge edge = flowEdgeFactory.createFlowEdge(edgeConfig, flowTemplateCatalog.get(), specExecutors);\n          if (!this.flowGraph.addFlowEdge(edge)) {\n            log.warn(\"Could not add edge {} to FlowGraph; skipping\", edge.getId());\n          } else {\n            log.info(\"Added edge {} to FlowGraph\", edge.getId());\n          }\n        } else {\n          log.warn(\"Could not add edge defined in {} to FlowGraph as FlowTemplateCatalog is absent\", change.getNewPath());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add edge defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","date":"2019-05-02 02:49:26","endLine":242,"groupId":"101164","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"addFlowEdge","params":"(DiffEntrychange)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/5a/69371377288a8aeb59eff18bed9b7d48c735ec.src","preCode":"  private void addFlowEdge(DiffEntry change) {\n    if (checkFilePath(change.getNewPath(), EDGE_FILE_DEPTH)) {\n      Path edgeFilePath = new Path(this.repositoryDir, change.getNewPath());\n      try {\n        Config edgeConfig = loadEdgeFileWithOverrides(edgeFilePath);\n        List<SpecExecutor> specExecutors = getSpecExecutors(edgeConfig);\n        Class flowEdgeFactoryClass = Class.forName(ConfigUtils.getString(edgeConfig, FlowGraphConfigurationKeys.FLOW_EDGE_FACTORY_CLASS,\n            FlowGraphConfigurationKeys.DEFAULT_FLOW_EDGE_FACTORY_CLASS));\n        FlowEdgeFactory flowEdgeFactory = (FlowEdgeFactory) GobblinConstructorUtils.invokeLongestConstructor(flowEdgeFactoryClass, edgeConfig);\n        if (flowTemplateCatalog.isPresent()) {\n          FlowEdge edge = flowEdgeFactory.createFlowEdge(edgeConfig, flowTemplateCatalog.get(), specExecutors);\n          if (!this.flowGraph.addFlowEdge(edge)) {\n            log.warn(\"Could not add edge {} to FlowGraph; skipping\", edge.getId());\n          } else {\n            log.info(\"Added edge {} to FlowGraph\", edge.getId());\n          }\n        } else {\n          log.warn(\"Could not add edge defined in {} to FlowGraph as FlowTemplateCatalog is absent\", change.getNewPath());\n        }\n      } catch (Exception e) {\n        log.warn(\"Could not add edge defined in {} due to exception {}\", change.getNewPath(), e.getMessage());\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"N"}],"commitId":"a409908079df873ba0d5a465df3e682be0e0085d","commitMessage":"@@@[GOBBLIN-870] Adding abfs scheme\n\nCloses #2725 from linweihs/abfs\n","date":"2019-09-09 22:15:49","modifiedFileCount":"2","status":"M","submitter":"welin"}]
