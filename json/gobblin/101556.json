[{"authorTime":"2021-02-05 04:13:05","codes":[{"authorDate":"2019-09-20 00:40:48","commitOrder":2,"curCode":"  public GenericRecord createEvolvedSchemaRecord() {\n    Schema evolvedSchema =\n        SchemaBuilder.record(\"evolved\").fields()\n            .requiredLong(\"partitionKey\").requiredString(\"environment\").requiredString(\"subKey\").optionalString(\"oppo\").endRecord();\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(evolvedSchema);\n    keyRecordBuilder.set(\"partitionKey\", new Long(1));\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    keyRecordBuilder.set(\"oppo\", \"poop\");\n    return keyRecordBuilder.build();\n  }\n","date":"2019-09-20 00:40:48","endLine":181,"groupId":"5769","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createEvolvedSchemaRecord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a3/9658e6ea5f648b1215e506365f6c0717dccb6e.src","preCode":"  public GenericRecord createEvolvedSchemaRecord() {\n    Schema evolvedSchema =\n        SchemaBuilder.record(\"evolved\").fields()\n            .requiredLong(\"partitionKey\").requiredString(\"environment\").requiredString(\"subKey\").optionalString(\"oppo\").endRecord();\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(evolvedSchema);\n    keyRecordBuilder.set(\"partitionKey\", new Long(1));\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    keyRecordBuilder.set(\"oppo\", \"poop\");\n    return keyRecordBuilder.build();\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"NB"},{"authorDate":"2021-02-05 04:13:05","commitOrder":2,"curCode":"  public GenericRecord createEvolvedSchemaRecord() {\n    Schema evolvedSchema = SchemaBuilder.record(\"evolved\")\n        .fields()\n        .requiredLong(\"partitionKey\")\n        .requiredString(\"environment\")\n        .requiredString(\"subKey\")\n        .optionalString(\"oppo\")\n        .endRecord();\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(evolvedSchema);\n    keyRecordBuilder.set(\"partitionKey\", new Long(1));\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    keyRecordBuilder.set(\"oppo\", \"poop\");\n    return keyRecordBuilder.build();\n  }\n","date":"2021-02-05 04:13:05","endLine":83,"groupId":"5769","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"createEvolvedSchemaRecord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/99/b045c1d6c7545c3b360a18e13336b6bbc0c325.src","preCode":"  public GenericRecord createEvolvedSchemaRecord() {\n    Schema evolvedSchema = SchemaBuilder.record(\"evolved\")\n        .fields()\n        .requiredLong(\"partitionKey\")\n        .requiredString(\"environment\")\n        .requiredString(\"subKey\")\n        .optionalString(\"oppo\")\n        .endRecord();\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(evolvedSchema);\n    keyRecordBuilder.set(\"partitionKey\", new Long(1));\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    keyRecordBuilder.set(\"oppo\", \"poop\");\n    return keyRecordBuilder.build();\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/action/CompactionGMCEPublishingActionTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"}],"commitId":"4e2dc94eb570086c768c247f669255d62f84f3d6","commitMessage":"@@@[GOBBLIN-1335] Publish GMCE(GobblinMetadataChangeEvent) publisher and iceberg retention job to Gobblin OSS\n\n[GOBBLIN-1335] Publish\nGMCE(GobblinMetadataChangeEvent) publisher and\niceberg retention job to Gobblin OSS\n\nadd OSS comments\n\nadd unit test\n\nAdd icebergWriter to be able to consume GMCE and\nregister into iceberg table\n\nMake it re-writable for catalog inside\nicebergWriter\n\naddress comments\n\ntrigger build\n\ntrigger build\n\naddress comments\n\nMerge branch 'master' into GOBBLIN-1335\n\nMerge branch 'master' into GOBBLIN-1335\n\ndefine iceberg version\n\naddress comments\n\ninclude recent changes\n\nMerge remote-tracking branch 'origin' into\nGOBBLIN-1335\n\nMerge remote-tracking branch 'origin' into\nGOBBLIN-1335\n\nmerge master and modify method privacy level to\nmake them be re-writable\n\nCloses #3172 from ZihanLi58/GOBBLIN-1335\n","date":"2021-02-05 04:13:05","modifiedFileCount":"1","status":"M","submitter":"Zihan Li"},{"authorTime":"2021-02-05 04:13:05","codes":[{"authorDate":"2021-05-27 03:02:12","commitOrder":3,"curCode":"  private GenericRecord createEvolvedSchemaRecord() {\n    Schema evolvedSchema =\n        SchemaBuilder.record(\"evolved\").fields()\n            .requiredLong(\"partitionKey\").requiredString(\"environment\").requiredString(\"subKey\").optionalString(\"oppo\").endRecord();\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(evolvedSchema);\n    keyRecordBuilder.set(\"partitionKey\", new Long(1));\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    keyRecordBuilder.set(\"oppo\", \"poop\");\n    return keyRecordBuilder.build();\n  }\n","date":"2021-06-03 00:50:08","endLine":298,"groupId":"101556","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"createEvolvedSchemaRecord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/05/4c6ed8f3128ccd5022bc2bd4f0368f39fbf598.src","preCode":"  public GenericRecord createEvolvedSchemaRecord() {\n    Schema evolvedSchema =\n        SchemaBuilder.record(\"evolved\").fields()\n            .requiredLong(\"partitionKey\").requiredString(\"environment\").requiredString(\"subKey\").optionalString(\"oppo\").endRecord();\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(evolvedSchema);\n    keyRecordBuilder.set(\"partitionKey\", new Long(1));\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    keyRecordBuilder.set(\"oppo\", \"poop\");\n    return keyRecordBuilder.build();\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"},{"authorDate":"2021-02-05 04:13:05","commitOrder":3,"curCode":"  public GenericRecord createEvolvedSchemaRecord() {\n    Schema evolvedSchema = SchemaBuilder.record(\"evolved\")\n        .fields()\n        .requiredLong(\"partitionKey\")\n        .requiredString(\"environment\")\n        .requiredString(\"subKey\")\n        .optionalString(\"oppo\")\n        .endRecord();\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(evolvedSchema);\n    keyRecordBuilder.set(\"partitionKey\", new Long(1));\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    keyRecordBuilder.set(\"oppo\", \"poop\");\n    return keyRecordBuilder.build();\n  }\n","date":"2021-02-05 04:13:05","endLine":83,"groupId":"101556","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"createEvolvedSchemaRecord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/99/b045c1d6c7545c3b360a18e13336b6bbc0c325.src","preCode":"  public GenericRecord createEvolvedSchemaRecord() {\n    Schema evolvedSchema = SchemaBuilder.record(\"evolved\")\n        .fields()\n        .requiredLong(\"partitionKey\")\n        .requiredString(\"environment\")\n        .requiredString(\"subKey\")\n        .optionalString(\"oppo\")\n        .endRecord();\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(evolvedSchema);\n    keyRecordBuilder.set(\"partitionKey\", new Long(1));\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    keyRecordBuilder.set(\"oppo\", \"poop\");\n    return keyRecordBuilder.build();\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/action/CompactionGMCEPublishingActionTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"}],"commitId":"75f6afff6a39c01569c63ac7895ea692610fbd2c","commitMessage":"@@@[GOBBLIN-1450] Update test framework version for latest IntelliJ\n\nThe recent version of IntelliJ are not fully compatible with old\nversions of testng and junit that we use. As a result IDE does not show\ntest names in the UI correctly.\n\nNew version of test frameworks should solve this problem.\n\nWe also fix a couple of misconfigurations for TestNG. When the class\nis annotated with \"@Test\".  TestNG will run all public methods as tests.\nWe convert a couple of helper methods to private to fix that.\n","date":"2021-06-03 00:50:08","modifiedFileCount":"9","status":"M","submitter":"aprokofiev"}]
