[{"authorTime":"2020-06-02 05:44:20","codes":[{"authorDate":"2020-06-02 05:44:20","commitOrder":2,"curCode":"  public void setup() throws Exception {\n    cleanUpDir(SERVICE_WORK_DIR);\n    cleanUpDir(SPEC_STORE_PARENT_DIR);\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    testingServer = new TestingServer(true);\n\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    serviceCoreProperties.put(\"zookeeper.connect\", testingServer.getConnectString());\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n\n    serviceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, TOPOLOGY_SPEC_STORE_DIR);\n    serviceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, FLOW_SPEC_STORE_DIR);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY, TEST_GOBBLIN_EXECUTOR_NAME);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        FlowSpec.Builder.DEFAULT_VERSION);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.apache.gobblin.service.InMemorySpecExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_GIT_CONFIG_MONITOR_ENABLED_KEY, true);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI, GIT_REMOTE_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, GIT_LOCAL_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5);\n\n    serviceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, JOB_STATUS_STATE_STORE_DIR);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_FLOWCOMPILER_CLASS_KEY, MockedSpecCompiler.class.getCanonicalName());\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(new File(GIT_REMOTE_REPO_DIR), FS.DETECTED);\n    fileKey.open(false).create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(GIT_REMOTE_REPO_DIR).setDirectory(new File(GIT_CLONE_DIR)).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(new RefSpec(\"master\")).call();\n\n    this.gobblinServiceManager = new MockGobblinServiceManager(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), Optional.of(new Path(SERVICE_WORK_DIR)));\n    this.gobblinServiceManager.start();\n\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServer().getListeningURI().getPort()));\n  }\n","date":"2020-06-02 05:44:20","endLine":170,"groupId":"6659","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d1/e793f27a5e3184ec503a6a7bbc49541998be9b.src","preCode":"  public void setup() throws Exception {\n    cleanUpDir(SERVICE_WORK_DIR);\n    cleanUpDir(SPEC_STORE_PARENT_DIR);\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    testingServer = new TestingServer(true);\n\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    serviceCoreProperties.put(\"zookeeper.connect\", testingServer.getConnectString());\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n\n    serviceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, TOPOLOGY_SPEC_STORE_DIR);\n    serviceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, FLOW_SPEC_STORE_DIR);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY, TEST_GOBBLIN_EXECUTOR_NAME);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        FlowSpec.Builder.DEFAULT_VERSION);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.apache.gobblin.service.InMemorySpecExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_GIT_CONFIG_MONITOR_ENABLED_KEY, true);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI, GIT_REMOTE_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, GIT_LOCAL_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5);\n\n    serviceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, JOB_STATUS_STATE_STORE_DIR);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_FLOWCOMPILER_CLASS_KEY, MockedSpecCompiler.class.getCanonicalName());\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(new File(GIT_REMOTE_REPO_DIR), FS.DETECTED);\n    fileKey.open(false).create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(GIT_REMOTE_REPO_DIR).setDirectory(new File(GIT_CLONE_DIR)).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(new RefSpec(\"master\")).call();\n\n    this.gobblinServiceManager = new MockGobblinServiceManager(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), Optional.of(new Path(SERVICE_WORK_DIR)));\n    this.gobblinServiceManager.start();\n\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServer().getListeningURI().getPort()));\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/GobblinServiceManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"MB"},{"authorDate":"2020-06-02 05:44:20","commitOrder":2,"curCode":"  private void serviceReboot() throws Exception {\n    this.gobblinServiceManager.stop();\n    this.gobblinServiceManager = new MockGobblinServiceManager(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), Optional.of(new Path(SERVICE_WORK_DIR)));\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServer().getPort()));\n    this.gobblinServiceManager.start();\n  }\n","date":"2020-06-02 05:44:20","endLine":472,"groupId":"5662","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"serviceReboot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d1/e793f27a5e3184ec503a6a7bbc49541998be9b.src","preCode":"  private void serviceReboot() throws Exception {\n    this.gobblinServiceManager.stop();\n    this.gobblinServiceManager = new MockGobblinServiceManager(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), Optional.of(new Path(SERVICE_WORK_DIR)));\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServer().getPort()));\n    this.gobblinServiceManager.start();\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/GobblinServiceManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":465,"status":"B"}],"commitId":"6bc395c3c1428852a30b5add8db7402be7b4b1ae","commitMessage":"@@@[GOBBLIN-1160] No spec delete on gobblin service start\n\nCloses #3011 from arjun4084346/noSpecRemoveOnStart\n","date":"2020-06-02 05:44:20","modifiedFileCount":"7","status":"M","submitter":"Arjun"},{"authorTime":"2020-10-08 01:19:37","codes":[{"authorDate":"2020-10-08 01:19:37","commitOrder":3,"curCode":"  public void setup() throws Exception {\n    cleanUpDir(SERVICE_WORK_DIR);\n    cleanUpDir(SPEC_STORE_PARENT_DIR);\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    testingServer = new TestingServer(true);\n\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    serviceCoreProperties.put(\"zookeeper.connect\", testingServer.getConnectString());\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n\n    serviceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, TOPOLOGY_SPEC_STORE_DIR);\n    serviceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, FLOW_SPEC_STORE_DIR);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY, TEST_GOBBLIN_EXECUTOR_NAME);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        FlowSpec.Builder.DEFAULT_VERSION);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.apache.gobblin.service.InMemorySpecExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_GIT_CONFIG_MONITOR_ENABLED_KEY, true);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI, GIT_REMOTE_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, GIT_LOCAL_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5);\n\n    serviceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, JOB_STATUS_STATE_STORE_DIR);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_FLOWCOMPILER_CLASS_KEY, MockedSpecCompiler.class.getCanonicalName());\n\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(new File(GIT_REMOTE_REPO_DIR), FS.DETECTED);\n    fileKey.open(false).create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(GIT_REMOTE_REPO_DIR).setDirectory(new File(GIT_CLONE_DIR)).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(new RefSpec(\"master\")).call();\n\n    this.gobblinServiceManager = new MockGobblinServiceManager(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), Optional.of(new Path(SERVICE_WORK_DIR)));\n    this.gobblinServiceManager.start();\n\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServer().getListeningURI().getPort()), transportClientProperties);\n  }\n","date":"2020-10-08 01:19:37","endLine":176,"groupId":"6659","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d3/cb8981de7b8b4fdb16c609066a633b8179f550.src","preCode":"  public void setup() throws Exception {\n    cleanUpDir(SERVICE_WORK_DIR);\n    cleanUpDir(SPEC_STORE_PARENT_DIR);\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    testingServer = new TestingServer(true);\n\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    serviceCoreProperties.put(\"zookeeper.connect\", testingServer.getConnectString());\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n\n    serviceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, TOPOLOGY_SPEC_STORE_DIR);\n    serviceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, FLOW_SPEC_STORE_DIR);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY, TEST_GOBBLIN_EXECUTOR_NAME);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        FlowSpec.Builder.DEFAULT_VERSION);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.apache.gobblin.service.InMemorySpecExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_GIT_CONFIG_MONITOR_ENABLED_KEY, true);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI, GIT_REMOTE_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, GIT_LOCAL_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5);\n\n    serviceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, JOB_STATUS_STATE_STORE_DIR);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_FLOWCOMPILER_CLASS_KEY, MockedSpecCompiler.class.getCanonicalName());\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(new File(GIT_REMOTE_REPO_DIR), FS.DETECTED);\n    fileKey.open(false).create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(GIT_REMOTE_REPO_DIR).setDirectory(new File(GIT_CLONE_DIR)).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(new RefSpec(\"master\")).call();\n\n    this.gobblinServiceManager = new MockGobblinServiceManager(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), Optional.of(new Path(SERVICE_WORK_DIR)));\n    this.gobblinServiceManager.start();\n\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServer().getListeningURI().getPort()));\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/GobblinServiceManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2020-10-08 01:19:37","commitOrder":3,"curCode":"  private void serviceReboot() throws Exception {\n    this.gobblinServiceManager.stop();\n    this.gobblinServiceManager = new MockGobblinServiceManager(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), Optional.of(new Path(SERVICE_WORK_DIR)));\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServer().getPort()), transportClientProperties);\n    this.gobblinServiceManager.start();\n  }\n","date":"2020-10-08 01:19:37","endLine":508,"groupId":"5662","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"serviceReboot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d3/cb8981de7b8b4fdb16c609066a633b8179f550.src","preCode":"  private void serviceReboot() throws Exception {\n    this.gobblinServiceManager.stop();\n    this.gobblinServiceManager = new MockGobblinServiceManager(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), Optional.of(new Path(SERVICE_WORK_DIR)));\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServer().getPort()));\n    this.gobblinServiceManager.start();\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/GobblinServiceManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":501,"status":"M"}],"commitId":"8110e88a1c09c4ec7795560748321891013aadcc","commitMessage":"@@@[GOBBLIN-1279] Fix flaky unit tests involving REST.li calls to FlowConfig endpoint in Gobblin-as-a-Service[]\n\nCloses #3119 from sv2000/flowConfigFlakiness\n","date":"2020-10-08 01:19:37","modifiedFileCount":"6","status":"M","submitter":"suvasude"},{"authorTime":"2021-06-09 01:31:08","codes":[{"authorDate":"2021-06-09 01:31:08","commitOrder":4,"curCode":"  public void setup() throws Exception {\n    cleanUpDir(SERVICE_WORK_DIR);\n    cleanUpDir(SPEC_STORE_PARENT_DIR);\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    testingServer = new TestingServer(true);\n\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    serviceCoreProperties.put(\"zookeeper.connect\", testingServer.getConnectString());\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n\n    serviceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, TOPOLOGY_SPEC_STORE_DIR);\n    serviceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, FLOW_SPEC_STORE_DIR);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY, TEST_GOBBLIN_EXECUTOR_NAME);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        FlowSpec.Builder.DEFAULT_VERSION);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.apache.gobblin.service.InMemorySpecExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_GIT_CONFIG_MONITOR_ENABLED_KEY, true);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI, GIT_REMOTE_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, GIT_LOCAL_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5);\n\n    serviceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, JOB_STATUS_STATE_STORE_DIR);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_FLOWCOMPILER_CLASS_KEY, MockedSpecCompiler.class.getCanonicalName());\n\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(new File(GIT_REMOTE_REPO_DIR), FS.DETECTED);\n    fileKey.open(false).create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(GIT_REMOTE_REPO_DIR).setDirectory(new File(GIT_CLONE_DIR)).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(new RefSpec(\"master\")).call();\n\n    this.gobblinServiceManager = GobblinServiceManager.create(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), new Path(SERVICE_WORK_DIR));\n    this.gobblinServiceManager.start();\n\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServerListeningURI().getPort()), transportClientProperties);\n  }\n","date":"2021-06-09 01:31:08","endLine":174,"groupId":"6659","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ef/300502ae56a05494e17468d8ba41aae11cda53.src","preCode":"  public void setup() throws Exception {\n    cleanUpDir(SERVICE_WORK_DIR);\n    cleanUpDir(SPEC_STORE_PARENT_DIR);\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    testingServer = new TestingServer(true);\n\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    serviceCoreProperties.put(\"zookeeper.connect\", testingServer.getConnectString());\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n\n    serviceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, TOPOLOGY_SPEC_STORE_DIR);\n    serviceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, FLOW_SPEC_STORE_DIR);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY, TEST_GOBBLIN_EXECUTOR_NAME);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        FlowSpec.Builder.DEFAULT_VERSION);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.apache.gobblin.service.InMemorySpecExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_GIT_CONFIG_MONITOR_ENABLED_KEY, true);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI, GIT_REMOTE_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, GIT_LOCAL_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5);\n\n    serviceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, JOB_STATUS_STATE_STORE_DIR);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_FLOWCOMPILER_CLASS_KEY, MockedSpecCompiler.class.getCanonicalName());\n\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(new File(GIT_REMOTE_REPO_DIR), FS.DETECTED);\n    fileKey.open(false).create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(GIT_REMOTE_REPO_DIR).setDirectory(new File(GIT_CLONE_DIR)).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(new RefSpec(\"master\")).call();\n\n    this.gobblinServiceManager = new MockGobblinServiceManager(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), Optional.of(new Path(SERVICE_WORK_DIR)));\n    this.gobblinServiceManager.start();\n\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServer().getListeningURI().getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/GobblinServiceManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2021-06-09 01:31:08","commitOrder":4,"curCode":"  private void serviceReboot() throws Exception {\n    this.gobblinServiceManager.stop();\n    this.gobblinServiceManager = GobblinServiceManager.create(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), new Path(SERVICE_WORK_DIR));\n    this.gobblinServiceManager.start();\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServerListeningURI().getPort()), transportClientProperties);\n  }\n","date":"2021-06-09 01:31:08","endLine":513,"groupId":"6659","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"serviceReboot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ef/300502ae56a05494e17468d8ba41aae11cda53.src","preCode":"  private void serviceReboot() throws Exception {\n    this.gobblinServiceManager.stop();\n    this.gobblinServiceManager = new MockGobblinServiceManager(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), Optional.of(new Path(SERVICE_WORK_DIR)));\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServer().getPort()), transportClientProperties);\n    this.gobblinServiceManager.start();\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/GobblinServiceManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":506,"status":"M"}],"commitId":"bf37c76f6da228ae96b0c405d184617f03d2c198","commitMessage":"@@@[GOBBLIN-1444] Use Guice as DI framework in Gobblin service\n\nPreviously.  to initialize Gobblin service.  we used\na mixture\nof dependency injection.  direct class creation and\nconfig-based\nclass creation. In this change.  we unify the\nservice initialization\nby moving towards using dependency injection(DI)\nwith Guice everywhere.\n\nUsing DI will help with (1) unit testing; (2)\noverriding classes in the\nmiddle of the dependency with company-specific\nimplementations.  and\n(3) will improve code readability.  as dependencies\nbetween classes\nbecome visible from the outside and explicit.\n\nWe also move away from name-based injection for\nclasses. Name-based\ninjection is useful when code needs several\ndifferent implementations\nof the same interface. In our use case.  we had\nonly one implementation\nfor each service that can be active. Name-based\ninjection was used for\ncompany-specific overrides.  but there is a better\nway to do it - with\nGuice module overrides.\n\nThere are still several improvements left to be\ndone to have a full\nGuice migration.  but we'll make them in separate\ncommits to limit the\nPR size.\n\nCloses #3281 from aplex/guice-migration\n","date":"2021-06-09 01:31:08","modifiedFileCount":"37","status":"M","submitter":"aprokofiev"},{"authorTime":"2021-06-09 01:31:08","codes":[{"authorDate":"2021-08-12 12:01:05","commitOrder":5,"curCode":"  public void setup() throws Exception {\n    cleanUpDir(SERVICE_WORK_DIR);\n    cleanUpDir(SPEC_STORE_PARENT_DIR);\n\n    mysql = new MySQLContainer(\"mysql:\" + TestServiceDatabaseConfig.MysqlVersion);\n    mysql.start();\n    serviceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_URL_KEY, mysql.getJdbcUrl());\n    serviceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_USERNAME, mysql.getUsername());\n    serviceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_PASSWORD, mysql.getPassword());\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    testingServer = new TestingServer(true);\n\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    serviceCoreProperties.put(\"zookeeper.connect\", testingServer.getConnectString());\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n\n    serviceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, TOPOLOGY_SPEC_STORE_DIR);\n    serviceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, FLOW_SPEC_STORE_DIR);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY, TEST_GOBBLIN_EXECUTOR_NAME);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        FlowSpec.Builder.DEFAULT_VERSION);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.apache.gobblin.service.InMemorySpecExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_GIT_CONFIG_MONITOR_ENABLED_KEY, true);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI, GIT_REMOTE_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, GIT_LOCAL_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5);\n\n    serviceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, JOB_STATUS_STATE_STORE_DIR);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_FLOWCOMPILER_CLASS_KEY, MockedSpecCompiler.class.getCanonicalName());\n\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(new File(GIT_REMOTE_REPO_DIR), FS.DETECTED);\n    fileKey.open(false).create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(GIT_REMOTE_REPO_DIR).setDirectory(new File(GIT_CLONE_DIR)).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(new RefSpec(\"master\")).call();\n\n    this.gobblinServiceManager = GobblinServiceManager.create(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), new Path(SERVICE_WORK_DIR));\n    this.gobblinServiceManager.start();\n\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServerListeningURI().getPort()), transportClientProperties);\n  }\n","date":"2021-08-12 12:01:05","endLine":184,"groupId":"101134","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/25/72fda66b3d71157ff8d22616828870804f4f1d.src","preCode":"  public void setup() throws Exception {\n    cleanUpDir(SERVICE_WORK_DIR);\n    cleanUpDir(SPEC_STORE_PARENT_DIR);\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    testingServer = new TestingServer(true);\n\n    flowProperties.put(\"param1\", \"value1\");\n    flowProperties.put(ServiceConfigKeys.FLOW_SOURCE_IDENTIFIER_KEY, TEST_SOURCE_NAME);\n    flowProperties.put(ServiceConfigKeys.FLOW_DESTINATION_IDENTIFIER_KEY, TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    serviceCoreProperties.put(\"zookeeper.connect\", testingServer.getConnectString());\n    serviceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n\n    serviceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, TOPOLOGY_SPEC_STORE_DIR);\n    serviceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, FLOW_SPEC_STORE_DIR);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY, TEST_GOBBLIN_EXECUTOR_NAME);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        FlowSpec.Builder.DEFAULT_VERSION);\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.apache.gobblin.service.InMemorySpecExecutor\");\n    serviceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_GIT_CONFIG_MONITOR_ENABLED_KEY, true);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI, GIT_REMOTE_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, GIT_LOCAL_REPO_DIR);\n    serviceCoreProperties.put(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5);\n\n    serviceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, JOB_STATUS_STATE_STORE_DIR);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    serviceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_FLOWCOMPILER_CLASS_KEY, MockedSpecCompiler.class.getCanonicalName());\n\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(new File(GIT_REMOTE_REPO_DIR), FS.DETECTED);\n    fileKey.open(false).create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(GIT_REMOTE_REPO_DIR).setDirectory(new File(GIT_CLONE_DIR)).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(new RefSpec(\"master\")).call();\n\n    this.gobblinServiceManager = GobblinServiceManager.create(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), new Path(SERVICE_WORK_DIR));\n    this.gobblinServiceManager.start();\n\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServerListeningURI().getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/GobblinServiceManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2021-06-09 01:31:08","commitOrder":5,"curCode":"  private void serviceReboot() throws Exception {\n    this.gobblinServiceManager.stop();\n    this.gobblinServiceManager = GobblinServiceManager.create(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), new Path(SERVICE_WORK_DIR));\n    this.gobblinServiceManager.start();\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServerListeningURI().getPort()), transportClientProperties);\n  }\n","date":"2021-06-09 01:31:08","endLine":513,"groupId":"101134","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"serviceReboot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ef/300502ae56a05494e17468d8ba41aae11cda53.src","preCode":"  private void serviceReboot() throws Exception {\n    this.gobblinServiceManager.stop();\n    this.gobblinServiceManager = GobblinServiceManager.create(\"CoreService\", \"1\",\n        ConfigUtils.propertiesToConfig(serviceCoreProperties), new Path(SERVICE_WORK_DIR));\n    this.gobblinServiceManager.start();\n    this.flowConfigClient = new FlowConfigV2Client(String.format(\"http://127.0.0.1:%s/\",\n        this.gobblinServiceManager.getRestLiServerListeningURI().getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/GobblinServiceManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":506,"status":"N"}],"commitId":"de3a6941d0d9ab0eeb1035a8d8ea04aaa65bf07e","commitMessage":"@@@[GOBBLIN-1457] Add persistence for troubleshooter in Gobblin service (#3327)\n\nPreviously.  Gobblin service kept the last few job issues in memory.\nIn this commit.  we add MySql-based persistence for job issues.\n\nWe also introduce Flyway-based migrations to Gobblin service DB.  so that\nwe can adjust the table schemas in the future.  and add new tables\nin a consistent way.","date":"2021-08-12 12:01:05","modifiedFileCount":"18","status":"M","submitter":"Alex Prokofiev"}]
