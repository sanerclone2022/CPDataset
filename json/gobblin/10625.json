[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testBuiltInStringDeserializer() throws ReflectiveOperationException {\n    WorkUnitState mockWorkUnitState = getMockWorkUnitState();\n    mockWorkUnitState.setProp(KafkaDeserializerExtractor.KAFKA_DESERIALIZER_TYPE,\n        KafkaDeserializerExtractor.Deserializers.STRING.name());\n\n    KafkaDeserializerExtractor kafkaDecoderExtractor = new KafkaDeserializerExtractor(mockWorkUnitState);\n\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaDeserializer().getClass(),\n        KafkaDeserializerExtractor.Deserializers.STRING.getDeserializerClass());\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaSchemaRegistry().getClass(),\n        KafkaDeserializerExtractor.Deserializers.STRING.getSchemaRegistryClass());\n  }\n","date":"2017-07-31 15:51:25","endLine":109,"groupId":"7228","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuiltInStringDeserializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/cd/f7b51df708836166b149d0b738809c7a8e309e.src","preCode":"  public void testBuiltInStringDeserializer() throws ReflectiveOperationException {\n    WorkUnitState mockWorkUnitState = getMockWorkUnitState();\n    mockWorkUnitState.setProp(KafkaDeserializerExtractor.KAFKA_DESERIALIZER_TYPE,\n        KafkaDeserializerExtractor.Deserializers.STRING.name());\n\n    KafkaDeserializerExtractor kafkaDecoderExtractor = new KafkaDeserializerExtractor(mockWorkUnitState);\n\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaDeserializer().getClass(),\n        KafkaDeserializerExtractor.Deserializers.STRING.getDeserializerClass());\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaSchemaRegistry().getClass(),\n        KafkaDeserializerExtractor.Deserializers.STRING.getSchemaRegistryClass());\n  }\n","realPath":"gobblin-modules/gobblin-kafka-08/src/test/java/org/apache/gobblin/source/extractor/extract/kafka/KafkaDeserializerExtractorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testBuiltInConfluentAvroDeserializer() throws ReflectiveOperationException {\n    WorkUnitState mockWorkUnitState = getMockWorkUnitState();\n    mockWorkUnitState.setProp(KafkaDeserializerExtractor.KAFKA_DESERIALIZER_TYPE,\n        KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.name());\n\n    KafkaDeserializerExtractor kafkaDecoderExtractor = new KafkaDeserializerExtractor(mockWorkUnitState) {\n      @Override\n      public Object getSchema() {\n        return SchemaBuilder.record(TEST_RECORD_NAME)\n            .namespace(TEST_NAMESPACE).fields()\n            .name(TEST_FIELD_NAME).type().stringType().noDefault()\n            .endRecord();\n      }\n    };\n\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaDeserializer().getClass(),\n        KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.getDeserializerClass());\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaSchemaRegistry().getClass(),\n        KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.getSchemaRegistryClass());\n  }\n","date":"2017-07-31 15:51:25","endLine":145,"groupId":"5701","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuiltInConfluentAvroDeserializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/cd/f7b51df708836166b149d0b738809c7a8e309e.src","preCode":"  public void testBuiltInConfluentAvroDeserializer() throws ReflectiveOperationException {\n    WorkUnitState mockWorkUnitState = getMockWorkUnitState();\n    mockWorkUnitState.setProp(KafkaDeserializerExtractor.KAFKA_DESERIALIZER_TYPE,\n        KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.name());\n\n    KafkaDeserializerExtractor kafkaDecoderExtractor = new KafkaDeserializerExtractor(mockWorkUnitState) {\n      @Override\n      public Object getSchema() {\n        return SchemaBuilder.record(TEST_RECORD_NAME)\n            .namespace(TEST_NAMESPACE).fields()\n            .name(TEST_FIELD_NAME).type().stringType().noDefault()\n            .endRecord();\n      }\n    };\n\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaDeserializer().getClass(),\n        KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.getDeserializerClass());\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaSchemaRegistry().getClass(),\n        KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.getSchemaRegistryClass());\n  }\n","realPath":"gobblin-modules/gobblin-kafka-08/src/test/java/org/apache/gobblin/source/extractor/extract/kafka/KafkaDeserializerExtractorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2018-05-05 01:59:22","codes":[{"authorDate":"2018-05-05 01:59:22","commitOrder":2,"curCode":"  public void testBuiltInStringDeserializer() throws ReflectiveOperationException {\n    WorkUnitState mockWorkUnitState = getMockWorkUnitState(0L, 10L);\n    mockWorkUnitState.setProp(KafkaDeserializerExtractor.KAFKA_DESERIALIZER_TYPE,\n        KafkaDeserializerExtractor.Deserializers.STRING.name());\n\n    KafkaDeserializerExtractor kafkaDecoderExtractor = new KafkaDeserializerExtractor(mockWorkUnitState);\n\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaDeserializer().getClass(),\n        KafkaDeserializerExtractor.Deserializers.STRING.getDeserializerClass());\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaSchemaRegistry().getClass(),\n        KafkaDeserializerExtractor.Deserializers.STRING.getSchemaRegistryClass());\n  }\n","date":"2018-05-05 01:59:22","endLine":111,"groupId":"10625","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBuiltInStringDeserializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/1a/273ecf4a5865420f0f20f00d4bb6788e835fec.src","preCode":"  public void testBuiltInStringDeserializer() throws ReflectiveOperationException {\n    WorkUnitState mockWorkUnitState = getMockWorkUnitState();\n    mockWorkUnitState.setProp(KafkaDeserializerExtractor.KAFKA_DESERIALIZER_TYPE,\n        KafkaDeserializerExtractor.Deserializers.STRING.name());\n\n    KafkaDeserializerExtractor kafkaDecoderExtractor = new KafkaDeserializerExtractor(mockWorkUnitState);\n\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaDeserializer().getClass(),\n        KafkaDeserializerExtractor.Deserializers.STRING.getDeserializerClass());\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaSchemaRegistry().getClass(),\n        KafkaDeserializerExtractor.Deserializers.STRING.getSchemaRegistryClass());\n  }\n","realPath":"gobblin-modules/gobblin-kafka-08/src/test/java/org/apache/gobblin/source/extractor/extract/kafka/KafkaDeserializerExtractorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2018-05-05 01:59:22","commitOrder":2,"curCode":"  public void testBuiltInConfluentAvroDeserializer() throws ReflectiveOperationException {\n    WorkUnitState mockWorkUnitState = getMockWorkUnitState(0L, 10L);\n    mockWorkUnitState.setProp(KafkaDeserializerExtractor.KAFKA_DESERIALIZER_TYPE,\n        KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.name());\n\n    KafkaDeserializerExtractor kafkaDecoderExtractor = new KafkaDeserializerExtractor(mockWorkUnitState) {\n      @Override\n      public Object getSchema() {\n        return SchemaBuilder.record(TEST_RECORD_NAME)\n            .namespace(TEST_NAMESPACE).fields()\n            .name(TEST_FIELD_NAME).type().stringType().noDefault()\n            .endRecord();\n      }\n    };\n\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaDeserializer().getClass(),\n        KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.getDeserializerClass());\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaSchemaRegistry().getClass(),\n        KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.getSchemaRegistryClass());\n  }\n","date":"2018-05-05 01:59:22","endLine":147,"groupId":"10625","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBuiltInConfluentAvroDeserializer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/1a/273ecf4a5865420f0f20f00d4bb6788e835fec.src","preCode":"  public void testBuiltInConfluentAvroDeserializer() throws ReflectiveOperationException {\n    WorkUnitState mockWorkUnitState = getMockWorkUnitState();\n    mockWorkUnitState.setProp(KafkaDeserializerExtractor.KAFKA_DESERIALIZER_TYPE,\n        KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.name());\n\n    KafkaDeserializerExtractor kafkaDecoderExtractor = new KafkaDeserializerExtractor(mockWorkUnitState) {\n      @Override\n      public Object getSchema() {\n        return SchemaBuilder.record(TEST_RECORD_NAME)\n            .namespace(TEST_NAMESPACE).fields()\n            .name(TEST_FIELD_NAME).type().stringType().noDefault()\n            .endRecord();\n      }\n    };\n\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaDeserializer().getClass(),\n        KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.getDeserializerClass());\n    Assert.assertEquals(kafkaDecoderExtractor.getKafkaSchemaRegistry().getClass(),\n        KafkaDeserializerExtractor.Deserializers.CONFLUENT_AVRO.getSchemaRegistryClass());\n  }\n","realPath":"gobblin-modules/gobblin-kafka-08/src/test/java/org/apache/gobblin/source/extractor/extract/kafka/KafkaDeserializerExtractorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"249fe6234558ca7f4f72a6fb80b5604f2224670d","commitMessage":"@@@[GOBBLIN-433] Skip schema download for empty workunit\n\nNot getting schema for topic partiton if the gap\nbetween high and low watermark is 0 because it\nmight be a deleted topic and it is just an empty\nWorkunit.\n\nWriting test which cover the fix and fixing the\nfailing tests.\n\nCloses #2310 from\ntreff7es/skip_schema_download_for_empty_workunit\n","date":"2018-05-05 01:59:22","modifiedFileCount":"2","status":"M","submitter":"treff7es"}]
