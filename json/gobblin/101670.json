[{"authorTime":"2017-08-18 05:40:44","codes":[{"authorDate":"2017-08-18 05:40:44","commitOrder":1,"curCode":"  public void testNonDrilldown() {\n    Dataset dataset1 = new SimpleDatasetForTesting(\"dataset1\");\n    Dataset dataset2 = new SimplePartitionableDatasetForTesting(\"dataset2\", Lists.newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"), new SimpleDatasetPartitionForTesting(\"p2\")));\n    Dataset dataset3 = new SimpleDatasetForTesting(\"dataset3\");\n    Dataset dataset4 = new SimpleDatasetForTesting(\"dataset4\");\n    Dataset dataset5 = new SimpleDatasetForTesting(\"dataset5\");\n\n    IterableDatasetFinder finder = new StaticDatasetsFinderForTesting(\n        Lists.newArrayList(dataset5, dataset4, dataset3, dataset2, dataset1));\n\n    MySource mySource = new MySource(false, finder);\n\n    SourceState sourceState = new SourceState();\n    sourceState.setProp(LoopingDatasetFinderSource.MAX_WORK_UNITS_PER_RUN_KEY, 3);\n\n    WorkUnitStream workUnitStream = mySource.getWorkunitStream(sourceState);\n    List<WorkUnit> workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset1\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertNull(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertNull(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN));\n\n    \r\n    List<WorkUnitState> workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    SourceState sourceStateSpy = Mockito.spy(sourceState);\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset4\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset5\");\n    Assert.assertNull(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertTrue(workUnits.get(2).getPropAsBoolean(LoopingDatasetFinderSource.END_OF_DATASETS_KEY));\n\n    \r\n    workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset1\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertNull(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertNull(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN));\n  }\n","date":"2017-08-18 05:40:44","endLine":101,"groupId":"2594","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNonDrilldown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/76/fe172af249347ff6afb49d72dac287321288f9.src","preCode":"  public void testNonDrilldown() {\n    Dataset dataset1 = new SimpleDatasetForTesting(\"dataset1\");\n    Dataset dataset2 = new SimplePartitionableDatasetForTesting(\"dataset2\", Lists.newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"), new SimpleDatasetPartitionForTesting(\"p2\")));\n    Dataset dataset3 = new SimpleDatasetForTesting(\"dataset3\");\n    Dataset dataset4 = new SimpleDatasetForTesting(\"dataset4\");\n    Dataset dataset5 = new SimpleDatasetForTesting(\"dataset5\");\n\n    IterableDatasetFinder finder = new StaticDatasetsFinderForTesting(\n        Lists.newArrayList(dataset5, dataset4, dataset3, dataset2, dataset1));\n\n    MySource mySource = new MySource(false, finder);\n\n    SourceState sourceState = new SourceState();\n    sourceState.setProp(LoopingDatasetFinderSource.MAX_WORK_UNITS_PER_RUN_KEY, 3);\n\n    WorkUnitStream workUnitStream = mySource.getWorkunitStream(sourceState);\n    List<WorkUnit> workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset1\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertNull(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertNull(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN));\n\n    \r\n    List<WorkUnitState> workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    SourceState sourceStateSpy = Mockito.spy(sourceState);\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset4\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset5\");\n    Assert.assertNull(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertTrue(workUnits.get(2).getPropAsBoolean(LoopingDatasetFinderSource.END_OF_DATASETS_KEY));\n\n    \r\n    workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset1\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertNull(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertNull(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN));\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/source/LoopingDatasetFinderSourceTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2017-08-18 05:40:44","commitOrder":1,"curCode":"  public void testDrilldown() {\n    \r\n    Dataset dataset1 = new SimpleDatasetForTesting(\"dataset1\");\n    Dataset dataset2 = new SimplePartitionableDatasetForTesting(\"dataset2\",\n        Lists.newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"),\n            new SimpleDatasetPartitionForTesting(\"p2\"), new SimpleDatasetPartitionForTesting(\"p3\")));\n    Dataset dataset3 = new SimplePartitionableDatasetForTesting(\"dataset3\",\n        Lists.newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"),\n            new SimpleDatasetPartitionForTesting(\"p2\"), new SimpleDatasetPartitionForTesting(\"p3\")));\n\n    IterableDatasetFinder finder = new StaticDatasetsFinderForTesting(\n        Lists.newArrayList(dataset3, dataset2, dataset1));\n\n    MySource mySource = new MySource(true, finder);\n\n    \r\n    SourceState sourceState = new SourceState();\n    sourceState.setProp(LoopingDatasetFinderSource.MAX_WORK_UNITS_PER_RUN_KEY, 3);\n\n    \r\n    WorkUnitStream workUnitStream = mySource.getWorkunitStream(sourceState);\n    List<WorkUnit> workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset1\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p1\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p2\");\n\n    \r\n    List<WorkUnitState> workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    SourceState sourceStateSpy = Mockito.spy(sourceState);\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p3\");\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p1\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p2\");\n\n    \r\n    workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 2);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p3\");\n    Assert.assertTrue(workUnits.get(1).getPropAsBoolean(LoopingDatasetFinderSource.END_OF_DATASETS_KEY));\n\n    \r\n    workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset1\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p1\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p2\");\n  }\n","date":"2017-08-18 05:40:44","endLine":177,"groupId":"2594","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDrilldown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/76/fe172af249347ff6afb49d72dac287321288f9.src","preCode":"  public void testDrilldown() {\n    \r\n    Dataset dataset1 = new SimpleDatasetForTesting(\"dataset1\");\n    Dataset dataset2 = new SimplePartitionableDatasetForTesting(\"dataset2\",\n        Lists.newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"),\n            new SimpleDatasetPartitionForTesting(\"p2\"), new SimpleDatasetPartitionForTesting(\"p3\")));\n    Dataset dataset3 = new SimplePartitionableDatasetForTesting(\"dataset3\",\n        Lists.newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"),\n            new SimpleDatasetPartitionForTesting(\"p2\"), new SimpleDatasetPartitionForTesting(\"p3\")));\n\n    IterableDatasetFinder finder = new StaticDatasetsFinderForTesting(\n        Lists.newArrayList(dataset3, dataset2, dataset1));\n\n    MySource mySource = new MySource(true, finder);\n\n    \r\n    SourceState sourceState = new SourceState();\n    sourceState.setProp(LoopingDatasetFinderSource.MAX_WORK_UNITS_PER_RUN_KEY, 3);\n\n    \r\n    WorkUnitStream workUnitStream = mySource.getWorkunitStream(sourceState);\n    List<WorkUnit> workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset1\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p1\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p2\");\n\n    \r\n    List<WorkUnitState> workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    SourceState sourceStateSpy = Mockito.spy(sourceState);\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p3\");\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p1\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p2\");\n\n    \r\n    workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 2);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p3\");\n    Assert.assertTrue(workUnits.get(1).getPropAsBoolean(LoopingDatasetFinderSource.END_OF_DATASETS_KEY));\n\n    \r\n    workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset1\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p1\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p2\");\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/source/LoopingDatasetFinderSourceTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"}],"commitId":"b54e2818d2b0861a019dafd0ea62b83f701152ee","commitMessage":"@@@[GOBBLIN-210] Implemented two abstract sources based on dataset finder\n\nCloses #2063 from ibuenros/datasetfinder-source\n","date":"2017-08-18 05:40:44","modifiedFileCount":"7","status":"B","submitter":"ibuenros"},{"authorTime":"2018-04-22 04:54:27","codes":[{"authorDate":"2018-04-22 04:54:27","commitOrder":2,"curCode":"  public void testNonDrilldown() {\n    Dataset dataset1 = new SimpleDatasetForTesting(\"dataset1\");\n    Dataset dataset2 = new SimplePartitionableDatasetForTesting(\"dataset2\",\n        Lists.newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"), new SimpleDatasetPartitionForTesting(\"p2\")));\n    Dataset dataset3 = new SimpleDatasetForTesting(\"dataset3\");\n    Dataset dataset4 = new SimpleDatasetForTesting(\"dataset4\");\n    Dataset dataset5 = new SimpleDatasetForTesting(\"dataset5\");\n\n    IterableDatasetFinder finder =\n        new StaticDatasetsFinderForTesting(Lists.newArrayList(dataset5, dataset4, dataset3, dataset2, dataset1));\n\n    MySource mySource = new MySource(false, finder);\n\n    SourceState sourceState = new SourceState();\n    sourceState.setProp(LoopingDatasetFinderSource.MAX_WORK_UNITS_PER_RUN_KEY, 3);\n\n    WorkUnitStream workUnitStream = mySource.getWorkunitStream(sourceState);\n    List<WorkUnit> workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 4);\n    verifyWorkUnitState(workUnits, \"dataset3\", null, false, false);\n\n    \r\n    List<WorkUnitState> workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    SourceState sourceStateSpy = Mockito.spy(sourceState);\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    verifyWorkUnitState(workUnits, \"dataset5\", null, true, false);\n\n    \r\n    workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 4);\n    verifyWorkUnitState(workUnits, \"dataset3\", null, false, false);\n  }\n","date":"2018-04-22 04:54:27","endLine":122,"groupId":"101670","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testNonDrilldown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/41/745f1af5180a18b0102438e928b2c5884d8c37.src","preCode":"  public void testNonDrilldown() {\n    Dataset dataset1 = new SimpleDatasetForTesting(\"dataset1\");\n    Dataset dataset2 = new SimplePartitionableDatasetForTesting(\"dataset2\", Lists.newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"), new SimpleDatasetPartitionForTesting(\"p2\")));\n    Dataset dataset3 = new SimpleDatasetForTesting(\"dataset3\");\n    Dataset dataset4 = new SimpleDatasetForTesting(\"dataset4\");\n    Dataset dataset5 = new SimpleDatasetForTesting(\"dataset5\");\n\n    IterableDatasetFinder finder = new StaticDatasetsFinderForTesting(\n        Lists.newArrayList(dataset5, dataset4, dataset3, dataset2, dataset1));\n\n    MySource mySource = new MySource(false, finder);\n\n    SourceState sourceState = new SourceState();\n    sourceState.setProp(LoopingDatasetFinderSource.MAX_WORK_UNITS_PER_RUN_KEY, 3);\n\n    WorkUnitStream workUnitStream = mySource.getWorkunitStream(sourceState);\n    List<WorkUnit> workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset1\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertNull(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertNull(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN));\n\n    \r\n    List<WorkUnitState> workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    SourceState sourceStateSpy = Mockito.spy(sourceState);\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset4\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset5\");\n    Assert.assertNull(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertTrue(workUnits.get(2).getPropAsBoolean(LoopingDatasetFinderSource.END_OF_DATASETS_KEY));\n\n    \r\n    workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset1\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertNull(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertNull(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN));\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/source/LoopingDatasetFinderSourceTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2018-04-22 04:54:27","commitOrder":2,"curCode":"  public void testDrilldown() {\n    \r\n    Dataset dataset1 = new SimpleDatasetForTesting(\"dataset1\");\n    Dataset dataset2 = new SimplePartitionableDatasetForTesting(\"dataset2\", Lists\n        .newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"), new SimpleDatasetPartitionForTesting(\"p2\"),\n            new SimpleDatasetPartitionForTesting(\"p3\")));\n    Dataset dataset3 = new SimplePartitionableDatasetForTesting(\"dataset3\", Lists\n        .newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"), new SimpleDatasetPartitionForTesting(\"p2\"),\n            new SimpleDatasetPartitionForTesting(\"p3\")));\n\n    IterableDatasetFinder finder = new StaticDatasetsFinderForTesting(Lists.newArrayList(dataset3, dataset2, dataset1));\n\n    MySource mySource = new MySource(true, finder);\n\n    \r\n    SourceState sourceState = new SourceState();\n    sourceState.setProp(LoopingDatasetFinderSource.MAX_WORK_UNITS_PER_RUN_KEY, 3);\n\n    \r\n    WorkUnitStream workUnitStream = mySource.getWorkunitStream(sourceState);\n    List<WorkUnit> workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 4);\n    verifyWorkUnitState(workUnits, \"dataset2\", \"p2\", false, false);\n\n    \r\n    List<WorkUnitState> workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    SourceState sourceStateSpy = Mockito.spy(sourceState);\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 4);\n    verifyWorkUnitState(workUnits, \"dataset3\", \"p2\", false, false);\n\n    \r\n    workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 2);\n    verifyWorkUnitState(workUnits, \"dataset3\", \"p3\", true, false);\n\n    \r\n    workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 4);\n    verifyWorkUnitState(workUnits, \"dataset2\", \"p2\", false, false);\n  }\n","date":"2018-04-22 04:54:27","endLine":180,"groupId":"101670","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testDrilldown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/41/745f1af5180a18b0102438e928b2c5884d8c37.src","preCode":"  public void testDrilldown() {\n    \r\n    Dataset dataset1 = new SimpleDatasetForTesting(\"dataset1\");\n    Dataset dataset2 = new SimplePartitionableDatasetForTesting(\"dataset2\",\n        Lists.newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"),\n            new SimpleDatasetPartitionForTesting(\"p2\"), new SimpleDatasetPartitionForTesting(\"p3\")));\n    Dataset dataset3 = new SimplePartitionableDatasetForTesting(\"dataset3\",\n        Lists.newArrayList(new SimpleDatasetPartitionForTesting(\"p1\"),\n            new SimpleDatasetPartitionForTesting(\"p2\"), new SimpleDatasetPartitionForTesting(\"p3\")));\n\n    IterableDatasetFinder finder = new StaticDatasetsFinderForTesting(\n        Lists.newArrayList(dataset3, dataset2, dataset1));\n\n    MySource mySource = new MySource(true, finder);\n\n    \r\n    SourceState sourceState = new SourceState();\n    sourceState.setProp(LoopingDatasetFinderSource.MAX_WORK_UNITS_PER_RUN_KEY, 3);\n\n    \r\n    WorkUnitStream workUnitStream = mySource.getWorkunitStream(sourceState);\n    List<WorkUnit> workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset1\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p1\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p2\");\n\n    \r\n    List<WorkUnitState> workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    SourceState sourceStateSpy = Mockito.spy(sourceState);\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p3\");\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p1\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p2\");\n\n    \r\n    workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 2);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset3\");\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p3\");\n    Assert.assertTrue(workUnits.get(1).getPropAsBoolean(LoopingDatasetFinderSource.END_OF_DATASETS_KEY));\n\n    \r\n    workUnitStates = workUnits.stream().map(WorkUnitState::new).collect(Collectors.toList());\n    Mockito.doReturn(workUnitStates).when(sourceStateSpy).getPreviousWorkUnitStates();\n\n    workUnitStream = mySource.getWorkunitStream(sourceStateSpy);\n    workUnits = Lists.newArrayList(workUnitStream.getWorkUnits());\n\n    Assert.assertEquals(workUnits.size(), 3);\n    Assert.assertEquals(workUnits.get(0).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset1\");\n    Assert.assertNull(workUnits.get(0).getProp(DatasetFinderSourceTest.PARTITION_URN));\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(1).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p1\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.DATASET_URN), \"dataset2\");\n    Assert.assertEquals(workUnits.get(2).getProp(DatasetFinderSourceTest.PARTITION_URN), \"p2\");\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/source/LoopingDatasetFinderSourceTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"b39bf8cabcabe7864719f4121ccffa09d9f6c08a","commitMessage":"@@@[GOBBLIN-464] Enhance LoopingDatasetFinderSource to support global watermark and per-dataset watermark.\n\nCloses #2336 from sv2000/loopingwm\n","date":"2018-04-22 04:54:27","modifiedFileCount":"9","status":"M","submitter":"suvasude"}]
