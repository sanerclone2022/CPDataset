[{"authorTime":"2021-04-27 07:47:54","codes":[{"authorDate":"2021-01-15 04:11:22","commitOrder":2,"curCode":"  public void testResumeDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator6 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.FAILED));\n    Iterator<JobStatus> jobStatusIterator7 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, \"NA_KEY\", \"NA_KEY\", String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator8 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator9 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator10 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator11 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator12 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever\n        .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7).\n        thenReturn(jobStatusIterator8).\n        thenReturn(jobStatusIterator9).\n        thenReturn(jobStatusIterator10).\n        thenReturn(jobStatusIterator11).\n        thenReturn(jobStatusIterator12);\n\n    \r\n    for (int i = 0; i < 4; i++) {\n      this._dagManagerThread.run();\n    }\n\n    Assert.assertTrue(this.failedDags.containsKey(dagId));\n\n    \r\n    this.resumeQueue.offer(dagId);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDags.containsKey(dagId));\n    Assert.assertTrue(this.dags.containsKey(dagId));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDags.containsKey(dagId));\n    Assert.assertFalse(this.dags.containsKey(dagId));\n  }\n","date":"2021-01-15 04:11:22","endLine":409,"groupId":"3496","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testResumeDag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a3/9457f6c858ecfa7cdd9b26edcc48efcd655963.src","preCode":"  public void testResumeDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator6 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.FAILED));\n    Iterator<JobStatus> jobStatusIterator7 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, \"NA_KEY\", \"NA_KEY\", String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator8 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator9 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator10 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator11 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator12 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever\n        .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7).\n        thenReturn(jobStatusIterator8).\n        thenReturn(jobStatusIterator9).\n        thenReturn(jobStatusIterator10).\n        thenReturn(jobStatusIterator11).\n        thenReturn(jobStatusIterator12);\n\n    \r\n    for (int i = 0; i < 4; i++) {\n      this._dagManagerThread.run();\n    }\n\n    Assert.assertTrue(this.failedDags.containsKey(dagId));\n\n    \r\n    this.resumeQueue.offer(dagId);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDags.containsKey(dagId));\n    Assert.assertTrue(this.dags.containsKey(dagId));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDags.containsKey(dagId));\n    Assert.assertFalse(this.dags.containsKey(dagId));\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"NB"},{"authorDate":"2021-04-27 07:47:54","commitOrder":2,"curCode":"  public void testResumeCancelledDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator6 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.CANCELLED));\n    Iterator<JobStatus> jobStatusIterator7 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, \"NA_KEY\", \"NA_KEY\", String.valueOf(ExecutionStatus.PENDING_RESUME));\n        Iterator<JobStatus> jobStatusIterator8 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator9 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator10 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator11 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator12 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever\n        .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7).\n        thenReturn(jobStatusIterator8).\n        thenReturn(jobStatusIterator9).\n        thenReturn(jobStatusIterator10).\n        thenReturn(jobStatusIterator11).\n        thenReturn(jobStatusIterator12);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      this._dagManagerThread.run();\n    }\n\n    \r\n    this.cancelQueue.offer(dagId);\n\n    this._dagManagerThread.run();\n    Assert.assertTrue(this.failedDags.containsKey(dagId));\n    Assert.assertTrue((this.failedDags.get(dagId).getFlowEvent() == null));\n\n    \r\n    this.resumeQueue.offer(dagId);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDags.containsKey(dagId));\n    Assert.assertTrue(this.dags.containsKey(dagId));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDags.containsKey(dagId));\n    Assert.assertFalse(this.dags.containsKey(dagId));\n  }\n","date":"2021-04-27 07:47:54","endLine":636,"groupId":"3496","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testResumeCancelledDag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/70/cb769e4067e6c35bd1ac466b40de57b9c287d2.src","preCode":"  public void testResumeCancelledDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator6 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.CANCELLED));\n    Iterator<JobStatus> jobStatusIterator7 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, \"NA_KEY\", \"NA_KEY\", String.valueOf(ExecutionStatus.PENDING_RESUME));\n        Iterator<JobStatus> jobStatusIterator8 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator9 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator10 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator11 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator12 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever\n        .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7).\n        thenReturn(jobStatusIterator8).\n        thenReturn(jobStatusIterator9).\n        thenReturn(jobStatusIterator10).\n        thenReturn(jobStatusIterator11).\n        thenReturn(jobStatusIterator12);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      this._dagManagerThread.run();\n    }\n\n    \r\n    this.cancelQueue.offer(dagId);\n\n    this._dagManagerThread.run();\n    Assert.assertTrue(this.failedDags.containsKey(dagId));\n    Assert.assertTrue((this.failedDags.get(dagId).getFlowEvent() == null));\n\n    \r\n    this.resumeQueue.offer(dagId);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDags.containsKey(dagId));\n    Assert.assertTrue(this.dags.containsKey(dagId));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDags.containsKey(dagId));\n    Assert.assertFalse(this.dags.containsKey(dagId));\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":558,"status":"B"}],"commitId":"e64b8315523ae3ecf71256c8c87bcc0697a8b141","commitMessage":"@@@Clear flow event after cancel (#3271)\n\n* cleared flow event after cancelled job to allow resume event status to work\n\n* moved clearing of FlowEvent to occur before dags are cleaned up to avoid regression\n\n* added comment to clarify nullification of FlowEvent field\n\nCo-authored-by: Urmi Mustafi <umustafi@umustafi-mn1.linkedin.biz>","date":"2021-04-27 07:47:54","modifiedFileCount":"2","status":"M","submitter":"umustafi"},{"authorTime":"2021-05-07 09:01:19","codes":[{"authorDate":"2021-05-07 09:01:19","commitOrder":3,"curCode":"  public void testResumeDag() throws URISyntaxException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator6 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.FAILED));\n    Iterator<JobStatus> jobStatusIterator7 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, \"NA_KEY\", \"NA_KEY\", String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator8 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator9 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator10 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator11 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator12 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever\n        .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7).\n        thenReturn(jobStatusIterator8).\n        thenReturn(jobStatusIterator9).\n        thenReturn(jobStatusIterator10).\n        thenReturn(jobStatusIterator11).\n        thenReturn(jobStatusIterator12);\n\n    \r\n    for (int i = 0; i < 4; i++) {\n      this._dagManagerThread.run();\n    }\n\n    Assert.assertTrue(this.failedDagIds.contains(dagId));\n\n    \r\n    this.resumeQueue.offer(dagId);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDagIds.contains(dagId));\n    Assert.assertTrue(this.dags.containsKey(dagId));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDagIds.contains(dagId));\n    Assert.assertFalse(this.dags.containsKey(dagId));\n  }\n","date":"2021-05-07 09:01:19","endLine":413,"groupId":"3496","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testResumeDag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/77/49903ef29a76562cba414aed24091a26a8ce59.src","preCode":"  public void testResumeDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator6 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.FAILED));\n    Iterator<JobStatus> jobStatusIterator7 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, \"NA_KEY\", \"NA_KEY\", String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator8 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator9 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator10 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator11 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator12 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever\n        .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7).\n        thenReturn(jobStatusIterator8).\n        thenReturn(jobStatusIterator9).\n        thenReturn(jobStatusIterator10).\n        thenReturn(jobStatusIterator11).\n        thenReturn(jobStatusIterator12);\n\n    \r\n    for (int i = 0; i < 4; i++) {\n      this._dagManagerThread.run();\n    }\n\n    Assert.assertTrue(this.failedDags.containsKey(dagId));\n\n    \r\n    this.resumeQueue.offer(dagId);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDags.containsKey(dagId));\n    Assert.assertTrue(this.dags.containsKey(dagId));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDags.containsKey(dagId));\n    Assert.assertFalse(this.dags.containsKey(dagId));\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"},{"authorDate":"2021-05-07 09:01:19","commitOrder":3,"curCode":"  public void testResumeCancelledDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator6 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.CANCELLED));\n    Iterator<JobStatus> jobStatusIterator7 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, \"NA_KEY\", \"NA_KEY\", String.valueOf(ExecutionStatus.PENDING_RESUME));\n        Iterator<JobStatus> jobStatusIterator8 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator9 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator10 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator11 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator12 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever\n        .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7).\n        thenReturn(jobStatusIterator8).\n        thenReturn(jobStatusIterator9).\n        thenReturn(jobStatusIterator10).\n        thenReturn(jobStatusIterator11).\n        thenReturn(jobStatusIterator12);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      this._dagManagerThread.run();\n    }\n\n    \r\n    this.cancelQueue.offer(dagId);\n\n    this._dagManagerThread.run();\n    Assert.assertTrue(this.failedDagIds.contains(dagId));\n\n    \r\n    this.resumeQueue.offer(dagId);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDagIds.contains(dagId));\n    Assert.assertTrue(this.dags.containsKey(dagId));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDagIds.contains(dagId));\n    Assert.assertFalse(this.dags.containsKey(dagId));\n  }\n","date":"2021-05-07 09:01:19","endLine":637,"groupId":"3496","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testResumeCancelledDag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/77/49903ef29a76562cba414aed24091a26a8ce59.src","preCode":"  public void testResumeCancelledDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator6 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.CANCELLED));\n    Iterator<JobStatus> jobStatusIterator7 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, \"NA_KEY\", \"NA_KEY\", String.valueOf(ExecutionStatus.PENDING_RESUME));\n        Iterator<JobStatus> jobStatusIterator8 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator9 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator10 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator11 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator12 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever\n        .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7).\n        thenReturn(jobStatusIterator8).\n        thenReturn(jobStatusIterator9).\n        thenReturn(jobStatusIterator10).\n        thenReturn(jobStatusIterator11).\n        thenReturn(jobStatusIterator12);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      this._dagManagerThread.run();\n    }\n\n    \r\n    this.cancelQueue.offer(dagId);\n\n    this._dagManagerThread.run();\n    Assert.assertTrue(this.failedDags.containsKey(dagId));\n    Assert.assertTrue((this.failedDags.get(dagId).getFlowEvent() == null));\n\n    \r\n    this.resumeQueue.offer(dagId);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDags.containsKey(dagId));\n    Assert.assertTrue(this.dags.containsKey(dagId));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDags.containsKey(dagId));\n    Assert.assertFalse(this.dags.containsKey(dagId));\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":560,"status":"M"}],"commitId":"7350c20076afc83dc1110dc5e7ec1ca650a367b5","commitMessage":"@@@[GOBBLIN-1438] Only load failed dags at time of resume\n\nCloses #3272 from jack-moseley/failed-dag-memory\n","date":"2021-05-07 09:01:19","modifiedFileCount":"8","status":"M","submitter":"Jack Moseley"},{"authorTime":"2021-05-07 09:01:19","codes":[{"authorDate":"2021-06-16 02:44:42","commitOrder":4,"curCode":"  public void testResumeDag() throws URISyntaxException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator6 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.FAILED));\n    Iterator<JobStatus> jobStatusIterator7 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, \"NA_KEY\", \"NA_KEY\", String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator8 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator9 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator10 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator11 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator12 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever\n        .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7).\n        thenReturn(jobStatusIterator8).\n        thenReturn(jobStatusIterator9).\n        thenReturn(jobStatusIterator10).\n        thenReturn(jobStatusIterator11).\n        thenReturn(jobStatusIterator12);\n\n    \r\n    for (int i = 0; i < 4; i++) {\n      this._dagManagerThread.run();\n    }\n\n    Assert.assertTrue(this.failedDagIds.contains(dagId));\n\n    \r\n    this.resumeQueue.offer(dagId);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDagIds.contains(dagId));\n    Assert.assertTrue(this.dags.containsKey(dagId));\n\n    \r\n    Assert.assertEquals(dag.getNodes().get(2).getValue().getCurrentAttempts(), 1);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDagIds.contains(dagId));\n    Assert.assertFalse(this.dags.containsKey(dagId));\n  }\n","date":"2021-06-16 02:44:42","endLine":423,"groupId":"101090","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testResumeDag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2b/7044f92e4533a1bd24d8fb4e2e658734935134.src","preCode":"  public void testResumeDag() throws URISyntaxException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator6 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.FAILED));\n    Iterator<JobStatus> jobStatusIterator7 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, \"NA_KEY\", \"NA_KEY\", String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator8 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator9 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator10 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator11 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator12 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever\n        .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7).\n        thenReturn(jobStatusIterator8).\n        thenReturn(jobStatusIterator9).\n        thenReturn(jobStatusIterator10).\n        thenReturn(jobStatusIterator11).\n        thenReturn(jobStatusIterator12);\n\n    \r\n    for (int i = 0; i < 4; i++) {\n      this._dagManagerThread.run();\n    }\n\n    Assert.assertTrue(this.failedDagIds.contains(dagId));\n\n    \r\n    this.resumeQueue.offer(dagId);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDagIds.contains(dagId));\n    Assert.assertTrue(this.dags.containsKey(dagId));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDagIds.contains(dagId));\n    Assert.assertFalse(this.dags.containsKey(dagId));\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"},{"authorDate":"2021-05-07 09:01:19","commitOrder":4,"curCode":"  public void testResumeCancelledDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator6 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.CANCELLED));\n    Iterator<JobStatus> jobStatusIterator7 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, \"NA_KEY\", \"NA_KEY\", String.valueOf(ExecutionStatus.PENDING_RESUME));\n        Iterator<JobStatus> jobStatusIterator8 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator9 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator10 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator11 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator12 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever\n        .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7).\n        thenReturn(jobStatusIterator8).\n        thenReturn(jobStatusIterator9).\n        thenReturn(jobStatusIterator10).\n        thenReturn(jobStatusIterator11).\n        thenReturn(jobStatusIterator12);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      this._dagManagerThread.run();\n    }\n\n    \r\n    this.cancelQueue.offer(dagId);\n\n    this._dagManagerThread.run();\n    Assert.assertTrue(this.failedDagIds.contains(dagId));\n\n    \r\n    this.resumeQueue.offer(dagId);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDagIds.contains(dagId));\n    Assert.assertTrue(this.dags.containsKey(dagId));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDagIds.contains(dagId));\n    Assert.assertFalse(this.dags.containsKey(dagId));\n  }\n","date":"2021-05-07 09:01:19","endLine":637,"groupId":"101090","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testResumeCancelledDag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/77/49903ef29a76562cba414aed24091a26a8ce59.src","preCode":"  public void testResumeCancelledDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator6 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.CANCELLED));\n    Iterator<JobStatus> jobStatusIterator7 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, \"NA_KEY\", \"NA_KEY\", String.valueOf(ExecutionStatus.PENDING_RESUME));\n        Iterator<JobStatus> jobStatusIterator8 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator9 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator10 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.PENDING_RESUME));\n    Iterator<JobStatus> jobStatusIterator11 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator12 =\n        getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever\n        .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7).\n        thenReturn(jobStatusIterator8).\n        thenReturn(jobStatusIterator9).\n        thenReturn(jobStatusIterator10).\n        thenReturn(jobStatusIterator11).\n        thenReturn(jobStatusIterator12);\n\n    \r\n    for (int i = 0; i < 3; i++) {\n      this._dagManagerThread.run();\n    }\n\n    \r\n    this.cancelQueue.offer(dagId);\n\n    this._dagManagerThread.run();\n    Assert.assertTrue(this.failedDagIds.contains(dagId));\n\n    \r\n    this.resumeQueue.offer(dagId);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDagIds.contains(dagId));\n    Assert.assertTrue(this.dags.containsKey(dagId));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertFalse(this.failedDagIds.contains(dagId));\n    Assert.assertFalse(this.dags.containsKey(dagId));\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":560,"status":"N"}],"commitId":"1e03329332a14277b7507e75127ffa5b30377757","commitMessage":"@@@[GOBBLIN-1468] reset currentAttempt counter on resume flow\n\nCloses #3308 from\narjun4084346/resetCurrentAttemptOnFlowResume\n","date":"2021-06-16 02:44:42","modifiedFileCount":"2","status":"M","submitter":"Arjun"}]
