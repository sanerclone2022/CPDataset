[{"authorTime":"2017-11-08 07:25:46","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  private void buildFileMetricReporter(Properties properties) {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting metrics to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.METRICS_LOG_DIR_KEY)) {\n      LOGGER.error(\n          \"Not reporting metrics to log files because \" + ConfigurationKeys.METRICS_LOG_DIR_KEY + \" is undefined\");\n      return;\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path metricsLogDir = new Path(properties.getProperty(ConfigurationKeys.METRICS_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(metricsLogDir) && !fs.mkdirs(metricsLogDir)) {\n        LOGGER.error(\"Failed to create metric log directory for metrics \" + this.getName());\n        return;\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path metricLogFile =\n          new Path(metricsLogDir, this.id + metricsFileSuffix + \".metrics.log\");\n      boolean append = false;\n      \r\n      if (fs.exists(metricLogFile)) {\n        LOGGER.info(String.format(\"Metric log file %s already exists, appending to it\", metricLogFile));\n        append = true;\n      }\n\n      OutputStream output = append ? fs.append(metricLogFile) : fs.create(metricLogFile, true);\n      OutputStreamReporter.Factory.newBuilder().outputTo(output).build(properties);\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(OutputStreamEventReporter.forContext(RootMetricContext.get()).outputTo(output).build()));\n\n      LOGGER.info(\"Will start reporting metrics to directory \" + metricsLogDir);\n    } catch (IOException ioe) {\n      LOGGER.error(\"Failed to build file metric reporter for job \" + this.id, ioe);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":502,"groupId":"587","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildFileMetricReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e1/23158723c7f3259f0056911d8c8d8547283cf7.src","preCode":"  private void buildFileMetricReporter(Properties properties) {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting metrics to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.METRICS_LOG_DIR_KEY)) {\n      LOGGER.error(\n          \"Not reporting metrics to log files because \" + ConfigurationKeys.METRICS_LOG_DIR_KEY + \" is undefined\");\n      return;\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path metricsLogDir = new Path(properties.getProperty(ConfigurationKeys.METRICS_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(metricsLogDir) && !fs.mkdirs(metricsLogDir)) {\n        LOGGER.error(\"Failed to create metric log directory for metrics \" + this.getName());\n        return;\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path metricLogFile =\n          new Path(metricsLogDir, this.id + metricsFileSuffix + \".metrics.log\");\n      boolean append = false;\n      \r\n      if (fs.exists(metricLogFile)) {\n        LOGGER.info(String.format(\"Metric log file %s already exists, appending to it\", metricLogFile));\n        append = true;\n      }\n\n      OutputStream output = append ? fs.append(metricLogFile) : fs.create(metricLogFile, true);\n      OutputStreamReporter.Factory.newBuilder().outputTo(output).build(properties);\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(OutputStreamEventReporter.forContext(RootMetricContext.get()).outputTo(output).build()));\n\n      LOGGER.info(\"Will start reporting metrics to directory \" + metricsLogDir);\n    } catch (IOException ioe) {\n      LOGGER.error(\"Failed to build file metric reporter for job \" + this.id, ioe);\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":452,"status":"NB"},{"authorDate":"2017-11-08 07:25:46","commitOrder":2,"curCode":"  private void buildFileFailureEventReporter(Properties properties) {\n    if (!properties.containsKey(ConfigurationKeys.FAILURE_LOG_DIR_KEY)) {\n      LOGGER.error(\n          \"Not reporting failure to log files because \" + ConfigurationKeys.FAILURE_LOG_DIR_KEY + \" is undefined\");\n      return;\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path failureLogDir = new Path(properties.getProperty(ConfigurationKeys.FAILURE_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(failureLogDir) && !fs.mkdirs(failureLogDir)) {\n        LOGGER.error(\"Failed to create failure log directory for metrics \" + this.getName());\n        return;\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path failureLogFile =\n          new Path(failureLogDir, this.id + metricsFileSuffix + \".failure.log\");\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(new FileFailureEventReporter(RootMetricContext.get(), fs, failureLogFile)));\n\n      LOGGER.info(\"Will start reporting failure to directory \" + failureLogDir);\n    } catch (IOException ioe) {\n      LOGGER.error(\"Failed to build file failure event reporter for job \" + this.id, ioe);\n    }\n  }\n","date":"2017-11-08 07:25:46","endLine":543,"groupId":"587","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildFileFailureEventReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ae/20031bb3336706a8cf9c480ba1f52e78eab0ed.src","preCode":"  private void buildFileFailureEventReporter(Properties properties) {\n    if (!properties.containsKey(ConfigurationKeys.FAILURE_LOG_DIR_KEY)) {\n      LOGGER.error(\n          \"Not reporting failure to log files because \" + ConfigurationKeys.FAILURE_LOG_DIR_KEY + \" is undefined\");\n      return;\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path failureLogDir = new Path(properties.getProperty(ConfigurationKeys.FAILURE_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(failureLogDir) && !fs.mkdirs(failureLogDir)) {\n        LOGGER.error(\"Failed to create failure log directory for metrics \" + this.getName());\n        return;\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path failureLogFile =\n          new Path(failureLogDir, this.id + metricsFileSuffix + \".failure.log\");\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(new FileFailureEventReporter(RootMetricContext.get(), fs, failureLogFile)));\n\n      LOGGER.info(\"Will start reporting failure to directory \" + failureLogDir);\n    } catch (IOException ioe) {\n      LOGGER.error(\"Failed to build file failure event reporter for job \" + this.id, ioe);\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"B"}],"commitId":"6198120e3f9f969064ee1bc2686f38f41ec32172","commitMessage":"@@@[GOBBLIN-273] Add job failure monitoring\n\nCloses #2125 from zxcware/msg\n","date":"2017-11-08 07:25:46","modifiedFileCount":"12","status":"M","submitter":"zhchen"},{"authorTime":"2018-09-26 01:33:12","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":3,"curCode":"  private void buildFileMetricReporter(Properties properties) {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting metrics to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.METRICS_LOG_DIR_KEY)) {\n      LOGGER.error(\n          \"Not reporting metrics to log files because \" + ConfigurationKeys.METRICS_LOG_DIR_KEY + \" is undefined\");\n      return;\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path metricsLogDir = new Path(properties.getProperty(ConfigurationKeys.METRICS_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(metricsLogDir) && !fs.mkdirs(metricsLogDir)) {\n        LOGGER.error(\"Failed to create metric log directory for metrics \" + this.getName());\n        return;\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path metricLogFile =\n          new Path(metricsLogDir, this.id + metricsFileSuffix + \".metrics.log\");\n      boolean append = false;\n      \r\n      if (fs.exists(metricLogFile)) {\n        LOGGER.info(String.format(\"Metric log file %s already exists, appending to it\", metricLogFile));\n        append = true;\n      }\n\n      OutputStream output = append ? fs.append(metricLogFile) : fs.create(metricLogFile, true);\n      OutputStreamReporter.Factory.newBuilder().outputTo(output).build(properties);\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(OutputStreamEventReporter.forContext(RootMetricContext.get()).outputTo(output).build()));\n\n      LOGGER.info(\"Will start reporting metrics to directory \" + metricsLogDir);\n    } catch (IOException ioe) {\n      LOGGER.error(\"Failed to build file metric reporter for job \" + this.id, ioe);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":502,"groupId":"587","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildFileMetricReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e1/23158723c7f3259f0056911d8c8d8547283cf7.src","preCode":"  private void buildFileMetricReporter(Properties properties) {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting metrics to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.METRICS_LOG_DIR_KEY)) {\n      LOGGER.error(\n          \"Not reporting metrics to log files because \" + ConfigurationKeys.METRICS_LOG_DIR_KEY + \" is undefined\");\n      return;\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path metricsLogDir = new Path(properties.getProperty(ConfigurationKeys.METRICS_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(metricsLogDir) && !fs.mkdirs(metricsLogDir)) {\n        LOGGER.error(\"Failed to create metric log directory for metrics \" + this.getName());\n        return;\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path metricLogFile =\n          new Path(metricsLogDir, this.id + metricsFileSuffix + \".metrics.log\");\n      boolean append = false;\n      \r\n      if (fs.exists(metricLogFile)) {\n        LOGGER.info(String.format(\"Metric log file %s already exists, appending to it\", metricLogFile));\n        append = true;\n      }\n\n      OutputStream output = append ? fs.append(metricLogFile) : fs.create(metricLogFile, true);\n      OutputStreamReporter.Factory.newBuilder().outputTo(output).build(properties);\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(OutputStreamEventReporter.forContext(RootMetricContext.get()).outputTo(output).build()));\n\n      LOGGER.info(\"Will start reporting metrics to directory \" + metricsLogDir);\n    } catch (IOException ioe) {\n      LOGGER.error(\"Failed to build file metric reporter for job \" + this.id, ioe);\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":452,"status":"N"},{"authorDate":"2018-09-26 01:33:12","commitOrder":3,"curCode":"  private void buildFileFailureEventReporter(Properties properties) {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.FAILURE_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_FAILURE_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting failure to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.FAILURE_LOG_DIR_KEY)) {\n      LOGGER.error(\n          \"Not reporting failure to log files because \" + ConfigurationKeys.FAILURE_LOG_DIR_KEY + \" is undefined\");\n      return;\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path failureLogDir = new Path(properties.getProperty(ConfigurationKeys.FAILURE_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(failureLogDir) && !fs.mkdirs(failureLogDir)) {\n        LOGGER.error(\"Failed to create failure log directory for metrics \" + this.getName());\n        return;\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path failureLogFile =\n          new Path(failureLogDir, this.id + metricsFileSuffix + \".failure.log\");\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(new FileFailureEventReporter(RootMetricContext.get(), fs, failureLogFile)));\n\n      LOGGER.info(\"Will start reporting failure to directory \" + failureLogDir);\n    } catch (IOException ioe) {\n      LOGGER.error(\"Failed to build file failure event reporter for job \" + this.id, ioe);\n    }\n  }\n","date":"2018-09-26 01:33:12","endLine":567,"groupId":"587","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildFileFailureEventReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b9/86cda9463d41e5210abeb0d6695c796e510cac.src","preCode":"  private void buildFileFailureEventReporter(Properties properties) {\n    if (!properties.containsKey(ConfigurationKeys.FAILURE_LOG_DIR_KEY)) {\n      LOGGER.error(\n          \"Not reporting failure to log files because \" + ConfigurationKeys.FAILURE_LOG_DIR_KEY + \" is undefined\");\n      return;\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path failureLogDir = new Path(properties.getProperty(ConfigurationKeys.FAILURE_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(failureLogDir) && !fs.mkdirs(failureLogDir)) {\n        LOGGER.error(\"Failed to create failure log directory for metrics \" + this.getName());\n        return;\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path failureLogFile =\n          new Path(failureLogDir, this.id + metricsFileSuffix + \".failure.log\");\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(new FileFailureEventReporter(RootMetricContext.get(), fs, failureLogFile)));\n\n      LOGGER.info(\"Will start reporting failure to directory \" + failureLogDir);\n    } catch (IOException ioe) {\n      LOGGER.error(\"Failed to build file failure event reporter for job \" + this.id, ioe);\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":526,"status":"M"}],"commitId":"acb90d71a4e075afd19d704c69cb38bf9087c55a","commitMessage":"@@@[GOBBLIN-592] Allow disabling file-based failure reporting through config\n\n[GOBBLIN-592] Allow disabling file-based failure\nreporting through config\n\n[GOBBLIN-592]: Retrigger test\n\nCloses #2460 from shardulm94/gobblin-592\n","date":"2018-09-26 01:33:12","modifiedFileCount":"2","status":"M","submitter":"Shardul Mahadik"},{"authorTime":"2020-05-12 01:04:28","codes":[{"authorDate":"2020-05-12 01:04:28","commitOrder":4,"curCode":"  private void buildFileMetricReporter(Properties properties)\n      throws MetricReporterException {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting metrics to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.METRICS_LOG_DIR_KEY)) {\n      throw new MetricReporterException(\n          \"Not reporting metrics to log files because \" + ConfigurationKeys.METRICS_LOG_DIR_KEY + \" is undefined\", ReporterSinkType.FILE);\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path metricsLogDir = new Path(properties.getProperty(ConfigurationKeys.METRICS_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(metricsLogDir) && !fs.mkdirs(metricsLogDir)) {\n        throw new MetricReporterException(\"Failed to create metric log directory for metrics \" + this.getName(), ReporterSinkType.FILE);\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path metricLogFile =\n          new Path(metricsLogDir, this.id + metricsFileSuffix + \".metrics.log\");\n      boolean append = false;\n      \r\n      if (fs.exists(metricLogFile)) {\n        LOGGER.info(String.format(\"Metric log file %s already exists, appending to it\", metricLogFile));\n        append = true;\n      }\n\n      OutputStream output = append ? fs.append(metricLogFile) : fs.create(metricLogFile, true);\n      \r\n      OutputStreamReporter.Factory.newBuilder().outputTo(output).build(properties);\n      \r\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(OutputStreamEventReporter.forContext(RootMetricContext.get()).outputTo(output).build()));\n\n      LOGGER.info(\"Will start reporting metrics to directory \" + metricsLogDir);\n    } catch (IOException ioe) {\n      throw new MetricReporterException(\"Failed to build file metric reporter for job \" + this.id, ioe, ReporterSinkType.FILE);\n    }\n  }\n","date":"2020-05-12 01:04:28","endLine":530,"groupId":"7161","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"buildFileMetricReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4a/f9fde5a20f8f3d995738dc6b0906e52eec6f16.src","preCode":"  private void buildFileMetricReporter(Properties properties) {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting metrics to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.METRICS_LOG_DIR_KEY)) {\n      LOGGER.error(\n          \"Not reporting metrics to log files because \" + ConfigurationKeys.METRICS_LOG_DIR_KEY + \" is undefined\");\n      return;\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path metricsLogDir = new Path(properties.getProperty(ConfigurationKeys.METRICS_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(metricsLogDir) && !fs.mkdirs(metricsLogDir)) {\n        LOGGER.error(\"Failed to create metric log directory for metrics \" + this.getName());\n        return;\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path metricLogFile =\n          new Path(metricsLogDir, this.id + metricsFileSuffix + \".metrics.log\");\n      boolean append = false;\n      \r\n      if (fs.exists(metricLogFile)) {\n        LOGGER.info(String.format(\"Metric log file %s already exists, appending to it\", metricLogFile));\n        append = true;\n      }\n\n      OutputStream output = append ? fs.append(metricLogFile) : fs.create(metricLogFile, true);\n      \r\n      OutputStreamReporter.Factory.newBuilder().outputTo(output).build(properties);\n      \r\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(OutputStreamEventReporter.forContext(RootMetricContext.get()).outputTo(output).build()));\n\n      LOGGER.info(\"Will start reporting metrics to directory \" + metricsLogDir);\n    } catch (IOException ioe) {\n      LOGGER.error(\"Failed to build file metric reporter for job \" + this.id, ioe);\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":479,"status":"M"},{"authorDate":"2020-05-12 01:04:28","commitOrder":4,"curCode":"  private void buildFileFailureEventReporter(Properties properties)\n      throws EventReporterException {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.FAILURE_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_FAILURE_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting failure to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.FAILURE_LOG_DIR_KEY)) {\n      throw new EventReporterException(\n          \"Not reporting failure to log files because \" + ConfigurationKeys.FAILURE_LOG_DIR_KEY + \" is undefined\", ReporterSinkType.FILE);\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path failureLogDir = new Path(properties.getProperty(ConfigurationKeys.FAILURE_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(failureLogDir) && !fs.mkdirs(failureLogDir)) {\n        throw new EventReporterException(\"Failed to create failure log directory for metrics \" + this.getName(), ReporterSinkType.FILE);\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path failureLogFile =\n          new Path(failureLogDir, this.id + metricsFileSuffix + \".failure.log\");\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(new FileFailureEventReporter(RootMetricContext.get(), fs, failureLogFile)));\n\n      LOGGER.info(\"Will start reporting failure to directory \" + failureLogDir);\n    } catch (IOException ioe) {\n      throw new EventReporterException(\"Failed to build file failure event reporter for job \" + this.id, ioe, ReporterSinkType.FILE);\n    }\n  }\n","date":"2020-05-12 01:04:28","endLine":572,"groupId":"7161","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildFileFailureEventReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4a/f9fde5a20f8f3d995738dc6b0906e52eec6f16.src","preCode":"  private void buildFileFailureEventReporter(Properties properties) {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.FAILURE_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_FAILURE_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting failure to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.FAILURE_LOG_DIR_KEY)) {\n      LOGGER.error(\n          \"Not reporting failure to log files because \" + ConfigurationKeys.FAILURE_LOG_DIR_KEY + \" is undefined\");\n      return;\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path failureLogDir = new Path(properties.getProperty(ConfigurationKeys.FAILURE_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(failureLogDir) && !fs.mkdirs(failureLogDir)) {\n        LOGGER.error(\"Failed to create failure log directory for metrics \" + this.getName());\n        return;\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path failureLogFile =\n          new Path(failureLogDir, this.id + metricsFileSuffix + \".failure.log\");\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(new FileFailureEventReporter(RootMetricContext.get(), fs, failureLogFile)));\n\n      LOGGER.info(\"Will start reporting failure to directory \" + failureLogDir);\n    } catch (IOException ioe) {\n      LOGGER.error(\"Failed to build file failure event reporter for job \" + this.id, ioe);\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":532,"status":"M"}],"commitId":"239115778a08590d7ab5dfa32334efabe0e4fb49","commitMessage":"@@@[GOBBLIN-1127] Provide an option to make metric reporting instantiatio?\n\nCloses #2967 from sv2000/metricReportFatal\n","date":"2020-05-12 01:04:28","modifiedFileCount":"10","status":"M","submitter":"sv2000"},{"authorTime":"2020-05-21 02:57:35","codes":[{"authorDate":"2020-05-21 02:57:35","commitOrder":5,"curCode":"  private void buildFileMetricReporter(Properties properties) {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting metrics to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.METRICS_LOG_DIR_KEY)) {\n      LOGGER.error(\n          \"Not reporting metrics to log files because \" + ConfigurationKeys.METRICS_LOG_DIR_KEY + \" is undefined\");\n      return;\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path metricsLogDir = new Path(properties.getProperty(ConfigurationKeys.METRICS_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(metricsLogDir) && !fs.mkdirs(metricsLogDir)) {\n        LOGGER.error(\"Failed to create metric log directory for metrics \" + this.getName());\n        return;\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path metricLogFile =\n          new Path(metricsLogDir, this.id + metricsFileSuffix + \".metrics.log\");\n      boolean append = false;\n      \r\n      if (fs.exists(metricLogFile)) {\n        LOGGER.info(String.format(\"Metric log file %s already exists, appending to it\", metricLogFile));\n        append = true;\n      }\n\n      OutputStream output = append ? fs.append(metricLogFile) : fs.create(metricLogFile, true);\n      \r\n      OutputStreamReporter.Factory.newBuilder().outputTo(output).build(properties);\n      \r\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(OutputStreamEventReporter.forContext(RootMetricContext.get()).outputTo(output).build()));\n\n      LOGGER.info(\"Will start reporting metrics to directory \" + metricsLogDir);\n    } catch (IOException ioe) {\n      LOGGER.error(\"Failed to build file metric reporter for job \" + this.id, ioe);\n    }\n  }\n","date":"2020-05-21 02:57:35","endLine":528,"groupId":"587","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"buildFileMetricReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e9/69083be4555c392515337cda6da79643b8e0be.src","preCode":"  private void buildFileMetricReporter(Properties properties)\n      throws MetricReporterException {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting metrics to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.METRICS_LOG_DIR_KEY)) {\n      throw new MetricReporterException(\n          \"Not reporting metrics to log files because \" + ConfigurationKeys.METRICS_LOG_DIR_KEY + \" is undefined\", ReporterSinkType.FILE);\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path metricsLogDir = new Path(properties.getProperty(ConfigurationKeys.METRICS_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(metricsLogDir) && !fs.mkdirs(metricsLogDir)) {\n        throw new MetricReporterException(\"Failed to create metric log directory for metrics \" + this.getName(), ReporterSinkType.FILE);\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path metricLogFile =\n          new Path(metricsLogDir, this.id + metricsFileSuffix + \".metrics.log\");\n      boolean append = false;\n      \r\n      if (fs.exists(metricLogFile)) {\n        LOGGER.info(String.format(\"Metric log file %s already exists, appending to it\", metricLogFile));\n        append = true;\n      }\n\n      OutputStream output = append ? fs.append(metricLogFile) : fs.create(metricLogFile, true);\n      \r\n      OutputStreamReporter.Factory.newBuilder().outputTo(output).build(properties);\n      \r\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(OutputStreamEventReporter.forContext(RootMetricContext.get()).outputTo(output).build()));\n\n      LOGGER.info(\"Will start reporting metrics to directory \" + metricsLogDir);\n    } catch (IOException ioe) {\n      throw new MetricReporterException(\"Failed to build file metric reporter for job \" + this.id, ioe, ReporterSinkType.FILE);\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":476,"status":"M"},{"authorDate":"2020-05-21 02:57:35","commitOrder":5,"curCode":"  private void buildFileFailureEventReporter(Properties properties) {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.FAILURE_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_FAILURE_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting failure to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.FAILURE_LOG_DIR_KEY)) {\n      LOGGER.error(\n          \"Not reporting failure to log files because \" + ConfigurationKeys.FAILURE_LOG_DIR_KEY + \" is undefined\");\n      return;\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path failureLogDir = new Path(properties.getProperty(ConfigurationKeys.FAILURE_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(failureLogDir) && !fs.mkdirs(failureLogDir)) {\n        LOGGER.error(\"Failed to create failure log directory for metrics \" + this.getName());\n        return;\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path failureLogFile =\n          new Path(failureLogDir, this.id + metricsFileSuffix + \".failure.log\");\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(new FileFailureEventReporter(RootMetricContext.get(), fs, failureLogFile)));\n\n      LOGGER.info(\"Will start reporting failure to directory \" + failureLogDir);\n    } catch (IOException ioe) {\n      LOGGER.error(\"Failed to build file failure event reporter for job \" + this.id, ioe);\n    }\n  }\n","date":"2020-05-21 02:57:35","endLine":571,"groupId":"587","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"buildFileFailureEventReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e9/69083be4555c392515337cda6da79643b8e0be.src","preCode":"  private void buildFileFailureEventReporter(Properties properties)\n      throws EventReporterException {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.FAILURE_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_FAILURE_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting failure to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.FAILURE_LOG_DIR_KEY)) {\n      throw new EventReporterException(\n          \"Not reporting failure to log files because \" + ConfigurationKeys.FAILURE_LOG_DIR_KEY + \" is undefined\", ReporterSinkType.FILE);\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path failureLogDir = new Path(properties.getProperty(ConfigurationKeys.FAILURE_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(failureLogDir) && !fs.mkdirs(failureLogDir)) {\n        throw new EventReporterException(\"Failed to create failure log directory for metrics \" + this.getName(), ReporterSinkType.FILE);\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path failureLogFile =\n          new Path(failureLogDir, this.id + metricsFileSuffix + \".failure.log\");\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(new FileFailureEventReporter(RootMetricContext.get(), fs, failureLogFile)));\n\n      LOGGER.info(\"Will start reporting failure to directory \" + failureLogDir);\n    } catch (IOException ioe) {\n      throw new EventReporterException(\"Failed to build file failure event reporter for job \" + this.id, ioe, ReporterSinkType.FILE);\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"M"}],"commitId":"2305c26cd5813dbae88b4922fecc6d6737c460d9","commitMessage":"@@@[GOBBLIN-1127][GOBBLIN-1153] Revert \" Provide an option to make metric reporting instantiatio?\"\n\nThis reverts commit\n239115778a08590d7ab5dfa32334efabe0e4fb49.\n\nCloses #2992 from sv2000/revertMetricReportFailure\n","date":"2020-05-21 02:57:35","modifiedFileCount":"10","status":"M","submitter":"sv2000"},{"authorTime":"2020-06-17 01:04:05","codes":[{"authorDate":"2020-06-17 01:04:05","commitOrder":6,"curCode":"  private void buildFileMetricReporter(Properties properties)\n      throws MultiReporterException {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting metrics to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.METRICS_LOG_DIR_KEY)) {\n      MetricReporterException e = new MetricReporterException(\n          \"Not reporting metrics to log files because \" + ConfigurationKeys.METRICS_LOG_DIR_KEY + \" is undefined\", ReporterType.METRIC, ReporterSinkType.FILE);\n      throw new MultiReporterException(\"Failed to create file metric reporter\", Lists.newArrayList(e));\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path metricsLogDir = new Path(properties.getProperty(ConfigurationKeys.METRICS_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(metricsLogDir) && !fs.mkdirs(metricsLogDir)) {\n        throw new MetricReporterException(\"Failed to create metric log directory for metrics \" + this.getName(), ReporterType.METRIC, ReporterSinkType.FILE);\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path metricLogFile =\n          new Path(metricsLogDir, this.id + metricsFileSuffix + \".metrics.log\");\n      boolean append = false;\n      \r\n      if (fs.exists(metricLogFile)) {\n        LOGGER.info(String.format(\"Metric log file %s already exists, appending to it\", metricLogFile));\n        append = true;\n      }\n\n      OutputStream output = append ? fs.append(metricLogFile) : fs.create(metricLogFile, true);\n      \r\n      OutputStreamReporter.Factory.newBuilder().outputTo(output).build(properties);\n      \r\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(OutputStreamEventReporter.forContext(RootMetricContext.get()).outputTo(output).build()));\n\n      LOGGER.info(\"Will start reporting metrics to directory \" + metricsLogDir);\n    } catch (IOException ioe) {\n      MetricReporterException e = new MetricReporterException(\"Failed to build file metric reporter for job \" + this.id, ioe, ReporterType.METRIC, ReporterSinkType.FILE);\n      throw new MultiReporterException(\"Failed to create file metric reporter\", Lists.newArrayList(e));\n    }\n  }\n","date":"2020-06-17 01:04:05","endLine":560,"groupId":"1039","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"buildFileMetricReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4e/4fa6c7cbad766bb6063495807128bd93f5ea8b.src","preCode":"  private void buildFileMetricReporter(Properties properties) {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting metrics to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.METRICS_LOG_DIR_KEY)) {\n      LOGGER.error(\n          \"Not reporting metrics to log files because \" + ConfigurationKeys.METRICS_LOG_DIR_KEY + \" is undefined\");\n      return;\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path metricsLogDir = new Path(properties.getProperty(ConfigurationKeys.METRICS_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(metricsLogDir) && !fs.mkdirs(metricsLogDir)) {\n        LOGGER.error(\"Failed to create metric log directory for metrics \" + this.getName());\n        return;\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path metricLogFile =\n          new Path(metricsLogDir, this.id + metricsFileSuffix + \".metrics.log\");\n      boolean append = false;\n      \r\n      if (fs.exists(metricLogFile)) {\n        LOGGER.info(String.format(\"Metric log file %s already exists, appending to it\", metricLogFile));\n        append = true;\n      }\n\n      OutputStream output = append ? fs.append(metricLogFile) : fs.create(metricLogFile, true);\n      \r\n      OutputStreamReporter.Factory.newBuilder().outputTo(output).build(properties);\n      \r\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(OutputStreamEventReporter.forContext(RootMetricContext.get()).outputTo(output).build()));\n\n      LOGGER.info(\"Will start reporting metrics to directory \" + metricsLogDir);\n    } catch (IOException ioe) {\n      LOGGER.error(\"Failed to build file metric reporter for job \" + this.id, ioe);\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"M"},{"authorDate":"2020-06-17 01:04:05","commitOrder":6,"curCode":"  private void buildFileFailureEventReporter(Properties properties)\n      throws MultiReporterException {\n    if ((!Boolean.valueOf(properties.getProperty(ConfigurationKeys.FAILURE_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_FAILURE_REPORTING_FILE_ENABLED)) || !properties.containsKey(ConfigurationKeys.FAILURE_LOG_DIR_KEY))) {\n      return;\n    }\n\n    LOGGER.info(\"Reporting failure to log files\");\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path failureLogDir = new Path(properties.getProperty(ConfigurationKeys.FAILURE_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(failureLogDir) && !fs.mkdirs(failureLogDir)) {\n        throw new MetricReporterException(\"Failed to create failure log directory for metrics \" + this.getName(), ReporterType.EVENT, ReporterSinkType.FILE);\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path failureLogFile =\n          new Path(failureLogDir, this.id + metricsFileSuffix + \".failure.log\");\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(new FileFailureEventReporter(RootMetricContext.get(), fs, failureLogFile)));\n\n      LOGGER.info(\"Will start reporting failure to directory \" + failureLogDir);\n    } catch (IOException ioe) {\n      MetricReporterException e = new MetricReporterException(\"Failed to build file failure event reporter for job \" + this.id, ioe, ReporterType.EVENT, ReporterSinkType.FILE);\n      throw new MultiReporterException(\"Failed to create failure file event reporter\", Lists.newArrayList(e));\n    }\n  }\n","date":"2020-06-17 01:04:05","endLine":599,"groupId":"1039","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"buildFileFailureEventReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4e/4fa6c7cbad766bb6063495807128bd93f5ea8b.src","preCode":"  private void buildFileFailureEventReporter(Properties properties) {\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.FAILURE_REPORTING_FILE_ENABLED_KEY,\n        ConfigurationKeys.DEFAULT_FAILURE_REPORTING_FILE_ENABLED))) {\n      return;\n    }\n    LOGGER.info(\"Reporting failure to log files\");\n\n    if (!properties.containsKey(ConfigurationKeys.FAILURE_LOG_DIR_KEY)) {\n      LOGGER.error(\n          \"Not reporting failure to log files because \" + ConfigurationKeys.FAILURE_LOG_DIR_KEY + \" is undefined\");\n      return;\n    }\n\n    try {\n      String fsUri = properties.getProperty(ConfigurationKeys.FS_URI_KEY, ConfigurationKeys.LOCAL_FS_URI);\n      FileSystem fs = FileSystem.get(URI.create(fsUri), new Configuration());\n\n      \r\n      Path failureLogDir = new Path(properties.getProperty(ConfigurationKeys.FAILURE_LOG_DIR_KEY), this.getName());\n      if (!fs.exists(failureLogDir) && !fs.mkdirs(failureLogDir)) {\n        LOGGER.error(\"Failed to create failure log directory for metrics \" + this.getName());\n        return;\n      }\n\n      \r\n      String metricsFileSuffix =\n          properties.getProperty(ConfigurationKeys.METRICS_FILE_SUFFIX, ConfigurationKeys.DEFAULT_METRICS_FILE_SUFFIX);\n      if (!Strings.isNullOrEmpty(metricsFileSuffix) && !metricsFileSuffix.startsWith(\".\")) {\n        metricsFileSuffix = \".\" + metricsFileSuffix;\n      }\n\n      \r\n      Path failureLogFile =\n          new Path(failureLogDir, this.id + metricsFileSuffix + \".failure.log\");\n      this.codahaleScheduledReporters.add(this.codahaleReportersCloser\n          .register(new FileFailureEventReporter(RootMetricContext.get(), fs, failureLogFile)));\n\n      LOGGER.info(\"Will start reporting failure to directory \" + failureLogDir);\n    } catch (IOException ioe) {\n      LOGGER.error(\"Failed to build file failure event reporter for job \" + this.id, ioe);\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":562,"status":"M"}],"commitId":"c762c97c97336aa5603f571f383258a1baa7e8c3","commitMessage":"@@@[GOBBLIN-1127] Provide an option to make metric reporting instantiation failure fatal\n\nCloses #3035 from\nsv2000/metricReportInstantiationFailure\n","date":"2020-06-17 01:04:05","modifiedFileCount":"12","status":"M","submitter":"sv2000"}]
