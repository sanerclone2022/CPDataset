[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public long getHighWatermark(CommandOutput<?, ?> response, String watermarkColumn, String format)\n      throws HighWatermarkException {\n    log.info(\"Get high watermark from salesforce\");\n\n    String output;\n    Iterator<String> itr = (Iterator<String>) response.getResults().values().iterator();\n    if (itr.hasNext()) {\n      output = itr.next();\n    } else {\n      throw new HighWatermarkException(\"Failed to get high watermark from salesforce; REST response has no output\");\n    }\n\n    JsonElement element = GSON.fromJson(output, JsonObject.class);\n    long high_ts;\n    try {\n      JsonObject jsonObject = element.getAsJsonObject();\n      JsonArray jsonArray = jsonObject.getAsJsonArray(\"records\");\n      if (jsonArray.size() == 0) {\n        return -1;\n      }\n\n      String value = jsonObject.getAsJsonArray(\"records\").get(0).getAsJsonObject().get(watermarkColumn).getAsString();\n      if (format != null) {\n        SimpleDateFormat inFormat = new SimpleDateFormat(format);\n        Date date = null;\n        try {\n          date = inFormat.parse(value);\n        } catch (ParseException e) {\n          log.error(\"ParseException: \" + e.getMessage(), e);\n        }\n        SimpleDateFormat outFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        high_ts = Long.parseLong(outFormat.format(date));\n      } else {\n        high_ts = Long.parseLong(value);\n      }\n\n    } catch (Exception e) {\n      throw new HighWatermarkException(\"Failed to get high watermark from salesforce; error - \" + e.getMessage(), e);\n    }\n    return high_ts;\n  }\n","date":"2017-07-31 15:51:25","endLine":300,"groupId":"6863","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getHighWatermark","params":"(CommandOutput<?@?>response@StringwatermarkColumn@Stringformat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/44/98d726ade4e77ca59a3308fee2b73b7f921989.src","preCode":"  public long getHighWatermark(CommandOutput<?, ?> response, String watermarkColumn, String format)\n      throws HighWatermarkException {\n    log.info(\"Get high watermark from salesforce\");\n\n    String output;\n    Iterator<String> itr = (Iterator<String>) response.getResults().values().iterator();\n    if (itr.hasNext()) {\n      output = itr.next();\n    } else {\n      throw new HighWatermarkException(\"Failed to get high watermark from salesforce; REST response has no output\");\n    }\n\n    JsonElement element = GSON.fromJson(output, JsonObject.class);\n    long high_ts;\n    try {\n      JsonObject jsonObject = element.getAsJsonObject();\n      JsonArray jsonArray = jsonObject.getAsJsonArray(\"records\");\n      if (jsonArray.size() == 0) {\n        return -1;\n      }\n\n      String value = jsonObject.getAsJsonArray(\"records\").get(0).getAsJsonObject().get(watermarkColumn).getAsString();\n      if (format != null) {\n        SimpleDateFormat inFormat = new SimpleDateFormat(format);\n        Date date = null;\n        try {\n          date = inFormat.parse(value);\n        } catch (ParseException e) {\n          log.error(\"ParseException: \" + e.getMessage(), e);\n        }\n        SimpleDateFormat outFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        high_ts = Long.parseLong(outFormat.format(date));\n      } else {\n        high_ts = Long.parseLong(value);\n      }\n\n    } catch (Exception e) {\n      throw new HighWatermarkException(\"Failed to get high watermark from salesforce; error - \" + e.getMessage(), e);\n    }\n    return high_ts;\n  }\n","realPath":"gobblin-salesforce/src/main/java/org/apache/gobblin/salesforce/SalesforceExtractor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public long getCount(CommandOutput<?, ?> response) throws RecordCountException {\n    log.info(\"Get source record count from salesforce\");\n\n    String output;\n    Iterator<String> itr = (Iterator<String>) response.getResults().values().iterator();\n    if (itr.hasNext()) {\n      output = itr.next();\n    } else {\n      throw new RecordCountException(\"Failed to get count from salesforce; REST response has no output\");\n    }\n\n    JsonElement element = GSON.fromJson(output, JsonObject.class);\n    long count;\n    try {\n      JsonObject jsonObject = element.getAsJsonObject();\n      count = jsonObject.get(\"totalSize\").getAsLong();\n    } catch (Exception e) {\n      throw new RecordCountException(\"Failed to get record count from salesforce; error - \" + e.getMessage(), e);\n    }\n    return count;\n  }\n","date":"2017-07-31 15:51:25","endLine":359,"groupId":"6863","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getCount","params":"(CommandOutput<?@?>response)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/44/98d726ade4e77ca59a3308fee2b73b7f921989.src","preCode":"  public long getCount(CommandOutput<?, ?> response) throws RecordCountException {\n    log.info(\"Get source record count from salesforce\");\n\n    String output;\n    Iterator<String> itr = (Iterator<String>) response.getResults().values().iterator();\n    if (itr.hasNext()) {\n      output = itr.next();\n    } else {\n      throw new RecordCountException(\"Failed to get count from salesforce; REST response has no output\");\n    }\n\n    JsonElement element = GSON.fromJson(output, JsonObject.class);\n    long count;\n    try {\n      JsonObject jsonObject = element.getAsJsonObject();\n      count = jsonObject.get(\"totalSize\").getAsLong();\n    } catch (Exception e) {\n      throw new RecordCountException(\"Failed to get record count from salesforce; error - \" + e.getMessage(), e);\n    }\n    return count;\n  }\n","realPath":"gobblin-salesforce/src/main/java/org/apache/gobblin/salesforce/SalesforceExtractor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2019-12-12 14:13:51","commitOrder":2,"curCode":"  public long getHighWatermark(CommandOutput<?, ?> response, String watermarkColumn, String format)\n      throws HighWatermarkException {\n    log.info(\"Get high watermark from salesforce\");\n\n    String output;\n    Iterator<String> itr = (Iterator<String>) response.getResults().values().iterator();\n    if (itr.hasNext()) {\n      output = itr.next();\n    } else {\n      throw new HighWatermarkException(\"Failed to get high watermark from salesforce; REST response has no output\");\n    }\n\n    JsonElement element = GSON.fromJson(output, JsonObject.class);\n    long highTs;\n    try {\n      JsonObject jsonObject = element.getAsJsonObject();\n      JsonArray jsonArray = jsonObject.getAsJsonArray(\"records\");\n      if (jsonArray.size() == 0) {\n        return -1;\n      }\n\n      String value = jsonObject.getAsJsonArray(\"records\").get(0).getAsJsonObject().get(watermarkColumn).getAsString();\n      if (format != null) {\n        SimpleDateFormat inFormat = new SimpleDateFormat(format);\n        Date date = null;\n        try {\n          date = inFormat.parse(value);\n        } catch (ParseException e) {\n          log.error(\"ParseException: \" + e.getMessage(), e);\n        }\n        SimpleDateFormat outFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        highTs = Long.parseLong(outFormat.format(date));\n      } else {\n        highTs = Long.parseLong(value);\n      }\n\n    } catch (Exception e) {\n      throw new HighWatermarkException(\"Failed to get high watermark from salesforce; error - \" + e.getMessage(), e);\n    }\n    return highTs;\n  }\n","date":"2019-12-12 14:13:51","endLine":331,"groupId":"10911","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getHighWatermark","params":"(CommandOutput<?@?>response@StringwatermarkColumn@Stringformat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/36/186e5b31463cb48c3d0d443ddd75f600d19249.src","preCode":"  public long getHighWatermark(CommandOutput<?, ?> response, String watermarkColumn, String format)\n      throws HighWatermarkException {\n    log.info(\"Get high watermark from salesforce\");\n\n    String output;\n    Iterator<String> itr = (Iterator<String>) response.getResults().values().iterator();\n    if (itr.hasNext()) {\n      output = itr.next();\n    } else {\n      throw new HighWatermarkException(\"Failed to get high watermark from salesforce; REST response has no output\");\n    }\n\n    JsonElement element = GSON.fromJson(output, JsonObject.class);\n    long high_ts;\n    try {\n      JsonObject jsonObject = element.getAsJsonObject();\n      JsonArray jsonArray = jsonObject.getAsJsonArray(\"records\");\n      if (jsonArray.size() == 0) {\n        return -1;\n      }\n\n      String value = jsonObject.getAsJsonArray(\"records\").get(0).getAsJsonObject().get(watermarkColumn).getAsString();\n      if (format != null) {\n        SimpleDateFormat inFormat = new SimpleDateFormat(format);\n        Date date = null;\n        try {\n          date = inFormat.parse(value);\n        } catch (ParseException e) {\n          log.error(\"ParseException: \" + e.getMessage(), e);\n        }\n        SimpleDateFormat outFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n        high_ts = Long.parseLong(outFormat.format(date));\n      } else {\n        high_ts = Long.parseLong(value);\n      }\n\n    } catch (Exception e) {\n      throw new HighWatermarkException(\"Failed to get high watermark from salesforce; error - \" + e.getMessage(), e);\n    }\n    return high_ts;\n  }\n","realPath":"gobblin-salesforce/src/main/java/org/apache/gobblin/salesforce/SalesforceExtractor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public long getCount(CommandOutput<?, ?> response) throws RecordCountException {\n    log.info(\"Get source record count from salesforce\");\n\n    String output;\n    Iterator<String> itr = (Iterator<String>) response.getResults().values().iterator();\n    if (itr.hasNext()) {\n      output = itr.next();\n    } else {\n      throw new RecordCountException(\"Failed to get count from salesforce; REST response has no output\");\n    }\n\n    JsonElement element = GSON.fromJson(output, JsonObject.class);\n    long count;\n    try {\n      JsonObject jsonObject = element.getAsJsonObject();\n      count = jsonObject.get(\"totalSize\").getAsLong();\n    } catch (Exception e) {\n      throw new RecordCountException(\"Failed to get record count from salesforce; error - \" + e.getMessage(), e);\n    }\n    return count;\n  }\n","date":"2017-07-31 15:51:25","endLine":359,"groupId":"10911","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getCount","params":"(CommandOutput<?@?>response)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/44/98d726ade4e77ca59a3308fee2b73b7f921989.src","preCode":"  public long getCount(CommandOutput<?, ?> response) throws RecordCountException {\n    log.info(\"Get source record count from salesforce\");\n\n    String output;\n    Iterator<String> itr = (Iterator<String>) response.getResults().values().iterator();\n    if (itr.hasNext()) {\n      output = itr.next();\n    } else {\n      throw new RecordCountException(\"Failed to get count from salesforce; REST response has no output\");\n    }\n\n    JsonElement element = GSON.fromJson(output, JsonObject.class);\n    long count;\n    try {\n      JsonObject jsonObject = element.getAsJsonObject();\n      count = jsonObject.get(\"totalSize\").getAsLong();\n    } catch (Exception e) {\n      throw new RecordCountException(\"Failed to get record count from salesforce; error - \" + e.getMessage(), e);\n    }\n    return count;\n  }\n","realPath":"gobblin-salesforce/src/main/java/org/apache/gobblin/salesforce/SalesforceExtractor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":339,"status":"N"}],"commitId":"7d94e4745c71f4b01c61828216fc90c626a9521a","commitMessage":"@@@[GOBBLIN-865] Add feature that enables PK-chunking in partition\n\nCloses #2722 from arekusuri/GOBBLIN-865-pk-\nchunking-partition\n","date":"2019-12-12 14:13:51","modifiedFileCount":"4","status":"M","submitter":"Alex Li"}]
