[{"authorTime":"2019-05-30 02:09:52","codes":[{"authorDate":"2018-12-15 02:47:27","commitOrder":4,"curCode":"  public void testSuccessfulDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator6 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator7 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever.getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(),\n        Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 0);\n    Assert.assertEquals(this.jobToDag.size(), 0);\n    Assert.assertEquals(this.dagToJobs.size(), 0);\n    Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n  }\n","date":"2018-12-15 02:47:27","endLine":207,"groupId":"3243","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSuccessfulDag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/62/0c2eefe3d42c43276f4cdd6da7ec57168a7b2d.src","preCode":"  public void testSuccessfulDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator6 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator7 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever.getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(),\n        Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 0);\n    Assert.assertEquals(this.jobToDag.size(), 0);\n    Assert.assertEquals(this.dagToJobs.size(), 0);\n    Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"NB"},{"authorDate":"2019-05-30 02:09:52","commitOrder":4,"curCode":"  public void testSucceedAfterRetry() throws Exception {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING), true);\n    Iterator<JobStatus> jobStatusIterator3 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator4 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator6 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator7 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever.getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(),\n        Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 0);\n    Assert.assertEquals(this.jobToDag.size(), 0);\n    Assert.assertEquals(this.dagToJobs.size(), 0);\n    Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n  }\n","date":"2019-05-30 02:09:52","endLine":400,"groupId":"3245","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSucceedAfterRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a6/7e5dd2dbf00b923e6c9c7f86df7e4d5ac2ab32.src","preCode":"  public void testSucceedAfterRetry() throws Exception {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING), true);\n    Iterator<JobStatus> jobStatusIterator3 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator4 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator6 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator7 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever.getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(),\n        Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 0);\n    Assert.assertEquals(this.jobToDag.size(), 0);\n    Assert.assertEquals(this.dagToJobs.size(), 0);\n    Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"B"}],"commitId":"1325688d34e5d7f6e8cdda4390255e2b96781564","commitMessage":"@@@[GOBBLIN-775] Add job level retries for gobblin service\n\nCloses #2640 from jack-moseley/gaas-job-retry\n","date":"2019-05-30 02:09:52","modifiedFileCount":"10","status":"M","submitter":"Jack Moseley"},{"authorTime":"2019-05-30 02:09:52","codes":[{"authorDate":"2021-06-16 02:44:42","commitOrder":5,"curCode":"  public void testSuccessfulDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator6 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator7 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever.getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(),\n        Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dags.get(dagId).getNodes().get(0).getValue().getCurrentAttempts(), 1);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 0);\n    Assert.assertEquals(this.jobToDag.size(), 0);\n    Assert.assertEquals(this.dagToJobs.size(), 0);\n    Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n  }\n","date":"2021-06-16 02:44:42","endLine":239,"groupId":"101088","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSuccessfulDag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2b/7044f92e4533a1bd24d8fb4e2e658734935134.src","preCode":"  public void testSuccessfulDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator6 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator7 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever.getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(),\n        Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 0);\n    Assert.assertEquals(this.jobToDag.size(), 0);\n    Assert.assertEquals(this.dagToJobs.size(), 0);\n    Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2019-05-30 02:09:52","commitOrder":5,"curCode":"  public void testSucceedAfterRetry() throws Exception {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING), true);\n    Iterator<JobStatus> jobStatusIterator3 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator4 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator6 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator7 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever.getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(),\n        Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 0);\n    Assert.assertEquals(this.jobToDag.size(), 0);\n    Assert.assertEquals(this.dagToJobs.size(), 0);\n    Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n  }\n","date":"2019-05-30 02:09:52","endLine":400,"groupId":"101088","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSucceedAfterRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a6/7e5dd2dbf00b923e6c9c7f86df7e4d5ac2ab32.src","preCode":"  public void testSucceedAfterRetry() throws Exception {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING), true);\n    Iterator<JobStatus> jobStatusIterator3 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator4 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator6 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator7 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever.getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(),\n        Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 0);\n    Assert.assertEquals(this.jobToDag.size(), 0);\n    Assert.assertEquals(this.dagToJobs.size(), 0);\n    Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"N"}],"commitId":"1e03329332a14277b7507e75127ffa5b30377757","commitMessage":"@@@[GOBBLIN-1468] reset currentAttempt counter on resume flow\n\nCloses #3308 from\narjun4084346/resetCurrentAttemptOnFlowResume\n","date":"2021-06-16 02:44:42","modifiedFileCount":"2","status":"M","submitter":"Arjun"}]
