[{"authorTime":"2019-05-21 11:55:36","codes":[{"authorDate":"2017-09-21 05:25:02","commitOrder":3,"curCode":"  public void testFlushControlMessages() throws Exception {\n    MyExtractor extractor = new MyExtractor(new StreamEntity[]{new RecordEnvelope<>(\"a\"),\n        FlushControlMessage.builder().flushReason(\"flush1\").build(), new RecordEnvelope<>(\"b\"),\n        FlushControlMessage.builder().flushReason(\"flush2\").build()});\n    MyConverter converter = new MyConverter();\n    MyFlushDataWriter writer = new MyFlushDataWriter();\n\n    Task task = setupTask(extractor, writer, converter);\n\n    task.run();\n    task.commit();\n    Assert.assertEquals(task.getTaskState().getWorkingState(), WorkUnitState.WorkingState.SUCCESSFUL);\n\n    Assert.assertEquals(converter.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(converter.messages, Lists.newArrayList(\n        FlushControlMessage.builder().flushReason(\"flush1\").build(),\n        FlushControlMessage.builder().flushReason(\"flush2\").build()));\n\n    Assert.assertEquals(writer.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(writer.flush_messages, Lists.newArrayList(\"flush called\", \"flush called\"));\n  }\n","date":"2017-09-21 05:25:02","endLine":118,"groupId":"1791","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlushControlMessages","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/62/0e40135a70118758fae3572f4f44c5c7815422.src","preCode":"  public void testFlushControlMessages() throws Exception {\n    MyExtractor extractor = new MyExtractor(new StreamEntity[]{new RecordEnvelope<>(\"a\"),\n        FlushControlMessage.builder().flushReason(\"flush1\").build(), new RecordEnvelope<>(\"b\"),\n        FlushControlMessage.builder().flushReason(\"flush2\").build()});\n    MyConverter converter = new MyConverter();\n    MyFlushDataWriter writer = new MyFlushDataWriter();\n\n    Task task = setupTask(extractor, writer, converter);\n\n    task.run();\n    task.commit();\n    Assert.assertEquals(task.getTaskState().getWorkingState(), WorkUnitState.WorkingState.SUCCESSFUL);\n\n    Assert.assertEquals(converter.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(converter.messages, Lists.newArrayList(\n        FlushControlMessage.builder().flushReason(\"flush1\").build(),\n        FlushControlMessage.builder().flushReason(\"flush2\").build()));\n\n    Assert.assertEquals(writer.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(writer.flush_messages, Lists.newArrayList(\"flush called\", \"flush called\"));\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/TestRecordStream.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"NB"},{"authorDate":"2019-05-21 11:55:36","commitOrder":3,"curCode":"  public void testFlushFailure() throws Exception {\n    FlushAckable flushAckable1 = new FlushAckable();\n    FlushAckable flushAckable2 = new FlushAckable();\n\n    MyExtractor extractor = new MyExtractor(new StreamEntity[]{new RecordEnvelope<>(\"a\"),\n        FlushControlMessage.builder().flushReason(\"flush1\").build().addCallBack(flushAckable1), new RecordEnvelope<>(\"b\"),\n        FlushControlMessage.builder().flushReason(\"flushFail1\").build().addCallBack(flushAckable2)});\n    MyConverter converter = new MyConverter();\n    MyFlushDataWriter writer = new MyFlushDataWriter();\n\n    Task task = setupTask(extractor, writer, converter);\n\n    task.run();\n\n    \r\n    Throwable error = flushAckable1.waitForAck();\n    Assert.assertNull(error);\n\n    error = flushAckable2.waitForAck();\n    Assert.assertNotNull(error);\n\n    task.commit();\n    Assert.assertEquals(task.getTaskState().getWorkingState(), WorkUnitState.WorkingState.SUCCESSFUL);\n\n    Assert.assertEquals(converter.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(converter.messages, Lists.newArrayList(\n        FlushControlMessage.builder().flushReason(\"flush1\").build(),\n        FlushControlMessage.builder().flushReason(\"flushFail1\").build()));\n\n    Assert.assertEquals(writer.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(writer.flush_messages, Lists.newArrayList(\"flush called\"));\n  }\n","date":"2019-05-21 11:55:36","endLine":154,"groupId":"1792","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFlushFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d4/8349add85218a160c557d024199e19f4cad559.src","preCode":"  public void testFlushFailure() throws Exception {\n    FlushAckable flushAckable1 = new FlushAckable();\n    FlushAckable flushAckable2 = new FlushAckable();\n\n    MyExtractor extractor = new MyExtractor(new StreamEntity[]{new RecordEnvelope<>(\"a\"),\n        FlushControlMessage.builder().flushReason(\"flush1\").build().addCallBack(flushAckable1), new RecordEnvelope<>(\"b\"),\n        FlushControlMessage.builder().flushReason(\"flushFail1\").build().addCallBack(flushAckable2)});\n    MyConverter converter = new MyConverter();\n    MyFlushDataWriter writer = new MyFlushDataWriter();\n\n    Task task = setupTask(extractor, writer, converter);\n\n    task.run();\n\n    \r\n    Throwable error = flushAckable1.waitForAck();\n    Assert.assertNull(error);\n\n    error = flushAckable2.waitForAck();\n    Assert.assertNotNull(error);\n\n    task.commit();\n    Assert.assertEquals(task.getTaskState().getWorkingState(), WorkUnitState.WorkingState.SUCCESSFUL);\n\n    Assert.assertEquals(converter.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(converter.messages, Lists.newArrayList(\n        FlushControlMessage.builder().flushReason(\"flush1\").build(),\n        FlushControlMessage.builder().flushReason(\"flushFail1\").build()));\n\n    Assert.assertEquals(writer.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(writer.flush_messages, Lists.newArrayList(\"flush called\"));\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/TestRecordStream.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"6c327bea2d3da1122c349ad698903be1c35dcf82","commitMessage":"@@@[GOBBLIN-774] Send nack when a control message handler fails in Fork\n\nCloses #2639 from\nhtran1/control_message_nack_in_fork\n","date":"2019-05-21 11:55:36","modifiedFileCount":"3","status":"M","submitter":"Hung Tran"},{"authorTime":"2019-06-03 22:09:27","codes":[{"authorDate":"2017-09-21 05:25:02","commitOrder":4,"curCode":"  public void testFlushControlMessages() throws Exception {\n    MyExtractor extractor = new MyExtractor(new StreamEntity[]{new RecordEnvelope<>(\"a\"),\n        FlushControlMessage.builder().flushReason(\"flush1\").build(), new RecordEnvelope<>(\"b\"),\n        FlushControlMessage.builder().flushReason(\"flush2\").build()});\n    MyConverter converter = new MyConverter();\n    MyFlushDataWriter writer = new MyFlushDataWriter();\n\n    Task task = setupTask(extractor, writer, converter);\n\n    task.run();\n    task.commit();\n    Assert.assertEquals(task.getTaskState().getWorkingState(), WorkUnitState.WorkingState.SUCCESSFUL);\n\n    Assert.assertEquals(converter.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(converter.messages, Lists.newArrayList(\n        FlushControlMessage.builder().flushReason(\"flush1\").build(),\n        FlushControlMessage.builder().flushReason(\"flush2\").build()));\n\n    Assert.assertEquals(writer.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(writer.flush_messages, Lists.newArrayList(\"flush called\", \"flush called\"));\n  }\n","date":"2017-09-21 05:25:02","endLine":118,"groupId":"10713","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlushControlMessages","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/62/0e40135a70118758fae3572f4f44c5c7815422.src","preCode":"  public void testFlushControlMessages() throws Exception {\n    MyExtractor extractor = new MyExtractor(new StreamEntity[]{new RecordEnvelope<>(\"a\"),\n        FlushControlMessage.builder().flushReason(\"flush1\").build(), new RecordEnvelope<>(\"b\"),\n        FlushControlMessage.builder().flushReason(\"flush2\").build()});\n    MyConverter converter = new MyConverter();\n    MyFlushDataWriter writer = new MyFlushDataWriter();\n\n    Task task = setupTask(extractor, writer, converter);\n\n    task.run();\n    task.commit();\n    Assert.assertEquals(task.getTaskState().getWorkingState(), WorkUnitState.WorkingState.SUCCESSFUL);\n\n    Assert.assertEquals(converter.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(converter.messages, Lists.newArrayList(\n        FlushControlMessage.builder().flushReason(\"flush1\").build(),\n        FlushControlMessage.builder().flushReason(\"flush2\").build()));\n\n    Assert.assertEquals(writer.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(writer.flush_messages, Lists.newArrayList(\"flush called\", \"flush called\"));\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/TestRecordStream.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"N"},{"authorDate":"2019-06-03 22:09:27","commitOrder":4,"curCode":"  public void testFlushFailure() throws Exception {\n    FlushAckable flushAckable1 = new FlushAckable();\n    FlushAckable flushAckable2 = new FlushAckable();\n\n    MyExtractor extractor = new MyExtractor(new StreamEntity[]{new RecordEnvelope<>(\"a\"),\n        FlushControlMessage.builder().flushReason(\"flush1\").build().addCallBack(flushAckable1), new RecordEnvelope<>(\"b\"),\n        FlushControlMessage.builder().flushReason(\"flushFail1\").build().addCallBack(flushAckable2)});\n    MyConverter converter = new MyConverter();\n    MyFlushDataWriter writer = new MyFlushDataWriter();\n\n    Task task = setupTask(extractor, writer, converter);\n\n    task.run();\n\n    \r\n    Throwable error = flushAckable1.waitForAck();\n    Assert.assertNull(error);\n\n    error = flushAckable2.waitForAck();\n    Assert.assertNotNull(error);\n\n    task.commit();\n    Assert.assertEquals(task.getTaskState().getWorkingState(), WorkUnitState.WorkingState.FAILED);\n\n    Assert.assertEquals(converter.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(converter.messages, Lists.newArrayList(\n        FlushControlMessage.builder().flushReason(\"flush1\").build(),\n        FlushControlMessage.builder().flushReason(\"flushFail1\").build()));\n\n    Assert.assertEquals(writer.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(writer.flush_messages, Lists.newArrayList(\"flush called\"));\n  }\n","date":"2019-06-03 22:09:27","endLine":155,"groupId":"10713","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testFlushFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ab/b8f8ec715c1cb3baa760c9a98f9a38ea0314ab.src","preCode":"  public void testFlushFailure() throws Exception {\n    FlushAckable flushAckable1 = new FlushAckable();\n    FlushAckable flushAckable2 = new FlushAckable();\n\n    MyExtractor extractor = new MyExtractor(new StreamEntity[]{new RecordEnvelope<>(\"a\"),\n        FlushControlMessage.builder().flushReason(\"flush1\").build().addCallBack(flushAckable1), new RecordEnvelope<>(\"b\"),\n        FlushControlMessage.builder().flushReason(\"flushFail1\").build().addCallBack(flushAckable2)});\n    MyConverter converter = new MyConverter();\n    MyFlushDataWriter writer = new MyFlushDataWriter();\n\n    Task task = setupTask(extractor, writer, converter);\n\n    task.run();\n\n    \r\n    Throwable error = flushAckable1.waitForAck();\n    Assert.assertNull(error);\n\n    error = flushAckable2.waitForAck();\n    Assert.assertNotNull(error);\n\n    task.commit();\n    Assert.assertEquals(task.getTaskState().getWorkingState(), WorkUnitState.WorkingState.SUCCESSFUL);\n\n    Assert.assertEquals(converter.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(converter.messages, Lists.newArrayList(\n        FlushControlMessage.builder().flushReason(\"flush1\").build(),\n        FlushControlMessage.builder().flushReason(\"flushFail1\").build()));\n\n    Assert.assertEquals(writer.records, Lists.newArrayList(\"a\", \"b\"));\n    Assert.assertEquals(writer.flush_messages, Lists.newArrayList(\"flush called\"));\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/TestRecordStream.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"8cae30790c0a6a71a61d8b83424d733cdffb881b","commitMessage":"@@@[GOBBLIN-791] Fix hanging stream on error in asynchronous execution model\n\nCloses #2659 from htran1/reactivex_stop_extractor\n","date":"2019-06-03 22:09:27","modifiedFileCount":"4","status":"M","submitter":"Hung Tran"}]
