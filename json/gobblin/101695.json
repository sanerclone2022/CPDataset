[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testFlattenSchemaDDLandDML() throws Exception {\n    String dbName = \"testdb\";\n    String tableName = \"testtable\";\n    String tableSdLoc = \"/tmp/testtable\";\n\n    this.hiveMetastoreTestUtils.getLocalMetastoreClient().dropDatabase(dbName, false, true, true);\n\n    Table table = this.hiveMetastoreTestUtils.createTestTable(dbName, tableName, tableSdLoc, Optional.<String> absent());\n    Schema schema = ConversionHiveTestUtils.readSchemaFromJsonFile(resourceDir, \"recordWithinRecordWithinRecord_nested.json\");\n    WorkUnitState wus = ConversionHiveTestUtils.createWus(dbName, tableName, 0);\n\n    try (HiveAvroToFlattenedOrcConverter converter = new HiveAvroToFlattenedOrcConverter();) {\n\n      Config config = ConfigFactory.parseMap(\n          ImmutableMap.<String, String>builder().put(\"destinationFormats\", \"flattenedOrc\")\n              .put(\"flattenedOrc.destination.dbName\", dbName)\n              .put(\"flattenedOrc.destination.tableName\", tableName + \"_orc\")\n              .put(\"flattenedOrc.destination.dataPath\", \"file:\" + tableSdLoc + \"_orc\").build());\n\n      ConvertibleHiveDataset cd = ConvertibleHiveDatasetTest.createTestConvertibleDataset(config);\n\n      List<QueryBasedHiveConversionEntity> conversionEntities =\n          Lists.newArrayList(converter.convertRecord(converter.convertSchema(schema, wus),\n              new QueryBasedHiveConversionEntity(cd, new SchemaAwareHiveTable(table, schema)), wus));\n\n      Assert.assertEquals(conversionEntities.size(), 1, \"Only one query entity should be returned\");\n\n      QueryBasedHiveConversionEntity queryBasedHiveConversionEntity = conversionEntities.get(0);\n      List<String> queries = queryBasedHiveConversionEntity.getQueries();\n\n      Assert.assertEquals(queries.size(), 4, \"4 DDL and one DML query should be returned\");\n\n      \r\n      \r\n      String actualDDLQuery = StringUtils.substringAfter(\"(\", queries.get(0).trim());\n      String actualDMLQuery = StringUtils.substringAfter(\"SELECT\", queries.get(0).trim());\n      String expectedDDLQuery = StringUtils.substringAfter(\"(\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_flattened.ddl\"));\n      String expectedDMLQuery = StringUtils.substringAfter(\"SELECT\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_flattened.dml\"));\n\n      Assert.assertEquals(actualDDLQuery, expectedDDLQuery);\n      Assert.assertEquals(actualDMLQuery, expectedDMLQuery);\n    }\n\n  }\n","date":"2017-07-31 15:51:25","endLine":109,"groupId":"762","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlattenSchemaDDLandDML","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/7e/388419c3d905b06ad9e1a96f24c5d4658d4112.src","preCode":"  public void testFlattenSchemaDDLandDML() throws Exception {\n    String dbName = \"testdb\";\n    String tableName = \"testtable\";\n    String tableSdLoc = \"/tmp/testtable\";\n\n    this.hiveMetastoreTestUtils.getLocalMetastoreClient().dropDatabase(dbName, false, true, true);\n\n    Table table = this.hiveMetastoreTestUtils.createTestTable(dbName, tableName, tableSdLoc, Optional.<String> absent());\n    Schema schema = ConversionHiveTestUtils.readSchemaFromJsonFile(resourceDir, \"recordWithinRecordWithinRecord_nested.json\");\n    WorkUnitState wus = ConversionHiveTestUtils.createWus(dbName, tableName, 0);\n\n    try (HiveAvroToFlattenedOrcConverter converter = new HiveAvroToFlattenedOrcConverter();) {\n\n      Config config = ConfigFactory.parseMap(\n          ImmutableMap.<String, String>builder().put(\"destinationFormats\", \"flattenedOrc\")\n              .put(\"flattenedOrc.destination.dbName\", dbName)\n              .put(\"flattenedOrc.destination.tableName\", tableName + \"_orc\")\n              .put(\"flattenedOrc.destination.dataPath\", \"file:\" + tableSdLoc + \"_orc\").build());\n\n      ConvertibleHiveDataset cd = ConvertibleHiveDatasetTest.createTestConvertibleDataset(config);\n\n      List<QueryBasedHiveConversionEntity> conversionEntities =\n          Lists.newArrayList(converter.convertRecord(converter.convertSchema(schema, wus),\n              new QueryBasedHiveConversionEntity(cd, new SchemaAwareHiveTable(table, schema)), wus));\n\n      Assert.assertEquals(conversionEntities.size(), 1, \"Only one query entity should be returned\");\n\n      QueryBasedHiveConversionEntity queryBasedHiveConversionEntity = conversionEntities.get(0);\n      List<String> queries = queryBasedHiveConversionEntity.getQueries();\n\n      Assert.assertEquals(queries.size(), 4, \"4 DDL and one DML query should be returned\");\n\n      \r\n      \r\n      String actualDDLQuery = StringUtils.substringAfter(\"(\", queries.get(0).trim());\n      String actualDMLQuery = StringUtils.substringAfter(\"SELECT\", queries.get(0).trim());\n      String expectedDDLQuery = StringUtils.substringAfter(\"(\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_flattened.ddl\"));\n      String expectedDMLQuery = StringUtils.substringAfter(\"SELECT\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_flattened.dml\"));\n\n      Assert.assertEquals(actualDDLQuery, expectedDDLQuery);\n      Assert.assertEquals(actualDMLQuery, expectedDMLQuery);\n    }\n\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/conversion/hive/converter/HiveAvroToOrcConverterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testNestedSchemaDDLandDML() throws Exception {\n    String dbName = \"testdb\";\n    String tableName = \"testtable\";\n    String tableSdLoc = \"/tmp/testtable\";\n\n    this.hiveMetastoreTestUtils.getLocalMetastoreClient().dropDatabase(dbName, false, true, true);\n\n    Table table = this.hiveMetastoreTestUtils.createTestTable(dbName, tableName, tableSdLoc, Optional.<String> absent());\n    Schema schema = ConversionHiveTestUtils.readSchemaFromJsonFile(resourceDir, \"recordWithinRecordWithinRecord_nested.json\");\n    WorkUnitState wus = ConversionHiveTestUtils.createWus(dbName, tableName, 0);\n    wus.getJobState().setProp(\"orc.table.flatten.schema\", \"false\");\n\n    try (HiveAvroToNestedOrcConverter converter = new HiveAvroToNestedOrcConverter();) {\n\n      Config config = ConfigFactory.parseMap(ImmutableMap.<String, String> builder()\n          .put(\"destinationFormats\", \"nestedOrc\")\n          .put(\"nestedOrc.destination.tableName\",\"testtable_orc_nested\")\n          .put(\"nestedOrc.destination.dbName\",dbName)\n          .put(\"nestedOrc.destination.dataPath\",\"file:/tmp/testtable_orc_nested\")\n          .build());\n\n      ConvertibleHiveDataset cd = ConvertibleHiveDatasetTest.createTestConvertibleDataset(config);\n\n      List<QueryBasedHiveConversionEntity> conversionEntities =\n          Lists.newArrayList(converter.convertRecord(converter.convertSchema(schema, wus), new QueryBasedHiveConversionEntity(cd , new SchemaAwareHiveTable(table, schema)), wus));\n\n      Assert.assertEquals(conversionEntities.size(), 1, \"Only one query entity should be returned\");\n\n      QueryBasedHiveConversionEntity queryBasedHiveConversionEntity = conversionEntities.get(0);\n      List<String> queries = queryBasedHiveConversionEntity.getQueries();\n\n      Assert.assertEquals(queries.size(), 4, \"4 DDL and one DML query should be returned\");\n\n      \r\n      \r\n      String actualDDLQuery = StringUtils.substringAfter(\"(\", queries.get(0).trim());\n      String actualDMLQuery = StringUtils.substringAfter(\"SELECT\", queries.get(0).trim());\n      String expectedDDLQuery = StringUtils.substringAfter(\"(\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_nested.ddl\"));\n      String expectedDMLQuery = StringUtils.substringAfter(\"SELECT\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_nested.dml\"));\n\n      Assert.assertEquals(actualDDLQuery, expectedDDLQuery);\n      Assert.assertEquals(actualDMLQuery, expectedDMLQuery);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":161,"groupId":"5360","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedSchemaDDLandDML","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/7e/388419c3d905b06ad9e1a96f24c5d4658d4112.src","preCode":"  public void testNestedSchemaDDLandDML() throws Exception {\n    String dbName = \"testdb\";\n    String tableName = \"testtable\";\n    String tableSdLoc = \"/tmp/testtable\";\n\n    this.hiveMetastoreTestUtils.getLocalMetastoreClient().dropDatabase(dbName, false, true, true);\n\n    Table table = this.hiveMetastoreTestUtils.createTestTable(dbName, tableName, tableSdLoc, Optional.<String> absent());\n    Schema schema = ConversionHiveTestUtils.readSchemaFromJsonFile(resourceDir, \"recordWithinRecordWithinRecord_nested.json\");\n    WorkUnitState wus = ConversionHiveTestUtils.createWus(dbName, tableName, 0);\n    wus.getJobState().setProp(\"orc.table.flatten.schema\", \"false\");\n\n    try (HiveAvroToNestedOrcConverter converter = new HiveAvroToNestedOrcConverter();) {\n\n      Config config = ConfigFactory.parseMap(ImmutableMap.<String, String> builder()\n          .put(\"destinationFormats\", \"nestedOrc\")\n          .put(\"nestedOrc.destination.tableName\",\"testtable_orc_nested\")\n          .put(\"nestedOrc.destination.dbName\",dbName)\n          .put(\"nestedOrc.destination.dataPath\",\"file:/tmp/testtable_orc_nested\")\n          .build());\n\n      ConvertibleHiveDataset cd = ConvertibleHiveDatasetTest.createTestConvertibleDataset(config);\n\n      List<QueryBasedHiveConversionEntity> conversionEntities =\n          Lists.newArrayList(converter.convertRecord(converter.convertSchema(schema, wus), new QueryBasedHiveConversionEntity(cd , new SchemaAwareHiveTable(table, schema)), wus));\n\n      Assert.assertEquals(conversionEntities.size(), 1, \"Only one query entity should be returned\");\n\n      QueryBasedHiveConversionEntity queryBasedHiveConversionEntity = conversionEntities.get(0);\n      List<String> queries = queryBasedHiveConversionEntity.getQueries();\n\n      Assert.assertEquals(queries.size(), 4, \"4 DDL and one DML query should be returned\");\n\n      \r\n      \r\n      String actualDDLQuery = StringUtils.substringAfter(\"(\", queries.get(0).trim());\n      String actualDMLQuery = StringUtils.substringAfter(\"SELECT\", queries.get(0).trim());\n      String expectedDDLQuery = StringUtils.substringAfter(\"(\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_nested.ddl\"));\n      String expectedDMLQuery = StringUtils.substringAfter(\"SELECT\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_nested.dml\"));\n\n      Assert.assertEquals(actualDDLQuery, expectedDDLQuery);\n      Assert.assertEquals(actualDMLQuery, expectedDMLQuery);\n    }\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/conversion/hive/converter/HiveAvroToOrcConverterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-09-22 07:53:52","codes":[{"authorDate":"2017-09-22 07:53:52","commitOrder":2,"curCode":"  public void testFlattenSchemaDDLandDML() throws Exception {\n    String dbName = \"testdb\";\n    String tableName = \"testtable\";\n    String tableSdLoc = \"/tmp/testtable\";\n\n    this.hiveMetastoreTestUtils.getLocalMetastoreClient().dropDatabase(dbName, false, true, true);\n\n    Table table = this.hiveMetastoreTestUtils.createTestAvroTable(dbName, tableName, tableSdLoc, Optional.<String> absent());\n    Schema schema = ConversionHiveTestUtils.readSchemaFromJsonFile(resourceDir, \"recordWithinRecordWithinRecord_nested.json\");\n    WorkUnitState wus = ConversionHiveTestUtils.createWus(dbName, tableName, 0);\n\n    try (HiveAvroToFlattenedOrcConverter converter = new HiveAvroToFlattenedOrcConverter();) {\n\n      Config config = ConfigFactory.parseMap(\n          ImmutableMap.<String, String>builder().put(\"destinationFormats\", \"flattenedOrc\")\n              .put(\"flattenedOrc.destination.dbName\", dbName)\n              .put(\"flattenedOrc.destination.tableName\", tableName + \"_orc\")\n              .put(\"flattenedOrc.destination.dataPath\", \"file:\" + tableSdLoc + \"_orc\").build());\n\n      ConvertibleHiveDataset cd = ConvertibleHiveDatasetTest.createTestConvertibleDataset(config);\n\n      List<QueryBasedHiveConversionEntity> conversionEntities =\n          Lists.newArrayList(converter.convertRecord(converter.convertSchema(schema, wus),\n              new QueryBasedHiveConversionEntity(cd, new SchemaAwareHiveTable(table, schema)), wus));\n\n      Assert.assertEquals(conversionEntities.size(), 1, \"Only one query entity should be returned\");\n\n      QueryBasedHiveConversionEntity queryBasedHiveConversionEntity = conversionEntities.get(0);\n      List<String> queries = queryBasedHiveConversionEntity.getQueries();\n\n      Assert.assertEquals(queries.size(), 4, \"4 DDL and one DML query should be returned\");\n\n      \r\n      \r\n      String actualDDLQuery = StringUtils.substringAfter(\"(\", queries.get(0).trim());\n      String actualDMLQuery = StringUtils.substringAfter(\"SELECT\", queries.get(0).trim());\n      String expectedDDLQuery = StringUtils.substringAfter(\"(\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_flattened.ddl\"));\n      String expectedDMLQuery = StringUtils.substringAfter(\"SELECT\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_flattened.dml\"));\n\n      Assert.assertEquals(actualDDLQuery, expectedDDLQuery);\n      Assert.assertEquals(actualDMLQuery, expectedDMLQuery);\n    }\n\n  }\n","date":"2017-09-22 07:53:52","endLine":109,"groupId":"762","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFlattenSchemaDDLandDML","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/89/3e13c175ae45d91571d9ec7b8552a3ac6056ef.src","preCode":"  public void testFlattenSchemaDDLandDML() throws Exception {\n    String dbName = \"testdb\";\n    String tableName = \"testtable\";\n    String tableSdLoc = \"/tmp/testtable\";\n\n    this.hiveMetastoreTestUtils.getLocalMetastoreClient().dropDatabase(dbName, false, true, true);\n\n    Table table = this.hiveMetastoreTestUtils.createTestTable(dbName, tableName, tableSdLoc, Optional.<String> absent());\n    Schema schema = ConversionHiveTestUtils.readSchemaFromJsonFile(resourceDir, \"recordWithinRecordWithinRecord_nested.json\");\n    WorkUnitState wus = ConversionHiveTestUtils.createWus(dbName, tableName, 0);\n\n    try (HiveAvroToFlattenedOrcConverter converter = new HiveAvroToFlattenedOrcConverter();) {\n\n      Config config = ConfigFactory.parseMap(\n          ImmutableMap.<String, String>builder().put(\"destinationFormats\", \"flattenedOrc\")\n              .put(\"flattenedOrc.destination.dbName\", dbName)\n              .put(\"flattenedOrc.destination.tableName\", tableName + \"_orc\")\n              .put(\"flattenedOrc.destination.dataPath\", \"file:\" + tableSdLoc + \"_orc\").build());\n\n      ConvertibleHiveDataset cd = ConvertibleHiveDatasetTest.createTestConvertibleDataset(config);\n\n      List<QueryBasedHiveConversionEntity> conversionEntities =\n          Lists.newArrayList(converter.convertRecord(converter.convertSchema(schema, wus),\n              new QueryBasedHiveConversionEntity(cd, new SchemaAwareHiveTable(table, schema)), wus));\n\n      Assert.assertEquals(conversionEntities.size(), 1, \"Only one query entity should be returned\");\n\n      QueryBasedHiveConversionEntity queryBasedHiveConversionEntity = conversionEntities.get(0);\n      List<String> queries = queryBasedHiveConversionEntity.getQueries();\n\n      Assert.assertEquals(queries.size(), 4, \"4 DDL and one DML query should be returned\");\n\n      \r\n      \r\n      String actualDDLQuery = StringUtils.substringAfter(\"(\", queries.get(0).trim());\n      String actualDMLQuery = StringUtils.substringAfter(\"SELECT\", queries.get(0).trim());\n      String expectedDDLQuery = StringUtils.substringAfter(\"(\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_flattened.ddl\"));\n      String expectedDMLQuery = StringUtils.substringAfter(\"SELECT\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_flattened.dml\"));\n\n      Assert.assertEquals(actualDDLQuery, expectedDDLQuery);\n      Assert.assertEquals(actualDMLQuery, expectedDMLQuery);\n    }\n\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/conversion/hive/converter/HiveAvroToOrcConverterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"},{"authorDate":"2017-09-22 07:53:52","commitOrder":2,"curCode":"  public void testNestedSchemaDDLandDML() throws Exception {\n    String dbName = \"testdb\";\n    String tableName = \"testtable\";\n    String tableSdLoc = \"/tmp/testtable\";\n\n    this.hiveMetastoreTestUtils.getLocalMetastoreClient().dropDatabase(dbName, false, true, true);\n\n    Table table = this.hiveMetastoreTestUtils.createTestAvroTable(dbName, tableName, tableSdLoc, Optional.<String> absent());\n    Schema schema = ConversionHiveTestUtils.readSchemaFromJsonFile(resourceDir, \"recordWithinRecordWithinRecord_nested.json\");\n    WorkUnitState wus = ConversionHiveTestUtils.createWus(dbName, tableName, 0);\n    wus.getJobState().setProp(\"orc.table.flatten.schema\", \"false\");\n\n    try (HiveAvroToNestedOrcConverter converter = new HiveAvroToNestedOrcConverter();) {\n\n      Config config = ConfigFactory.parseMap(ImmutableMap.<String, String> builder()\n          .put(\"destinationFormats\", \"nestedOrc\")\n          .put(\"nestedOrc.destination.tableName\",\"testtable_orc_nested\")\n          .put(\"nestedOrc.destination.dbName\",dbName)\n          .put(\"nestedOrc.destination.dataPath\",\"file:/tmp/testtable_orc_nested\")\n          .build());\n\n      ConvertibleHiveDataset cd = ConvertibleHiveDatasetTest.createTestConvertibleDataset(config);\n\n      List<QueryBasedHiveConversionEntity> conversionEntities =\n          Lists.newArrayList(converter.convertRecord(converter.convertSchema(schema, wus), new QueryBasedHiveConversionEntity(cd , new SchemaAwareHiveTable(table, schema)), wus));\n\n      Assert.assertEquals(conversionEntities.size(), 1, \"Only one query entity should be returned\");\n\n      QueryBasedHiveConversionEntity queryBasedHiveConversionEntity = conversionEntities.get(0);\n      List<String> queries = queryBasedHiveConversionEntity.getQueries();\n\n      Assert.assertEquals(queries.size(), 4, \"4 DDL and one DML query should be returned\");\n\n      \r\n      \r\n      String actualDDLQuery = StringUtils.substringAfter(\"(\", queries.get(0).trim());\n      String actualDMLQuery = StringUtils.substringAfter(\"SELECT\", queries.get(0).trim());\n      String expectedDDLQuery = StringUtils.substringAfter(\"(\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_nested.ddl\"));\n      String expectedDMLQuery = StringUtils.substringAfter(\"SELECT\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_nested.dml\"));\n\n      Assert.assertEquals(actualDDLQuery, expectedDDLQuery);\n      Assert.assertEquals(actualDMLQuery, expectedDMLQuery);\n    }\n  }\n","date":"2017-09-22 07:53:52","endLine":161,"groupId":"5360","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNestedSchemaDDLandDML","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/89/3e13c175ae45d91571d9ec7b8552a3ac6056ef.src","preCode":"  public void testNestedSchemaDDLandDML() throws Exception {\n    String dbName = \"testdb\";\n    String tableName = \"testtable\";\n    String tableSdLoc = \"/tmp/testtable\";\n\n    this.hiveMetastoreTestUtils.getLocalMetastoreClient().dropDatabase(dbName, false, true, true);\n\n    Table table = this.hiveMetastoreTestUtils.createTestTable(dbName, tableName, tableSdLoc, Optional.<String> absent());\n    Schema schema = ConversionHiveTestUtils.readSchemaFromJsonFile(resourceDir, \"recordWithinRecordWithinRecord_nested.json\");\n    WorkUnitState wus = ConversionHiveTestUtils.createWus(dbName, tableName, 0);\n    wus.getJobState().setProp(\"orc.table.flatten.schema\", \"false\");\n\n    try (HiveAvroToNestedOrcConverter converter = new HiveAvroToNestedOrcConverter();) {\n\n      Config config = ConfigFactory.parseMap(ImmutableMap.<String, String> builder()\n          .put(\"destinationFormats\", \"nestedOrc\")\n          .put(\"nestedOrc.destination.tableName\",\"testtable_orc_nested\")\n          .put(\"nestedOrc.destination.dbName\",dbName)\n          .put(\"nestedOrc.destination.dataPath\",\"file:/tmp/testtable_orc_nested\")\n          .build());\n\n      ConvertibleHiveDataset cd = ConvertibleHiveDatasetTest.createTestConvertibleDataset(config);\n\n      List<QueryBasedHiveConversionEntity> conversionEntities =\n          Lists.newArrayList(converter.convertRecord(converter.convertSchema(schema, wus), new QueryBasedHiveConversionEntity(cd , new SchemaAwareHiveTable(table, schema)), wus));\n\n      Assert.assertEquals(conversionEntities.size(), 1, \"Only one query entity should be returned\");\n\n      QueryBasedHiveConversionEntity queryBasedHiveConversionEntity = conversionEntities.get(0);\n      List<String> queries = queryBasedHiveConversionEntity.getQueries();\n\n      Assert.assertEquals(queries.size(), 4, \"4 DDL and one DML query should be returned\");\n\n      \r\n      \r\n      String actualDDLQuery = StringUtils.substringAfter(\"(\", queries.get(0).trim());\n      String actualDMLQuery = StringUtils.substringAfter(\"SELECT\", queries.get(0).trim());\n      String expectedDDLQuery = StringUtils.substringAfter(\"(\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_nested.ddl\"));\n      String expectedDMLQuery = StringUtils.substringAfter(\"SELECT\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_nested.dml\"));\n\n      Assert.assertEquals(actualDDLQuery, expectedDDLQuery);\n      Assert.assertEquals(actualDMLQuery, expectedDMLQuery);\n    }\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/conversion/hive/converter/HiveAvroToOrcConverterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"5fa983268606335493903e7186836c57eefe40d9","commitMessage":"@@@[GOBBLIN-253] Enhance Hive materializer.\n\nCloses #2104 from ibuenros/hive-materializer\n","date":"2017-09-22 07:53:52","modifiedFileCount":"16","status":"M","submitter":"ibuenros"},{"authorTime":"2020-10-13 11:07:27","codes":[{"authorDate":"2020-10-13 11:07:27","commitOrder":3,"curCode":"  public void testFlattenSchemaDDLandDML() throws Exception {\n    String dbName = \"testdb\";\n    String tableSdLoc = new File(this.tmpDir, TEST_TABLE).getAbsolutePath();\n\n    this.hiveMetastoreTestUtils.getLocalMetastoreClient().dropDatabase(dbName, false, true, true);\n\n    Table table = this.hiveMetastoreTestUtils.createTestAvroTable(dbName, TEST_TABLE, tableSdLoc, Optional.<String> absent());\n    Schema schema = ConversionHiveTestUtils.readSchemaFromJsonFile(resourceDir, \"recordWithinRecordWithinRecord_nested.json\");\n    WorkUnitState wus = ConversionHiveTestUtils.createWus(dbName, TEST_TABLE, 0);\n\n    try (HiveAvroToFlattenedOrcConverter converter = new HiveAvroToFlattenedOrcConverter();) {\n\n      Config config = ConfigFactory.parseMap(\n          ImmutableMap.<String, String>builder().put(\"destinationFormats\", \"flattenedOrc\")\n              .put(\"flattenedOrc.destination.dbName\", dbName)\n              .put(\"flattenedOrc.destination.tableName\", TEST_TABLE + \"_orc\")\n              .put(\"flattenedOrc.destination.dataPath\", \"file:\" + tableSdLoc + \"_orc\").build());\n\n      ConvertibleHiveDataset cd = ConvertibleHiveDatasetTest.createTestConvertibleDataset(config);\n\n      List<QueryBasedHiveConversionEntity> conversionEntities =\n          Lists.newArrayList(converter.convertRecord(converter.convertSchema(schema, wus),\n              new QueryBasedHiveConversionEntity(cd, new SchemaAwareHiveTable(table, schema)), wus));\n\n      Assert.assertEquals(conversionEntities.size(), 1, \"Only one query entity should be returned\");\n\n      QueryBasedHiveConversionEntity queryBasedHiveConversionEntity = conversionEntities.get(0);\n      List<String> queries = queryBasedHiveConversionEntity.getQueries();\n\n      Assert.assertEquals(queries.size(), 4, \"4 DDL and one DML query should be returned\");\n\n      \r\n      \r\n      String actualDDLQuery = StringUtils.substringAfter(\"(\", queries.get(0).trim());\n      String actualDMLQuery = StringUtils.substringAfter(\"SELECT\", queries.get(0).trim());\n      String expectedDDLQuery = StringUtils.substringAfter(\"(\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_flattened.ddl\"));\n      String expectedDMLQuery = StringUtils.substringAfter(\"SELECT\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_flattened.dml\"));\n\n      Assert.assertEquals(actualDDLQuery, expectedDDLQuery);\n      Assert.assertEquals(actualDMLQuery, expectedDMLQuery);\n    }\n\n  }\n","date":"2020-10-13 11:07:27","endLine":114,"groupId":"101695","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testFlattenSchemaDDLandDML","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/8c/7d96c19b82406b3e384b65222a1b73b3e9a42b.src","preCode":"  public void testFlattenSchemaDDLandDML() throws Exception {\n    String dbName = \"testdb\";\n    String tableName = \"testtable\";\n    String tableSdLoc = \"/tmp/testtable\";\n\n    this.hiveMetastoreTestUtils.getLocalMetastoreClient().dropDatabase(dbName, false, true, true);\n\n    Table table = this.hiveMetastoreTestUtils.createTestAvroTable(dbName, tableName, tableSdLoc, Optional.<String> absent());\n    Schema schema = ConversionHiveTestUtils.readSchemaFromJsonFile(resourceDir, \"recordWithinRecordWithinRecord_nested.json\");\n    WorkUnitState wus = ConversionHiveTestUtils.createWus(dbName, tableName, 0);\n\n    try (HiveAvroToFlattenedOrcConverter converter = new HiveAvroToFlattenedOrcConverter();) {\n\n      Config config = ConfigFactory.parseMap(\n          ImmutableMap.<String, String>builder().put(\"destinationFormats\", \"flattenedOrc\")\n              .put(\"flattenedOrc.destination.dbName\", dbName)\n              .put(\"flattenedOrc.destination.tableName\", tableName + \"_orc\")\n              .put(\"flattenedOrc.destination.dataPath\", \"file:\" + tableSdLoc + \"_orc\").build());\n\n      ConvertibleHiveDataset cd = ConvertibleHiveDatasetTest.createTestConvertibleDataset(config);\n\n      List<QueryBasedHiveConversionEntity> conversionEntities =\n          Lists.newArrayList(converter.convertRecord(converter.convertSchema(schema, wus),\n              new QueryBasedHiveConversionEntity(cd, new SchemaAwareHiveTable(table, schema)), wus));\n\n      Assert.assertEquals(conversionEntities.size(), 1, \"Only one query entity should be returned\");\n\n      QueryBasedHiveConversionEntity queryBasedHiveConversionEntity = conversionEntities.get(0);\n      List<String> queries = queryBasedHiveConversionEntity.getQueries();\n\n      Assert.assertEquals(queries.size(), 4, \"4 DDL and one DML query should be returned\");\n\n      \r\n      \r\n      String actualDDLQuery = StringUtils.substringAfter(\"(\", queries.get(0).trim());\n      String actualDMLQuery = StringUtils.substringAfter(\"SELECT\", queries.get(0).trim());\n      String expectedDDLQuery = StringUtils.substringAfter(\"(\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_flattened.ddl\"));\n      String expectedDMLQuery = StringUtils.substringAfter(\"SELECT\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_flattened.dml\"));\n\n      Assert.assertEquals(actualDDLQuery, expectedDDLQuery);\n      Assert.assertEquals(actualDMLQuery, expectedDMLQuery);\n    }\n\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/conversion/hive/converter/HiveAvroToOrcConverterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-10-13 11:07:27","commitOrder":3,"curCode":"  public void testNestedSchemaDDLandDML() throws Exception {\n    String dbName = \"testdb\";\n    String tableSdLoc = new File(this.tmpDir, TEST_TABLE).getAbsolutePath();\n\n    this.hiveMetastoreTestUtils.getLocalMetastoreClient().dropDatabase(dbName, false, true, true);\n\n    Table table = this.hiveMetastoreTestUtils.createTestAvroTable(dbName, TEST_TABLE, tableSdLoc, Optional.<String> absent());\n    Schema schema = ConversionHiveTestUtils.readSchemaFromJsonFile(resourceDir, \"recordWithinRecordWithinRecord_nested.json\");\n    WorkUnitState wus = ConversionHiveTestUtils.createWus(dbName, TEST_TABLE, 0);\n    wus.getJobState().setProp(\"orc.table.flatten.schema\", \"false\");\n\n    try (HiveAvroToNestedOrcConverter converter = new HiveAvroToNestedOrcConverter();) {\n\n      Config config = ConfigFactory.parseMap(ImmutableMap.<String, String> builder()\n          .put(\"destinationFormats\", \"nestedOrc\")\n          .put(\"nestedOrc.destination.tableName\",\"testtable_orc_nested\")\n          .put(\"nestedOrc.destination.dbName\",dbName)\n          .put(\"nestedOrc.destination.dataPath\",\"file:\" + tableSdLoc + \"_orc_nested\")\n          .build());\n\n      ConvertibleHiveDataset cd = ConvertibleHiveDatasetTest.createTestConvertibleDataset(config);\n\n      List<QueryBasedHiveConversionEntity> conversionEntities =\n          Lists.newArrayList(converter.convertRecord(converter.convertSchema(schema, wus), new QueryBasedHiveConversionEntity(cd , new SchemaAwareHiveTable(table, schema)), wus));\n\n      Assert.assertEquals(conversionEntities.size(), 1, \"Only one query entity should be returned\");\n\n      QueryBasedHiveConversionEntity queryBasedHiveConversionEntity = conversionEntities.get(0);\n      List<String> queries = queryBasedHiveConversionEntity.getQueries();\n\n      Assert.assertEquals(queries.size(), 4, \"4 DDL and one DML query should be returned\");\n\n      \r\n      \r\n      String actualDDLQuery = StringUtils.substringAfter(\"(\", queries.get(0).trim());\n      String actualDMLQuery = StringUtils.substringAfter(\"SELECT\", queries.get(0).trim());\n      String expectedDDLQuery = StringUtils.substringAfter(\"(\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_nested.ddl\"));\n      String expectedDMLQuery = StringUtils.substringAfter(\"SELECT\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_nested.dml\"));\n\n      Assert.assertEquals(actualDDLQuery, expectedDDLQuery);\n      Assert.assertEquals(actualDMLQuery, expectedDMLQuery);\n    }\n  }\n","date":"2020-10-13 11:07:27","endLine":165,"groupId":"101695","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testNestedSchemaDDLandDML","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/8c/7d96c19b82406b3e384b65222a1b73b3e9a42b.src","preCode":"  public void testNestedSchemaDDLandDML() throws Exception {\n    String dbName = \"testdb\";\n    String tableName = \"testtable\";\n    String tableSdLoc = \"/tmp/testtable\";\n\n    this.hiveMetastoreTestUtils.getLocalMetastoreClient().dropDatabase(dbName, false, true, true);\n\n    Table table = this.hiveMetastoreTestUtils.createTestAvroTable(dbName, tableName, tableSdLoc, Optional.<String> absent());\n    Schema schema = ConversionHiveTestUtils.readSchemaFromJsonFile(resourceDir, \"recordWithinRecordWithinRecord_nested.json\");\n    WorkUnitState wus = ConversionHiveTestUtils.createWus(dbName, tableName, 0);\n    wus.getJobState().setProp(\"orc.table.flatten.schema\", \"false\");\n\n    try (HiveAvroToNestedOrcConverter converter = new HiveAvroToNestedOrcConverter();) {\n\n      Config config = ConfigFactory.parseMap(ImmutableMap.<String, String> builder()\n          .put(\"destinationFormats\", \"nestedOrc\")\n          .put(\"nestedOrc.destination.tableName\",\"testtable_orc_nested\")\n          .put(\"nestedOrc.destination.dbName\",dbName)\n          .put(\"nestedOrc.destination.dataPath\",\"file:/tmp/testtable_orc_nested\")\n          .build());\n\n      ConvertibleHiveDataset cd = ConvertibleHiveDatasetTest.createTestConvertibleDataset(config);\n\n      List<QueryBasedHiveConversionEntity> conversionEntities =\n          Lists.newArrayList(converter.convertRecord(converter.convertSchema(schema, wus), new QueryBasedHiveConversionEntity(cd , new SchemaAwareHiveTable(table, schema)), wus));\n\n      Assert.assertEquals(conversionEntities.size(), 1, \"Only one query entity should be returned\");\n\n      QueryBasedHiveConversionEntity queryBasedHiveConversionEntity = conversionEntities.get(0);\n      List<String> queries = queryBasedHiveConversionEntity.getQueries();\n\n      Assert.assertEquals(queries.size(), 4, \"4 DDL and one DML query should be returned\");\n\n      \r\n      \r\n      String actualDDLQuery = StringUtils.substringAfter(\"(\", queries.get(0).trim());\n      String actualDMLQuery = StringUtils.substringAfter(\"SELECT\", queries.get(0).trim());\n      String expectedDDLQuery = StringUtils.substringAfter(\"(\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_nested.ddl\"));\n      String expectedDMLQuery = StringUtils.substringAfter(\"SELECT\",\n          ConversionHiveTestUtils.readQueryFromFile(resourceDir, \"recordWithinRecordWithinRecord_nested.dml\"));\n\n      Assert.assertEquals(actualDDLQuery, expectedDDLQuery);\n      Assert.assertEquals(actualDMLQuery, expectedDMLQuery);\n    }\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/conversion/hive/converter/HiveAvroToOrcConverterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"0d30aaecee1e2eed5dfcfdbcbc8efba96d63ed7c","commitMessage":"@@@[GOBBLIN-1284] Fix flaky tests causing local build failures\n\nCloses #3123 from\nsv2000/rateControlledFileSystemTest\n","date":"2020-10-13 11:07:27","modifiedFileCount":"11","status":"M","submitter":"suvasude"}]
