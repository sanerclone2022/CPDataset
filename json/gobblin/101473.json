[{"authorTime":"2019-06-12 00:13:16","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public T get(String storeName, String tableName, String stateId) throws IOException {\n    try (Connection connection = dataSource.getConnection();\n        PreparedStatement queryStatement = connection.prepareStatement(SELECT_JOB_STATE_SQL)) {\n      int index = 0;\n      queryStatement.setString(++index, storeName);\n      queryStatement.setString(++index, tableName);\n\n      try (ResultSet rs = queryStatement.executeQuery()) {\n        if (rs.next()) {\n          Blob blob = rs.getBlob(1);\n          Text key = new Text();\n\n          try (InputStream is = StreamUtils.isCompressed(blob.getBytes(1, 2)) ?\n              new GZIPInputStream(blob.getBinaryStream()) : blob.getBinaryStream();\n              DataInputStream dis = new DataInputStream(is)){\n            \r\n            while (dis.available() > 0) {\n              T state = this.stateClass.newInstance();\n\n              key.readFields(dis);\n              state.readFields(dis);\n\n              if (key.toString().equals(stateId)) {\n                return state;\n              }\n            }\n          } catch (EOFException e) {\n            \r\n          }\n        }\n      }\n    } catch (RuntimeException e) {\n      throw e;\n    }catch (Exception e) {\n      throw new IOException(\"failure retrieving state from storeName \" + storeName + \" tableName \" + tableName, e);\n    }\n\n    return null;\n  }\n","date":"2017-07-31 15:51:25","endLine":295,"groupId":"1717","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(StringstoreName@StringtableName@StringstateId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/3e/2b928727af6a50927a61166fac7cf07aad14ae.src","preCode":"  public T get(String storeName, String tableName, String stateId) throws IOException {\n    try (Connection connection = dataSource.getConnection();\n        PreparedStatement queryStatement = connection.prepareStatement(SELECT_JOB_STATE_SQL)) {\n      int index = 0;\n      queryStatement.setString(++index, storeName);\n      queryStatement.setString(++index, tableName);\n\n      try (ResultSet rs = queryStatement.executeQuery()) {\n        if (rs.next()) {\n          Blob blob = rs.getBlob(1);\n          Text key = new Text();\n\n          try (InputStream is = StreamUtils.isCompressed(blob.getBytes(1, 2)) ?\n              new GZIPInputStream(blob.getBinaryStream()) : blob.getBinaryStream();\n              DataInputStream dis = new DataInputStream(is)){\n            \r\n            while (dis.available() > 0) {\n              T state = this.stateClass.newInstance();\n\n              key.readFields(dis);\n              state.readFields(dis);\n\n              if (key.toString().equals(stateId)) {\n                return state;\n              }\n            }\n          } catch (EOFException e) {\n            \r\n          }\n        }\n      }\n    } catch (RuntimeException e) {\n      throw e;\n    }catch (Exception e) {\n      throw new IOException(\"failure retrieving state from storeName \" + storeName + \" tableName \" + tableName, e);\n    }\n\n    return null;\n  }\n","realPath":"gobblin-metastore/src/main/java/org/apache/gobblin/metastore/MysqlStateStore.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"NB"},{"authorDate":"2019-06-12 00:13:16","commitOrder":2,"curCode":"  private void execGetAllStatement(PreparedStatement queryStatement, List<T> states) throws SQLException, Exception {\n    try (ResultSet rs = queryStatement.executeQuery()) {\n      while (rs.next()) {\n        Blob blob = rs.getBlob(1);\n        Text key = new Text();\n\n        try (InputStream is = StreamUtils.isCompressed(blob.getBytes(1, 2)) ?\n            new GZIPInputStream(blob.getBinaryStream()) : blob.getBinaryStream();\n            DataInputStream dis = new DataInputStream(is)) {\n          \r\n          while (dis.available() > 0) {\n            T state = this.stateClass.newInstance();\n            key.readString(dis);\n            state.readFields(dis);\n            states.add(state);\n          }\n        } catch (EOFException e) {\n          \r\n        }\n      }\n    }\n  }\n","date":"2019-06-12 00:13:16","endLine":407,"groupId":"1717","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"execGetAllStatement","params":"(PreparedStatementqueryStatement@List<T>states)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a8/33a1d5932a278921225c3842c60d5e6eb31bb6.src","preCode":"  private void execGetAllStatement(PreparedStatement queryStatement, List<T> states) throws SQLException, Exception {\n    try (ResultSet rs = queryStatement.executeQuery()) {\n      while (rs.next()) {\n        Blob blob = rs.getBlob(1);\n        Text key = new Text();\n\n        try (InputStream is = StreamUtils.isCompressed(blob.getBytes(1, 2)) ?\n            new GZIPInputStream(blob.getBinaryStream()) : blob.getBinaryStream();\n            DataInputStream dis = new DataInputStream(is)) {\n          \r\n          while (dis.available() > 0) {\n            T state = this.stateClass.newInstance();\n            key.readString(dis);\n            state.readFields(dis);\n            states.add(state);\n          }\n        } catch (EOFException e) {\n          \r\n        }\n      }\n    }\n  }\n","realPath":"gobblin-metastore/src/main/java/org/apache/gobblin/metastore/MysqlStateStore.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"B"}],"commitId":"9dcc79dd406bb347b908e5a8709c40ac6ed34489","commitMessage":"@@@[GOBBLIN-790] DagStateStore MySQL\n\nCloses #2656 from autumnust/DagStataToStateStore\n","date":"2019-06-12 00:13:16","modifiedFileCount":"7","status":"M","submitter":"autumnust"},{"authorTime":"2019-12-11 07:56:13","codes":[{"authorDate":"2019-12-11 07:56:13","commitOrder":3,"curCode":"  public T get(String storeName, String tableName, String stateId) throws IOException {\n    try (Connection connection = dataSource.getConnection();\n        PreparedStatement queryStatement = connection.prepareStatement(SELECT_JOB_STATE_SQL)) {\n      int index = 0;\n      queryStatement.setString(++index, storeName);\n      queryStatement.setString(++index, tableName);\n\n      try (ResultSet rs = queryStatement.executeQuery()) {\n        if (rs.next()) {\n          Blob blob = rs.getBlob(1);\n          Text key = new Text();\n\n          try (InputStream is = StreamUtils.isCompressed(blob.getBytes(1, 2)) ?\n              new GZIPInputStream(blob.getBinaryStream()) : blob.getBinaryStream();\n              DataInputStream dis = new DataInputStream(is)){\n            \r\n            while (dis.available() > 0) {\n              T state = this.stateClass.newInstance();\n\n              key.readFields(dis);\n              state.readFields(dis);\n              state.setId(key.toString());\n              if (key.toString().equals(stateId)) {\n                return state;\n              }\n            }\n          } catch (EOFException e) {\n            \r\n          }\n        }\n      }\n    } catch (RuntimeException e) {\n      throw e;\n    }catch (Exception e) {\n      throw new IOException(\"failure retrieving state from storeName \" + storeName + \" tableName \" + tableName, e);\n    }\n\n    return null;\n  }\n","date":"2019-12-11 07:56:13","endLine":332,"groupId":"1717","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(StringstoreName@StringtableName@StringstateId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/de/84f5261c6543bd3f51401d4ee67942d43e7eaf.src","preCode":"  public T get(String storeName, String tableName, String stateId) throws IOException {\n    try (Connection connection = dataSource.getConnection();\n        PreparedStatement queryStatement = connection.prepareStatement(SELECT_JOB_STATE_SQL)) {\n      int index = 0;\n      queryStatement.setString(++index, storeName);\n      queryStatement.setString(++index, tableName);\n\n      try (ResultSet rs = queryStatement.executeQuery()) {\n        if (rs.next()) {\n          Blob blob = rs.getBlob(1);\n          Text key = new Text();\n\n          try (InputStream is = StreamUtils.isCompressed(blob.getBytes(1, 2)) ?\n              new GZIPInputStream(blob.getBinaryStream()) : blob.getBinaryStream();\n              DataInputStream dis = new DataInputStream(is)){\n            \r\n            while (dis.available() > 0) {\n              T state = this.stateClass.newInstance();\n\n              key.readFields(dis);\n              state.readFields(dis);\n\n              if (key.toString().equals(stateId)) {\n                return state;\n              }\n            }\n          } catch (EOFException e) {\n            \r\n          }\n        }\n      }\n    } catch (RuntimeException e) {\n      throw e;\n    }catch (Exception e) {\n      throw new IOException(\"failure retrieving state from storeName \" + storeName + \" tableName \" + tableName, e);\n    }\n\n    return null;\n  }\n","realPath":"gobblin-metastore/src/main/java/org/apache/gobblin/metastore/MysqlStateStore.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"},{"authorDate":"2019-12-11 07:56:13","commitOrder":3,"curCode":"  private void execGetAllStatement(PreparedStatement queryStatement, List<T> states) throws SQLException, Exception {\n    try (ResultSet rs = queryStatement.executeQuery()) {\n      while (rs.next()) {\n        Blob blob = rs.getBlob(1);\n        Text key = new Text();\n\n        try (InputStream is = StreamUtils.isCompressed(blob.getBytes(1, 2)) ?\n            new GZIPInputStream(blob.getBinaryStream()) : blob.getBinaryStream();\n            DataInputStream dis = new DataInputStream(is)) {\n          \r\n          while (dis.available() > 0) {\n            T state = this.stateClass.newInstance();\n            String stateId = key.readString(dis);\n            state.readFields(dis);\n            state.setId(stateId);\n            states.add(state);\n          }\n        } catch (EOFException e) {\n          \r\n        }\n      }\n    }\n  }\n","date":"2019-12-11 07:56:13","endLine":408,"groupId":"1717","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"execGetAllStatement","params":"(PreparedStatementqueryStatement@List<T>states)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/de/84f5261c6543bd3f51401d4ee67942d43e7eaf.src","preCode":"  private void execGetAllStatement(PreparedStatement queryStatement, List<T> states) throws SQLException, Exception {\n    try (ResultSet rs = queryStatement.executeQuery()) {\n      while (rs.next()) {\n        Blob blob = rs.getBlob(1);\n        Text key = new Text();\n\n        try (InputStream is = StreamUtils.isCompressed(blob.getBytes(1, 2)) ?\n            new GZIPInputStream(blob.getBinaryStream()) : blob.getBinaryStream();\n            DataInputStream dis = new DataInputStream(is)) {\n          \r\n          while (dis.available() > 0) {\n            T state = this.stateClass.newInstance();\n            key.readString(dis);\n            state.readFields(dis);\n            states.add(state);\n          }\n        } catch (EOFException e) {\n          \r\n        }\n      }\n    }\n  }\n","realPath":"gobblin-metastore/src/main/java/org/apache/gobblin/metastore/MysqlStateStore.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"}],"commitId":"2304f11e033febd4ab3389937ef8ff48b27e99ed","commitMessage":"@@@[GOBBLIN-1002] Set state id when deserializing state from Gobblin state store[]\n\nCloses #2847 from sv2000/checkPointableWatermark\n","date":"2019-12-11 07:56:13","modifiedFileCount":"7","status":"M","submitter":"sv2000"},{"authorTime":"2019-12-11 07:56:13","codes":[{"authorDate":"2021-08-31 08:25:27","commitOrder":4,"curCode":"  public T get(String storeName, String tableName, String stateId) throws IOException {\n    try (Connection connection = dataSource.getConnection();\n        PreparedStatement queryStatement = connection.prepareStatement(SELECT_JOB_STATE_SQL)) {\n      queryStatement.setString(1, storeName);\n      queryStatement.setString(2, tableName);\n\n      try (ResultSet rs = queryStatement.executeQuery()) {\n        if (rs.next()) {\n          Blob blob = rs.getBlob(1);\n          Text key = new Text();\n\n          try (InputStream is = StreamUtils.isCompressed(blob.getBytes(1, 2)) ?\n              new GZIPInputStream(blob.getBinaryStream()) : blob.getBinaryStream();\n              DataInputStream dis = new DataInputStream(is)){\n            \r\n            while (dis.available() > 0) {\n              T state = this.stateClass.newInstance();\n\n              key.readFields(dis);\n              state.readFields(dis);\n              state.setId(key.toString());\n              if (key.toString().equals(stateId)) {\n                return state;\n              }\n            }\n          } catch (EOFException e) {\n            \r\n          }\n        }\n      }\n    } catch (RuntimeException e) {\n      throw e;\n    }catch (Exception e) {\n      throw new IOException(\"failure retrieving state from storeName \" + storeName + \" tableName \" + tableName, e);\n    }\n\n    return null;\n  }\n","date":"2021-08-31 08:25:27","endLine":335,"groupId":"101473","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"get","params":"(StringstoreName@StringtableName@StringstateId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/5c/79fa9a71268225b43e18a2a2c5a88707f00e8d.src","preCode":"  public T get(String storeName, String tableName, String stateId) throws IOException {\n    try (Connection connection = dataSource.getConnection();\n        PreparedStatement queryStatement = connection.prepareStatement(SELECT_JOB_STATE_SQL)) {\n      int index = 0;\n      queryStatement.setString(++index, storeName);\n      queryStatement.setString(++index, tableName);\n\n      try (ResultSet rs = queryStatement.executeQuery()) {\n        if (rs.next()) {\n          Blob blob = rs.getBlob(1);\n          Text key = new Text();\n\n          try (InputStream is = StreamUtils.isCompressed(blob.getBytes(1, 2)) ?\n              new GZIPInputStream(blob.getBinaryStream()) : blob.getBinaryStream();\n              DataInputStream dis = new DataInputStream(is)){\n            \r\n            while (dis.available() > 0) {\n              T state = this.stateClass.newInstance();\n\n              key.readFields(dis);\n              state.readFields(dis);\n              state.setId(key.toString());\n              if (key.toString().equals(stateId)) {\n                return state;\n              }\n            }\n          } catch (EOFException e) {\n            \r\n          }\n        }\n      }\n    } catch (RuntimeException e) {\n      throw e;\n    }catch (Exception e) {\n      throw new IOException(\"failure retrieving state from storeName \" + storeName + \" tableName \" + tableName, e);\n    }\n\n    return null;\n  }\n","realPath":"gobblin-metastore/src/main/java/org/apache/gobblin/metastore/MysqlStateStore.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"},{"authorDate":"2019-12-11 07:56:13","commitOrder":4,"curCode":"  private void execGetAllStatement(PreparedStatement queryStatement, List<T> states) throws SQLException, Exception {\n    try (ResultSet rs = queryStatement.executeQuery()) {\n      while (rs.next()) {\n        Blob blob = rs.getBlob(1);\n        Text key = new Text();\n\n        try (InputStream is = StreamUtils.isCompressed(blob.getBytes(1, 2)) ?\n            new GZIPInputStream(blob.getBinaryStream()) : blob.getBinaryStream();\n            DataInputStream dis = new DataInputStream(is)) {\n          \r\n          while (dis.available() > 0) {\n            T state = this.stateClass.newInstance();\n            String stateId = key.readString(dis);\n            state.readFields(dis);\n            state.setId(stateId);\n            states.add(state);\n          }\n        } catch (EOFException e) {\n          \r\n        }\n      }\n    }\n  }\n","date":"2019-12-11 07:56:13","endLine":408,"groupId":"101473","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"execGetAllStatement","params":"(PreparedStatementqueryStatement@List<T>states)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/de/84f5261c6543bd3f51401d4ee67942d43e7eaf.src","preCode":"  private void execGetAllStatement(PreparedStatement queryStatement, List<T> states) throws SQLException, Exception {\n    try (ResultSet rs = queryStatement.executeQuery()) {\n      while (rs.next()) {\n        Blob blob = rs.getBlob(1);\n        Text key = new Text();\n\n        try (InputStream is = StreamUtils.isCompressed(blob.getBytes(1, 2)) ?\n            new GZIPInputStream(blob.getBinaryStream()) : blob.getBinaryStream();\n            DataInputStream dis = new DataInputStream(is)) {\n          \r\n          while (dis.available() > 0) {\n            T state = this.stateClass.newInstance();\n            String stateId = key.readString(dis);\n            state.readFields(dis);\n            state.setId(stateId);\n            states.add(state);\n          }\n        } catch (EOFException e) {\n          \r\n        }\n      }\n    }\n  }\n","realPath":"gobblin-metastore/src/main/java/org/apache/gobblin/metastore/MysqlStateStore.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"N"}],"commitId":"0632fbe770a0074e1888ed8a80de0c8d487061ad","commitMessage":"@@@[GOBBLIN-1527] Refactor flowexecutions endpoint job status state retrieval\n\nThis is merely a refactoring of the job status state retrieval impl. used by the existing 'flowexecutions' endpoint.  to enable reuse by the forthcoming finder separate commit. Functionality should not change and should continue to conform to all existing unit tests.","date":"2021-08-31 08:25:27","modifiedFileCount":"4","status":"M","submitter":"Kip Kohn"}]
