[{"authorTime":"2019-09-24 01:16:28","codes":[{"authorDate":"2020-05-13 13:43:19","commitOrder":2,"curCode":"  public void basicTestWithRecompactionAndBasicSchemaEvolution() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    \r\n    createTestingData(jobDir);\n\n    \r\n    TypeDescription evolvedSchema = TypeDescription.fromString(\"struct<i:int,j:int,k:int>\");\n    OrcStruct orcStruct_4 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_4.setFieldValue(\"i\", new IntWritable(5));\n    orcStruct_4.setFieldValue(\"j\", new IntWritable(6));\n    orcStruct_4.setFieldValue(\"k\", new IntWritable(7));\n\n    File file_2 = new File(jobDir, \"file_2.1.\" + extensionName);\n    writeOrcRecordsInFile(new Path(file_2.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_4));\n    \r\n    file_2.setLastModified(Long.MAX_VALUE);\n\n    \r\n    \r\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin(\"basic\", basePath.getAbsolutePath().toString())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n        TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, extensionName)\n        .setConfiguration(COMPACTION_LATEDATA_THRESHOLD_FOR_RECOMPACT_PER_DATASET, \"Identity.*:0.1\");\n    JobExecutionResult execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    reloadFolder(statuses, outputDir, fs);\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 4);\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertNull(result.get(0).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertNull(result.get(1).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(5));\n    Assert.assertNull(result.get(2).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(3).getFieldValue(\"i\"), new IntWritable(5));\n    Assert.assertEquals(result.get(3).getFieldValue(\"j\"), new IntWritable(6));\n    Assert.assertEquals(result.get(3).getFieldValue(\"k\"), new IntWritable(7));\n\n    \r\n    File file_late = new File(jobDir, \"file_late.1.\" + extensionName);\n    OrcStruct orcStruct_5 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_5.setFieldValue(\"i\", new IntWritable(10));\n    orcStruct_5.setFieldValue(\"j\", new IntWritable(11));\n    orcStruct_5.setFieldValue(\"k\", new IntWritable(12));\n\n    writeOrcRecordsInFile(new Path(file_late.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_5));\n    execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    reloadFolder(statuses, outputDir, fs);\n    result = readOrcFile(statuses.get(0).getPath());\n    \r\n    Assert.assertEquals(result.size(), 4 + 1);\n  }\n","date":"2020-05-13 13:43:19","endLine":164,"groupId":"4168","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTestWithRecompactionAndBasicSchemaEvolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b5/8fc3660c1d6fe7da2c348fc24f912bb213113e.src","preCode":"  public void basicTestWithRecompactionAndBasicSchemaEvolution() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    \r\n    createTestingData(jobDir);\n\n    \r\n    TypeDescription evolvedSchema = TypeDescription.fromString(\"struct<i:int,j:int,k:int>\");\n    OrcStruct orcStruct_4 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_4.setFieldValue(\"i\", new IntWritable(5));\n    orcStruct_4.setFieldValue(\"j\", new IntWritable(6));\n    orcStruct_4.setFieldValue(\"k\", new IntWritable(7));\n\n    File file_2 = new File(jobDir, \"file_2.1.\" + extensionName);\n    writeOrcRecordsInFile(new Path(file_2.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_4));\n    \r\n    file_2.setLastModified(Long.MAX_VALUE);\n\n    \r\n    \r\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin(\"basic\", basePath.getAbsolutePath().toString())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n        TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, extensionName)\n        .setConfiguration(COMPACTION_LATEDATA_THRESHOLD_FOR_RECOMPACT_PER_DATASET, \"Identity.*:0.1\");\n    JobExecutionResult execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    reloadFolder(statuses, outputDir, fs);\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 4);\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertNull(result.get(0).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertNull(result.get(1).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(5));\n    Assert.assertNull(result.get(2).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(3).getFieldValue(\"i\"), new IntWritable(5));\n    Assert.assertEquals(result.get(3).getFieldValue(\"j\"), new IntWritable(6));\n    Assert.assertEquals(result.get(3).getFieldValue(\"k\"), new IntWritable(7));\n\n    \r\n    File file_late = new File(jobDir, \"file_late.1.\" + extensionName);\n    OrcStruct orcStruct_5 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_5.setFieldValue(\"i\", new IntWritable(10));\n    orcStruct_5.setFieldValue(\"j\", new IntWritable(11));\n    orcStruct_5.setFieldValue(\"k\", new IntWritable(12));\n\n    writeOrcRecordsInFile(new Path(file_late.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_5));\n    execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    reloadFolder(statuses, outputDir, fs);\n    result = readOrcFile(statuses.get(0).getPath());\n    \r\n    Assert.assertEquals(result.size(), 4 + 1);\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/OrcCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2019-09-24 01:16:28","commitOrder":2,"curCode":"  public void testNonDedup() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount_2/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount_2/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    createTestingData(jobDir);\n\n    EmbeddedGobblin embeddedGobblin_nondedup = createEmbeddedGobblin(\"basic\", basePath.getAbsolutePath().toString())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n            TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, \"orc\")\n        .setConfiguration(COMPACTION_SHOULD_DEDUPLICATE, \"false\");\n    JobExecutionResult execution = embeddedGobblin_nondedup.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    for (FileStatus status : fs.listStatus(new Path(outputDir.getAbsolutePath()), new PathFilter() {\n      @Override\n      public boolean accept(Path path) {\n        return FilenameUtils.isExtension(path.getName(), \"orc\");\n      }\n    })) {\n      statuses.add(status);\n    }\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 4);\n\n    result.sort(new Comparator<OrcStruct>() {\n      @Override\n      public int compare(OrcStruct o1, OrcStruct o2) {\n        return o1.compareTo(o2);\n      }\n    });\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertEquals(result.get(3).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(3).getFieldValue(\"j\"), new IntWritable(5));\n  }\n","date":"2019-09-24 01:16:28","endLine":200,"groupId":"7055","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonDedup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f8/557908bb131b457e9cec8fdbca8369f4adc456.src","preCode":"  public void testNonDedup() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount_2/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount_2/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    createTestingData(jobDir);\n\n    EmbeddedGobblin embeddedGobblin_nondedup = createEmbeddedGobblin(\"basic\", basePath.getAbsolutePath().toString())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n            TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, \"orc\")\n        .setConfiguration(COMPACTION_SHOULD_DEDUPLICATE, \"false\");\n    JobExecutionResult execution = embeddedGobblin_nondedup.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    for (FileStatus status : fs.listStatus(new Path(outputDir.getAbsolutePath()), new PathFilter() {\n      @Override\n      public boolean accept(Path path) {\n        return FilenameUtils.isExtension(path.getName(), \"orc\");\n      }\n    })) {\n      statuses.add(status);\n    }\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 4);\n\n    result.sort(new Comparator<OrcStruct>() {\n      @Override\n      public int compare(OrcStruct o1, OrcStruct o2) {\n        return o1.compareTo(o2);\n      }\n    });\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertEquals(result.get(3).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(3).getFieldValue(\"j\"), new IntWritable(5));\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/OrcCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"NB"}],"commitId":"1c89e85fedf90187a5a4ee4752df9464c76907e0","commitMessage":"@@@[GOBBLIN-1126] Make ORC compaction shuffle key configurable\n\nCreate Orc-Schema audo-filler;\nAdding unit test for that;\nTrying to re-use the object when upconvert is\nrequired.  and trying to reuse that for Orc record\nprojection.  need to finish unit test for reuse\npart first\n\nRefactoring many pieces and pass all unit tests\nfor nested schema up-conversion\n\nRemove Junit library in unit tests\n\nReorder the method in OrcUtils to improve\nreadability\n\nFix unit tests\n\nFix union and add tests for column projection\n\nAdd reducer-side OrcStruct comparator\n\nAdd unit tests for Reducer side of dedup for ORC\n\nMake unit test check record content after\ncompaction\n\nEdit gitignore file to make ignore vs-code related\nconfiguration files\n\nFix unit tests\n\nAdd test for multi-key on reducer side\n\nRemove excessive log in upConvertOrcStruct\n\nAdd helper to reflect problematic file during\ncompaciton to help debug\n\nCatch all types of exception in map method\n\nAddress reviewer's comments\n\nAddress reviewer's comments\n\nEnhance unit test: Add union into reducer-side\ndedup's schema\n\nAdd one more tests for OrcUtils and separate the\ntesting workload in travis for compaction job\n\nCloses #2966 from autumnust/orc-compaction-\ncompare-key-configurable\n","date":"2020-05-13 13:43:19","modifiedFileCount":"9","status":"M","submitter":"Lei Sun"},{"authorTime":"2020-09-09 02:26:14","codes":[{"authorDate":"2020-09-09 02:26:14","commitOrder":3,"curCode":"  public void basicTestWithRecompactionAndBasicSchemaEvolution() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    \r\n    createTestingData(jobDir);\n\n    \r\n    TypeDescription evolvedSchema = TypeDescription.fromString(\"struct<i:int,j:int,k:int>\");\n    OrcStruct orcStruct_4 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_4.setFieldValue(\"i\", new IntWritable(5));\n    orcStruct_4.setFieldValue(\"j\", new IntWritable(6));\n    orcStruct_4.setFieldValue(\"k\", new IntWritable(7));\n\n    File file_2 = new File(jobDir, \"file_2.1.\" + extensionName);\n    writeOrcRecordsInFile(new Path(file_2.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_4));\n    \r\n    file_2.setLastModified(Long.MAX_VALUE);\n\n    \r\n    \r\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblinCompactionJob(\"basic\", basePath.getAbsolutePath())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n        TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, extensionName)\n        .setConfiguration(COMPACTION_LATEDATA_THRESHOLD_FOR_RECOMPACT_PER_DATASET, \"Identity.*:0.1\");\n    JobExecutionResult execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    reloadFolder(statuses, outputDir, fs);\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 4);\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertNull(result.get(0).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertNull(result.get(1).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(5));\n    Assert.assertNull(result.get(2).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(3).getFieldValue(\"i\"), new IntWritable(5));\n    Assert.assertEquals(result.get(3).getFieldValue(\"j\"), new IntWritable(6));\n    Assert.assertEquals(result.get(3).getFieldValue(\"k\"), new IntWritable(7));\n\n    \r\n    File file_late = new File(jobDir, \"file_late.1.\" + extensionName);\n    OrcStruct orcStruct_5 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_5.setFieldValue(\"i\", new IntWritable(10));\n    orcStruct_5.setFieldValue(\"j\", new IntWritable(11));\n    orcStruct_5.setFieldValue(\"k\", new IntWritable(12));\n\n    writeOrcRecordsInFile(new Path(file_late.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_5));\n    execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    reloadFolder(statuses, outputDir, fs);\n    result = readOrcFile(statuses.get(0).getPath());\n    \r\n    Assert.assertEquals(result.size(), 4 + 1);\n  }\n","date":"2020-09-09 02:26:14","endLine":208,"groupId":"101548","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTestWithRecompactionAndBasicSchemaEvolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b9/c4152a83b5234e62e5499ef0d05f02430bcaba.src","preCode":"  public void basicTestWithRecompactionAndBasicSchemaEvolution() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    \r\n    createTestingData(jobDir);\n\n    \r\n    TypeDescription evolvedSchema = TypeDescription.fromString(\"struct<i:int,j:int,k:int>\");\n    OrcStruct orcStruct_4 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_4.setFieldValue(\"i\", new IntWritable(5));\n    orcStruct_4.setFieldValue(\"j\", new IntWritable(6));\n    orcStruct_4.setFieldValue(\"k\", new IntWritable(7));\n\n    File file_2 = new File(jobDir, \"file_2.1.\" + extensionName);\n    writeOrcRecordsInFile(new Path(file_2.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_4));\n    \r\n    file_2.setLastModified(Long.MAX_VALUE);\n\n    \r\n    \r\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin(\"basic\", basePath.getAbsolutePath().toString())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n        TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, extensionName)\n        .setConfiguration(COMPACTION_LATEDATA_THRESHOLD_FOR_RECOMPACT_PER_DATASET, \"Identity.*:0.1\");\n    JobExecutionResult execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    reloadFolder(statuses, outputDir, fs);\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 4);\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertNull(result.get(0).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertNull(result.get(1).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(5));\n    Assert.assertNull(result.get(2).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(3).getFieldValue(\"i\"), new IntWritable(5));\n    Assert.assertEquals(result.get(3).getFieldValue(\"j\"), new IntWritable(6));\n    Assert.assertEquals(result.get(3).getFieldValue(\"k\"), new IntWritable(7));\n\n    \r\n    File file_late = new File(jobDir, \"file_late.1.\" + extensionName);\n    OrcStruct orcStruct_5 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_5.setFieldValue(\"i\", new IntWritable(10));\n    orcStruct_5.setFieldValue(\"j\", new IntWritable(11));\n    orcStruct_5.setFieldValue(\"k\", new IntWritable(12));\n\n    writeOrcRecordsInFile(new Path(file_late.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_5));\n    execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    reloadFolder(statuses, outputDir, fs);\n    result = readOrcFile(statuses.get(0).getPath());\n    \r\n    Assert.assertEquals(result.size(), 4 + 1);\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/OrcCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2020-09-09 02:26:14","commitOrder":3,"curCode":"  public void testNonDedup() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount_2/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount_2/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    createTestingData(jobDir);\n\n    EmbeddedGobblin embeddedGobblin_nondedup = createEmbeddedGobblinCompactionJob(\"basic\", basePath.getAbsolutePath().toString())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n            TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, \"orc\")\n        .setConfiguration(COMPACTION_SHOULD_DEDUPLICATE, \"false\");\n    JobExecutionResult execution = embeddedGobblin_nondedup.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    for (FileStatus status : fs.listStatus(new Path(outputDir.getAbsolutePath()), new PathFilter() {\n      @Override\n      public boolean accept(Path path) {\n        return FilenameUtils.isExtension(path.getName(), \"orc\");\n      }\n    })) {\n      statuses.add(status);\n    }\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 4);\n\n    result.sort(new Comparator<OrcStruct>() {\n      @Override\n      public int compare(OrcStruct o1, OrcStruct o2) {\n        return o1.compareTo(o2);\n      }\n    });\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertEquals(result.get(3).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(3).getFieldValue(\"j\"), new IntWritable(5));\n  }\n","date":"2020-09-09 02:26:14","endLine":332,"groupId":"101548","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonDedup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b9/c4152a83b5234e62e5499ef0d05f02430bcaba.src","preCode":"  public void testNonDedup() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount_2/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount_2/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    createTestingData(jobDir);\n\n    EmbeddedGobblin embeddedGobblin_nondedup = createEmbeddedGobblin(\"basic\", basePath.getAbsolutePath().toString())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n            TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, \"orc\")\n        .setConfiguration(COMPACTION_SHOULD_DEDUPLICATE, \"false\");\n    JobExecutionResult execution = embeddedGobblin_nondedup.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    for (FileStatus status : fs.listStatus(new Path(outputDir.getAbsolutePath()), new PathFilter() {\n      @Override\n      public boolean accept(Path path) {\n        return FilenameUtils.isExtension(path.getName(), \"orc\");\n      }\n    })) {\n      statuses.add(status);\n    }\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 4);\n\n    result.sort(new Comparator<OrcStruct>() {\n      @Override\n      public int compare(OrcStruct o1, OrcStruct o2) {\n        return o1.compareTo(o2);\n      }\n    });\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertEquals(result.get(3).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(3).getFieldValue(\"j\"), new IntWritable(5));\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/OrcCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"M"}],"commitId":"778a8634978981e63d3a096af336b14f79aebeca","commitMessage":"@@@[GOBBLIN-1257] Fix the handling of collection field types during ORC schema up-conversion in compaction[]\n\nCloses #3097 from sv2000/orcCompaction\n","date":"2020-09-09 02:26:14","modifiedFileCount":"4","status":"M","submitter":"sv2000"}]
