[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testGetHiveSpecs() throws IOException {\n    State state = new State();\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3\");\n\n    this.path = new Path(getClass().getResource(\"/test-hive-table\").toString());\n\n    Collection<HiveSpec> specs = new HiveRegistrationPolicyBase(state).getHiveSpecs(this.path);\n\n    Assert.assertEquals(specs.size(), 6);\n    Iterator<HiveSpec> iterator = specs.iterator();\n    HiveSpec spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl3\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl3\");\n  }\n","date":"2017-07-31 15:51:25","endLine":69,"groupId":"7514","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetHiveSpecs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/6e/da1d28149e6125a10a488cea4283d4f148cefc.src","preCode":"  public void testGetHiveSpecs() throws IOException {\n    State state = new State();\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3\");\n\n    this.path = new Path(getClass().getResource(\"/test-hive-table\").toString());\n\n    Collection<HiveSpec> specs = new HiveRegistrationPolicyBase(state).getHiveSpecs(this.path);\n\n    Assert.assertEquals(specs.size(), 6);\n    Iterator<HiveSpec> iterator = specs.iterator();\n    HiveSpec spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl3\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl3\");\n  }\n","realPath":"gobblin-hive-registration/src/test/java/org/apache/gobblin/hive/policy/HiveRegistrationPolicyBaseTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testGetHiveSpecsWithDBFilter() throws IOException{\n    State state = new State();\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3,$PRIMARY_TABLE_col\");\n\n    state.appendToListProp(\"db2.\" + HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"$PRIMARY_TABLE_col,tbl4,tbl5\");\n\n    this.path = new Path(getClass().getResource(\"/test-hive-table\").toString());\n\n    Collection<HiveSpec> specs = new HiveRegistrationPolicyBase(state).getHiveSpecs(this.path);\n\n    Assert.assertEquals(specs.size(), 7);\n    Iterator<HiveSpec> iterator = specs.iterator();\n    HiveSpec spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl3\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl4\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl5\");\n  }\n","date":"2017-07-31 15:51:25","endLine":102,"groupId":"7514","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetHiveSpecsWithDBFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/6e/da1d28149e6125a10a488cea4283d4f148cefc.src","preCode":"  public void testGetHiveSpecsWithDBFilter() throws IOException{\n    State state = new State();\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3,$PRIMARY_TABLE_col\");\n\n    state.appendToListProp(\"db2.\" + HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"$PRIMARY_TABLE_col,tbl4,tbl5\");\n\n    this.path = new Path(getClass().getResource(\"/test-hive-table\").toString());\n\n    Collection<HiveSpec> specs = new HiveRegistrationPolicyBase(state).getHiveSpecs(this.path);\n\n    Assert.assertEquals(specs.size(), 7);\n    Iterator<HiveSpec> iterator = specs.iterator();\n    HiveSpec spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl3\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl4\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl5\");\n  }\n","realPath":"gobblin-hive-registration/src/test/java/org/apache/gobblin/hive/policy/HiveRegistrationPolicyBaseTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2020-09-12 07:28:05","codes":[{"authorDate":"2020-09-12 07:28:05","commitOrder":2,"curCode":"  public void testGetHiveSpecs()\n      throws IOException {\n    State state = new State();\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n    state.appendToListProp(ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3\");\n\n    this.path = new Path(getClass().getResource(\"/test-hive-table\").toString());\n\n    Collection<HiveSpec> specs = new HiveRegistrationPolicyBase(state).getHiveSpecs(this.path);\n\n    Assert.assertEquals(specs.size(), 6);\n    Iterator<HiveSpec> iterator = specs.iterator();\n    HiveSpec spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl3\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl3\");\n  }\n","date":"2020-09-12 07:28:05","endLine":80,"groupId":"101201","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testGetHiveSpecs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b2/36755409c9363b81bbbf4ccf72ab7cbef9caef.src","preCode":"  public void testGetHiveSpecs()\n      throws IOException {\n    State state = new State();\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3\");\n\n    this.path = new Path(getClass().getResource(\"/test-hive-table\").toString());\n\n    Collection<HiveSpec> specs = new HiveRegistrationPolicyBase(state).getHiveSpecs(this.path);\n\n    Assert.assertEquals(specs.size(), 6);\n    Iterator<HiveSpec> iterator = specs.iterator();\n    HiveSpec spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl3\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl3\");\n  }\n","realPath":"gobblin-hive-registration/src/test/java/org/apache/gobblin/hive/policy/HiveRegistrationPolicyBaseTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2020-09-12 07:28:05","commitOrder":2,"curCode":"  public void testGetHiveSpecsWithDBFilter()\n      throws IOException {\n    State state = new State();\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n    state.appendToListProp(ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3,$PRIMARY_TABLE_col\");\n\n    state.appendToListProp(\"db2.\" + HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"$PRIMARY_TABLE_col,tbl4,tbl5\");\n\n    this.path = new Path(getClass().getResource(\"/test-hive-table\").toString());\n\n    Collection<HiveSpec> specs = new HiveRegistrationPolicyBase(state).getHiveSpecs(this.path);\n\n    Assert.assertEquals(specs.size(), 7);\n    Iterator<HiveSpec> iterator = specs.iterator();\n    HiveSpec spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl3\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl4\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl5\");\n  }\n","date":"2020-09-12 07:28:05","endLine":141,"groupId":"101201","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testGetHiveSpecsWithDBFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b2/36755409c9363b81bbbf4ccf72ab7cbef9caef.src","preCode":"  public void testGetHiveSpecsWithDBFilter()\n      throws IOException {\n    State state = new State();\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3,$PRIMARY_TABLE_col\");\n\n    state.appendToListProp(\"db2.\" + HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"$PRIMARY_TABLE_col,tbl4,tbl5\");\n\n    this.path = new Path(getClass().getResource(\"/test-hive-table\").toString());\n\n    Collection<HiveSpec> specs = new HiveRegistrationPolicyBase(state).getHiveSpecs(this.path);\n\n    Assert.assertEquals(specs.size(), 7);\n    Iterator<HiveSpec> iterator = specs.iterator();\n    HiveSpec spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl3\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl4\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl5\");\n  }\n","realPath":"gobblin-hive-registration/src/test/java/org/apache/gobblin/hive/policy/HiveRegistrationPolicyBaseTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"e49c068c5f3c9876ff5e89bfd16f3274d0335d00","commitMessage":"@@@[GOBBLIN-1263] Dataset specific Database name for registration\n\nDataset specific Database name for registration\n\nmove the getListOfValuesFromConfigStore to utils\nclass\n\nCloses #3104 from autumnust/datasetLevelDBReg\n","date":"2020-09-12 07:28:05","modifiedFileCount":"3","status":"M","submitter":"Lei Sun"}]
