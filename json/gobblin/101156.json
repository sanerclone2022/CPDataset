[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      if (!isActive && helixManager.isPresent()) {\n        _log.info(\"Scheduler running in slave mode, forward Spec add via Helix message to master: \" + addedSpec);\n        HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_ADD, addedSpec.getUri().toString(),\n            UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n        return;\n      }\n\n      try {\n        Properties jobConfig = new Properties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"Scheduling flow spec: \" + addedSpec);\n          scheduleJob(jobConfig, null);\n          if (jobConfig.containsKey(ConfigurationKeys.FLOW_RUN_IMMEDIATELY)) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"Failed to schedule or run FlowSpec \" + addedSpec, je);\n      }\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":196,"groupId":"7815","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f6/f101b8dd2fcae1aa8a7d39f1d017d061c1f51a.src","preCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      if (!isActive && helixManager.isPresent()) {\n        _log.info(\"Scheduler running in slave mode, forward Spec add via Helix message to master: \" + addedSpec);\n        HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_ADD, addedSpec.getUri().toString(),\n            UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n        return;\n      }\n\n      try {\n        Properties jobConfig = new Properties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"Scheduling flow spec: \" + addedSpec);\n          scheduleJob(jobConfig, null);\n          if (jobConfig.containsKey(ConfigurationKeys.FLOW_RUN_IMMEDIATELY)) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"Failed to schedule or run FlowSpec \" + addedSpec, je);\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    if (!isActive && helixManager.isPresent()) {\n      _log.info(\"Scheduler running in slave mode, forward Spec update via Helix message to master: \" + updatedSpec);\n      HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, updatedSpec.getUri().toString(),\n          UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":258,"groupId":"2799","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f6/f101b8dd2fcae1aa8a7d39f1d017d061c1f51a.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    if (!isActive && helixManager.isPresent()) {\n      _log.info(\"Scheduler running in slave mode, forward Spec update via Helix message to master: \" + updatedSpec);\n      HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, updatedSpec.getUri().toString(),\n          UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-08-09 09:04:17","commitOrder":2,"curCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      if (!isActive && helixManager.isPresent()) {\n        _log.info(\"Scheduler running in slave mode, forward Spec add via Helix message to master: \" + addedSpec);\n        HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_ADD, addedSpec.getUri().toString(),\n            UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n        return;\n      }\n\n      try {\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)\n            && StringUtils.isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY, flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"Scheduling flow spec: \" + addedSpec);\n          scheduleJob(jobConfig, null);\n          if (jobConfig.containsKey(ConfigurationKeys.FLOW_RUN_IMMEDIATELY)) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"Failed to schedule or run FlowSpec \" + addedSpec, je);\n      }\n    }\n  }\n","date":"2017-08-09 09:04:17","endLine":202,"groupId":"2796","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/5b/d71c3d7b7fff4f2aa68e8897b7ac2e481a24ee.src","preCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      if (!isActive && helixManager.isPresent()) {\n        _log.info(\"Scheduler running in slave mode, forward Spec add via Helix message to master: \" + addedSpec);\n        HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_ADD, addedSpec.getUri().toString(),\n            UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n        return;\n      }\n\n      try {\n        Properties jobConfig = new Properties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"Scheduling flow spec: \" + addedSpec);\n          scheduleJob(jobConfig, null);\n          if (jobConfig.containsKey(ConfigurationKeys.FLOW_RUN_IMMEDIATELY)) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"Failed to schedule or run FlowSpec \" + addedSpec, je);\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    if (!isActive && helixManager.isPresent()) {\n      _log.info(\"Scheduler running in slave mode, forward Spec update via Helix message to master: \" + updatedSpec);\n      HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, updatedSpec.getUri().toString(),\n          UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":258,"groupId":"2799","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f6/f101b8dd2fcae1aa8a7d39f1d017d061c1f51a.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    if (!isActive && helixManager.isPresent()) {\n      _log.info(\"Scheduler running in slave mode, forward Spec update via Helix message to master: \" + updatedSpec);\n      HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, updatedSpec.getUri().toString(),\n          UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"N"}],"commitId":"a28ff21852db0c231297ad75dd66027432a6537b","commitMessage":"@@@[GOBBLIN-191] Make sure cron scheduler works and tune schedule period\n\nCloses #2042 from abti/service\n","date":"2017-08-09 09:04:17","modifiedFileCount":"1","status":"M","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-08-18 22:12:42","commitOrder":3,"curCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      if (!isActive && helixManager.isPresent()) {\n        _log.info(\"Scheduler running in slave mode, forward Spec add via Helix message to master: \" + addedSpec);\n        HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_ADD, addedSpec.getUri().toString(),\n            UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n        return;\n      }\n\n      try {\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            ((FlowSpec) addedSpec).getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)\n            && StringUtils.isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY, flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"Scheduling flow spec: \" + addedSpec);\n          scheduleJob(jobConfig, null);\n          if (jobConfig.containsKey(ConfigurationKeys.FLOW_RUN_IMMEDIATELY)) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"Failed to schedule or run FlowSpec \" + addedSpec, je);\n      }\n    }\n  }\n","date":"2017-08-18 22:12:42","endLine":204,"groupId":"2796","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c3/c6a3f8e87e9999217fa9d8312cb7d53d8151eb.src","preCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      if (!isActive && helixManager.isPresent()) {\n        _log.info(\"Scheduler running in slave mode, forward Spec add via Helix message to master: \" + addedSpec);\n        HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_ADD, addedSpec.getUri().toString(),\n            UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n        return;\n      }\n\n      try {\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)\n            && StringUtils.isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY, flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"Scheduling flow spec: \" + addedSpec);\n          scheduleJob(jobConfig, null);\n          if (jobConfig.containsKey(ConfigurationKeys.FLOW_RUN_IMMEDIATELY)) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"Failed to schedule or run FlowSpec \" + addedSpec, je);\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":3,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    if (!isActive && helixManager.isPresent()) {\n      _log.info(\"Scheduler running in slave mode, forward Spec update via Helix message to master: \" + updatedSpec);\n      HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, updatedSpec.getUri().toString(),\n          UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":258,"groupId":"2799","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f6/f101b8dd2fcae1aa8a7d39f1d017d061c1f51a.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    if (!isActive && helixManager.isPresent()) {\n      _log.info(\"Scheduler running in slave mode, forward Spec update via Helix message to master: \" + updatedSpec);\n      HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, updatedSpec.getUri().toString(),\n          UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"N"}],"commitId":"dddc0b3eadb0a8572c28a2ea3580d500ccd1ccf1","commitMessage":"@@@[GOBBLIN-213][GOBBLIN-191] Add scheduler service to GobblinServiceManager\n\n[GOBBLIN-191] Make sure cron scheduler works and\ntune schedule period\n\nMerge branch 'master' into service\n\n[GOBBLIN-213] Add scheduler service to\nGobblinServiceManager\n\nCloses #2066 from abti/service\n","date":"2017-08-18 22:12:42","modifiedFileCount":"2","status":"M","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-08-22 16:43:58","commitOrder":4,"curCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      if (!isActive && helixManager.isPresent()) {\n        _log.info(\"Scheduler running in slave mode, forward Spec add via Helix message to master: \" + addedSpec);\n        HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_ADD, addedSpec.getUri().toString(),\n            UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n        return;\n      }\n\n      try {\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            ((FlowSpec) addedSpec).getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString(((FlowSpec) addedSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)\n            && StringUtils.isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY, flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"Scheduling flow spec: \" + addedSpec);\n          scheduleJob(jobConfig, null);\n          if (jobConfig.containsKey(ConfigurationKeys.FLOW_RUN_IMMEDIATELY)) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"Failed to schedule or run FlowSpec \" + addedSpec, je);\n      }\n    }\n  }\n","date":"2017-08-22 16:45:02","endLine":206,"groupId":"2796","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d2/23f9098732602c5329886e8d9e1f38a6c6f2aa.src","preCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      if (!isActive && helixManager.isPresent()) {\n        _log.info(\"Scheduler running in slave mode, forward Spec add via Helix message to master: \" + addedSpec);\n        HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_ADD, addedSpec.getUri().toString(),\n            UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n        return;\n      }\n\n      try {\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            ((FlowSpec) addedSpec).getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)\n            && StringUtils.isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY, flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"Scheduling flow spec: \" + addedSpec);\n          scheduleJob(jobConfig, null);\n          if (jobConfig.containsKey(ConfigurationKeys.FLOW_RUN_IMMEDIATELY)) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"Failed to schedule or run FlowSpec \" + addedSpec, je);\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":4,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    if (!isActive && helixManager.isPresent()) {\n      _log.info(\"Scheduler running in slave mode, forward Spec update via Helix message to master: \" + updatedSpec);\n      HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, updatedSpec.getUri().toString(),\n          UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":258,"groupId":"2799","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f6/f101b8dd2fcae1aa8a7d39f1d017d061c1f51a.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    if (!isActive && helixManager.isPresent()) {\n      _log.info(\"Scheduler running in slave mode, forward Spec update via Helix message to master: \" + updatedSpec);\n      HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, updatedSpec.getUri().toString(),\n          UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"N"}],"commitId":"5f724600401dd6c7204a9d649c6316b04ad2bca6","commitMessage":"@@@[GOBBLIN-218] Make sure cron scheduler works and tune schedule period\n\nCloses #2069 from abti/service\n","date":"2017-08-22 16:45:02","modifiedFileCount":"1","status":"M","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-10-06 04:35:11","commitOrder":5,"curCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      if (!isActive && helixManager.isPresent()) {\n        _log.info(\"Scheduler running in slave mode, forward Spec add via Helix message to master: \" + addedSpec);\n        HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_ADD, addedSpec.getUri().toString(),\n            UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n        return;\n      }\n\n      try {\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            ((FlowSpec) addedSpec).getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString(((FlowSpec) addedSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)\n            && StringUtils.isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY, flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"Scheduling flow spec: \" + addedSpec);\n          scheduleJob(jobConfig, null);\n          if (jobConfig.containsKey(ConfigurationKeys.FLOW_RUN_IMMEDIATELY)) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"Failed to schedule or run FlowSpec \" + addedSpec, je);\n      }\n    }\n  }\n","date":"2017-10-06 04:35:11","endLine":211,"groupId":"2796","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/0e/abf2c25f0fa68b4e8a49d3b4e44e8ceee3137c.src","preCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      if (!isActive && helixManager.isPresent()) {\n        _log.info(\"Scheduler running in slave mode, forward Spec add via Helix message to master: \" + addedSpec);\n        HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_ADD, addedSpec.getUri().toString(),\n            UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n        return;\n      }\n\n      try {\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            ((FlowSpec) addedSpec).getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString(((FlowSpec) addedSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)\n            && StringUtils.isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY, flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"Scheduling flow spec: \" + addedSpec);\n          scheduleJob(jobConfig, null);\n          if (jobConfig.containsKey(ConfigurationKeys.FLOW_RUN_IMMEDIATELY)) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"Failed to schedule or run FlowSpec \" + addedSpec, je);\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":5,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    if (!isActive && helixManager.isPresent()) {\n      _log.info(\"Scheduler running in slave mode, forward Spec update via Helix message to master: \" + updatedSpec);\n      HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, updatedSpec.getUri().toString(),\n          UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":258,"groupId":"2799","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f6/f101b8dd2fcae1aa8a7d39f1d017d061c1f51a.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    if (!isActive && helixManager.isPresent()) {\n      _log.info(\"Scheduler running in slave mode, forward Spec update via Helix message to master: \" + updatedSpec);\n      HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, updatedSpec.getUri().toString(),\n          UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"N"}],"commitId":"bd17f1384736a70a26a0808ca406608436373812","commitMessage":"@@@[GOBBLIN-276] Change setActive order to prevent flow spec loss\n\nCloses #2129 from yukuai518/topologyOrder\n","date":"2017-10-06 04:35:11","modifiedFileCount":"5","status":"M","submitter":"Kuai Yu"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2018-02-23 00:22:45","commitOrder":6,"curCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      if (!isActive && helixManager.isPresent()) {\n        _log.info(\"Scheduler running in slave mode, forward Spec add via Helix message to master: \" + addedSpec);\n        HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_ADD, addedSpec.getUri().toString(),\n            UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n        return;\n      }\n\n      try {\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            ((FlowSpec) addedSpec).getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString(((FlowSpec) addedSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils\n            .isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"Scheduling flow spec: \" + addedSpec);\n          scheduleJob(jobConfig, null);\n          if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"Failed to schedule or run FlowSpec \" + addedSpec, je);\n      }\n    }\n  }\n","date":"2018-02-23 00:22:45","endLine":238,"groupId":"2796","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ae/18fc20d1875d18bd5b569f6ef131fafe076b69.src","preCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      if (!isActive && helixManager.isPresent()) {\n        _log.info(\"Scheduler running in slave mode, forward Spec add via Helix message to master: \" + addedSpec);\n        HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_ADD, addedSpec.getUri().toString(),\n            UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n        return;\n      }\n\n      try {\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            ((FlowSpec) addedSpec).getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString(((FlowSpec) addedSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils\n            .isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"Scheduling flow spec: \" + addedSpec);\n          scheduleJob(jobConfig, null);\n          if (jobConfig.containsKey(ConfigurationKeys.FLOW_RUN_IMMEDIATELY)) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"Failed to schedule or run FlowSpec \" + addedSpec, je);\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":6,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    if (!isActive && helixManager.isPresent()) {\n      _log.info(\"Scheduler running in slave mode, forward Spec update via Helix message to master: \" + updatedSpec);\n      HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, updatedSpec.getUri().toString(),\n          UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":258,"groupId":"2799","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f6/f101b8dd2fcae1aa8a7d39f1d017d061c1f51a.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    if (!isActive && helixManager.isPresent()) {\n      _log.info(\"Scheduler running in slave mode, forward Spec update via Helix message to master: \" + updatedSpec);\n      HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, updatedSpec.getUri().toString(),\n          UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"N"}],"commitId":"52bf10de714e14eddb7eb6ab2f54fb0cc3a1e341","commitMessage":"@@@[GOBBLIN-415] Check for the value of configuration key flow.runImmediately in Job config.\n\nCloses #2291 from sv2000/gobblin-415\n","date":"2018-02-23 00:22:45","modifiedFileCount":"1","status":"M","submitter":"suvasude"},{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2018-05-17 02:40:22","commitOrder":7,"curCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      try {\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            ((FlowSpec) addedSpec).getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString(((FlowSpec) addedSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils\n            .isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n          scheduleJob(jobConfig, null);\n          if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName,  addedSpec, je);\n      }\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":227,"groupId":"2796","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/50/6a53e7b2d8c8334ed5c66c71b4f3b410824d28.src","preCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      if (!isActive && helixManager.isPresent()) {\n        _log.info(\"Scheduler running in slave mode, forward Spec add via Helix message to master: \" + addedSpec);\n        HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_ADD, addedSpec.getUri().toString(),\n            UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n        return;\n      }\n\n      try {\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            ((FlowSpec) addedSpec).getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString(((FlowSpec) addedSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils\n            .isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"Scheduling flow spec: \" + addedSpec);\n          scheduleJob(jobConfig, null);\n          if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"Failed to schedule or run FlowSpec \" + addedSpec, je);\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2018-05-17 02:40:22","commitOrder":7,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":286,"groupId":"2799","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/50/6a53e7b2d8c8334ed5c66c71b4f3b410824d28.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    if (!isActive && helixManager.isPresent()) {\n      _log.info(\"Scheduler running in slave mode, forward Spec update via Helix message to master: \" + updatedSpec);\n      HelixUtils.sendUserDefinedMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, updatedSpec.getUri().toString(),\n          UUID.randomUUID().toString(), InstanceType.CONTROLLER, helixManager.get(), _log);\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"}],"commitId":"01302a6db2c468507c0adea5daa69de997aaf14b","commitMessage":"@@@[GOBBLIN-458] Refactor flowConfig resource handler\n\nCloses #2329 from yukuai518/delete\n","date":"2018-05-17 02:40:22","modifiedFileCount":"9","status":"M","submitter":"Kuai Yu"},{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2018-05-19 04:48:51","commitOrder":8,"curCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      try {\n        FlowSpec flowSpec  = (FlowSpec) addedSpec;\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            flowSpec.getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString((flowSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils\n            .isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n          scheduleJob(jobConfig, null);\n          if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), false, jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), true, jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName,  addedSpec, je);\n      }\n    }\n  }\n","date":"2018-05-19 04:48:51","endLine":228,"groupId":"2796","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/1e/c791a0137af761e07c45522031f833a4b00ee0.src","preCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      try {\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            ((FlowSpec) addedSpec).getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString(((FlowSpec) addedSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils\n            .isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n          scheduleJob(jobConfig, null);\n          if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName,  addedSpec, je);\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2018-05-17 02:40:22","commitOrder":8,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":286,"groupId":"2799","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/50/6a53e7b2d8c8334ed5c66c71b4f3b410824d28.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"N"}],"commitId":"7af61741c0206c87052b2e769c245ceb21673d97","commitMessage":"@@@[GOBBLIN-495] Remove flowSpec when it is a runOnce case\n\nCloses #2366 from yukuai518/flowSpec\n","date":"2018-05-19 04:48:51","modifiedFileCount":"3","status":"M","submitter":"Kuai Yu"},{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2019-03-18 10:52:52","commitOrder":9,"curCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      try {\n        FlowSpec flowSpec  = (FlowSpec) addedSpec;\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            flowSpec.getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString((flowSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils\n            .isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n        boolean isExplain = ConfigUtils.getBoolean(flowSpec.getConfig(), ConfigurationKeys.FLOW_EXPLAIN_KEY, false);\n        String compiledFlow = null;\n        if (!isExplain) {\n          this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n          if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n            _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n            scheduleJob(jobConfig, null);\n            if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n              _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n              this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), false, jobConfig, null));\n            }\n          } else {\n            _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), true, jobConfig, null));\n          }\n        } else {\n          \r\n          try {\n            this.orchestrator.getSpecCompiler().awaitHealthy();\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n          Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n          if (dag != null && !dag.isEmpty()) {\n            compiledFlow = dag.toString();\n          }\n          _log.info(\"{} Skipping adding flow spec: {}, since it is an EXPLAIN request\", this.serviceName, addedSpec);\n\n          if (this.flowCatalog.isPresent()) {\n            _log.debug(\"{} Removing flow spec from FlowCatalog: {}\", this.serviceName, flowSpec);\n            this.flowCatalog.get().remove(flowSpec.getUri(), new Properties(), false);\n          }\n        }\n        return new AddSpecResponse(compiledFlow);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName,  addedSpec, je);\n      }\n    }\n    return null;\n  }\n","date":"2019-03-18 10:52:52","endLine":251,"groupId":"3104","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e5/dc41ee3a6c9e6fd6a0fec9bd46bb373f4f163f.src","preCode":"  public void onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      try {\n        FlowSpec flowSpec  = (FlowSpec) addedSpec;\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            flowSpec.getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString((flowSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils\n            .isNotBlank(flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n\n        this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n        if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n          _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n          scheduleJob(jobConfig, null);\n          if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n            _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), false, jobConfig, null));\n          }\n        } else {\n          _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n          this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), true, jobConfig, null));\n        }\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName,  addedSpec, je);\n      }\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2018-05-17 02:40:22","commitOrder":9,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":286,"groupId":"2799","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/50/6a53e7b2d8c8334ed5c66c71b4f3b410824d28.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"N"}],"commitId":"aadf53dbb8acc5a3de0249d3695384fdefa4eb35","commitMessage":"@@@[GOBBLIN-696] Provide an \"explain\" option to return a compiled flow wh?\n\nCloses #2567 from sv2000/dagPlan1\n","date":"2019-03-18 10:52:52","modifiedFileCount":"19","status":"M","submitter":"suvasude"},{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2019-10-23 07:05:40","commitOrder":10,"curCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      try {\n        FlowSpec flowSpec = (FlowSpec) addedSpec;\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            flowSpec.getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString((flowSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils.isNotBlank(\n            flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n        boolean isExplain = ConfigUtils.getBoolean(flowSpec.getConfig(), ConfigurationKeys.FLOW_EXPLAIN_KEY, false);\n        String response = null;\n        if (!isExplain) {\n          this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n          if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n            _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n            scheduleJob(jobConfig, null);\n            if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n              _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n              this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), false, jobConfig, null));\n            }\n          } else {\n            _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), true, jobConfig, null));\n          }\n        } else {\n          \r\n          Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n          if (dag != null && !dag.isEmpty()) {\n            response = dag.toString();\n          } else if (!flowSpec.getCompilationErrors().isEmpty()) {\n            response = Arrays.toString(flowSpec.getCompilationErrors().toArray());\n          }\n          _log.info(\"{} Skipping adding flow spec: {}, since it is an EXPLAIN request\", this.serviceName, addedSpec);\n\n          if (this.flowCatalog.isPresent()) {\n            _log.debug(\"{} Removing flow spec from FlowCatalog: {}\", this.serviceName, flowSpec);\n            this.flowCatalog.get().remove(flowSpec.getUri(), new Properties(), false);\n          }\n        }\n        return new AddSpecResponse(response);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n      }\n    }\n    return null;\n  }\n","date":"2019-10-23 07:05:40","endLine":322,"groupId":"2796","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/79/8f7a3c168cd3762e933a6e272db4481becfe95.src","preCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      try {\n        FlowSpec flowSpec = (FlowSpec) addedSpec;\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            flowSpec.getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString((flowSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils.isNotBlank(\n            flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n        boolean isExplain = ConfigUtils.getBoolean(flowSpec.getConfig(), ConfigurationKeys.FLOW_EXPLAIN_KEY, false);\n        String compiledFlow = null;\n        if (!isExplain) {\n          this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n          if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n            _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n            scheduleJob(jobConfig, null);\n            if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n              _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n              this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), false, jobConfig, null));\n            }\n          } else {\n            _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), true, jobConfig, null));\n          }\n        } else {\n          \r\n          try {\n            this.orchestrator.getSpecCompiler().awaitHealthy();\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n          Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n          if (dag != null && !dag.isEmpty()) {\n            compiledFlow = dag.toString();\n          }\n          _log.info(\"{} Skipping adding flow spec: {}, since it is an EXPLAIN request\", this.serviceName, addedSpec);\n\n          if (this.flowCatalog.isPresent()) {\n            _log.debug(\"{} Removing flow spec from FlowCatalog: {}\", this.serviceName, flowSpec);\n            this.flowCatalog.get().remove(flowSpec.getUri(), new Properties(), false);\n          }\n        }\n        return new AddSpecResponse(compiledFlow);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n      }\n    }\n    return null;\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2018-05-17 02:40:22","commitOrder":10,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":286,"groupId":"2799","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/50/6a53e7b2d8c8334ed5c66c71b4f3b410824d28.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"N"}],"commitId":"14ff4e537810f48115f71c27210f0881a45fdbe6","commitMessage":"@@@[GOBBLIN-909] Return error message for unresolved substitutions in explain query\n\nCloses #2763 from jack-moseley/explain-unresolved\n","date":"2019-10-23 07:05:40","modifiedFileCount":"9","status":"M","submitter":"Jack Moseley"},{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2020-03-13 02:01:09","commitOrder":11,"curCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      try {\n        FlowSpec flowSpec = (FlowSpec) addedSpec;\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            flowSpec.getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString((flowSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils.isNotBlank(\n            flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n        boolean isExplain = ConfigUtils.getBoolean(flowSpec.getConfig(), ConfigurationKeys.FLOW_EXPLAIN_KEY, false);\n        String response = null;\n\n        \r\n        Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n        if (dag != null && !dag.isEmpty()) {\n          response = dag.toString();\n        } else if (!flowSpec.getCompilationErrors().isEmpty()) {\n          response = Arrays.toString(flowSpec.getCompilationErrors().toArray());\n        }\n\n        if (!isExplain) {\n          this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n          if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n            _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n            scheduleJob(jobConfig, null);\n            if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n              _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n              this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), false, jobConfig, null));\n            }\n          } else {\n            _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), true, jobConfig, null));\n          }\n        } else {\n          _log.info(\"{} Skipping adding flow spec: {}, since it is an EXPLAIN request\", this.serviceName, addedSpec);\n\n          if (this.flowCatalog.isPresent()) {\n            _log.debug(\"{} Removing flow spec from FlowCatalog: {}\", this.serviceName, flowSpec);\n            this.flowCatalog.get().remove(flowSpec.getUri(), new Properties(), false);\n          }\n        }\n        return new AddSpecResponse<>(response);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n      }\n    }\n    return null;\n  }\n","date":"2020-03-13 02:01:09","endLine":324,"groupId":"6747","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/01/f6a1346f06f294fecfe06c19236db6a968be08.src","preCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      try {\n        FlowSpec flowSpec = (FlowSpec) addedSpec;\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            flowSpec.getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString((flowSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils.isNotBlank(\n            flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n        boolean isExplain = ConfigUtils.getBoolean(flowSpec.getConfig(), ConfigurationKeys.FLOW_EXPLAIN_KEY, false);\n        String response = null;\n        if (!isExplain) {\n          this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n          if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n            _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n            scheduleJob(jobConfig, null);\n            if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n              _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n              this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), false, jobConfig, null));\n            }\n          } else {\n            _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), true, jobConfig, null));\n          }\n        } else {\n          \r\n          Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n          if (dag != null && !dag.isEmpty()) {\n            response = dag.toString();\n          } else if (!flowSpec.getCompilationErrors().isEmpty()) {\n            response = Arrays.toString(flowSpec.getCompilationErrors().toArray());\n          }\n          _log.info(\"{} Skipping adding flow spec: {}, since it is an EXPLAIN request\", this.serviceName, addedSpec);\n\n          if (this.flowCatalog.isPresent()) {\n            _log.debug(\"{} Removing flow spec from FlowCatalog: {}\", this.serviceName, flowSpec);\n            this.flowCatalog.get().remove(flowSpec.getUri(), new Properties(), false);\n          }\n        }\n        return new AddSpecResponse(response);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n      }\n    }\n    return null;\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2018-05-17 02:40:22","commitOrder":11,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":286,"groupId":"2799","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/50/6a53e7b2d8c8334ed5c66c71b4f3b410824d28.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"N"}],"commitId":"5796bb4c890cf4c7e48c061907232289cfb08ab9","commitMessage":"@@@[GOBBLIN-1082] compile a flow before storing it in spec catalog\n\nCloses #2921 from\narjun4084346/storeSpecAfterCompile\n","date":"2020-03-13 02:01:09","modifiedFileCount":"4","status":"M","submitter":"Arjun"},{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2020-03-20 11:32:25","commitOrder":12,"curCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      try {\n        FlowSpec flowSpec = (FlowSpec) addedSpec;\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            flowSpec.getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString((flowSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils.isNotBlank(\n            flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n        boolean isExplain = ConfigUtils.getBoolean(flowSpec.getConfig(), ConfigurationKeys.FLOW_EXPLAIN_KEY, false);\n        String response = null;\n\n        \r\n        Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n        if (dag != null && !dag.isEmpty()) {\n          response = dag.toString();\n        } else if (!flowSpec.getCompilationErrors().isEmpty()) {\n          response = Arrays.toString(flowSpec.getCompilationErrors().toArray());\n        }\n\n        if (!isExplain) {\n          this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n          if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n            _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n            scheduleJob(jobConfig, null);\n            if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n              _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n              this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), false, jobConfig, null));\n            }\n          } else {\n            _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), true, jobConfig, null));\n          }\n        }\n        return new AddSpecResponse<>(response);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n      }\n    }\n    return null;\n  }\n","date":"2020-03-20 11:32:25","endLine":317,"groupId":"6747","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/af/c401b93935f49f0c1dba1a9d6c00d21e37d04b.src","preCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      try {\n        FlowSpec flowSpec = (FlowSpec) addedSpec;\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            flowSpec.getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString((flowSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils.isNotBlank(\n            flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n        boolean isExplain = ConfigUtils.getBoolean(flowSpec.getConfig(), ConfigurationKeys.FLOW_EXPLAIN_KEY, false);\n        String response = null;\n\n        \r\n        Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n        if (dag != null && !dag.isEmpty()) {\n          response = dag.toString();\n        } else if (!flowSpec.getCompilationErrors().isEmpty()) {\n          response = Arrays.toString(flowSpec.getCompilationErrors().toArray());\n        }\n\n        if (!isExplain) {\n          this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n          if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n            _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n            scheduleJob(jobConfig, null);\n            if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n              _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n              this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), false, jobConfig, null));\n            }\n          } else {\n            _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), true, jobConfig, null));\n          }\n        } else {\n          _log.info(\"{} Skipping adding flow spec: {}, since it is an EXPLAIN request\", this.serviceName, addedSpec);\n\n          if (this.flowCatalog.isPresent()) {\n            _log.debug(\"{} Removing flow spec from FlowCatalog: {}\", this.serviceName, flowSpec);\n            this.flowCatalog.get().remove(flowSpec.getUri(), new Properties(), false);\n          }\n        }\n        return new AddSpecResponse<>(response);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n      }\n    }\n    return null;\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2018-05-17 02:40:22","commitOrder":12,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":286,"groupId":"2799","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/50/6a53e7b2d8c8334ed5c66c71b4f3b410824d28.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"N"}],"commitId":"64cc9ffaa8a9a232a4181305a9500bbc4229cd7a","commitMessage":"@@@[GOBBLIN-1092][Gobblin 1092] added some logs.  fix checkstyle.  removed some redundant code\n\nCloses #2932 from arjun4084346/debug\n","date":"2020-03-20 11:32:25","modifiedFileCount":"9","status":"M","submitter":"Arjun"},{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2020-05-15 01:18:36","commitOrder":13,"curCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      try {\n        FlowSpec flowSpec = (FlowSpec) addedSpec;\n        URI flowSpecUri = flowSpec.getUri();\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            flowSpec.getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString((flowSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils.isNotBlank(\n            flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n        boolean isExplain = ConfigUtils.getBoolean(flowSpec.getConfig(), ConfigurationKeys.FLOW_EXPLAIN_KEY, false);\n        String response = null;\n\n        \r\n        Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n        if (dag != null && !dag.isEmpty()) {\n          response = dag.toString();\n        } else if (!flowSpec.getCompilationErrors().isEmpty()) {\n          response = Arrays.toString(flowSpec.getCompilationErrors().toArray());\n        }\n\n        boolean compileSuccess = FlowCatalog.isCompileSuccessful(response);\n\n        if (!isExplain && compileSuccess) {\n          this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n          if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n            _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n            scheduleJob(jobConfig, null);\n            if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n              _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n              this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, false, jobConfig, null));\n            }\n          } else {\n            _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, true, jobConfig, null));\n          }\n        } else {\n          _log.info(\"Removing the flow spec: {}, isExplain: {}, compileSuccess: {}\", addedSpec, isExplain, compileSuccess);\n          if (this.flowCatalog.isPresent()) {\n            _log.debug(\"Removing flow spec from FlowCatalog: {}\", flowSpec);\n            GobblinServiceJobScheduler.this.flowCatalog.get().remove(flowSpecUri, new Properties(), false);\n          }\n        }\n        return new AddSpecResponse<>(response);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n      }\n    }\n    return null;\n  }\n","date":"2020-05-15 01:18:36","endLine":326,"groupId":"6747","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4f/2c9ff3a5bec8e7211f5118e696a374c8d2ee14.src","preCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      try {\n        FlowSpec flowSpec = (FlowSpec) addedSpec;\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            flowSpec.getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString((flowSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils.isNotBlank(\n            flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n        boolean isExplain = ConfigUtils.getBoolean(flowSpec.getConfig(), ConfigurationKeys.FLOW_EXPLAIN_KEY, false);\n        String response = null;\n\n        \r\n        Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n        if (dag != null && !dag.isEmpty()) {\n          response = dag.toString();\n        } else if (!flowSpec.getCompilationErrors().isEmpty()) {\n          response = Arrays.toString(flowSpec.getCompilationErrors().toArray());\n        }\n\n        if (!isExplain) {\n          this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n          if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n            _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n            scheduleJob(jobConfig, null);\n            if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n              _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n              this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), false, jobConfig, null));\n            }\n          } else {\n            _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(flowSpec.getUri(), true, jobConfig, null));\n          }\n        }\n        return new AddSpecResponse<>(response);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n      }\n    }\n    return null;\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2018-05-17 02:40:22","commitOrder":13,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":286,"groupId":"2799","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/50/6a53e7b2d8c8334ed5c66c71b4f3b410824d28.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"N"}],"commitId":"76d5a3bab26b471b722787d735f3df696beecd68","commitMessage":"@@@[GOBBLIN-1144] remove specs from gobblin service job scheduler\n\nDear Gobblin maintainers. \n\nPlease accept this PR. I understand that it will\nnot be reviewed until I have checked off all the\nsteps below!\n\n\n JIRA\n- [x] My PR addresses the following [Gobblin JIRA]\n(https://issues.apache.org/jira/browse/GOBBLIN/)\nissues and references them in the PR title. For\nexample.  \"[GOBBLIN-XXX] My Gobblin PR\"\n    -\nhttps://issues.apache.org/jira/browse/GOBBLIN-1144\n\n\n Description\n- [x] Here are some details about my PR.  including\nscreenshots (if applicable):\nimplement option 4 mentioned in the doc https://do\ncs.google.com/document/d/1OsImllAZRnJIp2NWEOdlfw0X\ntqY1b-ysyKEZYLHwVbQ/edit\n\n\n Tests\n- [x] My PR adds the following unit tests __OR__\ndoes not need testing for this extremely good\nreason:\ntrivial changes\n\n\n Commits\n- [x] My commits all reference JIRA issues in\ntheir subject lines.  and I have squashed multiple\ncommits if they address the same issue. In\naddition.  my commits follow the guidelines from\n\"[How to write a good git commit\nmessage](http://chris.beams.io/posts/git-\ncommit/)\":\n    1. Subject is separated from body by a blank line\n    2. Subject is limited to 50 characters\n    3. Subject does not end with a period\n    4. Subject uses the imperative mood (\"add\".  not\n\"adding\")\n    5. Body wraps at 72 characters\n    6. Body explains \"what\" and \"why\".  not \"how\"\n\nCloses #2981 from\narjun4084346/flowCatalogRaceCondition\n","date":"2020-05-15 01:18:36","modifiedFileCount":"2","status":"M","submitter":"Arjun"},{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2020-06-02 05:44:20","commitOrder":14,"curCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (!(addedSpec instanceof FlowSpec)) {\n      return null;\n    }\n\n    FlowSpec flowSpec = (FlowSpec) addedSpec;\n    URI flowSpecUri = flowSpec.getUri();\n    Properties jobConfig = createJobConfig(flowSpec);\n    boolean isExplain = flowSpec.isExplain();\n    String response = null;\n\n    \r\n    Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n    if (dag != null && !dag.isEmpty()) {\n      response = dag.toString();\n    } else if (!flowSpec.getCompilationErrors().isEmpty()) {\n      response = Arrays.toString(flowSpec.getCompilationErrors().toArray());\n    }\n\n    boolean compileSuccess = FlowCatalog.isCompileSuccessful(response);\n\n    if (isExplain || !compileSuccess) {\n      \r\n      \r\n      _log.info(\"Ignoring the spec {}. isExplain: {}, compileSuccess: {}\", addedSpec, isExplain, compileSuccess);\n      return new AddSpecResponse<>(response);\n    }\n\n    \r\n    this.scheduledFlowSpecs.put(flowSpecUri.toString(), addedSpec);\n\n    if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n      _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n      try {\n        scheduleJob(jobConfig, null);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n        this.scheduledFlowSpecs.remove(addedSpec.getUri().toString());\n        return null;\n      }\n      if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n        _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n        this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, false, jobConfig, null));\n      }\n    } else {\n      _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n      this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, true, jobConfig, null));\n    }\n\n    return new AddSpecResponse<>(response);\n  }\n","date":"2020-06-02 05:44:20","endLine":322,"groupId":"847","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/5c/70807bbc83a9caa32d34bc07cf11c64833c2dc.src","preCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (addedSpec instanceof FlowSpec) {\n      try {\n        FlowSpec flowSpec = (FlowSpec) addedSpec;\n        URI flowSpecUri = flowSpec.getUri();\n        Properties jobConfig = new Properties();\n        Properties flowSpecProperties = ((FlowSpec) addedSpec).getConfigAsProperties();\n        jobConfig.putAll(this.properties);\n        jobConfig.setProperty(ConfigurationKeys.JOB_NAME_KEY, addedSpec.getUri().toString());\n        jobConfig.setProperty(ConfigurationKeys.JOB_GROUP_KEY,\n            flowSpec.getConfig().getValue(ConfigurationKeys.FLOW_GROUP_KEY).toString());\n        jobConfig.setProperty(ConfigurationKeys.FLOW_RUN_IMMEDIATELY,\n            ConfigUtils.getString((flowSpec).getConfig(), ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\"));\n        if (flowSpecProperties.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY) && StringUtils.isNotBlank(\n            flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY))) {\n          jobConfig.setProperty(ConfigurationKeys.JOB_SCHEDULE_KEY,\n              flowSpecProperties.getProperty(ConfigurationKeys.JOB_SCHEDULE_KEY));\n        }\n        boolean isExplain = ConfigUtils.getBoolean(flowSpec.getConfig(), ConfigurationKeys.FLOW_EXPLAIN_KEY, false);\n        String response = null;\n\n        \r\n        Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n        if (dag != null && !dag.isEmpty()) {\n          response = dag.toString();\n        } else if (!flowSpec.getCompilationErrors().isEmpty()) {\n          response = Arrays.toString(flowSpec.getCompilationErrors().toArray());\n        }\n\n        boolean compileSuccess = FlowCatalog.isCompileSuccessful(response);\n\n        if (!isExplain && compileSuccess) {\n          this.scheduledFlowSpecs.put(addedSpec.getUri().toString(), addedSpec);\n\n          if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n            _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n            scheduleJob(jobConfig, null);\n            if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n              _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n              this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, false, jobConfig, null));\n            }\n          } else {\n            _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n            this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, true, jobConfig, null));\n          }\n        } else {\n          _log.info(\"Removing the flow spec: {}, isExplain: {}, compileSuccess: {}\", addedSpec, isExplain, compileSuccess);\n          if (this.flowCatalog.isPresent()) {\n            _log.debug(\"Removing flow spec from FlowCatalog: {}\", flowSpec);\n            GobblinServiceJobScheduler.this.flowCatalog.get().remove(flowSpecUri, new Properties(), false);\n          }\n        }\n        return new AddSpecResponse<>(response);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n      }\n    }\n    return null;\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"},{"authorDate":"2018-05-17 02:40:22","commitOrder":14,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":286,"groupId":"2799","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/50/6a53e7b2d8c8334ed5c66c71b4f3b410824d28.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"N"}],"commitId":"6bc395c3c1428852a30b5add8db7402be7b4b1ae","commitMessage":"@@@[GOBBLIN-1160] No spec delete on gobblin service start\n\nCloses #3011 from arjun4084346/noSpecRemoveOnStart\n","date":"2020-06-02 05:44:20","modifiedFileCount":"7","status":"M","submitter":"Arjun"},{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2020-07-22 07:14:52","commitOrder":15,"curCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (!(addedSpec instanceof FlowSpec)) {\n      return null;\n    }\n\n    FlowSpec flowSpec = (FlowSpec) addedSpec;\n    URI flowSpecUri = flowSpec.getUri();\n    Properties jobConfig = createJobConfig(flowSpec);\n    boolean isExplain = flowSpec.isExplain();\n    String response = null;\n\n    \r\n    Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n    if (dag != null && !dag.isEmpty()) {\n      response = dag.toString();\n    } else if (!flowSpec.getCompilationErrors().isEmpty()) {\n      response = Arrays.toString(flowSpec.getCompilationErrors().toArray());\n    }\n\n    boolean compileSuccess = FlowCatalog.isCompileSuccessful(response);\n\n    if (isExplain || !compileSuccess || !this.isActive) {\n      \r\n      \r\n      _log.info(\"Ignoring the spec {}. isExplain: {}, compileSuccess: {}, master: {}\",\n          addedSpec, isExplain, compileSuccess, this.isActive);\n      return new AddSpecResponse<>(response);\n    }\n\n    \r\n    this.scheduledFlowSpecs.put(flowSpecUri.toString(), addedSpec);\n\n    if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n      _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n      try {\n        scheduleJob(jobConfig, null);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n        this.scheduledFlowSpecs.remove(addedSpec.getUri().toString());\n        return null;\n      }\n      if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n        _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n        this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, false, jobConfig, null));\n      }\n    } else {\n      _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n      this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, true, jobConfig, null));\n    }\n\n    return new AddSpecResponse<>(response);\n  }\n","date":"2020-07-22 07:14:52","endLine":323,"groupId":"847","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/fb/17a876574363a9b299350ef479dd9b940ac613.src","preCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (!(addedSpec instanceof FlowSpec)) {\n      return null;\n    }\n\n    FlowSpec flowSpec = (FlowSpec) addedSpec;\n    URI flowSpecUri = flowSpec.getUri();\n    Properties jobConfig = createJobConfig(flowSpec);\n    boolean isExplain = flowSpec.isExplain();\n    String response = null;\n\n    \r\n    Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n    if (dag != null && !dag.isEmpty()) {\n      response = dag.toString();\n    } else if (!flowSpec.getCompilationErrors().isEmpty()) {\n      response = Arrays.toString(flowSpec.getCompilationErrors().toArray());\n    }\n\n    boolean compileSuccess = FlowCatalog.isCompileSuccessful(response);\n\n    if (isExplain || !compileSuccess) {\n      \r\n      \r\n      _log.info(\"Ignoring the spec {}. isExplain: {}, compileSuccess: {}\", addedSpec, isExplain, compileSuccess);\n      return new AddSpecResponse<>(response);\n    }\n\n    \r\n    this.scheduledFlowSpecs.put(flowSpecUri.toString(), addedSpec);\n\n    if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n      _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n      try {\n        scheduleJob(jobConfig, null);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n        this.scheduledFlowSpecs.remove(addedSpec.getUri().toString());\n        return null;\n      }\n      if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n        _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n        this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, false, jobConfig, null));\n      }\n    } else {\n      _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n      this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, true, jobConfig, null));\n    }\n\n    return new AddSpecResponse<>(response);\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"},{"authorDate":"2018-05-17 02:40:22","commitOrder":15,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":286,"groupId":"2799","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/50/6a53e7b2d8c8334ed5c66c71b4f3b410824d28.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"N"}],"commitId":"80071e3d84b96a9a82baa9387f27e811b61a9032","commitMessage":"@@@[GOBBLIN-1219] do not schedule flow spec from slave instance of GobblinServiceJobScheduler\n\nCloses #3067 from arjun4084346/addDagOnSlaveNode\n","date":"2020-07-22 07:14:52","modifiedFileCount":"2","status":"M","submitter":"Arjun"},{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2021-06-05 06:46:57","commitOrder":16,"curCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (!(addedSpec instanceof FlowSpec)) {\n      return null;\n    }\n\n    FlowSpec flowSpec = (FlowSpec) addedSpec;\n    URI flowSpecUri = flowSpec.getUri();\n    Properties jobConfig = createJobConfig(flowSpec);\n    boolean isExplain = flowSpec.isExplain();\n    String response = null;\n\n    \r\n    Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n    \r\n    if (dag != null && !dag.isEmpty()) {\n      response = dag.toString();\n    }\n\n    boolean compileSuccess = FlowCatalog.isCompileSuccessful(response);\n\n    if (isExplain || !compileSuccess || !this.isActive) {\n      \r\n      \r\n      _log.info(\"Ignoring the spec {}. isExplain: {}, compileSuccess: {}, master: {}\",\n          addedSpec, isExplain, compileSuccess, this.isActive);\n      return new AddSpecResponse<>(response);\n    }\n\n    \r\n    this.scheduledFlowSpecs.put(flowSpecUri.toString(), addedSpec);\n\n    if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n      _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n      try {\n        scheduleJob(jobConfig, null);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n        this.scheduledFlowSpecs.remove(addedSpec.getUri().toString());\n        return null;\n      }\n      if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n        _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n        this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, false, jobConfig, null));\n      }\n    } else {\n      _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n      this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, true, jobConfig, null));\n    }\n\n    return new AddSpecResponse<>(response);\n  }\n","date":"2021-06-05 06:46:57","endLine":328,"groupId":"1467","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/53/366aeaaaf19f0f38379f46e75a63b02a7ac4cb.src","preCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (!(addedSpec instanceof FlowSpec)) {\n      return null;\n    }\n\n    FlowSpec flowSpec = (FlowSpec) addedSpec;\n    URI flowSpecUri = flowSpec.getUri();\n    Properties jobConfig = createJobConfig(flowSpec);\n    boolean isExplain = flowSpec.isExplain();\n    String response = null;\n\n    \r\n    Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n    if (dag != null && !dag.isEmpty()) {\n      response = dag.toString();\n    } else if (!flowSpec.getCompilationErrors().isEmpty()) {\n      response = Arrays.toString(flowSpec.getCompilationErrors().toArray());\n    }\n\n    boolean compileSuccess = FlowCatalog.isCompileSuccessful(response);\n\n    if (isExplain || !compileSuccess || !this.isActive) {\n      \r\n      \r\n      _log.info(\"Ignoring the spec {}. isExplain: {}, compileSuccess: {}, master: {}\",\n          addedSpec, isExplain, compileSuccess, this.isActive);\n      return new AddSpecResponse<>(response);\n    }\n\n    \r\n    this.scheduledFlowSpecs.put(flowSpecUri.toString(), addedSpec);\n\n    if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n      _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n      try {\n        scheduleJob(jobConfig, null);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n        this.scheduledFlowSpecs.remove(addedSpec.getUri().toString());\n        return null;\n      }\n      if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n        _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n        this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, false, jobConfig, null));\n      }\n    } else {\n      _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n      this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, true, jobConfig, null));\n    }\n\n    return new AddSpecResponse<>(response);\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"},{"authorDate":"2018-05-17 02:40:22","commitOrder":16,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":286,"groupId":"2799","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/50/6a53e7b2d8c8334ed5c66c71b4f3b410824d28.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"N"}],"commitId":"381b659d3da7a241d6f038696396e6bba690120e","commitMessage":"@@@[GOBBLIN-1453] Improve error reporting on failed flow compilations and fix bugs wher?\n\nCloses #3291 from Will-Lo/modify-flow-compilation-\nerror-reporting\n","date":"2021-06-05 06:46:57","modifiedFileCount":"11","status":"M","submitter":"William Lo"},{"authorTime":"2021-06-05 07:43:36","codes":[{"authorDate":"2021-06-05 06:46:57","commitOrder":17,"curCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (!(addedSpec instanceof FlowSpec)) {\n      return null;\n    }\n\n    FlowSpec flowSpec = (FlowSpec) addedSpec;\n    URI flowSpecUri = flowSpec.getUri();\n    Properties jobConfig = createJobConfig(flowSpec);\n    boolean isExplain = flowSpec.isExplain();\n    String response = null;\n\n    \r\n    Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n    \r\n    if (dag != null && !dag.isEmpty()) {\n      response = dag.toString();\n    }\n\n    boolean compileSuccess = FlowCatalog.isCompileSuccessful(response);\n\n    if (isExplain || !compileSuccess || !this.isActive) {\n      \r\n      \r\n      _log.info(\"Ignoring the spec {}. isExplain: {}, compileSuccess: {}, master: {}\",\n          addedSpec, isExplain, compileSuccess, this.isActive);\n      return new AddSpecResponse<>(response);\n    }\n\n    \r\n    this.scheduledFlowSpecs.put(flowSpecUri.toString(), addedSpec);\n\n    if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n      _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n      try {\n        scheduleJob(jobConfig, null);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n        this.scheduledFlowSpecs.remove(addedSpec.getUri().toString());\n        return null;\n      }\n      if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n        _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n        this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, false, jobConfig, null));\n      }\n    } else {\n      _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n      this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, true, jobConfig, null));\n    }\n\n    return new AddSpecResponse<>(response);\n  }\n","date":"2021-06-05 06:46:57","endLine":328,"groupId":"101156","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"onAddSpec","params":"(SpecaddedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/53/366aeaaaf19f0f38379f46e75a63b02a7ac4cb.src","preCode":"  public AddSpecResponse onAddSpec(Spec addedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Addition: \" + addedSpec);\n      return null;\n    }\n\n    _log.info(\"New Flow Spec detected: \" + addedSpec);\n\n    if (!(addedSpec instanceof FlowSpec)) {\n      return null;\n    }\n\n    FlowSpec flowSpec = (FlowSpec) addedSpec;\n    URI flowSpecUri = flowSpec.getUri();\n    Properties jobConfig = createJobConfig(flowSpec);\n    boolean isExplain = flowSpec.isExplain();\n    String response = null;\n\n    \r\n    Dag<JobExecutionPlan> dag = this.orchestrator.getSpecCompiler().compileFlow(flowSpec);\n    \r\n    if (dag != null && !dag.isEmpty()) {\n      response = dag.toString();\n    }\n\n    boolean compileSuccess = FlowCatalog.isCompileSuccessful(response);\n\n    if (isExplain || !compileSuccess || !this.isActive) {\n      \r\n      \r\n      _log.info(\"Ignoring the spec {}. isExplain: {}, compileSuccess: {}, master: {}\",\n          addedSpec, isExplain, compileSuccess, this.isActive);\n      return new AddSpecResponse<>(response);\n    }\n\n    \r\n    this.scheduledFlowSpecs.put(flowSpecUri.toString(), addedSpec);\n\n    if (jobConfig.containsKey(ConfigurationKeys.JOB_SCHEDULE_KEY)) {\n      _log.info(\"{} Scheduling flow spec: {} \", this.serviceName, addedSpec);\n      try {\n        scheduleJob(jobConfig, null);\n      } catch (JobException je) {\n        _log.error(\"{} Failed to schedule or run FlowSpec {}\", serviceName, addedSpec, je);\n        this.scheduledFlowSpecs.remove(addedSpec.getUri().toString());\n        return null;\n      }\n      if (PropertiesUtils.getPropAsBoolean(jobConfig, ConfigurationKeys.FLOW_RUN_IMMEDIATELY, \"false\")) {\n        _log.info(\"RunImmediately requested, hence executing FlowSpec: \" + addedSpec);\n        this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, false, jobConfig, null));\n      }\n    } else {\n      _log.info(\"No FlowSpec schedule found, so running FlowSpec: \" + addedSpec);\n      this.jobExecutor.execute(new NonScheduledJobRunner(flowSpecUri, true, jobConfig, null));\n    }\n\n    return new AddSpecResponse<>(response);\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"N"},{"authorDate":"2021-06-05 07:43:36","commitOrder":17,"curCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","date":"2021-06-05 07:43:36","endLine":382,"groupId":"101156","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"onUpdateSpec","params":"(SpecupdatedSpec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d4/cadc6812902f67b9840f24ce9795c48cd4bc86.src","preCode":"  public void onUpdateSpec(Spec updatedSpec) {\n    if (this.helixManager.isPresent() && !this.helixManager.get().isConnected()) {\n      \r\n      \r\n      _log.info(\"System not yet initialized. Skipping Spec Update: \" + updatedSpec);\n      return;\n    }\n\n    _log.info(\"Spec changed: \" + updatedSpec);\n\n    if (!(updatedSpec instanceof FlowSpec)) {\n      return;\n    }\n\n    try {\n      onDeleteSpec(updatedSpec.getUri(), updatedSpec.getVersion());\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n    try {\n      onAddSpec(updatedSpec);\n    } catch (Exception e) {\n      _log.error(\"Failed to update Spec: \" + updatedSpec, e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/scheduler/GobblinServiceJobScheduler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"M"}],"commitId":"5199078a82dcb338bcc66b81631b4e6c7bd75c5f","commitMessage":"@@@[GOBBLIN-1456] do not remove spec on update\n\nCloses #3295 from arjun4084346/fix_update\n","date":"2021-06-05 07:43:36","modifiedFileCount":"1","status":"M","submitter":"Arjun"}]
