[{"authorTime":"2020-08-19 01:57:46","codes":[{"authorDate":"2020-04-17 07:05:57","commitOrder":2,"curCode":"  public void testAvroRecompaction() throws Exception {\n    FileSystem fs = getFileSystem();\n    String basePath = \"/tmp/testRecompaction\";\n    fs.delete(new Path(basePath), true);\n\n    File jobDir = new File(basePath, \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\");\n    Assert.assertTrue(jobDir.mkdirs());\n\n    GenericRecord r1 = createRandomRecord();\n    writeFileWithContent(jobDir, \"file1\", r1, 20);\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin (\"Recompaction-First\", basePath);\n    JobExecutionResult result = embeddedGobblin.run();\n    long recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertTrue(result.isSuccessful());\n    Assert.assertEquals(recordCount, 20);\n\n    \r\n    writeFileWithContent(jobDir, \"file2\", r1, 22);\n    EmbeddedGobblin embeddedGobblin_2 = createEmbeddedGobblin (\"Recompaction-Second\", basePath);\n    embeddedGobblin_2.run();\n    Assert.assertTrue(result.isSuccessful());\n\n    \r\n    recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertEquals(recordCount, 42);\n    Assert.assertTrue(fs.exists(new Path (basePath, \"Identity/MemberAccount/hourly/2017/04/03/10\")));\n  }\n","date":"2020-04-17 07:05:57","endLine":171,"groupId":"3848","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAvroRecompaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2a/04d68ab6547dc1b2b360480e549a37651a15b4.src","preCode":"  public void testAvroRecompaction() throws Exception {\n    FileSystem fs = getFileSystem();\n    String basePath = \"/tmp/testRecompaction\";\n    fs.delete(new Path(basePath), true);\n\n    File jobDir = new File(basePath, \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\");\n    Assert.assertTrue(jobDir.mkdirs());\n\n    GenericRecord r1 = createRandomRecord();\n    writeFileWithContent(jobDir, \"file1\", r1, 20);\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin (\"Recompaction-First\", basePath);\n    JobExecutionResult result = embeddedGobblin.run();\n    long recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertTrue(result.isSuccessful());\n    Assert.assertEquals(recordCount, 20);\n\n    \r\n    writeFileWithContent(jobDir, \"file2\", r1, 22);\n    EmbeddedGobblin embeddedGobblin_2 = createEmbeddedGobblin (\"Recompaction-Second\", basePath);\n    embeddedGobblin_2.run();\n    Assert.assertTrue(result.isSuccessful());\n\n    \r\n    recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertEquals(recordCount, 42);\n    Assert.assertTrue(fs.exists(new Path (basePath, \"Identity/MemberAccount/hourly/2017/04/03/10\")));\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"NB"},{"authorDate":"2020-08-19 01:57:46","commitOrder":2,"curCode":"  public void testAvroRecompactionWriteToNewPath() throws Exception {\n    FileSystem fs = getFileSystem();\n    String basePath = \"/tmp/testRecompactionWriteToNewPath\";\n    fs.delete(new Path(basePath), true);\n\n    File jobDir = new File(basePath, \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\");\n    Assert.assertTrue(jobDir.mkdirs());\n\n    GenericRecord r1 = createRandomRecord();\n    writeFileWithContent(jobDir, \"file1\", r1, 20);\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin (\"Recompaction-First\", basePath);\n    embeddedGobblin.setConfiguration(ConfigurationKeys.RECOMPACTION_WRITE_TO_NEW_FOLDER, \"true\");\n    JobExecutionResult result = embeddedGobblin.run();\n    long recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertTrue(result.isSuccessful());\n    Assert.assertEquals(recordCount, 20);\n\n    \r\n    writeFileWithContent(jobDir, \"file2\", r1, 22);\n    EmbeddedGobblin embeddedGobblin_2 = createEmbeddedGobblin (\"Recompaction-Second\", basePath);\n    embeddedGobblin_2.setConfiguration(ConfigurationKeys.RECOMPACTION_WRITE_TO_NEW_FOLDER, \"true\");\n    embeddedGobblin_2.run();\n    Assert.assertTrue(result.isSuccessful());\n\n    \r\n    recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertEquals(recordCount, 42);\n    \r\n    Assert.assertTrue(fs.exists(new Path (basePath, \"Identity/MemberAccount/hourly/2017/04/03/10/compaction_1\")));\n    Assert.assertTrue(fs.exists(new Path (basePath, \"Identity/MemberAccount/hourly/2017/04/03/10/compaction_2\")));\n  }\n","date":"2020-08-19 01:57:46","endLine":208,"groupId":"1511","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvroRecompactionWriteToNewPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/14/5ecf1c5c6fe282c88aec497d87b28f969ee0a3.src","preCode":"  public void testAvroRecompactionWriteToNewPath() throws Exception {\n    FileSystem fs = getFileSystem();\n    String basePath = \"/tmp/testRecompactionWriteToNewPath\";\n    fs.delete(new Path(basePath), true);\n\n    File jobDir = new File(basePath, \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\");\n    Assert.assertTrue(jobDir.mkdirs());\n\n    GenericRecord r1 = createRandomRecord();\n    writeFileWithContent(jobDir, \"file1\", r1, 20);\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin (\"Recompaction-First\", basePath);\n    embeddedGobblin.setConfiguration(ConfigurationKeys.RECOMPACTION_WRITE_TO_NEW_FOLDER, \"true\");\n    JobExecutionResult result = embeddedGobblin.run();\n    long recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertTrue(result.isSuccessful());\n    Assert.assertEquals(recordCount, 20);\n\n    \r\n    writeFileWithContent(jobDir, \"file2\", r1, 22);\n    EmbeddedGobblin embeddedGobblin_2 = createEmbeddedGobblin (\"Recompaction-Second\", basePath);\n    embeddedGobblin_2.setConfiguration(ConfigurationKeys.RECOMPACTION_WRITE_TO_NEW_FOLDER, \"true\");\n    embeddedGobblin_2.run();\n    Assert.assertTrue(result.isSuccessful());\n\n    \r\n    recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertEquals(recordCount, 42);\n    \r\n    Assert.assertTrue(fs.exists(new Path (basePath, \"Identity/MemberAccount/hourly/2017/04/03/10/compaction_1\")));\n    Assert.assertTrue(fs.exists(new Path (basePath, \"Identity/MemberAccount/hourly/2017/04/03/10/compaction_2\")));\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"B"}],"commitId":"099e9dbee62b1a9694f59e5b4d1ff1b6b46faa9b","commitMessage":"@@@[GOBBLIN-1231][GOBBLIN-1217][GOBBLIN-1223] Make re-compaction be able to write to a new folder based on the executCount\n\nCloses #3079 from ZihanLi58/GOBBLIN-1231\n","date":"2020-08-19 01:57:46","modifiedFileCount":"4","status":"M","submitter":"Zihan Li"},{"authorTime":"2020-09-09 02:26:14","codes":[{"authorDate":"2020-09-09 02:26:14","commitOrder":3,"curCode":"  public void testAvroRecompaction() throws Exception {\n    FileSystem fs = getFileSystem();\n    String basePath = \"/tmp/testRecompaction\";\n    fs.delete(new Path(basePath), true);\n\n    File jobDir = new File(basePath, \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\");\n    Assert.assertTrue(jobDir.mkdirs());\n\n    GenericRecord r1 = createRandomRecord();\n    writeFileWithContent(jobDir, \"file1\", r1, 20);\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblinCompactionJob(\"Recompaction-First\", basePath);\n    JobExecutionResult result = embeddedGobblin.run();\n    long recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertTrue(result.isSuccessful());\n    Assert.assertEquals(recordCount, 20);\n\n    \r\n    writeFileWithContent(jobDir, \"file2\", r1, 22);\n    EmbeddedGobblin embeddedGobblin_2 = createEmbeddedGobblinCompactionJob(\"Recompaction-Second\", basePath);\n    embeddedGobblin_2.run();\n    Assert.assertTrue(result.isSuccessful());\n\n    \r\n    recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertEquals(recordCount, 42);\n    Assert.assertTrue(fs.exists(new Path (basePath, \"Identity/MemberAccount/hourly/2017/04/03/10\")));\n  }\n","date":"2020-09-09 02:26:14","endLine":175,"groupId":"101553","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAvroRecompaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/22/3fc571bd2c078621822a93c90869863a1115bd.src","preCode":"  public void testAvroRecompaction() throws Exception {\n    FileSystem fs = getFileSystem();\n    String basePath = \"/tmp/testRecompaction\";\n    fs.delete(new Path(basePath), true);\n\n    File jobDir = new File(basePath, \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\");\n    Assert.assertTrue(jobDir.mkdirs());\n\n    GenericRecord r1 = createRandomRecord();\n    writeFileWithContent(jobDir, \"file1\", r1, 20);\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin (\"Recompaction-First\", basePath);\n    JobExecutionResult result = embeddedGobblin.run();\n    long recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertTrue(result.isSuccessful());\n    Assert.assertEquals(recordCount, 20);\n\n    \r\n    writeFileWithContent(jobDir, \"file2\", r1, 22);\n    EmbeddedGobblin embeddedGobblin_2 = createEmbeddedGobblin (\"Recompaction-Second\", basePath);\n    embeddedGobblin_2.run();\n    Assert.assertTrue(result.isSuccessful());\n\n    \r\n    recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertEquals(recordCount, 42);\n    Assert.assertTrue(fs.exists(new Path (basePath, \"Identity/MemberAccount/hourly/2017/04/03/10\")));\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2020-09-09 02:26:14","commitOrder":3,"curCode":"  public void testAvroRecompactionWriteToNewPath() throws Exception {\n    FileSystem fs = getFileSystem();\n    String basePath = \"/tmp/testRecompactionWriteToNewPath\";\n    fs.delete(new Path(basePath), true);\n\n    File jobDir = new File(basePath, \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\");\n    Assert.assertTrue(jobDir.mkdirs());\n\n    GenericRecord r1 = createRandomRecord();\n    writeFileWithContent(jobDir, \"file1\", r1, 20);\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblinCompactionJob(\"Recompaction-First\", basePath);\n    embeddedGobblin.setConfiguration(ConfigurationKeys.RECOMPACTION_WRITE_TO_NEW_FOLDER, \"true\");\n    JobExecutionResult result = embeddedGobblin.run();\n    long recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertTrue(result.isSuccessful());\n    Assert.assertEquals(recordCount, 20);\n\n    \r\n    writeFileWithContent(jobDir, \"file2\", r1, 22);\n    EmbeddedGobblin embeddedGobblin_2 = createEmbeddedGobblinCompactionJob(\"Recompaction-Second\", basePath);\n    embeddedGobblin_2.setConfiguration(ConfigurationKeys.RECOMPACTION_WRITE_TO_NEW_FOLDER, \"true\");\n    embeddedGobblin_2.run();\n    Assert.assertTrue(result.isSuccessful());\n\n    \r\n    recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertEquals(recordCount, 42);\n    \r\n    Assert.assertTrue(fs.exists(new Path (basePath, \"Identity/MemberAccount/hourly/2017/04/03/10/compaction_1\")));\n    Assert.assertTrue(fs.exists(new Path (basePath, \"Identity/MemberAccount/hourly/2017/04/03/10/compaction_2\")));\n  }\n","date":"2020-09-09 02:26:14","endLine":209,"groupId":"101553","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAvroRecompactionWriteToNewPath","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/22/3fc571bd2c078621822a93c90869863a1115bd.src","preCode":"  public void testAvroRecompactionWriteToNewPath() throws Exception {\n    FileSystem fs = getFileSystem();\n    String basePath = \"/tmp/testRecompactionWriteToNewPath\";\n    fs.delete(new Path(basePath), true);\n\n    File jobDir = new File(basePath, \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\");\n    Assert.assertTrue(jobDir.mkdirs());\n\n    GenericRecord r1 = createRandomRecord();\n    writeFileWithContent(jobDir, \"file1\", r1, 20);\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin (\"Recompaction-First\", basePath);\n    embeddedGobblin.setConfiguration(ConfigurationKeys.RECOMPACTION_WRITE_TO_NEW_FOLDER, \"true\");\n    JobExecutionResult result = embeddedGobblin.run();\n    long recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertTrue(result.isSuccessful());\n    Assert.assertEquals(recordCount, 20);\n\n    \r\n    writeFileWithContent(jobDir, \"file2\", r1, 22);\n    EmbeddedGobblin embeddedGobblin_2 = createEmbeddedGobblin (\"Recompaction-Second\", basePath);\n    embeddedGobblin_2.setConfiguration(ConfigurationKeys.RECOMPACTION_WRITE_TO_NEW_FOLDER, \"true\");\n    embeddedGobblin_2.run();\n    Assert.assertTrue(result.isSuccessful());\n\n    \r\n    recordCount = InputRecordCountHelper.readRecordCount(fs, (new Path (basePath, new Path(\"Identity/MemberAccount/hourly/2017/04/03/10\"))));\n    Assert.assertEquals(recordCount, 42);\n    \r\n    Assert.assertTrue(fs.exists(new Path (basePath, \"Identity/MemberAccount/hourly/2017/04/03/10/compaction_1\")));\n    Assert.assertTrue(fs.exists(new Path (basePath, \"Identity/MemberAccount/hourly/2017/04/03/10/compaction_2\")));\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"}],"commitId":"778a8634978981e63d3a096af336b14f79aebeca","commitMessage":"@@@[GOBBLIN-1257] Fix the handling of collection field types during ORC schema up-conversion in compaction[]\n\nCloses #3097 from sv2000/orcCompaction\n","date":"2020-09-09 02:26:14","modifiedFileCount":"4","status":"M","submitter":"sv2000"}]
