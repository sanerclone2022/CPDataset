[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testTupleDocumentWrite()\n      throws IOException, DataConversionException, ExecutionException, InterruptedException {\n    Properties props = new Properties();\n    props.setProperty(CouchbaseWriterConfigurationKeys.BUCKET, \"default\");\n    Config config = ConfigFactory.parseProperties(props);\n\n    CouchbaseWriter writer = new CouchbaseWriter(_couchbaseEnvironment, config);\n    try {\n      Schema dataRecordSchema =\n          SchemaBuilder.record(\"Data\").fields().name(\"data\").type().bytesType().noDefault().name(\"flags\").type().intType()\n              .noDefault().endRecord();\n\n      Schema schema = SchemaBuilder.record(\"TestRecord\").fields().name(\"key\").type().stringType().noDefault().name(\"data\")\n          .type(dataRecordSchema).noDefault().endRecord();\n\n      GenericData.Record testRecord = new GenericData.Record(schema);\n\n      String testContent = \"hello world\";\n\n      GenericData.Record dataRecord = new GenericData.Record(dataRecordSchema);\n      dataRecord.put(\"data\", ByteBuffer.wrap(testContent.getBytes(Charset.forName(\"UTF-8\"))));\n      dataRecord.put(\"flags\", 0);\n\n      testRecord.put(\"key\", \"hello\");\n      testRecord.put(\"data\", dataRecord);\n\n      Converter<Schema, String, GenericRecord, TupleDocument> recordConverter = new AvroToCouchbaseTupleConverter();\n\n      TupleDocument doc = recordConverter.convertRecord(\"\", testRecord, null).iterator().next();\n      writer.write(doc, null).get();\n      TupleDocument returnDoc = writer.getBucket().get(\"hello\", TupleDocument.class);\n\n      byte[] returnedBytes = new byte[returnDoc.content().value1().readableBytes()];\n      returnDoc.content().value1().readBytes(returnedBytes);\n      Assert.assertEquals(returnedBytes, testContent.getBytes(Charset.forName(\"UTF-8\")));\n\n      int returnedFlags = returnDoc.content().value2();\n      Assert.assertEquals(returnedFlags, 0);\n\n    } finally {\n      writer.close();\n    }\n\n  }\n","date":"2017-07-31 15:51:25","endLine":179,"groupId":"7192","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTupleDocumentWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c3/927de3f083e49db8c1d8bd5c3e0e1a85a02529.src","preCode":"  public void testTupleDocumentWrite()\n      throws IOException, DataConversionException, ExecutionException, InterruptedException {\n    Properties props = new Properties();\n    props.setProperty(CouchbaseWriterConfigurationKeys.BUCKET, \"default\");\n    Config config = ConfigFactory.parseProperties(props);\n\n    CouchbaseWriter writer = new CouchbaseWriter(_couchbaseEnvironment, config);\n    try {\n      Schema dataRecordSchema =\n          SchemaBuilder.record(\"Data\").fields().name(\"data\").type().bytesType().noDefault().name(\"flags\").type().intType()\n              .noDefault().endRecord();\n\n      Schema schema = SchemaBuilder.record(\"TestRecord\").fields().name(\"key\").type().stringType().noDefault().name(\"data\")\n          .type(dataRecordSchema).noDefault().endRecord();\n\n      GenericData.Record testRecord = new GenericData.Record(schema);\n\n      String testContent = \"hello world\";\n\n      GenericData.Record dataRecord = new GenericData.Record(dataRecordSchema);\n      dataRecord.put(\"data\", ByteBuffer.wrap(testContent.getBytes(Charset.forName(\"UTF-8\"))));\n      dataRecord.put(\"flags\", 0);\n\n      testRecord.put(\"key\", \"hello\");\n      testRecord.put(\"data\", dataRecord);\n\n      Converter<Schema, String, GenericRecord, TupleDocument> recordConverter = new AvroToCouchbaseTupleConverter();\n\n      TupleDocument doc = recordConverter.convertRecord(\"\", testRecord, null).iterator().next();\n      writer.write(doc, null).get();\n      TupleDocument returnDoc = writer.getBucket().get(\"hello\", TupleDocument.class);\n\n      byte[] returnedBytes = new byte[returnDoc.content().value1().readableBytes()];\n      returnDoc.content().value1().readBytes(returnedBytes);\n      Assert.assertEquals(returnedBytes, testContent.getBytes(Charset.forName(\"UTF-8\")));\n\n      int returnedFlags = returnDoc.content().value2();\n      Assert.assertEquals(returnedFlags, 0);\n\n    } finally {\n      writer.close();\n    }\n\n  }\n","realPath":"gobblin-modules/gobblin-couchbase/src/test/java/org/apache/gobblin/couchbase/writer/CouchbaseWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testBasicConvert() throws Exception {\n\n    Schema dataRecordSchema = SchemaBuilder.record(\"Data\")\n        .fields()\n        .name(\"data\").type().bytesType().noDefault()\n        .name(\"flags\").type().intType().noDefault()\n        .endRecord();\n\n    Schema schema = SchemaBuilder.record(\"TestRecord\")\n        .fields()\n        .name(\"key\").type().stringType().noDefault()\n        .name(\"data\").type(dataRecordSchema).noDefault()\n        .endRecord();\n\n    GenericData.Record testRecord = new GenericData.Record(schema);\n\n\n    String testContent = \"hello world\";\n    GenericData.Record dataRecord = new GenericData.Record(dataRecordSchema);\n    dataRecord.put(\"data\", ByteBuffer.wrap(testContent.getBytes(Charset.forName(\"UTF-8\"))));\n    dataRecord.put(\"flags\", 0);\n\n    testRecord.put(\"key\", \"hello\");\n    testRecord.put(\"data\", dataRecord);\n\n    Converter<Schema, String, GenericRecord, TupleDocument> recordConverter = new AvroToCouchbaseTupleConverter();\n\n    TupleDocument returnDoc = recordConverter.convertRecord(\"\", testRecord, null).iterator().next();\n    byte[] returnedBytes = new byte[returnDoc.content().value1().readableBytes()];\n    returnDoc.content().value1().readBytes(returnedBytes);\n    Assert.assertEquals(returnedBytes, testContent.getBytes(Charset.forName(\"UTF-8\")));\n\n    int returnedFlags = returnDoc.content().value2();\n    Assert.assertEquals(returnedFlags, 0);\n\n  }\n","date":"2017-07-31 15:51:25","endLine":73,"groupId":"7192","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"testBasicConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d3/eb404c51b825b878443cb165a5bb7692af5300.src","preCode":"  public void testBasicConvert() throws Exception {\n\n    Schema dataRecordSchema = SchemaBuilder.record(\"Data\")\n        .fields()\n        .name(\"data\").type().bytesType().noDefault()\n        .name(\"flags\").type().intType().noDefault()\n        .endRecord();\n\n    Schema schema = SchemaBuilder.record(\"TestRecord\")\n        .fields()\n        .name(\"key\").type().stringType().noDefault()\n        .name(\"data\").type(dataRecordSchema).noDefault()\n        .endRecord();\n\n    GenericData.Record testRecord = new GenericData.Record(schema);\n\n\n    String testContent = \"hello world\";\n    GenericData.Record dataRecord = new GenericData.Record(dataRecordSchema);\n    dataRecord.put(\"data\", ByteBuffer.wrap(testContent.getBytes(Charset.forName(\"UTF-8\"))));\n    dataRecord.put(\"flags\", 0);\n\n    testRecord.put(\"key\", \"hello\");\n    testRecord.put(\"data\", dataRecord);\n\n    Converter<Schema, String, GenericRecord, TupleDocument> recordConverter = new AvroToCouchbaseTupleConverter();\n\n    TupleDocument returnDoc = recordConverter.convertRecord(\"\", testRecord, null).iterator().next();\n    byte[] returnedBytes = new byte[returnDoc.content().value1().readableBytes()];\n    returnDoc.content().value1().readBytes(returnedBytes);\n    Assert.assertEquals(returnedBytes, testContent.getBytes(Charset.forName(\"UTF-8\")));\n\n    int returnedFlags = returnDoc.content().value2();\n    Assert.assertEquals(returnedFlags, 0);\n\n  }\n","realPath":"gobblin-modules/gobblin-couchbase/src/test/java/org/apache/gobblin/couchbase/converter/AvroToCouchbaseTupleConverterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2019-09-17 11:25:09","commitOrder":2,"curCode":"  public void testTupleDocumentWrite()\n      throws IOException, DataConversionException, ExecutionException, InterruptedException {\n    Config config = getConfig(\"default\", Optional.empty(), Optional.empty(), Optional.empty());\n\n    CouchbaseWriter writer = new CouchbaseWriter(_couchbaseEnvironment, config);\n    try {\n      Schema dataRecordSchema =\n          SchemaBuilder.record(\"Data\").fields().name(\"data\").type().bytesType().noDefault().name(\"flags\").type().intType()\n              .noDefault().endRecord();\n\n      Schema schema = SchemaBuilder.record(\"TestRecord\").fields().name(\"key\").type().stringType().noDefault().name(\"data\")\n          .type(dataRecordSchema).noDefault().endRecord();\n\n      GenericData.Record testRecord = new GenericData.Record(schema);\n\n      String testContent = \"hello world\";\n\n      GenericData.Record dataRecord = new GenericData.Record(dataRecordSchema);\n      dataRecord.put(\"data\", ByteBuffer.wrap(testContent.getBytes(Charset.forName(\"UTF-8\"))));\n      dataRecord.put(\"flags\", 0);\n\n      testRecord.put(\"key\", \"hello\");\n      testRecord.put(\"data\", dataRecord);\n\n      Converter<Schema, String, GenericRecord, TupleDocument> recordConverter = new AvroToCouchbaseTupleConverter();\n\n      TupleDocument doc = recordConverter.convertRecord(\"\", testRecord, null).iterator().next();\n      writer.write(doc, null).get();\n      TupleDocument returnDoc = writer.getBucket().get(\"hello\", TupleDocument.class);\n\n      byte[] returnedBytes = new byte[returnDoc.content().value1().readableBytes()];\n      returnDoc.content().value1().readBytes(returnedBytes);\n      Assert.assertEquals(returnedBytes, testContent.getBytes(Charset.forName(\"UTF-8\")));\n\n      int returnedFlags = returnDoc.content().value2();\n      Assert.assertEquals(returnedFlags, 0);\n\n    } finally {\n      writer.close();\n    }\n\n  }\n","date":"2019-09-17 11:25:09","endLine":180,"groupId":"10618","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testTupleDocumentWrite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/5a/01de9f00a59c6fd6aa043ac273eb8d9e52e0bf.src","preCode":"  public void testTupleDocumentWrite()\n      throws IOException, DataConversionException, ExecutionException, InterruptedException {\n    Properties props = new Properties();\n    props.setProperty(CouchbaseWriterConfigurationKeys.BUCKET, \"default\");\n    Config config = ConfigFactory.parseProperties(props);\n\n    CouchbaseWriter writer = new CouchbaseWriter(_couchbaseEnvironment, config);\n    try {\n      Schema dataRecordSchema =\n          SchemaBuilder.record(\"Data\").fields().name(\"data\").type().bytesType().noDefault().name(\"flags\").type().intType()\n              .noDefault().endRecord();\n\n      Schema schema = SchemaBuilder.record(\"TestRecord\").fields().name(\"key\").type().stringType().noDefault().name(\"data\")\n          .type(dataRecordSchema).noDefault().endRecord();\n\n      GenericData.Record testRecord = new GenericData.Record(schema);\n\n      String testContent = \"hello world\";\n\n      GenericData.Record dataRecord = new GenericData.Record(dataRecordSchema);\n      dataRecord.put(\"data\", ByteBuffer.wrap(testContent.getBytes(Charset.forName(\"UTF-8\"))));\n      dataRecord.put(\"flags\", 0);\n\n      testRecord.put(\"key\", \"hello\");\n      testRecord.put(\"data\", dataRecord);\n\n      Converter<Schema, String, GenericRecord, TupleDocument> recordConverter = new AvroToCouchbaseTupleConverter();\n\n      TupleDocument doc = recordConverter.convertRecord(\"\", testRecord, null).iterator().next();\n      writer.write(doc, null).get();\n      TupleDocument returnDoc = writer.getBucket().get(\"hello\", TupleDocument.class);\n\n      byte[] returnedBytes = new byte[returnDoc.content().value1().readableBytes()];\n      returnDoc.content().value1().readBytes(returnedBytes);\n      Assert.assertEquals(returnedBytes, testContent.getBytes(Charset.forName(\"UTF-8\")));\n\n      int returnedFlags = returnDoc.content().value2();\n      Assert.assertEquals(returnedFlags, 0);\n\n    } finally {\n      writer.close();\n    }\n\n  }\n","realPath":"gobblin-modules/gobblin-couchbase/src/test/java/org/apache/gobblin/couchbase/writer/CouchbaseWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void testBasicConvert() throws Exception {\n\n    Schema dataRecordSchema = SchemaBuilder.record(\"Data\")\n        .fields()\n        .name(\"data\").type().bytesType().noDefault()\n        .name(\"flags\").type().intType().noDefault()\n        .endRecord();\n\n    Schema schema = SchemaBuilder.record(\"TestRecord\")\n        .fields()\n        .name(\"key\").type().stringType().noDefault()\n        .name(\"data\").type(dataRecordSchema).noDefault()\n        .endRecord();\n\n    GenericData.Record testRecord = new GenericData.Record(schema);\n\n\n    String testContent = \"hello world\";\n    GenericData.Record dataRecord = new GenericData.Record(dataRecordSchema);\n    dataRecord.put(\"data\", ByteBuffer.wrap(testContent.getBytes(Charset.forName(\"UTF-8\"))));\n    dataRecord.put(\"flags\", 0);\n\n    testRecord.put(\"key\", \"hello\");\n    testRecord.put(\"data\", dataRecord);\n\n    Converter<Schema, String, GenericRecord, TupleDocument> recordConverter = new AvroToCouchbaseTupleConverter();\n\n    TupleDocument returnDoc = recordConverter.convertRecord(\"\", testRecord, null).iterator().next();\n    byte[] returnedBytes = new byte[returnDoc.content().value1().readableBytes()];\n    returnDoc.content().value1().readBytes(returnedBytes);\n    Assert.assertEquals(returnedBytes, testContent.getBytes(Charset.forName(\"UTF-8\")));\n\n    int returnedFlags = returnDoc.content().value2();\n    Assert.assertEquals(returnedFlags, 0);\n\n  }\n","date":"2017-07-31 15:51:25","endLine":73,"groupId":"10618","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testBasicConvert","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d3/eb404c51b825b878443cb165a5bb7692af5300.src","preCode":"  public void testBasicConvert() throws Exception {\n\n    Schema dataRecordSchema = SchemaBuilder.record(\"Data\")\n        .fields()\n        .name(\"data\").type().bytesType().noDefault()\n        .name(\"flags\").type().intType().noDefault()\n        .endRecord();\n\n    Schema schema = SchemaBuilder.record(\"TestRecord\")\n        .fields()\n        .name(\"key\").type().stringType().noDefault()\n        .name(\"data\").type(dataRecordSchema).noDefault()\n        .endRecord();\n\n    GenericData.Record testRecord = new GenericData.Record(schema);\n\n\n    String testContent = \"hello world\";\n    GenericData.Record dataRecord = new GenericData.Record(dataRecordSchema);\n    dataRecord.put(\"data\", ByteBuffer.wrap(testContent.getBytes(Charset.forName(\"UTF-8\"))));\n    dataRecord.put(\"flags\", 0);\n\n    testRecord.put(\"key\", \"hello\");\n    testRecord.put(\"data\", dataRecord);\n\n    Converter<Schema, String, GenericRecord, TupleDocument> recordConverter = new AvroToCouchbaseTupleConverter();\n\n    TupleDocument returnDoc = recordConverter.convertRecord(\"\", testRecord, null).iterator().next();\n    byte[] returnedBytes = new byte[returnDoc.content().value1().readableBytes()];\n    returnDoc.content().value1().readBytes(returnedBytes);\n    Assert.assertEquals(returnedBytes, testContent.getBytes(Charset.forName(\"UTF-8\")));\n\n    int returnedFlags = returnDoc.content().value2();\n    Assert.assertEquals(returnedFlags, 0);\n\n  }\n","realPath":"gobblin-modules/gobblin-couchbase/src/test/java/org/apache/gobblin/couchbase/converter/AvroToCouchbaseTupleConverterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"}],"commitId":"fb289fdba46c9db65ec650a2f42048e031d4416e","commitMessage":"@@@[GOBBLIN-880] Bump CouchbaseWriter Couchbase SDK version + write docs + cert based auth + enable TTL + dnsSrv[]\n\nJIRA ticket:\nhttps://issues.apache.org/jira/browse/GOBBLIN-880\nRB Changes:\n    1 - Added logic to connect using certificate based\nauth to the buckets (Will need to bump\ncom.couchbase.client:java-client to a newer\nversion like 2.7.6) and associated configs\n    2 - TTL  implementation\n      * Added configs to allow setting a TTL\n(documentTTL) and also specify the timeunits\n(documentTTLUnits) of these settings\n      * Added logic to specify the path to key to the\nfield containing the source timestamp\n(documentTTLOriginField) and its units\n(documentTTLOriginUnits) to disambiguate between\nUNIX (sec) timestamps and other formats like\ntimestamps in milliseconds.\n    3 - Added missing dnsSrv config\n    4 - Written proper documentation on gobblin-\ndocs/writers/CouchbaseWriter.md\n    5 - Brought in CouchbaseMock from Gradle and adapt\nexisting unit tests.\n    6 - Added getTimeUnit to ConfigUtils + Unit tests\n\nCloses #2734 from menarguez/gobblin-880\n","date":"2019-09-17 11:25:09","modifiedFileCount":"8","status":"M","submitter":"Michael Menarguez"}]
