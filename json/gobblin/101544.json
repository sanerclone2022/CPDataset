[{"authorTime":"2020-05-13 13:43:19","codes":[{"authorDate":"2020-07-17 04:38:39","commitOrder":2,"curCode":"  public void basicTestWithShuffleKeySpecified() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    \r\n    \r\n    createTestingData(jobDir);\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin(\"basic\", basePath.getAbsolutePath().toString())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n            TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, extensionName)\n        \r\n        .setConfiguration(ORC_MAPPER_SHUFFLE_KEY_SCHEMA, \"struct<k:int>\");\n    JobExecutionResult execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    reloadFolder(statuses, outputDir, fs);\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 3);\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(5));\n\n  }\n","date":"2020-07-17 04:38:39","endLine":131,"groupId":"7054","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTestWithShuffleKeySpecified","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/33/191b81ab7d16b5c872d0c092ecf052a1062c96.src","preCode":"  public void basicTestWithShuffleKeySpecified() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    \r\n    \r\n    createTestingData(jobDir);\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin(\"basic\", basePath.getAbsolutePath().toString())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n            TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, extensionName)\n        \r\n        .setConfiguration(ORC_MAPPER_SHUFFLE_KEY_SCHEMA, \"struct<k:int>\");\n    JobExecutionResult execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    reloadFolder(statuses, outputDir, fs);\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 3);\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(5));\n\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/OrcCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"},{"authorDate":"2020-05-13 13:43:19","commitOrder":2,"curCode":"  public void basicTestWithRecompactionAndBasicSchemaEvolution() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    \r\n    createTestingData(jobDir);\n\n    \r\n    TypeDescription evolvedSchema = TypeDescription.fromString(\"struct<i:int,j:int,k:int>\");\n    OrcStruct orcStruct_4 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_4.setFieldValue(\"i\", new IntWritable(5));\n    orcStruct_4.setFieldValue(\"j\", new IntWritable(6));\n    orcStruct_4.setFieldValue(\"k\", new IntWritable(7));\n\n    File file_2 = new File(jobDir, \"file_2.1.\" + extensionName);\n    writeOrcRecordsInFile(new Path(file_2.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_4));\n    \r\n    file_2.setLastModified(Long.MAX_VALUE);\n\n    \r\n    \r\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin(\"basic\", basePath.getAbsolutePath().toString())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n        TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, extensionName)\n        .setConfiguration(COMPACTION_LATEDATA_THRESHOLD_FOR_RECOMPACT_PER_DATASET, \"Identity.*:0.1\");\n    JobExecutionResult execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    reloadFolder(statuses, outputDir, fs);\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 4);\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertNull(result.get(0).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertNull(result.get(1).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(5));\n    Assert.assertNull(result.get(2).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(3).getFieldValue(\"i\"), new IntWritable(5));\n    Assert.assertEquals(result.get(3).getFieldValue(\"j\"), new IntWritable(6));\n    Assert.assertEquals(result.get(3).getFieldValue(\"k\"), new IntWritable(7));\n\n    \r\n    File file_late = new File(jobDir, \"file_late.1.\" + extensionName);\n    OrcStruct orcStruct_5 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_5.setFieldValue(\"i\", new IntWritable(10));\n    orcStruct_5.setFieldValue(\"j\", new IntWritable(11));\n    orcStruct_5.setFieldValue(\"k\", new IntWritable(12));\n\n    writeOrcRecordsInFile(new Path(file_late.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_5));\n    execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    reloadFolder(statuses, outputDir, fs);\n    result = readOrcFile(statuses.get(0).getPath());\n    \r\n    Assert.assertEquals(result.size(), 4 + 1);\n  }\n","date":"2020-05-13 13:43:19","endLine":164,"groupId":"4168","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"basicTestWithRecompactionAndBasicSchemaEvolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b5/8fc3660c1d6fe7da2c348fc24f912bb213113e.src","preCode":"  public void basicTestWithRecompactionAndBasicSchemaEvolution() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    \r\n    createTestingData(jobDir);\n\n    \r\n    TypeDescription evolvedSchema = TypeDescription.fromString(\"struct<i:int,j:int,k:int>\");\n    OrcStruct orcStruct_4 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_4.setFieldValue(\"i\", new IntWritable(5));\n    orcStruct_4.setFieldValue(\"j\", new IntWritable(6));\n    orcStruct_4.setFieldValue(\"k\", new IntWritable(7));\n\n    File file_2 = new File(jobDir, \"file_2.1.\" + extensionName);\n    writeOrcRecordsInFile(new Path(file_2.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_4));\n    \r\n    file_2.setLastModified(Long.MAX_VALUE);\n\n    \r\n    \r\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin(\"basic\", basePath.getAbsolutePath().toString())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n        TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, extensionName)\n        .setConfiguration(COMPACTION_LATEDATA_THRESHOLD_FOR_RECOMPACT_PER_DATASET, \"Identity.*:0.1\");\n    JobExecutionResult execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    reloadFolder(statuses, outputDir, fs);\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 4);\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertNull(result.get(0).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertNull(result.get(1).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(5));\n    Assert.assertNull(result.get(2).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(3).getFieldValue(\"i\"), new IntWritable(5));\n    Assert.assertEquals(result.get(3).getFieldValue(\"j\"), new IntWritable(6));\n    Assert.assertEquals(result.get(3).getFieldValue(\"k\"), new IntWritable(7));\n\n    \r\n    File file_late = new File(jobDir, \"file_late.1.\" + extensionName);\n    OrcStruct orcStruct_5 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_5.setFieldValue(\"i\", new IntWritable(10));\n    orcStruct_5.setFieldValue(\"j\", new IntWritable(11));\n    orcStruct_5.setFieldValue(\"k\", new IntWritable(12));\n\n    writeOrcRecordsInFile(new Path(file_late.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_5));\n    execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    reloadFolder(statuses, outputDir, fs);\n    result = readOrcFile(statuses.get(0).getPath());\n    \r\n    Assert.assertEquals(result.size(), 4 + 1);\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/OrcCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"NB"}],"commitId":"dcc3b8203bf8054332238fa5fa0f5511b82597c6","commitMessage":"@@@[GOBBLIN-1214] Move the fallback of in-eligible shuffleKey to driver\n\nMove fallback of shuffleKey into driver level\n\nAdd a unit test for the case when shuffle key not\nexisted\n\nCloses #3062 from autumnust/reproduce-gcn-33158\n","date":"2020-07-17 04:38:39","modifiedFileCount":"3","status":"M","submitter":"Lei Sun"},{"authorTime":"2020-09-09 02:26:14","codes":[{"authorDate":"2020-09-09 02:26:14","commitOrder":3,"curCode":"  public void basicTestWithShuffleKeySpecified() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    \r\n    \r\n    createTestingData(jobDir);\n\n    EmbeddedGobblin embeddedGobblin = TestCompactionTaskUtils.createEmbeddedGobblinCompactionJob(\"basic\", basePath.getAbsolutePath())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n            TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, extensionName)\n        \r\n        .setConfiguration(ORC_MAPPER_SHUFFLE_KEY_SCHEMA, \"struct<k:int>\");\n    JobExecutionResult execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    reloadFolder(statuses, outputDir, fs);\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 3);\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(5));\n\n  }\n","date":"2020-09-09 02:26:14","endLine":134,"groupId":"101544","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTestWithShuffleKeySpecified","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b9/c4152a83b5234e62e5499ef0d05f02430bcaba.src","preCode":"  public void basicTestWithShuffleKeySpecified() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    \r\n    \r\n    createTestingData(jobDir);\n\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin(\"basic\", basePath.getAbsolutePath().toString())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n            TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, extensionName)\n        \r\n        .setConfiguration(ORC_MAPPER_SHUFFLE_KEY_SCHEMA, \"struct<k:int>\");\n    JobExecutionResult execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    reloadFolder(statuses, outputDir, fs);\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 3);\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(5));\n\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/OrcCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2020-09-09 02:26:14","commitOrder":3,"curCode":"  public void basicTestWithRecompactionAndBasicSchemaEvolution() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    \r\n    createTestingData(jobDir);\n\n    \r\n    TypeDescription evolvedSchema = TypeDescription.fromString(\"struct<i:int,j:int,k:int>\");\n    OrcStruct orcStruct_4 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_4.setFieldValue(\"i\", new IntWritable(5));\n    orcStruct_4.setFieldValue(\"j\", new IntWritable(6));\n    orcStruct_4.setFieldValue(\"k\", new IntWritable(7));\n\n    File file_2 = new File(jobDir, \"file_2.1.\" + extensionName);\n    writeOrcRecordsInFile(new Path(file_2.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_4));\n    \r\n    file_2.setLastModified(Long.MAX_VALUE);\n\n    \r\n    \r\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblinCompactionJob(\"basic\", basePath.getAbsolutePath())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n        TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, extensionName)\n        .setConfiguration(COMPACTION_LATEDATA_THRESHOLD_FOR_RECOMPACT_PER_DATASET, \"Identity.*:0.1\");\n    JobExecutionResult execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    reloadFolder(statuses, outputDir, fs);\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 4);\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertNull(result.get(0).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertNull(result.get(1).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(5));\n    Assert.assertNull(result.get(2).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(3).getFieldValue(\"i\"), new IntWritable(5));\n    Assert.assertEquals(result.get(3).getFieldValue(\"j\"), new IntWritable(6));\n    Assert.assertEquals(result.get(3).getFieldValue(\"k\"), new IntWritable(7));\n\n    \r\n    File file_late = new File(jobDir, \"file_late.1.\" + extensionName);\n    OrcStruct orcStruct_5 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_5.setFieldValue(\"i\", new IntWritable(10));\n    orcStruct_5.setFieldValue(\"j\", new IntWritable(11));\n    orcStruct_5.setFieldValue(\"k\", new IntWritable(12));\n\n    writeOrcRecordsInFile(new Path(file_late.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_5));\n    execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    reloadFolder(statuses, outputDir, fs);\n    result = readOrcFile(statuses.get(0).getPath());\n    \r\n    Assert.assertEquals(result.size(), 4 + 1);\n  }\n","date":"2020-09-09 02:26:14","endLine":208,"groupId":"101544","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"basicTestWithRecompactionAndBasicSchemaEvolution","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b9/c4152a83b5234e62e5499ef0d05f02430bcaba.src","preCode":"  public void basicTestWithRecompactionAndBasicSchemaEvolution() throws Exception {\n    File basePath = Files.createTempDir();\n    basePath.deleteOnExit();\n\n    String minutelyPath = \"Identity/MemberAccount/minutely/2017/04/03/10/20_30/run_2017-04-03-10-20\";\n    String hourlyPath = \"Identity/MemberAccount/hourly/2017/04/03/10/\";\n    File jobDir = new File(basePath, minutelyPath);\n    Assert.assertTrue(jobDir.mkdirs());\n\n    \r\n    createTestingData(jobDir);\n\n    \r\n    TypeDescription evolvedSchema = TypeDescription.fromString(\"struct<i:int,j:int,k:int>\");\n    OrcStruct orcStruct_4 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_4.setFieldValue(\"i\", new IntWritable(5));\n    orcStruct_4.setFieldValue(\"j\", new IntWritable(6));\n    orcStruct_4.setFieldValue(\"k\", new IntWritable(7));\n\n    File file_2 = new File(jobDir, \"file_2.1.\" + extensionName);\n    writeOrcRecordsInFile(new Path(file_2.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_4));\n    \r\n    file_2.setLastModified(Long.MAX_VALUE);\n\n    \r\n    \r\n    EmbeddedGobblin embeddedGobblin = createEmbeddedGobblin(\"basic\", basePath.getAbsolutePath().toString())\n        .setConfiguration(CompactionJobConfigurator.COMPACTION_JOB_CONFIGURATOR_FACTORY_CLASS_KEY,\n        TestCompactionOrcJobConfigurator.Factory.class.getName())\n        .setConfiguration(COMPACTION_OUTPUT_EXTENSION, extensionName)\n        .setConfiguration(COMPACTION_LATEDATA_THRESHOLD_FOR_RECOMPACT_PER_DATASET, \"Identity.*:0.1\");\n    JobExecutionResult execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    \r\n    File outputDir = new File(basePath, hourlyPath);\n    FileSystem fs = FileSystem.getLocal(new Configuration());\n    List<FileStatus> statuses = new ArrayList<>();\n    reloadFolder(statuses, outputDir, fs);\n\n    Assert.assertTrue(statuses.size() == 1);\n    List<OrcStruct> result = readOrcFile(statuses.get(0).getPath());\n    Assert.assertEquals(result.size(), 4);\n    Assert.assertEquals(result.get(0).getFieldValue(\"i\"), new IntWritable(1));\n    Assert.assertEquals(result.get(0).getFieldValue(\"j\"), new IntWritable(2));\n    Assert.assertNull(result.get(0).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(1).getFieldValue(\"i\"), new IntWritable(2));\n    Assert.assertEquals(result.get(1).getFieldValue(\"j\"), new IntWritable(3));\n    Assert.assertNull(result.get(1).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(2).getFieldValue(\"i\"), new IntWritable(4));\n    Assert.assertEquals(result.get(2).getFieldValue(\"j\"), new IntWritable(5));\n    Assert.assertNull(result.get(2).getFieldValue(\"k\"));\n    Assert.assertEquals(result.get(3).getFieldValue(\"i\"), new IntWritable(5));\n    Assert.assertEquals(result.get(3).getFieldValue(\"j\"), new IntWritable(6));\n    Assert.assertEquals(result.get(3).getFieldValue(\"k\"), new IntWritable(7));\n\n    \r\n    File file_late = new File(jobDir, \"file_late.1.\" + extensionName);\n    OrcStruct orcStruct_5 = (OrcStruct) OrcStruct.createValue(evolvedSchema);\n    orcStruct_5.setFieldValue(\"i\", new IntWritable(10));\n    orcStruct_5.setFieldValue(\"j\", new IntWritable(11));\n    orcStruct_5.setFieldValue(\"k\", new IntWritable(12));\n\n    writeOrcRecordsInFile(new Path(file_late.getAbsolutePath()), evolvedSchema, ImmutableList.of(orcStruct_5));\n    execution = embeddedGobblin.run();\n    Assert.assertTrue(execution.isSuccessful());\n\n    reloadFolder(statuses, outputDir, fs);\n    result = readOrcFile(statuses.get(0).getPath());\n    \r\n    Assert.assertEquals(result.size(), 4 + 1);\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/OrcCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"778a8634978981e63d3a096af336b14f79aebeca","commitMessage":"@@@[GOBBLIN-1257] Fix the handling of collection field types during ORC schema up-conversion in compaction[]\n\nCloses #3097 from sv2000/orcCompaction\n","date":"2020-09-09 02:26:14","modifiedFileCount":"4","status":"M","submitter":"sv2000"}]
