[{"authorTime":"2018-09-13 04:37:04","codes":[{"authorDate":"2019-03-13 08:05:13","commitOrder":2,"curCode":"  public void testOrcSchemaLiteral() throws IOException {\n    State state = new State();\n    HiveOrcSerDeManager manager = new HiveOrcSerDeManager(state);\n    HiveRegistrationUnit registrationUnit = (new HiveTable.Builder()).withDbName(TEST_DB).withTableName(TEST_TABLE).build();\n\n    manager.addSerDeProperties(this.testRegisterPath, registrationUnit);\n\n    Assert.assertTrue(registrationUnit.getSerDeProps().getProp(HiveOrcSerDeManager.SCHEMA_LITERAL).contains(\n        \"name:string,timestamp:bigint\"));\n  }\n","date":"2019-03-13 08:05:13","endLine":81,"groupId":"6776","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrcSchemaLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/03/2239fe6a5ac8a8129ea4c214baef02026ab6ff.src","preCode":"  public void testOrcSchemaLiteral() throws IOException {\n    State state = new State();\n    HiveOrcSerDeManager manager = new HiveOrcSerDeManager(state);\n    HiveRegistrationUnit registrationUnit = (new HiveTable.Builder()).withDbName(TEST_DB).withTableName(TEST_TABLE).build();\n\n    manager.addSerDeProperties(this.testRegisterPath, registrationUnit);\n\n    Assert.assertTrue(registrationUnit.getSerDeProps().getProp(HiveOrcSerDeManager.SCHEMA_LITERAL).contains(\n        \"name:string,timestamp:bigint\"));\n  }\n","realPath":"gobblin-hive-registration/src/test/java/org/apache/gobblin/hive/orc/HiveOrcSerDeManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"B"},{"authorDate":"2018-09-13 04:37:04","commitOrder":2,"curCode":"  public void testSchemaLiteral() throws IOException {\n    State state = new State();\n    HiveAvroSerDeManager manager = new HiveAvroSerDeManager(state);\n    HiveRegistrationUnit registrationUnit = (new HiveTable.Builder()).withDbName(TEST_DB).withTableName(TEST_TABLE).build();\n\n    manager.addSerDeProperties(this.testBasePath, registrationUnit);\n\n    Assert.assertTrue(registrationUnit.getSerDeProps().getProp(HiveAvroSerDeManager.SCHEMA_LITERAL).contains(\"example.avro\"));\n  }\n","date":"2018-09-13 04:37:04","endLine":72,"groupId":"6776","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"testSchemaLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/05/4ca40eee3768ba29eb5492e7ee948a00924be1.src","preCode":"  public void testSchemaLiteral() throws IOException {\n    State state = new State();\n    HiveAvroSerDeManager manager = new HiveAvroSerDeManager(state);\n    HiveRegistrationUnit registrationUnit = (new HiveTable.Builder()).withDbName(TEST_DB).withTableName(TEST_TABLE).build();\n\n    manager.addSerDeProperties(this.testBasePath, registrationUnit);\n\n    Assert.assertTrue(registrationUnit.getSerDeProps().getProp(HiveAvroSerDeManager.SCHEMA_LITERAL).contains(\"example.avro\"));\n  }\n","realPath":"gobblin-hive-registration/src/test/java/org/apache/gobblin/hive/avro/HiveAvroSerDeManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"NB"}],"commitId":"81ea16963f63e3fcda77221f655accb1f5406d34","commitMessage":"@@@[GOBBLIN-693] Add ORC hive serde manager\n\nCloses #2565 from htran1/orc_hive_reg\n","date":"2019-03-13 08:05:13","modifiedFileCount":"2","status":"M","submitter":"Hung Tran"},{"authorTime":"2018-09-13 04:37:04","codes":[{"authorDate":"2019-03-21 06:01:09","commitOrder":3,"curCode":"  public void testOrcSchemaLiteral() throws IOException {\n    State state = new State();\n    HiveOrcSerDeManager manager = new HiveOrcSerDeManager(state);\n    HiveRegistrationUnit registrationUnit = (new HiveTable.Builder()).withDbName(TEST_DB).withTableName(TEST_TABLE).build();\n\n    manager.addSerDeProperties(this.testRegisterPath, registrationUnit);\n\n    Assert.assertTrue(registrationUnit.getSerDeProps().getProp(HiveOrcSerDeManager.SCHEMA_LITERAL).contains(\n        \"name:string,timestamp:bigint\"));\n\n    List<String> columns = Arrays.asList(registrationUnit.getSerDeProps().getProp(serdeConstants.LIST_COLUMNS).split(\",\"));\n    Assert.assertTrue(columns.get(0).equals(\"name\"));\n    Assert.assertTrue(columns.get(1).equals(\"timestamp\"));\n    List<String> columnTypes = Arrays.asList(registrationUnit.getSerDeProps().getProp(serdeConstants.LIST_COLUMN_TYPES).split(\",\"));\n    Assert.assertTrue(columnTypes.get(0).equals(\"string\"));\n    Assert.assertTrue(columnTypes.get(1).equals(\"bigint\"));\n  }\n","date":"2019-03-21 06:01:09","endLine":91,"groupId":"6776","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrcSchemaLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4f/fa738f903d4b08b9c669ffc99d347dc25b4b27.src","preCode":"  public void testOrcSchemaLiteral() throws IOException {\n    State state = new State();\n    HiveOrcSerDeManager manager = new HiveOrcSerDeManager(state);\n    HiveRegistrationUnit registrationUnit = (new HiveTable.Builder()).withDbName(TEST_DB).withTableName(TEST_TABLE).build();\n\n    manager.addSerDeProperties(this.testRegisterPath, registrationUnit);\n\n    Assert.assertTrue(registrationUnit.getSerDeProps().getProp(HiveOrcSerDeManager.SCHEMA_LITERAL).contains(\n        \"name:string,timestamp:bigint\"));\n  }\n","realPath":"gobblin-hive-registration/src/test/java/org/apache/gobblin/hive/orc/HiveOrcSerDeManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2018-09-13 04:37:04","commitOrder":3,"curCode":"  public void testSchemaLiteral() throws IOException {\n    State state = new State();\n    HiveAvroSerDeManager manager = new HiveAvroSerDeManager(state);\n    HiveRegistrationUnit registrationUnit = (new HiveTable.Builder()).withDbName(TEST_DB).withTableName(TEST_TABLE).build();\n\n    manager.addSerDeProperties(this.testBasePath, registrationUnit);\n\n    Assert.assertTrue(registrationUnit.getSerDeProps().getProp(HiveAvroSerDeManager.SCHEMA_LITERAL).contains(\"example.avro\"));\n  }\n","date":"2018-09-13 04:37:04","endLine":72,"groupId":"6776","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testSchemaLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/05/4ca40eee3768ba29eb5492e7ee948a00924be1.src","preCode":"  public void testSchemaLiteral() throws IOException {\n    State state = new State();\n    HiveAvroSerDeManager manager = new HiveAvroSerDeManager(state);\n    HiveRegistrationUnit registrationUnit = (new HiveTable.Builder()).withDbName(TEST_DB).withTableName(TEST_TABLE).build();\n\n    manager.addSerDeProperties(this.testBasePath, registrationUnit);\n\n    Assert.assertTrue(registrationUnit.getSerDeProps().getProp(HiveAvroSerDeManager.SCHEMA_LITERAL).contains(\"example.avro\"));\n  }\n","realPath":"gobblin-hive-registration/src/test/java/org/apache/gobblin/hive/avro/HiveAvroSerDeManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"c94481828381a52b0ec7ca06c0d95f2b19c88297","commitMessage":"@@@[GOBBLIN-704] Add serde attributes for orc\n\nCloses #2574 from\nautumnust/addSerDeAttributeForORc\n","date":"2019-03-21 06:01:09","modifiedFileCount":"4","status":"M","submitter":"autumnust"},{"authorTime":"2018-09-13 04:37:04","codes":[{"authorDate":"2019-11-01 04:30:34","commitOrder":4,"curCode":"  public void testOrcSchemaLiteral() throws IOException {\n    State state = new State();\n    HiveOrcSerDeManager manager = new HiveOrcSerDeManager(state);\n    HiveRegistrationUnit registrationUnit = (new HiveTable.Builder()).withDbName(TEST_DB).withTableName(TEST_TABLE).build();\n\n    manager.addSerDeProperties(this.testRegisterPath, registrationUnit);\n\n\n    List<String> columns = Arrays.asList(registrationUnit.getSerDeProps().getProp(serdeConstants.LIST_COLUMNS).split(\",\"));\n    Assert.assertTrue(columns.get(0).equals(\"name\"));\n    Assert.assertTrue(columns.get(1).equals(\"timestamp\"));\n    List<String> columnTypes = Arrays.asList(registrationUnit.getSerDeProps().getProp(serdeConstants.LIST_COLUMN_TYPES).split(\",\"));\n    Assert.assertTrue(columnTypes.get(0).equals(\"string\"));\n    Assert.assertTrue(columnTypes.get(1).equals(\"bigint\"));\n  }\n","date":"2019-11-01 04:30:34","endLine":91,"groupId":"101206","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOrcSchemaLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a5/b2ee591889973dce203df615d6ee2ebf770d67.src","preCode":"  public void testOrcSchemaLiteral() throws IOException {\n    State state = new State();\n    HiveOrcSerDeManager manager = new HiveOrcSerDeManager(state);\n    HiveRegistrationUnit registrationUnit = (new HiveTable.Builder()).withDbName(TEST_DB).withTableName(TEST_TABLE).build();\n\n    manager.addSerDeProperties(this.testRegisterPath, registrationUnit);\n\n    Assert.assertTrue(registrationUnit.getSerDeProps().getProp(HiveOrcSerDeManager.SCHEMA_LITERAL).contains(\n        \"name:string,timestamp:bigint\"));\n\n    List<String> columns = Arrays.asList(registrationUnit.getSerDeProps().getProp(serdeConstants.LIST_COLUMNS).split(\",\"));\n    Assert.assertTrue(columns.get(0).equals(\"name\"));\n    Assert.assertTrue(columns.get(1).equals(\"timestamp\"));\n    List<String> columnTypes = Arrays.asList(registrationUnit.getSerDeProps().getProp(serdeConstants.LIST_COLUMN_TYPES).split(\",\"));\n    Assert.assertTrue(columnTypes.get(0).equals(\"string\"));\n    Assert.assertTrue(columnTypes.get(1).equals(\"bigint\"));\n  }\n","realPath":"gobblin-hive-registration/src/test/java/org/apache/gobblin/hive/orc/HiveOrcSerDeManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2018-09-13 04:37:04","commitOrder":4,"curCode":"  public void testSchemaLiteral() throws IOException {\n    State state = new State();\n    HiveAvroSerDeManager manager = new HiveAvroSerDeManager(state);\n    HiveRegistrationUnit registrationUnit = (new HiveTable.Builder()).withDbName(TEST_DB).withTableName(TEST_TABLE).build();\n\n    manager.addSerDeProperties(this.testBasePath, registrationUnit);\n\n    Assert.assertTrue(registrationUnit.getSerDeProps().getProp(HiveAvroSerDeManager.SCHEMA_LITERAL).contains(\"example.avro\"));\n  }\n","date":"2018-09-13 04:37:04","endLine":72,"groupId":"101206","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testSchemaLiteral","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/05/4ca40eee3768ba29eb5492e7ee948a00924be1.src","preCode":"  public void testSchemaLiteral() throws IOException {\n    State state = new State();\n    HiveAvroSerDeManager manager = new HiveAvroSerDeManager(state);\n    HiveRegistrationUnit registrationUnit = (new HiveTable.Builder()).withDbName(TEST_DB).withTableName(TEST_TABLE).build();\n\n    manager.addSerDeProperties(this.testBasePath, registrationUnit);\n\n    Assert.assertTrue(registrationUnit.getSerDeProps().getProp(HiveAvroSerDeManager.SCHEMA_LITERAL).contains(\"example.avro\"));\n  }\n","realPath":"gobblin-hive-registration/src/test/java/org/apache/gobblin/hive/avro/HiveAvroSerDeManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"}],"commitId":"f60409ef0b6768bf46ddd137333d8d56981798fc","commitMessage":"@@@[GOBBLIN-924][GOBBLIN-922][GOBBLIN-909][GOBBLIN-923]GOBBLIN-923][GOBBLIN-906][GOBBLIN-921] Get rid of orc.schema.literal in ORC-ingestion and registration\n\nCloses #2780 from ZihanLi58/GOBBLIN-924\n","date":"2019-11-01 04:30:34","modifiedFileCount":"2","status":"M","submitter":"Zihan Li"}]
