[{"authorTime":"2019-07-19 03:02:36","codes":[{"authorDate":"2019-07-19 03:02:36","commitOrder":2,"curCode":"  public static EntityMissingEventBuilder fromEvent(GobblinTrackingEvent event) {\n    if(!isEntityMissingEvent(event)) {\n      return null;\n    }\n\n    Map<String, String> metadata = event.getMetadata();\n    String instance = metadata.get(INSTANCE_KEY);\n    EntityMissingEventBuilder eventBuilder = new EntityMissingEventBuilder(event.getName(), instance);\n    metadata.forEach((key, value) -> {\n      switch (key) {\n        case INSTANCE_KEY:\n          break;\n        default:\n          eventBuilder.addMetadata(key, value);\n          break;\n      }\n    });\n\n    return eventBuilder;\n  }\n","date":"2019-07-19 03:02:36","endLine":85,"groupId":"2109","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fromEvent","params":"(GobblinTrackingEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/6b/43f9784a9ab59f160c4fcda9a4c10b368de66f.src","preCode":"  public static EntityMissingEventBuilder fromEvent(GobblinTrackingEvent event) {\n    if(!isEntityMissingEvent(event)) {\n      return null;\n    }\n\n    Map<String, String> metadata = event.getMetadata();\n    String instance = metadata.get(INSTANCE_KEY);\n    EntityMissingEventBuilder eventBuilder = new EntityMissingEventBuilder(event.getName(), instance);\n    metadata.forEach((key, value) -> {\n      switch (key) {\n        case INSTANCE_KEY:\n          break;\n        default:\n          eventBuilder.addMetadata(key, value);\n          break;\n      }\n    });\n\n    return eventBuilder;\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics-base/src/main/java/org/apache/gobblin/metrics/event/EntityMissingEventBuilder.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2019-07-19 03:02:36","commitOrder":2,"curCode":"  public static CountEventBuilder fromEvent(GobblinTrackingEvent event) {\n    if(!isCountEvent(event)) {\n      return null;\n    }\n\n    Map<String, String> metadata = event.getMetadata();\n    int count = Integer.parseInt(metadata.getOrDefault(COUNT_KEY, \"0\"));\n    CountEventBuilder countEventBuilder = new CountEventBuilder(event.getName(), count);\n    metadata.forEach((key, value) -> {\n      switch (key) {\n        case COUNT_KEY:\n          break;\n        default:\n          countEventBuilder.addMetadata(key, value);\n          break;\n      }\n    });\n\n    return countEventBuilder;\n  }\n","date":"2019-07-19 03:02:36","endLine":93,"groupId":"2976","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fromEvent","params":"(GobblinTrackingEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/79/f0ca5289ca6f98c24c21237268b52c070e7693.src","preCode":"  public static CountEventBuilder fromEvent(GobblinTrackingEvent event) {\n    if(!isCountEvent(event)) {\n      return null;\n    }\n\n    Map<String, String> metadata = event.getMetadata();\n    int count = Integer.parseInt(metadata.getOrDefault(COUNT_KEY, \"0\"));\n    CountEventBuilder countEventBuilder = new CountEventBuilder(event.getName(), count);\n    metadata.forEach((key, value) -> {\n      switch (key) {\n        case COUNT_KEY:\n          break;\n        default:\n          countEventBuilder.addMetadata(key, value);\n          break;\n      }\n    });\n\n    return countEventBuilder;\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics-base/src/main/java/org/apache/gobblin/metrics/event/CountEventBuilder.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"MB"}],"commitId":"19467a0120cf792bba5b0a98820f88c65d8b30ad","commitMessage":"@@@[GOBBLIN-827] Add more events\n\nCloses #2688 from zxcware/metrics\n","date":"2019-07-19 03:02:36","modifiedFileCount":"4","status":"M","submitter":"zhchen"},{"authorTime":"2020-02-19 05:44:57","codes":[{"authorDate":"2020-02-19 05:44:57","commitOrder":3,"curCode":"  public static EntityMissingEventBuilder fromEvent(GobblinTrackingEvent event) {\n    if(!isEntityMissingEvent(event)) {\n      return null;\n    }\n\n    Map<String, String> metadata = event.getMetadata();\n    String instance = metadata.get(INSTANCE_KEY);\n    EntityMissingEventBuilder eventBuilder = new EntityMissingEventBuilder(\n        event.getName(), event.getNamespace(), instance);\n    metadata.forEach((key, value) -> {\n      switch (key) {\n        case INSTANCE_KEY:\n          break;\n        default:\n          eventBuilder.addMetadata(key, value);\n          break;\n      }\n    });\n\n    return eventBuilder;\n  }\n","date":"2020-02-19 05:44:57","endLine":86,"groupId":"1029","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"fromEvent","params":"(GobblinTrackingEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/8d/8e1990d3791ba102714fe5ff1e51bc7d23eca9.src","preCode":"  public static EntityMissingEventBuilder fromEvent(GobblinTrackingEvent event) {\n    if(!isEntityMissingEvent(event)) {\n      return null;\n    }\n\n    Map<String, String> metadata = event.getMetadata();\n    String instance = metadata.get(INSTANCE_KEY);\n    EntityMissingEventBuilder eventBuilder = new EntityMissingEventBuilder(event.getName(), instance);\n    metadata.forEach((key, value) -> {\n      switch (key) {\n        case INSTANCE_KEY:\n          break;\n        default:\n          eventBuilder.addMetadata(key, value);\n          break;\n      }\n    });\n\n    return eventBuilder;\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics-base/src/main/java/org/apache/gobblin/metrics/event/EntityMissingEventBuilder.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-02-19 05:44:57","commitOrder":3,"curCode":"  public static CountEventBuilder fromEvent(GobblinTrackingEvent event) {\n    if(!isCountEvent(event)) {\n      return null;\n    }\n\n    Map<String, String> metadata = event.getMetadata();\n    long count = Long.parseLong(metadata.getOrDefault(COUNT_KEY, \"0\"));\n    CountEventBuilder countEventBuilder = new CountEventBuilder(event.getName(), event.getNamespace(), count);\n    metadata.forEach((key, value) -> {\n      switch (key) {\n        case COUNT_KEY:\n          break;\n        default:\n          countEventBuilder.addMetadata(key, value);\n          break;\n      }\n    });\n\n    return countEventBuilder;\n  }\n","date":"2020-02-19 05:44:57","endLine":93,"groupId":"1029","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"fromEvent","params":"(GobblinTrackingEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b6/63d50aa117549fc951505b6f7c4ea98643cbcb.src","preCode":"  public static CountEventBuilder fromEvent(GobblinTrackingEvent event) {\n    if(!isCountEvent(event)) {\n      return null;\n    }\n\n    Map<String, String> metadata = event.getMetadata();\n    int count = Integer.parseInt(metadata.getOrDefault(COUNT_KEY, \"0\"));\n    CountEventBuilder countEventBuilder = new CountEventBuilder(event.getName(), count);\n    metadata.forEach((key, value) -> {\n      switch (key) {\n        case COUNT_KEY:\n          break;\n        default:\n          countEventBuilder.addMetadata(key, value);\n          break;\n      }\n    });\n\n    return countEventBuilder;\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics-base/src/main/java/org/apache/gobblin/metrics/event/CountEventBuilder.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"2991f42873ebb626a849c54e7b101d50771ff716","commitMessage":"@@@[GOBBLIN-1045] Emit more events in compaction job\n\nCloses #2885 from zxcware/compact-metrics\n","date":"2020-02-19 05:44:57","modifiedFileCount":"8","status":"M","submitter":"zhchen"}]
