[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public Future<WriteResponse> write(final D record, final WriteCallback callback) {\n    return new WriteResponseFuture<>(this.producer.send(new ProducerRecord<String, D>(topic, record), new Callback() {\n      @Override\n      public void onCompletion(final RecordMetadata metadata, Exception exception) {\n        if (exception != null) {\n          callback.onFailure(exception);\n        } else {\n          callback.onSuccess(WRITE_RESPONSE_WRAPPER.wrap(metadata));\n        }\n      }\n    }), WRITE_RESPONSE_WRAPPER);\n  }\n","date":"2017-07-31 15:51:25","endLine":122,"groupId":"1543","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"write","params":"(finalDrecord@finalWriteCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/40/a8a4cdae6cc24b9f0a85a3c26761fdedfc67de.src","preCode":"  public Future<WriteResponse> write(final D record, final WriteCallback callback) {\n    return new WriteResponseFuture<>(this.producer.send(new ProducerRecord<String, D>(topic, record), new Callback() {\n      @Override\n      public void onCompletion(final RecordMetadata metadata, Exception exception) {\n        if (exception != null) {\n          callback.onFailure(exception);\n        } else {\n          callback.onSuccess(WRITE_RESPONSE_WRAPPER.wrap(metadata));\n        }\n      }\n    }), WRITE_RESPONSE_WRAPPER);\n  }\n","realPath":"gobblin-modules/gobblin-kafka-09/src/main/java/org/apache/gobblin/kafka/writer/Kafka09DataWriter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public Future<WriteResponse> write(final D record, final WriteCallback callback) {\n    return new WriteResponseFuture<>(this.producer.send(new ProducerRecord<String, D>(topic, record), new Callback() {\n      @Override\n      public void onCompletion(final RecordMetadata metadata, Exception exception) {\n        if (exception != null) {\n          callback.onFailure(exception);\n        } else {\n          callback.onSuccess(WRITE_RESPONSE_WRAPPER.wrap(metadata));\n        }\n      }\n    }), WRITE_RESPONSE_WRAPPER);\n  }\n","date":"2017-07-31 15:51:25","endLine":124,"groupId":"1543","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"write","params":"(finalDrecord@finalWriteCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/8d/f03c3791fe6803dcaa5b12e3c3d3892696610f.src","preCode":"  public Future<WriteResponse> write(final D record, final WriteCallback callback) {\n    return new WriteResponseFuture<>(this.producer.send(new ProducerRecord<String, D>(topic, record), new Callback() {\n      @Override\n      public void onCompletion(final RecordMetadata metadata, Exception exception) {\n        if (exception != null) {\n          callback.onFailure(exception);\n        } else {\n          callback.onSuccess(WRITE_RESPONSE_WRAPPER.wrap(metadata));\n        }\n      }\n    }), WRITE_RESPONSE_WRAPPER);\n  }\n","realPath":"gobblin-modules/gobblin-kafka-08/src/main/java/org/apache/gobblin/kafka/writer/Kafka08DataWriter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2019-07-10 05:11:39","codes":[{"authorDate":"2019-07-10 05:11:39","commitOrder":2,"curCode":"  public Future<WriteResponse> write(final V record, final WriteCallback callback) {\n    try {\n      Pair<K, V> keyValuePair = KafkaWriterHelper.getKeyValuePair(record, this.commonConfig);\n      return new WriteResponseFuture<>(this.producer\n          .send(new ProducerRecord<>(topic, keyValuePair.getKey(), keyValuePair.getValue()), new Callback() {\n            @Override\n            public void onCompletion(final RecordMetadata metadata, Exception exception) {\n              if (exception != null) {\n                callback.onFailure(exception);\n              } else {\n                callback.onSuccess(WRITE_RESPONSE_WRAPPER.wrap(metadata));\n              }\n            }\n          }), WRITE_RESPONSE_WRAPPER);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Failed to create a Kafka write request\", e);\n    }\n  }\n","date":"2019-07-10 05:11:39","endLine":140,"groupId":"1543","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"write","params":"(finalVrecord@finalWriteCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/68/d8f51fbc2a242ee5599949d30bee60562d5910.src","preCode":"  public Future<WriteResponse> write(final D record, final WriteCallback callback) {\n    return new WriteResponseFuture<>(this.producer.send(new ProducerRecord<String, D>(topic, record), new Callback() {\n      @Override\n      public void onCompletion(final RecordMetadata metadata, Exception exception) {\n        if (exception != null) {\n          callback.onFailure(exception);\n        } else {\n          callback.onSuccess(WRITE_RESPONSE_WRAPPER.wrap(metadata));\n        }\n      }\n    }), WRITE_RESPONSE_WRAPPER);\n  }\n","realPath":"gobblin-modules/gobblin-kafka-09/src/main/java/org/apache/gobblin/kafka/writer/Kafka09DataWriter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2019-07-10 05:11:39","commitOrder":2,"curCode":"  public Future<WriteResponse> write(final V record, final WriteCallback callback) {\n    try {\n      Pair<K, V> kvPair = KafkaWriterHelper.getKeyValuePair(record, commonConfig);\n      return new WriteResponseFuture<>(this.producer.send(new ProducerRecord<>(topic, kvPair.getKey(), kvPair.getValue()),\n          (metadata, exception) -> {\n            if (exception != null) {\n              callback.onFailure(exception);\n            } else {\n              callback.onSuccess(WRITE_RESPONSE_WRAPPER.wrap(metadata));\n            }\n          }), WRITE_RESPONSE_WRAPPER);\n    }\n    catch (Exception e) {\n      throw new RuntimeException(\"Failed to generate write request\", e);\n    }\n  }\n","date":"2019-07-10 05:11:39","endLine":133,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"write","params":"(finalVrecord@finalWriteCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/fc/82270e18c49c0f29857f9d53ccdadfba2d9315.src","preCode":"  public Future<WriteResponse> write(final D record, final WriteCallback callback) {\n    return new WriteResponseFuture<>(this.producer.send(new ProducerRecord<String, D>(topic, record), new Callback() {\n      @Override\n      public void onCompletion(final RecordMetadata metadata, Exception exception) {\n        if (exception != null) {\n          callback.onFailure(exception);\n        } else {\n          callback.onSuccess(WRITE_RESPONSE_WRAPPER.wrap(metadata));\n        }\n      }\n    }), WRITE_RESPONSE_WRAPPER);\n  }\n","realPath":"gobblin-modules/gobblin-kafka-08/src/main/java/org/apache/gobblin/kafka/writer/Kafka08DataWriter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"98f45965b86230265bd30578c887ad4a7dee5c78","commitMessage":"@@@[GOBBLIN-820] Add keyed write capability to Kafka writer\n\nCloses #2682 from shirshanka/kill-pusher\n","date":"2019-07-10 05:11:39","modifiedFileCount":"13","status":"M","submitter":"Shirshanka Das"},{"authorTime":"2020-06-19 09:19:13","codes":[{"authorDate":"2020-06-19 09:19:13","commitOrder":3,"curCode":"  public Future<WriteResponse> write(Pair<K, V> keyValuePair, final WriteCallback callback) {\n    try {\n      return new WriteResponseFuture<>(this.producer\n          .send(new ProducerRecord<>(topic, keyValuePair.getKey(), keyValuePair.getValue()), new Callback() {\n            @Override\n            public void onCompletion(final RecordMetadata metadata, Exception exception) {\n              if (exception != null) {\n                callback.onFailure(exception);\n              } else {\n                callback.onSuccess(WRITE_RESPONSE_WRAPPER.wrap(metadata));\n              }\n            }\n          }), WRITE_RESPONSE_WRAPPER);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Failed to create a Kafka write request\", e);\n    }\n  }\n","date":"2020-06-19 09:19:13","endLine":148,"groupId":"10281","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"write","params":"(Pair<K@V>keyValuePair@finalWriteCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/3b/ef426221b5d14822c8b0fa2850208c7fac1e56.src","preCode":"  public Future<WriteResponse> write(final V record, final WriteCallback callback) {\n    try {\n      Pair<K, V> keyValuePair = KafkaWriterHelper.getKeyValuePair(record, this.commonConfig);\n      return new WriteResponseFuture<>(this.producer\n          .send(new ProducerRecord<>(topic, keyValuePair.getKey(), keyValuePair.getValue()), new Callback() {\n            @Override\n            public void onCompletion(final RecordMetadata metadata, Exception exception) {\n              if (exception != null) {\n                callback.onFailure(exception);\n              } else {\n                callback.onSuccess(WRITE_RESPONSE_WRAPPER.wrap(metadata));\n              }\n            }\n          }), WRITE_RESPONSE_WRAPPER);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Failed to create a Kafka write request\", e);\n    }\n  }\n","realPath":"gobblin-modules/gobblin-kafka-09/src/main/java/org/apache/gobblin/kafka/writer/Kafka09DataWriter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2020-06-19 09:19:13","commitOrder":3,"curCode":"  public Future<WriteResponse> write(Pair<K, V> keyValuePair, final WriteCallback callback) {\n    try {\n      return new WriteResponseFuture<>(this.producer\n          .send(new ProducerRecord<>(topic, keyValuePair.getKey(), keyValuePair.getValue()), new Callback() {\n            @Override\n            public void onCompletion(final RecordMetadata metadata, Exception exception) {\n              if (exception != null) {\n                callback.onFailure(exception);\n              } else {\n                callback.onSuccess(WRITE_RESPONSE_WRAPPER.wrap(metadata));\n              }\n            }\n          }), WRITE_RESPONSE_WRAPPER);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Failed to create a Kafka write request\", e);\n    }\n  }\n","date":"2020-06-19 09:19:13","endLine":144,"groupId":"10281","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"write","params":"(Pair<K@V>keyValuePair@finalWriteCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/34/7dd53e47d2b502222d16318e2c5515b6e4180f.src","preCode":"  public Future<WriteResponse> write(final V record, final WriteCallback callback) {\n    try {\n      Pair<K, V> kvPair = KafkaWriterHelper.getKeyValuePair(record, commonConfig);\n      return new WriteResponseFuture<>(this.producer.send(new ProducerRecord<>(topic, kvPair.getKey(), kvPair.getValue()),\n          (metadata, exception) -> {\n            if (exception != null) {\n              callback.onFailure(exception);\n            } else {\n              callback.onSuccess(WRITE_RESPONSE_WRAPPER.wrap(metadata));\n            }\n          }), WRITE_RESPONSE_WRAPPER);\n    }\n    catch (Exception e) {\n      throw new RuntimeException(\"Failed to generate write request\", e);\n    }\n  }\n","realPath":"gobblin-modules/gobblin-kafka-08/src/main/java/org/apache/gobblin/kafka/writer/Kafka08DataWriter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"87506a370c2ee4b607d93b6c8d10b777885da7fc","commitMessage":"@@@[GOBBLIN-1143] Add a generic wrapper producer client to communicate with Kafka\n\nCloses #2980 from ZihanLi58/GOBBLIN-1143\n","date":"2020-06-19 09:19:13","modifiedFileCount":"2","status":"M","submitter":"Zihan Li"}]
