[{"authorTime":"2019-05-07 06:53:00","codes":[{"authorDate":"2019-05-07 06:53:00","commitOrder":1,"curCode":"  public static void testKafkaKeyValueMetricObjectReporter()\n      throws IOException {\n    MetricContext metricContext = MetricContext.builder(\"context\").build();\n\n    String namespace = \"org.apache.gobblin.metrics:gobblin.metrics.test\";\n    String name = TOPIC;\n    Properties properties = new Properties();\n    properties.put(KafkaSchemaRegistryConfigurationKeys.KAFKA_SCHEMA_REGISTRY_OVERRIDE_NAMESPACE, namespace);\n    properties.put(\"pusherClass\", \"org.apache.gobblin.metrics.reporter.MockKeyValuePusher\");\n\n    KeyValueMetricObjectReporterTest reporter =\n        getBuilder(properties).build(\"localhost:0000\", TOPIC, ConfigUtils.propertiesToConfig(properties));\n\n    reporter.report(metricContext);\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      Thread.currentThread().interrupt();\n    }\n\n    MockKeyValuePusher pusher = reporter.getPusher();\n    Pair<String, GenericRecord> retrievedEvent = nextKVReport(pusher.messageIterator());\n\n    Assert.assertEquals(retrievedEvent.getValue().getSchema().getNamespace(), \"gobblin.metrics.test\");\n    Assert.assertEquals(retrievedEvent.getValue().getSchema().getName(), name);\n    int partition = Integer.parseInt(retrievedEvent.getKey());\n    Assert.assertTrue((0 <= partition && partition <= 99));\n\n    reporter.close();\n  }\n","date":"2019-05-07 06:53:00","endLine":100,"groupId":"7904","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testKafkaKeyValueMetricObjectReporter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/32/b962032a7e3de9d381c5ea4f973f082a12dfa5.src","preCode":"  public static void testKafkaKeyValueMetricObjectReporter()\n      throws IOException {\n    MetricContext metricContext = MetricContext.builder(\"context\").build();\n\n    String namespace = \"org.apache.gobblin.metrics:gobblin.metrics.test\";\n    String name = TOPIC;\n    Properties properties = new Properties();\n    properties.put(KafkaSchemaRegistryConfigurationKeys.KAFKA_SCHEMA_REGISTRY_OVERRIDE_NAMESPACE, namespace);\n    properties.put(\"pusherClass\", \"org.apache.gobblin.metrics.reporter.MockKeyValuePusher\");\n\n    KeyValueMetricObjectReporterTest reporter =\n        getBuilder(properties).build(\"localhost:0000\", TOPIC, ConfigUtils.propertiesToConfig(properties));\n\n    reporter.report(metricContext);\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      Thread.currentThread().interrupt();\n    }\n\n    MockKeyValuePusher pusher = reporter.getPusher();\n    Pair<String, GenericRecord> retrievedEvent = nextKVReport(pusher.messageIterator());\n\n    Assert.assertEquals(retrievedEvent.getValue().getSchema().getNamespace(), \"gobblin.metrics.test\");\n    Assert.assertEquals(retrievedEvent.getValue().getSchema().getName(), name);\n    int partition = Integer.parseInt(retrievedEvent.getKey());\n    Assert.assertTrue((0 <= partition && partition <= 99));\n\n    reporter.close();\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/test/java/org/apache/gobblin/metrics/reporter/KeyValueMetricObjectReporterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2019-05-07 06:53:00","commitOrder":1,"curCode":"  public static void testKafkaKeyValueEventObjectReporter()\n      throws IOException {\n    MetricContext context = MetricContext.builder(\"context\").build();\n    String namespace = \"org.apache.gobblin.metrics:gobblin.metrics.test\";\n\n    Properties properties = new Properties();\n    properties.put(KafkaSchemaRegistryConfigurationKeys.KAFKA_SCHEMA_REGISTRY_OVERRIDE_NAMESPACE, namespace);\n    properties.put(\"pusherClass\", \"org.apache.gobblin.metrics.reporter.MockKeyValuePusher\");\n\n    KeyValueEventObjectReporterTest reporter = getBuilder(context, properties).build(\"localhost:0000\", \"topic\");\n\n    String eventName = \"testEvent\";\n\n    GobblinTrackingEvent event = new GobblinTrackingEvent();\n    event.setName(eventName);\n    event.setNamespace(namespace);\n    Map<String, String> metadata = Maps.newHashMap();\n    event.setMetadata(metadata);\n    context.submitEvent(event);\n\n    try {\n      Thread.sleep(100);\n    } catch (InterruptedException ex) {\n      Thread.currentThread().interrupt();\n    }\n\n    reporter.report();\n\n    MockKeyValuePusher pusher = reporter.getPusher();\n    Pair<String, GenericRecord> retrievedEvent = nextKVEvent(pusher.messageIterator());\n\n    Assert.assertEquals(retrievedEvent.getValue().get(\"namespace\"), namespace);\n    Assert.assertEquals(retrievedEvent.getValue().get(\"name\"), eventName);\n    int partition = Integer.parseInt(retrievedEvent.getKey());\n    Assert.assertTrue((0 <= partition && partition <= 99));\n  }\n","date":"2019-05-07 06:53:00","endLine":109,"groupId":"1063","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testKafkaKeyValueEventObjectReporter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a0/2ce3f006a1d704506b1f6cf25d0802dd1115a6.src","preCode":"  public static void testKafkaKeyValueEventObjectReporter()\n      throws IOException {\n    MetricContext context = MetricContext.builder(\"context\").build();\n    String namespace = \"org.apache.gobblin.metrics:gobblin.metrics.test\";\n\n    Properties properties = new Properties();\n    properties.put(KafkaSchemaRegistryConfigurationKeys.KAFKA_SCHEMA_REGISTRY_OVERRIDE_NAMESPACE, namespace);\n    properties.put(\"pusherClass\", \"org.apache.gobblin.metrics.reporter.MockKeyValuePusher\");\n\n    KeyValueEventObjectReporterTest reporter = getBuilder(context, properties).build(\"localhost:0000\", \"topic\");\n\n    String eventName = \"testEvent\";\n\n    GobblinTrackingEvent event = new GobblinTrackingEvent();\n    event.setName(eventName);\n    event.setNamespace(namespace);\n    Map<String, String> metadata = Maps.newHashMap();\n    event.setMetadata(metadata);\n    context.submitEvent(event);\n\n    try {\n      Thread.sleep(100);\n    } catch (InterruptedException ex) {\n      Thread.currentThread().interrupt();\n    }\n\n    reporter.report();\n\n    MockKeyValuePusher pusher = reporter.getPusher();\n    Pair<String, GenericRecord> retrievedEvent = nextKVEvent(pusher.messageIterator());\n\n    Assert.assertEquals(retrievedEvent.getValue().get(\"namespace\"), namespace);\n    Assert.assertEquals(retrievedEvent.getValue().get(\"name\"), eventName);\n    int partition = Integer.parseInt(retrievedEvent.getKey());\n    Assert.assertTrue((0 <= partition && partition <= 99));\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/test/java/org/apache/gobblin/metrics/reporter/KeyValueEventObjectReporterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"856fbc103e9fd144f062fb0ecaeba1f35f2f205b","commitMessage":"@@@[GOBBLIN-758] Added new reporters to emit MetricReport and GobblinTrackingEvent without serializing them. Also added random key generator for reporters.\n\nCloses #2622 from vikrambohra/ETL-8675\n","date":"2019-05-07 06:53:00","modifiedFileCount":"8","status":"B","submitter":"vbohra"},{"authorTime":"2019-07-16 05:38:21","codes":[{"authorDate":"2019-07-16 05:38:21","commitOrder":2,"curCode":"  public static void testKafkaKeyValueMetricObjectReporter()\n      throws IOException {\n    MetricContext metricContext = MetricContext.builder(\"context\").build();\n\n    String namespace = \"org.apache.gobblin.metrics:gobblin.metrics.test\";\n    String name = TOPIC;\n    Properties properties = new Properties();\n    properties.put(KafkaSchemaRegistryConfigurationKeys.KAFKA_SCHEMA_REGISTRY_OVERRIDE_NAMESPACE, namespace);\n    properties.put(\"pusherClass\", \"org.apache.gobblin.metrics.reporter.MockKeyValuePusher\");\n\n    KeyValueMetricObjectReporterTest reporter =\n        getBuilder(properties).build(\"localhost:0000\", TOPIC, ConfigUtils.propertiesToConfig(properties));\n\n    reporter.report(metricContext);\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      Thread.currentThread().interrupt();\n    }\n\n    MockKeyValuePusher pusher = reporter.getPusher();\n    Pair<String, GenericRecord> retrievedEvent = nextKVReport(pusher.messageIterator());\n\n    Assert.assertEquals(retrievedEvent.getValue().getSchema().getNamespace(), \"gobblin.metrics.test\");\n    Assert.assertEquals(retrievedEvent.getValue().getSchema().getName(), name);\n    int partition = Integer.parseInt(retrievedEvent.getKey());\n    Assert.assertTrue((0 <= partition && partition <= 99));\n    Assert.assertTrue(retrievedEvent.getValue().getSchema() == reporter.schema);\n\n    reporter.close();\n  }\n","date":"2019-07-16 05:38:21","endLine":101,"groupId":"10445","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testKafkaKeyValueMetricObjectReporter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f6/74b0ec245054de94a758ae720d5944f75124be.src","preCode":"  public static void testKafkaKeyValueMetricObjectReporter()\n      throws IOException {\n    MetricContext metricContext = MetricContext.builder(\"context\").build();\n\n    String namespace = \"org.apache.gobblin.metrics:gobblin.metrics.test\";\n    String name = TOPIC;\n    Properties properties = new Properties();\n    properties.put(KafkaSchemaRegistryConfigurationKeys.KAFKA_SCHEMA_REGISTRY_OVERRIDE_NAMESPACE, namespace);\n    properties.put(\"pusherClass\", \"org.apache.gobblin.metrics.reporter.MockKeyValuePusher\");\n\n    KeyValueMetricObjectReporterTest reporter =\n        getBuilder(properties).build(\"localhost:0000\", TOPIC, ConfigUtils.propertiesToConfig(properties));\n\n    reporter.report(metricContext);\n\n    try {\n      Thread.sleep(1000);\n    } catch (InterruptedException ex) {\n      Thread.currentThread().interrupt();\n    }\n\n    MockKeyValuePusher pusher = reporter.getPusher();\n    Pair<String, GenericRecord> retrievedEvent = nextKVReport(pusher.messageIterator());\n\n    Assert.assertEquals(retrievedEvent.getValue().getSchema().getNamespace(), \"gobblin.metrics.test\");\n    Assert.assertEquals(retrievedEvent.getValue().getSchema().getName(), name);\n    int partition = Integer.parseInt(retrievedEvent.getKey());\n    Assert.assertTrue((0 <= partition && partition <= 99));\n\n    reporter.close();\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/test/java/org/apache/gobblin/metrics/reporter/KeyValueMetricObjectReporterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2019-07-16 05:38:21","commitOrder":2,"curCode":"  public static void testKafkaKeyValueEventObjectReporter()\n      throws IOException {\n    MetricContext context = MetricContext.builder(\"context\").build();\n    String namespace = \"org.apache.gobblin.metrics:gobblin.metrics.test\";\n\n    Properties properties = new Properties();\n    properties.put(KafkaSchemaRegistryConfigurationKeys.KAFKA_SCHEMA_REGISTRY_OVERRIDE_NAMESPACE, namespace);\n    properties.put(\"pusherClass\", \"org.apache.gobblin.metrics.reporter.MockKeyValuePusher\");\n\n    KeyValueEventObjectReporterTest reporter = getBuilder(context, properties).build(\"localhost:0000\", \"topic\");\n\n    String eventName = \"testEvent\";\n\n    GobblinTrackingEvent event = new GobblinTrackingEvent();\n    event.setName(eventName);\n    event.setNamespace(namespace);\n    Map<String, String> metadata = Maps.newHashMap();\n    event.setMetadata(metadata);\n    context.submitEvent(event);\n\n    try {\n      Thread.sleep(100);\n    } catch (InterruptedException ex) {\n      Thread.currentThread().interrupt();\n    }\n\n    reporter.report();\n\n    MockKeyValuePusher pusher = reporter.getPusher();\n    Pair<String, GenericRecord> retrievedEvent = nextKVEvent(pusher.messageIterator());\n\n    Assert.assertEquals(retrievedEvent.getValue().get(\"namespace\"), namespace);\n    Assert.assertEquals(retrievedEvent.getValue().get(\"name\"), eventName);\n    int partition = Integer.parseInt(retrievedEvent.getKey());\n    Assert.assertTrue((0 <= partition && partition <= 99));\n    Assert.assertTrue(retrievedEvent.getValue().getSchema() == reporter.schema);\n  }\n","date":"2019-07-16 05:38:21","endLine":110,"groupId":"10445","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testKafkaKeyValueEventObjectReporter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d2/bf63fa526e643fc58e50ee00c5b08488ba79a4.src","preCode":"  public static void testKafkaKeyValueEventObjectReporter()\n      throws IOException {\n    MetricContext context = MetricContext.builder(\"context\").build();\n    String namespace = \"org.apache.gobblin.metrics:gobblin.metrics.test\";\n\n    Properties properties = new Properties();\n    properties.put(KafkaSchemaRegistryConfigurationKeys.KAFKA_SCHEMA_REGISTRY_OVERRIDE_NAMESPACE, namespace);\n    properties.put(\"pusherClass\", \"org.apache.gobblin.metrics.reporter.MockKeyValuePusher\");\n\n    KeyValueEventObjectReporterTest reporter = getBuilder(context, properties).build(\"localhost:0000\", \"topic\");\n\n    String eventName = \"testEvent\";\n\n    GobblinTrackingEvent event = new GobblinTrackingEvent();\n    event.setName(eventName);\n    event.setNamespace(namespace);\n    Map<String, String> metadata = Maps.newHashMap();\n    event.setMetadata(metadata);\n    context.submitEvent(event);\n\n    try {\n      Thread.sleep(100);\n    } catch (InterruptedException ex) {\n      Thread.currentThread().interrupt();\n    }\n\n    reporter.report();\n\n    MockKeyValuePusher pusher = reporter.getPusher();\n    Pair<String, GenericRecord> retrievedEvent = nextKVEvent(pusher.messageIterator());\n\n    Assert.assertEquals(retrievedEvent.getValue().get(\"namespace\"), namespace);\n    Assert.assertEquals(retrievedEvent.getValue().get(\"name\"), eventName);\n    int partition = Integer.parseInt(retrievedEvent.getKey());\n    Assert.assertTrue((0 <= partition && partition <= 99));\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/test/java/org/apache/gobblin/metrics/reporter/KeyValueEventObjectReporterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"f3dc04da9d05546306fc1d7310a350a3aec76777","commitMessage":"@@@[GOBBLIN-825] Initialize message schema at object construction rather than creating a new instance for every message\n\nCloses #2686 from vikrambohra/master\n","date":"2019-07-16 05:38:21","modifiedFileCount":"6","status":"M","submitter":"vbohra"}]
