[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  int addPartitionDeregisterSteps(List<CopyEntity> copyEntities, String fileSet, int initialPriority,\n      Table table, Partition partition) throws IOException {\n\n    int stepPriority = initialPriority;\n    Collection<Path> partitionPaths = Lists.newArrayList();\n\n    if (this.deleteMethod == DeregisterFileDeleteMethod.RECURSIVE) {\n      partitionPaths = Lists.newArrayList(partition.getDataLocation());\n    } else if (this.deleteMethod == DeregisterFileDeleteMethod.INPUT_FORMAT) {\n      InputFormat<?, ?> inputFormat = HiveUtils.getInputFormat(partition.getTPartition().getSd());\n\n      HiveLocationDescriptor targetLocation = new HiveLocationDescriptor(partition.getDataLocation(), inputFormat,\n          this.targetFs, this.dataset.getProperties());\n\n      partitionPaths = targetLocation.getPaths().keySet();\n    } else if (this.deleteMethod == DeregisterFileDeleteMethod.NO_DELETE) {\n      partitionPaths = Lists.newArrayList();\n    }\n\n    if (!partitionPaths.isEmpty()) {\n      DeleteFileCommitStep deletePaths = DeleteFileCommitStep.fromPaths(this.targetFs, partitionPaths,\n          this.dataset.getProperties(), table.getDataLocation());\n      copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deletePaths, stepPriority++));\n    }\n\n    PartitionDeregisterStep deregister =\n        new PartitionDeregisterStep(table.getTTable(), partition.getTPartition(), this.targetURI, this.hiveRegProps);\n    copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deregister, stepPriority++));\n    return stepPriority;\n  }\n","date":"2017-07-31 15:51:25","endLine":522,"groupId":"7581","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addPartitionDeregisterSteps","params":"(List<CopyEntity>copyEntities@StringfileSet@intinitialPriority@Tabletable@Partitionpartition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/3c/7643bbee23caa974a8e24c7569350bcd345363.src","preCode":"  int addPartitionDeregisterSteps(List<CopyEntity> copyEntities, String fileSet, int initialPriority,\n      Table table, Partition partition) throws IOException {\n\n    int stepPriority = initialPriority;\n    Collection<Path> partitionPaths = Lists.newArrayList();\n\n    if (this.deleteMethod == DeregisterFileDeleteMethod.RECURSIVE) {\n      partitionPaths = Lists.newArrayList(partition.getDataLocation());\n    } else if (this.deleteMethod == DeregisterFileDeleteMethod.INPUT_FORMAT) {\n      InputFormat<?, ?> inputFormat = HiveUtils.getInputFormat(partition.getTPartition().getSd());\n\n      HiveLocationDescriptor targetLocation = new HiveLocationDescriptor(partition.getDataLocation(), inputFormat,\n          this.targetFs, this.dataset.getProperties());\n\n      partitionPaths = targetLocation.getPaths().keySet();\n    } else if (this.deleteMethod == DeregisterFileDeleteMethod.NO_DELETE) {\n      partitionPaths = Lists.newArrayList();\n    }\n\n    if (!partitionPaths.isEmpty()) {\n      DeleteFileCommitStep deletePaths = DeleteFileCommitStep.fromPaths(this.targetFs, partitionPaths,\n          this.dataset.getProperties(), table.getDataLocation());\n      copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deletePaths, stepPriority++));\n    }\n\n    PartitionDeregisterStep deregister =\n        new PartitionDeregisterStep(table.getTTable(), partition.getTPartition(), this.targetURI, this.hiveRegProps);\n    copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deregister, stepPriority++));\n    return stepPriority;\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/copy/hive/HiveCopyEntityHelper.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  protected int addTableDeregisterSteps(List<CopyEntity> copyEntities, String fileSet, int initialPriority, Table table)\n      throws IOException {\n\n    int stepPriority = initialPriority;\n    Collection<Path> tablePaths = Lists.newArrayList();\n\n    switch (this.getDeleteMethod()) {\n      case RECURSIVE:\n        tablePaths = Lists.newArrayList(table.getDataLocation());\n        break;\n      case INPUT_FORMAT:\n        InputFormat<?, ?> inputFormat = HiveUtils.getInputFormat(table.getSd());\n\n        HiveLocationDescriptor targetLocation = new HiveLocationDescriptor(table.getDataLocation(), inputFormat,\n            this.getTargetFs(), this.getDataset().getProperties());\n\n        tablePaths = targetLocation.getPaths().keySet();\n        break;\n      case NO_DELETE:\n        tablePaths = Lists.newArrayList();\n        break;\n      default:\n        tablePaths = Lists.newArrayList();\n    }\n\n    if (!tablePaths.isEmpty()) {\n      DeleteFileCommitStep deletePaths = DeleteFileCommitStep.fromPaths(this.getTargetFs(), tablePaths,\n          this.getDataset().getProperties(), table.getDataLocation());\n      copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deletePaths, stepPriority++));\n    }\n\n    TableDeregisterStep deregister =\n        new TableDeregisterStep(table.getTTable(), this.getTargetURI(), this.getHiveRegProps());\n    copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deregister, stepPriority++));\n    return stepPriority;\n  }\n","date":"2017-07-31 15:51:25","endLine":560,"groupId":"6329","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addTableDeregisterSteps","params":"(List<CopyEntity>copyEntities@StringfileSet@intinitialPriority@Tabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/3c/7643bbee23caa974a8e24c7569350bcd345363.src","preCode":"  protected int addTableDeregisterSteps(List<CopyEntity> copyEntities, String fileSet, int initialPriority, Table table)\n      throws IOException {\n\n    int stepPriority = initialPriority;\n    Collection<Path> tablePaths = Lists.newArrayList();\n\n    switch (this.getDeleteMethod()) {\n      case RECURSIVE:\n        tablePaths = Lists.newArrayList(table.getDataLocation());\n        break;\n      case INPUT_FORMAT:\n        InputFormat<?, ?> inputFormat = HiveUtils.getInputFormat(table.getSd());\n\n        HiveLocationDescriptor targetLocation = new HiveLocationDescriptor(table.getDataLocation(), inputFormat,\n            this.getTargetFs(), this.getDataset().getProperties());\n\n        tablePaths = targetLocation.getPaths().keySet();\n        break;\n      case NO_DELETE:\n        tablePaths = Lists.newArrayList();\n        break;\n      default:\n        tablePaths = Lists.newArrayList();\n    }\n\n    if (!tablePaths.isEmpty()) {\n      DeleteFileCommitStep deletePaths = DeleteFileCommitStep.fromPaths(this.getTargetFs(), tablePaths,\n          this.getDataset().getProperties(), table.getDataLocation());\n      copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deletePaths, stepPriority++));\n    }\n\n    TableDeregisterStep deregister =\n        new TableDeregisterStep(table.getTTable(), this.getTargetURI(), this.getHiveRegProps());\n    copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deregister, stepPriority++));\n    return stepPriority;\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/copy/hive/HiveCopyEntityHelper.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2021-01-13 04:20:19","codes":[{"authorDate":"2021-01-13 04:20:19","commitOrder":2,"curCode":"  int addPartitionDeregisterSteps(List<CopyEntity> copyEntities, String fileSet, int initialPriority,\n      Table table, Partition partition) throws IOException {\n\n    int stepPriority = initialPriority;\n    Collection<Path> partitionPaths = Lists.newArrayList();\n\n    if (this.deleteMethod == DeregisterFileDeleteMethod.RECURSIVE) {\n      partitionPaths = Lists.newArrayList(partition.getDataLocation());\n    } else if (this.deleteMethod == DeregisterFileDeleteMethod.INPUT_FORMAT) {\n      InputFormat<?, ?> inputFormat = HiveUtils.getInputFormat(partition.getTPartition().getSd());\n\n      HiveLocationDescriptor targetLocation = new HiveLocationDescriptor(partition.getDataLocation(), inputFormat,\n          this.targetFs, this.dataset.getProperties());\n\n      partitionPaths = targetLocation.getPaths().keySet();\n    } else if (this.deleteMethod == DeregisterFileDeleteMethod.NO_DELETE) {\n      partitionPaths = Lists.newArrayList();\n    }\n\n    if (!partitionPaths.isEmpty()) {\n      DeleteFileCommitStep deletePaths = DeleteFileCommitStep.fromPaths(this.targetFs, partitionPaths,\n          this.dataset.getProperties(), table.getDataLocation());\n      copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deletePaths, stepPriority++));\n    }\n\n    PartitionDeregisterStep deregister =\n        new PartitionDeregisterStep(table.getTTable(), partition.getTPartition(), this.targetMetastoreURI, this.hiveRegProps);\n    copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deregister, stepPriority++));\n    return stepPriority;\n  }\n","date":"2021-01-13 04:20:19","endLine":541,"groupId":"101730","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addPartitionDeregisterSteps","params":"(List<CopyEntity>copyEntities@StringfileSet@intinitialPriority@Tabletable@Partitionpartition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ad/8d167987a38d317c143e6a5a0d372454e136e5.src","preCode":"  int addPartitionDeregisterSteps(List<CopyEntity> copyEntities, String fileSet, int initialPriority,\n      Table table, Partition partition) throws IOException {\n\n    int stepPriority = initialPriority;\n    Collection<Path> partitionPaths = Lists.newArrayList();\n\n    if (this.deleteMethod == DeregisterFileDeleteMethod.RECURSIVE) {\n      partitionPaths = Lists.newArrayList(partition.getDataLocation());\n    } else if (this.deleteMethod == DeregisterFileDeleteMethod.INPUT_FORMAT) {\n      InputFormat<?, ?> inputFormat = HiveUtils.getInputFormat(partition.getTPartition().getSd());\n\n      HiveLocationDescriptor targetLocation = new HiveLocationDescriptor(partition.getDataLocation(), inputFormat,\n          this.targetFs, this.dataset.getProperties());\n\n      partitionPaths = targetLocation.getPaths().keySet();\n    } else if (this.deleteMethod == DeregisterFileDeleteMethod.NO_DELETE) {\n      partitionPaths = Lists.newArrayList();\n    }\n\n    if (!partitionPaths.isEmpty()) {\n      DeleteFileCommitStep deletePaths = DeleteFileCommitStep.fromPaths(this.targetFs, partitionPaths,\n          this.dataset.getProperties(), table.getDataLocation());\n      copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deletePaths, stepPriority++));\n    }\n\n    PartitionDeregisterStep deregister =\n        new PartitionDeregisterStep(table.getTTable(), partition.getTPartition(), this.targetURI, this.hiveRegProps);\n    copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deregister, stepPriority++));\n    return stepPriority;\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/copy/hive/HiveCopyEntityHelper.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":512,"status":"M"},{"authorDate":"2021-01-13 04:20:19","commitOrder":2,"curCode":"  protected int addTableDeregisterSteps(List<CopyEntity> copyEntities, String fileSet, int initialPriority, Table table)\n      throws IOException {\n\n    int stepPriority = initialPriority;\n    Collection<Path> tablePaths = Lists.newArrayList();\n\n    switch (this.getDeleteMethod()) {\n      case RECURSIVE:\n        tablePaths = Lists.newArrayList(table.getDataLocation());\n        break;\n      case INPUT_FORMAT:\n        InputFormat<?, ?> inputFormat = HiveUtils.getInputFormat(table.getSd());\n\n        HiveLocationDescriptor targetLocation = new HiveLocationDescriptor(table.getDataLocation(), inputFormat,\n            this.getTargetFs(), this.getDataset().getProperties());\n\n        tablePaths = targetLocation.getPaths().keySet();\n        break;\n      case NO_DELETE:\n        tablePaths = Lists.newArrayList();\n        break;\n      default:\n        tablePaths = Lists.newArrayList();\n    }\n\n    if (!tablePaths.isEmpty()) {\n      DeleteFileCommitStep deletePaths = DeleteFileCommitStep.fromPaths(this.getTargetFs(), tablePaths,\n          this.getDataset().getProperties(), table.getDataLocation());\n      copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deletePaths, stepPriority++));\n    }\n\n    TableDeregisterStep deregister =\n        new TableDeregisterStep(table.getTTable(), this.getTargetMetastoreURI(), this.getHiveRegProps());\n    copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deregister, stepPriority++));\n    return stepPriority;\n  }\n","date":"2021-01-13 04:20:19","endLine":579,"groupId":"101730","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addTableDeregisterSteps","params":"(List<CopyEntity>copyEntities@StringfileSet@intinitialPriority@Tabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ad/8d167987a38d317c143e6a5a0d372454e136e5.src","preCode":"  protected int addTableDeregisterSteps(List<CopyEntity> copyEntities, String fileSet, int initialPriority, Table table)\n      throws IOException {\n\n    int stepPriority = initialPriority;\n    Collection<Path> tablePaths = Lists.newArrayList();\n\n    switch (this.getDeleteMethod()) {\n      case RECURSIVE:\n        tablePaths = Lists.newArrayList(table.getDataLocation());\n        break;\n      case INPUT_FORMAT:\n        InputFormat<?, ?> inputFormat = HiveUtils.getInputFormat(table.getSd());\n\n        HiveLocationDescriptor targetLocation = new HiveLocationDescriptor(table.getDataLocation(), inputFormat,\n            this.getTargetFs(), this.getDataset().getProperties());\n\n        tablePaths = targetLocation.getPaths().keySet();\n        break;\n      case NO_DELETE:\n        tablePaths = Lists.newArrayList();\n        break;\n      default:\n        tablePaths = Lists.newArrayList();\n    }\n\n    if (!tablePaths.isEmpty()) {\n      DeleteFileCommitStep deletePaths = DeleteFileCommitStep.fromPaths(this.getTargetFs(), tablePaths,\n          this.getDataset().getProperties(), table.getDataLocation());\n      copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deletePaths, stepPriority++));\n    }\n\n    TableDeregisterStep deregister =\n        new TableDeregisterStep(table.getTTable(), this.getTargetURI(), this.getHiveRegProps());\n    copyEntities.add(new PostPublishStep(fileSet, Maps.<String, String> newHashMap(), deregister, stepPriority++));\n    return stepPriority;\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/copy/hive/HiveCopyEntityHelper.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":544,"status":"M"}],"commitId":"f2283c0f8fbff0a5305aee54884359b2cba5ac65","commitMessage":"@@@[GOBBLIN-1339] Add cluster name to dataset descriptor\n\n[GOBBLIN-1339] Add cluster name to dataset\ndescriptor\n\nWe use dataset descriptors to track lineage.\nPreviously.  it\nonly included the platform name (hive. hdfs) and\npath of the\ndataset. As a result.  we could not differentiate\nthe data copy\nbetween multiple production clusters.  as the\ndataset descriptors\nwere the same for them. We add an optional cluster\nname to\naddress that.\n\nThis change will be used for data copy audit\nsystem.\n\nHive and file-based copy code is updated to\ninclude cluster names.\n\nUse full storage system url instead of just well-\nknown name\n\nCloses #3178 from aplex/dataset-cluster\n","date":"2021-01-13 04:20:19","modifiedFileCount":"13","status":"M","submitter":"aprokofiev"}]
