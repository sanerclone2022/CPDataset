[{"authorTime":"2021-03-24 06:21:10","codes":[{"authorDate":"2021-04-13 05:12:15","commitOrder":2,"curCode":"  public void testChangeProperty() throws IOException {\n    Table table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0));\n    Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"), \"0-3000\");\n    Assert.assertEquals(table.currentSnapshot().allManifests().size(), 3);\n    Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"), \"30\");\n    Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"), \"40\");\n\n    gmce.setOldFilePrefixes(null);\n    DataFile dailyFile = DataFile.newBuilder()\n        .setFilePath(dailyDataFile.toString())\n        .setFileFormat(\"avro\")\n        .setFileMetrics(DataMetrics.newBuilder().setRecordCount(0L).build())\n        .build();\n    gmce.setNewFiles(Lists.newArrayList(dailyFile));\n    gmce.setOperationType(OperationType.change_property);\n    gmce.setTopicPartitionOffsetsRange(ImmutableMap.<String, String>builder().put(\"testTopic-1\", \"2000-4000\").build());\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(45L))));\n    gobblinMCEWriter.flush();\n    table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0));\n    \r\n    Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"), \"0-4000\");\n    Assert.assertEquals(table.currentSnapshot().allManifests().size(), 3);\n    \r\n    Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"), \"40\");\n    Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"), \"45\");\n  }\n","date":"2021-04-13 05:12:15","endLine":265,"groupId":"3818","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testChangeProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/cb/1c32cd70c6d357f0bbcfde6fe272c9cdd6147c.src","preCode":"  public void testChangeProperty() throws IOException {\n    Table table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0));\n    Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"), \"0-3000\");\n    Assert.assertEquals(table.currentSnapshot().allManifests().size(), 3);\n    Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"), \"30\");\n    Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"), \"40\");\n\n    gmce.setOldFilePrefixes(null);\n    DataFile dailyFile = DataFile.newBuilder()\n        .setFilePath(dailyDataFile.toString())\n        .setFileFormat(\"avro\")\n        .setFileMetrics(DataMetrics.newBuilder().setRecordCount(0L).build())\n        .build();\n    gmce.setNewFiles(Lists.newArrayList(dailyFile));\n    gmce.setOperationType(OperationType.change_property);\n    gmce.setTopicPartitionOffsetsRange(ImmutableMap.<String, String>builder().put(\"testTopic-1\", \"2000-4000\").build());\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(45L))));\n    gobblinMCEWriter.flush();\n    table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0));\n    \r\n    Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"), \"0-4000\");\n    Assert.assertEquals(table.currentSnapshot().allManifests().size(), 3);\n    \r\n    Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"), \"40\");\n    Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"), \"45\");\n  }\n","realPath":"gobblin-iceberg/src/test/java/org/apache/gobblin/iceberg/writer/IcebergMetadataWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"B"},{"authorDate":"2021-03-24 06:21:10","commitOrder":2,"curCode":"  public void testHiveWriteAddFileGMCE() throws IOException {\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(10L))));\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(20L))));\n    gobblinMCEWriter.flush();\n\n\n    \n    gmce.setTopicPartitionOffsetsRange(ImmutableMap.<String, String>builder().put(\"testTopic-1\", \"2000-3000\").build());\n    gmce.setNewFiles(Lists.newArrayList(DataFile.newBuilder()\n        .setFilePath(hourlyDataFile_2.toString())\n        .setFileFormat(\"avro\")\n        .setFileMetrics(DataMetrics.newBuilder().setRecordCount(10L).build())\n        .build()));\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(30L))));\n    gobblinMCEWriter.flush();\n\n    \r\n    try {\n      Assert.assertTrue(client.tableExists(\"hivedb\", \"testTable\"));\n      Assert.assertTrue(client.getPartition(\"hivedb\", \"testTable\",Lists.newArrayList(\"2020-03-17-09\")) != null);\n      Assert.assertTrue(client.getPartition(\"hivedb\", \"testTable\",Lists.newArrayList(\"2020-03-17-08\")) != null);\n    } catch (TException e) {\n      throw new IOException(e);\n    }\n\n  }\n","date":"2021-03-24 06:21:10","endLine":206,"groupId":"2303","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiveWriteAddFileGMCE","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/0d/13ecf8271eab82791b699d1a47a2b90db7d4bf.src","preCode":"  public void testHiveWriteAddFileGMCE() throws IOException {\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(10L))));\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(20L))));\n    gobblinMCEWriter.flush();\n\n\n    \n    gmce.setTopicPartitionOffsetsRange(ImmutableMap.<String, String>builder().put(\"testTopic-1\", \"2000-3000\").build());\n    gmce.setNewFiles(Lists.newArrayList(DataFile.newBuilder()\n        .setFilePath(hourlyDataFile_2.toString())\n        .setFileFormat(\"avro\")\n        .setFileMetrics(DataMetrics.newBuilder().setRecordCount(10L).build())\n        .build()));\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(30L))));\n    gobblinMCEWriter.flush();\n\n    \r\n    try {\n      Assert.assertTrue(client.tableExists(\"hivedb\", \"testTable\"));\n      Assert.assertTrue(client.getPartition(\"hivedb\", \"testTable\",Lists.newArrayList(\"2020-03-17-09\")) != null);\n      Assert.assertTrue(client.getPartition(\"hivedb\", \"testTable\",Lists.newArrayList(\"2020-03-17-08\")) != null);\n    } catch (TException e) {\n      throw new IOException(e);\n    }\n\n  }\n","realPath":"gobblin-iceberg/src/test/java/org/apache/gobblin/iceberg/writer/HiveMetadataWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"NB"}],"commitId":"1a91c42f19f6d629fb61a77fc234274c42fc2770","commitMessage":"@@@[GOBBLIN-1413] Change GMCE publisher to produce GMCE when no file generated. Change IcebergMetadataWriter to correctly update watermark.\n\nadd more comments\n\naddress comments\n\nchoose the latest file when compute dummy file for\nGMCE\n\nfix code format to comply with code style\n\nCloses #3252 from hanghangliu/GOBBLIN-1413-Emit-\nGMCE-as-long-as-watermark-moved\n","date":"2021-04-13 05:12:15","modifiedFileCount":"5","status":"M","submitter":"hanghangliu"},{"authorTime":"2021-03-24 06:21:10","codes":[{"authorDate":"2021-09-11 03:02:42","commitOrder":3,"curCode":"  public void testChangeProperty() throws IOException {\n    Table table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0));\n    Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"), \"0-3000\");\n    Assert.assertEquals(table.currentSnapshot().allManifests().size(), 3);\n    Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"), \"30\");\n    Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"), \"40\");\n\n    gmce.setOldFilePrefixes(null);\n    DataFile dailyFile = DataFile.newBuilder()\n        .setFilePath(dailyDataFile.toString())\n        .setFileFormat(\"avro\")\n        .setFileMetrics(DataMetrics.newBuilder().setRecordCount(0L).build())\n        .build();\n    gmce.setNewFiles(Lists.newArrayList(dailyFile));\n    gmce.setOperationType(OperationType.change_property);\n    gmce.setTopicPartitionOffsetsRange(ImmutableMap.<String, String>builder().put(\"testTopic-1\", \"2000-4000\").build());\n    GenericRecord genericGmce = GenericData.get().deepCopy(gmce.getSchema(), gmce);\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(genericGmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(45L))));\n    gobblinMCEWriter.flush();\n    table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0));\n    \r\n    Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"), \"0-4000\");\n    Assert.assertEquals(table.currentSnapshot().allManifests().size(), 3);\n    \r\n    Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"), \"40\");\n    Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"), \"45\");\n  }\n","date":"2021-09-11 03:02:42","endLine":326,"groupId":"101751","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testChangeProperty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c2/34675526d8e6fe21bf54a3fb176b7c01dd1cf1.src","preCode":"  public void testChangeProperty() throws IOException {\n    Table table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0));\n    Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"), \"0-3000\");\n    Assert.assertEquals(table.currentSnapshot().allManifests().size(), 3);\n    Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"), \"30\");\n    Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"), \"40\");\n\n    gmce.setOldFilePrefixes(null);\n    DataFile dailyFile = DataFile.newBuilder()\n        .setFilePath(dailyDataFile.toString())\n        .setFileFormat(\"avro\")\n        .setFileMetrics(DataMetrics.newBuilder().setRecordCount(0L).build())\n        .build();\n    gmce.setNewFiles(Lists.newArrayList(dailyFile));\n    gmce.setOperationType(OperationType.change_property);\n    gmce.setTopicPartitionOffsetsRange(ImmutableMap.<String, String>builder().put(\"testTopic-1\", \"2000-4000\").build());\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(45L))));\n    gobblinMCEWriter.flush();\n    table = catalog.loadTable(catalog.listTables(Namespace.of(dbName)).get(0));\n    \r\n    Assert.assertEquals(table.properties().get(\"offset.range.testTopic-1\"), \"0-4000\");\n    Assert.assertEquals(table.currentSnapshot().allManifests().size(), 3);\n    \r\n    Assert.assertEquals(table.properties().get(\"gmce.low.watermark.GobblinMetadataChangeEvent_test-1\"), \"40\");\n    Assert.assertEquals(table.properties().get(\"gmce.high.watermark.GobblinMetadataChangeEvent_test-1\"), \"45\");\n  }\n","realPath":"gobblin-iceberg/src/test/java/org/apache/gobblin/iceberg/writer/IcebergMetadataWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2021-03-24 06:21:10","commitOrder":3,"curCode":"  public void testHiveWriteAddFileGMCE() throws IOException {\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(10L))));\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(20L))));\n    gobblinMCEWriter.flush();\n\n\n    \n    gmce.setTopicPartitionOffsetsRange(ImmutableMap.<String, String>builder().put(\"testTopic-1\", \"2000-3000\").build());\n    gmce.setNewFiles(Lists.newArrayList(DataFile.newBuilder()\n        .setFilePath(hourlyDataFile_2.toString())\n        .setFileFormat(\"avro\")\n        .setFileMetrics(DataMetrics.newBuilder().setRecordCount(10L).build())\n        .build()));\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(30L))));\n    gobblinMCEWriter.flush();\n\n    \r\n    try {\n      Assert.assertTrue(client.tableExists(\"hivedb\", \"testTable\"));\n      Assert.assertTrue(client.getPartition(\"hivedb\", \"testTable\",Lists.newArrayList(\"2020-03-17-09\")) != null);\n      Assert.assertTrue(client.getPartition(\"hivedb\", \"testTable\",Lists.newArrayList(\"2020-03-17-08\")) != null);\n    } catch (TException e) {\n      throw new IOException(e);\n    }\n\n  }\n","date":"2021-03-24 06:21:10","endLine":206,"groupId":"101751","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHiveWriteAddFileGMCE","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/0d/13ecf8271eab82791b699d1a47a2b90db7d4bf.src","preCode":"  public void testHiveWriteAddFileGMCE() throws IOException {\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(10L))));\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(20L))));\n    gobblinMCEWriter.flush();\n\n\n    \n    gmce.setTopicPartitionOffsetsRange(ImmutableMap.<String, String>builder().put(\"testTopic-1\", \"2000-3000\").build());\n    gmce.setNewFiles(Lists.newArrayList(DataFile.newBuilder()\n        .setFilePath(hourlyDataFile_2.toString())\n        .setFileFormat(\"avro\")\n        .setFileMetrics(DataMetrics.newBuilder().setRecordCount(10L).build())\n        .build()));\n    gobblinMCEWriter.writeEnvelope(new RecordEnvelope<>(gmce,\n        new KafkaStreamingExtractor.KafkaWatermark(\n            new KafkaPartition.Builder().withTopicName(\"GobblinMetadataChangeEvent_test\").withId(1).build(),\n            new LongWatermark(30L))));\n    gobblinMCEWriter.flush();\n\n    \r\n    try {\n      Assert.assertTrue(client.tableExists(\"hivedb\", \"testTable\"));\n      Assert.assertTrue(client.getPartition(\"hivedb\", \"testTable\",Lists.newArrayList(\"2020-03-17-09\")) != null);\n      Assert.assertTrue(client.getPartition(\"hivedb\", \"testTable\",Lists.newArrayList(\"2020-03-17-08\")) != null);\n    } catch (TException e) {\n      throw new IOException(e);\n    }\n\n  }\n","realPath":"gobblin-iceberg/src/test/java/org/apache/gobblin/iceberg/writer/HiveMetadataWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"N"}],"commitId":"47707df00a6884ada5974a5f5203408ce1efb890","commitMessage":"@@@[GOBBLIN-1533] Add completeness watermark to iceberg tables (#3385)\n\n* [GOBBLIN-1533] Add completeness watermark to iceberg tables\n\n* updated hive metadata writer test\n\n* Add apache header\n\n* Added correct default partition type\n\n* Fixed kafka audit url and logic to get topic name for iceberg table\n\n* Changes based on review\n\n* Make audit check granularity configurable\n\n* Added additional optimization to check for current hour during completion watermark calculation\n\n* optimization to skip audit check if its upto date by checking the seconds from epoch between current watermark and now\n\n* fixed test case\n\n* Replace hours from epoch with duration\n\n* Moved logging\n\n* Update partition spec with late field even when schema has been updated","date":"2021-09-11 03:02:42","modifiedFileCount":"8","status":"M","submitter":"vbohra"}]
