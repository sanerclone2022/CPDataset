[{"authorTime":"2017-08-11 02:10:54","codes":[{"authorDate":"2017-09-06 02:23:29","commitOrder":3,"curCode":"  public static Optional<Path> getDestinationPartitionLocation(Optional<Table> table, WorkUnitState state,\n      String partitionName)\n      throws DataConversionException {\n    Optional<org.apache.hadoop.hive.metastore.api.Partition> partitionOptional;\n    if (!table.isPresent()) {\n      return Optional.absent();\n    }\n    try {\n      HiveMetastoreClientPool pool = HiveMetastoreClientPool.get(state.getJobState().getProperties(),\n          Optional.fromNullable(state.getJobState().getProp(HiveDatasetFinder.HIVE_METASTORE_URI_KEY)));\n      try (AutoReturnableObject<IMetaStoreClient> client = pool.getClient()) {\n        partitionOptional =\n            Optional.of(client.get().getPartition(table.get().getDbName(), table.get().getTableName(), partitionName));\n      } catch (NoSuchObjectException e) {\n        return Optional.absent();\n      }\n      if (partitionOptional.isPresent()) {\n        org.apache.hadoop.hive.ql.metadata.Table qlTable = new org.apache.hadoop.hive.ql.metadata.Table(table.get());\n        Partition qlPartition =\n            new Partition(qlTable, partitionOptional.get());\n        return Optional.of(qlPartition.getDataLocation());\n      }\n    } catch (IOException | TException | HiveException e) {\n      throw new DataConversionException(\"Could not fetch destination table metadata\", e);\n    }\n    return Optional.absent();\n  }\n","date":"2017-09-06 02:23:29","endLine":332,"groupId":"1131","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getDestinationPartitionLocation","params":"(Optional<Table>table@WorkUnitStatestate@StringpartitionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/11/9ef1cbdedcbb4f608f5b19e17483ed71eb4b37.src","preCode":"  public static Optional<Path> getDestinationPartitionLocation(Optional<Table> table, WorkUnitState state,\n      String partitionName)\n      throws DataConversionException {\n    Optional<org.apache.hadoop.hive.metastore.api.Partition> partitionOptional;\n    if (!table.isPresent()) {\n      return Optional.absent();\n    }\n    try {\n      HiveMetastoreClientPool pool = HiveMetastoreClientPool.get(state.getJobState().getProperties(),\n          Optional.fromNullable(state.getJobState().getProp(HiveDatasetFinder.HIVE_METASTORE_URI_KEY)));\n      try (AutoReturnableObject<IMetaStoreClient> client = pool.getClient()) {\n        partitionOptional =\n            Optional.of(client.get().getPartition(table.get().getDbName(), table.get().getTableName(), partitionName));\n      } catch (NoSuchObjectException e) {\n        return Optional.absent();\n      }\n      if (partitionOptional.isPresent()) {\n        org.apache.hadoop.hive.ql.metadata.Table qlTable = new org.apache.hadoop.hive.ql.metadata.Table(table.get());\n        Partition qlPartition =\n            new Partition(qlTable, partitionOptional.get());\n        return Optional.of(qlPartition.getDataLocation());\n      }\n    } catch (IOException | TException | HiveException e) {\n      throw new DataConversionException(\"Could not fetch destination table metadata\", e);\n    }\n    return Optional.absent();\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/task/HiveConverterUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"B"},{"authorDate":"2017-08-11 02:10:54","commitOrder":3,"curCode":"  private Optional<Path> getDestinationPartitionLocation(Optional<Table> table, WorkUnitState state,\n      String partitionName)\n      throws DataConversionException {\n    Optional<org.apache.hadoop.hive.metastore.api.Partition> partitionOptional =\n        Optional.<org.apache.hadoop.hive.metastore.api.Partition>absent();\n    if (!table.isPresent()) {\n      return Optional.<Path>absent();\n    }\n    try {\n      HiveMetastoreClientPool pool = HiveMetastoreClientPool.get(state.getJobState().getProperties(),\n          Optional.fromNullable(state.getJobState().getProp(HiveDatasetFinder.HIVE_METASTORE_URI_KEY)));\n      try (AutoReturnableObject<IMetaStoreClient> client = pool.getClient()) {\n        partitionOptional =\n            Optional.of(client.get().getPartition(table.get().getDbName(), table.get().getTableName(), partitionName));\n      } catch (NoSuchObjectException e) {\n        return Optional.<Path>absent();\n      }\n      if (partitionOptional.isPresent()) {\n        org.apache.hadoop.hive.ql.metadata.Table qlTable = new org.apache.hadoop.hive.ql.metadata.Table(table.get());\n        org.apache.hadoop.hive.ql.metadata.Partition qlPartition =\n            new org.apache.hadoop.hive.ql.metadata.Partition(qlTable, partitionOptional.get());\n        return Optional.of(qlPartition.getDataLocation());\n      }\n    } catch (IOException | TException | HiveException e) {\n      throw new DataConversionException(\"Could not fetch destination table metadata\", e);\n    }\n    return Optional.<Path>absent();\n  }\n","date":"2017-08-11 02:10:54","endLine":811,"groupId":"1950","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDestinationPartitionLocation","params":"(Optional<Table>table@WorkUnitStatestate@StringpartitionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/9c/4a5ec529f998f2576cf30a1ccdf2512b027338.src","preCode":"  private Optional<Path> getDestinationPartitionLocation(Optional<Table> table, WorkUnitState state,\n      String partitionName)\n      throws DataConversionException {\n    Optional<org.apache.hadoop.hive.metastore.api.Partition> partitionOptional =\n        Optional.<org.apache.hadoop.hive.metastore.api.Partition>absent();\n    if (!table.isPresent()) {\n      return Optional.<Path>absent();\n    }\n    try {\n      HiveMetastoreClientPool pool = HiveMetastoreClientPool.get(state.getJobState().getProperties(),\n          Optional.fromNullable(state.getJobState().getProp(HiveDatasetFinder.HIVE_METASTORE_URI_KEY)));\n      try (AutoReturnableObject<IMetaStoreClient> client = pool.getClient()) {\n        partitionOptional =\n            Optional.of(client.get().getPartition(table.get().getDbName(), table.get().getTableName(), partitionName));\n      } catch (NoSuchObjectException e) {\n        return Optional.<Path>absent();\n      }\n      if (partitionOptional.isPresent()) {\n        org.apache.hadoop.hive.ql.metadata.Table qlTable = new org.apache.hadoop.hive.ql.metadata.Table(table.get());\n        org.apache.hadoop.hive.ql.metadata.Partition qlPartition =\n            new org.apache.hadoop.hive.ql.metadata.Partition(qlTable, partitionOptional.get());\n        return Optional.of(qlPartition.getDataLocation());\n      }\n    } catch (IOException | TException | HiveException e) {\n      throw new DataConversionException(\"Could not fetch destination table metadata\", e);\n    }\n    return Optional.<Path>absent();\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/converter/AbstractAvroToOrcConverter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":784,"status":"NB"}],"commitId":"8a374f207bc7838bcfb144d644b6243c78dc122d","commitMessage":"@@@[GOBBLIN-181] Create HiveTask using customized Gobblin Task\n\nCloses #2062 from arjun4084346/materializer\n","date":"2017-09-06 02:23:29","modifiedFileCount":"5","status":"M","submitter":"Arjun"},{"authorTime":"2018-03-30 02:25:10","codes":[{"authorDate":"2017-09-06 02:23:29","commitOrder":4,"curCode":"  public static Optional<Path> getDestinationPartitionLocation(Optional<Table> table, WorkUnitState state,\n      String partitionName)\n      throws DataConversionException {\n    Optional<org.apache.hadoop.hive.metastore.api.Partition> partitionOptional;\n    if (!table.isPresent()) {\n      return Optional.absent();\n    }\n    try {\n      HiveMetastoreClientPool pool = HiveMetastoreClientPool.get(state.getJobState().getProperties(),\n          Optional.fromNullable(state.getJobState().getProp(HiveDatasetFinder.HIVE_METASTORE_URI_KEY)));\n      try (AutoReturnableObject<IMetaStoreClient> client = pool.getClient()) {\n        partitionOptional =\n            Optional.of(client.get().getPartition(table.get().getDbName(), table.get().getTableName(), partitionName));\n      } catch (NoSuchObjectException e) {\n        return Optional.absent();\n      }\n      if (partitionOptional.isPresent()) {\n        org.apache.hadoop.hive.ql.metadata.Table qlTable = new org.apache.hadoop.hive.ql.metadata.Table(table.get());\n        Partition qlPartition =\n            new Partition(qlTable, partitionOptional.get());\n        return Optional.of(qlPartition.getDataLocation());\n      }\n    } catch (IOException | TException | HiveException e) {\n      throw new DataConversionException(\"Could not fetch destination table metadata\", e);\n    }\n    return Optional.absent();\n  }\n","date":"2017-09-06 02:23:29","endLine":332,"groupId":"101736","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getDestinationPartitionLocation","params":"(Optional<Table>table@WorkUnitStatestate@StringpartitionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/11/9ef1cbdedcbb4f608f5b19e17483ed71eb4b37.src","preCode":"  public static Optional<Path> getDestinationPartitionLocation(Optional<Table> table, WorkUnitState state,\n      String partitionName)\n      throws DataConversionException {\n    Optional<org.apache.hadoop.hive.metastore.api.Partition> partitionOptional;\n    if (!table.isPresent()) {\n      return Optional.absent();\n    }\n    try {\n      HiveMetastoreClientPool pool = HiveMetastoreClientPool.get(state.getJobState().getProperties(),\n          Optional.fromNullable(state.getJobState().getProp(HiveDatasetFinder.HIVE_METASTORE_URI_KEY)));\n      try (AutoReturnableObject<IMetaStoreClient> client = pool.getClient()) {\n        partitionOptional =\n            Optional.of(client.get().getPartition(table.get().getDbName(), table.get().getTableName(), partitionName));\n      } catch (NoSuchObjectException e) {\n        return Optional.absent();\n      }\n      if (partitionOptional.isPresent()) {\n        org.apache.hadoop.hive.ql.metadata.Table qlTable = new org.apache.hadoop.hive.ql.metadata.Table(table.get());\n        Partition qlPartition =\n            new Partition(qlTable, partitionOptional.get());\n        return Optional.of(qlPartition.getDataLocation());\n      }\n    } catch (IOException | TException | HiveException e) {\n      throw new DataConversionException(\"Could not fetch destination table metadata\", e);\n    }\n    return Optional.absent();\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/task/HiveConverterUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"N"},{"authorDate":"2018-03-30 02:25:10","commitOrder":4,"curCode":"  private Optional<Path> getDestinationPartitionLocation(Optional<Table> table, WorkUnitState state,\n      String partitionName)\n      throws DataConversionException {\n    Optional<org.apache.hadoop.hive.metastore.api.Partition> partitionOptional =\n        Optional.<org.apache.hadoop.hive.metastore.api.Partition>absent();\n    if (!table.isPresent()) {\n      return Optional.<Path>absent();\n    }\n    try {\n      HiveMetastoreClientPool pool = HiveMetastoreClientPool.get(state.getJobState().getProperties(),\n          Optional.fromNullable(state.getJobState().getProp(HiveDatasetFinder.HIVE_METASTORE_URI_KEY)));\n      try (AutoReturnableObject<IMetaStoreClient> client = pool.getClient()) {\n        partitionOptional =\n            Optional.of(client.get().getPartition(table.get().getDbName(), table.get().getTableName(), partitionName));\n      } catch (NoSuchObjectException e) {\n        return Optional.<Path>absent();\n      }\n      if (partitionOptional.isPresent()) {\n        org.apache.hadoop.hive.ql.metadata.Table qlTable = new org.apache.hadoop.hive.ql.metadata.Table(table.get());\n        org.apache.hadoop.hive.ql.metadata.Partition qlPartition =\n            new org.apache.hadoop.hive.ql.metadata.Partition(qlTable, partitionOptional.get());\n        return Optional.of(qlPartition.getDataLocation());\n      }\n    } catch (IOException | TException | HiveException e) {\n      throw new DataConversionException(\n          String.format(\"Could not fetch destination table %s.%s metadata\", table.get().getDbName(),\n              table.get().getTableName()), e);\n    }\n    return Optional.<Path>absent();\n  }\n","date":"2018-03-30 02:25:10","endLine":721,"groupId":"101736","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getDestinationPartitionLocation","params":"(Optional<Table>table@WorkUnitStatestate@StringpartitionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/73/2e149a5e206bcb7ff8076c2768ec6bbb48fb21.src","preCode":"  private Optional<Path> getDestinationPartitionLocation(Optional<Table> table, WorkUnitState state,\n      String partitionName)\n      throws DataConversionException {\n    Optional<org.apache.hadoop.hive.metastore.api.Partition> partitionOptional =\n        Optional.<org.apache.hadoop.hive.metastore.api.Partition>absent();\n    if (!table.isPresent()) {\n      return Optional.<Path>absent();\n    }\n    try {\n      HiveMetastoreClientPool pool = HiveMetastoreClientPool.get(state.getJobState().getProperties(),\n          Optional.fromNullable(state.getJobState().getProp(HiveDatasetFinder.HIVE_METASTORE_URI_KEY)));\n      try (AutoReturnableObject<IMetaStoreClient> client = pool.getClient()) {\n        partitionOptional =\n            Optional.of(client.get().getPartition(table.get().getDbName(), table.get().getTableName(), partitionName));\n      } catch (NoSuchObjectException e) {\n        return Optional.<Path>absent();\n      }\n      if (partitionOptional.isPresent()) {\n        org.apache.hadoop.hive.ql.metadata.Table qlTable = new org.apache.hadoop.hive.ql.metadata.Table(table.get());\n        org.apache.hadoop.hive.ql.metadata.Partition qlPartition =\n            new org.apache.hadoop.hive.ql.metadata.Partition(qlTable, partitionOptional.get());\n        return Optional.of(qlPartition.getDataLocation());\n      }\n    } catch (IOException | TException | HiveException e) {\n      throw new DataConversionException(\"Could not fetch destination table metadata\", e);\n    }\n    return Optional.<Path>absent();\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/conversion/hive/converter/AbstractAvroToOrcConverter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":692,"status":"M"}],"commitId":"eda77bcb6ae57fc1b38f7c70c2ac45995fde38b6","commitMessage":"@@@[GOBBLIN-399] Improved logs and error messages for avro2orc conversion\n\nCloses #2323 from aditya1105/master\n","date":"2018-03-30 02:25:10","modifiedFileCount":"4","status":"M","submitter":"Aditya Sharma"}]
