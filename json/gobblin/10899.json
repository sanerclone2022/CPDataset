[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testSingleOutputIterable() throws Exception {\n    MyConverter converter = new MyConverter();\n    BasicAckableForTesting ackable = new BasicAckableForTesting();\n\n    RecordStreamWithMetadata<Integer, String> stream =\n        new RecordStreamWithMetadata<>(Flowable.just(new RecordEnvelope<>(1)), \"schema\").mapRecords(r -> {\n          r.addCallBack(ackable);\n          return r;\n        });\n\n    List<StreamEntity<Integer>> outputRecords = Lists.newArrayList();\n    converter.processStream(stream, new WorkUnitState()).getRecordStream().subscribe(outputRecords::add);\n\n    Assert.assertEquals(outputRecords.size(), 1);\n    Assert.assertEquals(ackable.acked, 0); \r\n\n    outputRecords.get(0).ack();\n    Assert.assertEquals(ackable.acked, 1); \r\n  }\n","date":"2017-07-31 15:51:25","endLine":76,"groupId":"7849","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleOutputIterable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f5/f0ed58de06acafb17b0f1c234a2fce04971e7a.src","preCode":"  public void testSingleOutputIterable() throws Exception {\n    MyConverter converter = new MyConverter();\n    BasicAckableForTesting ackable = new BasicAckableForTesting();\n\n    RecordStreamWithMetadata<Integer, String> stream =\n        new RecordStreamWithMetadata<>(Flowable.just(new RecordEnvelope<>(1)), \"schema\").mapRecords(r -> {\n          r.addCallBack(ackable);\n          return r;\n        });\n\n    List<StreamEntity<Integer>> outputRecords = Lists.newArrayList();\n    converter.processStream(stream, new WorkUnitState()).getRecordStream().subscribe(outputRecords::add);\n\n    Assert.assertEquals(outputRecords.size(), 1);\n    Assert.assertEquals(ackable.acked, 0); \r\n\n    outputRecords.get(0).ack();\n    Assert.assertEquals(ackable.acked, 1); \r\n  }\n","realPath":"gobblin-api/src/test/java/org/apache/gobblin/converter/ConverterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testMultiOutputIterable() throws Exception {\n    MyConverter converter = new MyConverter();\n    BasicAckableForTesting ackable = new BasicAckableForTesting();\n\n    RecordStreamWithMetadata<Integer, String> stream =\n        new RecordStreamWithMetadata<>(Flowable.just(new RecordEnvelope<>(2)), \"schema\").mapRecords(r -> {\n          r.addCallBack(ackable);\n          return r;\n        });\n\n    List<StreamEntity<Integer>> outputRecords = Lists.newArrayList();\n    converter.processStream(stream, new WorkUnitState()).getRecordStream().subscribe(outputRecords::add);\n\n    Assert.assertEquals(outputRecords.size(), 2);\n    Assert.assertEquals(ackable.acked, 0); \r\n\n    outputRecords.get(0).ack();\n    Assert.assertEquals(ackable.acked, 0); \r\n\n    outputRecords.get(1).ack();\n    Assert.assertEquals(ackable.acked, 1); \r\n  }\n","date":"2017-07-31 15:51:25","endLine":100,"groupId":"7849","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiOutputIterable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f5/f0ed58de06acafb17b0f1c234a2fce04971e7a.src","preCode":"  public void testMultiOutputIterable() throws Exception {\n    MyConverter converter = new MyConverter();\n    BasicAckableForTesting ackable = new BasicAckableForTesting();\n\n    RecordStreamWithMetadata<Integer, String> stream =\n        new RecordStreamWithMetadata<>(Flowable.just(new RecordEnvelope<>(2)), \"schema\").mapRecords(r -> {\n          r.addCallBack(ackable);\n          return r;\n        });\n\n    List<StreamEntity<Integer>> outputRecords = Lists.newArrayList();\n    converter.processStream(stream, new WorkUnitState()).getRecordStream().subscribe(outputRecords::add);\n\n    Assert.assertEquals(outputRecords.size(), 2);\n    Assert.assertEquals(ackable.acked, 0); \r\n\n    outputRecords.get(0).ack();\n    Assert.assertEquals(ackable.acked, 0); \r\n\n    outputRecords.get(1).ack();\n    Assert.assertEquals(ackable.acked, 1); \r\n  }\n","realPath":"gobblin-api/src/test/java/org/apache/gobblin/converter/ConverterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-09-15 03:54:23","codes":[{"authorDate":"2017-09-15 03:54:23","commitOrder":2,"curCode":"  public void testSingleOutputIterable() throws Exception {\n    MyConverter converter = new MyConverter();\n    BasicAckableForTesting ackable = new BasicAckableForTesting();\n\n    RecordStreamWithMetadata<Integer, String> stream =\n        new RecordStreamWithMetadata<>(Flowable.just(new RecordEnvelope<>(1)),\n            GlobalMetadata.<String>builder().schema(\"schema\").build()).mapRecords(r -> {\n          r.addCallBack(ackable);\n          return r;\n        });\n\n    List<StreamEntity<Integer>> outputRecords = Lists.newArrayList();\n    converter.processStream(stream, new WorkUnitState()).getRecordStream().subscribe(outputRecords::add);\n\n    Assert.assertEquals(outputRecords.size(), 1);\n    Assert.assertEquals(ackable.acked, 0); \r\n\n    outputRecords.get(0).ack();\n    Assert.assertEquals(ackable.acked, 1); \r\n  }\n","date":"2017-09-15 03:54:23","endLine":79,"groupId":"10899","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleOutputIterable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/00/ac4f961f30f5ea70fa1a2a11b4b3f40e4647c5.src","preCode":"  public void testSingleOutputIterable() throws Exception {\n    MyConverter converter = new MyConverter();\n    BasicAckableForTesting ackable = new BasicAckableForTesting();\n\n    RecordStreamWithMetadata<Integer, String> stream =\n        new RecordStreamWithMetadata<>(Flowable.just(new RecordEnvelope<>(1)), \"schema\").mapRecords(r -> {\n          r.addCallBack(ackable);\n          return r;\n        });\n\n    List<StreamEntity<Integer>> outputRecords = Lists.newArrayList();\n    converter.processStream(stream, new WorkUnitState()).getRecordStream().subscribe(outputRecords::add);\n\n    Assert.assertEquals(outputRecords.size(), 1);\n    Assert.assertEquals(ackable.acked, 0); \r\n\n    outputRecords.get(0).ack();\n    Assert.assertEquals(ackable.acked, 1); \r\n  }\n","realPath":"gobblin-api/src/test/java/org/apache/gobblin/converter/ConverterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2017-09-15 03:54:23","commitOrder":2,"curCode":"  public void testMultiOutputIterable() throws Exception {\n    MyConverter converter = new MyConverter();\n    BasicAckableForTesting ackable = new BasicAckableForTesting();\n\n    RecordStreamWithMetadata<Integer, String> stream =\n        new RecordStreamWithMetadata<>(Flowable.just(new RecordEnvelope<>(2)),\n            GlobalMetadata.<String>builder().schema(\"schema\").build()).mapRecords(r -> {\n          r.addCallBack(ackable);\n          return r;\n        });\n\n    List<StreamEntity<Integer>> outputRecords = Lists.newArrayList();\n    converter.processStream(stream, new WorkUnitState()).getRecordStream().subscribe(outputRecords::add);\n\n    Assert.assertEquals(outputRecords.size(), 2);\n    Assert.assertEquals(ackable.acked, 0); \r\n\n    outputRecords.get(0).ack();\n    Assert.assertEquals(ackable.acked, 0); \r\n\n    outputRecords.get(1).ack();\n    Assert.assertEquals(ackable.acked, 1); \r\n  }\n","date":"2017-09-15 03:54:23","endLine":104,"groupId":"10899","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiOutputIterable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/00/ac4f961f30f5ea70fa1a2a11b4b3f40e4647c5.src","preCode":"  public void testMultiOutputIterable() throws Exception {\n    MyConverter converter = new MyConverter();\n    BasicAckableForTesting ackable = new BasicAckableForTesting();\n\n    RecordStreamWithMetadata<Integer, String> stream =\n        new RecordStreamWithMetadata<>(Flowable.just(new RecordEnvelope<>(2)), \"schema\").mapRecords(r -> {\n          r.addCallBack(ackable);\n          return r;\n        });\n\n    List<StreamEntity<Integer>> outputRecords = Lists.newArrayList();\n    converter.processStream(stream, new WorkUnitState()).getRecordStream().subscribe(outputRecords::add);\n\n    Assert.assertEquals(outputRecords.size(), 2);\n    Assert.assertEquals(ackable.acked, 0); \r\n\n    outputRecords.get(0).ack();\n    Assert.assertEquals(ackable.acked, 0); \r\n\n    outputRecords.get(1).ack();\n    Assert.assertEquals(ackable.acked, 1); \r\n  }\n","realPath":"gobblin-api/src/test/java/org/apache/gobblin/converter/ConverterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"3a035737f72ce2bffbbe58beac2044b3b46da992","commitMessage":"@@@[GOBBLIN-236] Add a ControlMessage injector as a RecordStreamProcessor\n\nCloses #2090 from htran1/control_message_injection\n","date":"2017-09-15 03:54:23","modifiedFileCount":"14","status":"M","submitter":"Hung Tran"}]
