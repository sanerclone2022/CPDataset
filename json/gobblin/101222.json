[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public boolean addPartitionIfNotExists(HiveTable table, HivePartition partition) throws IOException {\n    try (AutoReturnableObject<IMetaStoreClient> client = this.clientPool.getClient();\n        AutoCloseableLock lock = this.locks.getTableLock(table.getDbName(), table.getTableName())) {\n      try {\n        try (Timer.Context context = this.metricContext.timer(GET_HIVE_PARTITION).time()) {\n          client.get().getPartition(table.getDbName(), table.getTableName(), partition.getValues());\n        }\n        return false;\n      } catch (NoSuchObjectException e) {\n        try (Timer.Context context = this.metricContext.timer(ALTER_PARTITION).time()) {\n          client.get().alter_partition(table.getDbName(), table.getTableName(),\n              getPartitionWithCreateTimeNow(HiveMetaStoreUtils.getPartition(partition)));\n        }\n        HiveMetaStoreEventHelper.submitSuccessfulPartitionAdd(this.eventSubmitter, table, partition);\n        return true;\n      }\n    } catch (TException e) {\n      HiveMetaStoreEventHelper.submitFailedPartitionAdd(this.eventSubmitter, table, partition, e);\n      throw new IOException(String.format(\"Unable to add partition %s in table %s in db %s\", partition.getValues(),\n          table.getTableName(), table.getDbName()), e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":314,"groupId":"900","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addPartitionIfNotExists","params":"(HiveTabletable@HivePartitionpartition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2d/074d9fabc39eef21452b9d6b6545c3e5f529c6.src","preCode":"  public boolean addPartitionIfNotExists(HiveTable table, HivePartition partition) throws IOException {\n    try (AutoReturnableObject<IMetaStoreClient> client = this.clientPool.getClient();\n        AutoCloseableLock lock = this.locks.getTableLock(table.getDbName(), table.getTableName())) {\n      try {\n        try (Timer.Context context = this.metricContext.timer(GET_HIVE_PARTITION).time()) {\n          client.get().getPartition(table.getDbName(), table.getTableName(), partition.getValues());\n        }\n        return false;\n      } catch (NoSuchObjectException e) {\n        try (Timer.Context context = this.metricContext.timer(ALTER_PARTITION).time()) {\n          client.get().alter_partition(table.getDbName(), table.getTableName(),\n              getPartitionWithCreateTimeNow(HiveMetaStoreUtils.getPartition(partition)));\n        }\n        HiveMetaStoreEventHelper.submitSuccessfulPartitionAdd(this.eventSubmitter, table, partition);\n        return true;\n      }\n    } catch (TException e) {\n      HiveMetaStoreEventHelper.submitFailedPartitionAdd(this.eventSubmitter, table, partition, e);\n      throw new IOException(String.format(\"Unable to add partition %s in table %s in db %s\", partition.getValues(),\n          table.getTableName(), table.getDbName()), e);\n    }\n  }\n","realPath":"gobblin-hive-registration/src/main/java/org/apache/gobblin/hive/metastore/HiveMetaStoreBasedRegister.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void alterPartition(HiveTable table, HivePartition partition) throws IOException {\n    try (AutoReturnableObject<IMetaStoreClient> client = this.clientPool.getClient()) {\n      try (Timer.Context context = this.metricContext.timer(ALTER_PARTITION).time()) {\n        client.get().alter_partition(table.getDbName(), table.getTableName(),\n            getPartitionWithCreateTimeNow(HiveMetaStoreUtils.getPartition(partition)));\n      }\n      HiveMetaStoreEventHelper.submitSuccessfulPartitionAlter(eventSubmitter, table, partition);\n    } catch (TException e) {\n      HiveMetaStoreEventHelper.submitFailedPartitionAlter(eventSubmitter, table, partition, e);\n      throw new IOException(String.format(\"Unable to alter partition %s in table %s in db %s\", partition.getValues(),\n          table.getTableName(), table.getDbName()), e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":564,"groupId":"4577","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"alterPartition","params":"(HiveTabletable@HivePartitionpartition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2d/074d9fabc39eef21452b9d6b6545c3e5f529c6.src","preCode":"  public void alterPartition(HiveTable table, HivePartition partition) throws IOException {\n    try (AutoReturnableObject<IMetaStoreClient> client = this.clientPool.getClient()) {\n      try (Timer.Context context = this.metricContext.timer(ALTER_PARTITION).time()) {\n        client.get().alter_partition(table.getDbName(), table.getTableName(),\n            getPartitionWithCreateTimeNow(HiveMetaStoreUtils.getPartition(partition)));\n      }\n      HiveMetaStoreEventHelper.submitSuccessfulPartitionAlter(eventSubmitter, table, partition);\n    } catch (TException e) {\n      HiveMetaStoreEventHelper.submitFailedPartitionAlter(eventSubmitter, table, partition, e);\n      throw new IOException(String.format(\"Unable to alter partition %s in table %s in db %s\", partition.getValues(),\n          table.getTableName(), table.getDbName()), e);\n    }\n  }\n","realPath":"gobblin-hive-registration/src/main/java/org/apache/gobblin/hive/metastore/HiveMetaStoreBasedRegister.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2018-08-24 06:32:48","commitOrder":2,"curCode":"  public boolean addPartitionIfNotExists(HiveTable table, HivePartition partition) throws IOException {\n    try (AutoReturnableObject<IMetaStoreClient> client = this.clientPool.getClient();\n        AutoCloseableLock lock = this.locks.getTableLock(table.getDbName(), table.getTableName())) {\n      try {\n        try (Timer.Context context = this.metricContext.timer(GET_HIVE_PARTITION).time()) {\n          client.get().getPartition(table.getDbName(), table.getTableName(), partition.getValues());\n        }\n        return false;\n      } catch (NoSuchObjectException e) {\n        try (Timer.Context context = this.metricContext.timer(ADD_PARTITION_TIMER).time()) {\n          client.get().add_partition(getPartitionWithCreateTimeNow(HiveMetaStoreUtils.getPartition(partition)));\n        }\n        HiveMetaStoreEventHelper.submitSuccessfulPartitionAdd(this.eventSubmitter, table, partition);\n        return true;\n      }\n    } catch (TException e) {\n      HiveMetaStoreEventHelper.submitFailedPartitionAdd(this.eventSubmitter, table, partition, e);\n      throw new IOException(String.format(\"Unable to add partition %s in table %s in db %s\", partition.getValues(),\n          table.getTableName(), table.getDbName()), e);\n    }\n  }\n","date":"2018-08-24 06:32:48","endLine":313,"groupId":"6473","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addPartitionIfNotExists","params":"(HiveTabletable@HivePartitionpartition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/0e/e544503f979d4a01b7bb617de0fdf52c35d9ef.src","preCode":"  public boolean addPartitionIfNotExists(HiveTable table, HivePartition partition) throws IOException {\n    try (AutoReturnableObject<IMetaStoreClient> client = this.clientPool.getClient();\n        AutoCloseableLock lock = this.locks.getTableLock(table.getDbName(), table.getTableName())) {\n      try {\n        try (Timer.Context context = this.metricContext.timer(GET_HIVE_PARTITION).time()) {\n          client.get().getPartition(table.getDbName(), table.getTableName(), partition.getValues());\n        }\n        return false;\n      } catch (NoSuchObjectException e) {\n        try (Timer.Context context = this.metricContext.timer(ALTER_PARTITION).time()) {\n          client.get().alter_partition(table.getDbName(), table.getTableName(),\n              getPartitionWithCreateTimeNow(HiveMetaStoreUtils.getPartition(partition)));\n        }\n        HiveMetaStoreEventHelper.submitSuccessfulPartitionAdd(this.eventSubmitter, table, partition);\n        return true;\n      }\n    } catch (TException e) {\n      HiveMetaStoreEventHelper.submitFailedPartitionAdd(this.eventSubmitter, table, partition, e);\n      throw new IOException(String.format(\"Unable to add partition %s in table %s in db %s\", partition.getValues(),\n          table.getTableName(), table.getDbName()), e);\n    }\n  }\n","realPath":"gobblin-hive-registration/src/main/java/org/apache/gobblin/hive/metastore/HiveMetaStoreBasedRegister.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void alterPartition(HiveTable table, HivePartition partition) throws IOException {\n    try (AutoReturnableObject<IMetaStoreClient> client = this.clientPool.getClient()) {\n      try (Timer.Context context = this.metricContext.timer(ALTER_PARTITION).time()) {\n        client.get().alter_partition(table.getDbName(), table.getTableName(),\n            getPartitionWithCreateTimeNow(HiveMetaStoreUtils.getPartition(partition)));\n      }\n      HiveMetaStoreEventHelper.submitSuccessfulPartitionAlter(eventSubmitter, table, partition);\n    } catch (TException e) {\n      HiveMetaStoreEventHelper.submitFailedPartitionAlter(eventSubmitter, table, partition, e);\n      throw new IOException(String.format(\"Unable to alter partition %s in table %s in db %s\", partition.getValues(),\n          table.getTableName(), table.getDbName()), e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":564,"groupId":"4577","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"alterPartition","params":"(HiveTabletable@HivePartitionpartition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2d/074d9fabc39eef21452b9d6b6545c3e5f529c6.src","preCode":"  public void alterPartition(HiveTable table, HivePartition partition) throws IOException {\n    try (AutoReturnableObject<IMetaStoreClient> client = this.clientPool.getClient()) {\n      try (Timer.Context context = this.metricContext.timer(ALTER_PARTITION).time()) {\n        client.get().alter_partition(table.getDbName(), table.getTableName(),\n            getPartitionWithCreateTimeNow(HiveMetaStoreUtils.getPartition(partition)));\n      }\n      HiveMetaStoreEventHelper.submitSuccessfulPartitionAlter(eventSubmitter, table, partition);\n    } catch (TException e) {\n      HiveMetaStoreEventHelper.submitFailedPartitionAlter(eventSubmitter, table, partition, e);\n      throw new IOException(String.format(\"Unable to alter partition %s in table %s in db %s\", partition.getValues(),\n          table.getTableName(), table.getDbName()), e);\n    }\n  }\n","realPath":"gobblin-hive-registration/src/main/java/org/apache/gobblin/hive/metastore/HiveMetaStoreBasedRegister.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"N"}],"commitId":"27a54f05ef2c084972db23d200512e6873e954d1","commitMessage":"@@@[GOBBLIN-566] Fix bug in HiveMetastoreBasedRegister where it would try to alter a partition when it didn't exist.\n\nCloses #2429 from ibuenros/hive-register-fix\n","date":"2018-08-24 06:32:48","modifiedFileCount":"1","status":"M","submitter":"ibuenros"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2019-09-03 23:30:39","commitOrder":3,"curCode":"  public boolean addPartitionIfNotExists(HiveTable table, HivePartition partition) throws IOException {\n    try (AutoReturnableObject<IMetaStoreClient> client = this.clientPool.getClient();\n        AutoCloseableHiveLock lock = this.locks.getTableLock(table.getDbName(), table.getTableName())) {\n      try {\n        try (Timer.Context context = this.metricContext.timer(GET_HIVE_PARTITION).time()) {\n          client.get().getPartition(table.getDbName(), table.getTableName(), partition.getValues());\n        }\n        return false;\n      } catch (NoSuchObjectException e) {\n        try (Timer.Context context = this.metricContext.timer(ADD_PARTITION_TIMER).time()) {\n          client.get().add_partition(getPartitionWithCreateTimeNow(HiveMetaStoreUtils.getPartition(partition)));\n        }\n        HiveMetaStoreEventHelper.submitSuccessfulPartitionAdd(this.eventSubmitter, table, partition);\n        return true;\n      }\n    } catch (TException e) {\n      HiveMetaStoreEventHelper.submitFailedPartitionAdd(this.eventSubmitter, table, partition, e);\n      throw new IOException(String.format(\"Unable to add partition %s in table %s in db %s\", partition.getValues(),\n          table.getTableName(), table.getDbName()), e);\n    }\n  }\n","date":"2019-09-03 23:30:39","endLine":363,"groupId":"101222","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addPartitionIfNotExists","params":"(HiveTabletable@HivePartitionpartition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/41/ceaf34070d40e2f2000c06518c30e66ed3d56d.src","preCode":"  public boolean addPartitionIfNotExists(HiveTable table, HivePartition partition) throws IOException {\n    try (AutoReturnableObject<IMetaStoreClient> client = this.clientPool.getClient();\n        AutoCloseableLock lock = this.locks.getTableLock(table.getDbName(), table.getTableName())) {\n      try {\n        try (Timer.Context context = this.metricContext.timer(GET_HIVE_PARTITION).time()) {\n          client.get().getPartition(table.getDbName(), table.getTableName(), partition.getValues());\n        }\n        return false;\n      } catch (NoSuchObjectException e) {\n        try (Timer.Context context = this.metricContext.timer(ADD_PARTITION_TIMER).time()) {\n          client.get().add_partition(getPartitionWithCreateTimeNow(HiveMetaStoreUtils.getPartition(partition)));\n        }\n        HiveMetaStoreEventHelper.submitSuccessfulPartitionAdd(this.eventSubmitter, table, partition);\n        return true;\n      }\n    } catch (TException e) {\n      HiveMetaStoreEventHelper.submitFailedPartitionAdd(this.eventSubmitter, table, partition, e);\n      throw new IOException(String.format(\"Unable to add partition %s in table %s in db %s\", partition.getValues(),\n          table.getTableName(), table.getDbName()), e);\n    }\n  }\n","realPath":"gobblin-hive-registration/src/main/java/org/apache/gobblin/hive/metastore/HiveMetaStoreBasedRegister.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":3,"curCode":"  public void alterPartition(HiveTable table, HivePartition partition) throws IOException {\n    try (AutoReturnableObject<IMetaStoreClient> client = this.clientPool.getClient()) {\n      try (Timer.Context context = this.metricContext.timer(ALTER_PARTITION).time()) {\n        client.get().alter_partition(table.getDbName(), table.getTableName(),\n            getPartitionWithCreateTimeNow(HiveMetaStoreUtils.getPartition(partition)));\n      }\n      HiveMetaStoreEventHelper.submitSuccessfulPartitionAlter(eventSubmitter, table, partition);\n    } catch (TException e) {\n      HiveMetaStoreEventHelper.submitFailedPartitionAlter(eventSubmitter, table, partition, e);\n      throw new IOException(String.format(\"Unable to alter partition %s in table %s in db %s\", partition.getValues(),\n          table.getTableName(), table.getDbName()), e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":564,"groupId":"101222","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"alterPartition","params":"(HiveTabletable@HivePartitionpartition)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2d/074d9fabc39eef21452b9d6b6545c3e5f529c6.src","preCode":"  public void alterPartition(HiveTable table, HivePartition partition) throws IOException {\n    try (AutoReturnableObject<IMetaStoreClient> client = this.clientPool.getClient()) {\n      try (Timer.Context context = this.metricContext.timer(ALTER_PARTITION).time()) {\n        client.get().alter_partition(table.getDbName(), table.getTableName(),\n            getPartitionWithCreateTimeNow(HiveMetaStoreUtils.getPartition(partition)));\n      }\n      HiveMetaStoreEventHelper.submitSuccessfulPartitionAlter(eventSubmitter, table, partition);\n    } catch (TException e) {\n      HiveMetaStoreEventHelper.submitFailedPartitionAlter(eventSubmitter, table, partition, e);\n      throw new IOException(String.format(\"Unable to alter partition %s in table %s in db %s\", partition.getValues(),\n          table.getTableName(), table.getDbName()), e);\n    }\n  }\n","realPath":"gobblin-hive-registration/src/main/java/org/apache/gobblin/hive/metastore/HiveMetaStoreBasedRegister.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"N"}],"commitId":"3523dbcdf41d489ece761c37f5849539cfc8948d","commitMessage":"@@@[GOBBLIN-863] Handle race condition issue for hive registration\n\nCloses #2719 from ZihanLi58/GOBBLIN-863\n","date":"2019-09-03 23:30:39","modifiedFileCount":"5","status":"M","submitter":"Zihan Li"}]
