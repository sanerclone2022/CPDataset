[{"authorTime":"2019-03-15 07:07:35","codes":[{"authorDate":"2019-03-15 07:07:35","commitOrder":1,"curCode":"  public void testAvroReduce()\n      throws IOException, InterruptedException {\n    Schema keySchema = new Schema.Parser().parse(AVRO_KEY_SCHEMA);\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(keySchema.getField(\"key\").schema());\n    keyRecordBuilder.set(\"partitionKey\", 1);\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    GenericRecord record = keyRecordBuilder.build();\n    keyRecordBuilder = new GenericRecordBuilder(keySchema);\n    keyRecordBuilder.set(\"key\", record);\n    GenericRecord keyRecord = keyRecordBuilder.build();\n\n    \r\n    Schema fullSchema = new Schema.Parser().parse(AVRO_FULL_SCHEMA);\n    AvroValue<GenericRecord> fullRecord1 = new AvroValue<>();\n    AvroValue<GenericRecord> fullRecord2 = new AvroValue<>();\n    AvroValue<GenericRecord> fullRecord3 = new AvroValue<>();\n    AvroValue<GenericRecord> fullRecord4 = new AvroValue<>();\n\n    GenericRecordBuilder fullRecordBuilder1 = new GenericRecordBuilder(fullSchema);\n    fullRecordBuilder1.set(\"key\", record);\n    fullRecordBuilder1.set(\"scn\", 123);\n    fullRecordBuilder1.set(\"scn2\", 100);\n    fullRecord1.datum(fullRecordBuilder1.build());\n    fullRecordBuilder1.set(\"scn\", 125);\n    fullRecordBuilder1.set(\"scn2\", 1);\n    fullRecord2.datum(fullRecordBuilder1.build());\n    fullRecordBuilder1.set(\"scn\", 124);\n    fullRecordBuilder1.set(\"scn2\", 10);\n    fullRecord3.datum(fullRecordBuilder1.build());\n    fullRecordBuilder1.set(\"scn\", 122);\n    fullRecordBuilder1.set(\"scn2\", 1000);\n    fullRecord4.datum(fullRecordBuilder1.build());\n\n    Configuration conf = mock(Configuration.class);\n    when(conf.get(AvroKeyDedupReducer.DELTA_SCHEMA_PROVIDER))\n        .thenReturn(FieldAttributeBasedDeltaFieldsProvider.class.getName());\n    when(conf.get(FieldAttributeBasedDeltaFieldsProvider.ATTRIBUTE_FIELD)).thenReturn(\"attributes_json\");\n\n    when(conf.get(FieldAttributeBasedDeltaFieldsProvider.DELTA_PROP_NAME,\n        FieldAttributeBasedDeltaFieldsProvider.DEFAULT_DELTA_PROP_NAME))\n        .thenReturn(FieldAttributeBasedDeltaFieldsProvider.DEFAULT_DELTA_PROP_NAME);\n    RecordKeyDedupReducerBase<AvroKey<GenericRecord>, AvroValue<GenericRecord>,\n        AvroKey<GenericRecord>, NullWritable> reducer = new AvroKeyDedupReducer();\n\n    WrappedReducer.Context reducerContext = mock(WrappedReducer.Context.class);\n    when(reducerContext.getConfiguration()).thenReturn(conf);\n    Counter moreThan1Counter = new GenericCounter();\n    when(reducerContext.getCounter(RecordKeyDedupReducerBase.EVENT_COUNTER.MORE_THAN_1)).thenReturn(moreThan1Counter);\n\n    Counter dedupedCounter = new GenericCounter();\n    when(reducerContext.getCounter(RecordKeyDedupReducerBase.EVENT_COUNTER.DEDUPED)).thenReturn(dedupedCounter);\n\n    Counter recordCounter = new GenericCounter();\n    when(reducerContext.getCounter(RecordKeyDedupReducerBase.EVENT_COUNTER.RECORD_COUNT)).thenReturn(recordCounter);\n    reducer.setup(reducerContext);\n\n    doNothing().when(reducerContext).write(any(AvroKey.class), any(NullWritable.class));\n    List<AvroValue<GenericRecord>> valueIterable =\n        Lists.newArrayList(fullRecord1, fullRecord2, fullRecord3, fullRecord4);\n\n    AvroKey<GenericRecord> key = new AvroKey<>();\n    key.datum(keyRecord);\n    reducer.reduce(key, valueIterable, reducerContext);\n    Assert.assertEquals(reducer.getOutKey().datum(), fullRecord2.datum());\n\n    \r\n    Configuration conf2 = mock(Configuration.class);\n    when(conf2.get(AvroKeyDedupReducer.DELTA_SCHEMA_PROVIDER)).thenReturn(null);\n    when(reducerContext.getConfiguration()).thenReturn(conf2);\n    RecordKeyDedupReducerBase<AvroKey<GenericRecord>, AvroValue<GenericRecord>,\n        AvroKey<GenericRecord>, NullWritable> reducer2 = new AvroKeyDedupReducer();\n    reducer2.setup(reducerContext);\n    reducer2.reduce(key, valueIterable, reducerContext);\n    Assert.assertEquals(reducer2.getOutKey().datum(), fullRecord1.datum());\n\n    \r\n    Schema fullSchema2 = new Schema.Parser().parse(AVRO_FULL_SCHEMA_WITH_TWO_DELTA_FIELDS);\n    GenericRecordBuilder fullRecordBuilder2 = new GenericRecordBuilder(fullSchema2);\n    fullRecordBuilder2.set(\"key\", record);\n    fullRecordBuilder2.set(\"scn\", 123);\n    fullRecordBuilder2.set(\"scn2\", 100);\n    fullRecord1.datum(fullRecordBuilder2.build());\n    fullRecordBuilder2.set(\"scn\", 125);\n    fullRecordBuilder2.set(\"scn2\", 1000);\n    fullRecord2.datum(fullRecordBuilder2.build());\n    fullRecordBuilder2.set(\"scn\", 126);\n    fullRecordBuilder2.set(\"scn2\", 1000);\n    fullRecord3.datum(fullRecordBuilder2.build());\n    fullRecordBuilder2.set(\"scn\", 130);\n    fullRecordBuilder2.set(\"scn2\", 100);\n    fullRecord4.datum(fullRecordBuilder2.build());\n    List<AvroValue<GenericRecord>> valueIterable2 =\n        Lists.newArrayList(fullRecord1, fullRecord2, fullRecord3, fullRecord4);\n    reducer.reduce(key, valueIterable2, reducerContext);\n    Assert.assertEquals(reducer.getOutKey().datum(), fullRecord3.datum());\n\n  }\n","date":"2019-03-15 07:07:35","endLine":178,"groupId":"5371","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAvroReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/61/83f35861fa9bd8771bf98a96a69d0c4b69923f.src","preCode":"  public void testAvroReduce()\n      throws IOException, InterruptedException {\n    Schema keySchema = new Schema.Parser().parse(AVRO_KEY_SCHEMA);\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(keySchema.getField(\"key\").schema());\n    keyRecordBuilder.set(\"partitionKey\", 1);\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    GenericRecord record = keyRecordBuilder.build();\n    keyRecordBuilder = new GenericRecordBuilder(keySchema);\n    keyRecordBuilder.set(\"key\", record);\n    GenericRecord keyRecord = keyRecordBuilder.build();\n\n    \r\n    Schema fullSchema = new Schema.Parser().parse(AVRO_FULL_SCHEMA);\n    AvroValue<GenericRecord> fullRecord1 = new AvroValue<>();\n    AvroValue<GenericRecord> fullRecord2 = new AvroValue<>();\n    AvroValue<GenericRecord> fullRecord3 = new AvroValue<>();\n    AvroValue<GenericRecord> fullRecord4 = new AvroValue<>();\n\n    GenericRecordBuilder fullRecordBuilder1 = new GenericRecordBuilder(fullSchema);\n    fullRecordBuilder1.set(\"key\", record);\n    fullRecordBuilder1.set(\"scn\", 123);\n    fullRecordBuilder1.set(\"scn2\", 100);\n    fullRecord1.datum(fullRecordBuilder1.build());\n    fullRecordBuilder1.set(\"scn\", 125);\n    fullRecordBuilder1.set(\"scn2\", 1);\n    fullRecord2.datum(fullRecordBuilder1.build());\n    fullRecordBuilder1.set(\"scn\", 124);\n    fullRecordBuilder1.set(\"scn2\", 10);\n    fullRecord3.datum(fullRecordBuilder1.build());\n    fullRecordBuilder1.set(\"scn\", 122);\n    fullRecordBuilder1.set(\"scn2\", 1000);\n    fullRecord4.datum(fullRecordBuilder1.build());\n\n    Configuration conf = mock(Configuration.class);\n    when(conf.get(AvroKeyDedupReducer.DELTA_SCHEMA_PROVIDER))\n        .thenReturn(FieldAttributeBasedDeltaFieldsProvider.class.getName());\n    when(conf.get(FieldAttributeBasedDeltaFieldsProvider.ATTRIBUTE_FIELD)).thenReturn(\"attributes_json\");\n\n    when(conf.get(FieldAttributeBasedDeltaFieldsProvider.DELTA_PROP_NAME,\n        FieldAttributeBasedDeltaFieldsProvider.DEFAULT_DELTA_PROP_NAME))\n        .thenReturn(FieldAttributeBasedDeltaFieldsProvider.DEFAULT_DELTA_PROP_NAME);\n    RecordKeyDedupReducerBase<AvroKey<GenericRecord>, AvroValue<GenericRecord>,\n        AvroKey<GenericRecord>, NullWritable> reducer = new AvroKeyDedupReducer();\n\n    WrappedReducer.Context reducerContext = mock(WrappedReducer.Context.class);\n    when(reducerContext.getConfiguration()).thenReturn(conf);\n    Counter moreThan1Counter = new GenericCounter();\n    when(reducerContext.getCounter(RecordKeyDedupReducerBase.EVENT_COUNTER.MORE_THAN_1)).thenReturn(moreThan1Counter);\n\n    Counter dedupedCounter = new GenericCounter();\n    when(reducerContext.getCounter(RecordKeyDedupReducerBase.EVENT_COUNTER.DEDUPED)).thenReturn(dedupedCounter);\n\n    Counter recordCounter = new GenericCounter();\n    when(reducerContext.getCounter(RecordKeyDedupReducerBase.EVENT_COUNTER.RECORD_COUNT)).thenReturn(recordCounter);\n    reducer.setup(reducerContext);\n\n    doNothing().when(reducerContext).write(any(AvroKey.class), any(NullWritable.class));\n    List<AvroValue<GenericRecord>> valueIterable =\n        Lists.newArrayList(fullRecord1, fullRecord2, fullRecord3, fullRecord4);\n\n    AvroKey<GenericRecord> key = new AvroKey<>();\n    key.datum(keyRecord);\n    reducer.reduce(key, valueIterable, reducerContext);\n    Assert.assertEquals(reducer.getOutKey().datum(), fullRecord2.datum());\n\n    \r\n    Configuration conf2 = mock(Configuration.class);\n    when(conf2.get(AvroKeyDedupReducer.DELTA_SCHEMA_PROVIDER)).thenReturn(null);\n    when(reducerContext.getConfiguration()).thenReturn(conf2);\n    RecordKeyDedupReducerBase<AvroKey<GenericRecord>, AvroValue<GenericRecord>,\n        AvroKey<GenericRecord>, NullWritable> reducer2 = new AvroKeyDedupReducer();\n    reducer2.setup(reducerContext);\n    reducer2.reduce(key, valueIterable, reducerContext);\n    Assert.assertEquals(reducer2.getOutKey().datum(), fullRecord1.datum());\n\n    \r\n    Schema fullSchema2 = new Schema.Parser().parse(AVRO_FULL_SCHEMA_WITH_TWO_DELTA_FIELDS);\n    GenericRecordBuilder fullRecordBuilder2 = new GenericRecordBuilder(fullSchema2);\n    fullRecordBuilder2.set(\"key\", record);\n    fullRecordBuilder2.set(\"scn\", 123);\n    fullRecordBuilder2.set(\"scn2\", 100);\n    fullRecord1.datum(fullRecordBuilder2.build());\n    fullRecordBuilder2.set(\"scn\", 125);\n    fullRecordBuilder2.set(\"scn2\", 1000);\n    fullRecord2.datum(fullRecordBuilder2.build());\n    fullRecordBuilder2.set(\"scn\", 126);\n    fullRecordBuilder2.set(\"scn2\", 1000);\n    fullRecord3.datum(fullRecordBuilder2.build());\n    fullRecordBuilder2.set(\"scn\", 130);\n    fullRecordBuilder2.set(\"scn2\", 100);\n    fullRecord4.datum(fullRecordBuilder2.build());\n    List<AvroValue<GenericRecord>> valueIterable2 =\n        Lists.newArrayList(fullRecord1, fullRecord2, fullRecord3, fullRecord4);\n    reducer.reduce(key, valueIterable2, reducerContext);\n    Assert.assertEquals(reducer.getOutKey().datum(), fullRecord3.datum());\n\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/KeyDedupReducerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"},{"authorDate":"2019-03-15 07:07:35","commitOrder":1,"curCode":"  public GenericRecord createRandomRecord () {\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(getSchema());\n    keyRecordBuilder.set(\"partitionKey\", new Long(1));\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    GenericRecord record = keyRecordBuilder.build();\n    return record;\n  }\n","date":"2019-03-15 07:07:35","endLine":155,"groupId":"4708","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createRandomRecord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/90/9d97cec9dbebe2276f2d75a9ee60bad84c7ba2.src","preCode":"  public GenericRecord createRandomRecord () {\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(getSchema());\n    keyRecordBuilder.set(\"partitionKey\", new Long(1));\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    GenericRecord record = keyRecordBuilder.build();\n    return record;\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"B"}],"commitId":"f589c732e298735039e4f2be8058bfdbbe04526b","commitMessage":"@@@[GOBBLIN-699] Orc compaction impl.\n\nCloses #2570 from autumnust/orcCompactionImpl\n","date":"2019-03-15 07:07:35","modifiedFileCount":"14","status":"B","submitter":"Lei Sun"},{"authorTime":"2021-05-27 03:02:12","codes":[{"authorDate":"2019-03-15 07:07:35","commitOrder":2,"curCode":"  public void testAvroReduce()\n      throws IOException, InterruptedException {\n    Schema keySchema = new Schema.Parser().parse(AVRO_KEY_SCHEMA);\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(keySchema.getField(\"key\").schema());\n    keyRecordBuilder.set(\"partitionKey\", 1);\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    GenericRecord record = keyRecordBuilder.build();\n    keyRecordBuilder = new GenericRecordBuilder(keySchema);\n    keyRecordBuilder.set(\"key\", record);\n    GenericRecord keyRecord = keyRecordBuilder.build();\n\n    \r\n    Schema fullSchema = new Schema.Parser().parse(AVRO_FULL_SCHEMA);\n    AvroValue<GenericRecord> fullRecord1 = new AvroValue<>();\n    AvroValue<GenericRecord> fullRecord2 = new AvroValue<>();\n    AvroValue<GenericRecord> fullRecord3 = new AvroValue<>();\n    AvroValue<GenericRecord> fullRecord4 = new AvroValue<>();\n\n    GenericRecordBuilder fullRecordBuilder1 = new GenericRecordBuilder(fullSchema);\n    fullRecordBuilder1.set(\"key\", record);\n    fullRecordBuilder1.set(\"scn\", 123);\n    fullRecordBuilder1.set(\"scn2\", 100);\n    fullRecord1.datum(fullRecordBuilder1.build());\n    fullRecordBuilder1.set(\"scn\", 125);\n    fullRecordBuilder1.set(\"scn2\", 1);\n    fullRecord2.datum(fullRecordBuilder1.build());\n    fullRecordBuilder1.set(\"scn\", 124);\n    fullRecordBuilder1.set(\"scn2\", 10);\n    fullRecord3.datum(fullRecordBuilder1.build());\n    fullRecordBuilder1.set(\"scn\", 122);\n    fullRecordBuilder1.set(\"scn2\", 1000);\n    fullRecord4.datum(fullRecordBuilder1.build());\n\n    Configuration conf = mock(Configuration.class);\n    when(conf.get(AvroKeyDedupReducer.DELTA_SCHEMA_PROVIDER))\n        .thenReturn(FieldAttributeBasedDeltaFieldsProvider.class.getName());\n    when(conf.get(FieldAttributeBasedDeltaFieldsProvider.ATTRIBUTE_FIELD)).thenReturn(\"attributes_json\");\n\n    when(conf.get(FieldAttributeBasedDeltaFieldsProvider.DELTA_PROP_NAME,\n        FieldAttributeBasedDeltaFieldsProvider.DEFAULT_DELTA_PROP_NAME))\n        .thenReturn(FieldAttributeBasedDeltaFieldsProvider.DEFAULT_DELTA_PROP_NAME);\n    RecordKeyDedupReducerBase<AvroKey<GenericRecord>, AvroValue<GenericRecord>,\n        AvroKey<GenericRecord>, NullWritable> reducer = new AvroKeyDedupReducer();\n\n    WrappedReducer.Context reducerContext = mock(WrappedReducer.Context.class);\n    when(reducerContext.getConfiguration()).thenReturn(conf);\n    Counter moreThan1Counter = new GenericCounter();\n    when(reducerContext.getCounter(RecordKeyDedupReducerBase.EVENT_COUNTER.MORE_THAN_1)).thenReturn(moreThan1Counter);\n\n    Counter dedupedCounter = new GenericCounter();\n    when(reducerContext.getCounter(RecordKeyDedupReducerBase.EVENT_COUNTER.DEDUPED)).thenReturn(dedupedCounter);\n\n    Counter recordCounter = new GenericCounter();\n    when(reducerContext.getCounter(RecordKeyDedupReducerBase.EVENT_COUNTER.RECORD_COUNT)).thenReturn(recordCounter);\n    reducer.setup(reducerContext);\n\n    doNothing().when(reducerContext).write(any(AvroKey.class), any(NullWritable.class));\n    List<AvroValue<GenericRecord>> valueIterable =\n        Lists.newArrayList(fullRecord1, fullRecord2, fullRecord3, fullRecord4);\n\n    AvroKey<GenericRecord> key = new AvroKey<>();\n    key.datum(keyRecord);\n    reducer.reduce(key, valueIterable, reducerContext);\n    Assert.assertEquals(reducer.getOutKey().datum(), fullRecord2.datum());\n\n    \r\n    Configuration conf2 = mock(Configuration.class);\n    when(conf2.get(AvroKeyDedupReducer.DELTA_SCHEMA_PROVIDER)).thenReturn(null);\n    when(reducerContext.getConfiguration()).thenReturn(conf2);\n    RecordKeyDedupReducerBase<AvroKey<GenericRecord>, AvroValue<GenericRecord>,\n        AvroKey<GenericRecord>, NullWritable> reducer2 = new AvroKeyDedupReducer();\n    reducer2.setup(reducerContext);\n    reducer2.reduce(key, valueIterable, reducerContext);\n    Assert.assertEquals(reducer2.getOutKey().datum(), fullRecord1.datum());\n\n    \r\n    Schema fullSchema2 = new Schema.Parser().parse(AVRO_FULL_SCHEMA_WITH_TWO_DELTA_FIELDS);\n    GenericRecordBuilder fullRecordBuilder2 = new GenericRecordBuilder(fullSchema2);\n    fullRecordBuilder2.set(\"key\", record);\n    fullRecordBuilder2.set(\"scn\", 123);\n    fullRecordBuilder2.set(\"scn2\", 100);\n    fullRecord1.datum(fullRecordBuilder2.build());\n    fullRecordBuilder2.set(\"scn\", 125);\n    fullRecordBuilder2.set(\"scn2\", 1000);\n    fullRecord2.datum(fullRecordBuilder2.build());\n    fullRecordBuilder2.set(\"scn\", 126);\n    fullRecordBuilder2.set(\"scn2\", 1000);\n    fullRecord3.datum(fullRecordBuilder2.build());\n    fullRecordBuilder2.set(\"scn\", 130);\n    fullRecordBuilder2.set(\"scn2\", 100);\n    fullRecord4.datum(fullRecordBuilder2.build());\n    List<AvroValue<GenericRecord>> valueIterable2 =\n        Lists.newArrayList(fullRecord1, fullRecord2, fullRecord3, fullRecord4);\n    reducer.reduce(key, valueIterable2, reducerContext);\n    Assert.assertEquals(reducer.getOutKey().datum(), fullRecord3.datum());\n\n  }\n","date":"2019-03-15 07:07:35","endLine":178,"groupId":"101541","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAvroReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/61/83f35861fa9bd8771bf98a96a69d0c4b69923f.src","preCode":"  public void testAvroReduce()\n      throws IOException, InterruptedException {\n    Schema keySchema = new Schema.Parser().parse(AVRO_KEY_SCHEMA);\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(keySchema.getField(\"key\").schema());\n    keyRecordBuilder.set(\"partitionKey\", 1);\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    GenericRecord record = keyRecordBuilder.build();\n    keyRecordBuilder = new GenericRecordBuilder(keySchema);\n    keyRecordBuilder.set(\"key\", record);\n    GenericRecord keyRecord = keyRecordBuilder.build();\n\n    \r\n    Schema fullSchema = new Schema.Parser().parse(AVRO_FULL_SCHEMA);\n    AvroValue<GenericRecord> fullRecord1 = new AvroValue<>();\n    AvroValue<GenericRecord> fullRecord2 = new AvroValue<>();\n    AvroValue<GenericRecord> fullRecord3 = new AvroValue<>();\n    AvroValue<GenericRecord> fullRecord4 = new AvroValue<>();\n\n    GenericRecordBuilder fullRecordBuilder1 = new GenericRecordBuilder(fullSchema);\n    fullRecordBuilder1.set(\"key\", record);\n    fullRecordBuilder1.set(\"scn\", 123);\n    fullRecordBuilder1.set(\"scn2\", 100);\n    fullRecord1.datum(fullRecordBuilder1.build());\n    fullRecordBuilder1.set(\"scn\", 125);\n    fullRecordBuilder1.set(\"scn2\", 1);\n    fullRecord2.datum(fullRecordBuilder1.build());\n    fullRecordBuilder1.set(\"scn\", 124);\n    fullRecordBuilder1.set(\"scn2\", 10);\n    fullRecord3.datum(fullRecordBuilder1.build());\n    fullRecordBuilder1.set(\"scn\", 122);\n    fullRecordBuilder1.set(\"scn2\", 1000);\n    fullRecord4.datum(fullRecordBuilder1.build());\n\n    Configuration conf = mock(Configuration.class);\n    when(conf.get(AvroKeyDedupReducer.DELTA_SCHEMA_PROVIDER))\n        .thenReturn(FieldAttributeBasedDeltaFieldsProvider.class.getName());\n    when(conf.get(FieldAttributeBasedDeltaFieldsProvider.ATTRIBUTE_FIELD)).thenReturn(\"attributes_json\");\n\n    when(conf.get(FieldAttributeBasedDeltaFieldsProvider.DELTA_PROP_NAME,\n        FieldAttributeBasedDeltaFieldsProvider.DEFAULT_DELTA_PROP_NAME))\n        .thenReturn(FieldAttributeBasedDeltaFieldsProvider.DEFAULT_DELTA_PROP_NAME);\n    RecordKeyDedupReducerBase<AvroKey<GenericRecord>, AvroValue<GenericRecord>,\n        AvroKey<GenericRecord>, NullWritable> reducer = new AvroKeyDedupReducer();\n\n    WrappedReducer.Context reducerContext = mock(WrappedReducer.Context.class);\n    when(reducerContext.getConfiguration()).thenReturn(conf);\n    Counter moreThan1Counter = new GenericCounter();\n    when(reducerContext.getCounter(RecordKeyDedupReducerBase.EVENT_COUNTER.MORE_THAN_1)).thenReturn(moreThan1Counter);\n\n    Counter dedupedCounter = new GenericCounter();\n    when(reducerContext.getCounter(RecordKeyDedupReducerBase.EVENT_COUNTER.DEDUPED)).thenReturn(dedupedCounter);\n\n    Counter recordCounter = new GenericCounter();\n    when(reducerContext.getCounter(RecordKeyDedupReducerBase.EVENT_COUNTER.RECORD_COUNT)).thenReturn(recordCounter);\n    reducer.setup(reducerContext);\n\n    doNothing().when(reducerContext).write(any(AvroKey.class), any(NullWritable.class));\n    List<AvroValue<GenericRecord>> valueIterable =\n        Lists.newArrayList(fullRecord1, fullRecord2, fullRecord3, fullRecord4);\n\n    AvroKey<GenericRecord> key = new AvroKey<>();\n    key.datum(keyRecord);\n    reducer.reduce(key, valueIterable, reducerContext);\n    Assert.assertEquals(reducer.getOutKey().datum(), fullRecord2.datum());\n\n    \r\n    Configuration conf2 = mock(Configuration.class);\n    when(conf2.get(AvroKeyDedupReducer.DELTA_SCHEMA_PROVIDER)).thenReturn(null);\n    when(reducerContext.getConfiguration()).thenReturn(conf2);\n    RecordKeyDedupReducerBase<AvroKey<GenericRecord>, AvroValue<GenericRecord>,\n        AvroKey<GenericRecord>, NullWritable> reducer2 = new AvroKeyDedupReducer();\n    reducer2.setup(reducerContext);\n    reducer2.reduce(key, valueIterable, reducerContext);\n    Assert.assertEquals(reducer2.getOutKey().datum(), fullRecord1.datum());\n\n    \r\n    Schema fullSchema2 = new Schema.Parser().parse(AVRO_FULL_SCHEMA_WITH_TWO_DELTA_FIELDS);\n    GenericRecordBuilder fullRecordBuilder2 = new GenericRecordBuilder(fullSchema2);\n    fullRecordBuilder2.set(\"key\", record);\n    fullRecordBuilder2.set(\"scn\", 123);\n    fullRecordBuilder2.set(\"scn2\", 100);\n    fullRecord1.datum(fullRecordBuilder2.build());\n    fullRecordBuilder2.set(\"scn\", 125);\n    fullRecordBuilder2.set(\"scn2\", 1000);\n    fullRecord2.datum(fullRecordBuilder2.build());\n    fullRecordBuilder2.set(\"scn\", 126);\n    fullRecordBuilder2.set(\"scn2\", 1000);\n    fullRecord3.datum(fullRecordBuilder2.build());\n    fullRecordBuilder2.set(\"scn\", 130);\n    fullRecordBuilder2.set(\"scn2\", 100);\n    fullRecord4.datum(fullRecordBuilder2.build());\n    List<AvroValue<GenericRecord>> valueIterable2 =\n        Lists.newArrayList(fullRecord1, fullRecord2, fullRecord3, fullRecord4);\n    reducer.reduce(key, valueIterable2, reducerContext);\n    Assert.assertEquals(reducer.getOutKey().datum(), fullRecord3.datum());\n\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/KeyDedupReducerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"N"},{"authorDate":"2021-05-27 03:02:12","commitOrder":2,"curCode":"  private GenericRecord createRandomRecord () {\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(getSchema());\n    keyRecordBuilder.set(\"partitionKey\", new Long(1));\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    GenericRecord record = keyRecordBuilder.build();\n    return record;\n  }\n","date":"2021-06-03 00:50:08","endLine":286,"groupId":"101541","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"createRandomRecord","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/05/4c6ed8f3128ccd5022bc2bd4f0368f39fbf598.src","preCode":"  public GenericRecord createRandomRecord () {\n    GenericRecordBuilder keyRecordBuilder = new GenericRecordBuilder(getSchema());\n    keyRecordBuilder.set(\"partitionKey\", new Long(1));\n    keyRecordBuilder.set(\"environment\", \"test\");\n    keyRecordBuilder.set(\"subKey\", \"2\");\n    GenericRecord record = keyRecordBuilder.build();\n    return record;\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/AvroCompactionTaskTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"75f6afff6a39c01569c63ac7895ea692610fbd2c","commitMessage":"@@@[GOBBLIN-1450] Update test framework version for latest IntelliJ\n\nThe recent version of IntelliJ are not fully compatible with old\nversions of testng and junit that we use. As a result IDE does not show\ntest names in the UI correctly.\n\nNew version of test frameworks should solve this problem.\n\nWe also fix a couple of misconfigurations for TestNG. When the class\nis annotated with \"@Test\".  TestNG will run all public methods as tests.\nWe convert a couple of helper methods to private to fix that.\n","date":"2021-06-03 00:50:08","modifiedFileCount":"9","status":"M","submitter":"aprokofiev"}]
