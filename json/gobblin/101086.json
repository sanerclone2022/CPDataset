[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void createFlowSpec() throws Exception {\n    \r\n    \r\n    IdentityFlowToJobSpecCompiler specCompiler = (IdentityFlowToJobSpecCompiler) this.orchestrator.getSpecCompiler();\n    SpecExecutorInstanceProducer sei = specCompiler.getTopologySpecMap().values().iterator().next().getSpecExecutorInstanceProducer();\n\n    \r\n    Collection<Spec> specs = flowCatalog.getSpecs();\n    logger.info(\"[Before Create] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      FlowSpec flowSpec = (FlowSpec) spec;\n      logger.info(\"[Before Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    \r\n    Assert.assertTrue(specs.size() == 0, \"Spec store should be empty before addition\");\n    \r\n    Assert.assertTrue(((List)(sei.listSpecs().get())).size() == 0, \"SpecExecutorInstanceProducer should not know about \"\n        + \"any Flow before addition\");\n\n    \r\n    this.flowCatalog.put(flowSpec);\n\n    \r\n    specs = flowCatalog.getSpecs();\n    logger.info(\"[After Create] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      flowSpec = (FlowSpec) spec;\n      logger.info(\"[After Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n\n    \r\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Spec after addition\");\n    \r\n    Assert.assertTrue(((List)(sei.listSpecs().get())).size() == 0, \"SpecExecutorInstanceProducer should contain 0 \"\n        + \"Spec after addition\");\n  }\n","date":"2017-07-31 15:51:25","endLine":248,"groupId":"3347","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlowSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/eb/9974acb2e7fdb3da45c4bfe51759973acaa611.src","preCode":"  public void createFlowSpec() throws Exception {\n    \r\n    \r\n    IdentityFlowToJobSpecCompiler specCompiler = (IdentityFlowToJobSpecCompiler) this.orchestrator.getSpecCompiler();\n    SpecExecutorInstanceProducer sei = specCompiler.getTopologySpecMap().values().iterator().next().getSpecExecutorInstanceProducer();\n\n    \r\n    Collection<Spec> specs = flowCatalog.getSpecs();\n    logger.info(\"[Before Create] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      FlowSpec flowSpec = (FlowSpec) spec;\n      logger.info(\"[Before Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    \r\n    Assert.assertTrue(specs.size() == 0, \"Spec store should be empty before addition\");\n    \r\n    Assert.assertTrue(((List)(sei.listSpecs().get())).size() == 0, \"SpecExecutorInstanceProducer should not know about \"\n        + \"any Flow before addition\");\n\n    \r\n    this.flowCatalog.put(flowSpec);\n\n    \r\n    specs = flowCatalog.getSpecs();\n    logger.info(\"[After Create] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      flowSpec = (FlowSpec) spec;\n      logger.info(\"[After Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n\n    \r\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Spec after addition\");\n    \r\n    Assert.assertTrue(((List)(sei.listSpecs().get())).size() == 0, \"SpecExecutorInstanceProducer should contain 0 \"\n        + \"Spec after addition\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/OrchestratorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void deleteFlowSpec() throws Exception {\n    \r\n    IdentityFlowToJobSpecCompiler specCompiler = (IdentityFlowToJobSpecCompiler) this.orchestrator.getSpecCompiler();\n    SpecExecutorInstanceProducer sei = specCompiler.getTopologySpecMap().values().iterator().next().getSpecExecutorInstanceProducer();\n\n    \r\n    Collection<Spec> specs = flowCatalog.getSpecs();\n    logger.info(\"[Before Delete] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      FlowSpec flowSpec = (FlowSpec) spec;\n      logger.info(\"[Before Delete] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    \r\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Flow that was added in last test\");\n    \r\n    int specsInSEI = ((List)(sei.listSpecs().get())).size();\n    Assert.assertTrue(specsInSEI == 0, \"SpecExecutorInstanceProducer should contain 0 \"\n        + \"Spec after addition because Orchestrator is a no-op listener for any new FlowSpecs\");\n\n    \r\n    this.flowCatalog.remove(flowSpec.getUri());\n\n    \r\n    specs = flowCatalog.getSpecs();\n    logger.info(\"[After Delete] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      flowSpec = (FlowSpec) spec;\n      logger.info(\"[After Delete] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n\n    \r\n    Assert.assertTrue(specs.size() == 0, \"Spec store should not contain Spec after deletion\");\n    \r\n    specsInSEI = ((List)(sei.listSpecs().get())).size();\n    Assert.assertTrue(specsInSEI == 0, \"SpecExecutorInstanceProducer should not contain \"\n        + \"Spec after deletion\");\n  }\n","date":"2017-07-31 15:51:25","endLine":289,"groupId":"6179","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteFlowSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/eb/9974acb2e7fdb3da45c4bfe51759973acaa611.src","preCode":"  public void deleteFlowSpec() throws Exception {\n    \r\n    IdentityFlowToJobSpecCompiler specCompiler = (IdentityFlowToJobSpecCompiler) this.orchestrator.getSpecCompiler();\n    SpecExecutorInstanceProducer sei = specCompiler.getTopologySpecMap().values().iterator().next().getSpecExecutorInstanceProducer();\n\n    \r\n    Collection<Spec> specs = flowCatalog.getSpecs();\n    logger.info(\"[Before Delete] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      FlowSpec flowSpec = (FlowSpec) spec;\n      logger.info(\"[Before Delete] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    \r\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Flow that was added in last test\");\n    \r\n    int specsInSEI = ((List)(sei.listSpecs().get())).size();\n    Assert.assertTrue(specsInSEI == 0, \"SpecExecutorInstanceProducer should contain 0 \"\n        + \"Spec after addition because Orchestrator is a no-op listener for any new FlowSpecs\");\n\n    \r\n    this.flowCatalog.remove(flowSpec.getUri());\n\n    \r\n    specs = flowCatalog.getSpecs();\n    logger.info(\"[After Delete] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      flowSpec = (FlowSpec) spec;\n      logger.info(\"[After Delete] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n\n    \r\n    Assert.assertTrue(specs.size() == 0, \"Spec store should not contain Spec after deletion\");\n    \r\n    specsInSEI = ((List)(sei.listSpecs().get())).size();\n    Assert.assertTrue(specsInSEI == 0, \"SpecExecutorInstanceProducer should not contain \"\n        + \"Spec after deletion\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/OrchestratorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":251,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-09-12 17:29:05","codes":[{"authorDate":"2017-09-12 17:29:05","commitOrder":2,"curCode":"  public void createFlowSpec() throws Exception {\n    \r\n    \r\n    IdentityFlowToJobSpecCompiler specCompiler = (IdentityFlowToJobSpecCompiler) this.orchestrator.getSpecCompiler();\n    SpecExecutor sei = specCompiler.getTopologySpecMap().values().iterator().next().getSpecExecutor();\n\n    \r\n    Collection<Spec> specs = flowCatalog.getSpecs();\n    logger.info(\"[Before Create] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      FlowSpec flowSpec = (FlowSpec) spec;\n      logger.info(\"[Before Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    \r\n    Assert.assertTrue(specs.size() == 0, \"Spec store should be empty before addition\");\n    \r\n    Assert.assertTrue(((List)(sei.getProducer().get().listSpecs().get())).size() == 0, \"SpecProducer should not know about \"\n        + \"any Flow before addition\");\n\n    \r\n    this.flowCatalog.put(flowSpec);\n\n    \r\n    specs = flowCatalog.getSpecs();\n    logger.info(\"[After Create] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      flowSpec = (FlowSpec) spec;\n      logger.info(\"[After Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n\n    \r\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Spec after addition\");\n    \r\n    Assert.assertTrue(((List)(sei.getProducer().get().listSpecs().get())).size() == 0, \"SpecProducer should contain 0 \"\n        + \"Spec after addition\");\n  }\n","date":"2017-09-12 17:29:21","endLine":245,"groupId":"101086","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createFlowSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a9/33e85fe6483e9fb715ce6c153adaaa101f5bae.src","preCode":"  public void createFlowSpec() throws Exception {\n    \r\n    \r\n    IdentityFlowToJobSpecCompiler specCompiler = (IdentityFlowToJobSpecCompiler) this.orchestrator.getSpecCompiler();\n    SpecExecutorInstanceProducer sei = specCompiler.getTopologySpecMap().values().iterator().next().getSpecExecutorInstanceProducer();\n\n    \r\n    Collection<Spec> specs = flowCatalog.getSpecs();\n    logger.info(\"[Before Create] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      FlowSpec flowSpec = (FlowSpec) spec;\n      logger.info(\"[Before Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    \r\n    Assert.assertTrue(specs.size() == 0, \"Spec store should be empty before addition\");\n    \r\n    Assert.assertTrue(((List)(sei.listSpecs().get())).size() == 0, \"SpecExecutorInstanceProducer should not know about \"\n        + \"any Flow before addition\");\n\n    \r\n    this.flowCatalog.put(flowSpec);\n\n    \r\n    specs = flowCatalog.getSpecs();\n    logger.info(\"[After Create] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      flowSpec = (FlowSpec) spec;\n      logger.info(\"[After Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n\n    \r\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Spec after addition\");\n    \r\n    Assert.assertTrue(((List)(sei.listSpecs().get())).size() == 0, \"SpecExecutorInstanceProducer should contain 0 \"\n        + \"Spec after addition\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/OrchestratorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"},{"authorDate":"2017-09-12 17:29:05","commitOrder":2,"curCode":"  public void deleteFlowSpec() throws Exception {\n    \r\n    IdentityFlowToJobSpecCompiler specCompiler = (IdentityFlowToJobSpecCompiler) this.orchestrator.getSpecCompiler();\n    SpecExecutor sei = specCompiler.getTopologySpecMap().values().iterator().next().getSpecExecutor();\n\n    \r\n    Collection<Spec> specs = flowCatalog.getSpecs();\n    logger.info(\"[Before Delete] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      FlowSpec flowSpec = (FlowSpec) spec;\n      logger.info(\"[Before Delete] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    \r\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Flow that was added in last test\");\n    \r\n    int specsInSEI = ((List)(sei.getProducer().get().listSpecs().get())).size();\n    Assert.assertTrue(specsInSEI == 0, \"SpecProducer should contain 0 \"\n        + \"Spec after addition because Orchestrator is a no-op listener for any new FlowSpecs\");\n\n    \r\n    this.flowCatalog.remove(flowSpec.getUri());\n\n    \r\n    specs = flowCatalog.getSpecs();\n    logger.info(\"[After Delete] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      flowSpec = (FlowSpec) spec;\n      logger.info(\"[After Delete] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n\n    \r\n    Assert.assertTrue(specs.size() == 0, \"Spec store should not contain Spec after deletion\");\n    \r\n    specsInSEI = ((List)(sei.getProducer().get().listSpecs().get())).size();\n    Assert.assertTrue(specsInSEI == 0, \"SpecProducer should not contain \"\n        + \"Spec after deletion\");\n  }\n","date":"2017-09-12 17:29:21","endLine":286,"groupId":"101086","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteFlowSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a9/33e85fe6483e9fb715ce6c153adaaa101f5bae.src","preCode":"  public void deleteFlowSpec() throws Exception {\n    \r\n    IdentityFlowToJobSpecCompiler specCompiler = (IdentityFlowToJobSpecCompiler) this.orchestrator.getSpecCompiler();\n    SpecExecutorInstanceProducer sei = specCompiler.getTopologySpecMap().values().iterator().next().getSpecExecutorInstanceProducer();\n\n    \r\n    Collection<Spec> specs = flowCatalog.getSpecs();\n    logger.info(\"[Before Delete] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      FlowSpec flowSpec = (FlowSpec) spec;\n      logger.info(\"[Before Delete] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    \r\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Flow that was added in last test\");\n    \r\n    int specsInSEI = ((List)(sei.listSpecs().get())).size();\n    Assert.assertTrue(specsInSEI == 0, \"SpecExecutorInstanceProducer should contain 0 \"\n        + \"Spec after addition because Orchestrator is a no-op listener for any new FlowSpecs\");\n\n    \r\n    this.flowCatalog.remove(flowSpec.getUri());\n\n    \r\n    specs = flowCatalog.getSpecs();\n    logger.info(\"[After Delete] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      flowSpec = (FlowSpec) spec;\n      logger.info(\"[After Delete] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n\n    \r\n    Assert.assertTrue(specs.size() == 0, \"Spec store should not contain Spec after deletion\");\n    \r\n    specsInSEI = ((List)(sei.listSpecs().get())).size();\n    Assert.assertTrue(specsInSEI == 0, \"SpecExecutorInstanceProducer should not contain \"\n        + \"Spec after deletion\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/OrchestratorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"}],"commitId":"9402a9037554bcae4cc958a69a85eb4a16e8c179","commitMessage":"@@@[GOBBLIN-3] Multi-hop flow compiler implementation\n\nCloses #2078 from autumnust/flowcompiler\n","date":"2017-09-12 17:29:21","modifiedFileCount":"18","status":"M","submitter":"Lei Sun"}]
