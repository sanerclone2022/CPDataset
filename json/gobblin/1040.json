[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  private void buildGraphiteMetricReporter(Properties properties) {\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to Graphite\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to Graphite\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME),\n          \"Graphite hostname is missing.\");\n    } catch (IllegalArgumentException exception) {\n      LOGGER.error(\"Not reporting to Graphite due to missing Graphite configuration(s).\", exception);\n      return;\n    }\n\n    String hostname = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME);\n    int port = Integer.parseInt(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PORT));\n\n    GraphiteConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_SENDING_TYPE).toUpperCase();\n    String prefix = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PREFIX,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PREFIX);\n    try {\n      connectionType = GraphiteConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"Graphite Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = GraphiteConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        GraphiteReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(hostname, port).withMetricContextName(\n            this.metricContext.getName()) \r\n            .withMetricsPrefix(prefix)\n            .build(properties);\n      } catch (IOException e) {\n        LOGGER.error(\"Failed to create Graphite metrics reporter. Will not report metrics to Graphite.\", e);\n      }\n    }\n\n    if (eventsEnabled) {\n      boolean emitValueAsKey = PropertiesUtils\n          .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY,\n              ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY);\n      String eventsPortProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_PORT);\n      int eventsPort = (eventsPortProp == null) ? (metricsEnabled ? port\n          : Integer.parseInt(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT)) : Integer.parseInt(eventsPortProp);\n      try {\n        GraphiteEventReporter eventReporter =\n            GraphiteEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(hostname, eventsPort)\n              .withPrefix(prefix)\n              .withEmitValueAsKey(emitValueAsKey)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        LOGGER.error(\"Failed to create Graphite event reporter. Will not report events to Graphite.\", e);\n      }\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":600,"groupId":"8125","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildGraphiteMetricReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e1/23158723c7f3259f0056911d8c8d8547283cf7.src","preCode":"  private void buildGraphiteMetricReporter(Properties properties) {\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to Graphite\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to Graphite\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME),\n          \"Graphite hostname is missing.\");\n    } catch (IllegalArgumentException exception) {\n      LOGGER.error(\"Not reporting to Graphite due to missing Graphite configuration(s).\", exception);\n      return;\n    }\n\n    String hostname = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME);\n    int port = Integer.parseInt(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PORT));\n\n    GraphiteConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_SENDING_TYPE).toUpperCase();\n    String prefix = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PREFIX,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PREFIX);\n    try {\n      connectionType = GraphiteConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"Graphite Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = GraphiteConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        GraphiteReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(hostname, port).withMetricContextName(\n            this.metricContext.getName()) \r\n            .withMetricsPrefix(prefix)\n            .build(properties);\n      } catch (IOException e) {\n        LOGGER.error(\"Failed to create Graphite metrics reporter. Will not report metrics to Graphite.\", e);\n      }\n    }\n\n    if (eventsEnabled) {\n      boolean emitValueAsKey = PropertiesUtils\n          .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY,\n              ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY);\n      String eventsPortProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_PORT);\n      int eventsPort = (eventsPortProp == null) ? (metricsEnabled ? port\n          : Integer.parseInt(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT)) : Integer.parseInt(eventsPortProp);\n      try {\n        GraphiteEventReporter eventReporter =\n            GraphiteEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(hostname, eventsPort)\n              .withPrefix(prefix)\n              .withEmitValueAsKey(emitValueAsKey)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        LOGGER.error(\"Failed to create Graphite event reporter. Will not report events to Graphite.\", e);\n      }\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":523,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  private void buildInfluxDBMetricReporter(Properties properties) {\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to InfluxDB\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to InfluxDB\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE),\n          \"InfluxDB database name is missing.\");\n    } catch (IllegalArgumentException exception) {\n      LOGGER.error(\"Not reporting to InfluxDB due to missing InfluxDB configuration(s).\", exception);\n      return;\n    }\n\n    String url = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_URL);\n    String username = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_USER);\n    String password = PasswordManager.getInstance(properties)\n        .readPassword(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_PASSWORD));\n    String database = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE);\n\n    InfluxDBConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_SENDING_TYPE).toUpperCase();\n    try {\n      connectionType = InfluxDBConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"InfluxDB Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = InfluxDBConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        InfluxDBReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(url, username, password, database).withMetricContextName(\n            this.metricContext.getName()) \r\n            .build(properties);\n      } catch (IOException e) {\n        LOGGER.error(\"Failed to create InfluxDB metrics reporter. Will not report metrics to InfluxDB.\", e);\n      }\n    }\n\n    if (eventsEnabled) {\n      String eventsDbProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_DATABASE);\n      String eventsDatabase = (eventsDbProp == null) ? (metricsEnabled ? database : null) : eventsDbProp;\n      try {\n        InfluxDBEventReporter eventReporter =\n            InfluxDBEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(url, username, password, eventsDatabase)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        LOGGER.error(\"Failed to create InfluxDB event reporter. Will not report events to InfluxDB.\", e);\n      }\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":672,"groupId":"588","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildInfluxDBMetricReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e1/23158723c7f3259f0056911d8c8d8547283cf7.src","preCode":"  private void buildInfluxDBMetricReporter(Properties properties) {\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to InfluxDB\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to InfluxDB\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE),\n          \"InfluxDB database name is missing.\");\n    } catch (IllegalArgumentException exception) {\n      LOGGER.error(\"Not reporting to InfluxDB due to missing InfluxDB configuration(s).\", exception);\n      return;\n    }\n\n    String url = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_URL);\n    String username = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_USER);\n    String password = PasswordManager.getInstance(properties)\n        .readPassword(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_PASSWORD));\n    String database = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE);\n\n    InfluxDBConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_SENDING_TYPE).toUpperCase();\n    try {\n      connectionType = InfluxDBConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"InfluxDB Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = InfluxDBConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        InfluxDBReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(url, username, password, database).withMetricContextName(\n            this.metricContext.getName()) \r\n            .build(properties);\n      } catch (IOException e) {\n        LOGGER.error(\"Failed to create InfluxDB metrics reporter. Will not report metrics to InfluxDB.\", e);\n      }\n    }\n\n    if (eventsEnabled) {\n      String eventsDbProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_DATABASE);\n      String eventsDatabase = (eventsDbProp == null) ? (metricsEnabled ? database : null) : eventsDbProp;\n      try {\n        InfluxDBEventReporter eventReporter =\n            InfluxDBEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(url, username, password, eventsDatabase)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        LOGGER.error(\"Failed to create InfluxDB event reporter. Will not report events to InfluxDB.\", e);\n      }\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":602,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2020-05-12 01:04:28","codes":[{"authorDate":"2020-05-12 01:04:28","commitOrder":2,"curCode":"  private void buildGraphiteMetricReporter(Properties properties)\n      throws MetricReporterException, EventReporterException {\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to Graphite\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to Graphite\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME),\n          \"Graphite hostname is missing.\");\n    } catch (IllegalArgumentException exception) {\n      throw new MetricReporterException(\"Missing Graphite configuration(s).\", exception, ReporterSinkType.GRAPHITE);\n    }\n\n    String hostname = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME);\n    int port = Integer.parseInt(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PORT));\n\n    GraphiteConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_SENDING_TYPE).toUpperCase();\n    String prefix = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PREFIX,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PREFIX);\n    try {\n      connectionType = GraphiteConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"Graphite Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = GraphiteConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        GraphiteReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(hostname, port).withMetricContextName(\n            this.metricContext.getName()) \r\n            .withMetricsPrefix(prefix)\n            .build(properties);\n      } catch (IOException e) {\n        throw new MetricReporterException(\"Failed to create Graphite metrics reporter.\", e, ReporterSinkType.GRAPHITE);\n      }\n    }\n\n    if (eventsEnabled) {\n      boolean emitValueAsKey = PropertiesUtils\n          .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY,\n              ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY);\n      String eventsPortProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_PORT);\n      int eventsPort = (eventsPortProp == null) ? (metricsEnabled ? port\n          : Integer.parseInt(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT)) : Integer.parseInt(eventsPortProp);\n      try {\n        GraphiteEventReporter eventReporter =\n            GraphiteEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(hostname, eventsPort)\n              .withPrefix(prefix)\n              .withEmitValueAsKey(emitValueAsKey)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        throw new EventReporterException(\"Failed to create Graphite event reporter.\", e, ReporterSinkType.GRAPHITE);\n      }\n    }\n  }\n","date":"2020-05-12 01:04:28","endLine":671,"groupId":"8125","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildGraphiteMetricReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4a/f9fde5a20f8f3d995738dc6b0906e52eec6f16.src","preCode":"  private void buildGraphiteMetricReporter(Properties properties) {\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to Graphite\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to Graphite\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME),\n          \"Graphite hostname is missing.\");\n    } catch (IllegalArgumentException exception) {\n      LOGGER.error(\"Not reporting to Graphite due to missing Graphite configuration(s).\", exception);\n      return;\n    }\n\n    String hostname = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME);\n    int port = Integer.parseInt(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PORT));\n\n    GraphiteConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_SENDING_TYPE).toUpperCase();\n    String prefix = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PREFIX,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PREFIX);\n    try {\n      connectionType = GraphiteConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"Graphite Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = GraphiteConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        GraphiteReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(hostname, port).withMetricContextName(\n            this.metricContext.getName()) \r\n            .withMetricsPrefix(prefix)\n            .build(properties);\n      } catch (IOException e) {\n        LOGGER.error(\"Failed to create Graphite metrics reporter. Will not report metrics to Graphite.\", e);\n      }\n    }\n\n    if (eventsEnabled) {\n      boolean emitValueAsKey = PropertiesUtils\n          .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY,\n              ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY);\n      String eventsPortProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_PORT);\n      int eventsPort = (eventsPortProp == null) ? (metricsEnabled ? port\n          : Integer.parseInt(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT)) : Integer.parseInt(eventsPortProp);\n      try {\n        GraphiteEventReporter eventReporter =\n            GraphiteEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(hostname, eventsPort)\n              .withPrefix(prefix)\n              .withEmitValueAsKey(emitValueAsKey)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        LOGGER.error(\"Failed to create Graphite event reporter. Will not report events to Graphite.\", e);\n      }\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":594,"status":"M"},{"authorDate":"2020-05-12 01:04:28","commitOrder":2,"curCode":"  private void buildInfluxDBMetricReporter(Properties properties)\n      throws MetricReporterException, EventReporterException {\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to InfluxDB\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to InfluxDB\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE),\n          \"InfluxDB database name is missing.\");\n    } catch (IllegalArgumentException exception) {\n      throw new MetricReporterException(\"Missing InfluxDB configuration(s)\", exception, ReporterSinkType.INFLUXDB);\n    }\n\n    String url = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_URL);\n    String username = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_USER);\n    String password = PasswordManager.getInstance(properties)\n        .readPassword(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_PASSWORD));\n    String database = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE);\n\n    InfluxDBConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_SENDING_TYPE).toUpperCase();\n    try {\n      connectionType = InfluxDBConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"InfluxDB Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = InfluxDBConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        InfluxDBReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(url, username, password, database).withMetricContextName(\n            this.metricContext.getName()) \r\n            .build(properties);\n      } catch (IOException e) {\n        throw new MetricReporterException(\"Failed to create InfluxDB metrics reporter.\", e, ReporterSinkType.INFLUXDB);\n      }\n    }\n\n    if (eventsEnabled) {\n      String eventsDbProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_DATABASE);\n      String eventsDatabase = (eventsDbProp == null) ? (metricsEnabled ? database : null) : eventsDbProp;\n      try {\n        InfluxDBEventReporter eventReporter =\n            InfluxDBEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(url, username, password, eventsDatabase)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        throw new EventReporterException(\"Failed to create InfluxDB event reporter.\", e, ReporterSinkType.INFLUXDB);\n      }\n    }\n  }\n","date":"2020-05-12 01:04:28","endLine":743,"groupId":"588","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildInfluxDBMetricReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4a/f9fde5a20f8f3d995738dc6b0906e52eec6f16.src","preCode":"  private void buildInfluxDBMetricReporter(Properties properties) {\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to InfluxDB\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to InfluxDB\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE),\n          \"InfluxDB database name is missing.\");\n    } catch (IllegalArgumentException exception) {\n      LOGGER.error(\"Not reporting to InfluxDB due to missing InfluxDB configuration(s).\", exception);\n      return;\n    }\n\n    String url = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_URL);\n    String username = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_USER);\n    String password = PasswordManager.getInstance(properties)\n        .readPassword(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_PASSWORD));\n    String database = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE);\n\n    InfluxDBConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_SENDING_TYPE).toUpperCase();\n    try {\n      connectionType = InfluxDBConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"InfluxDB Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = InfluxDBConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        InfluxDBReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(url, username, password, database).withMetricContextName(\n            this.metricContext.getName()) \r\n            .build(properties);\n      } catch (IOException e) {\n        LOGGER.error(\"Failed to create InfluxDB metrics reporter. Will not report metrics to InfluxDB.\", e);\n      }\n    }\n\n    if (eventsEnabled) {\n      String eventsDbProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_DATABASE);\n      String eventsDatabase = (eventsDbProp == null) ? (metricsEnabled ? database : null) : eventsDbProp;\n      try {\n        InfluxDBEventReporter eventReporter =\n            InfluxDBEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(url, username, password, eventsDatabase)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        LOGGER.error(\"Failed to create InfluxDB event reporter. Will not report events to InfluxDB.\", e);\n      }\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":673,"status":"M"}],"commitId":"239115778a08590d7ab5dfa32334efabe0e4fb49","commitMessage":"@@@[GOBBLIN-1127] Provide an option to make metric reporting instantiatio?\n\nCloses #2967 from sv2000/metricReportFatal\n","date":"2020-05-12 01:04:28","modifiedFileCount":"10","status":"M","submitter":"sv2000"},{"authorTime":"2020-05-21 02:57:35","codes":[{"authorDate":"2020-05-21 02:57:35","commitOrder":3,"curCode":"  private void buildGraphiteMetricReporter(Properties properties) {\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to Graphite\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to Graphite\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME),\n          \"Graphite hostname is missing.\");\n    } catch (IllegalArgumentException exception) {\n      LOGGER.error(\"Not reporting to Graphite due to missing Graphite configuration(s).\", exception);\n      return;\n    }\n\n    String hostname = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME);\n    int port = Integer.parseInt(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PORT));\n\n    GraphiteConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_SENDING_TYPE).toUpperCase();\n    String prefix = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PREFIX,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PREFIX);\n    try {\n      connectionType = GraphiteConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"Graphite Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = GraphiteConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        GraphiteReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(hostname, port).withMetricContextName(\n            this.metricContext.getName()) \r\n            .withMetricsPrefix(prefix)\n            .build(properties);\n      } catch (IOException e) {\n        LOGGER.error(\"Failed to create Graphite metrics reporter. Will not report metrics to Graphite.\", e);\n      }\n    }\n\n    if (eventsEnabled) {\n      boolean emitValueAsKey = PropertiesUtils\n          .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY,\n              ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY);\n      String eventsPortProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_PORT);\n      int eventsPort = (eventsPortProp == null) ? (metricsEnabled ? port\n          : Integer.parseInt(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT)) : Integer.parseInt(eventsPortProp);\n      try {\n        GraphiteEventReporter eventReporter =\n            GraphiteEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(hostname, eventsPort)\n              .withPrefix(prefix)\n              .withEmitValueAsKey(emitValueAsKey)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        LOGGER.error(\"Failed to create Graphite event reporter. Will not report events to Graphite.\", e);\n      }\n    }\n  }\n","date":"2020-05-21 02:57:35","endLine":669,"groupId":"8125","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"buildGraphiteMetricReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e9/69083be4555c392515337cda6da79643b8e0be.src","preCode":"  private void buildGraphiteMetricReporter(Properties properties)\n      throws MetricReporterException, EventReporterException {\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to Graphite\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to Graphite\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME),\n          \"Graphite hostname is missing.\");\n    } catch (IllegalArgumentException exception) {\n      throw new MetricReporterException(\"Missing Graphite configuration(s).\", exception, ReporterSinkType.GRAPHITE);\n    }\n\n    String hostname = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME);\n    int port = Integer.parseInt(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PORT));\n\n    GraphiteConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_SENDING_TYPE).toUpperCase();\n    String prefix = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PREFIX,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PREFIX);\n    try {\n      connectionType = GraphiteConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"Graphite Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = GraphiteConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        GraphiteReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(hostname, port).withMetricContextName(\n            this.metricContext.getName()) \r\n            .withMetricsPrefix(prefix)\n            .build(properties);\n      } catch (IOException e) {\n        throw new MetricReporterException(\"Failed to create Graphite metrics reporter.\", e, ReporterSinkType.GRAPHITE);\n      }\n    }\n\n    if (eventsEnabled) {\n      boolean emitValueAsKey = PropertiesUtils\n          .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY,\n              ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY);\n      String eventsPortProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_PORT);\n      int eventsPort = (eventsPortProp == null) ? (metricsEnabled ? port\n          : Integer.parseInt(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT)) : Integer.parseInt(eventsPortProp);\n      try {\n        GraphiteEventReporter eventReporter =\n            GraphiteEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(hostname, eventsPort)\n              .withPrefix(prefix)\n              .withEmitValueAsKey(emitValueAsKey)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        throw new EventReporterException(\"Failed to create Graphite event reporter.\", e, ReporterSinkType.GRAPHITE);\n      }\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"},{"authorDate":"2020-05-21 02:57:35","commitOrder":3,"curCode":"  private void buildInfluxDBMetricReporter(Properties properties) {\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to InfluxDB\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to InfluxDB\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE),\n          \"InfluxDB database name is missing.\");\n    } catch (IllegalArgumentException exception) {\n      LOGGER.error(\"Not reporting to InfluxDB due to missing InfluxDB configuration(s).\", exception);\n      return;\n    }\n\n    String url = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_URL);\n    String username = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_USER);\n    String password = PasswordManager.getInstance(properties)\n        .readPassword(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_PASSWORD));\n    String database = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE);\n\n    InfluxDBConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_SENDING_TYPE).toUpperCase();\n    try {\n      connectionType = InfluxDBConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"InfluxDB Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = InfluxDBConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        InfluxDBReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(url, username, password, database).withMetricContextName(\n            this.metricContext.getName()) \r\n            .build(properties);\n      } catch (IOException e) {\n        LOGGER.error(\"Failed to create InfluxDB metrics reporter. Will not report metrics to InfluxDB.\", e);\n      }\n    }\n\n    if (eventsEnabled) {\n      String eventsDbProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_DATABASE);\n      String eventsDatabase = (eventsDbProp == null) ? (metricsEnabled ? database : null) : eventsDbProp;\n      try {\n        InfluxDBEventReporter eventReporter =\n            InfluxDBEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(url, username, password, eventsDatabase)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        LOGGER.error(\"Failed to create InfluxDB event reporter. Will not report events to InfluxDB.\", e);\n      }\n    }\n  }\n","date":"2020-05-21 02:57:35","endLine":741,"groupId":"588","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildInfluxDBMetricReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e9/69083be4555c392515337cda6da79643b8e0be.src","preCode":"  private void buildInfluxDBMetricReporter(Properties properties)\n      throws MetricReporterException, EventReporterException {\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to InfluxDB\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to InfluxDB\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE),\n          \"InfluxDB database name is missing.\");\n    } catch (IllegalArgumentException exception) {\n      throw new MetricReporterException(\"Missing InfluxDB configuration(s)\", exception, ReporterSinkType.INFLUXDB);\n    }\n\n    String url = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_URL);\n    String username = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_USER);\n    String password = PasswordManager.getInstance(properties)\n        .readPassword(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_PASSWORD));\n    String database = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE);\n\n    InfluxDBConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_SENDING_TYPE).toUpperCase();\n    try {\n      connectionType = InfluxDBConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"InfluxDB Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = InfluxDBConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        InfluxDBReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(url, username, password, database).withMetricContextName(\n            this.metricContext.getName()) \r\n            .build(properties);\n      } catch (IOException e) {\n        throw new MetricReporterException(\"Failed to create InfluxDB metrics reporter.\", e, ReporterSinkType.INFLUXDB);\n      }\n    }\n\n    if (eventsEnabled) {\n      String eventsDbProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_DATABASE);\n      String eventsDatabase = (eventsDbProp == null) ? (metricsEnabled ? database : null) : eventsDbProp;\n      try {\n        InfluxDBEventReporter eventReporter =\n            InfluxDBEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(url, username, password, eventsDatabase)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        throw new EventReporterException(\"Failed to create InfluxDB event reporter.\", e, ReporterSinkType.INFLUXDB);\n      }\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":671,"status":"M"}],"commitId":"2305c26cd5813dbae88b4922fecc6d6737c460d9","commitMessage":"@@@[GOBBLIN-1127][GOBBLIN-1153] Revert \" Provide an option to make metric reporting instantiatio?\"\n\nThis reverts commit\n239115778a08590d7ab5dfa32334efabe0e4fb49.\n\nCloses #2992 from sv2000/revertMetricReportFailure\n","date":"2020-05-21 02:57:35","modifiedFileCount":"10","status":"M","submitter":"sv2000"},{"authorTime":"2020-06-17 01:04:05","codes":[{"authorDate":"2020-06-17 01:04:05","commitOrder":4,"curCode":"  private void buildGraphiteMetricReporter(Properties properties)\n      throws MultiReporterException {\n    List<MetricReporterException> reporterExceptionList = Lists.newArrayList();\n\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to Graphite\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to Graphite\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME),\n          \"Graphite hostname is missing.\");\n    } catch (IllegalArgumentException exception) {\n      reporterExceptionList.add(new MetricReporterException(\"Missing Graphite configuration(s).\", exception, ReporterType.METRIC_EVENT, ReporterSinkType.GRAPHITE));\n      throw new MultiReporterException(\"Failed to start one or more Graphite reporters\", reporterExceptionList);\n    }\n\n    String hostname = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME);\n    int port = Integer.parseInt(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PORT));\n\n    GraphiteConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_SENDING_TYPE).toUpperCase();\n    String prefix = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PREFIX,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PREFIX);\n    try {\n      connectionType = GraphiteConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"Graphite Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = GraphiteConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        GraphiteReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(hostname, port).withMetricContextName(\n            this.metricContext.getName()) \r\n            .withMetricsPrefix(prefix)\n            .build(properties);\n      } catch (IOException e) {\n        reporterExceptionList.add(new MetricReporterException(\"Failed to create Graphite metrics reporter.\", e, ReporterType.METRIC, ReporterSinkType.GRAPHITE));\n      }\n    }\n\n    if (eventsEnabled) {\n      boolean emitValueAsKey = PropertiesUtils\n          .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY,\n              ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY);\n      String eventsPortProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_PORT);\n      int eventsPort = (eventsPortProp == null) ? (metricsEnabled ? port\n          : Integer.parseInt(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT)) : Integer.parseInt(eventsPortProp);\n      try {\n        GraphiteEventReporter eventReporter =\n            GraphiteEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(hostname, eventsPort)\n              .withPrefix(prefix)\n              .withEmitValueAsKey(emitValueAsKey)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        reporterExceptionList.add(new MetricReporterException(\"Failed to create Graphite event reporter.\", e, ReporterType.EVENT, ReporterSinkType.GRAPHITE));\n      }\n    }\n\n    if (!reporterExceptionList.isEmpty()) {\n      throw new MultiReporterException(\"Failed to create one or more Graphite Reporters\", reporterExceptionList);\n    }\n  }\n","date":"2020-06-17 01:04:05","endLine":719,"groupId":"1040","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"buildGraphiteMetricReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4e/4fa6c7cbad766bb6063495807128bd93f5ea8b.src","preCode":"  private void buildGraphiteMetricReporter(Properties properties) {\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to Graphite\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to Graphite\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME),\n          \"Graphite hostname is missing.\");\n    } catch (IllegalArgumentException exception) {\n      LOGGER.error(\"Not reporting to Graphite due to missing Graphite configuration(s).\", exception);\n      return;\n    }\n\n    String hostname = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_HOSTNAME);\n    int port = Integer.parseInt(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PORT));\n\n    GraphiteConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_SENDING_TYPE).toUpperCase();\n    String prefix = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PREFIX,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_PREFIX);\n    try {\n      connectionType = GraphiteConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"Graphite Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = GraphiteConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        GraphiteReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(hostname, port).withMetricContextName(\n            this.metricContext.getName()) \r\n            .withMetricsPrefix(prefix)\n            .build(properties);\n      } catch (IOException e) {\n        LOGGER.error(\"Failed to create Graphite metrics reporter. Will not report metrics to Graphite.\", e);\n      }\n    }\n\n    if (eventsEnabled) {\n      boolean emitValueAsKey = PropertiesUtils\n          .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY,\n              ConfigurationKeys.DEFAULT_METRICS_REPORTING_GRAPHITE_EVENTS_VALUE_AS_KEY);\n      String eventsPortProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_EVENTS_PORT);\n      int eventsPort = (eventsPortProp == null) ? (metricsEnabled ? port\n          : Integer.parseInt(ConfigurationKeys.METRICS_REPORTING_GRAPHITE_PORT)) : Integer.parseInt(eventsPortProp);\n      try {\n        GraphiteEventReporter eventReporter =\n            GraphiteEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(hostname, eventsPort)\n              .withPrefix(prefix)\n              .withEmitValueAsKey(emitValueAsKey)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        LOGGER.error(\"Failed to create Graphite event reporter. Will not report events to Graphite.\", e);\n      }\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":635,"status":"M"},{"authorDate":"2020-06-17 01:04:05","commitOrder":4,"curCode":"  private void buildInfluxDBMetricReporter(Properties properties)\n      throws MultiReporterException {\n    List<MetricReporterException> reporterExceptionList = Lists.newArrayList();\n\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to InfluxDB\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to InfluxDB\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE),\n          \"InfluxDB database name is missing.\");\n    } catch (IllegalArgumentException exception) {\n      reporterExceptionList.add(new MetricReporterException(\"Missing InfluxDB configuration(s)\", exception, ReporterType.METRIC_EVENT, ReporterSinkType.INFLUXDB));\n      throw new MultiReporterException(\"Failed to start one or more InfluxDB reporters\", reporterExceptionList);\n    }\n\n    String url = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_URL);\n    String username = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_USER);\n    String password = PasswordManager.getInstance(properties)\n        .readPassword(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_PASSWORD));\n    String database = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE);\n\n    InfluxDBConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_SENDING_TYPE).toUpperCase();\n    try {\n      connectionType = InfluxDBConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"InfluxDB Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = InfluxDBConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        InfluxDBReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(url, username, password, database).withMetricContextName(\n            this.metricContext.getName()) \r\n            .build(properties);\n      } catch (IOException e) {\n        reporterExceptionList.add(new MetricReporterException(\"Failed to create InfluxDB metrics reporter.\", e, ReporterType.METRIC, ReporterSinkType.INFLUXDB));\n      }\n    }\n\n    if (eventsEnabled) {\n      String eventsDbProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_DATABASE);\n      String eventsDatabase = (eventsDbProp == null) ? (metricsEnabled ? database : null) : eventsDbProp;\n      try {\n        InfluxDBEventReporter eventReporter =\n            InfluxDBEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(url, username, password, eventsDatabase)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        reporterExceptionList.add(new MetricReporterException(\"Failed to create InfluxDB event reporter.\", e, ReporterType.EVENT, ReporterSinkType.INFLUXDB));\n      }\n    }\n\n    if (!reporterExceptionList.isEmpty()) {\n      throw new MultiReporterException(\"Failed to create one or more InfluxDB reporters\", reporterExceptionList);\n    }\n  }\n","date":"2020-06-17 01:04:05","endLine":798,"groupId":"1040","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"buildInfluxDBMetricReporter","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4e/4fa6c7cbad766bb6063495807128bd93f5ea8b.src","preCode":"  private void buildInfluxDBMetricReporter(Properties properties) {\n    boolean metricsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_METRICS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_METRICS_ENABLED);\n    if (metricsEnabled) {\n      LOGGER.info(\"Reporting metrics to InfluxDB\");\n    }\n\n    boolean eventsEnabled = PropertiesUtils\n        .getPropAsBoolean(properties, ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED_KEY,\n            ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_EVENTS_ENABLED);\n    if (eventsEnabled) {\n      LOGGER.info(\"Reporting events to InfluxDB\");\n    }\n\n    if (!metricsEnabled && !eventsEnabled) {\n      return;\n    }\n\n    try {\n      Preconditions.checkArgument(properties.containsKey(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE),\n          \"InfluxDB database name is missing.\");\n    } catch (IllegalArgumentException exception) {\n      LOGGER.error(\"Not reporting to InfluxDB due to missing InfluxDB configuration(s).\", exception);\n      return;\n    }\n\n    String url = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_URL);\n    String username = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_USER);\n    String password = PasswordManager.getInstance(properties)\n        .readPassword(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_PASSWORD));\n    String database = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_DATABASE);\n\n    InfluxDBConnectionType connectionType;\n    String type = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_SENDING_TYPE,\n        ConfigurationKeys.DEFAULT_METRICS_REPORTING_INFLUXDB_SENDING_TYPE).toUpperCase();\n    try {\n      connectionType = InfluxDBConnectionType.valueOf(type);\n    } catch (IllegalArgumentException exception) {\n      LOGGER\n          .warn(\"InfluxDB Reporter connection type \" + type + \" not recognized. Will use TCP for sending.\", exception);\n      connectionType = InfluxDBConnectionType.TCP;\n    }\n\n    if (metricsEnabled) {\n      try {\n        InfluxDBReporter.Factory.newBuilder().withConnectionType(connectionType)\n            .withConnection(url, username, password, database).withMetricContextName(\n            this.metricContext.getName()) \r\n            .build(properties);\n      } catch (IOException e) {\n        LOGGER.error(\"Failed to create InfluxDB metrics reporter. Will not report metrics to InfluxDB.\", e);\n      }\n    }\n\n    if (eventsEnabled) {\n      String eventsDbProp = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_INFLUXDB_EVENTS_DATABASE);\n      String eventsDatabase = (eventsDbProp == null) ? (metricsEnabled ? database : null) : eventsDbProp;\n      try {\n        InfluxDBEventReporter eventReporter =\n            InfluxDBEventReporter.Factory.forContext(RootMetricContext.get())\n              .withConnectionType(connectionType)\n              .withConnection(url, username, password, eventsDatabase)\n              .build();\n        this.codahaleScheduledReporters.add(this.codahaleReportersCloser.register(eventReporter));\n      }\n      catch (IOException e) {\n        LOGGER.error(\"Failed to create InfluxDB event reporter. Will not report events to InfluxDB.\", e);\n      }\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/main/java/org/apache/gobblin/metrics/GobblinMetrics.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":721,"status":"M"}],"commitId":"c762c97c97336aa5603f571f383258a1baa7e8c3","commitMessage":"@@@[GOBBLIN-1127] Provide an option to make metric reporting instantiation failure fatal\n\nCloses #3035 from\nsv2000/metricReportInstantiationFailure\n","date":"2020-06-17 01:04:05","modifiedFileCount":"12","status":"M","submitter":"sv2000"}]
