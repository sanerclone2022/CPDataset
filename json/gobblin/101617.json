[{"authorTime":"2018-07-10 00:30:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void testWriteWithEncryption() throws Exception {\n    byte[] streamString = \"testEncryptedContents\".getBytes(\"UTF-8\");\n    byte[] expectedContents = new byte[streamString.length];\n    for (int i = 0; i < streamString.length; i++) {\n      expectedContents[i] = (byte)((streamString[i] + 1) % 256);\n    }\n\n    FileStatus status = fs.getFileStatus(testTempPath);\n    OwnerAndPermission ownerAndPermission =\n        new OwnerAndPermission(status.getOwner(), status.getGroup(), new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));\n    CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission);\n\n    CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")));\n\n    WorkUnitState state = TestUtils.createTestWorkUnitState();\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, new Path(testTempPath, \"staging\").toString());\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, new Path(testTempPath, \"output\").toString());\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, RandomStringUtils.randomAlphabetic(5));\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"insecure_shift\");\n\n    CopySource.serializeCopyEntity(state, cf);\n    CopySource.serializeCopyableDataset(state, metadata);\n\n    FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state, 1, 0);\n\n    FileAwareInputStream fileAwareInputStream = new FileAwareInputStream(cf, StreamUtils.convertStream(\n        new ByteArrayInputStream(streamString)));\n    dataWriter.write(fileAwareInputStream);\n    dataWriter.commit();\n\n    Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),\n        cf.getDatasetAndPartition(metadata).identifier()), cf.getDestination());\n    Assert.assertTrue(writtenFilePath.getName().endsWith(\"insecure_shift\"),\n        \"Expected encryption name to be appended to destination\");\n    Assert.assertEquals(IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString())), expectedContents);\n  }\n","date":"2017-07-31 15:51:25","endLine":135,"groupId":"3670","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteWithEncryption","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/15/2081d69e21d61912c964a7feac25866e1fe4e4.src","preCode":"  public void testWriteWithEncryption() throws Exception {\n    byte[] streamString = \"testEncryptedContents\".getBytes(\"UTF-8\");\n    byte[] expectedContents = new byte[streamString.length];\n    for (int i = 0; i < streamString.length; i++) {\n      expectedContents[i] = (byte)((streamString[i] + 1) % 256);\n    }\n\n    FileStatus status = fs.getFileStatus(testTempPath);\n    OwnerAndPermission ownerAndPermission =\n        new OwnerAndPermission(status.getOwner(), status.getGroup(), new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));\n    CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission);\n\n    CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")));\n\n    WorkUnitState state = TestUtils.createTestWorkUnitState();\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, new Path(testTempPath, \"staging\").toString());\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, new Path(testTempPath, \"output\").toString());\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, RandomStringUtils.randomAlphabetic(5));\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"insecure_shift\");\n\n    CopySource.serializeCopyEntity(state, cf);\n    CopySource.serializeCopyableDataset(state, metadata);\n\n    FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state, 1, 0);\n\n    FileAwareInputStream fileAwareInputStream = new FileAwareInputStream(cf, StreamUtils.convertStream(\n        new ByteArrayInputStream(streamString)));\n    dataWriter.write(fileAwareInputStream);\n    dataWriter.commit();\n\n    Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),\n        cf.getDatasetAndPartition(metadata).identifier()), cf.getDestination());\n    Assert.assertTrue(writtenFilePath.getName().endsWith(\"insecure_shift\"),\n        \"Expected encryption name to be appended to destination\");\n    Assert.assertEquals(IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString())), expectedContents);\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/copy/writer/FileAwareInputStreamDataWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"NB"},{"authorDate":"2018-07-10 00:30:25","commitOrder":2,"curCode":"  public void testWriteWithGPGAsymmetricEncryption() throws Exception {\n    byte[] streamString = \"testEncryptedContents\".getBytes(\"UTF-8\");\n\n    FileStatus status = fs.getFileStatus(testTempPath);\n    OwnerAndPermission ownerAndPermission =\n        new OwnerAndPermission(status.getOwner(), status.getGroup(), new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));\n    CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission);\n\n    CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")));\n\n    WorkUnitState state = TestUtils.createTestWorkUnitState();\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, new Path(testTempPath, \"staging\").toString());\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, new Path(testTempPath, \"output\").toString());\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, RandomStringUtils.randomAlphabetic(5));\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"gpg\");\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,\n        GPGFileEncryptor.class.getResource(\n            GPGFileEncryptorTest.PUBLIC_KEY).toString());\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\n        GPGFileEncryptorTest.PASSPHRASE);\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\n        GPGFileEncryptorTest.KEY_ID);\n\n    CopySource.serializeCopyEntity(state, cf);\n    CopySource.serializeCopyableDataset(state, metadata);\n\n    FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state, 1, 0);\n\n    FileAwareInputStream fileAwareInputStream = new FileAwareInputStream(cf, StreamUtils.convertStream(\n        new ByteArrayInputStream(streamString)));\n    dataWriter.write(fileAwareInputStream);\n    dataWriter.commit();\n\n    Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),\n        cf.getDatasetAndPartition(metadata).identifier()), cf.getDestination());\n    Assert.assertTrue(writtenFilePath.getName().endsWith(\"gpg\"),\n        \"Expected encryption name to be appended to destination\");\n    byte[] encryptedContent = IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString()));\n    byte[] decryptedContent = new byte[streamString.length];\n    IOUtils.readFully(GPGFileDecryptor.decryptFile(new FileInputStream(writtenFilePath.toString()),\n        GPGFileEncryptor.class.getResourceAsStream(GPGFileEncryptorTest.PRIVATE_KEY),\n        GPGFileEncryptorTest.PASSPHRASE), decryptedContent);\n\n\n    \r\n    Assert.assertNotEquals(encryptedContent, streamString);\n\n    \r\n    Assert.assertEquals(decryptedContent, streamString);\n\n  }\n","date":"2018-07-10 00:30:25","endLine":237,"groupId":"8193","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteWithGPGAsymmetricEncryption","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e7/72158818459dbf26d8010008b8164a60fcf438.src","preCode":"  public void testWriteWithGPGAsymmetricEncryption() throws Exception {\n    byte[] streamString = \"testEncryptedContents\".getBytes(\"UTF-8\");\n\n    FileStatus status = fs.getFileStatus(testTempPath);\n    OwnerAndPermission ownerAndPermission =\n        new OwnerAndPermission(status.getOwner(), status.getGroup(), new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));\n    CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission);\n\n    CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")));\n\n    WorkUnitState state = TestUtils.createTestWorkUnitState();\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, new Path(testTempPath, \"staging\").toString());\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, new Path(testTempPath, \"output\").toString());\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, RandomStringUtils.randomAlphabetic(5));\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"gpg\");\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,\n        GPGFileEncryptor.class.getResource(\n            GPGFileEncryptorTest.PUBLIC_KEY).toString());\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\n        GPGFileEncryptorTest.PASSPHRASE);\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\n        GPGFileEncryptorTest.KEY_ID);\n\n    CopySource.serializeCopyEntity(state, cf);\n    CopySource.serializeCopyableDataset(state, metadata);\n\n    FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state, 1, 0);\n\n    FileAwareInputStream fileAwareInputStream = new FileAwareInputStream(cf, StreamUtils.convertStream(\n        new ByteArrayInputStream(streamString)));\n    dataWriter.write(fileAwareInputStream);\n    dataWriter.commit();\n\n    Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),\n        cf.getDatasetAndPartition(metadata).identifier()), cf.getDestination());\n    Assert.assertTrue(writtenFilePath.getName().endsWith(\"gpg\"),\n        \"Expected encryption name to be appended to destination\");\n    byte[] encryptedContent = IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString()));\n    byte[] decryptedContent = new byte[streamString.length];\n    IOUtils.readFully(GPGFileDecryptor.decryptFile(new FileInputStream(writtenFilePath.toString()),\n        GPGFileEncryptor.class.getResourceAsStream(GPGFileEncryptorTest.PRIVATE_KEY),\n        GPGFileEncryptorTest.PASSPHRASE), decryptedContent);\n\n\n    \r\n    Assert.assertNotEquals(encryptedContent, streamString);\n\n    \r\n    Assert.assertEquals(decryptedContent, streamString);\n\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/copy/writer/FileAwareInputStreamDataWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"B"}],"commitId":"e92e5f8a0f7641cbe89279f0a977f9f27a6ba768","commitMessage":"@@@[GOBBLIN-521] Add support for encryption in the GPGCodec\n\nCloses #2391 from htran1/gpg_encryptor\n","date":"2018-07-10 00:30:25","modifiedFileCount":"6","status":"M","submitter":"Hung Tran"},{"authorTime":"2018-08-03 02:53:53","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":3,"curCode":"  public void testWriteWithEncryption() throws Exception {\n    byte[] streamString = \"testEncryptedContents\".getBytes(\"UTF-8\");\n    byte[] expectedContents = new byte[streamString.length];\n    for (int i = 0; i < streamString.length; i++) {\n      expectedContents[i] = (byte)((streamString[i] + 1) % 256);\n    }\n\n    FileStatus status = fs.getFileStatus(testTempPath);\n    OwnerAndPermission ownerAndPermission =\n        new OwnerAndPermission(status.getOwner(), status.getGroup(), new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));\n    CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission);\n\n    CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")));\n\n    WorkUnitState state = TestUtils.createTestWorkUnitState();\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, new Path(testTempPath, \"staging\").toString());\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, new Path(testTempPath, \"output\").toString());\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, RandomStringUtils.randomAlphabetic(5));\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"insecure_shift\");\n\n    CopySource.serializeCopyEntity(state, cf);\n    CopySource.serializeCopyableDataset(state, metadata);\n\n    FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state, 1, 0);\n\n    FileAwareInputStream fileAwareInputStream = new FileAwareInputStream(cf, StreamUtils.convertStream(\n        new ByteArrayInputStream(streamString)));\n    dataWriter.write(fileAwareInputStream);\n    dataWriter.commit();\n\n    Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),\n        cf.getDatasetAndPartition(metadata).identifier()), cf.getDestination());\n    Assert.assertTrue(writtenFilePath.getName().endsWith(\"insecure_shift\"),\n        \"Expected encryption name to be appended to destination\");\n    Assert.assertEquals(IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString())), expectedContents);\n  }\n","date":"2017-07-31 15:51:25","endLine":135,"groupId":"3670","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteWithEncryption","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/15/2081d69e21d61912c964a7feac25866e1fe4e4.src","preCode":"  public void testWriteWithEncryption() throws Exception {\n    byte[] streamString = \"testEncryptedContents\".getBytes(\"UTF-8\");\n    byte[] expectedContents = new byte[streamString.length];\n    for (int i = 0; i < streamString.length; i++) {\n      expectedContents[i] = (byte)((streamString[i] + 1) % 256);\n    }\n\n    FileStatus status = fs.getFileStatus(testTempPath);\n    OwnerAndPermission ownerAndPermission =\n        new OwnerAndPermission(status.getOwner(), status.getGroup(), new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));\n    CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission);\n\n    CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")));\n\n    WorkUnitState state = TestUtils.createTestWorkUnitState();\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, new Path(testTempPath, \"staging\").toString());\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, new Path(testTempPath, \"output\").toString());\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, RandomStringUtils.randomAlphabetic(5));\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"insecure_shift\");\n\n    CopySource.serializeCopyEntity(state, cf);\n    CopySource.serializeCopyableDataset(state, metadata);\n\n    FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state, 1, 0);\n\n    FileAwareInputStream fileAwareInputStream = new FileAwareInputStream(cf, StreamUtils.convertStream(\n        new ByteArrayInputStream(streamString)));\n    dataWriter.write(fileAwareInputStream);\n    dataWriter.commit();\n\n    Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),\n        cf.getDatasetAndPartition(metadata).identifier()), cf.getDestination());\n    Assert.assertTrue(writtenFilePath.getName().endsWith(\"insecure_shift\"),\n        \"Expected encryption name to be appended to destination\");\n    Assert.assertEquals(IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString())), expectedContents);\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/copy/writer/FileAwareInputStreamDataWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"},{"authorDate":"2018-08-03 02:53:53","commitOrder":3,"curCode":"  public void testWriteWithGPGAsymmetricEncryption() throws Exception {\n    byte[] streamString = \"testEncryptedContents\".getBytes(\"UTF-8\");\n\n    FileStatus status = fs.getFileStatus(testTempPath);\n    OwnerAndPermission ownerAndPermission =\n        new OwnerAndPermission(status.getOwner(), status.getGroup(), new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));\n    CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission);\n\n    CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")));\n\n    WorkUnitState state = TestUtils.createTestWorkUnitState();\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, new Path(testTempPath, \"staging\").toString());\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, new Path(testTempPath, \"output\").toString());\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, RandomStringUtils.randomAlphabetic(5));\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"gpg\");\n\n    File publicKeyFile = new File(testTempPath.toString(), \"public.key\");\n\n    FileUtils.copyInputStreamToFile(GPGFileEncryptor.class.getResourceAsStream(GPGFileEncryptorTest.PUBLIC_KEY),\n        publicKeyFile);\n\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY, publicKeyFile.getAbsolutePath());\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\n        GPGFileEncryptorTest.PASSPHRASE);\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\n        GPGFileEncryptorTest.KEY_ID);\n\n    CopySource.serializeCopyEntity(state, cf);\n    CopySource.serializeCopyableDataset(state, metadata);\n\n    FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state, 1, 0);\n\n    FileAwareInputStream fileAwareInputStream = new FileAwareInputStream(cf, StreamUtils.convertStream(\n        new ByteArrayInputStream(streamString)));\n    dataWriter.write(fileAwareInputStream);\n    dataWriter.commit();\n\n    Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),\n        cf.getDatasetAndPartition(metadata).identifier()), cf.getDestination());\n    Assert.assertTrue(writtenFilePath.getName().endsWith(\"gpg\"),\n        \"Expected encryption name to be appended to destination\");\n    byte[] encryptedContent = IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString()));\n    byte[] decryptedContent = new byte[streamString.length];\n    IOUtils.readFully(GPGFileDecryptor.decryptFile(new FileInputStream(writtenFilePath.toString()),\n        GPGFileEncryptor.class.getResourceAsStream(GPGFileEncryptorTest.PRIVATE_KEY),\n        GPGFileEncryptorTest.PASSPHRASE), decryptedContent);\n\n\n    \r\n    Assert.assertNotEquals(encryptedContent, streamString);\n\n    \r\n    Assert.assertEquals(decryptedContent, streamString);\n\n  }\n","date":"2018-08-03 02:53:53","endLine":242,"groupId":"8193","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteWithGPGAsymmetricEncryption","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/51/7077e59782450631d2cc94cd8514e8635e5000.src","preCode":"  public void testWriteWithGPGAsymmetricEncryption() throws Exception {\n    byte[] streamString = \"testEncryptedContents\".getBytes(\"UTF-8\");\n\n    FileStatus status = fs.getFileStatus(testTempPath);\n    OwnerAndPermission ownerAndPermission =\n        new OwnerAndPermission(status.getOwner(), status.getGroup(), new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));\n    CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission);\n\n    CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")));\n\n    WorkUnitState state = TestUtils.createTestWorkUnitState();\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, new Path(testTempPath, \"staging\").toString());\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, new Path(testTempPath, \"output\").toString());\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, RandomStringUtils.randomAlphabetic(5));\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"gpg\");\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,\n        GPGFileEncryptor.class.getResource(\n            GPGFileEncryptorTest.PUBLIC_KEY).toString());\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\n        GPGFileEncryptorTest.PASSPHRASE);\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\n        GPGFileEncryptorTest.KEY_ID);\n\n    CopySource.serializeCopyEntity(state, cf);\n    CopySource.serializeCopyableDataset(state, metadata);\n\n    FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state, 1, 0);\n\n    FileAwareInputStream fileAwareInputStream = new FileAwareInputStream(cf, StreamUtils.convertStream(\n        new ByteArrayInputStream(streamString)));\n    dataWriter.write(fileAwareInputStream);\n    dataWriter.commit();\n\n    Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),\n        cf.getDatasetAndPartition(metadata).identifier()), cf.getDestination());\n    Assert.assertTrue(writtenFilePath.getName().endsWith(\"gpg\"),\n        \"Expected encryption name to be appended to destination\");\n    byte[] encryptedContent = IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString()));\n    byte[] decryptedContent = new byte[streamString.length];\n    IOUtils.readFully(GPGFileDecryptor.decryptFile(new FileInputStream(writtenFilePath.toString()),\n        GPGFileEncryptor.class.getResourceAsStream(GPGFileEncryptorTest.PRIVATE_KEY),\n        GPGFileEncryptorTest.PASSPHRASE), decryptedContent);\n\n\n    \r\n    Assert.assertNotEquals(encryptedContent, streamString);\n\n    \r\n    Assert.assertEquals(decryptedContent, streamString);\n\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/copy/writer/FileAwareInputStreamDataWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"7ab7f8b098a1ca7e2b45fef98f2c28e470796199","commitMessage":"@@@[GOBBLIN-553] Fix FileAwareInputStreamDataWriterTest access to public key\n\nCloses #2414 from htran1/encryption_test_fix1\n","date":"2018-08-03 02:53:53","modifiedFileCount":"2","status":"M","submitter":"Hung Tran"},{"authorTime":"2018-10-22 23:39:46","codes":[{"authorDate":"2018-10-22 23:39:46","commitOrder":4,"curCode":"  public void testWriteWithEncryption() throws Exception {\n    byte[] streamString = \"testEncryptedContents\".getBytes(\"UTF-8\");\n    byte[] expectedContents = new byte[streamString.length];\n    for (int i = 0; i < streamString.length; i++) {\n      expectedContents[i] = (byte)((streamString[i] + 1) % 256);\n    }\n\n    FileStatus status = fs.getFileStatus(testTempPath);\n    OwnerAndPermission ownerAndPermission =\n        new OwnerAndPermission(status.getOwner(), status.getGroup(), new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));\n    CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission);\n\n    CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")));\n\n    WorkUnitState state = TestUtils.createTestWorkUnitState();\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, new Path(testTempPath, \"staging\").toString());\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, new Path(testTempPath, \"output\").toString());\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, RandomStringUtils.randomAlphabetic(5));\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"insecure_shift\");\n\n    CopySource.serializeCopyEntity(state, cf);\n    CopySource.serializeCopyableDataset(state, metadata);\n\n    FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state, 1, 0);\n\n    FileAwareInputStream fileAwareInputStream = FileAwareInputStream.builder().file(cf)\n        .inputStream(StreamUtils.convertStream(new ByteArrayInputStream(streamString))).build();\n    dataWriter.write(fileAwareInputStream);\n    dataWriter.commit();\n\n    Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),\n        cf.getDatasetAndPartition(metadata).identifier()), cf.getDestination());\n    Assert.assertTrue(writtenFilePath.getName().endsWith(\"insecure_shift\"),\n        \"Expected encryption name to be appended to destination\");\n    Assert.assertEquals(IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString())), expectedContents);\n  }\n","date":"2018-10-22 23:39:46","endLine":181,"groupId":"101617","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteWithEncryption","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c2/f62b54be01e9a6e7d361a22cff3cef6c2af94e.src","preCode":"  public void testWriteWithEncryption() throws Exception {\n    byte[] streamString = \"testEncryptedContents\".getBytes(\"UTF-8\");\n    byte[] expectedContents = new byte[streamString.length];\n    for (int i = 0; i < streamString.length; i++) {\n      expectedContents[i] = (byte)((streamString[i] + 1) % 256);\n    }\n\n    FileStatus status = fs.getFileStatus(testTempPath);\n    OwnerAndPermission ownerAndPermission =\n        new OwnerAndPermission(status.getOwner(), status.getGroup(), new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));\n    CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission);\n\n    CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")));\n\n    WorkUnitState state = TestUtils.createTestWorkUnitState();\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, new Path(testTempPath, \"staging\").toString());\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, new Path(testTempPath, \"output\").toString());\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, RandomStringUtils.randomAlphabetic(5));\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"insecure_shift\");\n\n    CopySource.serializeCopyEntity(state, cf);\n    CopySource.serializeCopyableDataset(state, metadata);\n\n    FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state, 1, 0);\n\n    FileAwareInputStream fileAwareInputStream = new FileAwareInputStream(cf, StreamUtils.convertStream(\n        new ByteArrayInputStream(streamString)));\n    dataWriter.write(fileAwareInputStream);\n    dataWriter.commit();\n\n    Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),\n        cf.getDatasetAndPartition(metadata).identifier()), cf.getDestination());\n    Assert.assertTrue(writtenFilePath.getName().endsWith(\"insecure_shift\"),\n        \"Expected encryption name to be appended to destination\");\n    Assert.assertEquals(IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString())), expectedContents);\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/copy/writer/FileAwareInputStreamDataWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2018-10-22 23:39:46","commitOrder":4,"curCode":"  public void testWriteWithGPGAsymmetricEncryption() throws Exception {\n    byte[] streamString = \"testEncryptedContents\".getBytes(\"UTF-8\");\n\n    FileStatus status = fs.getFileStatus(testTempPath);\n    OwnerAndPermission ownerAndPermission =\n        new OwnerAndPermission(status.getOwner(), status.getGroup(), new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));\n    CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission);\n\n    CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")));\n\n    WorkUnitState state = TestUtils.createTestWorkUnitState();\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, new Path(testTempPath, \"staging\").toString());\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, new Path(testTempPath, \"output\").toString());\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, RandomStringUtils.randomAlphabetic(5));\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"gpg\");\n\n    File publicKeyFile = new File(testTempPath.toString(), \"public.key\");\n\n    FileUtils.copyInputStreamToFile(GPGFileEncryptor.class.getResourceAsStream(GPGFileEncryptorTest.PUBLIC_KEY),\n        publicKeyFile);\n\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY, publicKeyFile.getAbsolutePath());\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\n        GPGFileEncryptorTest.PASSPHRASE);\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\n        GPGFileEncryptorTest.KEY_ID);\n\n    CopySource.serializeCopyEntity(state, cf);\n    CopySource.serializeCopyableDataset(state, metadata);\n\n    FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state, 1, 0);\n\n    FileAwareInputStream fileAwareInputStream = FileAwareInputStream.builder().file(cf)\n        .inputStream(StreamUtils.convertStream(new ByteArrayInputStream(streamString))).build();\n    dataWriter.write(fileAwareInputStream);\n    dataWriter.commit();\n\n    Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),\n        cf.getDatasetAndPartition(metadata).identifier()), cf.getDestination());\n    Assert.assertTrue(writtenFilePath.getName().endsWith(\"gpg\"),\n        \"Expected encryption name to be appended to destination\");\n    byte[] encryptedContent = IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString()));\n    byte[] decryptedContent = new byte[streamString.length];\n    IOUtils.readFully(GPGFileDecryptor.decryptFile(new FileInputStream(writtenFilePath.toString()),\n        GPGFileEncryptor.class.getResourceAsStream(GPGFileEncryptorTest.PRIVATE_KEY),\n        GPGFileEncryptorTest.PASSPHRASE), decryptedContent);\n\n\n    \r\n    Assert.assertNotEquals(encryptedContent, streamString);\n\n    \r\n    Assert.assertEquals(decryptedContent, streamString);\n\n  }\n","date":"2018-10-22 23:39:46","endLine":284,"groupId":"101617","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteWithGPGAsymmetricEncryption","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c2/f62b54be01e9a6e7d361a22cff3cef6c2af94e.src","preCode":"  public void testWriteWithGPGAsymmetricEncryption() throws Exception {\n    byte[] streamString = \"testEncryptedContents\".getBytes(\"UTF-8\");\n\n    FileStatus status = fs.getFileStatus(testTempPath);\n    OwnerAndPermission ownerAndPermission =\n        new OwnerAndPermission(status.getOwner(), status.getGroup(), new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));\n    CopyableFile cf = CopyableFileUtils.getTestCopyableFile(ownerAndPermission);\n\n    CopyableDatasetMetadata metadata = new CopyableDatasetMetadata(new TestCopyableDataset(new Path(\"/source\")));\n\n    WorkUnitState state = TestUtils.createTestWorkUnitState();\n    state.setProp(ConfigurationKeys.WRITER_STAGING_DIR, new Path(testTempPath, \"staging\").toString());\n    state.setProp(ConfigurationKeys.WRITER_OUTPUT_DIR, new Path(testTempPath, \"output\").toString());\n    state.setProp(ConfigurationKeys.WRITER_FILE_PATH, RandomStringUtils.randomAlphabetic(5));\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"gpg\");\n\n    File publicKeyFile = new File(testTempPath.toString(), \"public.key\");\n\n    FileUtils.copyInputStreamToFile(GPGFileEncryptor.class.getResourceAsStream(GPGFileEncryptorTest.PUBLIC_KEY),\n        publicKeyFile);\n\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY, publicKeyFile.getAbsolutePath());\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\n        GPGFileEncryptorTest.PASSPHRASE);\n    state.setProp(\"writer.encrypt.\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\n        GPGFileEncryptorTest.KEY_ID);\n\n    CopySource.serializeCopyEntity(state, cf);\n    CopySource.serializeCopyableDataset(state, metadata);\n\n    FileAwareInputStreamDataWriter dataWriter = new FileAwareInputStreamDataWriter(state, 1, 0);\n\n    FileAwareInputStream fileAwareInputStream = new FileAwareInputStream(cf, StreamUtils.convertStream(\n        new ByteArrayInputStream(streamString)));\n    dataWriter.write(fileAwareInputStream);\n    dataWriter.commit();\n\n    Path writtenFilePath = new Path(new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR),\n        cf.getDatasetAndPartition(metadata).identifier()), cf.getDestination());\n    Assert.assertTrue(writtenFilePath.getName().endsWith(\"gpg\"),\n        \"Expected encryption name to be appended to destination\");\n    byte[] encryptedContent = IOUtils.toByteArray(new FileInputStream(writtenFilePath.toString()));\n    byte[] decryptedContent = new byte[streamString.length];\n    IOUtils.readFully(GPGFileDecryptor.decryptFile(new FileInputStream(writtenFilePath.toString()),\n        GPGFileEncryptor.class.getResourceAsStream(GPGFileEncryptorTest.PRIVATE_KEY),\n        GPGFileEncryptorTest.PASSPHRASE), decryptedContent);\n\n\n    \r\n    Assert.assertNotEquals(encryptedContent, streamString);\n\n    \r\n    Assert.assertEquals(decryptedContent, streamString);\n\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/copy/writer/FileAwareInputStreamDataWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"}],"commitId":"cba3699299c7a4013fc4c193caebe87c1cac5b76","commitMessage":"@@@[GOBBLIN-598] Add DistcpFileSplitter to allow for block level distcp\n\n[GOBBLIN-598] Add DistcpFileSplitter to allow for\nblock level distcp\n\nFix task state bug for merging in block distcp\n\nAddress review comments.  and add javadoc/comments\n\nAllowSplit and ADL modifications\n\nCloses #2461 from cshen98/distcp1\n","date":"2018-10-22 23:39:46","modifiedFileCount":"14","status":"M","submitter":"Carl Shen"}]
