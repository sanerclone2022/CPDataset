[{"authorTime":"2019-06-12 00:16:25","codes":[{"authorDate":"2020-06-02 04:12:35","commitOrder":2,"curCode":"  public Collection<Spec> getSpecsImpl() throws IOException {\n    try (Connection connection = this.dataSource.getConnection();\n        PreparedStatement statement = connection.prepareStatement(String.format(GET_ALL_STATEMENT, this.tableName))) {\n      List<Spec> specs = new ArrayList<>();\n\n      try (ResultSet rs = statement.executeQuery()) {\n        while (rs.next()) {\n          try {\n            specs.add(\n                rs.getString(3) == null\n                    ? this.specSerDe.deserialize(rs.getString(2).getBytes(Charsets.UTF_8))\n                    : this.specSerDe.deserialize(ByteStreams.toByteArray(rs.getBlob(3).getBinaryStream()))\n            );\n          } catch (SQLException | SpecSerDeException e) {\n            log.error(\"Failed to deserialize spec\", e);\n          }\n        }\n      }\n      return specs;\n    } catch (SQLException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2020-06-02 04:12:35","endLine":229,"groupId":"5618","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getSpecsImpl","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a5/a0d2be9e05fe4424f70cc88ef9c22baa421f2c.src","preCode":"  public Collection<Spec> getSpecsImpl() throws IOException {\n    try (Connection connection = this.dataSource.getConnection();\n        PreparedStatement statement = connection.prepareStatement(String.format(GET_ALL_STATEMENT, this.tableName))) {\n      List<Spec> specs = new ArrayList<>();\n\n      try (ResultSet rs = statement.executeQuery()) {\n        while (rs.next()) {\n          try {\n            specs.add(\n                rs.getString(3) == null\n                    ? this.specSerDe.deserialize(rs.getString(2).getBytes(Charsets.UTF_8))\n                    : this.specSerDe.deserialize(ByteStreams.toByteArray(rs.getBlob(3).getBinaryStream()))\n            );\n          } catch (SQLException | SpecSerDeException e) {\n            log.error(\"Failed to deserialize spec\", e);\n          }\n        }\n      }\n      return specs;\n    } catch (SQLException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_store/MysqlSpecStore.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"B"},{"authorDate":"2019-06-12 00:16:25","commitOrder":2,"curCode":"  public Iterator<URI> getSpecURIsWithTag(String tag) throws IOException {\n    try (Connection connection = this.dataSource.getConnection();\n        PreparedStatement statement = connection.prepareStatement(String.format(GET_ALL_STATEMENT_WITH_TAG, this.tableName))) {\n      statement.setString(1, tag);\n      return getURIIteratorByQuery(statement);\n    } catch (SQLException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2019-06-12 00:16:25","endLine":238,"groupId":"5620","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSpecURIsWithTag","params":"(Stringtag)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f2/c1fd95516444f816d72f08b2aac5afca4c39e8.src","preCode":"  public Iterator<URI> getSpecURIsWithTag(String tag) throws IOException {\n    try (Connection connection = this.dataSource.getConnection();\n        PreparedStatement statement = connection.prepareStatement(String.format(GET_ALL_STATEMENT_WITH_TAG, this.tableName))) {\n      statement.setString(1, tag);\n      return getURIIteratorByQuery(statement);\n    } catch (SQLException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_store/MysqlSpecStore.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"NB"}],"commitId":"3f84a013debd8abcb5af13eca51e8b803dc8e578","commitMessage":"@@@[GOBBLIN-1168] add metrics in all SpecStore implementations\n\nCloses #3001 from arjun4084346/flowSpecFields2\n","date":"2020-06-02 04:12:35","modifiedFileCount":"8","status":"M","submitter":"Arjun"},{"authorTime":"2019-06-12 00:16:25","codes":[{"authorDate":"2020-06-23 02:41:40","commitOrder":3,"curCode":"  public Collection<Spec> getSpecsImpl() throws IOException {\n    try (Connection connection = this.dataSource.getConnection();\n        PreparedStatement statement = connection.prepareStatement(String.format(GET_ALL_STATEMENT, this.tableName))) {\n      return getSpecsInternal(statement);\n    } catch (SQLException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2020-06-23 02:41:40","endLine":221,"groupId":"12867","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getSpecsImpl","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ff/6bc85581cf032b40c02745d92e0967fd080fbc.src","preCode":"  public Collection<Spec> getSpecsImpl() throws IOException {\n    try (Connection connection = this.dataSource.getConnection();\n        PreparedStatement statement = connection.prepareStatement(String.format(GET_ALL_STATEMENT, this.tableName))) {\n      List<Spec> specs = new ArrayList<>();\n\n      try (ResultSet rs = statement.executeQuery()) {\n        while (rs.next()) {\n          try {\n            specs.add(\n                rs.getString(3) == null\n                    ? this.specSerDe.deserialize(rs.getString(2).getBytes(Charsets.UTF_8))\n                    : this.specSerDe.deserialize(ByteStreams.toByteArray(rs.getBlob(3).getBinaryStream()))\n            );\n          } catch (SQLException | SpecSerDeException e) {\n            log.error(\"Failed to deserialize spec\", e);\n          }\n        }\n      }\n      return specs;\n    } catch (SQLException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_store/MysqlSpecStore.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2019-06-12 00:16:25","commitOrder":3,"curCode":"  public Iterator<URI> getSpecURIsWithTag(String tag) throws IOException {\n    try (Connection connection = this.dataSource.getConnection();\n        PreparedStatement statement = connection.prepareStatement(String.format(GET_ALL_STATEMENT_WITH_TAG, this.tableName))) {\n      statement.setString(1, tag);\n      return getURIIteratorByQuery(statement);\n    } catch (SQLException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2019-06-12 00:16:25","endLine":238,"groupId":"12867","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSpecURIsWithTag","params":"(Stringtag)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f2/c1fd95516444f816d72f08b2aac5afca4c39e8.src","preCode":"  public Iterator<URI> getSpecURIsWithTag(String tag) throws IOException {\n    try (Connection connection = this.dataSource.getConnection();\n        PreparedStatement statement = connection.prepareStatement(String.format(GET_ALL_STATEMENT_WITH_TAG, this.tableName))) {\n      statement.setString(1, tag);\n      return getURIIteratorByQuery(statement);\n    } catch (SQLException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_store/MysqlSpecStore.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"N"}],"commitId":"60f33c5720e4e8647a1bdc2d99c516f44bebcc50","commitMessage":"@@@[GOBBLIN-1196] search flow configs using flow properties and/or other parameters\n\nCloses #3042 from arjun4084346/configQuery\n","date":"2020-06-23 02:41:40","modifiedFileCount":"19","status":"M","submitter":"Arjun"}]
