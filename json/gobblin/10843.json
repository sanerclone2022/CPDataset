[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public FlowCatalog(Config config, Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new SpecCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(FlowCatalog.class.getSimpleName()).build();\n      this.metrics = new StandardMetrics(this);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecStore.class);\n    try {\n      Config newConfig = config;\n      if (config.hasPath(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY)) {\n        newConfig = config.withValue(ConfigurationKeys.SPECSTORE_FS_DIR_KEY,\n            config.getValue(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY));\n      }\n      String specStoreClassName = DEFAULT_FLOWSPEC_STORE_CLASS;\n      if (config.hasPath(ConfigurationKeys.FLOWSPEC_STORE_CLASS_KEY)) {\n        specStoreClassName = config.getString(ConfigurationKeys.FLOWSPEC_STORE_CLASS_KEY);\n      }\n      this.log.info(\"Using audit sink class name/alias \" + specStoreClassName);\n      this.specStore = (SpecStore) ConstructorUtils.invokeConstructor(Class.forName(this.aliasResolver.resolve(\n          specStoreClassName)), newConfig, this);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":115,"groupId":"5878","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"FlowCatalog","params":"(Configconfig@Optional<Logger>log@Optional<MetricContext>parentMetricContext@booleaninstrumentationEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/8f/fa4d7feb43999b76142b902f30a3e4cf78d8bd.src","preCode":"  public FlowCatalog(Config config, Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new SpecCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(FlowCatalog.class.getSimpleName()).build();\n      this.metrics = new StandardMetrics(this);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecStore.class);\n    try {\n      Config newConfig = config;\n      if (config.hasPath(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY)) {\n        newConfig = config.withValue(ConfigurationKeys.SPECSTORE_FS_DIR_KEY,\n            config.getValue(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY));\n      }\n      String specStoreClassName = DEFAULT_FLOWSPEC_STORE_CLASS;\n      if (config.hasPath(ConfigurationKeys.FLOWSPEC_STORE_CLASS_KEY)) {\n        specStoreClassName = config.getString(ConfigurationKeys.FLOWSPEC_STORE_CLASS_KEY);\n      }\n      this.log.info(\"Using audit sink class name/alias \" + specStoreClassName);\n      this.specStore = (SpecStore) ConstructorUtils.invokeConstructor(Class.forName(this.aliasResolver.resolve(\n          specStoreClassName)), newConfig, this);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public JobCatalogBase(Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new JobCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(JobCatalog.class.getSimpleName()).build();\n      this.metrics = new StandardMetrics(this);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":77,"groupId":"5878","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"JobCatalogBase","params":"(Optional<Logger>log@Optional<MetricContext>parentMetricContext@booleaninstrumentationEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ec/332264e158756bbb698270eaafd212ee1fc878.src","preCode":"  public JobCatalogBase(Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new JobCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(JobCatalog.class.getSimpleName()).build();\n      this.metrics = new StandardMetrics(this);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/job_catalog/JobCatalogBase.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-12-08 07:28:16","codes":[{"authorDate":"2017-12-08 07:28:16","commitOrder":2,"curCode":"  public FlowCatalog(Config config, Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new SpecCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(FlowCatalog.class.getSimpleName()).build();\n      this.metrics = new MutableStandardMetrics(this);\n      this.addListener(this.metrics);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecStore.class);\n    try {\n      Config newConfig = config;\n      if (config.hasPath(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY)) {\n        newConfig = config.withValue(ConfigurationKeys.SPECSTORE_FS_DIR_KEY,\n            config.getValue(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY));\n      }\n      String specStoreClassName = DEFAULT_FLOWSPEC_STORE_CLASS;\n      if (config.hasPath(ConfigurationKeys.FLOWSPEC_STORE_CLASS_KEY)) {\n        specStoreClassName = config.getString(ConfigurationKeys.FLOWSPEC_STORE_CLASS_KEY);\n      }\n      this.log.info(\"Using audit sink class name/alias \" + specStoreClassName);\n      this.specStore = (SpecStore) ConstructorUtils.invokeConstructor(Class.forName(this.aliasResolver.resolve(\n          specStoreClassName)), newConfig, this);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2017-12-08 07:28:16","endLine":116,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"FlowCatalog","params":"(Configconfig@Optional<Logger>log@Optional<MetricContext>parentMetricContext@booleaninstrumentationEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/48/2825fd51dc8e2cc68934b38319f6888fe42812.src","preCode":"  public FlowCatalog(Config config, Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new SpecCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(FlowCatalog.class.getSimpleName()).build();\n      this.metrics = new StandardMetrics(this);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecStore.class);\n    try {\n      Config newConfig = config;\n      if (config.hasPath(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY)) {\n        newConfig = config.withValue(ConfigurationKeys.SPECSTORE_FS_DIR_KEY,\n            config.getValue(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY));\n      }\n      String specStoreClassName = DEFAULT_FLOWSPEC_STORE_CLASS;\n      if (config.hasPath(ConfigurationKeys.FLOWSPEC_STORE_CLASS_KEY)) {\n        specStoreClassName = config.getString(ConfigurationKeys.FLOWSPEC_STORE_CLASS_KEY);\n      }\n      this.log.info(\"Using audit sink class name/alias \" + specStoreClassName);\n      this.specStore = (SpecStore) ConstructorUtils.invokeConstructor(Class.forName(this.aliasResolver.resolve(\n          specStoreClassName)), newConfig, this);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2017-12-08 07:28:16","commitOrder":2,"curCode":"  public JobCatalogBase(Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new JobCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(JobCatalog.class.getSimpleName()).build();\n      this.metrics = createStandardMetrics();\n      this.addListener(this.metrics);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n  }\n","date":"2017-12-08 07:28:16","endLine":79,"groupId":"1930","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"JobCatalogBase","params":"(Optional<Logger>log@Optional<MetricContext>parentMetricContext@booleaninstrumentationEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d4/0c96206cb94244a6c6dbbaf2c563f7c790b651.src","preCode":"  public JobCatalogBase(Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new JobCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(JobCatalog.class.getSimpleName()).build();\n      this.metrics = new StandardMetrics(this);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/job_catalog/JobCatalogBase.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"1be7455246d5c35900c8715c32559bd75b6c7bde","commitMessage":"@@@[GOBBLIN-326] Add more metrics for GaaS and Gobblin Cluster\n\nCloses #2178 from yukuai518/timer\n","date":"2017-12-08 07:28:16","modifiedFileCount":"22","status":"M","submitter":"Kuai Yu"},{"authorTime":"2018-03-01 01:04:36","codes":[{"authorDate":"2018-03-01 01:04:36","commitOrder":3,"curCode":"  public FlowCatalog(Config config, Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new SpecCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(FlowCatalog.class.getSimpleName()).build();\n      this.metrics = new MutableStandardMetrics(this, Optional.of(config));\n      this.addListener(this.metrics);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecStore.class);\n    try {\n      Config newConfig = config;\n      if (config.hasPath(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY)) {\n        newConfig = config.withValue(ConfigurationKeys.SPECSTORE_FS_DIR_KEY,\n            config.getValue(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY));\n      }\n      String specStoreClassName = DEFAULT_FLOWSPEC_STORE_CLASS;\n      if (config.hasPath(ConfigurationKeys.FLOWSPEC_STORE_CLASS_KEY)) {\n        specStoreClassName = config.getString(ConfigurationKeys.FLOWSPEC_STORE_CLASS_KEY);\n      }\n      this.log.info(\"Using audit sink class name/alias \" + specStoreClassName);\n      this.specStore = (SpecStore) ConstructorUtils.invokeConstructor(Class.forName(this.aliasResolver.resolve(\n          specStoreClassName)), newConfig, this);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2018-03-01 01:04:36","endLine":116,"groupId":"5878","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"FlowCatalog","params":"(Configconfig@Optional<Logger>log@Optional<MetricContext>parentMetricContext@booleaninstrumentationEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a9/1baed3d9a47b6cab1c025e836bc81fc21485e3.src","preCode":"  public FlowCatalog(Config config, Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new SpecCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(FlowCatalog.class.getSimpleName()).build();\n      this.metrics = new MutableStandardMetrics(this);\n      this.addListener(this.metrics);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecStore.class);\n    try {\n      Config newConfig = config;\n      if (config.hasPath(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY)) {\n        newConfig = config.withValue(ConfigurationKeys.SPECSTORE_FS_DIR_KEY,\n            config.getValue(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY));\n      }\n      String specStoreClassName = DEFAULT_FLOWSPEC_STORE_CLASS;\n      if (config.hasPath(ConfigurationKeys.FLOWSPEC_STORE_CLASS_KEY)) {\n        specStoreClassName = config.getString(ConfigurationKeys.FLOWSPEC_STORE_CLASS_KEY);\n      }\n      this.log.info(\"Using audit sink class name/alias \" + specStoreClassName);\n      this.specStore = (SpecStore) ConstructorUtils.invokeConstructor(Class.forName(this.aliasResolver.resolve(\n          specStoreClassName)), newConfig, this);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2018-03-01 01:04:36","commitOrder":3,"curCode":"  public JobCatalogBase(Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled, Optional<Config> sysConfig) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new JobCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(JobCatalog.class.getSimpleName()).build();\n      this.metrics = createStandardMetrics(sysConfig);\n      this.addListener(this.metrics);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n  }\n","date":"2018-03-01 01:04:36","endLine":85,"groupId":"1930","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"JobCatalogBase","params":"(Optional<Logger>log@Optional<MetricContext>parentMetricContext@booleaninstrumentationEnabled@Optional<Config>sysConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/dc/b0723a8566826e10bdc9acad8505e8ec3a9629.src","preCode":"  public JobCatalogBase(Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new JobCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(JobCatalog.class.getSimpleName()).build();\n      this.metrics = createStandardMetrics();\n      this.addListener(this.metrics);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/job_catalog/JobCatalogBase.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"5e6bfb079cfdd3d2026e7cd674dd6673933437d3","commitMessage":"@@@[GOBBLIN-419] Add more metrics for cluster job monitoring\n\nCloses #2296 from yukuai518/metrics\n","date":"2018-03-01 01:04:36","modifiedFileCount":"19","status":"M","submitter":"Kuai Yu"},{"authorTime":"2018-03-01 01:04:36","codes":[{"authorDate":"2019-04-25 05:49:54","commitOrder":4,"curCode":"  public FlowCatalog(Config config, Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new SpecCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(FlowCatalog.class.getSimpleName()).build();\n      this.metrics = new MutableStandardMetrics(this, Optional.of(config));\n      this.addListener(this.metrics);\n    } else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecStore.class);\n    try {\n      Config newConfig = config;\n      if (config.hasPath(FLOWSPEC_STORE_DIR_KEY)) {\n        newConfig = config.withValue(FSSpecStore.SPECSTORE_FS_DIR_KEY,\n            config.getValue(FLOWSPEC_STORE_DIR_KEY));\n      }\n      String specStoreClassName = DEFAULT_FLOWSPEC_STORE_CLASS;\n      if (config.hasPath(FLOWSPEC_STORE_CLASS_KEY)) {\n        specStoreClassName = config.getString(FLOWSPEC_STORE_CLASS_KEY);\n      }\n      this.log.info(String.format(\"Using class name/alias [%s] for specstore\", specStoreClassName));\n      this.specStore = (SpecStore) ConstructorUtils.invokeConstructor(Class.forName(this.aliasResolver.resolve(\n          specStoreClassName)), newConfig, this);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2019-04-25 05:49:54","endLine":126,"groupId":"1930","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"FlowCatalog","params":"(Configconfig@Optional<Logger>log@Optional<MetricContext>parentMetricContext@booleaninstrumentationEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/9b/4c00c9200ee54e8bd3b583afa458354c903164.src","preCode":"  public FlowCatalog(Config config, Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new SpecCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(FlowCatalog.class.getSimpleName()).build();\n      this.metrics = new MutableStandardMetrics(this, Optional.of(config));\n      this.addListener(this.metrics);\n    } else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecStore.class);\n    try {\n      Config newConfig = config;\n      if (config.hasPath(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY)) {\n        newConfig = config.withValue(ConfigurationKeys.SPECSTORE_FS_DIR_KEY,\n            config.getValue(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY));\n      }\n      String specStoreClassName = DEFAULT_FLOWSPEC_STORE_CLASS;\n      if (config.hasPath(ConfigurationKeys.FLOWSPEC_STORE_CLASS_KEY)) {\n        specStoreClassName = config.getString(ConfigurationKeys.FLOWSPEC_STORE_CLASS_KEY);\n      }\n      this.log.info(\"Using audit sink class name/alias \" + specStoreClassName);\n      this.specStore = (SpecStore) ConstructorUtils.invokeConstructor(Class.forName(this.aliasResolver.resolve(\n          specStoreClassName)), newConfig, this);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2018-03-01 01:04:36","commitOrder":4,"curCode":"  public JobCatalogBase(Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled, Optional<Config> sysConfig) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new JobCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(JobCatalog.class.getSimpleName()).build();\n      this.metrics = createStandardMetrics(sysConfig);\n      this.addListener(this.metrics);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n  }\n","date":"2018-03-01 01:04:36","endLine":85,"groupId":"1930","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"JobCatalogBase","params":"(Optional<Logger>log@Optional<MetricContext>parentMetricContext@booleaninstrumentationEnabled@Optional<Config>sysConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/dc/b0723a8566826e10bdc9acad8505e8ec3a9629.src","preCode":"  public JobCatalogBase(Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled, Optional<Config> sysConfig) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new JobCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(JobCatalog.class.getSimpleName()).build();\n      this.metrics = createStandardMetrics(sysConfig);\n      this.addListener(this.metrics);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/job_catalog/JobCatalogBase.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"}],"commitId":"9661916684d466edf6ae499800a252c108bb9aa2","commitMessage":"@@@[GOBBLIN-748] Craftsmanship code cleaning in Gobblin Service Code\n\nDear Gobblin maintainers. \n\nPlease accept this PR. I understand that it will\nnot be reviewed until I have checked off all the\nsteps below!\n\nEssentially a bunch of renaming.  moving\nconfigurations key around.\nThings that we should agree on:\n- Configuration keys should always placed in the\nclass where they are relevant.  instead of\n`ConfigurationKeys.java` or similar things. We\nshould definitely stop doing that.\n- Naming of `FSFlowCatalog` is misleading. In fact\nit should be `FsTemplateFlowCatalog`. Also.  it\nshould not extend `FsJobCatalog`. The missing\npiece is a `FsCatalogBase`  that implement all\nFileSystem related basic functionality.  and have\n`Template` and `Job` FsCatalog extending that base\nimplementation with it own interface.\n\n\n JIRA\n- [x ] My PR addresses the following [Gobblin\nJIRA]\n    -\nhttps://issues.apache.org/jira/browse/GOBBLIN-748\n\n\n Description\n- [ x] Here are some details about my PR. \nincluding screenshots (if applicable):\n\n\n Tests\n- [ ] My PR adds the following unit tests __OR__\ndoes not need testing for this extremely good\nreason:\n\n\n Commits\n- [ ] My commits all reference JIRA issues in\ntheir subject lines.  and I have squashed multiple\ncommits if they address the same issue. In\naddition.  my commits follow the guidelines from\n\"[How to write a good git commit\nmessage](http://chris.beams.io/posts/git-\ncommit/)\":\n    1. Subject is separated from body by a blank line\n    2. Subject is limited to 50 characters\n    3. Subject does not end with a period\n    4. Subject uses the imperative mood (\"add\".  not\n\"adding\")\n    5. Body wraps at 72 characters\n    6. Body explains \"what\" and \"why\".  not \"how\"\n\nSome naive code changes made while reading through\nGaaS code: There are some work needs to be done\nfor understand master/slave interaction\n\nAdding some documentation and renaming stuff\n\nAddress comments\n\nResolving conflicts\n\nCloses #2613 from\nautumnust/craftsmanshipCleaningGaaS\n","date":"2019-04-25 05:49:54","modifiedFileCount":"26","status":"M","submitter":"autumnust"},{"authorTime":"2018-03-01 01:04:36","codes":[{"authorDate":"2019-06-14 01:21:20","commitOrder":5,"curCode":"  public FlowCatalog(Config config, Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new SpecCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(FlowCatalog.class.getSimpleName()).build();\n      this.metrics = new MutableStandardMetrics(this, Optional.of(config));\n      this.addListener(this.metrics);\n    } else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecStore.class);\n    try {\n      Config newConfig = config;\n      if (config.hasPath(FLOWSPEC_STORE_DIR_KEY)) {\n        newConfig = config.withValue(FSSpecStore.SPECSTORE_FS_DIR_KEY,\n            config.getValue(FLOWSPEC_STORE_DIR_KEY));\n      }\n      String specStoreClassName = ConfigUtils.getString(config, FLOWSPEC_STORE_CLASS_KEY, DEFAULT_FLOWSPEC_STORE_CLASS);\n      this.log.info(String.format(\"Using class name/alias [%s] for specstore\", specStoreClassName));\n      String specSerDeClassName = ConfigUtils.getString(config, FLOWSPEC_SERDE_CLASS_KEY, DEFAULT_FLOWSPEC_SERDE_CLASS);\n      this.log.info(String.format(\"Using class name/alias [%s] for spec serde\", specSerDeClassName));\n\n      SpecSerDe specSerDe = (SpecSerDe) ConstructorUtils.invokeConstructor(Class.forName(\n          new ClassAliasResolver<>(SpecSerDe.class).resolve(specSerDeClassName)));\n      this.specStore = (SpecStore) ConstructorUtils.invokeConstructor(Class.forName(this.aliasResolver.resolve(\n          specStoreClassName)), newConfig, specSerDe);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2019-06-14 01:21:20","endLine":133,"groupId":"10843","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"FlowCatalog","params":"(Configconfig@Optional<Logger>log@Optional<MetricContext>parentMetricContext@booleaninstrumentationEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/11/241373db71258063aeee1a3b09ae2d27d4eeb5.src","preCode":"  public FlowCatalog(Config config, Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new SpecCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(FlowCatalog.class.getSimpleName()).build();\n      this.metrics = new MutableStandardMetrics(this, Optional.of(config));\n      this.addListener(this.metrics);\n    } else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n\n    this.aliasResolver = new ClassAliasResolver<>(SpecStore.class);\n    try {\n      Config newConfig = config;\n      if (config.hasPath(FLOWSPEC_STORE_DIR_KEY)) {\n        newConfig = config.withValue(FSSpecStore.SPECSTORE_FS_DIR_KEY,\n            config.getValue(FLOWSPEC_STORE_DIR_KEY));\n      }\n      String specStoreClassName = DEFAULT_FLOWSPEC_STORE_CLASS;\n      if (config.hasPath(FLOWSPEC_STORE_CLASS_KEY)) {\n        specStoreClassName = config.getString(FLOWSPEC_STORE_CLASS_KEY);\n      }\n      this.log.info(String.format(\"Using class name/alias [%s] for specstore\", specStoreClassName));\n      this.specStore = (SpecStore) ConstructorUtils.invokeConstructor(Class.forName(this.aliasResolver.resolve(\n          specStoreClassName)), newConfig, this);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2018-03-01 01:04:36","commitOrder":5,"curCode":"  public JobCatalogBase(Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled, Optional<Config> sysConfig) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new JobCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(JobCatalog.class.getSimpleName()).build();\n      this.metrics = createStandardMetrics(sysConfig);\n      this.addListener(this.metrics);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n  }\n","date":"2018-03-01 01:04:36","endLine":85,"groupId":"10843","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"JobCatalogBase","params":"(Optional<Logger>log@Optional<MetricContext>parentMetricContext@booleaninstrumentationEnabled@Optional<Config>sysConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/dc/b0723a8566826e10bdc9acad8505e8ec3a9629.src","preCode":"  public JobCatalogBase(Optional<Logger> log, Optional<MetricContext> parentMetricContext,\n      boolean instrumentationEnabled, Optional<Config> sysConfig) {\n    this.log = log.isPresent() ? log.get() : LoggerFactory.getLogger(getClass());\n    this.listeners = new JobCatalogListenersList(log);\n    if (instrumentationEnabled) {\n      MetricContext realParentCtx =\n          parentMetricContext.or(Instrumented.getMetricContext(new org.apache.gobblin.configuration.State(), getClass()));\n      this.metricContext = realParentCtx.childBuilder(JobCatalog.class.getSimpleName()).build();\n      this.metrics = createStandardMetrics(sysConfig);\n      this.addListener(this.metrics);\n    }\n    else {\n      this.metricContext = null;\n      this.metrics = null;\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/job_catalog/JobCatalogBase.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"}],"commitId":"2502a1ff1da1798ddb3804873bea07fd8755e06f","commitMessage":"@@@[GOBBLIN-793] Separate SpecSerDe from SpecCatalogs and add GsonSpecSerDe\n\nCloses #2658 from jack-moseley/spec-serde\n","date":"2019-06-14 01:21:20","modifiedFileCount":"10","status":"M","submitter":"Jack Moseley"}]
