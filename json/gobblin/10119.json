[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2018-05-02 05:40:28","commitOrder":2,"curCode":"  protected void connect() {\n    try {\n      this.isLeader = false;\n      this.managerClusterHelixManager.connect();\n      if (this.dedicatedManagerCluster) {\n        if (jobClusterController.isPresent()) {\n          this.jobClusterController.get().connect();\n        }\n        this.jobClusterHelixManager.connect();\n      }\n\n      this.jobClusterHelixManager.addLiveInstanceChangeListener(new GobblinLiveInstanceChangeListener());\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(), userDefinedMessageHandlerFactory);\n\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE, new ControllerShutdownMessageHandlerFactory());\n      \r\n      if (this.isStandaloneMode) {\n        \r\n        this.managerClusterHelixManager.addControllerListener(new ControllerChangeListener() {\n          @Override\n          public void onControllerChange(NotificationContext changeContext) {\n            handleLeadershipChange(changeContext);\n          }\n        });\n      }\n    } catch (Exception e) {\n      log.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","date":"2018-05-02 05:40:28","endLine":225,"groupId":"4213","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"connect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f6/599789c8da4bdd6671dff278c10daf94e4e4a5.src","preCode":"  protected void connect() {\n    try {\n      this.isLeader = false;\n      this.managerClusterHelixManager.connect();\n      if (this.dedicatedManagerCluster) {\n        if (jobClusterController.isPresent()) {\n          this.jobClusterController.get().connect();\n        }\n        this.jobClusterHelixManager.connect();\n      }\n\n      this.jobClusterHelixManager.addLiveInstanceChangeListener(new GobblinLiveInstanceChangeListener());\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(), userDefinedMessageHandlerFactory);\n\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE, new ControllerShutdownMessageHandlerFactory());\n      \r\n      if (this.isStandaloneMode) {\n        \r\n        this.managerClusterHelixManager.addControllerListener(new ControllerChangeListener() {\n          @Override\n          public void onControllerChange(NotificationContext changeContext) {\n            handleLeadershipChange(changeContext);\n          }\n        });\n      }\n    } catch (Exception e) {\n      log.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixMultiManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  void connectHelixManager() {\n    try {\n      if (this.helixManager.isPresent()) {\n        this.helixManager.get().connect();\n        this.helixManager.get()\n            .getMessagingService()\n            .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(),\n                getUserDefinedMessageHandlerFactory());\n      }\n    } catch (Exception e) {\n      LOGGER.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":366,"groupId":"2276","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"connectHelixManager","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/6a/ed51eefea77769ebef217028745fb2a21d75df.src","preCode":"  void connectHelixManager() {\n    try {\n      if (this.helixManager.isPresent()) {\n        this.helixManager.get().connect();\n        this.helixManager.get()\n            .getMessagingService()\n            .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(),\n                getUserDefinedMessageHandlerFactory());\n      }\n    } catch (Exception e) {\n      LOGGER.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GobblinServiceManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"NB"}],"commitId":"15b7cd08f724f1de471cc59f46323b234215b2f9","commitMessage":"@@@[GOBBLIN-480] Separate job distribution cluster with gobblin cluster manager cluster\n\nCloses #2349 from yukuai518/controller\n","date":"2018-05-02 05:40:28","modifiedFileCount":"4","status":"M","submitter":"Kuai Yu"},{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2018-05-02 05:40:28","commitOrder":3,"curCode":"  protected void connect() {\n    try {\n      this.isLeader = false;\n      this.managerClusterHelixManager.connect();\n      if (this.dedicatedManagerCluster) {\n        if (jobClusterController.isPresent()) {\n          this.jobClusterController.get().connect();\n        }\n        this.jobClusterHelixManager.connect();\n      }\n\n      this.jobClusterHelixManager.addLiveInstanceChangeListener(new GobblinLiveInstanceChangeListener());\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(), userDefinedMessageHandlerFactory);\n\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE, new ControllerShutdownMessageHandlerFactory());\n      \r\n      if (this.isStandaloneMode) {\n        \r\n        this.managerClusterHelixManager.addControllerListener(new ControllerChangeListener() {\n          @Override\n          public void onControllerChange(NotificationContext changeContext) {\n            handleLeadershipChange(changeContext);\n          }\n        });\n      }\n    } catch (Exception e) {\n      log.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","date":"2018-05-02 05:40:28","endLine":225,"groupId":"4213","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"connect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f6/599789c8da4bdd6671dff278c10daf94e4e4a5.src","preCode":"  protected void connect() {\n    try {\n      this.isLeader = false;\n      this.managerClusterHelixManager.connect();\n      if (this.dedicatedManagerCluster) {\n        if (jobClusterController.isPresent()) {\n          this.jobClusterController.get().connect();\n        }\n        this.jobClusterHelixManager.connect();\n      }\n\n      this.jobClusterHelixManager.addLiveInstanceChangeListener(new GobblinLiveInstanceChangeListener());\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(), userDefinedMessageHandlerFactory);\n\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE, new ControllerShutdownMessageHandlerFactory());\n      \r\n      if (this.isStandaloneMode) {\n        \r\n        this.managerClusterHelixManager.addControllerListener(new ControllerChangeListener() {\n          @Override\n          public void onControllerChange(NotificationContext changeContext) {\n            handleLeadershipChange(changeContext);\n          }\n        });\n      }\n    } catch (Exception e) {\n      log.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixMultiManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"N"},{"authorDate":"2018-05-17 02:40:22","commitOrder":3,"curCode":"  void connectHelixManager() {\n    try {\n      if (this.helixManager.isPresent()) {\n        this.helixManager.get().connect();\n        this.helixManager.get()\n            .getMessagingService()\n            .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(),\n                new ControllerUserDefinedMessageHandlerFactory(flowCatalogLocalCommit, scheduler, resourceHandler, serviceName));\n      }\n    } catch (Exception e) {\n      LOGGER.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":424,"groupId":"4262","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"connectHelixManager","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/0d/aea7918c5c5b3805e30930bd3e06f3a2c995c4.src","preCode":"  void connectHelixManager() {\n    try {\n      if (this.helixManager.isPresent()) {\n        this.helixManager.get().connect();\n        this.helixManager.get()\n            .getMessagingService()\n            .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(),\n                getUserDefinedMessageHandlerFactory());\n      }\n    } catch (Exception e) {\n      LOGGER.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GobblinServiceManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"M"}],"commitId":"01302a6db2c468507c0adea5daa69de997aaf14b","commitMessage":"@@@[GOBBLIN-458] Refactor flowConfig resource handler\n\nCloses #2329 from yukuai518/delete\n","date":"2018-05-17 02:40:22","modifiedFileCount":"9","status":"M","submitter":"Kuai Yu"},{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2018-12-11 09:28:41","commitOrder":4,"curCode":"  protected void connect() {\n    try {\n      this.isLeader = false;\n      this.managerClusterHelixManager.connect();\n      if (this.dedicatedManagerCluster) {\n        if (jobClusterController.isPresent()) {\n          this.jobClusterController.get().connect();\n        }\n        if (this.dedicatedTaskDriverCluster) {\n          if (taskDriverClusterController.isPresent()) {\n            this.taskDriverClusterController.get().connect();\n          }\n        }\n        this.jobClusterHelixManager.connect();\n        if (this.taskDriverHelixManager.isPresent()) {\n          this.taskDriverHelixManager.get().connect();\n        }\n      }\n\n      this.jobClusterHelixManager.addLiveInstanceChangeListener(new GobblinLiveInstanceChangeListener());\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(), userDefinedMessageHandlerFactory);\n\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE, new ControllerShutdownMessageHandlerFactory());\n      \r\n      if (this.isStandaloneMode) {\n        \r\n        this.managerClusterHelixManager.addControllerListener(new ControllerChangeListener() {\n          @Override\n          public void onControllerChange(NotificationContext changeContext) {\n            handleLeadershipChange(changeContext);\n          }\n        });\n      }\n    } catch (Exception e) {\n      log.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","date":"2018-12-11 09:28:41","endLine":278,"groupId":"4213","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"connect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/81/ed7ce6077aac080a71397c64d2a792ad166325.src","preCode":"  protected void connect() {\n    try {\n      this.isLeader = false;\n      this.managerClusterHelixManager.connect();\n      if (this.dedicatedManagerCluster) {\n        if (jobClusterController.isPresent()) {\n          this.jobClusterController.get().connect();\n        }\n        this.jobClusterHelixManager.connect();\n      }\n\n      this.jobClusterHelixManager.addLiveInstanceChangeListener(new GobblinLiveInstanceChangeListener());\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(), userDefinedMessageHandlerFactory);\n\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE, new ControllerShutdownMessageHandlerFactory());\n      \r\n      if (this.isStandaloneMode) {\n        \r\n        this.managerClusterHelixManager.addControllerListener(new ControllerChangeListener() {\n          @Override\n          public void onControllerChange(NotificationContext changeContext) {\n            handleLeadershipChange(changeContext);\n          }\n        });\n      }\n    } catch (Exception e) {\n      log.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixMultiManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2018-05-17 02:40:22","commitOrder":4,"curCode":"  void connectHelixManager() {\n    try {\n      if (this.helixManager.isPresent()) {\n        this.helixManager.get().connect();\n        this.helixManager.get()\n            .getMessagingService()\n            .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(),\n                new ControllerUserDefinedMessageHandlerFactory(flowCatalogLocalCommit, scheduler, resourceHandler, serviceName));\n      }\n    } catch (Exception e) {\n      LOGGER.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":424,"groupId":"4262","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"connectHelixManager","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/0d/aea7918c5c5b3805e30930bd3e06f3a2c995c4.src","preCode":"  void connectHelixManager() {\n    try {\n      if (this.helixManager.isPresent()) {\n        this.helixManager.get().connect();\n        this.helixManager.get()\n            .getMessagingService()\n            .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(),\n                new ControllerUserDefinedMessageHandlerFactory(flowCatalogLocalCommit, scheduler, resourceHandler, serviceName));\n      }\n    } catch (Exception e) {\n      LOGGER.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GobblinServiceManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":411,"status":"N"}],"commitId":"d10bae881aead4ba9c91b06048434aefd7583285","commitMessage":"@@@[GOBBLIN-649] Add task driver cluster\n\nAdd task driver cluster\n\nFix comments and add more metrics\n\nCloses #2518 from kyuamazon/td3\n","date":"2018-12-11 09:28:41","modifiedFileCount":"16","status":"M","submitter":"Kuai Yu"},{"authorTime":"2021-06-09 01:31:08","codes":[{"authorDate":"2018-12-11 09:28:41","commitOrder":5,"curCode":"  protected void connect() {\n    try {\n      this.isLeader = false;\n      this.managerClusterHelixManager.connect();\n      if (this.dedicatedManagerCluster) {\n        if (jobClusterController.isPresent()) {\n          this.jobClusterController.get().connect();\n        }\n        if (this.dedicatedTaskDriverCluster) {\n          if (taskDriverClusterController.isPresent()) {\n            this.taskDriverClusterController.get().connect();\n          }\n        }\n        this.jobClusterHelixManager.connect();\n        if (this.taskDriverHelixManager.isPresent()) {\n          this.taskDriverHelixManager.get().connect();\n        }\n      }\n\n      this.jobClusterHelixManager.addLiveInstanceChangeListener(new GobblinLiveInstanceChangeListener());\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(), userDefinedMessageHandlerFactory);\n\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE, new ControllerShutdownMessageHandlerFactory());\n      \r\n      if (this.isStandaloneMode) {\n        \r\n        this.managerClusterHelixManager.addControllerListener(new ControllerChangeListener() {\n          @Override\n          public void onControllerChange(NotificationContext changeContext) {\n            handleLeadershipChange(changeContext);\n          }\n        });\n      }\n    } catch (Exception e) {\n      log.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","date":"2018-12-11 09:28:41","endLine":278,"groupId":"4213","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"connect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/81/ed7ce6077aac080a71397c64d2a792ad166325.src","preCode":"  protected void connect() {\n    try {\n      this.isLeader = false;\n      this.managerClusterHelixManager.connect();\n      if (this.dedicatedManagerCluster) {\n        if (jobClusterController.isPresent()) {\n          this.jobClusterController.get().connect();\n        }\n        if (this.dedicatedTaskDriverCluster) {\n          if (taskDriverClusterController.isPresent()) {\n            this.taskDriverClusterController.get().connect();\n          }\n        }\n        this.jobClusterHelixManager.connect();\n        if (this.taskDriverHelixManager.isPresent()) {\n          this.taskDriverHelixManager.get().connect();\n        }\n      }\n\n      this.jobClusterHelixManager.addLiveInstanceChangeListener(new GobblinLiveInstanceChangeListener());\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(), userDefinedMessageHandlerFactory);\n\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE, new ControllerShutdownMessageHandlerFactory());\n      \r\n      if (this.isStandaloneMode) {\n        \r\n        this.managerClusterHelixManager.addControllerListener(new ControllerChangeListener() {\n          @Override\n          public void onControllerChange(NotificationContext changeContext) {\n            handleLeadershipChange(changeContext);\n          }\n        });\n      }\n    } catch (Exception e) {\n      log.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixMultiManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"N"},{"authorDate":"2021-06-09 01:31:08","commitOrder":5,"curCode":"  void connectHelixManager() {\n    try {\n      if (this.helixManager.isPresent()) {\n        this.helixManager.get().connect();\n        this.helixManager.get()\n            .getMessagingService()\n            .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(),\n                new ControllerUserDefinedMessageHandlerFactory(flowCatalogLocalCommit, scheduler, resourceHandler,\n                    configuration.getServiceName()));\n      }\n    } catch (Exception e) {\n      LOGGER.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","date":"2021-06-09 01:31:08","endLine":503,"groupId":"6144","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"connectHelixManager","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/98/18ef5efb95776c82b699b31c1bab4e967afb44.src","preCode":"  void connectHelixManager() {\n    try {\n      if (this.helixManager.isPresent()) {\n        this.helixManager.get().connect();\n        this.helixManager.get()\n            .getMessagingService()\n            .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(),\n                new ControllerUserDefinedMessageHandlerFactory(flowCatalogLocalCommit, scheduler, resourceHandler, serviceName));\n      }\n    } catch (Exception e) {\n      LOGGER.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GobblinServiceManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"M"}],"commitId":"bf37c76f6da228ae96b0c405d184617f03d2c198","commitMessage":"@@@[GOBBLIN-1444] Use Guice as DI framework in Gobblin service\n\nPreviously.  to initialize Gobblin service.  we used\na mixture\nof dependency injection.  direct class creation and\nconfig-based\nclass creation. In this change.  we unify the\nservice initialization\nby moving towards using dependency injection(DI)\nwith Guice everywhere.\n\nUsing DI will help with (1) unit testing; (2)\noverriding classes in the\nmiddle of the dependency with company-specific\nimplementations.  and\n(3) will improve code readability.  as dependencies\nbetween classes\nbecome visible from the outside and explicit.\n\nWe also move away from name-based injection for\nclasses. Name-based\ninjection is useful when code needs several\ndifferent implementations\nof the same interface. In our use case.  we had\nonly one implementation\nfor each service that can be active. Name-based\ninjection was used for\ncompany-specific overrides.  but there is a better\nway to do it - with\nGuice module overrides.\n\nThere are still several improvements left to be\ndone to have a full\nGuice migration.  but we'll make them in separate\ncommits to limit the\nPR size.\n\nCloses #3281 from aplex/guice-migration\n","date":"2021-06-09 01:31:08","modifiedFileCount":"37","status":"M","submitter":"aprokofiev"},{"authorTime":"2021-08-24 05:22:11","codes":[{"authorDate":"2018-12-11 09:28:41","commitOrder":6,"curCode":"  protected void connect() {\n    try {\n      this.isLeader = false;\n      this.managerClusterHelixManager.connect();\n      if (this.dedicatedManagerCluster) {\n        if (jobClusterController.isPresent()) {\n          this.jobClusterController.get().connect();\n        }\n        if (this.dedicatedTaskDriverCluster) {\n          if (taskDriverClusterController.isPresent()) {\n            this.taskDriverClusterController.get().connect();\n          }\n        }\n        this.jobClusterHelixManager.connect();\n        if (this.taskDriverHelixManager.isPresent()) {\n          this.taskDriverHelixManager.get().connect();\n        }\n      }\n\n      this.jobClusterHelixManager.addLiveInstanceChangeListener(new GobblinLiveInstanceChangeListener());\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(), userDefinedMessageHandlerFactory);\n\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE, new ControllerShutdownMessageHandlerFactory());\n      \r\n      if (this.isStandaloneMode) {\n        \r\n        this.managerClusterHelixManager.addControllerListener(new ControllerChangeListener() {\n          @Override\n          public void onControllerChange(NotificationContext changeContext) {\n            handleLeadershipChange(changeContext);\n          }\n        });\n      }\n    } catch (Exception e) {\n      log.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","date":"2018-12-11 09:28:41","endLine":278,"groupId":"10119","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"connect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/81/ed7ce6077aac080a71397c64d2a792ad166325.src","preCode":"  protected void connect() {\n    try {\n      this.isLeader = false;\n      this.managerClusterHelixManager.connect();\n      if (this.dedicatedManagerCluster) {\n        if (jobClusterController.isPresent()) {\n          this.jobClusterController.get().connect();\n        }\n        if (this.dedicatedTaskDriverCluster) {\n          if (taskDriverClusterController.isPresent()) {\n            this.taskDriverClusterController.get().connect();\n          }\n        }\n        this.jobClusterHelixManager.connect();\n        if (this.taskDriverHelixManager.isPresent()) {\n          this.taskDriverHelixManager.get().connect();\n        }\n      }\n\n      this.jobClusterHelixManager.addLiveInstanceChangeListener(new GobblinLiveInstanceChangeListener());\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(), userDefinedMessageHandlerFactory);\n\n      this.jobClusterHelixManager.getMessagingService()\n          .registerMessageHandlerFactory(GobblinHelixConstants.SHUTDOWN_MESSAGE_TYPE, new ControllerShutdownMessageHandlerFactory());\n      \r\n      if (this.isStandaloneMode) {\n        \r\n        this.managerClusterHelixManager.addControllerListener(new ControllerChangeListener() {\n          @Override\n          public void onControllerChange(NotificationContext changeContext) {\n            handleLeadershipChange(changeContext);\n          }\n        });\n      }\n    } catch (Exception e) {\n      log.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","realPath":"gobblin-cluster/src/main/java/org/apache/gobblin/cluster/GobblinHelixMultiManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"N"},{"authorDate":"2021-08-24 05:22:11","commitOrder":6,"curCode":"  void connectHelixManager() {\n    try {\n      if (this.helixManager.isPresent()) {\n        this.helixManager.get().connect();\n        this.helixManager.get()\n            .getMessagingService()\n            .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(),\n                new ControllerUserDefinedMessageHandlerFactory(flowCatalogLocalCommit, scheduler, v2ResourceHandler,\n                    configuration.getServiceName()));\n      }\n    } catch (Exception e) {\n      LOGGER.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","date":"2021-08-24 05:22:11","endLine":524,"groupId":"10119","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"connectHelixManager","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e0/b4d4dba91e9a5957f4541b4c2f1265e955099d.src","preCode":"  void connectHelixManager() {\n    try {\n      if (this.helixManager.isPresent()) {\n        this.helixManager.get().connect();\n        this.helixManager.get()\n            .getMessagingService()\n            .registerMessageHandlerFactory(Message.MessageType.USER_DEFINE_MSG.toString(),\n                new ControllerUserDefinedMessageHandlerFactory(flowCatalogLocalCommit, scheduler, resourceHandler,\n                    configuration.getServiceName()));\n      }\n    } catch (Exception e) {\n      LOGGER.error(\"HelixManager failed to connect\", e);\n      throw Throwables.propagate(e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/core/GobblinServiceManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"M"}],"commitId":"d9270564a5a3fb098505358d343c279e38c9e257","commitMessage":"@@@[GOBBLIN-1522] Use FlowConfigsV2ResourceHandler when forwarding specs to master instances (#3373)\n\nWe should avoid the use of FlowConfigResourceLocalHandler because it is deprecated in favor of FlowConfigV2ResourceLocalHandler.\nGobblinServiceManager currently uses FlowConfigResourceLocalHandler to create ControllerUserDefinedMessageHandlerFactory. The result of this is that when a helix message sent by a slave instance of the master instance is received it is handled by a V1 local handler.  which we want to avoid.","date":"2021-08-24 05:22:11","modifiedFileCount":"1","status":"M","submitter":"Arjun Singh Bora"}]
