[{"authorTime":"2020-06-02 02:29:14","codes":[{"authorDate":"2020-06-02 02:29:14","commitOrder":1,"curCode":"  public void testBadGet() throws Exception {\n    FlowId flowId = new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME).setFlowName(TEST_DUMMY_FLOW_NAME);\n\n    try {\n      this.flowConfigClient.getFlowConfig(flowId);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n      return;\n    }\n\n    Assert.fail(\"Get should have raised a 404 error\");\n  }\n","date":"2020-06-02 02:29:14","endLine":325,"groupId":"7261","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/28/2ede637d9e586d0742929e6c8ef3011bf0f10c.src","preCode":"  public void testBadGet() throws Exception {\n    FlowId flowId = new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME).setFlowName(TEST_DUMMY_FLOW_NAME);\n\n    try {\n      this.flowConfigClient.getFlowConfig(flowId);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n      return;\n    }\n\n    Assert.fail(\"Get should have raised a 404 error\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/GobblinServiceManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"B"},{"authorDate":"2020-06-02 02:29:14","commitOrder":1,"curCode":"  public void testBadDelete() throws Exception {\n    FlowId flowId = new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME).setFlowName(TEST_DUMMY_FLOW_NAME);\n\n    try {\n      this.flowConfigClient.getFlowConfig(flowId);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n      return;\n    }\n\n    Assert.fail(\"Get should have raised a 404 error\");\n  }\n","date":"2020-06-02 02:29:14","endLine":339,"groupId":"7261","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/28/2ede637d9e586d0742929e6c8ef3011bf0f10c.src","preCode":"  public void testBadDelete() throws Exception {\n    FlowId flowId = new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME).setFlowName(TEST_DUMMY_FLOW_NAME);\n\n    try {\n      this.flowConfigClient.getFlowConfig(flowId);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n      return;\n    }\n\n    Assert.fail(\"Get should have raised a 404 error\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/GobblinServiceManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"B"}],"commitId":"5cd38ac8d26dd4bccd8582a7182893f29ab5a009","commitMessage":"@@@[GOBBLIN-1162] Provide an option to allow slow containers to commit su?\n\nCloses #3002 from sv2000/containerSuicide\n","date":"2020-06-02 02:29:14","modifiedFileCount":"10","status":"B","submitter":"sv2000"},{"authorTime":"2021-08-10 09:00:21","codes":[{"authorDate":"2020-06-02 02:29:14","commitOrder":2,"curCode":"  public void testBadGet() throws Exception {\n    FlowId flowId = new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME).setFlowName(TEST_DUMMY_FLOW_NAME);\n\n    try {\n      this.flowConfigClient.getFlowConfig(flowId);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n      return;\n    }\n\n    Assert.fail(\"Get should have raised a 404 error\");\n  }\n","date":"2020-06-02 02:29:14","endLine":325,"groupId":"101136","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadGet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/28/2ede637d9e586d0742929e6c8ef3011bf0f10c.src","preCode":"  public void testBadGet() throws Exception {\n    FlowId flowId = new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME).setFlowName(TEST_DUMMY_FLOW_NAME);\n\n    try {\n      this.flowConfigClient.getFlowConfig(flowId);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n      return;\n    }\n\n    Assert.fail(\"Get should have raised a 404 error\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/GobblinServiceManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"N"},{"authorDate":"2021-08-10 09:00:21","commitOrder":2,"curCode":"  public void testBadDelete() throws Exception {\n    FlowId flowId = new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME).setFlowName(TEST_DUMMY_FLOW_NAME);\n\n    try {\n      this.flowConfigClient.deleteFlowConfig(flowId);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n      return;\n    }\n\n    Assert.fail(\"Get should have raised a 404 error\");\n  }\n","date":"2021-08-10 09:00:21","endLine":486,"groupId":"101136","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadDelete","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/82/eb2708f56a4de8a88559ce6068850c25a1a543.src","preCode":"  public void testBadDelete() throws Exception {\n    FlowId flowId = new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME).setFlowName(TEST_DUMMY_FLOW_NAME);\n\n    try {\n      this.flowConfigClient.getFlowConfig(flowId);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n      return;\n    }\n\n    Assert.fail(\"Get should have raised a 404 error\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/GobblinServiceManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":475,"status":"M"}],"commitId":"8a4cda47aaf954041c82e43b6a10f389d1e4a4db","commitMessage":"@@@[GOBBLIN-1507] Prevent orchestrator removals when unscheduling flows (#3353)\n\nWhen demoted from leader.  GaaS removes all flows from orchestrator. We need to ensure that fail over events are not disruptive or destructive to currently running flows.  we only want the new leader node to handle scheduling responsibilities from that point forward.","date":"2021-08-10 09:00:21","modifiedFileCount":"3","status":"M","submitter":"William Lo"}]
