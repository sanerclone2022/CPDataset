[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public static PathFilter instantiatePathFilter(Properties props) {\n\n    if (!props.containsKey(PATH_FILTER_KEY)) {\n      return ACCEPT_ALL_PATH_FILTER;\n    }\n\n    try {\n      Class<?> pathFilterClass = Class.forName(props.getProperty(PATH_FILTER_KEY));\n      return (PathFilter) pathFilterClass.newInstance();\n    } catch (ClassNotFoundException exception) {\n      throw new RuntimeException(exception);\n    } catch (InstantiationException exception) {\n      throw new RuntimeException(exception);\n    } catch (IllegalAccessException exception) {\n      throw new RuntimeException(exception);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":116,"groupId":"2104","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"instantiatePathFilter","params":"(Propertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2c/1e954908ac6d3a8d4d3e53eb38f3dce21909d1.src","preCode":"  public static PathFilter instantiatePathFilter(Properties props) {\n\n    if (!props.containsKey(PATH_FILTER_KEY)) {\n      return ACCEPT_ALL_PATH_FILTER;\n    }\n\n    try {\n      Class<?> pathFilterClass = Class.forName(props.getProperty(PATH_FILTER_KEY));\n      return (PathFilter) pathFilterClass.newInstance();\n    } catch (ClassNotFoundException exception) {\n      throw new RuntimeException(exception);\n    } catch (InstantiationException exception) {\n      throw new RuntimeException(exception);\n    } catch (IllegalAccessException exception) {\n      throw new RuntimeException(exception);\n    }\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/dataset/DatasetUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public static CopyableFileFilter instantiateCopyableFileFilter(Properties props, Object... additionalArgs) {\n\n    if (!props.containsKey(COPYABLE_FILE_FILTER_KEY)) {\n      return ACCEPT_ALL_COPYABLE_FILE_FILTER;\n    }\n\n    try {\n      Class<?> copyableFileFilterClass = Class.forName(props.getProperty(COPYABLE_FILE_FILTER_KEY));\n      return (CopyableFileFilter) GobblinConstructorUtils\n          .invokeLongestConstructor(copyableFileFilterClass, additionalArgs);\n    } catch (ReflectiveOperationException exception) {\n      throw new RuntimeException(exception);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":140,"groupId":"3030","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"instantiateCopyableFileFilter","params":"(Propertiesprops@Object...additionalArgs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2c/1e954908ac6d3a8d4d3e53eb38f3dce21909d1.src","preCode":"  public static CopyableFileFilter instantiateCopyableFileFilter(Properties props, Object... additionalArgs) {\n\n    if (!props.containsKey(COPYABLE_FILE_FILTER_KEY)) {\n      return ACCEPT_ALL_COPYABLE_FILE_FILTER;\n    }\n\n    try {\n      Class<?> copyableFileFilterClass = Class.forName(props.getProperty(COPYABLE_FILE_FILTER_KEY));\n      return (CopyableFileFilter) GobblinConstructorUtils\n          .invokeLongestConstructor(copyableFileFilterClass, additionalArgs);\n    } catch (ReflectiveOperationException exception) {\n      throw new RuntimeException(exception);\n    }\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/dataset/DatasetUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2021-08-12 02:07:50","commitOrder":2,"curCode":"  public static PathFilter instantiatePathFilter(Properties props) {\n\n    if (!props.containsKey(PATH_FILTER_KEY)) {\n      return ACCEPT_ALL_PATH_FILTER;\n    }\n\n    try {\n      Class<?> pathFilterClass = Class.forName(props.getProperty(PATH_FILTER_KEY));\n      return (PathFilter) GobblinConstructorUtils.invokeLongestConstructor(pathFilterClass,\n          PropertiesUtils.extractPropertiesWithPrefixAfterRemovingPrefix(props, CONFIGURATION_KEY_PREFIX));\n    } catch (ReflectiveOperationException exception) {\n      throw new RuntimeException(exception);\n    }\n  }\n","date":"2021-08-12 02:07:50","endLine":123,"groupId":"101707","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"instantiatePathFilter","params":"(Propertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/16/386c2220bc109281958d9c7fc7c94325137bde.src","preCode":"  public static PathFilter instantiatePathFilter(Properties props) {\n\n    if (!props.containsKey(PATH_FILTER_KEY)) {\n      return ACCEPT_ALL_PATH_FILTER;\n    }\n\n    try {\n      Class<?> pathFilterClass = Class.forName(props.getProperty(PATH_FILTER_KEY));\n      return (PathFilter) pathFilterClass.newInstance();\n    } catch (ClassNotFoundException exception) {\n      throw new RuntimeException(exception);\n    } catch (InstantiationException exception) {\n      throw new RuntimeException(exception);\n    } catch (IllegalAccessException exception) {\n      throw new RuntimeException(exception);\n    }\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/dataset/DatasetUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public static CopyableFileFilter instantiateCopyableFileFilter(Properties props, Object... additionalArgs) {\n\n    if (!props.containsKey(COPYABLE_FILE_FILTER_KEY)) {\n      return ACCEPT_ALL_COPYABLE_FILE_FILTER;\n    }\n\n    try {\n      Class<?> copyableFileFilterClass = Class.forName(props.getProperty(COPYABLE_FILE_FILTER_KEY));\n      return (CopyableFileFilter) GobblinConstructorUtils\n          .invokeLongestConstructor(copyableFileFilterClass, additionalArgs);\n    } catch (ReflectiveOperationException exception) {\n      throw new RuntimeException(exception);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":140,"groupId":"101707","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"instantiateCopyableFileFilter","params":"(Propertiesprops@Object...additionalArgs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2c/1e954908ac6d3a8d4d3e53eb38f3dce21909d1.src","preCode":"  public static CopyableFileFilter instantiateCopyableFileFilter(Properties props, Object... additionalArgs) {\n\n    if (!props.containsKey(COPYABLE_FILE_FILTER_KEY)) {\n      return ACCEPT_ALL_COPYABLE_FILE_FILTER;\n    }\n\n    try {\n      Class<?> copyableFileFilterClass = Class.forName(props.getProperty(COPYABLE_FILE_FILTER_KEY));\n      return (CopyableFileFilter) GobblinConstructorUtils\n          .invokeLongestConstructor(copyableFileFilterClass, additionalArgs);\n    } catch (ReflectiveOperationException exception) {\n      throw new RuntimeException(exception);\n    }\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/dataset/DatasetUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"N"}],"commitId":"cdd63edc2cb67d0393a666cc493ffc14a7173f96","commitMessage":"@@@[GOBBLIN-1513] fixed the construction of regex filters (#3361)\n\nPath filters are supposed to be provided by key \"gobblin.dataset.path.filter.class\".  but instantiatePathFilter only calls the empty constructors for the path filter classes. Right now only HiddenFilter can be created with empty constructor.\nThis PR will make a constructor for RegexPathFilter so that it can be used with config \"gobblin.dataset.path.filter.class\"","date":"2021-08-12 02:07:50","modifiedFileCount":"4","status":"M","submitter":"Arjun Singh Bora"}]
