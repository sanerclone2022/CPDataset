[{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2018-09-08 08:29:14","commitOrder":3,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(\"flowConfigsV2ResourceHandler\")).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(\"readyToUse\")).to(Boolean.TRUE);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","date":"2018-09-08 08:29:14","endLine":94,"groupId":"6536","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/82/1b9472b9aebb146c37ea34f7903a8f51107d05.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(\"flowConfigsV2ResourceHandler\")).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(\"readyToUse\")).to(Boolean.TRUE);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigV2Test.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"B"},{"authorDate":"2018-05-17 02:40:22","commitOrder":3,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(\"flowConfigsResourceHandler\")).toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(\"readyToUse\")).to(Boolean.TRUE);\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","date":"2018-05-17 02:40:22","endLine":100,"groupId":"6536","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/95/1103c2963507bfee6a834a59e99f4c7c69d368.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(\"flowConfigsResourceHandler\")).toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(\"readyToUse\")).to(Boolean.TRUE);\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"NB"}],"commitId":"1896d7fab5ec43ac248fdb5bebf0218bed156d00","commitMessage":"@@@[GOBBLIN-538] Flow config v2 resource\n\nCloses #2431 from\narjun4084346/FlowConfigV2Resource\n","date":"2018-09-08 08:29:14","modifiedFileCount":"5","status":"M","submitter":"Arjun"},{"authorTime":"2018-10-02 12:20:23","codes":[{"authorDate":"2018-09-08 08:29:14","commitOrder":4,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(\"flowConfigsV2ResourceHandler\")).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(\"readyToUse\")).to(Boolean.TRUE);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","date":"2018-09-08 08:29:14","endLine":94,"groupId":"6536","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/82/1b9472b9aebb146c37ea34f7903a8f51107d05.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(\"flowConfigsV2ResourceHandler\")).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(\"readyToUse\")).to(Boolean.TRUE);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigV2Test.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2018-10-02 12:20:23","commitOrder":4,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(FlowConfigsResource.FLOW_CONFIG_GENERATOR_INJECT_NAME)).toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(\"readyToUse\")).to(Boolean.TRUE);\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","date":"2018-10-02 12:20:23","endLine":100,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/09/b8be5a897aba84237f2f222295bccad4c02654.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(\"flowConfigsResourceHandler\")).toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(\"readyToUse\")).to(Boolean.TRUE);\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"391615e72e5f7bdd78034447881a3e325a0288e6","commitMessage":"@@@[GOBBLIN-597] avoid submitting gaas job if it is already running\n\nCloses #2463 from\narjun4084346/skipDuplicateGaasJob\n","date":"2018-10-02 12:20:23","modifiedFileCount":"9","status":"M","submitter":"Arjun"},{"authorTime":"2018-11-27 10:55:57","codes":[{"authorDate":"2018-09-08 08:29:14","commitOrder":5,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(\"flowConfigsV2ResourceHandler\")).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(\"readyToUse\")).to(Boolean.TRUE);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","date":"2018-09-08 08:29:14","endLine":94,"groupId":"6536","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/82/1b9472b9aebb146c37ea34f7903a8f51107d05.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(\"flowConfigsV2ResourceHandler\")).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(\"readyToUse\")).to(Boolean.TRUE);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigV2Test.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"N"},{"authorDate":"2018-11-27 10:55:57","commitOrder":5,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_FLOW_CONFIG_RESOURCE_HANDLER))\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","date":"2018-11-27 10:55:57","endLine":105,"groupId":"3531","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/3a/15cb4545c5444ce56c3250a398c359ac3b8595.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(FlowConfigsResource.FLOW_CONFIG_GENERATOR_INJECT_NAME)).toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(\"readyToUse\")).to(Boolean.TRUE);\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"709b0af9908c30e2d4d1434f3ff52387326f9bdd","commitMessage":"@@@[GOBBLIN-634] Add requester information to flowconfigs\n\nCloses #2504 from kyuamazon/requester\n","date":"2018-11-27 10:55:57","modifiedFileCount":"3","status":"M","submitter":"Kuai Yu"},{"authorTime":"2018-11-27 10:55:57","codes":[{"authorDate":"2019-03-18 10:52:52","commitOrder":6,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(FlowConfigsV2Resource.FLOW_CONFIG_GENERATOR_INJECT_NAME)).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n        binder.bind(RequesterService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(\n            ConfigFactory.empty()));\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","date":"2019-03-18 10:52:52","endLine":97,"groupId":"6536","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/9b/43875c9ee97e9e38ef9287396fe671d8d22832.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(\"flowConfigsV2ResourceHandler\")).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(\"readyToUse\")).to(Boolean.TRUE);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigV2Test.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2018-11-27 10:55:57","commitOrder":6,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_FLOW_CONFIG_RESOURCE_HANDLER))\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","date":"2018-11-27 10:55:57","endLine":105,"groupId":"3531","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/3a/15cb4545c5444ce56c3250a398c359ac3b8595.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_FLOW_CONFIG_RESOURCE_HANDLER))\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"}],"commitId":"aadf53dbb8acc5a3de0249d3695384fdefa4eb35","commitMessage":"@@@[GOBBLIN-696] Provide an \"explain\" option to return a compiled flow wh?\n\nCloses #2567 from sv2000/dagPlan1\n","date":"2019-03-18 10:52:52","modifiedFileCount":"19","status":"M","submitter":"suvasude"},{"authorTime":"2019-04-25 05:49:54","codes":[{"authorDate":"2019-04-25 05:49:54","commitOrder":7,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(FlowConfigsV2Resource.FLOW_CONFIG_GENERATOR_INJECT_NAME)).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n        binder.bind(RequesterService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(\n            ConfigFactory.empty()));\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","date":"2019-04-25 05:49:54","endLine":98,"groupId":"6536","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/33/e8e58054d53479a0300c20af581578aa26d234.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(FlowConfigsV2Resource.FLOW_CONFIG_GENERATOR_INJECT_NAME)).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n        binder.bind(RequesterService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(\n            ConfigFactory.empty()));\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigV2Test.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2019-04-25 05:49:54","commitOrder":7,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_FLOW_CONFIG_RESOURCE_HANDLER))\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","date":"2019-04-25 05:49:54","endLine":106,"groupId":"3531","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ec/d884e5f823af0ffb55c0f220e988f01ebe5c35.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(ConfigurationKeys.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_FLOW_CONFIG_RESOURCE_HANDLER))\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"9661916684d466edf6ae499800a252c108bb9aa2","commitMessage":"@@@[GOBBLIN-748] Craftsmanship code cleaning in Gobblin Service Code\n\nDear Gobblin maintainers. \n\nPlease accept this PR. I understand that it will\nnot be reviewed until I have checked off all the\nsteps below!\n\nEssentially a bunch of renaming.  moving\nconfigurations key around.\nThings that we should agree on:\n- Configuration keys should always placed in the\nclass where they are relevant.  instead of\n`ConfigurationKeys.java` or similar things. We\nshould definitely stop doing that.\n- Naming of `FSFlowCatalog` is misleading. In fact\nit should be `FsTemplateFlowCatalog`. Also.  it\nshould not extend `FsJobCatalog`. The missing\npiece is a `FsCatalogBase`  that implement all\nFileSystem related basic functionality.  and have\n`Template` and `Job` FsCatalog extending that base\nimplementation with it own interface.\n\n\n JIRA\n- [x ] My PR addresses the following [Gobblin\nJIRA]\n    -\nhttps://issues.apache.org/jira/browse/GOBBLIN-748\n\n\n Description\n- [ x] Here are some details about my PR. \nincluding screenshots (if applicable):\n\n\n Tests\n- [ ] My PR adds the following unit tests __OR__\ndoes not need testing for this extremely good\nreason:\n\n\n Commits\n- [ ] My commits all reference JIRA issues in\ntheir subject lines.  and I have squashed multiple\ncommits if they address the same issue. In\naddition.  my commits follow the guidelines from\n\"[How to write a good git commit\nmessage](http://chris.beams.io/posts/git-\ncommit/)\":\n    1. Subject is separated from body by a blank line\n    2. Subject is limited to 50 characters\n    3. Subject does not end with a period\n    4. Subject uses the imperative mood (\"add\".  not\n\"adding\")\n    5. Body wraps at 72 characters\n    6. Body explains \"what\" and \"why\".  not \"how\"\n\nSome naive code changes made while reading through\nGaaS code: There are some work needs to be done\nfor understand master/slave interaction\n\nAdding some documentation and renaming stuff\n\nAddress comments\n\nResolving conflicts\n\nCloses #2613 from\nautumnust/craftsmanshipCleaningGaaS\n","date":"2019-04-25 05:49:54","modifiedFileCount":"26","status":"M","submitter":"autumnust"},{"authorTime":"2019-04-25 05:49:54","codes":[{"authorDate":"2020-02-29 03:22:08","commitOrder":8,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    _requesterService = new TestRequesterService(ConfigFactory.empty());\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(FlowConfigsV2Resource.FLOW_CONFIG_GENERATOR_INJECT_NAME)).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n        binder.bind(RequesterService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_REQUESTER_SERVICE)).toInstance(_requesterService);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","date":"2020-02-29 03:22:08","endLine":111,"groupId":"6068","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ee/a986efa24e534477d7a95b94b4ca5c4b793261.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(FlowConfigsV2Resource.FLOW_CONFIG_GENERATOR_INJECT_NAME)).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n        binder.bind(RequesterService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(\n            ConfigFactory.empty()));\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigV2Test.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2019-04-25 05:49:54","commitOrder":8,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_FLOW_CONFIG_RESOURCE_HANDLER))\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","date":"2019-04-25 05:49:54","endLine":106,"groupId":"3531","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ec/d884e5f823af0ffb55c0f220e988f01ebe5c35.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_FLOW_CONFIG_RESOURCE_HANDLER))\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"N"}],"commitId":"09f5043fbd3a90aa8f3b06a4b7d3bb2f94501db4","commitMessage":"@@@[GOBBLIN-1050] Verify requester when updating/deleting FlowConfig\n\nCloses #2890 from jack-moseley/check-requester\n","date":"2020-02-29 03:22:08","modifiedFileCount":"6","status":"M","submitter":"Jack Moseley"},{"authorTime":"2020-10-08 01:19:37","codes":[{"authorDate":"2020-10-08 01:19:37","commitOrder":9,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    _requesterService = new TestRequesterService(ConfigFactory.empty());\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(FlowConfigsV2Resource.FLOW_CONFIG_GENERATOR_INJECT_NAME)).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n        binder.bind(RequesterService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_REQUESTER_SERVICE)).toInstance(_requesterService);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()), transportClientProperties);\n  }\n","date":"2020-10-08 01:19:37","endLine":114,"groupId":"6068","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/50/fb94765a00cd85a82921d706b6bc694a2e0db7.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    _requesterService = new TestRequesterService(ConfigFactory.empty());\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(FlowConfigsV2Resource.FLOW_CONFIG_GENERATOR_INJECT_NAME)).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n        binder.bind(RequesterService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_REQUESTER_SERVICE)).toInstance(_requesterService);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigV2Test.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2020-10-08 01:19:37","commitOrder":9,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_FLOW_CONFIG_RESOURCE_HANDLER))\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()), transportClientProperties);\n  }\n","date":"2020-10-08 01:19:37","endLine":110,"groupId":"3531","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e8/9f65f2b2a782381ccb24ab48e5cc1e49502d2b.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_FLOW_CONFIG_RESOURCE_HANDLER))\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()));\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"8110e88a1c09c4ec7795560748321891013aadcc","commitMessage":"@@@[GOBBLIN-1279] Fix flaky unit tests involving REST.li calls to FlowConfig endpoint in Gobblin-as-a-Service[]\n\nCloses #3119 from sv2000/flowConfigFlakiness\n","date":"2020-10-08 01:19:37","modifiedFileCount":"6","status":"M","submitter":"suvasude"},{"authorTime":"2020-10-08 01:19:37","codes":[{"authorDate":"2020-11-08 09:17:19","commitOrder":10,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    _requesterService = new TestRequesterService(ConfigFactory.empty());\n\n    this.groupConfigFile = new File(_testDirectory + \"/TestGroups.json\");\n    String groups =\"{\\\"testGroup\\\": \\\"testName,testName2\\\"}\";\n    Files.write(groups.getBytes(), this.groupConfigFile);\n    Config groupServiceConfig = ConfigBuilder.create()\n        .addPrimitive(LocalGroupOwnershipService.GROUP_MEMBER_LIST, this.groupConfigFile.getAbsolutePath())\n        .build();\n\n    groupOwnershipService = new LocalGroupOwnershipService(groupServiceConfig);\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(FlowConfigsV2Resource.FLOW_CONFIG_GENERATOR_INJECT_NAME)).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n        binder.bind(RequesterService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_REQUESTER_SERVICE)).toInstance(_requesterService);\n        binder.bind(GroupOwnershipService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_GROUP_OWNERSHIP_SERVICE)).toInstance(groupOwnershipService);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()), transportClientProperties);\n  }\n","date":"2020-11-08 09:17:19","endLine":132,"groupId":"1952","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f3/93b8f02a578256c3c0e4ccba17959ae4b90212.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    _requesterService = new TestRequesterService(ConfigFactory.empty());\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(FlowConfigsV2Resource.FLOW_CONFIG_GENERATOR_INJECT_NAME)).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n        binder.bind(RequesterService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_REQUESTER_SERVICE)).toInstance(_requesterService);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigV2Test.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2020-10-08 01:19:37","commitOrder":10,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_FLOW_CONFIG_RESOURCE_HANDLER))\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()), transportClientProperties);\n  }\n","date":"2020-10-08 01:19:37","endLine":110,"groupId":"3531","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e8/9f65f2b2a782381ccb24ab48e5cc1e49502d2b.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_FLOW_CONFIG_RESOURCE_HANDLER))\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"}],"commitId":"7352cad8ae3a1d9be10d3b6fb78383ccbada9b19","commitMessage":"@@@[GOBBLIN-1304] Adds group ownership service\n\nCloses #3142 from Will-Lo/add-group-ownership-\nflows\n","date":"2020-11-08 09:17:19","modifiedFileCount":"10","status":"M","submitter":"William Lo"},{"authorTime":"2021-06-05 06:46:57","codes":[{"authorDate":"2021-06-05 06:46:57","commitOrder":11,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n    final SpecCatalogListener mockListener = mock(SpecCatalogListener.class);\n    when(mockListener.getName()).thenReturn(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_SCHEDULER_LISTENER_CLASS);\n    when(mockListener.onAddSpec(any())).thenReturn(new AddSpecResponse(\"\"));\n    flowCatalog.addListener(mockListener);\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    _requesterService = new TestRequesterService(ConfigFactory.empty());\n\n    this.groupConfigFile = new File(_testDirectory + \"/TestGroups.json\");\n    String groups =\"{\\\"testGroup\\\": \\\"testName,testName2\\\"}\";\n    Files.write(groups.getBytes(), this.groupConfigFile);\n    Config groupServiceConfig = ConfigBuilder.create()\n        .addPrimitive(LocalGroupOwnershipService.GROUP_MEMBER_LIST, this.groupConfigFile.getAbsolutePath())\n        .build();\n\n    groupOwnershipService = new LocalGroupOwnershipService(groupServiceConfig);\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(FlowConfigsV2Resource.FLOW_CONFIG_GENERATOR_INJECT_NAME)).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n        binder.bind(RequesterService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_REQUESTER_SERVICE)).toInstance(_requesterService);\n        binder.bind(GroupOwnershipService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_GROUP_OWNERSHIP_SERVICE)).toInstance(groupOwnershipService);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()), transportClientProperties);\n  }\n","date":"2021-06-05 06:46:57","endLine":141,"groupId":"1952","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/07/10a3e85983c049380b4c63f7867fe960028c30.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    _requesterService = new TestRequesterService(ConfigFactory.empty());\n\n    this.groupConfigFile = new File(_testDirectory + \"/TestGroups.json\");\n    String groups =\"{\\\"testGroup\\\": \\\"testName,testName2\\\"}\";\n    Files.write(groups.getBytes(), this.groupConfigFile);\n    Config groupServiceConfig = ConfigBuilder.create()\n        .addPrimitive(LocalGroupOwnershipService.GROUP_MEMBER_LIST, this.groupConfigFile.getAbsolutePath())\n        .build();\n\n    groupOwnershipService = new LocalGroupOwnershipService(groupServiceConfig);\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(FlowConfigsV2Resource.FLOW_CONFIG_GENERATOR_INJECT_NAME)).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n        binder.bind(RequesterService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_REQUESTER_SERVICE)).toInstance(_requesterService);\n        binder.bind(GroupOwnershipService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_GROUP_OWNERSHIP_SERVICE)).toInstance(groupOwnershipService);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigV2Test.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2021-06-05 06:46:57","commitOrder":11,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n    final SpecCatalogListener mockListener = mock(SpecCatalogListener.class);\n    when(mockListener.getName()).thenReturn(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_SCHEDULER_LISTENER_CLASS);\n    when(mockListener.onAddSpec(any())).thenReturn(new AddSpecResponse(\"\"));\n    flowCatalog.addListener(mockListener);\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_FLOW_CONFIG_RESOURCE_HANDLER))\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()), transportClientProperties);\n  }\n","date":"2021-06-05 06:46:57","endLine":118,"groupId":"3531","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/88/7672595d6c7b6bffff3bb922e907fbab3166df.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_FLOW_CONFIG_RESOURCE_HANDLER))\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"381b659d3da7a241d6f038696396e6bba690120e","commitMessage":"@@@[GOBBLIN-1453] Improve error reporting on failed flow compilations and fix bugs wher?\n\nCloses #3291 from Will-Lo/modify-flow-compilation-\nerror-reporting\n","date":"2021-06-05 06:46:57","modifiedFileCount":"11","status":"M","submitter":"William Lo"},{"authorTime":"2021-06-09 01:31:08","codes":[{"authorDate":"2021-06-09 01:31:08","commitOrder":12,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n    final SpecCatalogListener mockListener = mock(SpecCatalogListener.class);\n    when(mockListener.getName()).thenReturn(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_SCHEDULER_LISTENER_CLASS);\n    when(mockListener.onAddSpec(any())).thenReturn(new AddSpecResponse(\"\"));\n    flowCatalog.addListener(mockListener);\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    _requesterService = new TestRequesterService(ConfigFactory.empty());\n\n    this.groupConfigFile = new File(_testDirectory + \"/TestGroups.json\");\n    String groups =\"{\\\"testGroup\\\": \\\"testName,testName2\\\"}\";\n    Files.write(groups.getBytes(), this.groupConfigFile);\n    Config groupServiceConfig = ConfigBuilder.create()\n        .addPrimitive(LocalGroupOwnershipService.GROUP_MEMBER_LIST, this.groupConfigFile.getAbsolutePath())\n        .build();\n\n    groupOwnershipService = new LocalGroupOwnershipService(groupServiceConfig);\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsV2ResourceHandler.class).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n        binder.bind(RequesterService.class).toInstance(_requesterService);\n        binder.bind(GroupOwnershipService.class).toInstance(groupOwnershipService);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()), transportClientProperties);\n  }\n","date":"2021-06-09 01:31:08","endLine":141,"groupId":"101505","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/aa/067c0850adc2fa6e0dc3c882603a5242407a6e.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n    final SpecCatalogListener mockListener = mock(SpecCatalogListener.class);\n    when(mockListener.getName()).thenReturn(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_SCHEDULER_LISTENER_CLASS);\n    when(mockListener.onAddSpec(any())).thenReturn(new AddSpecResponse(\"\"));\n    flowCatalog.addListener(mockListener);\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    _requesterService = new TestRequesterService(ConfigFactory.empty());\n\n    this.groupConfigFile = new File(_testDirectory + \"/TestGroups.json\");\n    String groups =\"{\\\"testGroup\\\": \\\"testName,testName2\\\"}\";\n    Files.write(groups.getBytes(), this.groupConfigFile);\n    Config groupServiceConfig = ConfigBuilder.create()\n        .addPrimitive(LocalGroupOwnershipService.GROUP_MEMBER_LIST, this.groupConfigFile.getAbsolutePath())\n        .build();\n\n    groupOwnershipService = new LocalGroupOwnershipService(groupServiceConfig);\n\n    Injector injector = Guice.createInjector(new Module() {\n      @Override\n      public void configure(Binder binder) {\n        binder.bind(FlowConfigsResourceHandler.class).annotatedWith(Names.named(FlowConfigsV2Resource.FLOW_CONFIG_GENERATOR_INJECT_NAME)).toInstance(new FlowConfigV2ResourceLocalHandler(flowCatalog));\n        \r\n        \r\n        binder.bindConstant().annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n        binder.bind(RequesterService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_REQUESTER_SERVICE)).toInstance(_requesterService);\n        binder.bind(GroupOwnershipService.class).annotatedWith(Names.named(FlowConfigsV2Resource.INJECT_GROUP_OWNERSHIP_SERVICE)).toInstance(groupOwnershipService);\n      }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsV2Resource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    _client =\n        new FlowConfigV2Client(String.format(\"http://localhost:%s/\", _server.getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigV2Test.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2021-06-09 01:31:08","commitOrder":12,"curCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n    final SpecCatalogListener mockListener = mock(SpecCatalogListener.class);\n    when(mockListener.getName()).thenReturn(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_SCHEDULER_LISTENER_CLASS);\n    when(mockListener.onAddSpec(any())).thenReturn(new AddSpecResponse(\"\"));\n    flowCatalog.addListener(mockListener);\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()), transportClientProperties);\n  }\n","date":"2021-06-09 01:31:08","endLine":114,"groupId":"101505","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c2/eee206cbfcf6d032e2e55743da9f73f0862c94.src","preCode":"  public void setUp() throws Exception {\n    ConfigBuilder configBuilder = ConfigBuilder.create();\n\n    _testDirectory = Files.createTempDir();\n\n    configBuilder\n        .addPrimitive(ConfigurationKeys.JOB_CONFIG_FILE_DIR_KEY, _testDirectory.getAbsolutePath())\n        .addPrimitive(FSSpecStore.SPECSTORE_FS_DIR_KEY, TEST_SPEC_STORE_DIR);\n    cleanUpDir(TEST_SPEC_STORE_DIR);\n\n    Config config = configBuilder.build();\n    final FlowCatalog flowCatalog = new FlowCatalog(config);\n    final SpecCatalogListener mockListener = mock(SpecCatalogListener.class);\n    when(mockListener.getName()).thenReturn(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_SCHEDULER_LISTENER_CLASS);\n    when(mockListener.onAddSpec(any())).thenReturn(new AddSpecResponse(\"\"));\n    flowCatalog.addListener(mockListener);\n    flowCatalog.startAsync();\n    flowCatalog.awaitRunning();\n\n    Injector injector = Guice.createInjector(new Module() {\n       @Override\n       public void configure(Binder binder) {\n         binder.bind(FlowConfigsResourceHandler.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_FLOW_CONFIG_RESOURCE_HANDLER))\n             .toInstance(new FlowConfigResourceLocalHandler(flowCatalog));\n\n         \r\n         \r\n         binder.bindConstant().annotatedWith(Names.named(FlowConfigsResource.INJECT_READY_TO_USE)).to(Boolean.TRUE);\n         binder.bind(RequesterService.class)\n             .annotatedWith(Names.named(FlowConfigsResource.INJECT_REQUESTER_SERVICE)).toInstance(new NoopRequesterService(config));\n       }\n    });\n\n    _server = EmbeddedRestliServer.builder().resources(\n        Lists.<Class<? extends BaseResource>>newArrayList(FlowConfigsResource.class)).injector(injector).build();\n\n    _server.startAsync();\n    _server.awaitRunning();\n\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    _client =\n        new FlowConfigClient(String.format(\"http://localhost:%s/\", _server.getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"bf37c76f6da228ae96b0c405d184617f03d2c198","commitMessage":"@@@[GOBBLIN-1444] Use Guice as DI framework in Gobblin service\n\nPreviously.  to initialize Gobblin service.  we used\na mixture\nof dependency injection.  direct class creation and\nconfig-based\nclass creation. In this change.  we unify the\nservice initialization\nby moving towards using dependency injection(DI)\nwith Guice everywhere.\n\nUsing DI will help with (1) unit testing; (2)\noverriding classes in the\nmiddle of the dependency with company-specific\nimplementations.  and\n(3) will improve code readability.  as dependencies\nbetween classes\nbecome visible from the outside and explicit.\n\nWe also move away from name-based injection for\nclasses. Name-based\ninjection is useful when code needs several\ndifferent implementations\nof the same interface. In our use case.  we had\nonly one implementation\nfor each service that can be active. Name-based\ninjection was used for\ncompany-specific overrides.  but there is a better\nway to do it - with\nGuice module overrides.\n\nThere are still several improvements left to be\ndone to have a full\nGuice migration.  but we'll make them in separate\ncommits to limit the\nPR size.\n\nCloses #3281 from aplex/guice-migration\n","date":"2021-06-09 01:31:08","modifiedFileCount":"37","status":"M","submitter":"aprokofiev"}]
