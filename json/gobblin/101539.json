[{"authorTime":"2020-06-18 09:06:52","codes":[{"authorDate":"2020-07-16 08:18:37","commitOrder":2,"curCode":"  public void complexTypeEligibilityCheck() throws Exception {\n    TypeDescription struct_array_0 = TypeDescription.fromString(\"struct<first:array<int>,second:int>\");\n    TypeDescription struct_array_1 = TypeDescription.fromString(\"struct<first:array<int>,second:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_array_0, struct_array_1));\n    TypeDescription struct_array_2 = TypeDescription.fromString(\"struct<first:array<string>,second:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_array_0, struct_array_2));\n\n    TypeDescription struct_map_0 = TypeDescription.fromString(\"struct<first:map<string,string>,second:int>\");\n    TypeDescription struct_map_1 = TypeDescription.fromString(\"struct<first:map<string,string>,second:int>\");\n    TypeDescription struct_map_2 = TypeDescription.fromString(\"struct<first:map<string,int>,second:int>\");\n    TypeDescription struct_map_3 = TypeDescription.fromString(\"struct<second:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_map_0, struct_map_1));\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_map_0, struct_map_2));\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_map_0, struct_map_3));\n  }\n","date":"2020-07-16 08:18:37","endLine":312,"groupId":"4927","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"complexTypeEligibilityCheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/83/e91bd0fd071d22e7e84a544cb7315a82b88b84.src","preCode":"  public void complexTypeEligibilityCheck() throws Exception {\n    TypeDescription struct_array_0 = TypeDescription.fromString(\"struct<first:array<int>,second:int>\");\n    TypeDescription struct_array_1 = TypeDescription.fromString(\"struct<first:array<int>,second:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_array_0, struct_array_1));\n    TypeDescription struct_array_2 = TypeDescription.fromString(\"struct<first:array<string>,second:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_array_0, struct_array_2));\n\n    TypeDescription struct_map_0 = TypeDescription.fromString(\"struct<first:map<string,string>,second:int>\");\n    TypeDescription struct_map_1 = TypeDescription.fromString(\"struct<first:map<string,string>,second:int>\");\n    TypeDescription struct_map_2 = TypeDescription.fromString(\"struct<first:map<string,int>,second:int>\");\n    TypeDescription struct_map_3 = TypeDescription.fromString(\"struct<second:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_map_0, struct_map_1));\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_map_0, struct_map_2));\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_map_0, struct_map_3));\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/orc/OrcUtilsTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"B"},{"authorDate":"2020-06-18 09:06:52","commitOrder":2,"curCode":"  public void testSchemaContains() throws Exception {\n    \r\n    TypeDescription struct_0 = TypeDescription.fromString(\"struct<a:int,b:int>\");\n    TypeDescription struct_1 = TypeDescription.fromString(\"struct<a:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_0, struct_1));\n\n    \r\n    TypeDescription struct_2 = TypeDescription.fromString(\"struct<a:struct<a:int,b:int>,b:struct<c:int,d:int>,c:int>\");\n    TypeDescription struct_3 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<c:int>,c:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_2, struct_3));\n\n    \r\n    TypeDescription struct_4 = TypeDescription.fromString(\"struct<a:struct<a:int,b:int>,b:struct<c:int,d:int>,c:int>\");\n    TypeDescription struct_5 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<c:int>,d:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_4, struct_5));\n    TypeDescription struct_6 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int>,c:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_4, struct_6));\n\n    \r\n    TypeDescription struct_7 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int,f:int>,c:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_6, struct_7));\n\n    \r\n    \r\n    TypeDescription struct_8 = TypeDescription.fromString(\"struct<a:struct<x:int>,b:struct<e:int>,c:int>\");\n    TypeDescription struct_9 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int,f:int>,c:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_8, struct_9));\n  }\n","date":"2020-06-18 09:06:52","endLine":324,"groupId":"3328","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSchemaContains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c1/cfd1458e58de4e1cf486ccbb1753380922a2a3.src","preCode":"  public void testSchemaContains() throws Exception {\n    \r\n    TypeDescription struct_0 = TypeDescription.fromString(\"struct<a:int,b:int>\");\n    TypeDescription struct_1 = TypeDescription.fromString(\"struct<a:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_0, struct_1));\n\n    \r\n    TypeDescription struct_2 = TypeDescription.fromString(\"struct<a:struct<a:int,b:int>,b:struct<c:int,d:int>,c:int>\");\n    TypeDescription struct_3 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<c:int>,c:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_2, struct_3));\n\n    \r\n    TypeDescription struct_4 = TypeDescription.fromString(\"struct<a:struct<a:int,b:int>,b:struct<c:int,d:int>,c:int>\");\n    TypeDescription struct_5 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<c:int>,d:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_4, struct_5));\n    TypeDescription struct_6 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int>,c:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_4, struct_6));\n\n    \r\n    TypeDescription struct_7 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int,f:int>,c:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_6, struct_7));\n\n    \r\n    \r\n    TypeDescription struct_8 = TypeDescription.fromString(\"struct<a:struct<x:int>,b:struct<e:int>,c:int>\");\n    TypeDescription struct_9 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int,f:int>,c:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_8, struct_9));\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/orc/OrcUtilsTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"NB"}],"commitId":"d3f558340847ddefecbc8099857de65b1b069ec0","commitMessage":"@@@[GOBBLIN-1212] Handle non-Primitive type eligibility-check for shuffle key properly\n\nCloses #3060 from autumnust/embeddedHiveDistcp\n","date":"2020-07-16 08:18:37","modifiedFileCount":"2","status":"M","submitter":"Lei Sun"},{"authorTime":"2020-09-09 02:26:14","codes":[{"authorDate":"2020-09-09 02:26:14","commitOrder":3,"curCode":"  public void complexTypeEligibilityCheck() {\n    TypeDescription struct_array_0 = TypeDescription.fromString(\"struct<first:array<int>,second:int>\");\n    TypeDescription struct_array_1 = TypeDescription.fromString(\"struct<first:array<int>,second:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_array_0, struct_array_1));\n    TypeDescription struct_array_2 = TypeDescription.fromString(\"struct<first:array<string>,second:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_array_0, struct_array_2));\n\n    TypeDescription struct_map_0 = TypeDescription.fromString(\"struct<first:map<string,string>,second:int>\");\n    TypeDescription struct_map_1 = TypeDescription.fromString(\"struct<first:map<string,string>,second:int>\");\n    TypeDescription struct_map_2 = TypeDescription.fromString(\"struct<first:map<string,int>,second:int>\");\n    TypeDescription struct_map_3 = TypeDescription.fromString(\"struct<second:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_map_0, struct_map_1));\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_map_0, struct_map_2));\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_map_0, struct_map_3));\n  }\n","date":"2020-09-09 02:26:14","endLine":354,"groupId":"101539","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"complexTypeEligibilityCheck","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/01/487bcd690bd8c307d4d50d43000dcf635a278f.src","preCode":"  public void complexTypeEligibilityCheck() throws Exception {\n    TypeDescription struct_array_0 = TypeDescription.fromString(\"struct<first:array<int>,second:int>\");\n    TypeDescription struct_array_1 = TypeDescription.fromString(\"struct<first:array<int>,second:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_array_0, struct_array_1));\n    TypeDescription struct_array_2 = TypeDescription.fromString(\"struct<first:array<string>,second:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_array_0, struct_array_2));\n\n    TypeDescription struct_map_0 = TypeDescription.fromString(\"struct<first:map<string,string>,second:int>\");\n    TypeDescription struct_map_1 = TypeDescription.fromString(\"struct<first:map<string,string>,second:int>\");\n    TypeDescription struct_map_2 = TypeDescription.fromString(\"struct<first:map<string,int>,second:int>\");\n    TypeDescription struct_map_3 = TypeDescription.fromString(\"struct<second:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_map_0, struct_map_1));\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_map_0, struct_map_2));\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_map_0, struct_map_3));\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/orc/OrcUtilsTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"M"},{"authorDate":"2020-09-09 02:26:14","commitOrder":3,"curCode":"  public void testSchemaContains() {\n    \r\n    TypeDescription struct_0 = TypeDescription.fromString(\"struct<a:int,b:int>\");\n    TypeDescription struct_1 = TypeDescription.fromString(\"struct<a:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_0, struct_1));\n\n    \r\n    TypeDescription struct_2 = TypeDescription.fromString(\"struct<a:struct<a:int,b:int>,b:struct<c:int,d:int>,c:int>\");\n    TypeDescription struct_3 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<c:int>,c:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_2, struct_3));\n\n    \r\n    TypeDescription struct_4 = TypeDescription.fromString(\"struct<a:struct<a:int,b:int>,b:struct<c:int,d:int>,c:int>\");\n    TypeDescription struct_5 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<c:int>,d:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_4, struct_5));\n    TypeDescription struct_6 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int>,c:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_4, struct_6));\n\n    \r\n    TypeDescription struct_7 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int,f:int>,c:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_6, struct_7));\n\n    \r\n    \r\n    TypeDescription struct_8 = TypeDescription.fromString(\"struct<a:struct<x:int>,b:struct<e:int>,c:int>\");\n    TypeDescription struct_9 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int,f:int>,c:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_8, struct_9));\n  }\n","date":"2020-09-09 02:26:14","endLine":383,"groupId":"101539","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testSchemaContains","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/01/487bcd690bd8c307d4d50d43000dcf635a278f.src","preCode":"  public void testSchemaContains() throws Exception {\n    \r\n    TypeDescription struct_0 = TypeDescription.fromString(\"struct<a:int,b:int>\");\n    TypeDescription struct_1 = TypeDescription.fromString(\"struct<a:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_0, struct_1));\n\n    \r\n    TypeDescription struct_2 = TypeDescription.fromString(\"struct<a:struct<a:int,b:int>,b:struct<c:int,d:int>,c:int>\");\n    TypeDescription struct_3 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<c:int>,c:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_2, struct_3));\n\n    \r\n    TypeDescription struct_4 = TypeDescription.fromString(\"struct<a:struct<a:int,b:int>,b:struct<c:int,d:int>,c:int>\");\n    TypeDescription struct_5 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<c:int>,d:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_4, struct_5));\n    TypeDescription struct_6 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int>,c:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_4, struct_6));\n\n    \r\n    TypeDescription struct_7 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int,f:int>,c:int>\");\n    Assert.assertTrue(OrcUtils.eligibleForUpConvert(struct_6, struct_7));\n\n    \r\n    \r\n    TypeDescription struct_8 = TypeDescription.fromString(\"struct<a:struct<x:int>,b:struct<e:int>,c:int>\");\n    TypeDescription struct_9 = TypeDescription.fromString(\"struct<a:struct<a:int>,b:struct<e:int,f:int>,c:int>\");\n    Assert.assertFalse(OrcUtils.eligibleForUpConvert(struct_8, struct_9));\n  }\n","realPath":"gobblin-compaction/src/test/java/org/apache/gobblin/compaction/mapreduce/orc/OrcUtilsTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"M"}],"commitId":"778a8634978981e63d3a096af336b14f79aebeca","commitMessage":"@@@[GOBBLIN-1257] Fix the handling of collection field types during ORC schema up-conversion in compaction[]\n\nCloses #3097 from sv2000/orcCompaction\n","date":"2020-09-09 02:26:14","modifiedFileCount":"4","status":"M","submitter":"sv2000"}]
