[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testConverter() {\n    WorkUnitState wuState = new WorkUnitState();\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"any\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,\n        \"/tmp/foobar\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\n        \"abracadabra\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\n        \"keyname\");\n    wuState.setProp(EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \"abc.def\", \"foobar\");\n\n    Map<String, Object> parsedProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.CONVERTER, wuState);\n    Assert.assertNotNull(parsedProperties, \"Expected parser to only return one record\");\n    Assert.assertEquals(parsedProperties.size(), 4, \"Did not expect abc.def to be picked up in config\");\n\n    Map<String, Object> parsedWriterProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.WRITER, wuState);\n    Assert.assertNull(parsedWriterProperties, \"Did not expect to find writer properties\");\n  }\n","date":"2017-07-31 15:51:25","endLine":106,"groupId":"5973","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConverter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/68/fbf37876daf78fa09680cbc4ca813f5a1a17cd.src","preCode":"  public void testConverter() {\n    WorkUnitState wuState = new WorkUnitState();\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"any\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,\n        \"/tmp/foobar\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\n        \"abracadabra\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\n        \"keyname\");\n    wuState.setProp(EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \"abc.def\", \"foobar\");\n\n    Map<String, Object> parsedProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.CONVERTER, wuState);\n    Assert.assertNotNull(parsedProperties, \"Expected parser to only return one record\");\n    Assert.assertEquals(parsedProperties.size(), 4, \"Did not expect abc.def to be picked up in config\");\n\n    Map<String, Object> parsedWriterProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.WRITER, wuState);\n    Assert.assertNull(parsedWriterProperties, \"Did not expect to find writer properties\");\n  }\n","realPath":"gobblin-core-base/src/test/java/org/apache/gobblin/crypto/EncryptionConfigParserTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testConverterWithEntityPrefix() {\n    final String entityName = \"MyConverter\";\n\n    WorkUnitState wuState = new WorkUnitState();\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"any\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + entityName + \".\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"aes_rotating\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,\n        \"/tmp/foobar\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\n        \"abracadabra\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\n        \"keyname\");\n    wuState.setProp(EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \"abc.def\", \"foobar\");\n\n    Map<String, Object> parsedProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.CONVERTER, entityName, wuState);\n    Assert.assertNotNull(parsedProperties, \"Expected parser to only return one record\");\n    Assert.assertEquals(parsedProperties.size(), 4, \"Did not expect abc.def to be picked up in config\");\n    Assert.assertEquals(EncryptionConfigParser.getEncryptionType(parsedProperties), \"aes_rotating\");\n    Map<String, Object> parsedWriterProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.WRITER, wuState);\n    Assert.assertNull(parsedWriterProperties, \"Did not expect to find writer properties\");\n  }\n","date":"2017-07-31 15:51:25","endLine":134,"groupId":"530","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterWithEntityPrefix","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/68/fbf37876daf78fa09680cbc4ca813f5a1a17cd.src","preCode":"  public void testConverterWithEntityPrefix() {\n    final String entityName = \"MyConverter\";\n\n    WorkUnitState wuState = new WorkUnitState();\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"any\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + entityName + \".\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"aes_rotating\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,\n        \"/tmp/foobar\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\n        \"abracadabra\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\n        \"keyname\");\n    wuState.setProp(EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \"abc.def\", \"foobar\");\n\n    Map<String, Object> parsedProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.CONVERTER, entityName, wuState);\n    Assert.assertNotNull(parsedProperties, \"Expected parser to only return one record\");\n    Assert.assertEquals(parsedProperties.size(), 4, \"Did not expect abc.def to be picked up in config\");\n    Assert.assertEquals(EncryptionConfigParser.getEncryptionType(parsedProperties), \"aes_rotating\");\n    Map<String, Object> parsedWriterProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.WRITER, wuState);\n    Assert.assertNull(parsedWriterProperties, \"Did not expect to find writer properties\");\n  }\n","realPath":"gobblin-core-base/src/test/java/org/apache/gobblin/crypto/EncryptionConfigParserTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2018-03-20 02:39:46","codes":[{"authorDate":"2018-03-20 02:39:46","commitOrder":2,"curCode":"  public void testConverter() {\n    WorkUnitState wuState = new WorkUnitState();\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"any\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,\n        \"/tmp/foobar\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\n        \"abracadabra\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\n        \"keyname\");\n    wuState.setProp(EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \"abc.def\", \"foobar\");\n\n    Map<String, Object> parsedProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.CONVERTER_ENCRYPT, wuState);\n    Assert.assertNotNull(parsedProperties, \"Expected parser to only return one record\");\n    Assert.assertEquals(parsedProperties.size(), 4, \"Did not expect abc.def to be picked up in config\");\n\n    Map<String, Object> parsedWriterProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.WRITER, wuState);\n    Assert.assertNull(parsedWriterProperties, \"Did not expect to find writer properties\");\n  }\n","date":"2018-03-20 02:39:55","endLine":106,"groupId":"1063","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testConverter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/54/b52d48f759f4a45ab5555435fbac3f056d7a38.src","preCode":"  public void testConverter() {\n    WorkUnitState wuState = new WorkUnitState();\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"any\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,\n        \"/tmp/foobar\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\n        \"abracadabra\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\n        \"keyname\");\n    wuState.setProp(EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \"abc.def\", \"foobar\");\n\n    Map<String, Object> parsedProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.CONVERTER, wuState);\n    Assert.assertNotNull(parsedProperties, \"Expected parser to only return one record\");\n    Assert.assertEquals(parsedProperties.size(), 4, \"Did not expect abc.def to be picked up in config\");\n\n    Map<String, Object> parsedWriterProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.WRITER, wuState);\n    Assert.assertNull(parsedWriterProperties, \"Did not expect to find writer properties\");\n  }\n","realPath":"gobblin-core-base/src/test/java/org/apache/gobblin/crypto/EncryptionConfigParserTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2018-03-20 02:39:46","commitOrder":2,"curCode":"  public void testConverterWithEntityPrefix() {\n    final String entityName = \"MyConverter\";\n\n    WorkUnitState wuState = new WorkUnitState();\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"any\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + entityName + \".\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"aes_rotating\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,\n        \"/tmp/foobar\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\n        \"abracadabra\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\n        \"keyname\");\n    wuState.setProp(EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \"abc.def\", \"foobar\");\n\n    Map<String, Object> parsedProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.CONVERTER_ENCRYPT, entityName, wuState);\n    Assert.assertNotNull(parsedProperties, \"Expected parser to only return one record\");\n    Assert.assertEquals(parsedProperties.size(), 4, \"Did not expect abc.def to be picked up in config\");\n    Assert.assertEquals(EncryptionConfigParser.getEncryptionType(parsedProperties), \"aes_rotating\");\n    Map<String, Object> parsedWriterProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.WRITER, wuState);\n    Assert.assertNull(parsedWriterProperties, \"Did not expect to find writer properties\");\n  }\n","date":"2018-03-20 02:39:55","endLine":134,"groupId":"1063","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testConverterWithEntityPrefix","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/54/b52d48f759f4a45ab5555435fbac3f056d7a38.src","preCode":"  public void testConverterWithEntityPrefix() {\n    final String entityName = \"MyConverter\";\n\n    WorkUnitState wuState = new WorkUnitState();\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"any\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + entityName + \".\" + EncryptionConfigParser.ENCRYPTION_ALGORITHM_KEY, \"aes_rotating\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PATH_KEY,\n        \"/tmp/foobar\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEYSTORE_PASSWORD_KEY,\n        \"abracadabra\");\n    wuState.getJobState().setProp(\n        EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \".\" + EncryptionConfigParser.ENCRYPTION_KEY_NAME,\n        \"keyname\");\n    wuState.setProp(EncryptionConfigParser.CONVERTER_ENCRYPT_PREFIX + \"abc.def\", \"foobar\");\n\n    Map<String, Object> parsedProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.CONVERTER, entityName, wuState);\n    Assert.assertNotNull(parsedProperties, \"Expected parser to only return one record\");\n    Assert.assertEquals(parsedProperties.size(), 4, \"Did not expect abc.def to be picked up in config\");\n    Assert.assertEquals(EncryptionConfigParser.getEncryptionType(parsedProperties), \"aes_rotating\");\n    Map<String, Object> parsedWriterProperties = EncryptionConfigParser.getConfigForBranch(EncryptionConfigParser.EntityType.WRITER, wuState);\n    Assert.assertNull(parsedWriterProperties, \"Did not expect to find writer properties\");\n  }\n","realPath":"gobblin-core-base/src/test/java/org/apache/gobblin/crypto/EncryptionConfigParserTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"b7f123f77a58c690a9acf89f6d3168aeda259a17","commitMessage":"@@@[GOBBLIN-427] Add a decryption converter\n\nCloses #2304 from xzhang27/master\n","date":"2018-03-20 02:39:55","modifiedFileCount":"5","status":"M","submitter":"Xiang"}]
