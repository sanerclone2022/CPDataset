[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public synchronized static GobblinTrackingEvent deserializeReportFromJson(GobblinTrackingEvent reuse, byte[] bytes) throws IOException {\n    if (!reader.isPresent()) {\n      reader = Optional.of(new SpecificDatumReader<>(GobblinTrackingEvent.class));\n    }\n\n    Closer closer = Closer.create();\n\n    try {\n      DataInputStream inputStream = closer.register(new DataInputStream(new ByteArrayInputStream(bytes)));\n\n      \r\n      int versionNumber = inputStream.readInt();\n      if (versionNumber != SCHEMA_VERSION) {\n        throw new IOException(String\n            .format(\"MetricReport schema version not recognized. Found version %d, expected %d.\", versionNumber,\n                SCHEMA_VERSION));\n      }\n\n      \r\n      Decoder decoder = DecoderFactory.get().jsonDecoder(GobblinTrackingEvent.SCHEMA$, inputStream);\n      return reader.get().read(reuse, decoder);\n    } catch(Throwable t) {\n      throw closer.rethrow(t);\n    } finally {\n      closer.close();\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":75,"groupId":"1502","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeReportFromJson","params":"(GobblinTrackingEventreuse@byte[]bytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/af/2869bf58c090b51039c2377b1d4a9df66fd263.src","preCode":"  public synchronized static GobblinTrackingEvent deserializeReportFromJson(GobblinTrackingEvent reuse, byte[] bytes) throws IOException {\n    if (!reader.isPresent()) {\n      reader = Optional.of(new SpecificDatumReader<>(GobblinTrackingEvent.class));\n    }\n\n    Closer closer = Closer.create();\n\n    try {\n      DataInputStream inputStream = closer.register(new DataInputStream(new ByteArrayInputStream(bytes)));\n\n      \r\n      int versionNumber = inputStream.readInt();\n      if (versionNumber != SCHEMA_VERSION) {\n        throw new IOException(String\n            .format(\"MetricReport schema version not recognized. Found version %d, expected %d.\", versionNumber,\n                SCHEMA_VERSION));\n      }\n\n      \r\n      Decoder decoder = DecoderFactory.get().jsonDecoder(GobblinTrackingEvent.SCHEMA$, inputStream);\n      return reader.get().read(reuse, decoder);\n    } catch(Throwable t) {\n      throw closer.rethrow(t);\n    } finally {\n      closer.close();\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics-base/src/main/java/org/apache/gobblin/metrics/reporter/util/EventUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public synchronized static MetricReport deserializeReportFromAvroSerialization(MetricReport reuse, byte[] bytes)\n      throws IOException {\n    if (!READER.isPresent()) {\n      READER = Optional.of(new SpecificDatumReader<>(MetricReport.class));\n    }\n\n    Closer closer = Closer.create();\n\n    try {\n      DataInputStream inputStream = closer.register(new DataInputStream(new ByteArrayInputStream(bytes)));\n\n      \r\n      int versionNumber = inputStream.readInt();\n      if (versionNumber != SCHEMA_VERSION) {\n        throw new IOException(\n            String.format(\"MetricReport schema version not recognized. Found version %d, expected %d.\", versionNumber,\n                SCHEMA_VERSION));\n      }\n\n      \r\n      Decoder decoder = DecoderFactory.get().binaryDecoder(inputStream, null);\n      return READER.get().read(reuse, decoder);\n    } catch (Throwable t) {\n      throw closer.rethrow(t);\n    } finally {\n      closer.close();\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":112,"groupId":"1502","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeReportFromAvroSerialization","params":"(MetricReportreuse@byte[]bytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/34/727fecf169cb2f712d6bc7f1c9367e70b0f16b.src","preCode":"  public synchronized static MetricReport deserializeReportFromAvroSerialization(MetricReport reuse, byte[] bytes)\n      throws IOException {\n    if (!READER.isPresent()) {\n      READER = Optional.of(new SpecificDatumReader<>(MetricReport.class));\n    }\n\n    Closer closer = Closer.create();\n\n    try {\n      DataInputStream inputStream = closer.register(new DataInputStream(new ByteArrayInputStream(bytes)));\n\n      \r\n      int versionNumber = inputStream.readInt();\n      if (versionNumber != SCHEMA_VERSION) {\n        throw new IOException(\n            String.format(\"MetricReport schema version not recognized. Found version %d, expected %d.\", versionNumber,\n                SCHEMA_VERSION));\n      }\n\n      \r\n      Decoder decoder = DecoderFactory.get().binaryDecoder(inputStream, null);\n      return READER.get().read(reuse, decoder);\n    } catch (Throwable t) {\n      throw closer.rethrow(t);\n    } finally {\n      closer.close();\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics-base/src/main/java/org/apache/gobblin/metrics/reporter/util/MetricReportUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2020-04-18 05:36:36","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public synchronized static GobblinTrackingEvent deserializeReportFromJson(GobblinTrackingEvent reuse, byte[] bytes) throws IOException {\n    if (!reader.isPresent()) {\n      reader = Optional.of(new SpecificDatumReader<>(GobblinTrackingEvent.class));\n    }\n\n    Closer closer = Closer.create();\n\n    try {\n      DataInputStream inputStream = closer.register(new DataInputStream(new ByteArrayInputStream(bytes)));\n\n      \r\n      int versionNumber = inputStream.readInt();\n      if (versionNumber != SCHEMA_VERSION) {\n        throw new IOException(String\n            .format(\"MetricReport schema version not recognized. Found version %d, expected %d.\", versionNumber,\n                SCHEMA_VERSION));\n      }\n\n      \r\n      Decoder decoder = DecoderFactory.get().jsonDecoder(GobblinTrackingEvent.SCHEMA$, inputStream);\n      return reader.get().read(reuse, decoder);\n    } catch(Throwable t) {\n      throw closer.rethrow(t);\n    } finally {\n      closer.close();\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":75,"groupId":"1023","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeReportFromJson","params":"(GobblinTrackingEventreuse@byte[]bytes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/af/2869bf58c090b51039c2377b1d4a9df66fd263.src","preCode":"  public synchronized static GobblinTrackingEvent deserializeReportFromJson(GobblinTrackingEvent reuse, byte[] bytes) throws IOException {\n    if (!reader.isPresent()) {\n      reader = Optional.of(new SpecificDatumReader<>(GobblinTrackingEvent.class));\n    }\n\n    Closer closer = Closer.create();\n\n    try {\n      DataInputStream inputStream = closer.register(new DataInputStream(new ByteArrayInputStream(bytes)));\n\n      \r\n      int versionNumber = inputStream.readInt();\n      if (versionNumber != SCHEMA_VERSION) {\n        throw new IOException(String\n            .format(\"MetricReport schema version not recognized. Found version %d, expected %d.\", versionNumber,\n                SCHEMA_VERSION));\n      }\n\n      \r\n      Decoder decoder = DecoderFactory.get().jsonDecoder(GobblinTrackingEvent.SCHEMA$, inputStream);\n      return reader.get().read(reuse, decoder);\n    } catch(Throwable t) {\n      throw closer.rethrow(t);\n    } finally {\n      closer.close();\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics-base/src/main/java/org/apache/gobblin/metrics/reporter/util/EventUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2020-04-18 05:36:36","commitOrder":2,"curCode":"  public synchronized static MetricReport deserializeReportFromAvroSerialization(MetricReport reuse, byte[] bytes,\n      @Nullable String schemaId)\n      throws IOException {\n    if (!READER.isPresent()) {\n      READER = Optional.of(new SpecificDatumReader<>(MetricReport.class));\n    }\n\n    Closer closer = Closer.create();\n\n    try {\n      DataInputStream inputStream = closer.register(new DataInputStream(new ByteArrayInputStream(bytes)));\n      if (schemaId != null) {\n        readAndVerifySchemaId(inputStream, schemaId);\n      } else {\n        readAndVerifySchemaVersion(inputStream);\n      }\n      \r\n      Decoder decoder = DecoderFactory.get().binaryDecoder(inputStream, null);\n      return READER.get().read(reuse, decoder);\n    } catch (Throwable t) {\n      throw closer.rethrow(t);\n    } finally {\n      closer.close();\n    }\n  }\n","date":"2020-04-18 05:36:36","endLine":129,"groupId":"1023","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeReportFromAvroSerialization","params":"(MetricReportreuse@byte[]bytes@@NullableStringschemaId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b5/1dcc68fbc56b8ab00ad683dedf2ecea63e9869.src","preCode":"  public synchronized static MetricReport deserializeReportFromAvroSerialization(MetricReport reuse, byte[] bytes)\n      throws IOException {\n    if (!READER.isPresent()) {\n      READER = Optional.of(new SpecificDatumReader<>(MetricReport.class));\n    }\n\n    Closer closer = Closer.create();\n\n    try {\n      DataInputStream inputStream = closer.register(new DataInputStream(new ByteArrayInputStream(bytes)));\n\n      \r\n      int versionNumber = inputStream.readInt();\n      if (versionNumber != SCHEMA_VERSION) {\n        throw new IOException(\n            String.format(\"MetricReport schema version not recognized. Found version %d, expected %d.\", versionNumber,\n                SCHEMA_VERSION));\n      }\n\n      \r\n      Decoder decoder = DecoderFactory.get().binaryDecoder(inputStream, null);\n      return READER.get().read(reuse, decoder);\n    } catch (Throwable t) {\n      throw closer.rethrow(t);\n    } finally {\n      closer.close();\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics-base/src/main/java/org/apache/gobblin/metrics/reporter/util/MetricReportUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"4bedefc13b6ba36a4f0169bbae3aae18b1ceaa39","commitMessage":"@@@[GOBBLIN-1116] Avoid registering schema with schema registry during Me?\n\nCloses #2956 from sv2000/metricsReporterFailure\n","date":"2020-04-18 05:36:36","modifiedFileCount":"23","status":"M","submitter":"sv2000"}]
