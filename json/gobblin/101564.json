[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public static List<Path> getApplicableFilePaths (FileSystem fs, Path dataDir, final Collection<String> extensions) throws IOException {\n    if (!fs.exists(dataDir)) {\n      return Lists.newArrayList();\n    }\n    List<Path> paths = Lists.newArrayList();\n    for (FileStatus fileStatus : FileListUtils.listFilesRecursively(fs, dataDir, new PathFilter() {\n      @Override\n      public boolean accept(Path path) {\n        for (String validExtention : extensions) {\n          if (path.getName().endsWith(validExtention)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    })) {\n      paths.add(fileStatus.getPath());\n    }\n    return paths;\n  }\n","date":"2017-07-31 15:51:25","endLine":127,"groupId":"1544","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getApplicableFilePaths","params":"(FileSystemfs@PathdataDir@finalCollection<String>extensions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2e/ede65e3bbc632bd12bc90702b1e63ca9f6f3ff.src","preCode":"  public static List<Path> getApplicableFilePaths (FileSystem fs, Path dataDir, final Collection<String> extensions) throws IOException {\n    if (!fs.exists(dataDir)) {\n      return Lists.newArrayList();\n    }\n    List<Path> paths = Lists.newArrayList();\n    for (FileStatus fileStatus : FileListUtils.listFilesRecursively(fs, dataDir, new PathFilter() {\n      @Override\n      public boolean accept(Path path) {\n        for (String validExtention : extensions) {\n          if (path.getName().endsWith(validExtention)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    })) {\n      paths.add(fileStatus.getPath());\n    }\n    return paths;\n  }\n","realPath":"gobblin-compaction/src/main/java/org/apache/gobblin/compaction/dataset/DatasetHelper.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  private List<Path> getApplicableFilePaths(final Path dataDir) throws IOException {\n    try {\n      return applicablePathCache.get(dataDir, new Callable<List<Path>>() {\n\n        @Override\n        public List<Path> call() throws Exception {\n          if (!MRCompactorJobRunner.this.fs.exists(dataDir)) {\n            return Lists.newArrayList();\n          }\n          List<Path> paths = Lists.newArrayList();\n          for (FileStatus fileStatus : FileListUtils.listFilesRecursively(MRCompactorJobRunner.this.fs, dataDir,\n              new PathFilter() {\n            @Override\n            public boolean accept(Path path) {\n              for (String validExtention : getApplicableFileExtensions()) {\n                if (path.getName().endsWith(validExtention)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n          })) {\n            paths.add(fileStatus.getPath());\n          }\n          return paths;\n        }\n      });\n    } catch (ExecutionException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":608,"groupId":"1544","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getApplicableFilePaths","params":"(finalPathdataDir)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/49/1bc81b34e83bcb529a730aea8ffa01c78dc226.src","preCode":"  private List<Path> getApplicableFilePaths(final Path dataDir) throws IOException {\n    try {\n      return applicablePathCache.get(dataDir, new Callable<List<Path>>() {\n\n        @Override\n        public List<Path> call() throws Exception {\n          if (!MRCompactorJobRunner.this.fs.exists(dataDir)) {\n            return Lists.newArrayList();\n          }\n          List<Path> paths = Lists.newArrayList();\n          for (FileStatus fileStatus : FileListUtils.listFilesRecursively(MRCompactorJobRunner.this.fs, dataDir,\n              new PathFilter() {\n            @Override\n            public boolean accept(Path path) {\n              for (String validExtention : getApplicableFileExtensions()) {\n                if (path.getName().endsWith(validExtention)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n          })) {\n            paths.add(fileStatus.getPath());\n          }\n          return paths;\n        }\n      });\n    } catch (ExecutionException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"gobblin-compaction/src/main/java/org/apache/gobblin/compaction/mapreduce/MRCompactorJobRunner.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-09-08 10:34:48","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public static List<Path> getApplicableFilePaths (FileSystem fs, Path dataDir, final Collection<String> extensions) throws IOException {\n    if (!fs.exists(dataDir)) {\n      return Lists.newArrayList();\n    }\n    List<Path> paths = Lists.newArrayList();\n    for (FileStatus fileStatus : FileListUtils.listFilesRecursively(fs, dataDir, new PathFilter() {\n      @Override\n      public boolean accept(Path path) {\n        for (String validExtention : extensions) {\n          if (path.getName().endsWith(validExtention)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    })) {\n      paths.add(fileStatus.getPath());\n    }\n    return paths;\n  }\n","date":"2017-07-31 15:51:25","endLine":127,"groupId":"101564","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getApplicableFilePaths","params":"(FileSystemfs@PathdataDir@finalCollection<String>extensions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2e/ede65e3bbc632bd12bc90702b1e63ca9f6f3ff.src","preCode":"  public static List<Path> getApplicableFilePaths (FileSystem fs, Path dataDir, final Collection<String> extensions) throws IOException {\n    if (!fs.exists(dataDir)) {\n      return Lists.newArrayList();\n    }\n    List<Path> paths = Lists.newArrayList();\n    for (FileStatus fileStatus : FileListUtils.listFilesRecursively(fs, dataDir, new PathFilter() {\n      @Override\n      public boolean accept(Path path) {\n        for (String validExtention : extensions) {\n          if (path.getName().endsWith(validExtention)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    })) {\n      paths.add(fileStatus.getPath());\n    }\n    return paths;\n  }\n","realPath":"gobblin-compaction/src/main/java/org/apache/gobblin/compaction/dataset/DatasetHelper.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"N"},{"authorDate":"2017-09-08 10:34:48","commitOrder":2,"curCode":"  private List<Path> getApplicableFilePaths(final Path dataDir, final FileSystem fs) throws IOException {\n    try {\n      return applicablePathCache.get(dataDir, new Callable<List<Path>>() {\n\n        @Override\n        public List<Path> call() throws Exception {\n          if (!MRCompactorJobRunner.this.fs.exists(dataDir)) {\n            return Lists.newArrayList();\n          }\n          List<Path> paths = Lists.newArrayList();\n          for (FileStatus fileStatus : FileListUtils.listFilesRecursively(fs, dataDir,\n              new PathFilter() {\n            @Override\n            public boolean accept(Path path) {\n              for (String validExtention : getApplicableFileExtensions()) {\n                if (path.getName().endsWith(validExtention)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n          })) {\n            paths.add(fileStatus.getPath());\n          }\n          return paths;\n        }\n      });\n    } catch (ExecutionException e) {\n      throw new IOException(e);\n    }\n  }\n","date":"2017-09-08 10:34:48","endLine":684,"groupId":"101564","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getApplicableFilePaths","params":"(finalPathdataDir@finalFileSystemfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e4/36e4d303b6c3970ac44b2e9622f6dbdeba8b28.src","preCode":"  private List<Path> getApplicableFilePaths(final Path dataDir) throws IOException {\n    try {\n      return applicablePathCache.get(dataDir, new Callable<List<Path>>() {\n\n        @Override\n        public List<Path> call() throws Exception {\n          if (!MRCompactorJobRunner.this.fs.exists(dataDir)) {\n            return Lists.newArrayList();\n          }\n          List<Path> paths = Lists.newArrayList();\n          for (FileStatus fileStatus : FileListUtils.listFilesRecursively(MRCompactorJobRunner.this.fs, dataDir,\n              new PathFilter() {\n            @Override\n            public boolean accept(Path path) {\n              for (String validExtention : getApplicableFileExtensions()) {\n                if (path.getName().endsWith(validExtention)) {\n                  return true;\n                }\n              }\n              return false;\n            }\n          })) {\n            paths.add(fileStatus.getPath());\n          }\n          return paths;\n        }\n      });\n    } catch (ExecutionException e) {\n      throw new IOException(e);\n    }\n  }\n","realPath":"gobblin-compaction/src/main/java/org/apache/gobblin/compaction/mapreduce/MRCompactorJobRunner.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"M"}],"commitId":"344d6d3c68b23ba451cabbf3bacb389e38e27f11","commitMessage":"@@@Merge pull request #1993 from treff7es/eventual_consistent_fs_support\n","date":"2017-09-08 10:34:48","modifiedFileCount":"14","status":"M","submitter":"Abhishek Tiwari"}]
