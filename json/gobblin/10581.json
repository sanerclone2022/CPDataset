[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testGetJobState() throws IOException {\n    JobState jobState = zkJobStateStore.get(TEST_JOB_NAME,\n        zkDatasetStateStore.CURRENT_DATASET_STATE_FILE_SUFFIX + zkDatasetStateStore.DATASET_STATE_STORE_TABLE_SUFFIX,\n        TEST_JOB_ID);\n\n    Assert.assertEquals(jobState.getJobName(), TEST_JOB_NAME);\n    Assert.assertEquals(jobState.getJobId(), TEST_JOB_ID);\n    Assert.assertEquals(jobState.getState(), JobState.RunningState.COMMITTED);\n    Assert.assertEquals(jobState.getStartTime(), this.startTime);\n    Assert.assertEquals(jobState.getEndTime(), this.startTime + 1000);\n    Assert.assertEquals(jobState.getDuration(), 1000);\n\n    Assert.assertEquals(jobState.getCompletedTasks(), 3);\n    for (int i = 0; i < jobState.getCompletedTasks(); i++) {\n      TaskState taskState = jobState.getTaskStates().get(i);\n      Assert.assertEquals(taskState.getJobId(), TEST_JOB_ID);\n      Assert.assertEquals(taskState.getTaskId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":122,"groupId":"4234","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetJobState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/74/2aa98b1ccfa1c6747c9cd64242771188c15458.src","preCode":"  public void testGetJobState() throws IOException {\n    JobState jobState = zkJobStateStore.get(TEST_JOB_NAME,\n        zkDatasetStateStore.CURRENT_DATASET_STATE_FILE_SUFFIX + zkDatasetStateStore.DATASET_STATE_STORE_TABLE_SUFFIX,\n        TEST_JOB_ID);\n\n    Assert.assertEquals(jobState.getJobName(), TEST_JOB_NAME);\n    Assert.assertEquals(jobState.getJobId(), TEST_JOB_ID);\n    Assert.assertEquals(jobState.getState(), JobState.RunningState.COMMITTED);\n    Assert.assertEquals(jobState.getStartTime(), this.startTime);\n    Assert.assertEquals(jobState.getEndTime(), this.startTime + 1000);\n    Assert.assertEquals(jobState.getDuration(), 1000);\n\n    Assert.assertEquals(jobState.getCompletedTasks(), 3);\n    for (int i = 0; i < jobState.getCompletedTasks(); i++) {\n      TaskState taskState = jobState.getTaskStates().get(i);\n      Assert.assertEquals(taskState.getJobId(), TEST_JOB_ID);\n      Assert.assertEquals(taskState.getTaskId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n    }\n  }\n","realPath":"gobblin-modules/gobblin-helix/src/test/java/org/apache/gobblin/runtime/ZkDatasetStateStoreTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testGetJobState() throws IOException {\n    JobState jobState = this.fsDatasetStateStore.get(TEST_JOB_NAME,\n        FsDatasetStateStore.CURRENT_DATASET_STATE_FILE_SUFFIX + FsDatasetStateStore.DATASET_STATE_STORE_TABLE_SUFFIX,\n        TEST_JOB_ID);\n\n    Assert.assertEquals(jobState.getJobName(), TEST_JOB_NAME);\n    Assert.assertEquals(jobState.getJobId(), TEST_JOB_ID);\n    Assert.assertEquals(jobState.getState(), JobState.RunningState.COMMITTED);\n    Assert.assertEquals(jobState.getStartTime(), this.startTime);\n    Assert.assertEquals(jobState.getEndTime(), this.startTime + 1000);\n    Assert.assertEquals(jobState.getDuration(), 1000);\n\n    Assert.assertEquals(jobState.getCompletedTasks(), 3);\n    for (int i = 0; i < jobState.getCompletedTasks(); i++) {\n      TaskState taskState = jobState.getTaskStates().get(i);\n      Assert.assertEquals(taskState.getJobId(), TEST_JOB_ID);\n      Assert.assertEquals(taskState.getTaskId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":110,"groupId":"4234","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetJobState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/8a/a9ca8d4bfecaaab6ea7f1cc2e75e432ee0f30b.src","preCode":"  public void testGetJobState() throws IOException {\n    JobState jobState = this.fsDatasetStateStore.get(TEST_JOB_NAME,\n        FsDatasetStateStore.CURRENT_DATASET_STATE_FILE_SUFFIX + FsDatasetStateStore.DATASET_STATE_STORE_TABLE_SUFFIX,\n        TEST_JOB_ID);\n\n    Assert.assertEquals(jobState.getJobName(), TEST_JOB_NAME);\n    Assert.assertEquals(jobState.getJobId(), TEST_JOB_ID);\n    Assert.assertEquals(jobState.getState(), JobState.RunningState.COMMITTED);\n    Assert.assertEquals(jobState.getStartTime(), this.startTime);\n    Assert.assertEquals(jobState.getEndTime(), this.startTime + 1000);\n    Assert.assertEquals(jobState.getDuration(), 1000);\n\n    Assert.assertEquals(jobState.getCompletedTasks(), 3);\n    for (int i = 0; i < jobState.getCompletedTasks(); i++) {\n      TaskState taskState = jobState.getTaskStates().get(i);\n      Assert.assertEquals(taskState.getJobId(), TEST_JOB_ID);\n      Assert.assertEquals(taskState.getTaskId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n    }\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/FsDatasetStateStoreTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2019-12-11 07:56:13","commitOrder":2,"curCode":"  public void testGetJobState() throws IOException {\n    JobState jobState = zkJobStateStore.get(TEST_JOB_NAME,\n        zkDatasetStateStore.CURRENT_DATASET_STATE_FILE_SUFFIX + zkDatasetStateStore.DATASET_STATE_STORE_TABLE_SUFFIX,\n        TEST_JOB_ID);\n\n    Assert.assertEquals(jobState.getId(), TEST_JOB_ID);\n    Assert.assertEquals(jobState.getJobName(), TEST_JOB_NAME);\n    Assert.assertEquals(jobState.getJobId(), TEST_JOB_ID);\n    Assert.assertEquals(jobState.getState(), JobState.RunningState.COMMITTED);\n    Assert.assertEquals(jobState.getStartTime(), this.startTime);\n    Assert.assertEquals(jobState.getEndTime(), this.startTime + 1000);\n    Assert.assertEquals(jobState.getDuration(), 1000);\n\n    Assert.assertEquals(jobState.getCompletedTasks(), 3);\n    for (int i = 0; i < jobState.getCompletedTasks(); i++) {\n      TaskState taskState = jobState.getTaskStates().get(i);\n      Assert.assertEquals(taskState.getJobId(), TEST_JOB_ID);\n      Assert.assertEquals(taskState.getTaskId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n    }\n  }\n","date":"2019-12-11 07:56:13","endLine":140,"groupId":"10581","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testGetJobState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/71/e5cbc92c4aea70e187e72d4f626a59938164f6.src","preCode":"  public void testGetJobState() throws IOException {\n    JobState jobState = zkJobStateStore.get(TEST_JOB_NAME,\n        zkDatasetStateStore.CURRENT_DATASET_STATE_FILE_SUFFIX + zkDatasetStateStore.DATASET_STATE_STORE_TABLE_SUFFIX,\n        TEST_JOB_ID);\n\n    Assert.assertEquals(jobState.getJobName(), TEST_JOB_NAME);\n    Assert.assertEquals(jobState.getJobId(), TEST_JOB_ID);\n    Assert.assertEquals(jobState.getState(), JobState.RunningState.COMMITTED);\n    Assert.assertEquals(jobState.getStartTime(), this.startTime);\n    Assert.assertEquals(jobState.getEndTime(), this.startTime + 1000);\n    Assert.assertEquals(jobState.getDuration(), 1000);\n\n    Assert.assertEquals(jobState.getCompletedTasks(), 3);\n    for (int i = 0; i < jobState.getCompletedTasks(); i++) {\n      TaskState taskState = jobState.getTaskStates().get(i);\n      Assert.assertEquals(taskState.getJobId(), TEST_JOB_ID);\n      Assert.assertEquals(taskState.getTaskId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n    }\n  }\n","realPath":"gobblin-modules/gobblin-helix/src/test/java/org/apache/gobblin/runtime/ZkDatasetStateStoreTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void testGetJobState() throws IOException {\n    JobState jobState = this.fsDatasetStateStore.get(TEST_JOB_NAME,\n        FsDatasetStateStore.CURRENT_DATASET_STATE_FILE_SUFFIX + FsDatasetStateStore.DATASET_STATE_STORE_TABLE_SUFFIX,\n        TEST_JOB_ID);\n\n    Assert.assertEquals(jobState.getJobName(), TEST_JOB_NAME);\n    Assert.assertEquals(jobState.getJobId(), TEST_JOB_ID);\n    Assert.assertEquals(jobState.getState(), JobState.RunningState.COMMITTED);\n    Assert.assertEquals(jobState.getStartTime(), this.startTime);\n    Assert.assertEquals(jobState.getEndTime(), this.startTime + 1000);\n    Assert.assertEquals(jobState.getDuration(), 1000);\n\n    Assert.assertEquals(jobState.getCompletedTasks(), 3);\n    for (int i = 0; i < jobState.getCompletedTasks(); i++) {\n      TaskState taskState = jobState.getTaskStates().get(i);\n      Assert.assertEquals(taskState.getJobId(), TEST_JOB_ID);\n      Assert.assertEquals(taskState.getTaskId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":110,"groupId":"10581","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetJobState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/8a/a9ca8d4bfecaaab6ea7f1cc2e75e432ee0f30b.src","preCode":"  public void testGetJobState() throws IOException {\n    JobState jobState = this.fsDatasetStateStore.get(TEST_JOB_NAME,\n        FsDatasetStateStore.CURRENT_DATASET_STATE_FILE_SUFFIX + FsDatasetStateStore.DATASET_STATE_STORE_TABLE_SUFFIX,\n        TEST_JOB_ID);\n\n    Assert.assertEquals(jobState.getJobName(), TEST_JOB_NAME);\n    Assert.assertEquals(jobState.getJobId(), TEST_JOB_ID);\n    Assert.assertEquals(jobState.getState(), JobState.RunningState.COMMITTED);\n    Assert.assertEquals(jobState.getStartTime(), this.startTime);\n    Assert.assertEquals(jobState.getEndTime(), this.startTime + 1000);\n    Assert.assertEquals(jobState.getDuration(), 1000);\n\n    Assert.assertEquals(jobState.getCompletedTasks(), 3);\n    for (int i = 0; i < jobState.getCompletedTasks(); i++) {\n      TaskState taskState = jobState.getTaskStates().get(i);\n      Assert.assertEquals(taskState.getJobId(), TEST_JOB_ID);\n      Assert.assertEquals(taskState.getTaskId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getId(), TEST_TASK_ID_PREFIX + i);\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n    }\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/FsDatasetStateStoreTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"}],"commitId":"2304f11e033febd4ab3389937ef8ff48b27e99ed","commitMessage":"@@@[GOBBLIN-1002] Set state id when deserializing state from Gobblin state store[]\n\nCloses #2847 from sv2000/checkPointableWatermark\n","date":"2019-12-11 07:56:13","modifiedFileCount":"7","status":"M","submitter":"sv2000"}]
