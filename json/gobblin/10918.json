[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public static String buildClusterMasterCommand(String clusterName, String nfsParentDir, String sinkLogRootDir,\n      String awsConfDir, String appWorkDir,\n      String masterS3ConfUri, String masterS3ConfFiles,\n      String masterS3JarsUri, String masterS3JarsFiles, String masterJarsDir,\n      String masterJvmMemory, Optional<String> masterJvmArgs, Optional<String> gobblinVersion) {\n    final StringBuilder cloudInitCmds = new StringBuilder().append(\"#!/bin/bash\").append(\"\\n\");\n\n    final String clusterMasterClassName = GobblinAWSClusterManager.class.getSimpleName();\n\n    \r\n    \r\n    \r\n    \r\n    final String nfsDir = nfsParentDir + clusterName;\n\n    final String nfsShareDirCmd = String.format(\"echo '%s %s(%s)' | tee --append %s\",\n        nfsDir, NFS_SHARE_ALL_IPS, NFS_SHARE_DEFAULT_OPTS, NFS_CONF_FILE);\n    cloudInitCmds.append(\"mkdir -p \").append(nfsDir).append(File.separator).append(\"1\").append(\"\\n\");\n    cloudInitCmds.append(NFS_SERVER_INSTALL_CMD).append(\"\\n\");\n    cloudInitCmds.append(nfsShareDirCmd).append(\"\\n\");\n    cloudInitCmds.append(NFS_SERVER_START_CMD).append(\"\\n\");\n    cloudInitCmds.append(NFS_EXPORT_FS_CMD).append(\"\\n\");\n\n    \r\n    cloudInitCmds.append(\"mkdir -p \").append(sinkLogRootDir).append(\"\\n\");\n    cloudInitCmds.append(\"chown -R ec2-user:ec2-user /home/ec2-user/*\").append(\"\\n\");\n\n    \r\n    if (gobblinVersion.isPresent()) {\n      cloudInitCmds.append(\"vr=\").append(gobblinVersion.get()).append(\"\\n\");\n    }\n    cloudInitCmds.append(\"cgS3=\").append(masterS3ConfUri).append(\"\\n\");\n    cloudInitCmds.append(\"cg=\").append(awsConfDir).append(\"\\n\");\n    cloudInitCmds.append(\"jrS3=\").append(masterS3JarsUri).append(\"\\n\");\n    cloudInitCmds.append(\"jr=\").append(masterJarsDir).append(\"\\n\");\n\n    \r\n    final StringBuilder classpath = new StringBuilder();\n    final List<String> awsConfs = SPLITTER.splitToList(masterS3ConfFiles);\n    for (String awsConf : awsConfs) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${cg}\\\" \\\"${cgS3}\\\"%s\", awsConf)).append(\"\\n\");\n    }\n    classpath.append(awsConfDir);\n\n    \r\n    \r\n    final List<String> awsJars = SPLITTER.splitToList(masterS3JarsFiles);\n    for (String awsJar : awsJars) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${jr}\\\" \\\"${jrS3}\\\"%s\", awsJar)).append(\"\\n\");\n    }\n    classpath.append(\":\").append(masterJarsDir).append(\"*\");\n\n    \r\n    \r\n    final StringBuilder launchGobblinClusterMasterCmd = new StringBuilder()\n        .append(\"java\")\n        .append(\" -cp \").append(classpath)\n        .append(\" -Xmx\").append(masterJvmMemory)\n        .append(\" \").append(JvmUtils.formatJvmArguments(masterJvmArgs))\n        .append(\" \").append(GobblinAWSClusterManager.class.getName())\n        .append(\" --\").append(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME)\n        .append(\" \").append(clusterName)\n        .append(\" --\").append(GobblinAWSConfigurationKeys.APP_WORK_DIR)\n        .append(\" \").append(appWorkDir)\n        .append(\" 1>\").append(sinkLogRootDir)\n        .append(clusterMasterClassName).append(\".\")\n        .append(\"master\").append(\".\")\n        .append(CloudInitScriptBuilder.STDOUT)\n        .append(\" 2>\").append(sinkLogRootDir)\n        .append(clusterMasterClassName).append(\".\")\n        .append(\"master\").append(\".\")\n        .append(CloudInitScriptBuilder.STDERR);\n    cloudInitCmds.append(launchGobblinClusterMasterCmd).append(\"\\n\");\n\n    final String cloudInitScript = cloudInitCmds.toString();\n    LOGGER.info(\"Cloud-init script for master node: \" + cloudInitScript);\n\n    return encodeBase64(cloudInitScript);\n  }\n","date":"2017-07-31 15:51:25","endLine":163,"groupId":"747","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildClusterMasterCommand","params":"(StringclusterName@StringnfsParentDir@StringsinkLogRootDir@StringawsConfDir@StringappWorkDir@StringmasterS3ConfUri@StringmasterS3ConfFiles@StringmasterS3JarsUri@StringmasterS3JarsFiles@StringmasterJarsDir@StringmasterJvmMemory@Optional<String>masterJvmArgs@Optional<String>gobblinVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/fa/65f5be76f5ec3eaee6dd0b3f965fdbb357926c.src","preCode":"  public static String buildClusterMasterCommand(String clusterName, String nfsParentDir, String sinkLogRootDir,\n      String awsConfDir, String appWorkDir,\n      String masterS3ConfUri, String masterS3ConfFiles,\n      String masterS3JarsUri, String masterS3JarsFiles, String masterJarsDir,\n      String masterJvmMemory, Optional<String> masterJvmArgs, Optional<String> gobblinVersion) {\n    final StringBuilder cloudInitCmds = new StringBuilder().append(\"#!/bin/bash\").append(\"\\n\");\n\n    final String clusterMasterClassName = GobblinAWSClusterManager.class.getSimpleName();\n\n    \r\n    \r\n    \r\n    \r\n    final String nfsDir = nfsParentDir + clusterName;\n\n    final String nfsShareDirCmd = String.format(\"echo '%s %s(%s)' | tee --append %s\",\n        nfsDir, NFS_SHARE_ALL_IPS, NFS_SHARE_DEFAULT_OPTS, NFS_CONF_FILE);\n    cloudInitCmds.append(\"mkdir -p \").append(nfsDir).append(File.separator).append(\"1\").append(\"\\n\");\n    cloudInitCmds.append(NFS_SERVER_INSTALL_CMD).append(\"\\n\");\n    cloudInitCmds.append(nfsShareDirCmd).append(\"\\n\");\n    cloudInitCmds.append(NFS_SERVER_START_CMD).append(\"\\n\");\n    cloudInitCmds.append(NFS_EXPORT_FS_CMD).append(\"\\n\");\n\n    \r\n    cloudInitCmds.append(\"mkdir -p \").append(sinkLogRootDir).append(\"\\n\");\n    cloudInitCmds.append(\"chown -R ec2-user:ec2-user /home/ec2-user/*\").append(\"\\n\");\n\n    \r\n    if (gobblinVersion.isPresent()) {\n      cloudInitCmds.append(\"vr=\").append(gobblinVersion.get()).append(\"\\n\");\n    }\n    cloudInitCmds.append(\"cgS3=\").append(masterS3ConfUri).append(\"\\n\");\n    cloudInitCmds.append(\"cg=\").append(awsConfDir).append(\"\\n\");\n    cloudInitCmds.append(\"jrS3=\").append(masterS3JarsUri).append(\"\\n\");\n    cloudInitCmds.append(\"jr=\").append(masterJarsDir).append(\"\\n\");\n\n    \r\n    final StringBuilder classpath = new StringBuilder();\n    final List<String> awsConfs = SPLITTER.splitToList(masterS3ConfFiles);\n    for (String awsConf : awsConfs) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${cg}\\\" \\\"${cgS3}\\\"%s\", awsConf)).append(\"\\n\");\n    }\n    classpath.append(awsConfDir);\n\n    \r\n    \r\n    final List<String> awsJars = SPLITTER.splitToList(masterS3JarsFiles);\n    for (String awsJar : awsJars) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${jr}\\\" \\\"${jrS3}\\\"%s\", awsJar)).append(\"\\n\");\n    }\n    classpath.append(\":\").append(masterJarsDir).append(\"*\");\n\n    \r\n    \r\n    final StringBuilder launchGobblinClusterMasterCmd = new StringBuilder()\n        .append(\"java\")\n        .append(\" -cp \").append(classpath)\n        .append(\" -Xmx\").append(masterJvmMemory)\n        .append(\" \").append(JvmUtils.formatJvmArguments(masterJvmArgs))\n        .append(\" \").append(GobblinAWSClusterManager.class.getName())\n        .append(\" --\").append(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME)\n        .append(\" \").append(clusterName)\n        .append(\" --\").append(GobblinAWSConfigurationKeys.APP_WORK_DIR)\n        .append(\" \").append(appWorkDir)\n        .append(\" 1>\").append(sinkLogRootDir)\n        .append(clusterMasterClassName).append(\".\")\n        .append(\"master\").append(\".\")\n        .append(CloudInitScriptBuilder.STDOUT)\n        .append(\" 2>\").append(sinkLogRootDir)\n        .append(clusterMasterClassName).append(\".\")\n        .append(\"master\").append(\".\")\n        .append(CloudInitScriptBuilder.STDERR);\n    cloudInitCmds.append(launchGobblinClusterMasterCmd).append(\"\\n\");\n\n    final String cloudInitScript = cloudInitCmds.toString();\n    LOGGER.info(\"Cloud-init script for master node: \" + cloudInitScript);\n\n    return encodeBase64(cloudInitScript);\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/CloudInitScriptBuilder.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public static String buildClusterWorkerCommand(String clusterName, String nfsParentDir, String sinkLogRootDir,\n      String awsConfDir, String appWorkDir, String masterPublicIp,\n      String workerS3ConfUri, String workerS3ConfFiles,\n      String workerS3JarsUri, String workerS3JarsFiles, String workerJarsDir,\n      String workerJvmMemory, Optional<String> workerJvmArgs, Optional<String> gobblinVersion) {\n    final StringBuilder cloudInitCmds = new StringBuilder().append(\"#!/bin/bash\").append(\"\\n\");\n\n    final String clusterWorkerClassName = GobblinAWSTaskRunner.class.getSimpleName();\n\n    \r\n    \r\n    final String nfsDir = nfsParentDir + clusterName;\n    final String nfsMountCmd = String.format(\"mount -t %s %s:%s %s\", NFS_TYPE_4, masterPublicIp, nfsDir,\n        nfsDir);\n    cloudInitCmds.append(\"mkdir -p \").append(nfsDir).append(\"\\n\");\n    cloudInitCmds.append(nfsMountCmd).append(\"\\n\");\n\n    \r\n    cloudInitCmds.append(\"mkdir -p \").append(sinkLogRootDir).append(\"\\n\");\n    cloudInitCmds.append(\"chown -R ec2-user:ec2-user /home/ec2-user/*\").append(\"\\n\");\n\n    \r\n    if (gobblinVersion.isPresent()) {\n      cloudInitCmds.append(\"vr=\").append(gobblinVersion.get()).append(\"\\n\");\n    }\n    cloudInitCmds.append(\"cg0=\").append(workerS3ConfUri).append(\"\\n\");\n    cloudInitCmds.append(\"cg=\").append(awsConfDir).append(\"\\n\");\n    cloudInitCmds.append(\"jr0=\").append(workerS3JarsUri).append(\"\\n\");\n    cloudInitCmds.append(\"jr=\").append(workerJarsDir).append(\"\\n\");\n\n    \r\n    final StringBuilder classpath = new StringBuilder();\n    final List<String> awsConfs = SPLITTER.splitToList(workerS3ConfFiles);\n    for (String awsConf : awsConfs) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${cg}\\\" \\\"${cg0}\\\"%s\", awsConf)).append(\"\\n\");\n    }\n    classpath.append(awsConfDir);\n\n    \r\n    \r\n    final List<String> awsJars = SPLITTER.splitToList(workerS3JarsFiles);\n    for (String awsJar : awsJars) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${jr}\\\" \\\"${jr0}\\\"%s\", awsJar)).append(\"\\n\");\n    }\n    classpath.append(\":\").append(workerJarsDir).append(\"*\");\n\n    \r\n    cloudInitCmds.append(\"pi=`curl http://169.254.169.254/latest/meta-data/local-ipv4`\").append(\"\\n\");\n\n    \r\n    \r\n    final StringBuilder launchGobblinClusterWorkerCmd = new StringBuilder()\n        .append(\"java\")\n        .append(\" -cp \").append(classpath)\n        .append(\" -Xmx\").append(workerJvmMemory)\n        .append(\" \").append(JvmUtils.formatJvmArguments(workerJvmArgs))\n        .append(\" \").append(GobblinAWSTaskRunner.class.getName())\n        .append(\" --\").append(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME)\n        .append(\" \").append(clusterName)\n        .append(\" --\").append(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME)\n        .append(\" \").append(\"$pi\")\n        .append(\" --\").append(GobblinAWSConfigurationKeys.APP_WORK_DIR)\n        .append(\" \").append(appWorkDir)\n        .append(\" 1>\").append(sinkLogRootDir)\n        .append(clusterWorkerClassName).append(\".\")\n        .append(\"$pi\").append(\".\")\n        .append(CloudInitScriptBuilder.STDOUT)\n        .append(\" 2>\").append(sinkLogRootDir)\n        .append(clusterWorkerClassName).append(\".\")\n        .append(\"$pi\").append(\".\")\n        .append(CloudInitScriptBuilder.STDERR);\n    cloudInitCmds.append(launchGobblinClusterWorkerCmd);\n\n    final String cloudInitScript = cloudInitCmds.toString();\n    LOGGER.info(\"Cloud-init script for worker node: \" + cloudInitScript);\n\n    return encodeBase64(cloudInitScript);\n  }\n","date":"2017-07-31 15:51:25","endLine":271,"groupId":"2112","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildClusterWorkerCommand","params":"(StringclusterName@StringnfsParentDir@StringsinkLogRootDir@StringawsConfDir@StringappWorkDir@StringmasterPublicIp@StringworkerS3ConfUri@StringworkerS3ConfFiles@StringworkerS3JarsUri@StringworkerS3JarsFiles@StringworkerJarsDir@StringworkerJvmMemory@Optional<String>workerJvmArgs@Optional<String>gobblinVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/fa/65f5be76f5ec3eaee6dd0b3f965fdbb357926c.src","preCode":"  public static String buildClusterWorkerCommand(String clusterName, String nfsParentDir, String sinkLogRootDir,\n      String awsConfDir, String appWorkDir, String masterPublicIp,\n      String workerS3ConfUri, String workerS3ConfFiles,\n      String workerS3JarsUri, String workerS3JarsFiles, String workerJarsDir,\n      String workerJvmMemory, Optional<String> workerJvmArgs, Optional<String> gobblinVersion) {\n    final StringBuilder cloudInitCmds = new StringBuilder().append(\"#!/bin/bash\").append(\"\\n\");\n\n    final String clusterWorkerClassName = GobblinAWSTaskRunner.class.getSimpleName();\n\n    \r\n    \r\n    final String nfsDir = nfsParentDir + clusterName;\n    final String nfsMountCmd = String.format(\"mount -t %s %s:%s %s\", NFS_TYPE_4, masterPublicIp, nfsDir,\n        nfsDir);\n    cloudInitCmds.append(\"mkdir -p \").append(nfsDir).append(\"\\n\");\n    cloudInitCmds.append(nfsMountCmd).append(\"\\n\");\n\n    \r\n    cloudInitCmds.append(\"mkdir -p \").append(sinkLogRootDir).append(\"\\n\");\n    cloudInitCmds.append(\"chown -R ec2-user:ec2-user /home/ec2-user/*\").append(\"\\n\");\n\n    \r\n    if (gobblinVersion.isPresent()) {\n      cloudInitCmds.append(\"vr=\").append(gobblinVersion.get()).append(\"\\n\");\n    }\n    cloudInitCmds.append(\"cg0=\").append(workerS3ConfUri).append(\"\\n\");\n    cloudInitCmds.append(\"cg=\").append(awsConfDir).append(\"\\n\");\n    cloudInitCmds.append(\"jr0=\").append(workerS3JarsUri).append(\"\\n\");\n    cloudInitCmds.append(\"jr=\").append(workerJarsDir).append(\"\\n\");\n\n    \r\n    final StringBuilder classpath = new StringBuilder();\n    final List<String> awsConfs = SPLITTER.splitToList(workerS3ConfFiles);\n    for (String awsConf : awsConfs) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${cg}\\\" \\\"${cg0}\\\"%s\", awsConf)).append(\"\\n\");\n    }\n    classpath.append(awsConfDir);\n\n    \r\n    \r\n    final List<String> awsJars = SPLITTER.splitToList(workerS3JarsFiles);\n    for (String awsJar : awsJars) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${jr}\\\" \\\"${jr0}\\\"%s\", awsJar)).append(\"\\n\");\n    }\n    classpath.append(\":\").append(workerJarsDir).append(\"*\");\n\n    \r\n    cloudInitCmds.append(\"pi=`curl http://169.254.169.254/latest/meta-data/local-ipv4`\").append(\"\\n\");\n\n    \r\n    \r\n    final StringBuilder launchGobblinClusterWorkerCmd = new StringBuilder()\n        .append(\"java\")\n        .append(\" -cp \").append(classpath)\n        .append(\" -Xmx\").append(workerJvmMemory)\n        .append(\" \").append(JvmUtils.formatJvmArguments(workerJvmArgs))\n        .append(\" \").append(GobblinAWSTaskRunner.class.getName())\n        .append(\" --\").append(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME)\n        .append(\" \").append(clusterName)\n        .append(\" --\").append(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME)\n        .append(\" \").append(\"$pi\")\n        .append(\" --\").append(GobblinAWSConfigurationKeys.APP_WORK_DIR)\n        .append(\" \").append(appWorkDir)\n        .append(\" 1>\").append(sinkLogRootDir)\n        .append(clusterWorkerClassName).append(\".\")\n        .append(\"$pi\").append(\".\")\n        .append(CloudInitScriptBuilder.STDOUT)\n        .append(\" 2>\").append(sinkLogRootDir)\n        .append(clusterWorkerClassName).append(\".\")\n        .append(\"$pi\").append(\".\")\n        .append(CloudInitScriptBuilder.STDERR);\n    cloudInitCmds.append(launchGobblinClusterWorkerCmd);\n\n    final String cloudInitScript = cloudInitCmds.toString();\n    LOGGER.info(\"Cloud-init script for worker node: \" + cloudInitScript);\n\n    return encodeBase64(cloudInitScript);\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/CloudInitScriptBuilder.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2018-07-14 02:33:11","codes":[{"authorDate":"2018-07-14 02:33:11","commitOrder":2,"curCode":"  public static String buildClusterMasterCommand(String clusterName, String nfsParentDir, String sinkLogRootDir,\n      String awsConfDir, String appWorkDir,\n      String masterS3ConfUri, String masterS3ConfFiles,\n      String masterS3JarsUri, String masterS3JarsFiles, String masterJarsDir,\n      String masterJvmMemory, Optional<String> masterJvmArgs, Optional<String> gobblinVersion) {\n    final StringBuilder cloudInitCmds = new StringBuilder().append(BASH).append(\"\\n\");\n\n    final String clusterMasterClassName = GobblinAWSClusterManager.class.getSimpleName();\n\n    \r\n    \r\n    \r\n    \r\n    final String nfsDir = nfsParentDir + clusterName;\n\n    final String nfsShareDirCmd = String.format(\"echo '%s %s(%s)' | tee --append %s\",\n        nfsDir, NFS_SHARE_ALL_IPS, NFS_SHARE_DEFAULT_OPTS, NFS_CONF_FILE);\n    cloudInitCmds.append(\"mkdir -p \").append(nfsDir).append(File.separator).append(\"1\").append(\"\\n\");\n    cloudInitCmds.append(NFS_SERVER_INSTALL_CMD).append(\"\\n\");\n    cloudInitCmds.append(nfsShareDirCmd).append(\"\\n\");\n    cloudInitCmds.append(NFS_SERVER_START_CMD).append(\"\\n\");\n    cloudInitCmds.append(NFS_EXPORT_FS_CMD).append(\"\\n\");\n\n    \r\n    cloudInitCmds.append(\"mkdir -p \").append(sinkLogRootDir).append(\"\\n\");\n    cloudInitCmds.append(\"chown -R ec2-user:ec2-user /home/ec2-user/*\").append(\"\\n\");\n\n    \r\n    if (gobblinVersion.isPresent()) {\n      cloudInitCmds.append(\"vr=\").append(gobblinVersion.get()).append(\"\\n\");\n    }\n    cloudInitCmds.append(\"cgS3=\").append(masterS3ConfUri).append(\"\\n\");\n    cloudInitCmds.append(\"cg=\").append(awsConfDir).append(\"\\n\");\n    cloudInitCmds.append(\"jrS3=\").append(masterS3JarsUri).append(\"\\n\");\n    cloudInitCmds.append(\"jr=\").append(masterJarsDir).append(\"\\n\");\n\n    \r\n    final StringBuilder classpath = new StringBuilder();\n    final List<String> awsConfs = SPLITTER.splitToList(masterS3ConfFiles);\n    for (String awsConf : awsConfs) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${cg}\\\" \\\"${cgS3}\\\"%s\", awsConf)).append(\"\\n\");\n    }\n    classpath.append(awsConfDir);\n\n    \r\n    \r\n    final List<String> awsJars = SPLITTER.splitToList(masterS3JarsFiles);\n    for (String awsJar : awsJars) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${jr}\\\" \\\"${jrS3}\\\"%s\", awsJar)).append(\"\\n\");\n    }\n    classpath.append(\":\").append(masterJarsDir).append(\"*\");\n\n    \r\n    \r\n    final StringBuilder launchGobblinClusterMasterCmd = new StringBuilder()\n        .append(\"java\")\n        .append(\" -cp \").append(classpath)\n        .append(\" -Xmx\").append(masterJvmMemory)\n        .append(\" \").append(JvmUtils.formatJvmArguments(masterJvmArgs))\n        .append(\" \").append(GobblinAWSClusterManager.class.getName())\n        .append(\" --\").append(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME)\n        .append(\" \").append(clusterName)\n        .append(\" --\").append(GobblinAWSConfigurationKeys.APP_WORK_DIR)\n        .append(\" \").append(appWorkDir)\n        .append(\" 1>\").append(sinkLogRootDir)\n        .append(clusterMasterClassName).append(\".\")\n        .append(\"master\").append(\".\")\n        .append(CloudInitScriptBuilder.STDOUT)\n        .append(\" 2>\").append(sinkLogRootDir)\n        .append(clusterMasterClassName).append(\".\")\n        .append(\"master\").append(\".\")\n        .append(CloudInitScriptBuilder.STDERR);\n    cloudInitCmds.append(launchGobblinClusterMasterCmd).append(\"\\n\");\n\n    final String cloudInitScript = cloudInitCmds.toString();\n    LOGGER.info(\"Cloud-init script for master node: \" + cloudInitScript);\n\n    return encodeBase64(cloudInitScript);\n  }\n","date":"2018-07-14 02:33:11","endLine":164,"groupId":"10918","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"buildClusterMasterCommand","params":"(StringclusterName@StringnfsParentDir@StringsinkLogRootDir@StringawsConfDir@StringappWorkDir@StringmasterS3ConfUri@StringmasterS3ConfFiles@StringmasterS3JarsUri@StringmasterS3JarsFiles@StringmasterJarsDir@StringmasterJvmMemory@Optional<String>masterJvmArgs@Optional<String>gobblinVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/8d/a15aa7e6a9424763c1df0669724caaa41dfb92.src","preCode":"  public static String buildClusterMasterCommand(String clusterName, String nfsParentDir, String sinkLogRootDir,\n      String awsConfDir, String appWorkDir,\n      String masterS3ConfUri, String masterS3ConfFiles,\n      String masterS3JarsUri, String masterS3JarsFiles, String masterJarsDir,\n      String masterJvmMemory, Optional<String> masterJvmArgs, Optional<String> gobblinVersion) {\n    final StringBuilder cloudInitCmds = new StringBuilder().append(\"#!/bin/bash\").append(\"\\n\");\n\n    final String clusterMasterClassName = GobblinAWSClusterManager.class.getSimpleName();\n\n    \r\n    \r\n    \r\n    \r\n    final String nfsDir = nfsParentDir + clusterName;\n\n    final String nfsShareDirCmd = String.format(\"echo '%s %s(%s)' | tee --append %s\",\n        nfsDir, NFS_SHARE_ALL_IPS, NFS_SHARE_DEFAULT_OPTS, NFS_CONF_FILE);\n    cloudInitCmds.append(\"mkdir -p \").append(nfsDir).append(File.separator).append(\"1\").append(\"\\n\");\n    cloudInitCmds.append(NFS_SERVER_INSTALL_CMD).append(\"\\n\");\n    cloudInitCmds.append(nfsShareDirCmd).append(\"\\n\");\n    cloudInitCmds.append(NFS_SERVER_START_CMD).append(\"\\n\");\n    cloudInitCmds.append(NFS_EXPORT_FS_CMD).append(\"\\n\");\n\n    \r\n    cloudInitCmds.append(\"mkdir -p \").append(sinkLogRootDir).append(\"\\n\");\n    cloudInitCmds.append(\"chown -R ec2-user:ec2-user /home/ec2-user/*\").append(\"\\n\");\n\n    \r\n    if (gobblinVersion.isPresent()) {\n      cloudInitCmds.append(\"vr=\").append(gobblinVersion.get()).append(\"\\n\");\n    }\n    cloudInitCmds.append(\"cgS3=\").append(masterS3ConfUri).append(\"\\n\");\n    cloudInitCmds.append(\"cg=\").append(awsConfDir).append(\"\\n\");\n    cloudInitCmds.append(\"jrS3=\").append(masterS3JarsUri).append(\"\\n\");\n    cloudInitCmds.append(\"jr=\").append(masterJarsDir).append(\"\\n\");\n\n    \r\n    final StringBuilder classpath = new StringBuilder();\n    final List<String> awsConfs = SPLITTER.splitToList(masterS3ConfFiles);\n    for (String awsConf : awsConfs) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${cg}\\\" \\\"${cgS3}\\\"%s\", awsConf)).append(\"\\n\");\n    }\n    classpath.append(awsConfDir);\n\n    \r\n    \r\n    final List<String> awsJars = SPLITTER.splitToList(masterS3JarsFiles);\n    for (String awsJar : awsJars) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${jr}\\\" \\\"${jrS3}\\\"%s\", awsJar)).append(\"\\n\");\n    }\n    classpath.append(\":\").append(masterJarsDir).append(\"*\");\n\n    \r\n    \r\n    final StringBuilder launchGobblinClusterMasterCmd = new StringBuilder()\n        .append(\"java\")\n        .append(\" -cp \").append(classpath)\n        .append(\" -Xmx\").append(masterJvmMemory)\n        .append(\" \").append(JvmUtils.formatJvmArguments(masterJvmArgs))\n        .append(\" \").append(GobblinAWSClusterManager.class.getName())\n        .append(\" --\").append(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME)\n        .append(\" \").append(clusterName)\n        .append(\" --\").append(GobblinAWSConfigurationKeys.APP_WORK_DIR)\n        .append(\" \").append(appWorkDir)\n        .append(\" 1>\").append(sinkLogRootDir)\n        .append(clusterMasterClassName).append(\".\")\n        .append(\"master\").append(\".\")\n        .append(CloudInitScriptBuilder.STDOUT)\n        .append(\" 2>\").append(sinkLogRootDir)\n        .append(clusterMasterClassName).append(\".\")\n        .append(\"master\").append(\".\")\n        .append(CloudInitScriptBuilder.STDERR);\n    cloudInitCmds.append(launchGobblinClusterMasterCmd).append(\"\\n\");\n\n    final String cloudInitScript = cloudInitCmds.toString();\n    LOGGER.info(\"Cloud-init script for master node: \" + cloudInitScript);\n\n    return encodeBase64(cloudInitScript);\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/CloudInitScriptBuilder.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2018-07-14 02:33:11","commitOrder":2,"curCode":"  public static String buildClusterWorkerCommand(String clusterName, String nfsParentDir, String sinkLogRootDir,\n      String awsConfDir, String appWorkDir, String masterPublicIp,\n      String workerS3ConfUri, String workerS3ConfFiles,\n      String workerS3JarsUri, String workerS3JarsFiles, String workerJarsDir,\n      String workerJvmMemory, Optional<String> workerJvmArgs, Optional<String> gobblinVersion) {\n    final StringBuilder cloudInitCmds = new StringBuilder().append(BASH).append(\"\\n\");\n\n    final String clusterWorkerClassName = GobblinAWSTaskRunner.class.getSimpleName();\n\n    \r\n    \r\n    final String nfsDir = nfsParentDir + clusterName;\n    final String nfsMountCmd = String.format(\"mount -t %s %s:%s %s\", NFS_TYPE_4, masterPublicIp, nfsDir,\n        nfsDir);\n    cloudInitCmds.append(\"mkdir -p \").append(nfsDir).append(\"\\n\");\n    cloudInitCmds.append(nfsMountCmd).append(\"\\n\");\n\n    \r\n    cloudInitCmds.append(\"mkdir -p \").append(sinkLogRootDir).append(\"\\n\");\n    cloudInitCmds.append(\"chown -R ec2-user:ec2-user /home/ec2-user/*\").append(\"\\n\");\n\n    \r\n    if (gobblinVersion.isPresent()) {\n      cloudInitCmds.append(\"vr=\").append(gobblinVersion.get()).append(\"\\n\");\n    }\n    cloudInitCmds.append(\"cg0=\").append(workerS3ConfUri).append(\"\\n\");\n    cloudInitCmds.append(\"cg=\").append(awsConfDir).append(\"\\n\");\n    cloudInitCmds.append(\"jr0=\").append(workerS3JarsUri).append(\"\\n\");\n    cloudInitCmds.append(\"jr=\").append(workerJarsDir).append(\"\\n\");\n\n    \r\n    final StringBuilder classpath = new StringBuilder();\n    final List<String> awsConfs = SPLITTER.splitToList(workerS3ConfFiles);\n    for (String awsConf : awsConfs) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${cg}\\\" \\\"${cg0}\\\"%s\", awsConf)).append(\"\\n\");\n    }\n    classpath.append(awsConfDir);\n\n    \r\n    \r\n    final List<String> awsJars = SPLITTER.splitToList(workerS3JarsFiles);\n    for (String awsJar : awsJars) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${jr}\\\" \\\"${jr0}\\\"%s\", awsJar)).append(\"\\n\");\n    }\n    classpath.append(\":\").append(workerJarsDir).append(\"*\");\n\n    \r\n    cloudInitCmds.append(\"pi=`curl http://169.254.169.254/latest/meta-data/local-ipv4`\").append(\"\\n\");\n\n    \r\n    \r\n    final StringBuilder launchGobblinClusterWorkerCmd = new StringBuilder()\n        .append(\"java\")\n        .append(\" -cp \").append(classpath)\n        .append(\" -Xmx\").append(workerJvmMemory)\n        .append(\" \").append(JvmUtils.formatJvmArguments(workerJvmArgs))\n        .append(\" \").append(GobblinAWSTaskRunner.class.getName())\n        .append(\" --\").append(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME)\n        .append(\" \").append(clusterName)\n        .append(\" --\").append(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME)\n        .append(\" \").append(\"$pi\")\n        .append(\" --\").append(GobblinAWSConfigurationKeys.APP_WORK_DIR)\n        .append(\" \").append(appWorkDir)\n        .append(\" 1>\").append(sinkLogRootDir)\n        .append(clusterWorkerClassName).append(\".\")\n        .append(\"$pi\").append(\".\")\n        .append(CloudInitScriptBuilder.STDOUT)\n        .append(\" 2>\").append(sinkLogRootDir)\n        .append(clusterWorkerClassName).append(\".\")\n        .append(\"$pi\").append(\".\")\n        .append(CloudInitScriptBuilder.STDERR);\n    cloudInitCmds.append(launchGobblinClusterWorkerCmd).append(\"\\n\");\n\n    final String cloudInitScript = cloudInitCmds.toString();\n    LOGGER.info(\"Cloud-init script for worker node: \" + cloudInitScript);\n\n    return encodeBase64(cloudInitScript);\n  }\n","date":"2018-07-14 02:33:11","endLine":272,"groupId":"10918","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"buildClusterWorkerCommand","params":"(StringclusterName@StringnfsParentDir@StringsinkLogRootDir@StringawsConfDir@StringappWorkDir@StringmasterPublicIp@StringworkerS3ConfUri@StringworkerS3ConfFiles@StringworkerS3JarsUri@StringworkerS3JarsFiles@StringworkerJarsDir@StringworkerJvmMemory@Optional<String>workerJvmArgs@Optional<String>gobblinVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/8d/a15aa7e6a9424763c1df0669724caaa41dfb92.src","preCode":"  public static String buildClusterWorkerCommand(String clusterName, String nfsParentDir, String sinkLogRootDir,\n      String awsConfDir, String appWorkDir, String masterPublicIp,\n      String workerS3ConfUri, String workerS3ConfFiles,\n      String workerS3JarsUri, String workerS3JarsFiles, String workerJarsDir,\n      String workerJvmMemory, Optional<String> workerJvmArgs, Optional<String> gobblinVersion) {\n    final StringBuilder cloudInitCmds = new StringBuilder().append(\"#!/bin/bash\").append(\"\\n\");\n\n    final String clusterWorkerClassName = GobblinAWSTaskRunner.class.getSimpleName();\n\n    \r\n    \r\n    final String nfsDir = nfsParentDir + clusterName;\n    final String nfsMountCmd = String.format(\"mount -t %s %s:%s %s\", NFS_TYPE_4, masterPublicIp, nfsDir,\n        nfsDir);\n    cloudInitCmds.append(\"mkdir -p \").append(nfsDir).append(\"\\n\");\n    cloudInitCmds.append(nfsMountCmd).append(\"\\n\");\n\n    \r\n    cloudInitCmds.append(\"mkdir -p \").append(sinkLogRootDir).append(\"\\n\");\n    cloudInitCmds.append(\"chown -R ec2-user:ec2-user /home/ec2-user/*\").append(\"\\n\");\n\n    \r\n    if (gobblinVersion.isPresent()) {\n      cloudInitCmds.append(\"vr=\").append(gobblinVersion.get()).append(\"\\n\");\n    }\n    cloudInitCmds.append(\"cg0=\").append(workerS3ConfUri).append(\"\\n\");\n    cloudInitCmds.append(\"cg=\").append(awsConfDir).append(\"\\n\");\n    cloudInitCmds.append(\"jr0=\").append(workerS3JarsUri).append(\"\\n\");\n    cloudInitCmds.append(\"jr=\").append(workerJarsDir).append(\"\\n\");\n\n    \r\n    final StringBuilder classpath = new StringBuilder();\n    final List<String> awsConfs = SPLITTER.splitToList(workerS3ConfFiles);\n    for (String awsConf : awsConfs) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${cg}\\\" \\\"${cg0}\\\"%s\", awsConf)).append(\"\\n\");\n    }\n    classpath.append(awsConfDir);\n\n    \r\n    \r\n    final List<String> awsJars = SPLITTER.splitToList(workerS3JarsFiles);\n    for (String awsJar : awsJars) {\n      cloudInitCmds.append(String.format(\"wget -P \\\"${jr}\\\" \\\"${jr0}\\\"%s\", awsJar)).append(\"\\n\");\n    }\n    classpath.append(\":\").append(workerJarsDir).append(\"*\");\n\n    \r\n    cloudInitCmds.append(\"pi=`curl http://169.254.169.254/latest/meta-data/local-ipv4`\").append(\"\\n\");\n\n    \r\n    \r\n    final StringBuilder launchGobblinClusterWorkerCmd = new StringBuilder()\n        .append(\"java\")\n        .append(\" -cp \").append(classpath)\n        .append(\" -Xmx\").append(workerJvmMemory)\n        .append(\" \").append(JvmUtils.formatJvmArguments(workerJvmArgs))\n        .append(\" \").append(GobblinAWSTaskRunner.class.getName())\n        .append(\" --\").append(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME)\n        .append(\" \").append(clusterName)\n        .append(\" --\").append(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME)\n        .append(\" \").append(\"$pi\")\n        .append(\" --\").append(GobblinAWSConfigurationKeys.APP_WORK_DIR)\n        .append(\" \").append(appWorkDir)\n        .append(\" 1>\").append(sinkLogRootDir)\n        .append(clusterWorkerClassName).append(\".\")\n        .append(\"$pi\").append(\".\")\n        .append(CloudInitScriptBuilder.STDOUT)\n        .append(\" 2>\").append(sinkLogRootDir)\n        .append(clusterWorkerClassName).append(\".\")\n        .append(\"$pi\").append(\".\")\n        .append(CloudInitScriptBuilder.STDERR);\n    cloudInitCmds.append(launchGobblinClusterWorkerCmd);\n\n    final String cloudInitScript = cloudInitCmds.toString();\n    LOGGER.info(\"Cloud-init script for worker node: \" + cloudInitScript);\n\n    return encodeBase64(cloudInitScript);\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/CloudInitScriptBuilder.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"6232b416a59613db32f6c08cde703c71555d37b8","commitMessage":"@@@[GOBBLIN-533] upgrade helix to 0.8.1\n\nCloses #2396 from arjun4084346/helixUpgrade\n","date":"2018-07-14 02:33:11","modifiedFileCount":"5","status":"M","submitter":"Arjun"}]
