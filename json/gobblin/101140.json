[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testBadUpdate() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n      Assert.fail(\"Get should have raised a 404 error\");\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n      Assert.fail(\"Get should have raised a 404 error\");\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":457,"groupId":"2582","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/01/d028567436c469107bb4a5215c1f0990069497.src","preCode":"  public void testBadUpdate() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n      Assert.fail(\"Get should have raised a 404 error\");\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n      Assert.fail(\"Get should have raised a 404 error\");\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n\n    FlowConfig flowConfig = new FlowConfig().setId(new FlowId().setFlowGroup(TEST_GROUP_NAME).setFlowName(TEST_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      _client.createFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.S_409_CONFLICT.getCode());\n      return;\n    }\n\n    Assert.fail(\"Get should have gotten a 409 error\");\n  }\n","date":"2017-07-31 15:51:25","endLine":179,"groupId":"4522","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateAgain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/9a/c7d37ec491204c90c8a0f82d60ed7631d4836e.src","preCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n\n    FlowConfig flowConfig = new FlowConfig().setId(new FlowId().setFlowGroup(TEST_GROUP_NAME).setFlowName(TEST_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      _client.createFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.S_409_CONFLICT.getCode());\n      return;\n    }\n\n    Assert.fail(\"Get should have gotten a 409 error\");\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-11-08 06:04:53","codes":[{"authorDate":"2017-11-08 06:04:53","commitOrder":2,"curCode":"  public void testBadUpdate() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Bad update should pass without complaining that the spec does not exists.\");\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Bad update should pass without complaining that the spec does not exists.\");\n    }\n  }\n","date":"2017-11-08 06:04:53","endLine":452,"groupId":"2582","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ad/4180aa44aa25822bd497bd77eac3b5b2bb5c20.src","preCode":"  public void testBadUpdate() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n      Assert.fail(\"Get should have raised a 404 error\");\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n      Assert.fail(\"Get should have raised a 404 error\");\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"M"},{"authorDate":"2017-11-08 06:04:53","commitOrder":2,"curCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n\n    FlowConfig flowConfig = new FlowConfig().setId(new FlowId().setFlowGroup(TEST_GROUP_NAME).setFlowName(TEST_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      _client.createFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n  }\n","date":"2017-11-08 06:04:53","endLine":176,"groupId":"4522","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateAgain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a3/737626217a8866e5f575eba97599c449864acd.src","preCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n\n    FlowConfig flowConfig = new FlowConfig().setId(new FlowId().setFlowGroup(TEST_GROUP_NAME).setFlowName(TEST_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      _client.createFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.S_409_CONFLICT.getCode());\n      return;\n    }\n\n    Assert.fail(\"Get should have gotten a 409 error\");\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"c385f1dddb0124f0ff2545d9a591f3b055f76080","commitMessage":"@@@[GOBBLIN-304] Change default version of flow specs to null.\n\nCloses #2159 from arjun4084346/removeSpecVersion\n","date":"2017-11-08 06:04:53","modifiedFileCount":"14","status":"M","submitter":"Arjun"},{"authorTime":"2017-11-08 06:04:53","codes":[{"authorDate":"2018-05-17 02:40:22","commitOrder":3,"curCode":"  public void testBadUpdate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testBadUpdate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Bad update should pass without complaining that the spec does not exists.\");\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Bad update should pass without complaining that the spec does not exists.\");\n    }\n\n    logger.info(\"+++++++++++++++++++ testBadUpdate END\");\n  }\n","date":"2018-05-17 02:40:22","endLine":493,"groupId":"2582","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2b/4332fb6b1dc8ada72e6d2bf685a064b33be3b3.src","preCode":"  public void testBadUpdate() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Bad update should pass without complaining that the spec does not exists.\");\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Bad update should pass without complaining that the spec does not exists.\");\n    }\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":469,"status":"M"},{"authorDate":"2017-11-08 06:04:53","commitOrder":3,"curCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n\n    FlowConfig flowConfig = new FlowConfig().setId(new FlowId().setFlowGroup(TEST_GROUP_NAME).setFlowName(TEST_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      _client.createFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n  }\n","date":"2017-11-08 06:04:53","endLine":176,"groupId":"4522","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateAgain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a3/737626217a8866e5f575eba97599c449864acd.src","preCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n\n    FlowConfig flowConfig = new FlowConfig().setId(new FlowId().setFlowGroup(TEST_GROUP_NAME).setFlowName(TEST_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      _client.createFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"N"}],"commitId":"01302a6db2c468507c0adea5daa69de997aaf14b","commitMessage":"@@@[GOBBLIN-458] Refactor flowConfig resource handler\n\nCloses #2329 from yukuai518/delete\n","date":"2018-05-17 02:40:22","modifiedFileCount":"9","status":"M","submitter":"Kuai Yu"},{"authorTime":"2019-12-10 06:26:30","codes":[{"authorDate":"2018-05-17 02:40:22","commitOrder":4,"curCode":"  public void testBadUpdate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testBadUpdate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Bad update should pass without complaining that the spec does not exists.\");\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Bad update should pass without complaining that the spec does not exists.\");\n    }\n\n    logger.info(\"+++++++++++++++++++ testBadUpdate END\");\n  }\n","date":"2018-05-17 02:40:22","endLine":493,"groupId":"2582","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2b/4332fb6b1dc8ada72e6d2bf685a064b33be3b3.src","preCode":"  public void testBadUpdate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testBadUpdate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Bad update should pass without complaining that the spec does not exists.\");\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Bad update should pass without complaining that the spec does not exists.\");\n    }\n\n    logger.info(\"+++++++++++++++++++ testBadUpdate END\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":469,"status":"N"},{"authorDate":"2019-12-10 06:26:30","commitOrder":4,"curCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n\n    FlowConfig flowConfig = new FlowConfig().setId(new FlowId().setFlowGroup(TEST_GROUP_NAME).setFlowName(TEST_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    RestLiResponseException exception = null;\n    try {\n      _client.createFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      exception = e;\n    }\n\n    Assert.assertNotNull(exception);\n    Assert.assertEquals(exception.getStatus(), HttpStatus.S_409_CONFLICT.getCode());\n  }\n","date":"2019-12-10 06:26:30","endLine":186,"groupId":"4522","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateAgain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b2/0d94407634ba568f6e416a945ba78634f9534e.src","preCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n\n    FlowConfig flowConfig = new FlowConfig().setId(new FlowId().setFlowGroup(TEST_GROUP_NAME).setFlowName(TEST_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      _client.createFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"0a1debc30734ec57d2be7351270894756a6c18af","commitMessage":"@@@[GOBBLIN-990] Don't allow creation of flow config that already exists\n\nCloses #2836 from jack-moseley/create-conflict\n","date":"2019-12-10 06:26:30","modifiedFileCount":"6","status":"M","submitter":"Jack Moseley"},{"authorTime":"2019-12-10 06:26:30","codes":[{"authorDate":"2020-02-29 03:22:08","commitOrder":5,"curCode":"  public void testBadUpdate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testBadUpdate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    logger.info(\"+++++++++++++++++++ testBadUpdate END\");\n  }\n","date":"2020-02-29 03:22:08","endLine":496,"groupId":"2582","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/48/bac9f7898153d21b52bdee390f4d7871ce4977.src","preCode":"  public void testBadUpdate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testBadUpdate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Bad update should pass without complaining that the spec does not exists.\");\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Bad update should pass without complaining that the spec does not exists.\");\n    }\n\n    logger.info(\"+++++++++++++++++++ testBadUpdate END\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"M"},{"authorDate":"2019-12-10 06:26:30","commitOrder":5,"curCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n\n    FlowConfig flowConfig = new FlowConfig().setId(new FlowId().setFlowGroup(TEST_GROUP_NAME).setFlowName(TEST_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    RestLiResponseException exception = null;\n    try {\n      _client.createFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      exception = e;\n    }\n\n    Assert.assertNotNull(exception);\n    Assert.assertEquals(exception.getStatus(), HttpStatus.S_409_CONFLICT.getCode());\n  }\n","date":"2019-12-10 06:26:30","endLine":186,"groupId":"4522","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateAgain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b2/0d94407634ba568f6e416a945ba78634f9534e.src","preCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n\n    FlowConfig flowConfig = new FlowConfig().setId(new FlowId().setFlowGroup(TEST_GROUP_NAME).setFlowName(TEST_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    RestLiResponseException exception = null;\n    try {\n      _client.createFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      exception = e;\n    }\n\n    Assert.assertNotNull(exception);\n    Assert.assertEquals(exception.getStatus(), HttpStatus.S_409_CONFLICT.getCode());\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"N"}],"commitId":"09f5043fbd3a90aa8f3b06a4b7d3bb2f94501db4","commitMessage":"@@@[GOBBLIN-1050] Verify requester when updating/deleting FlowConfig\n\nCloses #2890 from jack-moseley/check-requester\n","date":"2020-02-29 03:22:08","modifiedFileCount":"6","status":"M","submitter":"Jack Moseley"},{"authorTime":"2020-04-07 03:52:55","codes":[{"authorDate":"2020-02-29 03:22:08","commitOrder":6,"curCode":"  public void testBadUpdate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testBadUpdate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    logger.info(\"+++++++++++++++++++ testBadUpdate END\");\n  }\n","date":"2020-02-29 03:22:08","endLine":496,"groupId":"101140","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/48/bac9f7898153d21b52bdee390f4d7871ce4977.src","preCode":"  public void testBadUpdate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testBadUpdate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    logger.info(\"+++++++++++++++++++ testBadUpdate END\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"N"},{"authorDate":"2020-04-07 03:52:55","commitOrder":6,"curCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n\n    FlowConfig flowConfig = new FlowConfig().setId(new FlowId().setFlowGroup(TEST_GROUP_NAME).setFlowName(TEST_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      _client.createFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.fail(\"Create Again should pass without complaining that the spec already exists.\");\n    }\n  }\n","date":"2020-04-07 03:52:55","endLine":182,"groupId":"101140","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateAgain","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f8/d8ea8c1adc353919e22606ad8f8da7a75e874f.src","preCode":"  public void testCreateAgain() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1\");\n\n    FlowConfig flowConfig = new FlowConfig().setId(new FlowId().setFlowGroup(TEST_GROUP_NAME).setFlowName(TEST_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    RestLiResponseException exception = null;\n    try {\n      _client.createFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      exception = e;\n    }\n\n    Assert.assertNotNull(exception);\n    Assert.assertEquals(exception.getStatus(), HttpStatus.S_409_CONFLICT.getCode());\n  }\n","realPath":"gobblin-restli/gobblin-flow-config-service/gobblin-flow-config-service-client/src/test/java/org/apache/gobblin/service/FlowConfigTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"4b8df7af59efb2ac5096bd3db6b0cdf5c3b83d1a","commitMessage":"@@@[GOBBLIN-1109] partial rollback of PR#2836\n\nDear Gobblin maintainers. \n\nPlease accept this PR. I understand that it will\nnot be reviewed until I have checked off all the\nsteps below! jack-moseley please review\n\n\n JIRA\n- [x] My PR addresses the following [Gobblin JIRA]\n(https://issues.apache.org/jira/browse/GOBBLIN/)\nissues and references them in the PR title. For\nexample.  \"[GOBBLIN-XXX] My Gobblin PR\"\n    -\nhttps://issues.apache.org/jira/browse/GOBBLIN-1109\n\n\n Description\n- [x] Here are some details about my PR.  including\nscreenshots (if applicable):\npartial rollback of PR#2836.  because we want to\nkeep the behavior of flowConfigV1 API unchanged\n\n\n Tests\n- [x] My PR adds the following unit tests __OR__\ndoes not need testing for this extremely good\nreason:\nNA\n\n\n Commits\n- [x] My commits all reference JIRA issues in\ntheir subject lines.  and I have squashed multiple\ncommits if they address the same issue. In\naddition.  my commits follow the guidelines from\n\"[How to write a good git commit\nmessage](http://chris.beams.io/posts/git-\ncommit/)\":\n    1. Subject is separated from body by a blank line\n    2. Subject is limited to 50 characters\n    3. Subject does not end with a period\n    4. Subject uses the imperative mood (\"add\".  not\n\"adding\")\n    5. Body wraps at 72 characters\n    6. Body explains \"what\" and \"why\".  not \"how\"\n\nCloses #2949 from arjun4084346/rollbackV1Changes\n","date":"2020-04-07 03:52:55","modifiedFileCount":"4","status":"M","submitter":"Arjun"}]
