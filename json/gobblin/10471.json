[{"authorTime":"2019-05-07 06:53:00","codes":[{"authorDate":"2019-05-07 06:53:00","commitOrder":1,"curCode":"  AVRO() {\n    @Override\n    public void buildMetricsReporter(String brokers, String topic, Properties properties)\n        throws IOException {\n\n      KafkaAvroReporter.Builder<?> builder = KafkaAvroReporter.BuilderFactory.newBuilder();\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n      }\n      builder.build(brokers, topic, properties);\n    }\n\n    @Override\n    public ScheduledReporter buildEventsReporter(String brokers, String topic, MetricContext context,\n        Properties properties)\n        throws IOException {\n\n      KafkaAvroEventReporter.Builder<?> builder = KafkaAvroEventReporter.Factory.forContext(context);\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n      }\n      String pusherClassName = properties.containsKey(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) ? properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) : properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY, PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n      builder.withPusherClassName(pusherClassName);\n\n      Config allConfig = ConfigUtils.propertiesToConfig(properties);\n      \r\n      \r\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(allConfig, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(allConfig, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      builder.withConfig(kafkaConfig);\n\n      return builder.build(brokers, topic);\n    }\n  }, AVRO_KEY_VALUE() {\n","date":"2019-05-07 06:53:00","endLine":85,"groupId":"4951","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"AVRO","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/eb/409ff4bce0cf0753e6111b5f2c794b6473f42f.src","preCode":"  AVRO() {\n    @Override\n    public void buildMetricsReporter(String brokers, String topic, Properties properties)\n        throws IOException {\n\n      KafkaAvroReporter.Builder<?> builder = KafkaAvroReporter.BuilderFactory.newBuilder();\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n      }\n      builder.build(brokers, topic, properties);\n    }\n\n    @Override\n    public ScheduledReporter buildEventsReporter(String brokers, String topic, MetricContext context,\n        Properties properties)\n        throws IOException {\n\n      KafkaAvroEventReporter.Builder<?> builder = KafkaAvroEventReporter.Factory.forContext(context);\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n      }\n      String pusherClassName = properties.containsKey(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) ? properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) : properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY, PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n      builder.withPusherClassName(pusherClassName);\n\n      Config allConfig = ConfigUtils.propertiesToConfig(properties);\n      \r\n      \r\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(allConfig, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(allConfig, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      builder.withConfig(kafkaConfig);\n\n      return builder.build(brokers, topic);\n    }\n  }, AVRO_KEY_VALUE() {\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/metrics/KafkaReportingFormats.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2019-05-07 06:53:00","commitOrder":1,"curCode":"  }, AVRO_KEY_VALUE() {\n    @Override\n    public void buildMetricsReporter(String brokers, String topic, Properties properties)\n        throws IOException {\n\n      throw new IOException(\"Unsupported format for Metric reporting \" + this.name());\n    }\n\n    @Override\n    public ScheduledReporter buildEventsReporter(String brokers, String topic, MetricContext context,\n        Properties properties)\n        throws IOException {\n\n      KafkaAvroEventKeyValueReporter.Builder<?> builder = KafkaAvroEventKeyValueReporter.Factory.forContext(context);\n      if (properties.containsKey(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKAPUSHERKEYS)) {\n        List<String> keys = Splitter.on(\",\").omitEmptyStrings().trimResults()\n            .splitToList(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKAPUSHERKEYS));\n        builder.withKeys(keys);\n      }\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n      }\n      String pusherClassName = properties.containsKey(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) ? properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) : properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY, PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n      builder.withPusherClassName(pusherClassName);\n\n      Config allConfig = ConfigUtils.propertiesToConfig(properties);\n      \r\n      \r\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(allConfig, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(allConfig, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      builder.withConfig(kafkaConfig);\n\n      return builder.build(brokers, topic);\n    }\n  }, JSON() {\n","date":"2019-05-07 06:53:00","endLine":123,"groupId":"4952","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"AVRO_KEY_VALUE","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/eb/409ff4bce0cf0753e6111b5f2c794b6473f42f.src","preCode":"  }, AVRO_KEY_VALUE() {\n    @Override\n    public void buildMetricsReporter(String brokers, String topic, Properties properties)\n        throws IOException {\n\n      throw new IOException(\"Unsupported format for Metric reporting \" + this.name());\n    }\n\n    @Override\n    public ScheduledReporter buildEventsReporter(String brokers, String topic, MetricContext context,\n        Properties properties)\n        throws IOException {\n\n      KafkaAvroEventKeyValueReporter.Builder<?> builder = KafkaAvroEventKeyValueReporter.Factory.forContext(context);\n      if (properties.containsKey(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKAPUSHERKEYS)) {\n        List<String> keys = Splitter.on(\",\").omitEmptyStrings().trimResults()\n            .splitToList(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKAPUSHERKEYS));\n        builder.withKeys(keys);\n      }\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n      }\n      String pusherClassName = properties.containsKey(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) ? properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) : properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY, PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n      builder.withPusherClassName(pusherClassName);\n\n      Config allConfig = ConfigUtils.propertiesToConfig(properties);\n      \r\n      \r\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(allConfig, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(allConfig, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      builder.withConfig(kafkaConfig);\n\n      return builder.build(brokers, topic);\n    }\n  }, JSON() {\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/metrics/KafkaReportingFormats.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"}],"commitId":"856fbc103e9fd144f062fb0ecaeba1f35f2f205b","commitMessage":"@@@[GOBBLIN-758] Added new reporters to emit MetricReport and GobblinTrackingEvent without serializing them. Also added random key generator for reporters.\n\nCloses #2622 from vikrambohra/ETL-8675\n","date":"2019-05-07 06:53:00","modifiedFileCount":"8","status":"B","submitter":"vbohra"},{"authorTime":"2020-04-18 05:36:36","codes":[{"authorDate":"2020-04-18 05:36:36","commitOrder":2,"curCode":"  AVRO() {\n    @Override\n    public void buildMetricsReporter(String brokers, String topic, Properties properties)\n        throws IOException {\n\n      KafkaAvroReporter.Builder<?> builder = KafkaAvroReporter.BuilderFactory.newBuilder();\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n        String schemaId = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_METRICS_KAFKA_AVRO_SCHEMA_ID);\n        if (!Strings.isNullOrEmpty(schemaId)) {\n          builder.withSchemaId(schemaId);\n        }\n      }\n      builder.build(brokers, topic, properties);\n    }\n\n    @Override\n    public ScheduledReporter buildEventsReporter(String brokers, String topic, MetricContext context,\n        Properties properties)\n        throws IOException {\n\n      KafkaAvroEventReporter.Builder<?> builder = KafkaAvroEventReporter.Factory.forContext(context);\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n        String schemaId = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKA_AVRO_SCHEMA_ID);\n        if (!Strings.isNullOrEmpty(schemaId)) {\n          builder.withSchemaId(schemaId);\n        }\n      }\n      String pusherClassName = properties.containsKey(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) ? properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) : properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY, PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n      builder.withPusherClassName(pusherClassName);\n\n      Config allConfig = ConfigUtils.propertiesToConfig(properties);\n      \r\n      \r\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(allConfig, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(allConfig, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      builder.withConfig(kafkaConfig);\n\n      return builder.build(brokers, topic);\n    }\n  }, AVRO_KEY_VALUE() {\n","date":"2020-04-18 05:36:36","endLine":94,"groupId":"4951","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"AVRO","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/09/4bb83dea23d32c8f4f3c7cd99cc798f9d4af00.src","preCode":"  AVRO() {\n    @Override\n    public void buildMetricsReporter(String brokers, String topic, Properties properties)\n        throws IOException {\n\n      KafkaAvroReporter.Builder<?> builder = KafkaAvroReporter.BuilderFactory.newBuilder();\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n      }\n      builder.build(brokers, topic, properties);\n    }\n\n    @Override\n    public ScheduledReporter buildEventsReporter(String brokers, String topic, MetricContext context,\n        Properties properties)\n        throws IOException {\n\n      KafkaAvroEventReporter.Builder<?> builder = KafkaAvroEventReporter.Factory.forContext(context);\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n      }\n      String pusherClassName = properties.containsKey(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) ? properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) : properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY, PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n      builder.withPusherClassName(pusherClassName);\n\n      Config allConfig = ConfigUtils.propertiesToConfig(properties);\n      \r\n      \r\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(allConfig, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(allConfig, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      builder.withConfig(kafkaConfig);\n\n      return builder.build(brokers, topic);\n    }\n  }, AVRO_KEY_VALUE() {\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/metrics/KafkaReportingFormats.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-04-18 05:36:36","commitOrder":2,"curCode":"  }, AVRO_KEY_VALUE() {\n    @Override\n    public void buildMetricsReporter(String brokers, String topic, Properties properties)\n        throws IOException {\n\n      throw new IOException(\"Unsupported format for Metric reporting \" + this.name());\n    }\n\n    @Override\n    public ScheduledReporter buildEventsReporter(String brokers, String topic, MetricContext context,\n        Properties properties)\n        throws IOException {\n\n      KafkaAvroEventKeyValueReporter.Builder<?> builder = KafkaAvroEventKeyValueReporter.Factory.forContext(context);\n      if (properties.containsKey(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKAPUSHERKEYS)) {\n        List<String> keys = Splitter.on(\",\").omitEmptyStrings().trimResults()\n            .splitToList(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKAPUSHERKEYS));\n        builder.withKeys(keys);\n      }\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n        String schemaId = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKA_AVRO_SCHEMA_ID);\n        if (!Strings.isNullOrEmpty(schemaId)) {\n          builder.withSchemaId(schemaId);\n        }\n      }\n      String pusherClassName = properties.containsKey(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) ? properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) : properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY, PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n      builder.withPusherClassName(pusherClassName);\n\n      Config allConfig = ConfigUtils.propertiesToConfig(properties);\n      \r\n      \r\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(allConfig, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(allConfig, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      builder.withConfig(kafkaConfig);\n\n      return builder.build(brokers, topic);\n    }\n  }, JSON() {\n","date":"2020-04-18 05:36:36","endLine":136,"groupId":"4952","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"AVRO_KEY_VALUE","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/09/4bb83dea23d32c8f4f3c7cd99cc798f9d4af00.src","preCode":"  }, AVRO_KEY_VALUE() {\n    @Override\n    public void buildMetricsReporter(String brokers, String topic, Properties properties)\n        throws IOException {\n\n      throw new IOException(\"Unsupported format for Metric reporting \" + this.name());\n    }\n\n    @Override\n    public ScheduledReporter buildEventsReporter(String brokers, String topic, MetricContext context,\n        Properties properties)\n        throws IOException {\n\n      KafkaAvroEventKeyValueReporter.Builder<?> builder = KafkaAvroEventKeyValueReporter.Factory.forContext(context);\n      if (properties.containsKey(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKAPUSHERKEYS)) {\n        List<String> keys = Splitter.on(\",\").omitEmptyStrings().trimResults()\n            .splitToList(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKAPUSHERKEYS));\n        builder.withKeys(keys);\n      }\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n      }\n      String pusherClassName = properties.containsKey(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) ? properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) : properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY, PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n      builder.withPusherClassName(pusherClassName);\n\n      Config allConfig = ConfigUtils.propertiesToConfig(properties);\n      \r\n      \r\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(allConfig, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(allConfig, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      builder.withConfig(kafkaConfig);\n\n      return builder.build(brokers, topic);\n    }\n  }, JSON() {\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/metrics/KafkaReportingFormats.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"4bedefc13b6ba36a4f0169bbae3aae18b1ceaa39","commitMessage":"@@@[GOBBLIN-1116] Avoid registering schema with schema registry during Me?\n\nCloses #2956 from sv2000/metricsReporterFailure\n","date":"2020-04-18 05:36:36","modifiedFileCount":"23","status":"M","submitter":"sv2000"},{"authorTime":"2021-04-17 05:23:25","codes":[{"authorDate":"2021-04-17 05:23:25","commitOrder":3,"curCode":"  AVRO() {\n    @Override\n    public void buildMetricsReporter(String brokers, String topic, Properties properties)\n        throws IOException {\n\n      KafkaAvroReporter.Builder<?> builder = KafkaAvroReporter.BuilderFactory.newBuilder();\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n        String schemaId = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_METRICS_KAFKA_AVRO_SCHEMA_ID);\n        if (!Strings.isNullOrEmpty(schemaId)) {\n          builder.withSchemaId(schemaId);\n        }\n      }\n      builder.build(brokers, topic, properties);\n    }\n\n    @Override\n    public ScheduledReporter buildEventsReporter(String brokers, String topic, MetricContext context,\n        Properties properties)\n        throws IOException {\n\n      KafkaAvroEventReporter.Builder<?> builder = KafkaAvroEventReporter.Factory.forContext(context);\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n        String schemaId = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKA_AVRO_SCHEMA_ID);\n        if (!Strings.isNullOrEmpty(schemaId)) {\n          builder.withSchemaId(schemaId);\n        }\n      }\n      String pusherClassName = properties.containsKey(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) ? properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) : properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY, PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n      builder.withPusherClassName(pusherClassName);\n\n      Config allConfig = ConfigUtils.propertiesToConfig(properties);\n      builder.withConfig(allConfig);\n      \r\n      \r\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(allConfig, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(allConfig, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      builder.withKafkaConfig(kafkaConfig);\n\n      return builder.build(brokers, topic);\n    }\n  }, AVRO_KEY_VALUE() {\n","date":"2021-04-17 05:23:25","endLine":95,"groupId":"10471","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"AVRO","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/21/86911ec44d09516586d9b0be0dada48d6580a0.src","preCode":"  AVRO() {\n    @Override\n    public void buildMetricsReporter(String brokers, String topic, Properties properties)\n        throws IOException {\n\n      KafkaAvroReporter.Builder<?> builder = KafkaAvroReporter.BuilderFactory.newBuilder();\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n        String schemaId = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_METRICS_KAFKA_AVRO_SCHEMA_ID);\n        if (!Strings.isNullOrEmpty(schemaId)) {\n          builder.withSchemaId(schemaId);\n        }\n      }\n      builder.build(brokers, topic, properties);\n    }\n\n    @Override\n    public ScheduledReporter buildEventsReporter(String brokers, String topic, MetricContext context,\n        Properties properties)\n        throws IOException {\n\n      KafkaAvroEventReporter.Builder<?> builder = KafkaAvroEventReporter.Factory.forContext(context);\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n        String schemaId = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKA_AVRO_SCHEMA_ID);\n        if (!Strings.isNullOrEmpty(schemaId)) {\n          builder.withSchemaId(schemaId);\n        }\n      }\n      String pusherClassName = properties.containsKey(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) ? properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) : properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY, PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n      builder.withPusherClassName(pusherClassName);\n\n      Config allConfig = ConfigUtils.propertiesToConfig(properties);\n      \r\n      \r\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(allConfig, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(allConfig, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      builder.withConfig(kafkaConfig);\n\n      return builder.build(brokers, topic);\n    }\n  }, AVRO_KEY_VALUE() {\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/metrics/KafkaReportingFormats.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2021-04-17 05:23:25","commitOrder":3,"curCode":"  }, AVRO_KEY_VALUE() {\n    @Override\n    public void buildMetricsReporter(String brokers, String topic, Properties properties)\n        throws IOException {\n\n      throw new IOException(\"Unsupported format for Metric reporting \" + this.name());\n    }\n\n    @Override\n    public ScheduledReporter buildEventsReporter(String brokers, String topic, MetricContext context,\n        Properties properties)\n        throws IOException {\n\n      KafkaAvroEventKeyValueReporter.Builder<?> builder = KafkaAvroEventKeyValueReporter.Factory.forContext(context);\n      if (properties.containsKey(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKAPUSHERKEYS)) {\n        List<String> keys = Splitter.on(\",\").omitEmptyStrings().trimResults()\n            .splitToList(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKAPUSHERKEYS));\n        builder.withKeys(keys);\n      }\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n        String schemaId = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKA_AVRO_SCHEMA_ID);\n        if (!Strings.isNullOrEmpty(schemaId)) {\n          builder.withSchemaId(schemaId);\n        }\n      }\n      String pusherClassName = properties.containsKey(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) ? properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) : properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY, PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n      builder.withPusherClassName(pusherClassName);\n\n      Config allConfig = ConfigUtils.propertiesToConfig(properties);\n      builder.withConfig(allConfig);\n      \r\n      \r\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(allConfig, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(allConfig, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      builder.withKafkaConfig(kafkaConfig);\n\n      return builder.build(brokers, topic);\n    }\n  }, JSON() {\n","date":"2021-04-17 05:23:25","endLine":138,"groupId":"10471","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"AVRO_KEY_VALUE","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/21/86911ec44d09516586d9b0be0dada48d6580a0.src","preCode":"  }, AVRO_KEY_VALUE() {\n    @Override\n    public void buildMetricsReporter(String brokers, String topic, Properties properties)\n        throws IOException {\n\n      throw new IOException(\"Unsupported format for Metric reporting \" + this.name());\n    }\n\n    @Override\n    public ScheduledReporter buildEventsReporter(String brokers, String topic, MetricContext context,\n        Properties properties)\n        throws IOException {\n\n      KafkaAvroEventKeyValueReporter.Builder<?> builder = KafkaAvroEventKeyValueReporter.Factory.forContext(context);\n      if (properties.containsKey(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKAPUSHERKEYS)) {\n        List<String> keys = Splitter.on(\",\").omitEmptyStrings().trimResults()\n            .splitToList(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKAPUSHERKEYS));\n        builder.withKeys(keys);\n      }\n      if (Boolean.valueOf(properties.getProperty(ConfigurationKeys.METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY,\n          ConfigurationKeys.DEFAULT_METRICS_REPORTING_KAFKA_USE_SCHEMA_REGISTRY))) {\n        builder.withSchemaRegistry(new KafkaAvroSchemaRegistry(properties));\n        String schemaId = properties.getProperty(ConfigurationKeys.METRICS_REPORTING_EVENTS_KAFKA_AVRO_SCHEMA_ID);\n        if (!Strings.isNullOrEmpty(schemaId)) {\n          builder.withSchemaId(schemaId);\n        }\n      }\n      String pusherClassName = properties.containsKey(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) ? properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY_FOR_EVENTS) : properties\n          .getProperty(PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY, PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n      builder.withPusherClassName(pusherClassName);\n\n      Config allConfig = ConfigUtils.propertiesToConfig(properties);\n      \r\n      \r\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(allConfig, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(allConfig, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      builder.withConfig(kafkaConfig);\n\n      return builder.build(brokers, topic);\n    }\n  }, JSON() {\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/metrics/KafkaReportingFormats.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"522d31205cba743209437976946adf7bf0c4f1be","commitMessage":"@@@[GOBBLIN-1423] Add config to Event reporter to control queue capacity?\n\nCloses #3259 from vikrambohra/GOBBLIN-1423\n","date":"2021-04-17 05:23:25","modifiedFileCount":"5","status":"M","submitter":"vbohra"}]
