[{"authorTime":"2020-03-12 07:14:19","codes":[{"authorDate":"2020-03-12 07:14:19","commitOrder":1,"curCode":"  public void beforeSuite() throws Exception {\n    startServers();\n    _closer = Closer.create();\n    Properties producerProps = new Properties();\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, TOPIC);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + BOOTSTRAP_SERVERS_KEY, _kafkaBrokers);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + KafkaWriterConfigurationKeys.VALUE_SERIALIZER_CONFIG, \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    producerProps.setProperty(KafkaWriterConfigurationKeys.CLUSTER_ZOOKEEPER, this.getZkConnectString());\n    producerProps.setProperty(KafkaWriterConfigurationKeys.PARTITION_COUNT, String.valueOf(NUM_PARTITIONS));\n    dataWriter = _closer.register(new Kafka09DataWriter(producerProps));\n  }\n","date":"2020-03-12 07:14:19","endLine":73,"groupId":"8032","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"beforeSuite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f4/7bae4ef60edb0e111c402a1e967ce8585fb403.src","preCode":"  public void beforeSuite() throws Exception {\n    startServers();\n    _closer = Closer.create();\n    Properties producerProps = new Properties();\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, TOPIC);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + BOOTSTRAP_SERVERS_KEY, _kafkaBrokers);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + KafkaWriterConfigurationKeys.VALUE_SERIALIZER_CONFIG, \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    producerProps.setProperty(KafkaWriterConfigurationKeys.CLUSTER_ZOOKEEPER, this.getZkConnectString());\n    producerProps.setProperty(KafkaWriterConfigurationKeys.PARTITION_COUNT, String.valueOf(NUM_PARTITIONS));\n    dataWriter = _closer.register(new Kafka09DataWriter(producerProps));\n  }\n","realPath":"gobblin-modules/gobblin-kafka-09/src/test/java/org/apache/gobblin/runtime/KafkaJobMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2020-03-12 07:14:19","commitOrder":1,"curCode":"  public void beforeSuite() throws Exception {\n    startServers();\n    _closer = Closer.create();\n    Properties producerProps = new Properties();\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, TOPIC);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + BOOTSTRAP_SERVERS_KEY, _kafkaBrokers);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + KafkaWriterConfigurationKeys.VALUE_SERIALIZER_CONFIG, \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    producerProps.setProperty(KafkaWriterConfigurationKeys.CLUSTER_ZOOKEEPER, this.getZkConnectString());\n    producerProps.setProperty(KafkaWriterConfigurationKeys.PARTITION_COUNT, String.valueOf(NUM_PARTITIONS));\n    dataWriter = _closer.register(new Kafka09DataWriter(producerProps));\n\n    List<byte[]> records = createByteArrayMessages(NUM_MSGS);\n    WriteCallback mock = Mockito.mock(WriteCallback.class);\n    for(byte[] record : records) {\n      dataWriter.write(record, mock);\n    }\n    dataWriter.flush();\n  }\n","date":"2020-03-12 07:14:19","endLine":90,"groupId":"8032","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeSuite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/75/c667b3c2d51dd8ae507bd01addf0b799dc41f1.src","preCode":"  public void beforeSuite() throws Exception {\n    startServers();\n    _closer = Closer.create();\n    Properties producerProps = new Properties();\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, TOPIC);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + BOOTSTRAP_SERVERS_KEY, _kafkaBrokers);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + KafkaWriterConfigurationKeys.VALUE_SERIALIZER_CONFIG, \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    producerProps.setProperty(KafkaWriterConfigurationKeys.CLUSTER_ZOOKEEPER, this.getZkConnectString());\n    producerProps.setProperty(KafkaWriterConfigurationKeys.PARTITION_COUNT, String.valueOf(NUM_PARTITIONS));\n    dataWriter = _closer.register(new Kafka09DataWriter(producerProps));\n\n    List<byte[]> records = createByteArrayMessages(NUM_MSGS);\n    WriteCallback mock = Mockito.mock(WriteCallback.class);\n    for(byte[] record : records) {\n      dataWriter.write(record, mock);\n    }\n    dataWriter.flush();\n  }\n","realPath":"gobblin-modules/gobblin-kafka-09/src/test/java/org/apache/gobblin/runtime/HighLevelConsumerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"}],"commitId":"7a328f9a232a60973d27c50859e6b84e63df90f7","commitMessage":"@@@[GOBBLIN-1040] HighLevelConsumer re-design by removing references to ?\n\nCloses #2900 from vikrambohra/GOBBLIN-1040\n","date":"2020-03-12 07:14:19","modifiedFileCount":"16","status":"B","submitter":"vbohra"},{"authorTime":"2020-05-21 06:37:12","codes":[{"authorDate":"2020-03-12 07:14:19","commitOrder":2,"curCode":"  public void beforeSuite() throws Exception {\n    startServers();\n    _closer = Closer.create();\n    Properties producerProps = new Properties();\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, TOPIC);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + BOOTSTRAP_SERVERS_KEY, _kafkaBrokers);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + KafkaWriterConfigurationKeys.VALUE_SERIALIZER_CONFIG, \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    producerProps.setProperty(KafkaWriterConfigurationKeys.CLUSTER_ZOOKEEPER, this.getZkConnectString());\n    producerProps.setProperty(KafkaWriterConfigurationKeys.PARTITION_COUNT, String.valueOf(NUM_PARTITIONS));\n    dataWriter = _closer.register(new Kafka09DataWriter(producerProps));\n  }\n","date":"2020-03-12 07:14:19","endLine":73,"groupId":"8032","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"beforeSuite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f4/7bae4ef60edb0e111c402a1e967ce8585fb403.src","preCode":"  public void beforeSuite() throws Exception {\n    startServers();\n    _closer = Closer.create();\n    Properties producerProps = new Properties();\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, TOPIC);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + BOOTSTRAP_SERVERS_KEY, _kafkaBrokers);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + KafkaWriterConfigurationKeys.VALUE_SERIALIZER_CONFIG, \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    producerProps.setProperty(KafkaWriterConfigurationKeys.CLUSTER_ZOOKEEPER, this.getZkConnectString());\n    producerProps.setProperty(KafkaWriterConfigurationKeys.PARTITION_COUNT, String.valueOf(NUM_PARTITIONS));\n    dataWriter = _closer.register(new Kafka09DataWriter(producerProps));\n  }\n","realPath":"gobblin-modules/gobblin-kafka-09/src/test/java/org/apache/gobblin/runtime/KafkaJobMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-05-21 06:37:12","commitOrder":2,"curCode":"  public void beforeSuite() throws Exception {\n    startServers();\n    _closer = Closer.create();\n    Properties producerProps = new Properties();\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, TOPIC);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + BOOTSTRAP_SERVERS_KEY, _kafkaBrokers);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + KafkaWriterConfigurationKeys.VALUE_SERIALIZER_CONFIG, \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    producerProps.setProperty(KafkaWriterConfigurationKeys.CLUSTER_ZOOKEEPER, this.getZkConnectString());\n    producerProps.setProperty(KafkaWriterConfigurationKeys.PARTITION_COUNT, String.valueOf(NUM_PARTITIONS));\n    AsyncDataWriter<byte[]> dataWriter = _closer.register(new Kafka09DataWriter<byte[], byte[]>(producerProps));\n\n    List<byte[]> records = createByteArrayMessages();\n    WriteCallback mock = Mockito.mock(WriteCallback.class);\n    for(byte[] record : records) {\n      dataWriter.write(record, mock);\n    }\n    dataWriter.flush();\n  }\n","date":"2020-05-21 06:37:12","endLine":91,"groupId":"8032","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeSuite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c1/01d15738c11319256ae289bfab3ca8e10aee47.src","preCode":"  public void beforeSuite() throws Exception {\n    startServers();\n    _closer = Closer.create();\n    Properties producerProps = new Properties();\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, TOPIC);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + BOOTSTRAP_SERVERS_KEY, _kafkaBrokers);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + KafkaWriterConfigurationKeys.VALUE_SERIALIZER_CONFIG, \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    producerProps.setProperty(KafkaWriterConfigurationKeys.CLUSTER_ZOOKEEPER, this.getZkConnectString());\n    producerProps.setProperty(KafkaWriterConfigurationKeys.PARTITION_COUNT, String.valueOf(NUM_PARTITIONS));\n    dataWriter = _closer.register(new Kafka09DataWriter(producerProps));\n\n    List<byte[]> records = createByteArrayMessages(NUM_MSGS);\n    WriteCallback mock = Mockito.mock(WriteCallback.class);\n    for(byte[] record : records) {\n      dataWriter.write(record, mock);\n    }\n    dataWriter.flush();\n  }\n","realPath":"gobblin-modules/gobblin-kafka-09/src/test/java/org/apache/gobblin/runtime/HighLevelConsumerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"72373eebff6b669bd8e001966ffab4e6ded8ab7b","commitMessage":"@@@[GOBBLIN-1150] spec catalog table schema change\n\nCloses #2988 from arjun4084346/jsonConfig\n","date":"2020-05-21 06:37:12","modifiedFileCount":"10","status":"M","submitter":"Arjun"},{"authorTime":"2020-10-13 11:07:27","codes":[{"authorDate":"2020-03-12 07:14:19","commitOrder":3,"curCode":"  public void beforeSuite() throws Exception {\n    startServers();\n    _closer = Closer.create();\n    Properties producerProps = new Properties();\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, TOPIC);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + BOOTSTRAP_SERVERS_KEY, _kafkaBrokers);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + KafkaWriterConfigurationKeys.VALUE_SERIALIZER_CONFIG, \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    producerProps.setProperty(KafkaWriterConfigurationKeys.CLUSTER_ZOOKEEPER, this.getZkConnectString());\n    producerProps.setProperty(KafkaWriterConfigurationKeys.PARTITION_COUNT, String.valueOf(NUM_PARTITIONS));\n    dataWriter = _closer.register(new Kafka09DataWriter(producerProps));\n  }\n","date":"2020-03-12 07:14:19","endLine":73,"groupId":"10215","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"beforeSuite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f4/7bae4ef60edb0e111c402a1e967ce8585fb403.src","preCode":"  public void beforeSuite() throws Exception {\n    startServers();\n    _closer = Closer.create();\n    Properties producerProps = new Properties();\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, TOPIC);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + BOOTSTRAP_SERVERS_KEY, _kafkaBrokers);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + KafkaWriterConfigurationKeys.VALUE_SERIALIZER_CONFIG, \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    producerProps.setProperty(KafkaWriterConfigurationKeys.CLUSTER_ZOOKEEPER, this.getZkConnectString());\n    producerProps.setProperty(KafkaWriterConfigurationKeys.PARTITION_COUNT, String.valueOf(NUM_PARTITIONS));\n    dataWriter = _closer.register(new Kafka09DataWriter(producerProps));\n  }\n","realPath":"gobblin-modules/gobblin-kafka-09/src/test/java/org/apache/gobblin/runtime/KafkaJobMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"N"},{"authorDate":"2020-10-13 11:07:27","commitOrder":3,"curCode":"  public void beforeSuite()\n      throws Exception {\n    startServers();\n    _closer = Closer.create();\n    Properties producerProps = new Properties();\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, TOPIC);\n    producerProps\n        .setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + BOOTSTRAP_SERVERS_KEY, _kafkaBrokers);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX\n            + KafkaWriterConfigurationKeys.VALUE_SERIALIZER_CONFIG,\n        \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    producerProps.setProperty(KafkaWriterConfigurationKeys.CLUSTER_ZOOKEEPER, this.getZkConnectString());\n    producerProps.setProperty(KafkaWriterConfigurationKeys.PARTITION_COUNT, String.valueOf(NUM_PARTITIONS));\n    producerProps.setProperty(KafkaWriterConfigurationKeys.DELETE_TOPIC_IF_EXISTS, String.valueOf(true));\n    AsyncDataWriter<byte[]> dataWriter = _closer.register(new Kafka09DataWriter<byte[], byte[]>(producerProps));\n\n    List<byte[]> records = createByteArrayMessages();\n    WriteCallback mock = Mockito.mock(WriteCallback.class);\n    for (byte[] record : records) {\n      dataWriter.write(record, mock);\n    }\n    dataWriter.flush();\n  }\n","date":"2020-10-13 11:07:27","endLine":96,"groupId":"10215","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"beforeSuite","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/8a/28bf27019b90c67832a9cf145135206086466c.src","preCode":"  public void beforeSuite() throws Exception {\n    startServers();\n    _closer = Closer.create();\n    Properties producerProps = new Properties();\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, TOPIC);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + BOOTSTRAP_SERVERS_KEY, _kafkaBrokers);\n    producerProps.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX + KafkaWriterConfigurationKeys.VALUE_SERIALIZER_CONFIG, \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    producerProps.setProperty(KafkaWriterConfigurationKeys.CLUSTER_ZOOKEEPER, this.getZkConnectString());\n    producerProps.setProperty(KafkaWriterConfigurationKeys.PARTITION_COUNT, String.valueOf(NUM_PARTITIONS));\n    AsyncDataWriter<byte[]> dataWriter = _closer.register(new Kafka09DataWriter<byte[], byte[]>(producerProps));\n\n    List<byte[]> records = createByteArrayMessages();\n    WriteCallback mock = Mockito.mock(WriteCallback.class);\n    for(byte[] record : records) {\n      dataWriter.write(record, mock);\n    }\n    dataWriter.flush();\n  }\n","realPath":"gobblin-modules/gobblin-kafka-09/src/test/java/org/apache/gobblin/runtime/HighLevelConsumerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"0d30aaecee1e2eed5dfcfdbcbc8efba96d63ed7c","commitMessage":"@@@[GOBBLIN-1284] Fix flaky tests causing local build failures\n\nCloses #3123 from\nsv2000/rateControlledFileSystemTest\n","date":"2020-10-13 11:07:27","modifiedFileCount":"11","status":"M","submitter":"suvasude"}]
