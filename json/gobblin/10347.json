[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testSuccessfulWrites() {\n    MockHttpClient client = new MockHttpClient();\n    MockRequestBuilder requestBuilder = new MockRequestBuilder();\n    MockResponseHandler responseHandler = new MockResponseHandler();\n    MockAsyncHttpWriterBuilder builder = new MockAsyncHttpWriterBuilder(client, requestBuilder, responseHandler);\n    TestAsyncHttpWriter asyncHttpWriter = new TestAsyncHttpWriter(builder);\n\n    List<MockWriteCallback> callbacks = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      callbacks.add(new MockWriteCallback());\n    }\n    asyncHttpWriter.write(new Object(), callbacks.get(0));\n    asyncHttpWriter.write(new Object(), callbacks.get(1));\n    asyncHttpWriter.write(new Object(), callbacks.get(2));\n\n    try {\n      asyncHttpWriter.flush();\n    } catch (IOException e) {\n      Assert.fail(\"Flush failed\");\n    }\n\n    asyncHttpWriter.write(new Object(), callbacks.get(3));\n    try {\n      asyncHttpWriter.close();\n    } catch (IOException e) {\n      Assert.fail(\"Close failed\");\n    }\n\n    \r\n    for (MockWriteCallback callback : callbacks) {\n      Assert.assertTrue(callback.isSuccess);\n    }\n\n    Assert.assertTrue(client.isCloseCalled);\n  }\n","date":"2017-07-31 15:51:25","endLine":81,"groupId":"3646","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSuccessfulWrites","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/65/c95a0d8d30c002e27d890c345235f96e803d56.src","preCode":"  public void testSuccessfulWrites() {\n    MockHttpClient client = new MockHttpClient();\n    MockRequestBuilder requestBuilder = new MockRequestBuilder();\n    MockResponseHandler responseHandler = new MockResponseHandler();\n    MockAsyncHttpWriterBuilder builder = new MockAsyncHttpWriterBuilder(client, requestBuilder, responseHandler);\n    TestAsyncHttpWriter asyncHttpWriter = new TestAsyncHttpWriter(builder);\n\n    List<MockWriteCallback> callbacks = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      callbacks.add(new MockWriteCallback());\n    }\n    asyncHttpWriter.write(new Object(), callbacks.get(0));\n    asyncHttpWriter.write(new Object(), callbacks.get(1));\n    asyncHttpWriter.write(new Object(), callbacks.get(2));\n\n    try {\n      asyncHttpWriter.flush();\n    } catch (IOException e) {\n      Assert.fail(\"Flush failed\");\n    }\n\n    asyncHttpWriter.write(new Object(), callbacks.get(3));\n    try {\n      asyncHttpWriter.close();\n    } catch (IOException e) {\n      Assert.fail(\"Close failed\");\n    }\n\n    \r\n    for (MockWriteCallback callback : callbacks) {\n      Assert.assertTrue(callback.isSuccess);\n    }\n\n    Assert.assertTrue(client.isCloseCalled);\n  }\n","realPath":"gobblin-modules/gobblin-http/src/test/java/org/apache/gobblin/writer/AsyncHttpWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testSuccessfulWritesWithLimiter () {\n    MockThrottledHttpClient client = new MockThrottledHttpClient(createMockBroker());\n    MockRequestBuilder requestBuilder = new MockRequestBuilder();\n    MockResponseHandler responseHandler = new MockResponseHandler();\n    MockAsyncHttpWriterBuilder builder = new MockAsyncHttpWriterBuilder(client, requestBuilder, responseHandler);\n    TestAsyncHttpWriter asyncHttpWriter = new TestAsyncHttpWriter(builder);\n\n    List<MockWriteCallback> callbacks = new ArrayList<>();\n\n    for (int i = 0; i < 50; i++) {\n      MockWriteCallback callback = new MockWriteCallback();\n      callbacks.add(callback);\n      asyncHttpWriter.write(new Object(), callback);\n    }\n\n    try {\n      asyncHttpWriter.close();\n    } catch (IOException e) {\n      Assert.fail(\"Close failed\");\n    }\n\n    \r\n    for (MockWriteCallback callback : callbacks) {\n      Assert.assertTrue(callback.isSuccess);\n    }\n\n    Assert.assertTrue(client.getSendTimer().getCount() == 50);\n    Assert.assertTrue(client.isCloseCalled);\n  }\n","date":"2017-07-31 15:51:25","endLine":112,"groupId":"3647","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSuccessfulWritesWithLimiter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/65/c95a0d8d30c002e27d890c345235f96e803d56.src","preCode":"  public void testSuccessfulWritesWithLimiter () {\n    MockThrottledHttpClient client = new MockThrottledHttpClient(createMockBroker());\n    MockRequestBuilder requestBuilder = new MockRequestBuilder();\n    MockResponseHandler responseHandler = new MockResponseHandler();\n    MockAsyncHttpWriterBuilder builder = new MockAsyncHttpWriterBuilder(client, requestBuilder, responseHandler);\n    TestAsyncHttpWriter asyncHttpWriter = new TestAsyncHttpWriter(builder);\n\n    List<MockWriteCallback> callbacks = new ArrayList<>();\n\n    for (int i = 0; i < 50; i++) {\n      MockWriteCallback callback = new MockWriteCallback();\n      callbacks.add(callback);\n      asyncHttpWriter.write(new Object(), callback);\n    }\n\n    try {\n      asyncHttpWriter.close();\n    } catch (IOException e) {\n      Assert.fail(\"Close failed\");\n    }\n\n    \r\n    for (MockWriteCallback callback : callbacks) {\n      Assert.assertTrue(callback.isSuccess);\n    }\n\n    Assert.assertTrue(client.getSendTimer().getCount() == 50);\n    Assert.assertTrue(client.isCloseCalled);\n  }\n","realPath":"gobblin-modules/gobblin-http/src/test/java/org/apache/gobblin/writer/AsyncHttpWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2018-05-08 05:34:04","commitOrder":2,"curCode":"  public void testSuccessfulWrites() {\n    MockHttpClient client = new MockHttpClient();\n    MockRequestBuilder requestBuilder = new MockRequestBuilder();\n    MockResponseHandler responseHandler = new MockResponseHandler();\n    MockAsyncHttpWriterBuilder builder = new MockAsyncHttpWriterBuilder(client, requestBuilder, responseHandler);\n    TestAsyncHttpWriter asyncHttpWriter = new TestAsyncHttpWriter(builder);\n\n    List<MockWriteCallback> callbacks = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      callbacks.add(new MockWriteCallback());\n    }\n    asyncHttpWriter.write(new Object(), callbacks.get(0));\n    asyncHttpWriter.write(new Object(), callbacks.get(1));\n    asyncHttpWriter.write(new Object(), callbacks.get(2));\n\n    try {\n      asyncHttpWriter.flush();\n    } catch (IOException e) {\n      Assert.fail(\"Flush failed\");\n    }\n\n    asyncHttpWriter.write(new Object(), callbacks.get(3));\n    try {\n      asyncHttpWriter.close();\n    } catch (IOException e) {\n      Assert.fail(\"Close failed\");\n    }\n\n    \r\n    for (MockWriteCallback callback : callbacks) {\n      Assert.assertTrue(callback.isSuccess);\n    }\n\n    Assert.assertTrue(client.isCloseCalled);\n    Assert.assertTrue(responseHandler.recordsInLastRequest.size() == 1);\n  }\n","date":"2018-05-08 05:34:04","endLine":98,"groupId":"10347","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSuccessfulWrites","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/01/1c7f7ff08968a7235a4a84e5c7eeca39177f33.src","preCode":"  public void testSuccessfulWrites() {\n    MockHttpClient client = new MockHttpClient();\n    MockRequestBuilder requestBuilder = new MockRequestBuilder();\n    MockResponseHandler responseHandler = new MockResponseHandler();\n    MockAsyncHttpWriterBuilder builder = new MockAsyncHttpWriterBuilder(client, requestBuilder, responseHandler);\n    TestAsyncHttpWriter asyncHttpWriter = new TestAsyncHttpWriter(builder);\n\n    List<MockWriteCallback> callbacks = new ArrayList<>();\n    for (int i = 0; i < 4; i++) {\n      callbacks.add(new MockWriteCallback());\n    }\n    asyncHttpWriter.write(new Object(), callbacks.get(0));\n    asyncHttpWriter.write(new Object(), callbacks.get(1));\n    asyncHttpWriter.write(new Object(), callbacks.get(2));\n\n    try {\n      asyncHttpWriter.flush();\n    } catch (IOException e) {\n      Assert.fail(\"Flush failed\");\n    }\n\n    asyncHttpWriter.write(new Object(), callbacks.get(3));\n    try {\n      asyncHttpWriter.close();\n    } catch (IOException e) {\n      Assert.fail(\"Close failed\");\n    }\n\n    \r\n    for (MockWriteCallback callback : callbacks) {\n      Assert.assertTrue(callback.isSuccess);\n    }\n\n    Assert.assertTrue(client.isCloseCalled);\n  }\n","realPath":"gobblin-modules/gobblin-http/src/test/java/org/apache/gobblin/writer/AsyncHttpWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void testSuccessfulWritesWithLimiter () {\n    MockThrottledHttpClient client = new MockThrottledHttpClient(createMockBroker());\n    MockRequestBuilder requestBuilder = new MockRequestBuilder();\n    MockResponseHandler responseHandler = new MockResponseHandler();\n    MockAsyncHttpWriterBuilder builder = new MockAsyncHttpWriterBuilder(client, requestBuilder, responseHandler);\n    TestAsyncHttpWriter asyncHttpWriter = new TestAsyncHttpWriter(builder);\n\n    List<MockWriteCallback> callbacks = new ArrayList<>();\n\n    for (int i = 0; i < 50; i++) {\n      MockWriteCallback callback = new MockWriteCallback();\n      callbacks.add(callback);\n      asyncHttpWriter.write(new Object(), callback);\n    }\n\n    try {\n      asyncHttpWriter.close();\n    } catch (IOException e) {\n      Assert.fail(\"Close failed\");\n    }\n\n    \r\n    for (MockWriteCallback callback : callbacks) {\n      Assert.assertTrue(callback.isSuccess);\n    }\n\n    Assert.assertTrue(client.getSendTimer().getCount() == 50);\n    Assert.assertTrue(client.isCloseCalled);\n  }\n","date":"2017-07-31 15:51:25","endLine":112,"groupId":"10347","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSuccessfulWritesWithLimiter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/65/c95a0d8d30c002e27d890c345235f96e803d56.src","preCode":"  public void testSuccessfulWritesWithLimiter () {\n    MockThrottledHttpClient client = new MockThrottledHttpClient(createMockBroker());\n    MockRequestBuilder requestBuilder = new MockRequestBuilder();\n    MockResponseHandler responseHandler = new MockResponseHandler();\n    MockAsyncHttpWriterBuilder builder = new MockAsyncHttpWriterBuilder(client, requestBuilder, responseHandler);\n    TestAsyncHttpWriter asyncHttpWriter = new TestAsyncHttpWriter(builder);\n\n    List<MockWriteCallback> callbacks = new ArrayList<>();\n\n    for (int i = 0; i < 50; i++) {\n      MockWriteCallback callback = new MockWriteCallback();\n      callbacks.add(callback);\n      asyncHttpWriter.write(new Object(), callback);\n    }\n\n    try {\n      asyncHttpWriter.close();\n    } catch (IOException e) {\n      Assert.fail(\"Close failed\");\n    }\n\n    \r\n    for (MockWriteCallback callback : callbacks) {\n      Assert.assertTrue(callback.isSuccess);\n    }\n\n    Assert.assertTrue(client.getSendTimer().getCount() == 50);\n    Assert.assertTrue(client.isCloseCalled);\n  }\n","realPath":"gobblin-modules/gobblin-http/src/test/java/org/apache/gobblin/writer/AsyncHttpWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"N"}],"commitId":"ab4fc217d208d453d3db2eb6f22b4356a8ee94d9","commitMessage":"@@@[GOBBLIN-488] Make aware of records\n\nCloses #2357 from zxcware/async\n","date":"2018-05-08 05:34:04","modifiedFileCount":"2","status":"M","submitter":"zhchen"}]
