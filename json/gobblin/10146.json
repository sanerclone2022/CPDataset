[{"authorTime":"2020-03-10 00:42:14","codes":[{"authorDate":"2020-03-10 00:42:14","commitOrder":2,"curCode":"  public void testMinContainers() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n    WorkflowConfig mockWorkflowConfig = mock(WorkflowConfig.class);\n    JobDag mockJobDag = mock(JobDag.class);\n\n    Mockito.when(mockJobDag.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\"));\n    Mockito.when(mockWorkflowConfig.getJobDag()).thenReturn(mockJobDag);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig));\n\n    WorkflowContext mockWorkflowContext = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext);\n\n    JobContext mockJobContext = mock(JobContext.class);\n    Mockito.when(mockJobContext.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext.getAssignedParticipant(2)).thenReturn(\"GobblinYarnTaskRunner-1\");\n\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext);\n\n    HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);\n    Mockito.when(helixDataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(\"cluster\"));\n    Mockito.when(helixDataAccessor.getChildValuesMap(Mockito.any()))\n        .thenReturn(ImmutableMap.of(\"GobblinYarnTaskRunner-1\", new HelixProperty(\"\")));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService,\n            1, 5, 10, noopQueue, helixDataAccessor);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1))\n        .requestTargetNumberOfContainers(5, ImmutableSet.of(\"GobblinYarnTaskRunner-1\"));\n  }\n","date":"2020-03-10 00:42:14","endLine":369,"groupId":"6969","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMinContainers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ba/6c1db378e39307c57cb50478e960ae26542f0a.src","preCode":"  public void testMinContainers() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n    WorkflowConfig mockWorkflowConfig = mock(WorkflowConfig.class);\n    JobDag mockJobDag = mock(JobDag.class);\n\n    Mockito.when(mockJobDag.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\"));\n    Mockito.when(mockWorkflowConfig.getJobDag()).thenReturn(mockJobDag);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig));\n\n    WorkflowContext mockWorkflowContext = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext);\n\n    JobContext mockJobContext = mock(JobContext.class);\n    Mockito.when(mockJobContext.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext.getAssignedParticipant(2)).thenReturn(\"GobblinYarnTaskRunner-1\");\n\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext);\n\n    HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);\n    Mockito.when(helixDataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(\"cluster\"));\n    Mockito.when(helixDataAccessor.getChildValuesMap(Mockito.any()))\n        .thenReturn(ImmutableMap.of(\"GobblinYarnTaskRunner-1\", new HelixProperty(\"\")));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService,\n            1, 5, 10, noopQueue, helixDataAccessor);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1))\n        .requestTargetNumberOfContainers(5, ImmutableSet.of(\"GobblinYarnTaskRunner-1\"));\n  }\n","realPath":"gobblin-yarn/src/test/java/org/apache/gobblin/yarn/YarnAutoScalingManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"MB"},{"authorDate":"2020-03-10 00:42:14","commitOrder":2,"curCode":"  public void testInstanceIdleBeyondTolerance() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n    WorkflowConfig mockWorkflowConfig = mock(WorkflowConfig.class);\n    JobDag mockJobDag = mock(JobDag.class);\n\n    Mockito.when(mockJobDag.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\"));\n    Mockito.when(mockWorkflowConfig.getJobDag()).thenReturn(mockJobDag);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig));\n\n    WorkflowContext mockWorkflowContext = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext);\n\n    \r\n    JobContext mockJobContext = mock(JobContext.class);\n    Mockito.when(mockJobContext.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext.getAssignedParticipant(1)).thenReturn(\"GobblinYarnTaskRunner-2\");\n    Mockito.when(mockJobContext.getAssignedParticipant(2)).thenReturn(\"GobblinYarnTaskRunner-2\");\n\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext);\n\n    HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);\n    Mockito.when(helixDataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(\"cluster\"));\n    Mockito.when(helixDataAccessor.getChildValuesMap(Mockito.any()))\n        .thenReturn(ImmutableMap.of(\"GobblinYarnTaskRunner-1\", new HelixProperty(\"\"),\n            \"GobblinYarnTaskRunner-2\", new HelixProperty(\"\")));\n\n    TestYarnAutoScalingRunnable runnable = new TestYarnAutoScalingRunnable(mockTaskDriver, mockYarnService,\n            1, 1, 10, helixDataAccessor);\n\n    runnable.run();\n\n    \r\n    \r\n    Mockito.verify(mockYarnService, times(1)).\n        requestTargetNumberOfContainers(2, ImmutableSet.of(\"GobblinYarnTaskRunner-1\", \"GobblinYarnTaskRunner-2\"));\n\n    \r\n    Mockito.reset(mockYarnService);\n    runnable.setAlwaysTagUnused(true);\n    runnable.run();\n\n    Mockito.verify(mockYarnService, times(1)).\n        requestTargetNumberOfContainers(2, ImmutableSet.of(\"GobblinYarnTaskRunner-2\"));\n  }\n","date":"2020-03-10 00:42:14","endLine":537,"groupId":"6969","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInstanceIdleBeyondTolerance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ba/6c1db378e39307c57cb50478e960ae26542f0a.src","preCode":"  public void testInstanceIdleBeyondTolerance() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n    WorkflowConfig mockWorkflowConfig = mock(WorkflowConfig.class);\n    JobDag mockJobDag = mock(JobDag.class);\n\n    Mockito.when(mockJobDag.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\"));\n    Mockito.when(mockWorkflowConfig.getJobDag()).thenReturn(mockJobDag);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig));\n\n    WorkflowContext mockWorkflowContext = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext);\n\n    \r\n    JobContext mockJobContext = mock(JobContext.class);\n    Mockito.when(mockJobContext.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext.getAssignedParticipant(1)).thenReturn(\"GobblinYarnTaskRunner-2\");\n    Mockito.when(mockJobContext.getAssignedParticipant(2)).thenReturn(\"GobblinYarnTaskRunner-2\");\n\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext);\n\n    HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);\n    Mockito.when(helixDataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(\"cluster\"));\n    Mockito.when(helixDataAccessor.getChildValuesMap(Mockito.any()))\n        .thenReturn(ImmutableMap.of(\"GobblinYarnTaskRunner-1\", new HelixProperty(\"\"),\n            \"GobblinYarnTaskRunner-2\", new HelixProperty(\"\")));\n\n    TestYarnAutoScalingRunnable runnable = new TestYarnAutoScalingRunnable(mockTaskDriver, mockYarnService,\n            1, 1, 10, helixDataAccessor);\n\n    runnable.run();\n\n    \r\n    \r\n    Mockito.verify(mockYarnService, times(1)).\n        requestTargetNumberOfContainers(2, ImmutableSet.of(\"GobblinYarnTaskRunner-1\", \"GobblinYarnTaskRunner-2\"));\n\n    \r\n    Mockito.reset(mockYarnService);\n    runnable.setAlwaysTagUnused(true);\n    runnable.run();\n\n    Mockito.verify(mockYarnService, times(1)).\n        requestTargetNumberOfContainers(2, ImmutableSet.of(\"GobblinYarnTaskRunner-2\"));\n  }\n","realPath":"gobblin-yarn/src/test/java/org/apache/gobblin/yarn/YarnAutoScalingManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"B"}],"commitId":"f3d75e392c554771e3c098cafb648ec55fa40ba7","commitMessage":"@@@[GOBBLIN-1072] Being more conservative on releasing containers\n\nAdd sliding window to protect AutoScaling from\nfluctuation of number of active Helix Partitions\n\nLess conservative on tagging an instance as unused\n\nAdd a unit test\n\nAddress comments\n\nCloses #2912 from\nautumnust/conservativeReleaseYarnContainers\n","date":"2020-03-10 00:42:14","modifiedFileCount":"5","status":"M","submitter":"autumnust"},{"authorTime":"2020-03-10 00:42:14","codes":[{"authorDate":"2020-06-03 06:46:24","commitOrder":3,"curCode":"  public void testMinContainers() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n    WorkflowConfig mockWorkflowConfig = mock(WorkflowConfig.class);\n    JobDag mockJobDag = mock(JobDag.class);\n\n    Mockito.when(mockJobDag.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\"));\n    Mockito.when(mockWorkflowConfig.getJobDag()).thenReturn(mockJobDag);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig));\n\n    WorkflowContext mockWorkflowContext = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext);\n\n    JobContext mockJobContext = mock(JobContext.class);\n    Mockito.when(mockJobContext.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext.getAssignedParticipant(2)).thenReturn(\"GobblinYarnTaskRunner-1\");\n\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext);\n\n    HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);\n    Mockito.when(helixDataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(\"cluster\"));\n    Mockito.when(helixDataAccessor.getChildValuesMap(Mockito.any()))\n        .thenReturn(ImmutableMap.of(\"GobblinYarnTaskRunner-1\", new HelixProperty(\"\")));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService,\n            1, 5, 10, 1.0, noopQueue, helixDataAccessor);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1))\n        .requestTargetNumberOfContainers(5, ImmutableSet.of(\"GobblinYarnTaskRunner-1\"));\n  }\n","date":"2020-06-03 06:46:24","endLine":369,"groupId":"10146","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testMinContainers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/6c/4047147485a64af836aa38441d6dd20717848b.src","preCode":"  public void testMinContainers() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n    WorkflowConfig mockWorkflowConfig = mock(WorkflowConfig.class);\n    JobDag mockJobDag = mock(JobDag.class);\n\n    Mockito.when(mockJobDag.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\"));\n    Mockito.when(mockWorkflowConfig.getJobDag()).thenReturn(mockJobDag);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig));\n\n    WorkflowContext mockWorkflowContext = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext);\n\n    JobContext mockJobContext = mock(JobContext.class);\n    Mockito.when(mockJobContext.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext.getAssignedParticipant(2)).thenReturn(\"GobblinYarnTaskRunner-1\");\n\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext);\n\n    HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);\n    Mockito.when(helixDataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(\"cluster\"));\n    Mockito.when(helixDataAccessor.getChildValuesMap(Mockito.any()))\n        .thenReturn(ImmutableMap.of(\"GobblinYarnTaskRunner-1\", new HelixProperty(\"\")));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService,\n            1, 5, 10, noopQueue, helixDataAccessor);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1))\n        .requestTargetNumberOfContainers(5, ImmutableSet.of(\"GobblinYarnTaskRunner-1\"));\n  }\n","realPath":"gobblin-yarn/src/test/java/org/apache/gobblin/yarn/YarnAutoScalingManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"},{"authorDate":"2020-03-10 00:42:14","commitOrder":3,"curCode":"  public void testInstanceIdleBeyondTolerance() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n    WorkflowConfig mockWorkflowConfig = mock(WorkflowConfig.class);\n    JobDag mockJobDag = mock(JobDag.class);\n\n    Mockito.when(mockJobDag.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\"));\n    Mockito.when(mockWorkflowConfig.getJobDag()).thenReturn(mockJobDag);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig));\n\n    WorkflowContext mockWorkflowContext = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext);\n\n    \r\n    JobContext mockJobContext = mock(JobContext.class);\n    Mockito.when(mockJobContext.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext.getAssignedParticipant(1)).thenReturn(\"GobblinYarnTaskRunner-2\");\n    Mockito.when(mockJobContext.getAssignedParticipant(2)).thenReturn(\"GobblinYarnTaskRunner-2\");\n\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext);\n\n    HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);\n    Mockito.when(helixDataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(\"cluster\"));\n    Mockito.when(helixDataAccessor.getChildValuesMap(Mockito.any()))\n        .thenReturn(ImmutableMap.of(\"GobblinYarnTaskRunner-1\", new HelixProperty(\"\"),\n            \"GobblinYarnTaskRunner-2\", new HelixProperty(\"\")));\n\n    TestYarnAutoScalingRunnable runnable = new TestYarnAutoScalingRunnable(mockTaskDriver, mockYarnService,\n            1, 1, 10, helixDataAccessor);\n\n    runnable.run();\n\n    \r\n    \r\n    Mockito.verify(mockYarnService, times(1)).\n        requestTargetNumberOfContainers(2, ImmutableSet.of(\"GobblinYarnTaskRunner-1\", \"GobblinYarnTaskRunner-2\"));\n\n    \r\n    Mockito.reset(mockYarnService);\n    runnable.setAlwaysTagUnused(true);\n    runnable.run();\n\n    Mockito.verify(mockYarnService, times(1)).\n        requestTargetNumberOfContainers(2, ImmutableSet.of(\"GobblinYarnTaskRunner-2\"));\n  }\n","date":"2020-03-10 00:42:14","endLine":537,"groupId":"10146","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInstanceIdleBeyondTolerance","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ba/6c1db378e39307c57cb50478e960ae26542f0a.src","preCode":"  public void testInstanceIdleBeyondTolerance() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n    WorkflowConfig mockWorkflowConfig = mock(WorkflowConfig.class);\n    JobDag mockJobDag = mock(JobDag.class);\n\n    Mockito.when(mockJobDag.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\"));\n    Mockito.when(mockWorkflowConfig.getJobDag()).thenReturn(mockJobDag);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig));\n\n    WorkflowContext mockWorkflowContext = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext);\n\n    \r\n    JobContext mockJobContext = mock(JobContext.class);\n    Mockito.when(mockJobContext.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext.getAssignedParticipant(1)).thenReturn(\"GobblinYarnTaskRunner-2\");\n    Mockito.when(mockJobContext.getAssignedParticipant(2)).thenReturn(\"GobblinYarnTaskRunner-2\");\n\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext);\n\n    HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);\n    Mockito.when(helixDataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(\"cluster\"));\n    Mockito.when(helixDataAccessor.getChildValuesMap(Mockito.any()))\n        .thenReturn(ImmutableMap.of(\"GobblinYarnTaskRunner-1\", new HelixProperty(\"\"),\n            \"GobblinYarnTaskRunner-2\", new HelixProperty(\"\")));\n\n    TestYarnAutoScalingRunnable runnable = new TestYarnAutoScalingRunnable(mockTaskDriver, mockYarnService,\n            1, 1, 10, helixDataAccessor);\n\n    runnable.run();\n\n    \r\n    \r\n    Mockito.verify(mockYarnService, times(1)).\n        requestTargetNumberOfContainers(2, ImmutableSet.of(\"GobblinYarnTaskRunner-1\", \"GobblinYarnTaskRunner-2\"));\n\n    \r\n    Mockito.reset(mockYarnService);\n    runnable.setAlwaysTagUnused(true);\n    runnable.run();\n\n    Mockito.verify(mockYarnService, times(1)).\n        requestTargetNumberOfContainers(2, ImmutableSet.of(\"GobblinYarnTaskRunner-2\"));\n  }\n","realPath":"gobblin-yarn/src/test/java/org/apache/gobblin/yarn/YarnAutoScalingManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"N"}],"commitId":"2ab6200116062f49f9d3c7854270ea19490d8ba1","commitMessage":"@@@[GOBBLIN-1177] Provide a config for overprovisioning Gobblin Yarn containers by a configurable amount[]\n\nCloses #3023 from sv2000/containerOverProvision\n","date":"2020-06-03 06:46:24","modifiedFileCount":"2","status":"M","submitter":"sv2000"}]
