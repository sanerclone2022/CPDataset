[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public CombineSelectionPolicy(Config config, Properties jobProps) throws IOException {\n    Preconditions.checkArgument(config.hasPath(VERSION_SELECTION_POLICIES_PREFIX), \"Combine operation not specified.\");\n\n    ImmutableList.Builder<VersionSelectionPolicy<DatasetVersion>> builder = ImmutableList.builder();\n\n    for (String combineClassName : config.getStringList(VERSION_SELECTION_POLICIES_PREFIX)) {\n      try {\n        builder.add((VersionSelectionPolicy<DatasetVersion>) GobblinConstructorUtils.invokeFirstConstructor(\n            Class.forName(combineClassName), ImmutableList.<Object> of(config), ImmutableList.<Object> of(jobProps)));\n      } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n          | ClassNotFoundException e) {\n        throw new IllegalArgumentException(e);\n      }\n    }\n\n    this.selectionPolicies = builder.build();\n    if (this.selectionPolicies.size() == 0) {\n      throw new IOException(\"No selection policies specified for \" + CombineSelectionPolicy.class.getCanonicalName());\n    }\n\n    this.combineOperation =\n        CombineOperation.valueOf(config.getString(VERSION_SELECTION_COMBINE_OPERATION).toUpperCase());\n  }\n","date":"2017-07-31 15:51:25","endLine":110,"groupId":"3208","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"CombineSelectionPolicy","params":"(Configconfig@PropertiesjobProps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b6/377a00fe6d8bd683b0177e9fb54ed6f2c1db60.src","preCode":"  public CombineSelectionPolicy(Config config, Properties jobProps) throws IOException {\n    Preconditions.checkArgument(config.hasPath(VERSION_SELECTION_POLICIES_PREFIX), \"Combine operation not specified.\");\n\n    ImmutableList.Builder<VersionSelectionPolicy<DatasetVersion>> builder = ImmutableList.builder();\n\n    for (String combineClassName : config.getStringList(VERSION_SELECTION_POLICIES_PREFIX)) {\n      try {\n        builder.add((VersionSelectionPolicy<DatasetVersion>) GobblinConstructorUtils.invokeFirstConstructor(\n            Class.forName(combineClassName), ImmutableList.<Object> of(config), ImmutableList.<Object> of(jobProps)));\n      } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n          | ClassNotFoundException e) {\n        throw new IllegalArgumentException(e);\n      }\n    }\n\n    this.selectionPolicies = builder.build();\n    if (this.selectionPolicies.size() == 0) {\n      throw new IOException(\"No selection policies specified for \" + CombineSelectionPolicy.class.getCanonicalName());\n    }\n\n    this.combineOperation =\n        CombineOperation.valueOf(config.getString(VERSION_SELECTION_COMBINE_OPERATION).toUpperCase());\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/policy/CombineSelectionPolicy.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  private RetentionPolicy<T> createRetentionPolicy(String className, Config config, Properties jobProps) {\n    try {\n      return (RetentionPolicy<T>) GobblinConstructorUtils.invokeFirstConstructor(Class.forName(className),\n          ImmutableList.<Object> of(config), ImmutableList.<Object> of(config, jobProps),\n          ImmutableList.<Object> of(jobProps));\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":235,"groupId":"108","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createRetentionPolicy","params":"(StringclassName@Configconfig@PropertiesjobProps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/1c/477274a7086364efdb60d7f038d79cfa8989ce.src","preCode":"  private RetentionPolicy<T> createRetentionPolicy(String className, Config config, Properties jobProps) {\n    try {\n      return (RetentionPolicy<T>) GobblinConstructorUtils.invokeFirstConstructor(Class.forName(className),\n          ImmutableList.<Object> of(config), ImmutableList.<Object> of(config, jobProps),\n          ImmutableList.<Object> of(jobProps));\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/retention/dataset/ConfigurableCleanableDataset.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2018-04-05 04:48:52","commitOrder":2,"curCode":"  public CombineSelectionPolicy(Config config, Properties jobProps)\n      throws IOException {\n    Preconditions.checkArgument(config.hasPath(VERSION_SELECTION_POLICIES_PREFIX), \"Combine operation not specified.\");\n\n    ImmutableList.Builder<VersionSelectionPolicy<DatasetVersion>> builder = ImmutableList.builder();\n\n    for (String combineClassName : ConfigUtils.getStringList(config, VERSION_SELECTION_POLICIES_PREFIX)) {\n      try {\n        builder.add((VersionSelectionPolicy<DatasetVersion>) GobblinConstructorUtils\n            .invokeFirstConstructor(Class.forName(combineClassName), ImmutableList.<Object>of(config),\n                ImmutableList.<Object>of(jobProps)));\n      } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException | ClassNotFoundException e) {\n        throw new IllegalArgumentException(e);\n      }\n    }\n\n    this.selectionPolicies = builder.build();\n    if (this.selectionPolicies.size() == 0) {\n      throw new IOException(\"No selection policies specified for \" + CombineSelectionPolicy.class.getCanonicalName());\n    }\n\n    this.combineOperation =\n        CombineOperation.valueOf(config.getString(VERSION_SELECTION_COMBINE_OPERATION).toUpperCase());\n  }\n","date":"2018-04-05 04:48:52","endLine":116,"groupId":"101708","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"CombineSelectionPolicy","params":"(Configconfig@PropertiesjobProps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/51/caf5575ca95520156677347d99b89dbc052edb.src","preCode":"  public CombineSelectionPolicy(Config config, Properties jobProps)\n      throws IOException {\n    Preconditions.checkArgument(config.hasPath(VERSION_SELECTION_POLICIES_PREFIX), \"Combine operation not specified.\");\n\n    ImmutableList.Builder<VersionSelectionPolicy<DatasetVersion>> builder = ImmutableList.builder();\n\n    for (String combineClassName : config.getStringList(VERSION_SELECTION_POLICIES_PREFIX)) {\n      try {\n        builder.add((VersionSelectionPolicy<DatasetVersion>) GobblinConstructorUtils\n            .invokeFirstConstructor(Class.forName(combineClassName), ImmutableList.<Object>of(config),\n                ImmutableList.<Object>of(jobProps)));\n      } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException | ClassNotFoundException e) {\n        throw new IllegalArgumentException(e);\n      }\n    }\n\n    this.selectionPolicies = builder.build();\n    if (this.selectionPolicies.size() == 0) {\n      throw new IOException(\"No selection policies specified for \" + CombineSelectionPolicy.class.getCanonicalName());\n    }\n\n    this.combineOperation =\n        CombineOperation.valueOf(config.getString(VERSION_SELECTION_COMBINE_OPERATION).toUpperCase());\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/policy/CombineSelectionPolicy.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  private RetentionPolicy<T> createRetentionPolicy(String className, Config config, Properties jobProps) {\n    try {\n      return (RetentionPolicy<T>) GobblinConstructorUtils.invokeFirstConstructor(Class.forName(className),\n          ImmutableList.<Object> of(config), ImmutableList.<Object> of(config, jobProps),\n          ImmutableList.<Object> of(jobProps));\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":235,"groupId":"101708","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createRetentionPolicy","params":"(StringclassName@Configconfig@PropertiesjobProps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/1c/477274a7086364efdb60d7f038d79cfa8989ce.src","preCode":"  private RetentionPolicy<T> createRetentionPolicy(String className, Config config, Properties jobProps) {\n    try {\n      return (RetentionPolicy<T>) GobblinConstructorUtils.invokeFirstConstructor(Class.forName(className),\n          ImmutableList.<Object> of(config), ImmutableList.<Object> of(config, jobProps),\n          ImmutableList.<Object> of(jobProps));\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/retention/dataset/ConfigurableCleanableDataset.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"N"}],"commitId":"461999eda9e72b8a05e9d8248a3942f5f90be5a6","commitMessage":"@@@[GOBBLIN-454] Add retention support to the MysqlDatasetStateStore\n\nCloses #2326 from\nhtran1/mysql_state_store_retention\n","date":"2018-04-05 04:48:52","modifiedFileCount":"7","status":"M","submitter":"Hung Tran"}]
