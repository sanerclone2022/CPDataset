[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testStringSerialization()\n      throws IOException, InterruptedException {\n    String topic = \"testStringSerialization08\";\n    _kafkaTestHelper.provisionTopic(topic);\n    Properties props = new Properties();\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, topic);\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"bootstrap.servers\", \"localhost:\" + _kafkaTestHelper.getKafkaServerPort());\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    Kafka08DataWriter<String> kafka08DataWriter = new Kafka08DataWriter<String>(props);\n    String messageString = \"foobar\";\n    WriteCallback callback = mock(WriteCallback.class);\n\n    try {\n      kafka08DataWriter.write(messageString, callback);\n    }\n    finally\n    {\n      kafka08DataWriter.close();\n    }\n\n    verify(callback, times(1)).onSuccess(isA(WriteResponse.class));\n    verify(callback, never()).onFailure(isA(Exception.class));\n    byte[] message = _kafkaTestHelper.getIteratorForTopic(topic).next().message();\n    String messageReceived = new String(message);\n    Assert.assertEquals(messageReceived, messageString);\n\n  }\n","date":"2017-07-31 15:51:25","endLine":101,"groupId":"3294","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c7/ac96f30d4579ddeb1df9bd4f4db8bcf716ca33.src","preCode":"  public void testStringSerialization()\n      throws IOException, InterruptedException {\n    String topic = \"testStringSerialization08\";\n    _kafkaTestHelper.provisionTopic(topic);\n    Properties props = new Properties();\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, topic);\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"bootstrap.servers\", \"localhost:\" + _kafkaTestHelper.getKafkaServerPort());\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    Kafka08DataWriter<String> kafka08DataWriter = new Kafka08DataWriter<String>(props);\n    String messageString = \"foobar\";\n    WriteCallback callback = mock(WriteCallback.class);\n\n    try {\n      kafka08DataWriter.write(messageString, callback);\n    }\n    finally\n    {\n      kafka08DataWriter.close();\n    }\n\n    verify(callback, times(1)).onSuccess(isA(WriteResponse.class));\n    verify(callback, never()).onFailure(isA(Exception.class));\n    byte[] message = _kafkaTestHelper.getIteratorForTopic(topic).next().message();\n    String messageReceived = new String(message);\n    Assert.assertEquals(messageReceived, messageString);\n\n  }\n","realPath":"gobblin-modules/gobblin-kafka-08/src/test/java/org/apache/gobblin/kafka/writer/Kafka08DataWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testBinarySerialization()\n      throws IOException, InterruptedException {\n    String topic = \"testBinarySerialization08\";\n    _kafkaTestHelper.provisionTopic(topic);\n    Properties props = new Properties();\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, topic);\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"bootstrap.servers\", \"localhost:\" + _kafkaTestHelper.getKafkaServerPort());\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"value.serializer\", \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    Kafka08DataWriter<byte[]> kafka08DataWriter = new Kafka08DataWriter<byte[]>(props);\n    WriteCallback callback = mock(WriteCallback.class);\n\n    byte[] messageBytes = TestUtils.generateRandomBytes();\n\n    try {\n      kafka08DataWriter.write(messageBytes, callback);\n    }\n    finally\n    {\n      kafka08DataWriter.close();\n    }\n\n    verify(callback, times(1)).onSuccess(isA(WriteResponse.class));\n    verify(callback, never()).onFailure(isA(Exception.class));\n    byte[] message = _kafkaTestHelper.getIteratorForTopic(topic).next().message();\n    Assert.assertEquals(message, messageBytes);\n  }\n","date":"2017-07-31 15:51:25","endLine":129,"groupId":"3295","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBinarySerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c7/ac96f30d4579ddeb1df9bd4f4db8bcf716ca33.src","preCode":"  public void testBinarySerialization()\n      throws IOException, InterruptedException {\n    String topic = \"testBinarySerialization08\";\n    _kafkaTestHelper.provisionTopic(topic);\n    Properties props = new Properties();\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, topic);\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"bootstrap.servers\", \"localhost:\" + _kafkaTestHelper.getKafkaServerPort());\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"value.serializer\", \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    Kafka08DataWriter<byte[]> kafka08DataWriter = new Kafka08DataWriter<byte[]>(props);\n    WriteCallback callback = mock(WriteCallback.class);\n\n    byte[] messageBytes = TestUtils.generateRandomBytes();\n\n    try {\n      kafka08DataWriter.write(messageBytes, callback);\n    }\n    finally\n    {\n      kafka08DataWriter.close();\n    }\n\n    verify(callback, times(1)).onSuccess(isA(WriteResponse.class));\n    verify(callback, never()).onFailure(isA(Exception.class));\n    byte[] message = _kafkaTestHelper.getIteratorForTopic(topic).next().message();\n    Assert.assertEquals(message, messageBytes);\n  }\n","realPath":"gobblin-modules/gobblin-kafka-08/src/test/java/org/apache/gobblin/kafka/writer/Kafka08DataWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2019-07-10 05:11:39","codes":[{"authorDate":"2019-07-10 05:11:39","commitOrder":2,"curCode":"  public void testStringSerialization()\n      throws IOException, InterruptedException {\n    String topic = \"testStringSerialization08\";\n    _kafkaTestHelper.provisionTopic(topic);\n    Properties props = new Properties();\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, topic);\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"bootstrap.servers\", \"localhost:\" + _kafkaTestHelper.getKafkaServerPort());\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    Kafka08DataWriter kafka08DataWriter = new Kafka08DataWriter(props);\n    String messageString = \"foobar\";\n    WriteCallback callback = mock(WriteCallback.class);\n\n    try {\n      kafka08DataWriter.write(messageString, callback);\n    }\n    finally\n    {\n      kafka08DataWriter.close();\n    }\n\n    verify(callback, times(1)).onSuccess(isA(WriteResponse.class));\n    verify(callback, never()).onFailure(isA(Exception.class));\n    byte[] message = _kafkaTestHelper.getIteratorForTopic(topic).next().message();\n    String messageReceived = new String(message);\n    Assert.assertEquals(messageReceived, messageString);\n\n  }\n","date":"2019-07-10 05:11:39","endLine":101,"groupId":"10631","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStringSerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/3d/3387cc54a30e8f9e71996cd9164379efcf28bc.src","preCode":"  public void testStringSerialization()\n      throws IOException, InterruptedException {\n    String topic = \"testStringSerialization08\";\n    _kafkaTestHelper.provisionTopic(topic);\n    Properties props = new Properties();\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, topic);\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"bootstrap.servers\", \"localhost:\" + _kafkaTestHelper.getKafkaServerPort());\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    Kafka08DataWriter<String> kafka08DataWriter = new Kafka08DataWriter<String>(props);\n    String messageString = \"foobar\";\n    WriteCallback callback = mock(WriteCallback.class);\n\n    try {\n      kafka08DataWriter.write(messageString, callback);\n    }\n    finally\n    {\n      kafka08DataWriter.close();\n    }\n\n    verify(callback, times(1)).onSuccess(isA(WriteResponse.class));\n    verify(callback, never()).onFailure(isA(Exception.class));\n    byte[] message = _kafkaTestHelper.getIteratorForTopic(topic).next().message();\n    String messageReceived = new String(message);\n    Assert.assertEquals(messageReceived, messageString);\n\n  }\n","realPath":"gobblin-modules/gobblin-kafka-08/src/test/java/org/apache/gobblin/kafka/writer/Kafka08DataWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2019-07-10 05:11:39","commitOrder":2,"curCode":"  public void testBinarySerialization()\n      throws IOException, InterruptedException {\n    String topic = \"testBinarySerialization08\";\n    _kafkaTestHelper.provisionTopic(topic);\n    Properties props = new Properties();\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, topic);\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"bootstrap.servers\", \"localhost:\" + _kafkaTestHelper.getKafkaServerPort());\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"value.serializer\", \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    Kafka08DataWriter kafka08DataWriter = new Kafka08DataWriter(props);\n    WriteCallback callback = mock(WriteCallback.class);\n\n    byte[] messageBytes = TestUtils.generateRandomBytes();\n\n    try {\n      kafka08DataWriter.write(messageBytes, callback);\n    }\n    finally\n    {\n      kafka08DataWriter.close();\n    }\n\n    verify(callback, times(1)).onSuccess(isA(WriteResponse.class));\n    verify(callback, never()).onFailure(isA(Exception.class));\n    byte[] message = _kafkaTestHelper.getIteratorForTopic(topic).next().message();\n    Assert.assertEquals(message, messageBytes);\n  }\n","date":"2019-07-10 05:11:39","endLine":129,"groupId":"10631","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBinarySerialization","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/3d/3387cc54a30e8f9e71996cd9164379efcf28bc.src","preCode":"  public void testBinarySerialization()\n      throws IOException, InterruptedException {\n    String topic = \"testBinarySerialization08\";\n    _kafkaTestHelper.provisionTopic(topic);\n    Properties props = new Properties();\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_TOPIC, topic);\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"bootstrap.servers\", \"localhost:\" + _kafkaTestHelper.getKafkaServerPort());\n    props.setProperty(KafkaWriterConfigurationKeys.KAFKA_PRODUCER_CONFIG_PREFIX+\"value.serializer\", \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    Kafka08DataWriter<byte[]> kafka08DataWriter = new Kafka08DataWriter<byte[]>(props);\n    WriteCallback callback = mock(WriteCallback.class);\n\n    byte[] messageBytes = TestUtils.generateRandomBytes();\n\n    try {\n      kafka08DataWriter.write(messageBytes, callback);\n    }\n    finally\n    {\n      kafka08DataWriter.close();\n    }\n\n    verify(callback, times(1)).onSuccess(isA(WriteResponse.class));\n    verify(callback, never()).onFailure(isA(Exception.class));\n    byte[] message = _kafkaTestHelper.getIteratorForTopic(topic).next().message();\n    Assert.assertEquals(message, messageBytes);\n  }\n","realPath":"gobblin-modules/gobblin-kafka-08/src/test/java/org/apache/gobblin/kafka/writer/Kafka08DataWriterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"98f45965b86230265bd30578c887ad4a7dee5c78","commitMessage":"@@@[GOBBLIN-820] Add keyed write capability to Kafka writer\n\nCloses #2682 from shirshanka/kill-pusher\n","date":"2019-07-10 05:11:39","modifiedFileCount":"13","status":"M","submitter":"Shirshanka Das"}]
