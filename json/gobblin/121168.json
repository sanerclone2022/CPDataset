[{"authorTime":"2019-04-11 02:59:27","codes":[{"authorDate":"2019-04-11 02:59:27","commitOrder":2,"curCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId) {\n    Preconditions.checkArgument(flowName != null, \"FlowName cannot be null\");\n    Preconditions.checkArgument(flowGroup != null, \"FlowGroup cannot be null\");\n\n    Predicate<String> flowExecutionIdPredicate = input -> input.startsWith(String.valueOf(flowExecutionId) + \".\");\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    try {\n      List<JobStatus> jobStatuses = new ArrayList<>();\n      List<String> tableNames = this.stateStore.getTableNames(storeName, flowExecutionIdPredicate);\n      for (String tableName: tableNames) {\n        List<State> jobStates = this.stateStore.getAll(storeName, tableName);\n        if (jobStates.isEmpty()) {\n          return Iterators.emptyIterator();\n        }\n        if (!shouldFilterJobStatus(tableNames, tableName)) {\n          jobStatuses.add(getJobStatus(jobStates.get(0)));\n        }\n      }\n      return jobStatuses.iterator();\n    } catch (IOException e) {\n      log.error(\"IOException encountered when retrieving job statuses for flow: {},{},{}\", flowGroup, flowName, flowExecutionId, e);\n      return Iterators.emptyIterator();\n    }\n  }\n","date":"2019-04-11 02:59:27","endLine":88,"groupId":"4955","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getJobStatusesForFlowExecution","params":"(StringflowName@StringflowGroup@longflowExecutionId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f3/5e076106d3111faa73da7bf35918e032e0641a.src","preCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId) {\n    Preconditions.checkArgument(flowName != null, \"FlowName cannot be null\");\n    Preconditions.checkArgument(flowGroup != null, \"FlowGroup cannot be null\");\n\n    Predicate<String> flowExecutionIdPredicate = input -> input.startsWith(String.valueOf(flowExecutionId) + \".\");\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    try {\n      List<JobStatus> jobStatuses = new ArrayList<>();\n      List<String> tableNames = this.stateStore.getTableNames(storeName, flowExecutionIdPredicate);\n      for (String tableName: tableNames) {\n        List<State> jobStates = this.stateStore.getAll(storeName, tableName);\n        if (jobStates.isEmpty()) {\n          return Iterators.emptyIterator();\n        }\n        if (!shouldFilterJobStatus(tableNames, tableName)) {\n          jobStatuses.add(getJobStatus(jobStates.get(0)));\n        }\n      }\n      return jobStatuses.iterator();\n    } catch (IOException e) {\n      log.error(\"IOException encountered when retrieving job statuses for flow: {},{},{}\", flowGroup, flowName, flowExecutionId, e);\n      return Iterators.emptyIterator();\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/monitoring/FsJobStatusRetriever.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"MB"},{"authorDate":"2019-04-11 02:59:27","commitOrder":2,"curCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId,\n      String jobName, String jobGroup) {\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    String tableName = KafkaJobStatusMonitor.jobStatusTableName(flowExecutionId, jobGroup, jobName);\n\n    try {\n      List<State> jobStatusStates = this.stateStore.getAll(storeName, tableName);\n      return filterAndGetJobStatuses(jobStatusStates);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2019-04-11 02:59:27","endLine":77,"groupId":"4967","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getJobStatusesForFlowExecution","params":"(StringflowName@StringflowGroup@longflowExecutionId@StringjobName@StringjobGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/62/7e42180be122bd51f8a11cdd6b99c69b95a2ed.src","preCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId,\n      String jobName, String jobGroup) {\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    String tableName = KafkaJobStatusMonitor.jobStatusTableName(flowExecutionId, jobGroup, jobName);\n\n    try {\n      List<State> jobStatusStates = this.stateStore.getAll(storeName, tableName);\n      return filterAndGetJobStatuses(jobStatusStates);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/monitoring/MysqlJobStatusRetriever.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"b28ddaf16948dd270b43ac2fc2b27824d4b6a5f8","commitMessage":"@@@[GOBBLIN-725] add a mysql based job status retriever\n\nCloses #2592 from\narjun4084346/jobstatusstoretomysql\n","date":"2019-04-11 02:59:27","modifiedFileCount":"12","status":"M","submitter":"Arjun"},{"authorTime":"2019-08-20 13:49:20","codes":[{"authorDate":"2019-08-20 13:49:20","commitOrder":3,"curCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId) {\n    Preconditions.checkArgument(flowName != null, \"FlowName cannot be null\");\n    Preconditions.checkArgument(flowGroup != null, \"FlowGroup cannot be null\");\n\n    Predicate<String> flowExecutionIdPredicate = input -> input.startsWith(String.valueOf(flowExecutionId) + \".\");\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    try {\n      List<JobStatus> jobStatuses = new ArrayList<>();\n      List<String> tableNames = this.stateStore.getTableNames(storeName, flowExecutionIdPredicate);\n      for (String tableName: tableNames) {\n        List<State> jobStates = this.stateStore.getAll(storeName, tableName);\n        if (jobStates.isEmpty()) {\n          return Iterators.emptyIterator();\n        }\n        jobStatuses.add(getJobStatus(jobStates.get(0)));\n      }\n      return jobStatuses.iterator();\n    } catch (IOException e) {\n      log.error(\"IOException encountered when retrieving job statuses for flow: {},{},{}\", flowGroup, flowName, flowExecutionId, e);\n      return Iterators.emptyIterator();\n    }\n  }\n","date":"2019-08-20 13:49:20","endLine":86,"groupId":"4955","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getJobStatusesForFlowExecution","params":"(StringflowName@StringflowGroup@longflowExecutionId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/fb/a549fdeb7de4435e85d4f24a3af4282609e0a8.src","preCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId) {\n    Preconditions.checkArgument(flowName != null, \"FlowName cannot be null\");\n    Preconditions.checkArgument(flowGroup != null, \"FlowGroup cannot be null\");\n\n    Predicate<String> flowExecutionIdPredicate = input -> input.startsWith(String.valueOf(flowExecutionId) + \".\");\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    try {\n      List<JobStatus> jobStatuses = new ArrayList<>();\n      List<String> tableNames = this.stateStore.getTableNames(storeName, flowExecutionIdPredicate);\n      for (String tableName: tableNames) {\n        List<State> jobStates = this.stateStore.getAll(storeName, tableName);\n        if (jobStates.isEmpty()) {\n          return Iterators.emptyIterator();\n        }\n        if (!shouldFilterJobStatus(tableNames, tableName)) {\n          jobStatuses.add(getJobStatus(jobStates.get(0)));\n        }\n      }\n      return jobStatuses.iterator();\n    } catch (IOException e) {\n      log.error(\"IOException encountered when retrieving job statuses for flow: {},{},{}\", flowGroup, flowName, flowExecutionId, e);\n      return Iterators.emptyIterator();\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/monitoring/FsJobStatusRetriever.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2019-08-20 13:49:20","commitOrder":3,"curCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId,\n      String jobName, String jobGroup) {\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    String tableName = KafkaJobStatusMonitor.jobStatusTableName(flowExecutionId, jobGroup, jobName);\n\n    try {\n      List<State> jobStatusStates = this.stateStore.getAll(storeName, tableName);\n      return getJobStatuses(jobStatusStates);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2019-08-20 13:49:20","endLine":77,"groupId":"4967","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getJobStatusesForFlowExecution","params":"(StringflowName@StringflowGroup@longflowExecutionId@StringjobName@StringjobGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/56/289bd0e086c0917b0c5e1bfd2aa9eea4d023d7.src","preCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId,\n      String jobName, String jobGroup) {\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    String tableName = KafkaJobStatusMonitor.jobStatusTableName(flowExecutionId, jobGroup, jobName);\n\n    try {\n      List<State> jobStatusStates = this.stateStore.getAll(storeName, tableName);\n      return filterAndGetJobStatuses(jobStatusStates);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/monitoring/MysqlJobStatusRetriever.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"59f3beeea1e62dcc1f3901f082e46bc3d237f9fb","commitMessage":"@@@[GOBBLIN-860] Process flow-level events for setting/retrieving flow status\n\nCloses #2715 from jack-moseley/flow-level-events\n","date":"2019-08-20 13:49:20","modifiedFileCount":"9","status":"M","submitter":"Jack Moseley"},{"authorTime":"2020-04-24 07:29:18","codes":[{"authorDate":"2019-08-20 13:49:20","commitOrder":4,"curCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId) {\n    Preconditions.checkArgument(flowName != null, \"FlowName cannot be null\");\n    Preconditions.checkArgument(flowGroup != null, \"FlowGroup cannot be null\");\n\n    Predicate<String> flowExecutionIdPredicate = input -> input.startsWith(String.valueOf(flowExecutionId) + \".\");\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    try {\n      List<JobStatus> jobStatuses = new ArrayList<>();\n      List<String> tableNames = this.stateStore.getTableNames(storeName, flowExecutionIdPredicate);\n      for (String tableName: tableNames) {\n        List<State> jobStates = this.stateStore.getAll(storeName, tableName);\n        if (jobStates.isEmpty()) {\n          return Iterators.emptyIterator();\n        }\n        jobStatuses.add(getJobStatus(jobStates.get(0)));\n      }\n      return jobStatuses.iterator();\n    } catch (IOException e) {\n      log.error(\"IOException encountered when retrieving job statuses for flow: {},{},{}\", flowGroup, flowName, flowExecutionId, e);\n      return Iterators.emptyIterator();\n    }\n  }\n","date":"2019-08-20 13:49:20","endLine":86,"groupId":"4955","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getJobStatusesForFlowExecution","params":"(StringflowName@StringflowGroup@longflowExecutionId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/fb/a549fdeb7de4435e85d4f24a3af4282609e0a8.src","preCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId) {\n    Preconditions.checkArgument(flowName != null, \"FlowName cannot be null\");\n    Preconditions.checkArgument(flowGroup != null, \"FlowGroup cannot be null\");\n\n    Predicate<String> flowExecutionIdPredicate = input -> input.startsWith(String.valueOf(flowExecutionId) + \".\");\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    try {\n      List<JobStatus> jobStatuses = new ArrayList<>();\n      List<String> tableNames = this.stateStore.getTableNames(storeName, flowExecutionIdPredicate);\n      for (String tableName: tableNames) {\n        List<State> jobStates = this.stateStore.getAll(storeName, tableName);\n        if (jobStates.isEmpty()) {\n          return Iterators.emptyIterator();\n        }\n        jobStatuses.add(getJobStatus(jobStates.get(0)));\n      }\n      return jobStatuses.iterator();\n    } catch (IOException e) {\n      log.error(\"IOException encountered when retrieving job statuses for flow: {},{},{}\", flowGroup, flowName, flowExecutionId, e);\n      return Iterators.emptyIterator();\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/monitoring/FsJobStatusRetriever.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2020-04-24 07:29:18","commitOrder":4,"curCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId,\n      String jobName, String jobGroup) {\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    String tableName = KafkaJobStatusMonitor.jobStatusTableName(flowExecutionId, jobGroup, jobName);\n\n    try {\n      List<State> jobStatusStates;\n      try (Timer.Context context = this.metricContext.contextAwareTimer(GET_LATEST_JOB_STATUS_METRIC).time()) {\n        jobStatusStates = this.stateStore.getAll(storeName, tableName);\n      }\n      return getJobStatuses(jobStatusStates);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-04-24 07:29:18","endLine":90,"groupId":"4967","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getJobStatusesForFlowExecution","params":"(StringflowName@StringflowGroup@longflowExecutionId@StringjobName@StringjobGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a7/a760c25c9f461d80b8ed97414d4647defb236c.src","preCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId,\n      String jobName, String jobGroup) {\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    String tableName = KafkaJobStatusMonitor.jobStatusTableName(flowExecutionId, jobGroup, jobName);\n\n    try {\n      List<State> jobStatusStates = this.stateStore.getAll(storeName, tableName);\n      return getJobStatuses(jobStatusStates);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/monitoring/MysqlJobStatusRetriever.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"d8d579a42ec901dd74b6f453bd334c77e9498195","commitMessage":"@@@[GOBBLIN-1125] Add metrics to measure job status state store performan?\n\nCloses #2965 from sv2000/jobStatusMetrics\n","date":"2020-04-24 07:29:18","modifiedFileCount":"5","status":"M","submitter":"sv2000"},{"authorTime":"2020-04-24 07:29:18","codes":[{"authorDate":"2021-07-29 04:02:46","commitOrder":5,"curCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId) {\n    Preconditions.checkArgument(flowName != null, \"FlowName cannot be null\");\n    Preconditions.checkArgument(flowGroup != null, \"FlowGroup cannot be null\");\n\n    Predicate<String> flowExecutionIdPredicate = input -> input.startsWith(String.valueOf(flowExecutionId) + \".\");\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    try {\n      List<String> tableNames = this.stateStore.getTableNames(storeName, flowExecutionIdPredicate);\n      List<JobStatus> jobStatuses = new ArrayList<>(tableNames.size());\n      for (String tableName: tableNames) {\n        List<State> jobStates = this.stateStore.getAll(storeName, tableName);\n        if (jobStates.isEmpty()) {\n          return Iterators.emptyIterator();\n        }\n        jobStatuses.add(getJobStatus(jobStates.get(0)));\n      }\n      return jobStatuses.iterator();\n    } catch (IOException e) {\n      log.error(\"IOException encountered when retrieving job statuses for flow: {},{},{}\", flowGroup, flowName, flowExecutionId, e);\n      return Iterators.emptyIterator();\n    }\n  }\n","date":"2021-07-29 04:02:46","endLine":89,"groupId":"7432","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getJobStatusesForFlowExecution","params":"(StringflowName@StringflowGroup@longflowExecutionId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c9/1fd830996533c05dab04e59dd07b6a16b11615.src","preCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId) {\n    Preconditions.checkArgument(flowName != null, \"FlowName cannot be null\");\n    Preconditions.checkArgument(flowGroup != null, \"FlowGroup cannot be null\");\n\n    Predicate<String> flowExecutionIdPredicate = input -> input.startsWith(String.valueOf(flowExecutionId) + \".\");\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    try {\n      List<JobStatus> jobStatuses = new ArrayList<>();\n      List<String> tableNames = this.stateStore.getTableNames(storeName, flowExecutionIdPredicate);\n      for (String tableName: tableNames) {\n        List<State> jobStates = this.stateStore.getAll(storeName, tableName);\n        if (jobStates.isEmpty()) {\n          return Iterators.emptyIterator();\n        }\n        jobStatuses.add(getJobStatus(jobStates.get(0)));\n      }\n      return jobStatuses.iterator();\n    } catch (IOException e) {\n      log.error(\"IOException encountered when retrieving job statuses for flow: {},{},{}\", flowGroup, flowName, flowExecutionId, e);\n      return Iterators.emptyIterator();\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/monitoring/FsJobStatusRetriever.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2020-04-24 07:29:18","commitOrder":5,"curCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId,\n      String jobName, String jobGroup) {\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    String tableName = KafkaJobStatusMonitor.jobStatusTableName(flowExecutionId, jobGroup, jobName);\n\n    try {\n      List<State> jobStatusStates;\n      try (Timer.Context context = this.metricContext.contextAwareTimer(GET_LATEST_JOB_STATUS_METRIC).time()) {\n        jobStatusStates = this.stateStore.getAll(storeName, tableName);\n      }\n      return getJobStatuses(jobStatusStates);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","date":"2020-04-24 07:29:18","endLine":90,"groupId":"4967","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getJobStatusesForFlowExecution","params":"(StringflowName@StringflowGroup@longflowExecutionId@StringjobName@StringjobGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a7/a760c25c9f461d80b8ed97414d4647defb236c.src","preCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId,\n      String jobName, String jobGroup) {\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    String tableName = KafkaJobStatusMonitor.jobStatusTableName(flowExecutionId, jobGroup, jobName);\n\n    try {\n      List<State> jobStatusStates;\n      try (Timer.Context context = this.metricContext.contextAwareTimer(GET_LATEST_JOB_STATUS_METRIC).time()) {\n        jobStatusStates = this.stateStore.getAll(storeName, tableName);\n      }\n      return getJobStatuses(jobStatusStates);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/monitoring/MysqlJobStatusRetriever.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"}],"commitId":"9a9e239ec7c1c870916d2ceec442a537275c1166","commitMessage":"@@@[GOBBLIN-1496] Initialize arrays and maps related to gobblin as a service with an in? (#3339)\n\n* optimize some maps and arrays that can be initialized with a fixed size\n\n* use newHashmapWithExpectedSize\n\n* fix checkstyle\n\n* fix bug\n\n* undo accidental change getTimeUnit","date":"2021-07-29 04:02:46","modifiedFileCount":"11","status":"M","submitter":"William Lo"},{"authorTime":"2021-08-31 08:25:27","codes":[{"authorDate":"2021-07-29 04:02:46","commitOrder":6,"curCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId) {\n    Preconditions.checkArgument(flowName != null, \"FlowName cannot be null\");\n    Preconditions.checkArgument(flowGroup != null, \"FlowGroup cannot be null\");\n\n    Predicate<String> flowExecutionIdPredicate = input -> input.startsWith(String.valueOf(flowExecutionId) + \".\");\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    try {\n      List<String> tableNames = this.stateStore.getTableNames(storeName, flowExecutionIdPredicate);\n      List<JobStatus> jobStatuses = new ArrayList<>(tableNames.size());\n      for (String tableName: tableNames) {\n        List<State> jobStates = this.stateStore.getAll(storeName, tableName);\n        if (jobStates.isEmpty()) {\n          return Iterators.emptyIterator();\n        }\n        jobStatuses.add(getJobStatus(jobStates.get(0)));\n      }\n      return jobStatuses.iterator();\n    } catch (IOException e) {\n      log.error(\"IOException encountered when retrieving job statuses for flow: {},{},{}\", flowGroup, flowName, flowExecutionId, e);\n      return Iterators.emptyIterator();\n    }\n  }\n","date":"2021-07-29 04:02:46","endLine":89,"groupId":"7432","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getJobStatusesForFlowExecution","params":"(StringflowName@StringflowGroup@longflowExecutionId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c9/1fd830996533c05dab04e59dd07b6a16b11615.src","preCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId) {\n    Preconditions.checkArgument(flowName != null, \"FlowName cannot be null\");\n    Preconditions.checkArgument(flowGroup != null, \"FlowGroup cannot be null\");\n\n    Predicate<String> flowExecutionIdPredicate = input -> input.startsWith(String.valueOf(flowExecutionId) + \".\");\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    try {\n      List<String> tableNames = this.stateStore.getTableNames(storeName, flowExecutionIdPredicate);\n      List<JobStatus> jobStatuses = new ArrayList<>(tableNames.size());\n      for (String tableName: tableNames) {\n        List<State> jobStates = this.stateStore.getAll(storeName, tableName);\n        if (jobStates.isEmpty()) {\n          return Iterators.emptyIterator();\n        }\n        jobStatuses.add(getJobStatus(jobStates.get(0)));\n      }\n      return jobStatuses.iterator();\n    } catch (IOException e) {\n      log.error(\"IOException encountered when retrieving job statuses for flow: {},{},{}\", flowGroup, flowName, flowExecutionId, e);\n      return Iterators.emptyIterator();\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/monitoring/FsJobStatusRetriever.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"},{"authorDate":"2021-08-31 08:25:27","commitOrder":6,"curCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId,\n      String jobName, String jobGroup) {\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    String tableName = KafkaJobStatusMonitor.jobStatusTableName(flowExecutionId, jobGroup, jobName);\n    List<State> jobStatusStates = timeOpAndWrapIOException(() -> this.stateStore.getAll(storeName, tableName),\n        GET_LATEST_JOB_STATUS_METRIC);\n    return getJobStatuses(jobStatusStates);\n  }\n","date":"2021-08-31 08:25:27","endLine":85,"groupId":"7433","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getJobStatusesForFlowExecution","params":"(StringflowName@StringflowGroup@longflowExecutionId@StringjobName@StringjobGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c3/aac1661af6f0ceacbdcf9e7b8ce5c93f66b216.src","preCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId,\n      String jobName, String jobGroup) {\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    String tableName = KafkaJobStatusMonitor.jobStatusTableName(flowExecutionId, jobGroup, jobName);\n\n    try {\n      List<State> jobStatusStates;\n      try (Timer.Context context = this.metricContext.contextAwareTimer(GET_LATEST_JOB_STATUS_METRIC).time()) {\n        jobStatusStates = this.stateStore.getAll(storeName, tableName);\n      }\n      return getJobStatuses(jobStatusStates);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/monitoring/MysqlJobStatusRetriever.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"0632fbe770a0074e1888ed8a80de0c8d487061ad","commitMessage":"@@@[GOBBLIN-1527] Refactor flowexecutions endpoint job status state retrieval\n\nThis is merely a refactoring of the job status state retrieval impl. used by the existing 'flowexecutions' endpoint.  to enable reuse by the forthcoming finder separate commit. Functionality should not change and should continue to conform to all existing unit tests.","date":"2021-08-31 08:25:27","modifiedFileCount":"4","status":"M","submitter":"Kip Kohn"},{"authorTime":"2021-09-10 04:45:07","codes":[{"authorDate":"2021-09-10 04:45:07","commitOrder":7,"curCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId) {\n    Preconditions.checkArgument(flowName != null, \"FlowName cannot be null\");\n    Preconditions.checkArgument(flowGroup != null, \"FlowGroup cannot be null\");\n\n    Predicate<String> flowExecutionIdPredicate = input -> input.startsWith(String.valueOf(flowExecutionId) + \".\");\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    try {\n      List<String> tableNames = this.stateStore.getTableNames(storeName, flowExecutionIdPredicate);\n      List<JobStatus> jobStatuses = new ArrayList<>(tableNames.size());\n      for (String tableName: tableNames) {\n        List<State> jobStates = this.stateStore.getAll(storeName, tableName);\n        if (jobStates.isEmpty()) {\n          return Iterators.emptyIterator();\n        }\n        jobStatuses.add(getJobStatus(jobStates.get(0)));\n      }\n      return jobStatuses.iterator();\n    } catch (IOException e) {\n      log.error(String.format(\"IOException encountered when retrieving job statuses for flow: %s,%s,%s\", flowGroup, flowName, flowExecutionId), e);\n      return Iterators.emptyIterator();\n    }\n  }\n","date":"2021-09-10 04:45:07","endLine":90,"groupId":"121168","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"getJobStatusesForFlowExecution","params":"(StringflowName@StringflowGroup@longflowExecutionId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/3c/c0d25db434c5c61ea6c356852cff624bd0d0bf.src","preCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId) {\n    Preconditions.checkArgument(flowName != null, \"FlowName cannot be null\");\n    Preconditions.checkArgument(flowGroup != null, \"FlowGroup cannot be null\");\n\n    Predicate<String> flowExecutionIdPredicate = input -> input.startsWith(String.valueOf(flowExecutionId) + \".\");\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    try {\n      List<String> tableNames = this.stateStore.getTableNames(storeName, flowExecutionIdPredicate);\n      List<JobStatus> jobStatuses = new ArrayList<>(tableNames.size());\n      for (String tableName: tableNames) {\n        List<State> jobStates = this.stateStore.getAll(storeName, tableName);\n        if (jobStates.isEmpty()) {\n          return Iterators.emptyIterator();\n        }\n        jobStatuses.add(getJobStatus(jobStates.get(0)));\n      }\n      return jobStatuses.iterator();\n    } catch (IOException e) {\n      log.error(\"IOException encountered when retrieving job statuses for flow: {},{},{}\", flowGroup, flowName, flowExecutionId, e);\n      return Iterators.emptyIterator();\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/monitoring/FsJobStatusRetriever.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2021-09-10 04:45:07","commitOrder":7,"curCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId,\n      String jobName, String jobGroup) {\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    String tableName = KafkaJobStatusMonitor.jobStatusTableName(flowExecutionId, jobGroup, jobName);\n    List<State> jobStatusStates = timeOpAndWrapIOException(() -> this.stateStore.getAll(storeName, tableName),\n        GET_LATEST_JOB_STATUS_METRIC);\n    return asJobStatuses(jobStatusStates);\n  }\n","date":"2021-09-10 04:45:07","endLine":87,"groupId":"121168","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"getJobStatusesForFlowExecution","params":"(StringflowName@StringflowGroup@longflowExecutionId@StringjobName@StringjobGroup)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/6d/28ef905cc7876e822e51b855c25258d6ccee83.src","preCode":"  public Iterator<JobStatus> getJobStatusesForFlowExecution(String flowName, String flowGroup, long flowExecutionId,\n      String jobName, String jobGroup) {\n    String storeName = KafkaJobStatusMonitor.jobStatusStoreName(flowGroup, flowName);\n    String tableName = KafkaJobStatusMonitor.jobStatusTableName(flowExecutionId, jobGroup, jobName);\n    List<State> jobStatusStates = timeOpAndWrapIOException(() -> this.stateStore.getAll(storeName, tableName),\n        GET_LATEST_JOB_STATUS_METRIC);\n    return getJobStatuses(jobStatusStates);\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/monitoring/MysqlJobStatusRetriever.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"316f8bf46fad9a34b448496c09f2bedf841e7b9a","commitMessage":"@@@[GOBBLIN-1527] Add finder `latestFlowGroupExecutions` to `FlowExecutions` endpoint. (#3382)\n\nThis adds the new endpoint while augmenting both (primary) forms of JobStatusRetriever (Mysql and FS) to support querying flow executions across a flow group.","date":"2021-09-10 04:45:07","modifiedFileCount":"17","status":"M","submitter":"Kip Kohn"}]
