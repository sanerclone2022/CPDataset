[{"authorTime":"2018-10-13 01:19:40","codes":[{"authorDate":"2018-12-08 01:01:05","commitOrder":3,"curCode":"  public void testCreateFlowEdge() throws Exception {\n    Properties properties = new Properties();\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY,\"node1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY, \"node2\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_NAME_KEY, \"edge1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"node1:node2:edge1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_TEMPLATE_DIR_URI_KEY, \"FS:///flowEdgeTemplate\");\n\n    List<SpecExecutor> specExecutorList = new ArrayList<>();\n    Config config1 = ConfigFactory.empty().withValue(\"specStore.fs.dir\", ConfigValueFactory.fromAnyRef(\"/tmp1\")).\n        withValue(\"specExecInstance.capabilities\", ConfigValueFactory.fromAnyRef(\"s1:d1\"));\n    specExecutorList.add(new InMemorySpecExecutor(config1));\n    Config config2 = ConfigFactory.empty().withValue(\"specStore.fs.dir\", ConfigValueFactory.fromAnyRef(\"/tmp2\")).\n        withValue(\"specExecInstance.capabilities\", ConfigValueFactory.fromAnyRef(\"s2:d2\"));\n    specExecutorList.add(new InMemorySpecExecutor(config2));\n\n    FlowEdgeFactory flowEdgeFactory = new BaseFlowEdge.Factory();\n\n    Properties props = new Properties();\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    props.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(props);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    FSFlowCatalog catalog = new FSFlowCatalog(templateCatalogCfg);\n    Config edgeProps = ConfigUtils.propertiesToConfig(properties);\n    FlowEdge flowEdge = flowEdgeFactory.createFlowEdge(edgeProps, catalog, specExecutorList);\n    Assert.assertEquals(flowEdge.getSrc(), \"node1\");\n    Assert.assertEquals(flowEdge.getDest(), \"node2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(),\"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(),\"InMemorySpecExecutor\");\n  }\n","date":"2018-12-08 01:01:05","endLine":80,"groupId":"2867","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateFlowEdge","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/08/5d0a7b141500d07a5553070d7831892a3d0b68.src","preCode":"  public void testCreateFlowEdge() throws Exception {\n    Properties properties = new Properties();\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY,\"node1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY, \"node2\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_NAME_KEY, \"edge1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"node1:node2:edge1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_TEMPLATE_DIR_URI_KEY, \"FS:///flowEdgeTemplate\");\n\n    List<SpecExecutor> specExecutorList = new ArrayList<>();\n    Config config1 = ConfigFactory.empty().withValue(\"specStore.fs.dir\", ConfigValueFactory.fromAnyRef(\"/tmp1\")).\n        withValue(\"specExecInstance.capabilities\", ConfigValueFactory.fromAnyRef(\"s1:d1\"));\n    specExecutorList.add(new InMemorySpecExecutor(config1));\n    Config config2 = ConfigFactory.empty().withValue(\"specStore.fs.dir\", ConfigValueFactory.fromAnyRef(\"/tmp2\")).\n        withValue(\"specExecInstance.capabilities\", ConfigValueFactory.fromAnyRef(\"s2:d2\"));\n    specExecutorList.add(new InMemorySpecExecutor(config2));\n\n    FlowEdgeFactory flowEdgeFactory = new BaseFlowEdge.Factory();\n\n    Properties props = new Properties();\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    props.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(props);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    FSFlowCatalog catalog = new FSFlowCatalog(templateCatalogCfg);\n    Config edgeProps = ConfigUtils.propertiesToConfig(properties);\n    FlowEdge flowEdge = flowEdgeFactory.createFlowEdge(edgeProps, catalog, specExecutorList);\n    Assert.assertEquals(flowEdge.getSrc(), \"node1\");\n    Assert.assertEquals(flowEdge.getDest(), \"node2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(),\"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(),\"InMemorySpecExecutor\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/flowgraph/BaseFlowEdgeFactoryTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"MB"},{"authorDate":"2018-10-13 01:19:40","commitOrder":3,"curCode":"  private void testIfEdgeSuccessfullyAdded(String node1, String node2, String edgeName, String value) throws ExecutionException, InterruptedException {\n    Set<FlowEdge> edgeSet = this.flowGraph.getEdges(node1);\n    Assert.assertEquals(edgeSet.size(), 1);\n    FlowEdge flowEdge = edgeSet.iterator().next();\n    Assert.assertEquals(flowEdge.getId(), Joiner.on(\":\").join(node1, node2, edgeName));\n    Assert.assertEquals(flowEdge.getSrc(), node1);\n    Assert.assertEquals(flowEdge.getDest(), node2);\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getConfig().getString(\"key1\"), value);\n  }\n","date":"2018-10-13 01:19:40","endLine":354,"groupId":"6123","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIfEdgeSuccessfullyAdded","params":"(Stringnode1@Stringnode2@StringedgeName@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/bd/7d3cfe772884036503ac0dbd275337c8ef4d0c.src","preCode":"  private void testIfEdgeSuccessfullyAdded(String node1, String node2, String edgeName, String value) throws ExecutionException, InterruptedException {\n    Set<FlowEdge> edgeSet = this.flowGraph.getEdges(node1);\n    Assert.assertEquals(edgeSet.size(), 1);\n    FlowEdge flowEdge = edgeSet.iterator().next();\n    Assert.assertEquals(flowEdge.getId(), Joiner.on(\":\").join(node1, node2, edgeName));\n    Assert.assertEquals(flowEdge.getSrc(), node1);\n    Assert.assertEquals(flowEdge.getDest(), node2);\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getConfig().getString(\"key1\"), value);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"NB"}],"commitId":"ccaa02c6e132a5731706a61620f04abd89be75fe","commitMessage":"@@@[GOBBLIN-646] Refactor MultiHopFlowCompiler to use SpecExecutor configs from TopologySpecMap.[]\n\nCloses #2516 from sv2000/specExecutorsRefactor\n","date":"2018-12-08 01:01:05","modifiedFileCount":"8","status":"M","submitter":"suvasude"},{"authorTime":"2018-10-13 01:19:40","codes":[{"authorDate":"2019-04-25 05:49:54","commitOrder":4,"curCode":"  public void testCreateFlowEdge() throws Exception {\n    Properties properties = new Properties();\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY,\"node1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY, \"node2\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_NAME_KEY, \"edge1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"node1:node2:edge1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_TEMPLATE_DIR_URI_KEY, \"FS:///flowEdgeTemplate\");\n\n    List<SpecExecutor> specExecutorList = new ArrayList<>();\n    Config config1 = ConfigFactory.empty().withValue(\"specStore.fs.dir\", ConfigValueFactory.fromAnyRef(\"/tmp1\")).\n        withValue(\"specExecInstance.capabilities\", ConfigValueFactory.fromAnyRef(\"s1:d1\"));\n    specExecutorList.add(new InMemorySpecExecutor(config1));\n    Config config2 = ConfigFactory.empty().withValue(\"specStore.fs.dir\", ConfigValueFactory.fromAnyRef(\"/tmp2\")).\n        withValue(\"specExecInstance.capabilities\", ConfigValueFactory.fromAnyRef(\"s2:d2\"));\n    specExecutorList.add(new InMemorySpecExecutor(config2));\n\n    FlowEdgeFactory flowEdgeFactory = new BaseFlowEdge.Factory();\n\n    Properties props = new Properties();\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    props.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(props);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    FSFlowTemplateCatalog catalog = new FSFlowTemplateCatalog(templateCatalogCfg);\n    Config edgeProps = ConfigUtils.propertiesToConfig(properties);\n    FlowEdge flowEdge = flowEdgeFactory.createFlowEdge(edgeProps, catalog, specExecutorList);\n    Assert.assertEquals(flowEdge.getSrc(), \"node1\");\n    Assert.assertEquals(flowEdge.getDest(), \"node2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(),\"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(),\"InMemorySpecExecutor\");\n  }\n","date":"2019-04-25 05:49:54","endLine":80,"groupId":"2867","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testCreateFlowEdge","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/79/067f8178b3a60760827e5b45e7e6498f1c1b4c.src","preCode":"  public void testCreateFlowEdge() throws Exception {\n    Properties properties = new Properties();\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY,\"node1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY, \"node2\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_NAME_KEY, \"edge1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"node1:node2:edge1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_TEMPLATE_DIR_URI_KEY, \"FS:///flowEdgeTemplate\");\n\n    List<SpecExecutor> specExecutorList = new ArrayList<>();\n    Config config1 = ConfigFactory.empty().withValue(\"specStore.fs.dir\", ConfigValueFactory.fromAnyRef(\"/tmp1\")).\n        withValue(\"specExecInstance.capabilities\", ConfigValueFactory.fromAnyRef(\"s1:d1\"));\n    specExecutorList.add(new InMemorySpecExecutor(config1));\n    Config config2 = ConfigFactory.empty().withValue(\"specStore.fs.dir\", ConfigValueFactory.fromAnyRef(\"/tmp2\")).\n        withValue(\"specExecInstance.capabilities\", ConfigValueFactory.fromAnyRef(\"s2:d2\"));\n    specExecutorList.add(new InMemorySpecExecutor(config2));\n\n    FlowEdgeFactory flowEdgeFactory = new BaseFlowEdge.Factory();\n\n    Properties props = new Properties();\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    props.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(props);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    FSFlowCatalog catalog = new FSFlowCatalog(templateCatalogCfg);\n    Config edgeProps = ConfigUtils.propertiesToConfig(properties);\n    FlowEdge flowEdge = flowEdgeFactory.createFlowEdge(edgeProps, catalog, specExecutorList);\n    Assert.assertEquals(flowEdge.getSrc(), \"node1\");\n    Assert.assertEquals(flowEdge.getDest(), \"node2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(),\"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(),\"InMemorySpecExecutor\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/flowgraph/BaseFlowEdgeFactoryTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2018-10-13 01:19:40","commitOrder":4,"curCode":"  private void testIfEdgeSuccessfullyAdded(String node1, String node2, String edgeName, String value) throws ExecutionException, InterruptedException {\n    Set<FlowEdge> edgeSet = this.flowGraph.getEdges(node1);\n    Assert.assertEquals(edgeSet.size(), 1);\n    FlowEdge flowEdge = edgeSet.iterator().next();\n    Assert.assertEquals(flowEdge.getId(), Joiner.on(\":\").join(node1, node2, edgeName));\n    Assert.assertEquals(flowEdge.getSrc(), node1);\n    Assert.assertEquals(flowEdge.getDest(), node2);\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getConfig().getString(\"key1\"), value);\n  }\n","date":"2018-10-13 01:19:40","endLine":354,"groupId":"6123","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIfEdgeSuccessfullyAdded","params":"(Stringnode1@Stringnode2@StringedgeName@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/bd/7d3cfe772884036503ac0dbd275337c8ef4d0c.src","preCode":"  private void testIfEdgeSuccessfullyAdded(String node1, String node2, String edgeName, String value) throws ExecutionException, InterruptedException {\n    Set<FlowEdge> edgeSet = this.flowGraph.getEdges(node1);\n    Assert.assertEquals(edgeSet.size(), 1);\n    FlowEdge flowEdge = edgeSet.iterator().next();\n    Assert.assertEquals(flowEdge.getId(), Joiner.on(\":\").join(node1, node2, edgeName));\n    Assert.assertEquals(flowEdge.getSrc(), node1);\n    Assert.assertEquals(flowEdge.getDest(), node2);\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getConfig().getString(\"key1\"), value);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":340,"status":"N"}],"commitId":"9661916684d466edf6ae499800a252c108bb9aa2","commitMessage":"@@@[GOBBLIN-748] Craftsmanship code cleaning in Gobblin Service Code\n\nDear Gobblin maintainers. \n\nPlease accept this PR. I understand that it will\nnot be reviewed until I have checked off all the\nsteps below!\n\nEssentially a bunch of renaming.  moving\nconfigurations key around.\nThings that we should agree on:\n- Configuration keys should always placed in the\nclass where they are relevant.  instead of\n`ConfigurationKeys.java` or similar things. We\nshould definitely stop doing that.\n- Naming of `FSFlowCatalog` is misleading. In fact\nit should be `FsTemplateFlowCatalog`. Also.  it\nshould not extend `FsJobCatalog`. The missing\npiece is a `FsCatalogBase`  that implement all\nFileSystem related basic functionality.  and have\n`Template` and `Job` FsCatalog extending that base\nimplementation with it own interface.\n\n\n JIRA\n- [x ] My PR addresses the following [Gobblin\nJIRA]\n    -\nhttps://issues.apache.org/jira/browse/GOBBLIN-748\n\n\n Description\n- [ x] Here are some details about my PR. \nincluding screenshots (if applicable):\n\n\n Tests\n- [ ] My PR adds the following unit tests __OR__\ndoes not need testing for this extremely good\nreason:\n\n\n Commits\n- [ ] My commits all reference JIRA issues in\ntheir subject lines.  and I have squashed multiple\ncommits if they address the same issue. In\naddition.  my commits follow the guidelines from\n\"[How to write a good git commit\nmessage](http://chris.beams.io/posts/git-\ncommit/)\":\n    1. Subject is separated from body by a blank line\n    2. Subject is limited to 50 characters\n    3. Subject does not end with a period\n    4. Subject uses the imperative mood (\"add\".  not\n\"adding\")\n    5. Body wraps at 72 characters\n    6. Body explains \"what\" and \"why\".  not \"how\"\n\nSome naive code changes made while reading through\nGaaS code: There are some work needs to be done\nfor understand master/slave interaction\n\nAdding some documentation and renaming stuff\n\nAddress comments\n\nResolving conflicts\n\nCloses #2613 from\nautumnust/craftsmanshipCleaningGaaS\n","date":"2019-04-25 05:49:54","modifiedFileCount":"26","status":"M","submitter":"autumnust"},{"authorTime":"2019-07-16 01:53:15","codes":[{"authorDate":"2019-04-25 05:49:54","commitOrder":5,"curCode":"  public void testCreateFlowEdge() throws Exception {\n    Properties properties = new Properties();\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY,\"node1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY, \"node2\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_NAME_KEY, \"edge1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"node1:node2:edge1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_TEMPLATE_DIR_URI_KEY, \"FS:///flowEdgeTemplate\");\n\n    List<SpecExecutor> specExecutorList = new ArrayList<>();\n    Config config1 = ConfigFactory.empty().withValue(\"specStore.fs.dir\", ConfigValueFactory.fromAnyRef(\"/tmp1\")).\n        withValue(\"specExecInstance.capabilities\", ConfigValueFactory.fromAnyRef(\"s1:d1\"));\n    specExecutorList.add(new InMemorySpecExecutor(config1));\n    Config config2 = ConfigFactory.empty().withValue(\"specStore.fs.dir\", ConfigValueFactory.fromAnyRef(\"/tmp2\")).\n        withValue(\"specExecInstance.capabilities\", ConfigValueFactory.fromAnyRef(\"s2:d2\"));\n    specExecutorList.add(new InMemorySpecExecutor(config2));\n\n    FlowEdgeFactory flowEdgeFactory = new BaseFlowEdge.Factory();\n\n    Properties props = new Properties();\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    props.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(props);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    FSFlowTemplateCatalog catalog = new FSFlowTemplateCatalog(templateCatalogCfg);\n    Config edgeProps = ConfigUtils.propertiesToConfig(properties);\n    FlowEdge flowEdge = flowEdgeFactory.createFlowEdge(edgeProps, catalog, specExecutorList);\n    Assert.assertEquals(flowEdge.getSrc(), \"node1\");\n    Assert.assertEquals(flowEdge.getDest(), \"node2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(),\"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(),\"InMemorySpecExecutor\");\n  }\n","date":"2019-04-25 05:49:54","endLine":80,"groupId":"101091","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testCreateFlowEdge","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/79/067f8178b3a60760827e5b45e7e6498f1c1b4c.src","preCode":"  public void testCreateFlowEdge() throws Exception {\n    Properties properties = new Properties();\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY,\"node1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY, \"node2\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_NAME_KEY, \"edge1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"node1:node2:edge1\");\n    properties.put(FlowGraphConfigurationKeys.FLOW_EDGE_TEMPLATE_DIR_URI_KEY, \"FS:///flowEdgeTemplate\");\n\n    List<SpecExecutor> specExecutorList = new ArrayList<>();\n    Config config1 = ConfigFactory.empty().withValue(\"specStore.fs.dir\", ConfigValueFactory.fromAnyRef(\"/tmp1\")).\n        withValue(\"specExecInstance.capabilities\", ConfigValueFactory.fromAnyRef(\"s1:d1\"));\n    specExecutorList.add(new InMemorySpecExecutor(config1));\n    Config config2 = ConfigFactory.empty().withValue(\"specStore.fs.dir\", ConfigValueFactory.fromAnyRef(\"/tmp2\")).\n        withValue(\"specExecInstance.capabilities\", ConfigValueFactory.fromAnyRef(\"s2:d2\"));\n    specExecutorList.add(new InMemorySpecExecutor(config2));\n\n    FlowEdgeFactory flowEdgeFactory = new BaseFlowEdge.Factory();\n\n    Properties props = new Properties();\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    props.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(props);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    FSFlowTemplateCatalog catalog = new FSFlowTemplateCatalog(templateCatalogCfg);\n    Config edgeProps = ConfigUtils.propertiesToConfig(properties);\n    FlowEdge flowEdge = flowEdgeFactory.createFlowEdge(edgeProps, catalog, specExecutorList);\n    Assert.assertEquals(flowEdge.getSrc(), \"node1\");\n    Assert.assertEquals(flowEdge.getDest(), \"node2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"),\"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"),\"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(),\"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(),\"InMemorySpecExecutor\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/flowgraph/BaseFlowEdgeFactoryTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"},{"authorDate":"2019-07-16 01:53:15","commitOrder":5,"curCode":"  private void testIfEdgeSuccessfullyAdded(String node1, String node2, String edgeName, String value) throws ExecutionException, InterruptedException {\n    Set<FlowEdge> edgeSet = this.flowGraph.getEdges(node1);\n    Assert.assertEquals(edgeSet.size(), 1);\n    FlowEdge flowEdge = edgeSet.iterator().next();\n    Assert.assertEquals(flowEdge.getId(), Joiner.on(\"_\").join(node1, node2, edgeName));\n    Assert.assertEquals(flowEdge.getSrc(), node1);\n    Assert.assertEquals(flowEdge.getDest(), node2);\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getConfig().getString(\"key1\"), value);\n  }\n","date":"2019-07-16 01:53:15","endLine":355,"groupId":"101091","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIfEdgeSuccessfullyAdded","params":"(Stringnode1@Stringnode2@StringedgeName@Stringvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c0/7b56ebf8279b0de6f4866ada86667d78a94e01.src","preCode":"  private void testIfEdgeSuccessfullyAdded(String node1, String node2, String edgeName, String value) throws ExecutionException, InterruptedException {\n    Set<FlowEdge> edgeSet = this.flowGraph.getEdges(node1);\n    Assert.assertEquals(edgeSet.size(), 1);\n    FlowEdge flowEdge = edgeSet.iterator().next();\n    Assert.assertEquals(flowEdge.getId(), Joiner.on(\":\").join(node1, node2, edgeName));\n    Assert.assertEquals(flowEdge.getSrc(), node1);\n    Assert.assertEquals(flowEdge.getDest(), node2);\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getConfig().getString(\"key1\"), value);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"M"}],"commitId":"86515b99fac8d4dd12ca99c79674f0faf572736f","commitMessage":"@@@[GOBBLIN-810] Include flow edge ID in job name\n\nCloses #2675 from jack-moseley/job-name-conflict\n","date":"2019-07-16 01:53:15","modifiedFileCount":"5","status":"M","submitter":"Jack Moseley"}]
