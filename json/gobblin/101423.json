[{"authorTime":"2017-08-01 01:32:22","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void testGetAlias() throws IOException {\n    List<State> states = this.stateStore.getAll(\"testStore\", \"testTable1\");\n    Assert.assertEquals(states.size(), 3);\n\n    Assert.assertEquals(states.get(0).getProp(\"k1\"), \"v1\");\n    Assert.assertEquals(states.get(1).getProp(\"k2\"), \"v2\");\n    Assert.assertEquals(states.get(2).getProp(\"k3\"), \"v3\");\n  }\n","date":"2017-07-31 15:51:25","endLine":118,"groupId":"2476","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/11/154c1f47dbbedf28197cc837f122fe6796ee6e.src","preCode":"  public void testGetAlias() throws IOException {\n    List<State> states = this.stateStore.getAll(\"testStore\", \"testTable1\");\n    Assert.assertEquals(states.size(), 3);\n\n    Assert.assertEquals(states.get(0).getProp(\"k1\"), \"v1\");\n    Assert.assertEquals(states.get(1).getProp(\"k2\"), \"v2\");\n    Assert.assertEquals(states.get(2).getProp(\"k3\"), \"v3\");\n  }\n","realPath":"gobblin-metastore/src/test/java/org/apache/gobblin/metastore/FsStateStoreTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"NB"},{"authorDate":"2017-08-01 01:32:22","commitOrder":2,"curCode":"  public void testBackwardsCompat() throws IOException {\n    \r\n    Config bwConfig = ConfigFactory.load(config);\n    URL path = getClass().getResource(\"/backwardsCompatTestStore\");\n    Assert.assertNotNull(path);\n\n    bwConfig = bwConfig.withValue(ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY,\n        ConfigValueFactory.fromAnyRef(path.toString()));\n\n    StateStore<State> bwStateStore = stateStoreFactory.createStateStore(bwConfig, State.class);\n    Assert.assertTrue(bwStateStore.exists(\"testStore\", \"testTable\"));\n\n    List<State> states = bwStateStore.getAll(\"testStore\", \"testTable\");\n    Assert.assertEquals(states.size(), 3);\n\n    Assert.assertEquals(states.get(0).getProp(\"k1\"), \"v1\");\n    Assert.assertEquals(states.get(1).getProp(\"k2\"), \"v2\");\n    Assert.assertEquals(states.get(2).getProp(\"k3\"), \"v3\");\n  }\n","date":"2017-08-01 01:32:22","endLine":141,"groupId":"2476","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBackwardsCompat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/21/c81ec4089e8a895f7c409e4899c06c88fa5bc8.src","preCode":"  public void testBackwardsCompat() throws IOException {\n    \r\n    Config bwConfig = ConfigFactory.load(config);\n    URL path = getClass().getResource(\"/backwardsCompatTestStore\");\n    Assert.assertNotNull(path);\n\n    bwConfig = bwConfig.withValue(ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY,\n        ConfigValueFactory.fromAnyRef(path.toString()));\n\n    StateStore<State> bwStateStore = stateStoreFactory.createStateStore(bwConfig, State.class);\n    Assert.assertTrue(bwStateStore.exists(\"testStore\", \"testTable\"));\n\n    List<State> states = bwStateStore.getAll(\"testStore\", \"testTable\");\n    Assert.assertEquals(states.size(), 3);\n\n    Assert.assertEquals(states.get(0).getProp(\"k1\"), \"v1\");\n    Assert.assertEquals(states.get(1).getProp(\"k2\"), \"v2\");\n    Assert.assertEquals(states.get(2).getProp(\"k3\"), \"v3\");\n  }\n","realPath":"gobblin-metastore/src/test/java/org/apache/gobblin/metastore/FsStateStoreTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"B"}],"commitId":"f96379e11219589bf87659228c48a5054f751032","commitMessage":"@@@Merge pull request #2032 from abti/move_packages_to_apache\n","date":"2017-08-01 01:32:22","modifiedFileCount":"2","status":"M","submitter":"Abhishek Tiwari"},{"authorTime":"2019-12-11 07:56:13","codes":[{"authorDate":"2019-12-11 07:56:13","commitOrder":3,"curCode":"  public void testGetAlias() throws IOException {\n    List<State> states = this.stateStore.getAll(\"testStore\", \"testTable1\");\n    Assert.assertEquals(states.size(), 3);\n\n    Assert.assertEquals(states.get(0).getProp(\"k1\"), \"v1\");\n    Assert.assertEquals(states.get(0).getId(),  \"s1\");\n    Assert.assertEquals(states.get(1).getProp(\"k2\"), \"v2\");\n    Assert.assertEquals(states.get(1).getId(),  \"s2\");\n    Assert.assertEquals(states.get(2).getProp(\"k3\"), \"v3\");\n    Assert.assertEquals(states.get(2).getId(),  \"s3\");\n  }\n","date":"2019-12-11 07:56:13","endLine":130,"groupId":"101423","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testGetAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2f/53c512e962dd99c0f365f76b74b2fc9d2aa5dc.src","preCode":"  public void testGetAlias() throws IOException {\n    List<State> states = this.stateStore.getAll(\"testStore\", \"testTable1\");\n    Assert.assertEquals(states.size(), 3);\n\n    Assert.assertEquals(states.get(0).getProp(\"k1\"), \"v1\");\n    Assert.assertEquals(states.get(1).getProp(\"k2\"), \"v2\");\n    Assert.assertEquals(states.get(2).getProp(\"k3\"), \"v3\");\n  }\n","realPath":"gobblin-metastore/src/test/java/org/apache/gobblin/metastore/FsStateStoreTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2019-12-11 07:56:13","commitOrder":3,"curCode":"  public void testBackwardsCompat() throws IOException {\n    \r\n    Config bwConfig = ConfigFactory.load(config);\n    URL path = getClass().getResource(\"/backwardsCompatTestStore\");\n    Assert.assertNotNull(path);\n\n    bwConfig = bwConfig.withValue(ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY,\n        ConfigValueFactory.fromAnyRef(path.toString()));\n\n    StateStore<State> bwStateStore = stateStoreFactory.createStateStore(bwConfig, State.class);\n    Assert.assertTrue(bwStateStore.exists(\"testStore\", \"testTable\"));\n\n    List<State> states = bwStateStore.getAll(\"testStore\", \"testTable\");\n    Assert.assertEquals(states.size(), 3);\n\n    Assert.assertEquals(states.get(0).getProp(\"k1\"), \"v1\");\n    Assert.assertEquals(states.get(0).getId(),  \"s1\");\n    Assert.assertEquals(states.get(1).getProp(\"k2\"), \"v2\");\n    Assert.assertEquals(states.get(1).getId(),  \"s2\");\n    Assert.assertEquals(states.get(2).getProp(\"k3\"), \"v3\");\n    Assert.assertEquals(states.get(2).getId(),  \"s3\");\n  }\n","date":"2019-12-11 07:56:13","endLine":166,"groupId":"101423","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testBackwardsCompat","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2f/53c512e962dd99c0f365f76b74b2fc9d2aa5dc.src","preCode":"  public void testBackwardsCompat() throws IOException {\n    \r\n    Config bwConfig = ConfigFactory.load(config);\n    URL path = getClass().getResource(\"/backwardsCompatTestStore\");\n    Assert.assertNotNull(path);\n\n    bwConfig = bwConfig.withValue(ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY,\n        ConfigValueFactory.fromAnyRef(path.toString()));\n\n    StateStore<State> bwStateStore = stateStoreFactory.createStateStore(bwConfig, State.class);\n    Assert.assertTrue(bwStateStore.exists(\"testStore\", \"testTable\"));\n\n    List<State> states = bwStateStore.getAll(\"testStore\", \"testTable\");\n    Assert.assertEquals(states.size(), 3);\n\n    Assert.assertEquals(states.get(0).getProp(\"k1\"), \"v1\");\n    Assert.assertEquals(states.get(1).getProp(\"k2\"), \"v2\");\n    Assert.assertEquals(states.get(2).getProp(\"k3\"), \"v3\");\n  }\n","realPath":"gobblin-metastore/src/test/java/org/apache/gobblin/metastore/FsStateStoreTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"2304f11e033febd4ab3389937ef8ff48b27e99ed","commitMessage":"@@@[GOBBLIN-1002] Set state id when deserializing state from Gobblin state store[]\n\nCloses #2847 from sv2000/checkPointableWatermark\n","date":"2019-12-11 07:56:13","modifiedFileCount":"7","status":"M","submitter":"sv2000"}]
