[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public static Optional<String> getConfigStoreUri(Properties properties) {\n    Optional<String> configStoreUri =\n        StringUtils.isNotBlank(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) ? Optional.of(\n            properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) : Optional.<String>absent();\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_ENABLED,\n        ConfigurationKeys.DEFAULT_CONFIG_MANAGEMENT_STORE_ENABLED))) {\n      configStoreUri = Optional.<String>absent();\n    }\n    return configStoreUri;\n  }\n","date":"2017-07-31 15:51:25","endLine":75,"groupId":"4683","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getConfigStoreUri","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4e/ea468d9275a17582ec9738b2653a50debb64df.src","preCode":"  public static Optional<String> getConfigStoreUri(Properties properties) {\n    Optional<String> configStoreUri =\n        StringUtils.isNotBlank(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) ? Optional.of(\n            properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) : Optional.<String>absent();\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_ENABLED,\n        ConfigurationKeys.DEFAULT_CONFIG_MANAGEMENT_STORE_ENABLED))) {\n      configStoreUri = Optional.<String>absent();\n    }\n    return configStoreUri;\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/source/extractor/extract/kafka/ConfigStoreUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  protected HiveDatasetFinder(FileSystem fs, Properties properties, HiveMetastoreClientPool clientPool,\n      EventSubmitter eventSubmitter, ConfigClient configClient) throws IOException {\n\n    this.properties = properties;\n    this.clientPool = clientPool;\n    this.fs = fs;\n\n    String whitelistKey = HIVE_DATASET_PREFIX + \".\" + WhitelistBlacklist.WHITELIST;\n    Preconditions.checkArgument(properties.containsKey(DB_KEY) || properties.containsKey(whitelistKey),\n        String.format(\"Must specify %s or %s.\", DB_KEY, whitelistKey));\n\n    Config config = ConfigFactory.parseProperties(properties);\n\n    if (properties.containsKey(DB_KEY)) {\n      this.whitelistBlacklist = new WhitelistBlacklist(this.properties.getProperty(DB_KEY) + \".\"\n          + this.properties.getProperty(TABLE_PATTERN_KEY, DEFAULT_TABLE_PATTERN), \"\");\n    } else {\n      this.whitelistBlacklist = new WhitelistBlacklist(config.getConfig(HIVE_DATASET_PREFIX));\n    }\n\n    this.eventSubmitter = Optional.fromNullable(eventSubmitter);\n    this.configStoreUri = StringUtils.isNotBlank(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) ?\n        Optional.of(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) : Optional.<String>absent();\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_ENABLED,\n        ConfigurationKeys.DEFAULT_CONFIG_MANAGEMENT_STORE_ENABLED))) {\n      this.configStoreUri = Optional.<String>absent();\n    }\n    this.datasetConfigPrefix = properties.getProperty(HIVE_DATASET_CONFIG_PREFIX_KEY, DEFAULT_HIVE_DATASET_CONIFG_PREFIX);\n    this.configClient = configClient;\n    try {\n      this.configStoreDatasetUriBuilder =\n          properties.containsKey(CONFIG_STORE_DATASET_URI_BUILDER_CLASS) ? (Function<Table, String>) ConstructorUtils\n              .invokeConstructor(Class.forName(properties.getProperty(CONFIG_STORE_DATASET_URI_BUILDER_CLASS)))\n              : DEFAULT_CONFIG_STORE_DATASET_URI_BUILDER;\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n    this.jobConfig = ConfigUtils.propertiesToConfig(properties);\n  }\n","date":"2017-07-31 15:51:25","endLine":184,"groupId":"4683","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"HiveDatasetFinder","params":"(FileSystemfs@Propertiesproperties@HiveMetastoreClientPoolclientPool@EventSubmittereventSubmitter@ConfigClientconfigClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/98/134b8eb8b8d6b1c3b53c187a01462b248df36e.src","preCode":"  protected HiveDatasetFinder(FileSystem fs, Properties properties, HiveMetastoreClientPool clientPool,\n      EventSubmitter eventSubmitter, ConfigClient configClient) throws IOException {\n\n    this.properties = properties;\n    this.clientPool = clientPool;\n    this.fs = fs;\n\n    String whitelistKey = HIVE_DATASET_PREFIX + \".\" + WhitelistBlacklist.WHITELIST;\n    Preconditions.checkArgument(properties.containsKey(DB_KEY) || properties.containsKey(whitelistKey),\n        String.format(\"Must specify %s or %s.\", DB_KEY, whitelistKey));\n\n    Config config = ConfigFactory.parseProperties(properties);\n\n    if (properties.containsKey(DB_KEY)) {\n      this.whitelistBlacklist = new WhitelistBlacklist(this.properties.getProperty(DB_KEY) + \".\"\n          + this.properties.getProperty(TABLE_PATTERN_KEY, DEFAULT_TABLE_PATTERN), \"\");\n    } else {\n      this.whitelistBlacklist = new WhitelistBlacklist(config.getConfig(HIVE_DATASET_PREFIX));\n    }\n\n    this.eventSubmitter = Optional.fromNullable(eventSubmitter);\n    this.configStoreUri = StringUtils.isNotBlank(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) ?\n        Optional.of(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) : Optional.<String>absent();\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_ENABLED,\n        ConfigurationKeys.DEFAULT_CONFIG_MANAGEMENT_STORE_ENABLED))) {\n      this.configStoreUri = Optional.<String>absent();\n    }\n    this.datasetConfigPrefix = properties.getProperty(HIVE_DATASET_CONFIG_PREFIX_KEY, DEFAULT_HIVE_DATASET_CONIFG_PREFIX);\n    this.configClient = configClient;\n    try {\n      this.configStoreDatasetUriBuilder =\n          properties.containsKey(CONFIG_STORE_DATASET_URI_BUILDER_CLASS) ? (Function<Table, String>) ConstructorUtils\n              .invokeConstructor(Class.forName(properties.getProperty(CONFIG_STORE_DATASET_URI_BUILDER_CLASS)))\n              : DEFAULT_CONFIG_STORE_DATASET_URI_BUILDER;\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n    this.jobConfig = ConfigUtils.propertiesToConfig(properties);\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/copy/hive/HiveDatasetFinder.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2020-05-08 05:35:15","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public static Optional<String> getConfigStoreUri(Properties properties) {\n    Optional<String> configStoreUri =\n        StringUtils.isNotBlank(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) ? Optional.of(\n            properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) : Optional.<String>absent();\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_ENABLED,\n        ConfigurationKeys.DEFAULT_CONFIG_MANAGEMENT_STORE_ENABLED))) {\n      configStoreUri = Optional.<String>absent();\n    }\n    return configStoreUri;\n  }\n","date":"2017-07-31 15:51:25","endLine":75,"groupId":"10455","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getConfigStoreUri","params":"(Propertiesproperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4e/ea468d9275a17582ec9738b2653a50debb64df.src","preCode":"  public static Optional<String> getConfigStoreUri(Properties properties) {\n    Optional<String> configStoreUri =\n        StringUtils.isNotBlank(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) ? Optional.of(\n            properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) : Optional.<String>absent();\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_ENABLED,\n        ConfigurationKeys.DEFAULT_CONFIG_MANAGEMENT_STORE_ENABLED))) {\n      configStoreUri = Optional.<String>absent();\n    }\n    return configStoreUri;\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/source/extractor/extract/kafka/ConfigStoreUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2020-05-08 05:35:15","commitOrder":2,"curCode":"  protected HiveDatasetFinder(FileSystem fs, Properties properties, HiveMetastoreClientPool clientPool,\n      EventSubmitter eventSubmitter, ConfigClient configClient) throws IOException {\n\n    this.properties = properties;\n    this.clientPool = clientPool;\n    this.fs = fs;\n\n    String whitelistKey = HIVE_DATASET_PREFIX + \".\" + WhitelistBlacklist.WHITELIST;\n    Preconditions.checkArgument(properties.containsKey(DB_KEY) || properties.containsKey(whitelistKey),\n        String.format(\"Must specify %s or %s.\", DB_KEY, whitelistKey));\n\n    Config config = ConfigFactory.parseProperties(properties);\n\n    if (properties.containsKey(DB_KEY)) {\n      this.whitelistBlacklist = new WhitelistBlacklist(this.properties.getProperty(DB_KEY) + \".\"\n          + this.properties.getProperty(TABLE_PATTERN_KEY, DEFAULT_TABLE_PATTERN), \"\");\n    } else {\n      this.whitelistBlacklist = new WhitelistBlacklist(config.getConfig(HIVE_DATASET_PREFIX));\n    }\n\n    this.eventSubmitter = Optional.fromNullable(eventSubmitter);\n    this.configStoreUri = StringUtils.isNotBlank(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) ?\n        Optional.of(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) : Optional.<String>absent();\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_ENABLED,\n        ConfigurationKeys.DEFAULT_CONFIG_MANAGEMENT_STORE_ENABLED))) {\n      this.configStoreUri = Optional.<String>absent();\n    }\n    this.datasetConfigPrefix = properties.getProperty(HIVE_DATASET_CONFIG_PREFIX_KEY, DEFAULT_HIVE_DATASET_CONIFG_PREFIX);\n    this.configClient = configClient;\n    try {\n      this.configStoreDatasetUriBuilder =\n          properties.containsKey(CONFIG_STORE_DATASET_URI_BUILDER_CLASS) ? (Function<Table, String>) ConstructorUtils\n              .invokeConstructor(Class.forName(properties.getProperty(CONFIG_STORE_DATASET_URI_BUILDER_CLASS)))\n              : DEFAULT_CONFIG_STORE_DATASET_URI_BUILDER;\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n    this.jobConfig = ConfigUtils.propertiesToConfig(properties);\n\n    String tableFilterPredicate = properties.getProperty(TABLE_FILTER);\n    if (StringUtils.isNotEmpty(tableFilterPredicate)) {\n      this.tableFilter = Optional.of((Predicate<Table>)GobblinConstructorUtils.invokeConstructor(\n          Predicate.class, tableFilterPredicate, properties));\n    } else {\n      this.tableFilter = Optional.absent();\n    }\n  }\n","date":"2020-05-08 05:35:15","endLine":195,"groupId":"10455","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"HiveDatasetFinder","params":"(FileSystemfs@Propertiesproperties@HiveMetastoreClientPoolclientPool@EventSubmittereventSubmitter@ConfigClientconfigClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e0/4783fd60f2a61cd84ee513d1ea76091dd2bd38.src","preCode":"  protected HiveDatasetFinder(FileSystem fs, Properties properties, HiveMetastoreClientPool clientPool,\n      EventSubmitter eventSubmitter, ConfigClient configClient) throws IOException {\n\n    this.properties = properties;\n    this.clientPool = clientPool;\n    this.fs = fs;\n\n    String whitelistKey = HIVE_DATASET_PREFIX + \".\" + WhitelistBlacklist.WHITELIST;\n    Preconditions.checkArgument(properties.containsKey(DB_KEY) || properties.containsKey(whitelistKey),\n        String.format(\"Must specify %s or %s.\", DB_KEY, whitelistKey));\n\n    Config config = ConfigFactory.parseProperties(properties);\n\n    if (properties.containsKey(DB_KEY)) {\n      this.whitelistBlacklist = new WhitelistBlacklist(this.properties.getProperty(DB_KEY) + \".\"\n          + this.properties.getProperty(TABLE_PATTERN_KEY, DEFAULT_TABLE_PATTERN), \"\");\n    } else {\n      this.whitelistBlacklist = new WhitelistBlacklist(config.getConfig(HIVE_DATASET_PREFIX));\n    }\n\n    this.eventSubmitter = Optional.fromNullable(eventSubmitter);\n    this.configStoreUri = StringUtils.isNotBlank(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) ?\n        Optional.of(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_URI)) : Optional.<String>absent();\n    if (!Boolean.valueOf(properties.getProperty(ConfigurationKeys.CONFIG_MANAGEMENT_STORE_ENABLED,\n        ConfigurationKeys.DEFAULT_CONFIG_MANAGEMENT_STORE_ENABLED))) {\n      this.configStoreUri = Optional.<String>absent();\n    }\n    this.datasetConfigPrefix = properties.getProperty(HIVE_DATASET_CONFIG_PREFIX_KEY, DEFAULT_HIVE_DATASET_CONIFG_PREFIX);\n    this.configClient = configClient;\n    try {\n      this.configStoreDatasetUriBuilder =\n          properties.containsKey(CONFIG_STORE_DATASET_URI_BUILDER_CLASS) ? (Function<Table, String>) ConstructorUtils\n              .invokeConstructor(Class.forName(properties.getProperty(CONFIG_STORE_DATASET_URI_BUILDER_CLASS)))\n              : DEFAULT_CONFIG_STORE_DATASET_URI_BUILDER;\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException\n        | ClassNotFoundException e) {\n      throw new RuntimeException(e);\n    }\n    this.jobConfig = ConfigUtils.propertiesToConfig(properties);\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/copy/hive/HiveDatasetFinder.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"4d76f4544e936af1ec1871143c95d86e25c239b0","commitMessage":"@@@[GOBBLIN-1142] Hive Distcp support filter on partitioned or snapshot tables\n\nCloses #2979 from zxcware/hive-distcp\n","date":"2020-05-08 05:35:15","modifiedFileCount":"2","status":"M","submitter":"zhchen"}]
