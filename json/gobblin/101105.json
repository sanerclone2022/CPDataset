[{"authorTime":"2020-11-04 06:14:06","codes":[{"authorDate":"2020-10-24 03:56:19","commitOrder":10,"curCode":"  public void setup() throws Exception {\n    \r\n    cleanUpDir(COMMON_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_1_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_1_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_2_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_2_SPEC_STORE_PARENT_DIR);\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    Properties node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    Properties node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    \r\n    this.node1GobblinServiceManager = new TestGobblinServiceManager(\"CoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), Optional.of(new Path(NODE_1_SERVICE_WORK_DIR)));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = new TestGobblinServiceManager(\"CoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), Optional.of(new Path(NODE_2_SERVICE_WORK_DIR)));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","date":"2020-10-24 03:56:19","endLine":187,"groupId":"2852","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/cd/10a82aa4ff386f2171c72678b88a1458a75f81.src","preCode":"  public void setup() throws Exception {\n    \r\n    cleanUpDir(COMMON_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_1_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_1_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_2_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_2_SPEC_STORE_PARENT_DIR);\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    Properties node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    Properties node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    \r\n    this.node1GobblinServiceManager = new TestGobblinServiceManager(\"CoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), Optional.of(new Path(NODE_1_SERVICE_WORK_DIR)));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = new TestGobblinServiceManager(\"CoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), Optional.of(new Path(NODE_2_SERVICE_WORK_DIR)));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"NB"},{"authorDate":"2020-11-04 06:14:06","commitOrder":10,"curCode":"  public void setup() throws Exception {\n    port1 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n    port2 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n\n    BASE_PATH1.deleteOnExit();\n    BASE_PATH2.deleteOnExit();\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    commonServiceCoreProperties.put(ServiceConfigKeys.FORCE_LEADER, true);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_URL_PREFIX, PREFIX);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_NAME, SERVICE_NAME);\n\n    node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node1ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port1);\n\n    node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node2ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port2);\n\n    \r\n    this.node1GobblinServiceManager = new GobblinServiceManager(\"RedirectCoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), Optional.of(new Path(NODE_1_SERVICE_WORK_DIR)));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = new GobblinServiceManager(\"RedirectCoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), Optional.of(new Path(NODE_2_SERVICE_WORK_DIR)));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","date":"2020-11-04 06:14:06","endLine":188,"groupId":"2448","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ce/4cf71565d7cc488431ea6c291b8bec57829bd9.src","preCode":"  public void setup() throws Exception {\n    port1 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n    port2 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n\n    BASE_PATH1.deleteOnExit();\n    BASE_PATH2.deleteOnExit();\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    commonServiceCoreProperties.put(ServiceConfigKeys.FORCE_LEADER, true);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_URL_PREFIX, PREFIX);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_NAME, SERVICE_NAME);\n\n    node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node1ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port1);\n\n    node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node2ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port2);\n\n    \r\n    this.node1GobblinServiceManager = new GobblinServiceManager(\"RedirectCoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), Optional.of(new Path(NODE_1_SERVICE_WORK_DIR)));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = new GobblinServiceManager(\"RedirectCoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), Optional.of(new Path(NODE_2_SERVICE_WORK_DIR)));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceRedirectTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"}],"commitId":"f2767242fe863307feaf68332f0d3617f30e8e4b","commitMessage":"@@@[GOBBLIN-1285] Add option to only accept requests to leader node and redirect requests in the client\n\nCloses #3124 from jack-moseley/gaas-redirect\n","date":"2020-11-04 06:14:06","modifiedFileCount":"9","status":"M","submitter":"Jack Moseley"},{"authorTime":"2021-06-09 01:31:08","codes":[{"authorDate":"2021-06-09 01:31:08","commitOrder":11,"curCode":"  public void setup() throws Exception {\n    \r\n    cleanUpDir(COMMON_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_1_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_1_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_2_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_2_SPEC_STORE_PARENT_DIR);\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_GIT_CONFIG_MONITOR_ENABLED_KEY, false);\n\n    Properties node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    Properties node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    \r\n    this.node1GobblinServiceManager = GobblinServiceManager.create(\"CoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), new Path(NODE_1_SERVICE_WORK_DIR));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = GobblinServiceManager.create(\"CoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), new Path(NODE_2_SERVICE_WORK_DIR));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","date":"2021-06-09 01:31:08","endLine":181,"groupId":"4475","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/42/63b31cffa282a0e94171191b465826a8ccdc65.src","preCode":"  public void setup() throws Exception {\n    \r\n    cleanUpDir(COMMON_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_1_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_1_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_2_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_2_SPEC_STORE_PARENT_DIR);\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    Properties node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    Properties node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    \r\n    this.node1GobblinServiceManager = new TestGobblinServiceManager(\"CoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), Optional.of(new Path(NODE_1_SERVICE_WORK_DIR)));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = new TestGobblinServiceManager(\"CoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), Optional.of(new Path(NODE_2_SERVICE_WORK_DIR)));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"},{"authorDate":"2021-06-09 01:31:08","commitOrder":11,"curCode":"  public void setup() throws Exception {\n    port1 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n    port2 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n\n    BASE_PATH1.deleteOnExit();\n    BASE_PATH2.deleteOnExit();\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    commonServiceCoreProperties.put(ServiceConfigKeys.FORCE_LEADER, true);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_URL_PREFIX, PREFIX);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_NAME, SERVICE_NAME);\n\n    node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node1ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port1);\n\n    node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node2ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port2);\n\n    \r\n    this.node1GobblinServiceManager = GobblinServiceManager.create(\"RedirectCoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), new Path(NODE_1_SERVICE_WORK_DIR));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = GobblinServiceManager.create(\"RedirectCoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), new Path(NODE_2_SERVICE_WORK_DIR));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","date":"2021-06-09 01:31:08","endLine":187,"groupId":"2448","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/00/3e3188af43b88e5c939669e947644c0cc7c172.src","preCode":"  public void setup() throws Exception {\n    port1 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n    port2 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n\n    BASE_PATH1.deleteOnExit();\n    BASE_PATH2.deleteOnExit();\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    commonServiceCoreProperties.put(ServiceConfigKeys.FORCE_LEADER, true);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_URL_PREFIX, PREFIX);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_NAME, SERVICE_NAME);\n\n    node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node1ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port1);\n\n    node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node2ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port2);\n\n    \r\n    this.node1GobblinServiceManager = new GobblinServiceManager(\"RedirectCoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), Optional.of(new Path(NODE_1_SERVICE_WORK_DIR)));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = new GobblinServiceManager(\"RedirectCoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), Optional.of(new Path(NODE_2_SERVICE_WORK_DIR)));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceRedirectTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"bf37c76f6da228ae96b0c405d184617f03d2c198","commitMessage":"@@@[GOBBLIN-1444] Use Guice as DI framework in Gobblin service\n\nPreviously.  to initialize Gobblin service.  we used\na mixture\nof dependency injection.  direct class creation and\nconfig-based\nclass creation. In this change.  we unify the\nservice initialization\nby moving towards using dependency injection(DI)\nwith Guice everywhere.\n\nUsing DI will help with (1) unit testing; (2)\noverriding classes in the\nmiddle of the dependency with company-specific\nimplementations.  and\n(3) will improve code readability.  as dependencies\nbetween classes\nbecome visible from the outside and explicit.\n\nWe also move away from name-based injection for\nclasses. Name-based\ninjection is useful when code needs several\ndifferent implementations\nof the same interface. In our use case.  we had\nonly one implementation\nfor each service that can be active. Name-based\ninjection was used for\ncompany-specific overrides.  but there is a better\nway to do it - with\nGuice module overrides.\n\nThere are still several improvements left to be\ndone to have a full\nGuice migration.  but we'll make them in separate\ncommits to limit the\nPR size.\n\nCloses #3281 from aplex/guice-migration\n","date":"2021-06-09 01:31:08","modifiedFileCount":"37","status":"M","submitter":"aprokofiev"},{"authorTime":"2021-08-12 12:01:05","codes":[{"authorDate":"2021-08-12 12:01:05","commitOrder":12,"curCode":"  public void setup() throws Exception {\n    \r\n    cleanUpDir(COMMON_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_1_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_1_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_2_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_2_SPEC_STORE_PARENT_DIR);\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n\n    mysql = new MySQLContainer(\"mysql:\" + TestServiceDatabaseConfig.MysqlVersion);\n    mysql.start();\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_URL_KEY, mysql.getJdbcUrl());\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_USERNAME, mysql.getUsername());\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_PASSWORD, mysql.getPassword());\n\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_GIT_CONFIG_MONITOR_ENABLED_KEY, false);\n\n    Properties node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    Properties node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    \r\n    this.node1GobblinServiceManager = GobblinServiceManager.create(\"CoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), new Path(NODE_1_SERVICE_WORK_DIR));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = GobblinServiceManager.create(\"CoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), new Path(NODE_2_SERVICE_WORK_DIR));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","date":"2021-08-12 12:01:05","endLine":193,"groupId":"4475","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/3a/03be76dc7431eec70ce03909a506ad769fb9b6.src","preCode":"  public void setup() throws Exception {\n    \r\n    cleanUpDir(COMMON_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_1_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_1_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_2_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_2_SPEC_STORE_PARENT_DIR);\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_GIT_CONFIG_MONITOR_ENABLED_KEY, false);\n\n    Properties node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    Properties node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    \r\n    this.node1GobblinServiceManager = GobblinServiceManager.create(\"CoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), new Path(NODE_1_SERVICE_WORK_DIR));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = GobblinServiceManager.create(\"CoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), new Path(NODE_2_SERVICE_WORK_DIR));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2021-08-12 12:01:05","commitOrder":12,"curCode":"  public void setup() throws Exception {\n    port1 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n    port2 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n\n    BASE_PATH1.deleteOnExit();\n    BASE_PATH2.deleteOnExit();\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n\n    mysql = new MySQLContainer(\"mysql:\" + TestServiceDatabaseConfig.MysqlVersion);\n    mysql.start();\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_URL_KEY, mysql.getJdbcUrl());\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_USERNAME, mysql.getUsername());\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_PASSWORD, mysql.getPassword());\n\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    commonServiceCoreProperties.put(ServiceConfigKeys.FORCE_LEADER, true);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_URL_PREFIX, PREFIX);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_NAME, SERVICE_NAME);\n\n    node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node1ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port1);\n\n    node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node2ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port2);\n\n    \r\n    this.node1GobblinServiceManager = GobblinServiceManager.create(\"RedirectCoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), new Path(NODE_1_SERVICE_WORK_DIR));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = GobblinServiceManager.create(\"RedirectCoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), new Path(NODE_2_SERVICE_WORK_DIR));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","date":"2021-08-12 12:01:05","endLine":198,"groupId":"2448","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4f/6fbded9d9c9e8ec8b87bf4a9e161ea2d618d03.src","preCode":"  public void setup() throws Exception {\n    port1 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n    port2 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n\n    BASE_PATH1.deleteOnExit();\n    BASE_PATH2.deleteOnExit();\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    commonServiceCoreProperties.put(ServiceConfigKeys.FORCE_LEADER, true);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_URL_PREFIX, PREFIX);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_NAME, SERVICE_NAME);\n\n    node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node1ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port1);\n\n    node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node2ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port2);\n\n    \r\n    this.node1GobblinServiceManager = GobblinServiceManager.create(\"RedirectCoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), new Path(NODE_1_SERVICE_WORK_DIR));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = GobblinServiceManager.create(\"RedirectCoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), new Path(NODE_2_SERVICE_WORK_DIR));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceRedirectTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"de3a6941d0d9ab0eeb1035a8d8ea04aaa65bf07e","commitMessage":"@@@[GOBBLIN-1457] Add persistence for troubleshooter in Gobblin service (#3327)\n\nPreviously.  Gobblin service kept the last few job issues in memory.\nIn this commit.  we add MySql-based persistence for job issues.\n\nWe also introduce Flyway-based migrations to Gobblin service DB.  so that\nwe can adjust the table schemas in the future.  and add new tables\nin a consistent way.","date":"2021-08-12 12:01:05","modifiedFileCount":"18","status":"M","submitter":"Alex Prokofiev"},{"authorTime":"2021-08-12 12:01:05","codes":[{"authorDate":"2021-08-26 08:02:53","commitOrder":13,"curCode":"  public void setup() throws Exception {\n    \r\n    cleanUpDir(COMMON_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_1_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_1_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_2_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_2_SPEC_STORE_PARENT_DIR);\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n\n    mysql = new MySQLContainer(\"mysql:\" + TestServiceDatabaseConfig.MysqlVersion);\n    mysql.start();\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_URL_KEY, mysql.getJdbcUrl());\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_USERNAME, mysql.getUsername());\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_PASSWORD, mysql.getPassword());\n\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_GIT_CONFIG_MONITOR_ENABLED_KEY, false);\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_FLOW_CATALOG_LOCAL_COMMIT, false);\n\n    Properties node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    Properties node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    \r\n    this.node1GobblinServiceManager = GobblinServiceManager.create(\"CoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), new Path(NODE_1_SERVICE_WORK_DIR));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = GobblinServiceManager.create(\"CoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), new Path(NODE_2_SERVICE_WORK_DIR));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","date":"2021-08-26 08:02:53","endLine":194,"groupId":"101105","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/29/782af114d2a482309f98fbe5528c8398b55677.src","preCode":"  public void setup() throws Exception {\n    \r\n    cleanUpDir(COMMON_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_1_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_1_SPEC_STORE_PARENT_DIR);\n\n    \r\n    cleanUpDir(NODE_2_SERVICE_WORK_DIR);\n    cleanUpDir(NODE_2_SPEC_STORE_PARENT_DIR);\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n\n    mysql = new MySQLContainer(\"mysql:\" + TestServiceDatabaseConfig.MysqlVersion);\n    mysql.start();\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_URL_KEY, mysql.getJdbcUrl());\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_USERNAME, mysql.getUsername());\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_PASSWORD, mysql.getPassword());\n\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_GIT_CONFIG_MONITOR_ENABLED_KEY, false);\n\n    Properties node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    Properties node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"QuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n\n    \r\n    this.node1GobblinServiceManager = GobblinServiceManager.create(\"CoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), new Path(NODE_1_SERVICE_WORK_DIR));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = GobblinServiceManager.create(\"CoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), new Path(NODE_2_SERVICE_WORK_DIR));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2021-08-12 12:01:05","commitOrder":13,"curCode":"  public void setup() throws Exception {\n    port1 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n    port2 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n\n    BASE_PATH1.deleteOnExit();\n    BASE_PATH2.deleteOnExit();\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n\n    mysql = new MySQLContainer(\"mysql:\" + TestServiceDatabaseConfig.MysqlVersion);\n    mysql.start();\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_URL_KEY, mysql.getJdbcUrl());\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_USERNAME, mysql.getUsername());\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_PASSWORD, mysql.getPassword());\n\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    commonServiceCoreProperties.put(ServiceConfigKeys.FORCE_LEADER, true);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_URL_PREFIX, PREFIX);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_NAME, SERVICE_NAME);\n\n    node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node1ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port1);\n\n    node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node2ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port2);\n\n    \r\n    this.node1GobblinServiceManager = GobblinServiceManager.create(\"RedirectCoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), new Path(NODE_1_SERVICE_WORK_DIR));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = GobblinServiceManager.create(\"RedirectCoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), new Path(NODE_2_SERVICE_WORK_DIR));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","date":"2021-08-12 12:01:05","endLine":198,"groupId":"101105","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4f/6fbded9d9c9e8ec8b87bf4a9e161ea2d618d03.src","preCode":"  public void setup() throws Exception {\n    port1 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n    port2 = Integer.toString(new PortUtils.ServerSocketPortLocator().random());\n\n    BASE_PATH1.deleteOnExit();\n    BASE_PATH2.deleteOnExit();\n\n    \r\n    this.testingZKServer = new TestingServer(-1);\n    logger.info(\"Testing ZK Server listening on: \" + testingZKServer.getConnectString());\n    HelixUtils.createGobblinHelixCluster(testingZKServer.getConnectString(), TEST_HELIX_CLUSTER_NAME);\n\n    ITestMetastoreDatabase testMetastoreDatabase = TestMetastoreDatabaseFactory.get();\n\n    Properties commonServiceCoreProperties = new Properties();\n\n    mysql = new MySQLContainer(\"mysql:\" + TestServiceDatabaseConfig.MysqlVersion);\n    mysql.start();\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_URL_KEY, mysql.getJdbcUrl());\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_USERNAME, mysql.getUsername());\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_DB_PASSWORD, mysql.getPassword());\n\n    commonServiceCoreProperties.put(ServiceConfigKeys.ZK_CONNECTION_STRING_KEY, testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_CLUSTER_NAME_KEY, TEST_HELIX_CLUSTER_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.HELIX_INSTANCE_NAME_KEY, \"GaaS_\" + UUID.randomUUID().toString());\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_TOPOLOGY_NAMES_KEY , TEST_GOBBLIN_EXECUTOR_NAME);\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".description\",\n        \"StandaloneTestExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".version\",\n        \"1\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".uri\",\n        \"gobblinExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecutorInstance\",\n        \"org.gobblin.service.InMemorySpecExecutor\");\n    commonServiceCoreProperties.put(ServiceConfigKeys.TOPOLOGY_FACTORY_PREFIX +  TEST_GOBBLIN_EXECUTOR_NAME + \".specExecInstance.capabilities\",\n        TEST_SOURCE_NAME + \":\" + TEST_SINK_NAME);\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_USER_KEY, \"testUser\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_PASSWORD_KEY, \"testPassword\");\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_DB_URL_KEY, testMetastoreDatabase.getJdbcUrl());\n    commonServiceCoreProperties.put(\"zookeeper.connect\", testingZKServer.getConnectString());\n    commonServiceCoreProperties.put(ConfigurationKeys.STATE_STORE_FACTORY_CLASS_KEY, MysqlJobStatusStateStoreFactory.class.getName());\n    commonServiceCoreProperties.put(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_STATUS_MONITOR_ENABLED_KEY, false);\n\n    commonServiceCoreProperties.put(ServiceConfigKeys.FORCE_LEADER, true);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_URL_PREFIX, PREFIX);\n    commonServiceCoreProperties.put(ServiceConfigKeys.SERVICE_NAME, SERVICE_NAME);\n\n    node1ServiceCoreProperties = new Properties();\n    node1ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node1ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_1_TOPOLOGY_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_1_FLOW_SPEC_STORE_DIR);\n    node1ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_1_JOB_STATUS_STATE_STORE_DIR);\n    node1ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler1\");\n    node1ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node1ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port1);\n\n    node2ServiceCoreProperties = new Properties();\n    node2ServiceCoreProperties.putAll(commonServiceCoreProperties);\n    node2ServiceCoreProperties.put(ConfigurationKeys.TOPOLOGYSPEC_STORE_DIR_KEY, NODE_2_TOPOLOGY_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, NODE_2_FLOW_SPEC_STORE_DIR);\n    node2ServiceCoreProperties.put(FsJobStatusRetriever.CONF_PREFIX + \".\" + ConfigurationKeys.STATE_STORE_ROOT_DIR_KEY, NODE_2_JOB_STATUS_STATE_STORE_DIR);\n    node2ServiceCoreProperties.put(QUARTZ_INSTANCE_NAME, \"RedirectQuartzScheduler2\");\n    node2ServiceCoreProperties.put(QUARTZ_THREAD_POOL_COUNT, 3);\n    node2ServiceCoreProperties.put(ServiceConfigKeys.SERVICE_PORT, port2);\n\n    \r\n    this.node1GobblinServiceManager = GobblinServiceManager.create(\"RedirectCoreService1\", \"1\",\n        ConfigUtils.propertiesToConfig(node1ServiceCoreProperties), new Path(NODE_1_SERVICE_WORK_DIR));\n    this.node1GobblinServiceManager.start();\n\n    \r\n    this.node2GobblinServiceManager = GobblinServiceManager.create(\"RedirectCoreService2\", \"2\",\n        ConfigUtils.propertiesToConfig(node2ServiceCoreProperties), new Path(NODE_2_SERVICE_WORK_DIR));\n    this.node2GobblinServiceManager.start();\n\n    \r\n    Map<String, String> transportClientProperties = Maps.newHashMap();\n    transportClientProperties.put(HttpClientFactory.HTTP_REQUEST_TIMEOUT, \"10000\");\n    this.node1FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node1GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n\n    \r\n    this.node2FlowConfigClient = new FlowConfigClient(String.format(\"http://localhost:%s/\",\n        this.node2GobblinServiceManager.restliServer.getPort()), transportClientProperties);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceRedirectTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"N"}],"commitId":"4e226475fd93a4e3adfa9cc625d7ca15b36873d4","commitMessage":"@@@[GOBBLIN-1526] Fix bug with binding local commit property (#3377)\n\nLocal commit property was bound to the wrong thing.  which would cause it to always be false because java conversion from string to boolean will always be false unless the string value is \"true\".","date":"2021-08-26 08:02:53","modifiedFileCount":"2","status":"M","submitter":"Jack Moseley"}]
