[{"authorTime":"2020-06-02 02:29:14","codes":[{"authorDate":"2020-02-29 03:22:08","commitOrder":5,"curCode":"  public void testBadUpdate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testBadUpdate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    logger.info(\"+++++++++++++++++++ testBadUpdate END\");\n  }\n","date":"2020-02-29 03:22:08","endLine":496,"groupId":"2582","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/48/bac9f7898153d21b52bdee390f4d7871ce4977.src","preCode":"  public void testBadUpdate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testBadUpdate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    logger.info(\"+++++++++++++++++++ testBadUpdate END\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"NB"},{"authorDate":"2020-06-02 02:29:14","commitOrder":5,"curCode":"  public void testBadUpdate() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME).setFlowName(TEST_DUMMY_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.flowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n    cleanUpDir(FLOW_SPEC_STORE_DIR);\n  }\n","date":"2020-06-02 02:29:14","endLine":358,"groupId":"4522","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/28/2ede637d9e586d0742929e6c8ef3011bf0f10c.src","preCode":"  public void testBadUpdate() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME).setFlowName(TEST_DUMMY_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.flowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n    cleanUpDir(FLOW_SPEC_STORE_DIR);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/GobblinServiceManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"B"}],"commitId":"5cd38ac8d26dd4bccd8582a7182893f29ab5a009","commitMessage":"@@@[GOBBLIN-1162] Provide an option to allow slow containers to commit su?\n\nCloses #3002 from sv2000/containerSuicide\n","date":"2020-06-02 02:29:14","modifiedFileCount":"10","status":"M","submitter":"sv2000"},{"authorTime":"2020-06-02 05:44:20","codes":[{"authorDate":"2020-02-29 03:22:08","commitOrder":6,"curCode":"  public void testBadUpdate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testBadUpdate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    logger.info(\"+++++++++++++++++++ testBadUpdate END\");\n  }\n","date":"2020-02-29 03:22:08","endLine":496,"groupId":"101137","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/48/bac9f7898153d21b52bdee390f4d7871ce4977.src","preCode":"  public void testBadUpdate() throws Exception {\n    logger.info(\"+++++++++++++++++++ testBadUpdate START\");\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME_1).setFlowName(TEST_DUMMY_FLOW_NAME_1))\n        .setTemplateUris(TEST_TEMPLATE_URI_1).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE_1))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.node1FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    try {\n      this.node2FlowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n\n    logger.info(\"+++++++++++++++++++ testBadUpdate END\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GobblinServiceHATest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"N"},{"authorDate":"2020-06-02 05:44:20","commitOrder":6,"curCode":"  public void testBadUpdate() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME).setFlowName(TEST_DUMMY_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.flowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n  }\n","date":"2020-06-02 05:44:20","endLine":463,"groupId":"101137","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBadUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d1/e793f27a5e3184ec503a6a7bbc49541998be9b.src","preCode":"  public void testBadUpdate() throws Exception {\n    Map<String, String> flowProperties = Maps.newHashMap();\n    flowProperties.put(\"param1\", \"value1b\");\n    flowProperties.put(\"param2\", \"value2b\");\n\n    FlowConfig flowConfig = new FlowConfig()\n        .setId(new FlowId().setFlowGroup(TEST_DUMMY_GROUP_NAME).setFlowName(TEST_DUMMY_FLOW_NAME))\n        .setTemplateUris(TEST_TEMPLATE_URI).setSchedule(new Schedule().setCronSchedule(TEST_SCHEDULE))\n        .setProperties(new StringMap(flowProperties));\n\n    try {\n      this.flowConfigClient.updateFlowConfig(flowConfig);\n    } catch (RestLiResponseException e) {\n      Assert.assertEquals(e.getStatus(), HttpStatus.NOT_FOUND_404);\n    }\n    cleanUpDir(FLOW_SPEC_STORE_DIR);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/GobblinServiceManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"M"}],"commitId":"6bc395c3c1428852a30b5add8db7402be7b4b1ae","commitMessage":"@@@[GOBBLIN-1160] No spec delete on gobblin service start\n\nCloses #3011 from arjun4084346/noSpecRemoveOnStart\n","date":"2020-06-02 05:44:20","modifiedFileCount":"7","status":"M","submitter":"Arjun"}]
