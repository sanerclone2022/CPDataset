[{"authorTime":"2017-10-14 10:12:36","codes":[{"authorDate":"2018-01-03 05:12:21","commitOrder":3,"curCode":"  void testGenerateSpecifiedPartitionFromSinglePointHistogram() {\n    SalesforceSource.Histogram histogram = new SalesforceSource.Histogram();\n    histogram.add(new SalesforceSource.HistogramGroup(\"2014-02-13-00:00:00\", 10));\n    SalesforceSource source = new SalesforceSource();\n\n    long expectedHighWatermark = 20170407152123L;\n    long lowWatermark = 20140213000000L;\n    int maxPartitions = 2;\n    String expectedPartitions = \"20140213000000,20170407152123\";\n    String actualPartitions = source.generateSpecifiedPartitions(histogram, 1, maxPartitions, lowWatermark, expectedHighWatermark);\n    Assert.assertEquals(actualPartitions, expectedPartitions);\n  }\n","date":"2018-01-03 05:12:21","endLine":36,"groupId":"2440","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGenerateSpecifiedPartitionFromSinglePointHistogram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/80/b0bc327230060cde4d027beb13ab6036ff1044.src","preCode":"  void testGenerateSpecifiedPartitionFromSinglePointHistogram() {\n    SalesforceSource.Histogram histogram = new SalesforceSource.Histogram();\n    histogram.add(new SalesforceSource.HistogramGroup(\"2014-02-13-00:00:00\", 10));\n    SalesforceSource source = new SalesforceSource();\n\n    long expectedHighWatermark = 20170407152123L;\n    long lowWatermark = 20140213000000L;\n    int maxPartitions = 2;\n    String expectedPartitions = \"20140213000000,20170407152123\";\n    String actualPartitions = source.generateSpecifiedPartitions(histogram, 1, maxPartitions, lowWatermark, expectedHighWatermark);\n    Assert.assertEquals(actualPartitions, expectedPartitions);\n  }\n","realPath":"gobblin-salesforce/src/test/java/org/apache/gobblin/salesforce/SalesforceSourceTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":25,"status":"B"},{"authorDate":"2017-10-14 10:12:36","commitOrder":3,"curCode":"  void testGenerateSpecifiedPartition() {\n    SalesforceSource.Histogram histogram = new SalesforceSource.Histogram();\n    for (String group: HISTOGRAM.split(\", \")) {\n      String[] groupInfo = group.split(\"::\");\n      histogram.add(new SalesforceSource.HistogramGroup(groupInfo[0], Integer.parseInt(groupInfo[1])));\n    }\n    SalesforceSource source = new SalesforceSource();\n\n    long expectedHighWatermark = 20170407152123L;\n    long lowWatermark = 20140213000000L;\n    int maxPartitions = 5;\n    String expectedPartitions = \"20140213000000,20170224000000,20170228000000,20170301000000,20170407000000,20170407152123\";\n    String actualPartitions = source.generateSpecifiedPartitions(histogram, 1, maxPartitions, lowWatermark, expectedHighWatermark);\n    Assert.assertEquals(actualPartitions, expectedPartitions);\n  }\n","date":"2017-10-14 10:12:36","endLine":39,"groupId":"2440","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGenerateSpecifiedPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/8e/45c6b3b984a59b653b83e731a711392bb1d49e.src","preCode":"  void testGenerateSpecifiedPartition() {\n    SalesforceSource.Histogram histogram = new SalesforceSource.Histogram();\n    for (String group: HISTOGRAM.split(\", \")) {\n      String[] groupInfo = group.split(\"::\");\n      histogram.add(new SalesforceSource.HistogramGroup(groupInfo[0], Integer.parseInt(groupInfo[1])));\n    }\n    SalesforceSource source = new SalesforceSource();\n\n    long expectedHighWatermark = 20170407152123L;\n    long lowWatermark = 20140213000000L;\n    int maxPartitions = 5;\n    String expectedPartitions = \"20140213000000,20170224000000,20170228000000,20170301000000,20170407000000,20170407152123\";\n    String actualPartitions = source.generateSpecifiedPartitions(histogram, 1, maxPartitions, lowWatermark, expectedHighWatermark);\n    Assert.assertEquals(actualPartitions, expectedPartitions);\n  }\n","realPath":"gobblin-salesforce/src/test/java/org/apache/gobblin/salesforce/SalesforceSourceTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":25,"status":"NB"}],"commitId":"6f1a3aff6149d8d09eb5b66f6d7b4402e0c04d3b","commitMessage":"@@@[GOBBLIN-353] Fix low watermark overridden by high watermark in SalesforceSource\n\nCloses #2226 from zxcware/sales\n","date":"2018-01-03 05:12:21","modifiedFileCount":"2","status":"M","submitter":"zhchen"},{"authorTime":"2018-03-23 05:04:33","codes":[{"authorDate":"2018-03-23 05:04:33","commitOrder":4,"curCode":"  void testGenerateSpecifiedPartitionFromSinglePointHistogram() {\n    SalesforceSource.Histogram histogram = new SalesforceSource.Histogram();\n    histogram.add(new SalesforceSource.HistogramGroup(\"2014-02-13-00:00:00\", 10));\n    SalesforceSource source = new SalesforceSource(null);\n\n    long expectedHighWatermark = 20170407152123L;\n    long lowWatermark = 20140213000000L;\n    int maxPartitions = 2;\n    String expectedPartitions = \"20140213000000,20170407152123\";\n    String actualPartitions = source.generateSpecifiedPartitions(histogram, 1, maxPartitions, lowWatermark, expectedHighWatermark);\n    Assert.assertEquals(actualPartitions, expectedPartitions);\n  }\n","date":"2018-03-23 05:04:33","endLine":69,"groupId":"2440","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGenerateSpecifiedPartitionFromSinglePointHistogram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a0/3476b659e4c4deb8d60d4cf5223f18b4c88647.src","preCode":"  void testGenerateSpecifiedPartitionFromSinglePointHistogram() {\n    SalesforceSource.Histogram histogram = new SalesforceSource.Histogram();\n    histogram.add(new SalesforceSource.HistogramGroup(\"2014-02-13-00:00:00\", 10));\n    SalesforceSource source = new SalesforceSource();\n\n    long expectedHighWatermark = 20170407152123L;\n    long lowWatermark = 20140213000000L;\n    int maxPartitions = 2;\n    String expectedPartitions = \"20140213000000,20170407152123\";\n    String actualPartitions = source.generateSpecifiedPartitions(histogram, 1, maxPartitions, lowWatermark, expectedHighWatermark);\n    Assert.assertEquals(actualPartitions, expectedPartitions);\n  }\n","realPath":"gobblin-salesforce/src/test/java/org/apache/gobblin/salesforce/SalesforceSourceTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2018-03-23 05:04:33","commitOrder":4,"curCode":"  void testGenerateSpecifiedPartition() {\n    SalesforceSource.Histogram histogram = new SalesforceSource.Histogram();\n    for (String group: HISTOGRAM.split(\", \")) {\n      String[] groupInfo = group.split(\"::\");\n      histogram.add(new SalesforceSource.HistogramGroup(groupInfo[0], Integer.parseInt(groupInfo[1])));\n    }\n    SalesforceSource source = new SalesforceSource(null);\n\n    long expectedHighWatermark = 20170407152123L;\n    long lowWatermark = 20140213000000L;\n    int maxPartitions = 5;\n    String expectedPartitions = \"20140213000000,20170224000000,20170228000000,20170301000000,20170407000000,20170407152123\";\n    String actualPartitions = source.generateSpecifiedPartitions(histogram, 1, maxPartitions, lowWatermark, expectedHighWatermark);\n    Assert.assertEquals(actualPartitions, expectedPartitions);\n  }\n","date":"2018-03-23 05:04:33","endLine":86,"groupId":"2440","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGenerateSpecifiedPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a0/3476b659e4c4deb8d60d4cf5223f18b4c88647.src","preCode":"  void testGenerateSpecifiedPartition() {\n    SalesforceSource.Histogram histogram = new SalesforceSource.Histogram();\n    for (String group: HISTOGRAM.split(\", \")) {\n      String[] groupInfo = group.split(\"::\");\n      histogram.add(new SalesforceSource.HistogramGroup(groupInfo[0], Integer.parseInt(groupInfo[1])));\n    }\n    SalesforceSource source = new SalesforceSource();\n\n    long expectedHighWatermark = 20170407152123L;\n    long lowWatermark = 20140213000000L;\n    int maxPartitions = 5;\n    String expectedPartitions = \"20140213000000,20170224000000,20170228000000,20170301000000,20170407000000,20170407152123\";\n    String actualPartitions = source.generateSpecifiedPartitions(histogram, 1, maxPartitions, lowWatermark, expectedHighWatermark);\n    Assert.assertEquals(actualPartitions, expectedPartitions);\n  }\n","realPath":"gobblin-salesforce/src/test/java/org/apache/gobblin/salesforce/SalesforceSourceTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"f51bf00b4fc904ecfa3ccdc74cad8e2a237ce3b6","commitMessage":"@@@[GOBBLIN-430] Add lineage in SalesforceSource\n\nCloses #2308 from zxcware/saleslineage\n","date":"2018-03-23 05:04:33","modifiedFileCount":"3","status":"M","submitter":"zhchen"},{"authorTime":"2018-03-23 09:23:07","codes":[{"authorDate":"2018-03-23 09:23:07","commitOrder":5,"curCode":"  void testGenerateSpecifiedPartitionFromSinglePointHistogram() {\n    SalesforceSource.Histogram histogram = new SalesforceSource.Histogram();\n    histogram.add(new SalesforceSource.HistogramGroup(\"2014-02-13-00:00:00\", 10));\n    SalesforceSource source = new SalesforceSource();\n\n    long expectedHighWatermark = 20170407152123L;\n    long lowWatermark = 20140213000000L;\n    int maxPartitions = 2;\n    String expectedPartitions = \"20140213000000,20170407152123\";\n    String actualPartitions = source.generateSpecifiedPartitions(histogram, 1, maxPartitions, lowWatermark, expectedHighWatermark);\n    Assert.assertEquals(actualPartitions, expectedPartitions);\n  }\n","date":"2018-03-23 09:23:07","endLine":69,"groupId":"10910","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGenerateSpecifiedPartitionFromSinglePointHistogram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/5e/9fbba7cde9acc05c3a7ca60fa6ccdb37a9fbfa.src","preCode":"  void testGenerateSpecifiedPartitionFromSinglePointHistogram() {\n    SalesforceSource.Histogram histogram = new SalesforceSource.Histogram();\n    histogram.add(new SalesforceSource.HistogramGroup(\"2014-02-13-00:00:00\", 10));\n    SalesforceSource source = new SalesforceSource(null);\n\n    long expectedHighWatermark = 20170407152123L;\n    long lowWatermark = 20140213000000L;\n    int maxPartitions = 2;\n    String expectedPartitions = \"20140213000000,20170407152123\";\n    String actualPartitions = source.generateSpecifiedPartitions(histogram, 1, maxPartitions, lowWatermark, expectedHighWatermark);\n    Assert.assertEquals(actualPartitions, expectedPartitions);\n  }\n","realPath":"gobblin-salesforce/src/test/java/org/apache/gobblin/salesforce/SalesforceSourceTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2018-03-23 09:23:07","commitOrder":5,"curCode":"  void testGenerateSpecifiedPartition() {\n    SalesforceSource.Histogram histogram = new SalesforceSource.Histogram();\n    for (String group: HISTOGRAM.split(\", \")) {\n      String[] groupInfo = group.split(\"::\");\n      histogram.add(new SalesforceSource.HistogramGroup(groupInfo[0], Integer.parseInt(groupInfo[1])));\n    }\n    SalesforceSource source = new SalesforceSource();\n\n    long expectedHighWatermark = 20170407152123L;\n    long lowWatermark = 20140213000000L;\n    int maxPartitions = 5;\n    String expectedPartitions = \"20140213000000,20170224000000,20170228000000,20170301000000,20170407000000,20170407152123\";\n    String actualPartitions = source.generateSpecifiedPartitions(histogram, 1, maxPartitions, lowWatermark, expectedHighWatermark);\n    Assert.assertEquals(actualPartitions, expectedPartitions);\n  }\n","date":"2018-03-23 09:23:07","endLine":86,"groupId":"10910","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGenerateSpecifiedPartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/5e/9fbba7cde9acc05c3a7ca60fa6ccdb37a9fbfa.src","preCode":"  void testGenerateSpecifiedPartition() {\n    SalesforceSource.Histogram histogram = new SalesforceSource.Histogram();\n    for (String group: HISTOGRAM.split(\", \")) {\n      String[] groupInfo = group.split(\"::\");\n      histogram.add(new SalesforceSource.HistogramGroup(groupInfo[0], Integer.parseInt(groupInfo[1])));\n    }\n    SalesforceSource source = new SalesforceSource(null);\n\n    long expectedHighWatermark = 20170407152123L;\n    long lowWatermark = 20140213000000L;\n    int maxPartitions = 5;\n    String expectedPartitions = \"20140213000000,20170224000000,20170228000000,20170301000000,20170407000000,20170407152123\";\n    String actualPartitions = source.generateSpecifiedPartitions(histogram, 1, maxPartitions, lowWatermark, expectedHighWatermark);\n    Assert.assertEquals(actualPartitions, expectedPartitions);\n  }\n","realPath":"gobblin-salesforce/src/test/java/org/apache/gobblin/salesforce/SalesforceSourceTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"10dcf688aac5fbbfbd37afb13b607a9d776f30d2","commitMessage":"@@@[GOBBLIN-436] Add default constructor for SalesforceSource\n\nCloses #2314 from yukuai518/s2\n","date":"2018-03-23 09:23:07","modifiedFileCount":"2","status":"M","submitter":"Kuai Yu"}]
