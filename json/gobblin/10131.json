[{"authorTime":"2019-05-15 00:06:14","codes":[{"authorDate":"2019-05-15 00:06:14","commitOrder":1,"curCode":"  public void testTwoWorkflows() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n\n    WorkflowConfig mockWorkflowConfig1 = mock(WorkflowConfig.class);\n    JobDag mockJobDag1 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag1.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\", \"job2\"));\n    Mockito.when(mockWorkflowConfig1.getJobDag()).thenReturn(mockJobDag1);\n\n    WorkflowContext mockWorkflowContext1 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext1.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext1);\n\n    JobContext mockJobContext1 = mock(JobContext.class);\n    Mockito.when(mockJobContext1.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext1.getAssignedParticipant(2)).thenReturn(\"worker1\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext1);\n\n    JobContext mockJobContext2 = mock(JobContext.class);\n    Mockito.when(mockJobContext2.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(3)));\n    Mockito.when(mockJobContext2.getAssignedParticipant(3)).thenReturn(\"worker2\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job2\")).thenReturn(mockJobContext2);\n\n    WorkflowConfig mockWorkflowConfig2 = mock(WorkflowConfig.class);\n    JobDag mockJobDag2 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag2.getAllNodes()).thenReturn(ImmutableSet.of(\"job3\"));\n    Mockito.when(mockWorkflowConfig2.getJobDag()).thenReturn(mockJobDag2);\n\n    WorkflowContext mockWorkflowContext2 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext2.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow2\")).thenReturn(mockWorkflowContext2);\n\n    JobContext mockJobContext3 = mock(JobContext.class);\n    Mockito.when(mockJobContext3.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(4), Integer.valueOf(5)));\n    Mockito.when(mockJobContext3.getAssignedParticipant(4)).thenReturn(\"worker3\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job3\")).thenReturn(mockJobContext3);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig1, \"workflow2\", mockWorkflowConfig2));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService, 1, 1, 10);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1)).requestTargetNumberOfContainers(5,\n        ImmutableSet.of(\"worker1\", \"worker2\", \"worker3\"));\n  }\n","date":"2019-05-15 00:06:14","endLine":181,"groupId":"6966","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTwoWorkflows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2a/36646928efcbdf3cd828e97b9f0da6e4ef71e8.src","preCode":"  public void testTwoWorkflows() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n\n    WorkflowConfig mockWorkflowConfig1 = mock(WorkflowConfig.class);\n    JobDag mockJobDag1 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag1.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\", \"job2\"));\n    Mockito.when(mockWorkflowConfig1.getJobDag()).thenReturn(mockJobDag1);\n\n    WorkflowContext mockWorkflowContext1 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext1.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext1);\n\n    JobContext mockJobContext1 = mock(JobContext.class);\n    Mockito.when(mockJobContext1.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext1.getAssignedParticipant(2)).thenReturn(\"worker1\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext1);\n\n    JobContext mockJobContext2 = mock(JobContext.class);\n    Mockito.when(mockJobContext2.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(3)));\n    Mockito.when(mockJobContext2.getAssignedParticipant(3)).thenReturn(\"worker2\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job2\")).thenReturn(mockJobContext2);\n\n    WorkflowConfig mockWorkflowConfig2 = mock(WorkflowConfig.class);\n    JobDag mockJobDag2 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag2.getAllNodes()).thenReturn(ImmutableSet.of(\"job3\"));\n    Mockito.when(mockWorkflowConfig2.getJobDag()).thenReturn(mockJobDag2);\n\n    WorkflowContext mockWorkflowContext2 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext2.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow2\")).thenReturn(mockWorkflowContext2);\n\n    JobContext mockJobContext3 = mock(JobContext.class);\n    Mockito.when(mockJobContext3.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(4), Integer.valueOf(5)));\n    Mockito.when(mockJobContext3.getAssignedParticipant(4)).thenReturn(\"worker3\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job3\")).thenReturn(mockJobContext3);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig1, \"workflow2\", mockWorkflowConfig2));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService, 1, 1, 10);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1)).requestTargetNumberOfContainers(5,\n        ImmutableSet.of(\"worker1\", \"worker2\", \"worker3\"));\n  }\n","realPath":"gobblin-yarn/src/test/java/org/apache/gobblin/yarn/YarnAutoScalingManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"},{"authorDate":"2019-05-15 00:06:14","commitOrder":1,"curCode":"  public void testNotInProgress() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n\n    WorkflowConfig mockWorkflowConfig1 = mock(WorkflowConfig.class);\n    JobDag mockJobDag1 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag1.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\", \"job2\"));\n    Mockito.when(mockWorkflowConfig1.getJobDag()).thenReturn(mockJobDag1);\n\n    WorkflowContext mockWorkflowContext1 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext1.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext1);\n\n    JobContext mockJobContext1 = mock(JobContext.class);\n    Mockito.when(mockJobContext1.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext1.getAssignedParticipant(2)).thenReturn(\"worker1\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext1);\n\n    JobContext mockJobContext2 = mock(JobContext.class);\n    Mockito.when(mockJobContext2.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(3)));\n    Mockito.when(mockJobContext2.getAssignedParticipant(3)).thenReturn(\"worker2\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job2\")).thenReturn(mockJobContext2);\n\n    WorkflowConfig mockWorkflowConfig2 = mock(WorkflowConfig.class);\n    JobDag mockJobDag2 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag2.getAllNodes()).thenReturn(ImmutableSet.of(\"job3\"));\n    Mockito.when(mockWorkflowConfig2.getJobDag()).thenReturn(mockJobDag2);\n\n    WorkflowContext mockWorkflowContext2 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext2.getWorkflowState()).thenReturn(TaskState.COMPLETED);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow2\")).thenReturn(mockWorkflowContext2);\n\n    JobContext mockJobContext3 = mock(JobContext.class);\n    Mockito.when(mockJobContext3.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(4), Integer.valueOf(5)));\n    Mockito.when(mockJobContext3.getAssignedParticipant(4)).thenReturn(\"worker3\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job3\")).thenReturn(mockJobContext3);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig1, \"workflow2\", mockWorkflowConfig2));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService, 1, 1, 10);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1)).requestTargetNumberOfContainers(3,\n        ImmutableSet.of(\"worker1\", \"worker2\"));\n  }\n","date":"2019-05-15 00:06:14","endLine":243,"groupId":"3789","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2a/36646928efcbdf3cd828e97b9f0da6e4ef71e8.src","preCode":"  public void testNotInProgress() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n\n    WorkflowConfig mockWorkflowConfig1 = mock(WorkflowConfig.class);\n    JobDag mockJobDag1 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag1.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\", \"job2\"));\n    Mockito.when(mockWorkflowConfig1.getJobDag()).thenReturn(mockJobDag1);\n\n    WorkflowContext mockWorkflowContext1 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext1.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext1);\n\n    JobContext mockJobContext1 = mock(JobContext.class);\n    Mockito.when(mockJobContext1.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext1.getAssignedParticipant(2)).thenReturn(\"worker1\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext1);\n\n    JobContext mockJobContext2 = mock(JobContext.class);\n    Mockito.when(mockJobContext2.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(3)));\n    Mockito.when(mockJobContext2.getAssignedParticipant(3)).thenReturn(\"worker2\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job2\")).thenReturn(mockJobContext2);\n\n    WorkflowConfig mockWorkflowConfig2 = mock(WorkflowConfig.class);\n    JobDag mockJobDag2 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag2.getAllNodes()).thenReturn(ImmutableSet.of(\"job3\"));\n    Mockito.when(mockWorkflowConfig2.getJobDag()).thenReturn(mockJobDag2);\n\n    WorkflowContext mockWorkflowContext2 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext2.getWorkflowState()).thenReturn(TaskState.COMPLETED);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow2\")).thenReturn(mockWorkflowContext2);\n\n    JobContext mockJobContext3 = mock(JobContext.class);\n    Mockito.when(mockJobContext3.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(4), Integer.valueOf(5)));\n    Mockito.when(mockJobContext3.getAssignedParticipant(4)).thenReturn(\"worker3\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job3\")).thenReturn(mockJobContext3);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig1, \"workflow2\", mockWorkflowConfig2));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService, 1, 1, 10);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1)).requestTargetNumberOfContainers(3,\n        ImmutableSet.of(\"worker1\", \"worker2\"));\n  }\n","realPath":"gobblin-yarn/src/test/java/org/apache/gobblin/yarn/YarnAutoScalingManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"B"}],"commitId":"56930d78947a23baf6884839baee36aea33486e9","commitMessage":"@@@[GOBBLIN-762] Add automatic scaling for Gobblin on YARN\n\nCloses #2626 from htran1/yarn_auto_scale\n","date":"2019-05-15 00:06:14","modifiedFileCount":"4","status":"B","submitter":"Hung Tran"},{"authorTime":"2020-03-10 00:42:14","codes":[{"authorDate":"2020-03-10 00:42:14","commitOrder":2,"curCode":"  public void testTwoWorkflows() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n\n    WorkflowConfig mockWorkflowConfig1 = mock(WorkflowConfig.class);\n    JobDag mockJobDag1 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag1.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\", \"job2\"));\n    Mockito.when(mockWorkflowConfig1.getJobDag()).thenReturn(mockJobDag1);\n\n    WorkflowContext mockWorkflowContext1 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext1.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext1);\n\n    JobContext mockJobContext1 = mock(JobContext.class);\n    Mockito.when(mockJobContext1.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext1.getAssignedParticipant(2)).thenReturn(\"GobblinYarnTaskRunner-1\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext1);\n\n    JobContext mockJobContext2 = mock(JobContext.class);\n    Mockito.when(mockJobContext2.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(3)));\n    Mockito.when(mockJobContext2.getAssignedParticipant(3)).thenReturn(\"GobblinYarnTaskRunner-2\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job2\")).thenReturn(mockJobContext2);\n\n    WorkflowConfig mockWorkflowConfig2 = mock(WorkflowConfig.class);\n    JobDag mockJobDag2 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag2.getAllNodes()).thenReturn(ImmutableSet.of(\"job3\"));\n    Mockito.when(mockWorkflowConfig2.getJobDag()).thenReturn(mockJobDag2);\n\n    WorkflowContext mockWorkflowContext2 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext2.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow2\")).thenReturn(mockWorkflowContext2);\n\n    JobContext mockJobContext3 = mock(JobContext.class);\n    Mockito.when(mockJobContext3.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(4), Integer.valueOf(5)));\n    Mockito.when(mockJobContext3.getAssignedParticipant(4)).thenReturn(\"GobblinYarnTaskRunner-3\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job3\")).thenReturn(mockJobContext3);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig1, \"workflow2\", mockWorkflowConfig2));\n\n    HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);\n    Mockito.when(helixDataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(\"cluster\"));\n    Mockito.when(helixDataAccessor.getChildValuesMap(Mockito.any()))\n        .thenReturn(ImmutableMap.of(\"GobblinYarnTaskRunner-1\", new HelixProperty(\"\"),\n            \"GobblinYarnTaskRunner-2\", new HelixProperty(\"\"),\n            \"GobblinYarnTaskRunner-3\", new HelixProperty(\"\")));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService,\n            1, 1, 10, noopQueue, helixDataAccessor);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1)).requestTargetNumberOfContainers(5,\n        ImmutableSet.of(\"GobblinYarnTaskRunner-1\", \"GobblinYarnTaskRunner-2\", \"GobblinYarnTaskRunner-3\"));\n  }\n","date":"2020-03-10 00:42:14","endLine":211,"groupId":"6966","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTwoWorkflows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ba/6c1db378e39307c57cb50478e960ae26542f0a.src","preCode":"  public void testTwoWorkflows() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n\n    WorkflowConfig mockWorkflowConfig1 = mock(WorkflowConfig.class);\n    JobDag mockJobDag1 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag1.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\", \"job2\"));\n    Mockito.when(mockWorkflowConfig1.getJobDag()).thenReturn(mockJobDag1);\n\n    WorkflowContext mockWorkflowContext1 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext1.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext1);\n\n    JobContext mockJobContext1 = mock(JobContext.class);\n    Mockito.when(mockJobContext1.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext1.getAssignedParticipant(2)).thenReturn(\"worker1\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext1);\n\n    JobContext mockJobContext2 = mock(JobContext.class);\n    Mockito.when(mockJobContext2.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(3)));\n    Mockito.when(mockJobContext2.getAssignedParticipant(3)).thenReturn(\"worker2\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job2\")).thenReturn(mockJobContext2);\n\n    WorkflowConfig mockWorkflowConfig2 = mock(WorkflowConfig.class);\n    JobDag mockJobDag2 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag2.getAllNodes()).thenReturn(ImmutableSet.of(\"job3\"));\n    Mockito.when(mockWorkflowConfig2.getJobDag()).thenReturn(mockJobDag2);\n\n    WorkflowContext mockWorkflowContext2 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext2.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow2\")).thenReturn(mockWorkflowContext2);\n\n    JobContext mockJobContext3 = mock(JobContext.class);\n    Mockito.when(mockJobContext3.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(4), Integer.valueOf(5)));\n    Mockito.when(mockJobContext3.getAssignedParticipant(4)).thenReturn(\"worker3\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job3\")).thenReturn(mockJobContext3);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig1, \"workflow2\", mockWorkflowConfig2));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService, 1, 1, 10);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1)).requestTargetNumberOfContainers(5,\n        ImmutableSet.of(\"worker1\", \"worker2\", \"worker3\"));\n  }\n","realPath":"gobblin-yarn/src/test/java/org/apache/gobblin/yarn/YarnAutoScalingManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2020-03-10 00:42:14","commitOrder":2,"curCode":"  public void testNotInProgress() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n\n    WorkflowConfig mockWorkflowConfig1 = mock(WorkflowConfig.class);\n    JobDag mockJobDag1 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag1.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\", \"job2\"));\n    Mockito.when(mockWorkflowConfig1.getJobDag()).thenReturn(mockJobDag1);\n\n    WorkflowContext mockWorkflowContext1 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext1.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext1);\n\n    JobContext mockJobContext1 = mock(JobContext.class);\n    Mockito.when(mockJobContext1.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext1.getAssignedParticipant(2)).thenReturn(\"GobblinYarnTaskRunner-1\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext1);\n\n    JobContext mockJobContext2 = mock(JobContext.class);\n    Mockito.when(mockJobContext2.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(3)));\n    Mockito.when(mockJobContext2.getAssignedParticipant(3)).thenReturn(\"GobblinYarnTaskRunner-2\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job2\")).thenReturn(mockJobContext2);\n\n    WorkflowConfig mockWorkflowConfig2 = mock(WorkflowConfig.class);\n    JobDag mockJobDag2 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag2.getAllNodes()).thenReturn(ImmutableSet.of(\"job3\"));\n    Mockito.when(mockWorkflowConfig2.getJobDag()).thenReturn(mockJobDag2);\n\n    WorkflowContext mockWorkflowContext2 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext2.getWorkflowState()).thenReturn(TaskState.COMPLETED);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow2\")).thenReturn(mockWorkflowContext2);\n\n    JobContext mockJobContext3 = mock(JobContext.class);\n    Mockito.when(mockJobContext3.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(4), Integer.valueOf(5)));\n    Mockito.when(mockJobContext3.getAssignedParticipant(4)).thenReturn(\"GobblinYarnTaskRunner-3\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job3\")).thenReturn(mockJobContext3);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig1, \"workflow2\", mockWorkflowConfig2));\n\n    HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);\n    Mockito.when(helixDataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(\"cluster\"));\n    Mockito.when(helixDataAccessor.getChildValuesMap(Mockito.any()))\n        .thenReturn(ImmutableMap.of(\"GobblinYarnTaskRunner-1\", new HelixProperty(\"\"),\n            \"GobblinYarnTaskRunner-2\", new HelixProperty(\"\")));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService,\n            1, 1, 10, noopQueue, helixDataAccessor);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1)).requestTargetNumberOfContainers(3,\n        ImmutableSet.of(\"GobblinYarnTaskRunner-1\", \"GobblinYarnTaskRunner-2\"));\n  }\n","date":"2020-03-10 00:42:14","endLine":280,"groupId":"3789","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ba/6c1db378e39307c57cb50478e960ae26542f0a.src","preCode":"  public void testNotInProgress() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n\n    WorkflowConfig mockWorkflowConfig1 = mock(WorkflowConfig.class);\n    JobDag mockJobDag1 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag1.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\", \"job2\"));\n    Mockito.when(mockWorkflowConfig1.getJobDag()).thenReturn(mockJobDag1);\n\n    WorkflowContext mockWorkflowContext1 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext1.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext1);\n\n    JobContext mockJobContext1 = mock(JobContext.class);\n    Mockito.when(mockJobContext1.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext1.getAssignedParticipant(2)).thenReturn(\"worker1\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext1);\n\n    JobContext mockJobContext2 = mock(JobContext.class);\n    Mockito.when(mockJobContext2.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(3)));\n    Mockito.when(mockJobContext2.getAssignedParticipant(3)).thenReturn(\"worker2\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job2\")).thenReturn(mockJobContext2);\n\n    WorkflowConfig mockWorkflowConfig2 = mock(WorkflowConfig.class);\n    JobDag mockJobDag2 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag2.getAllNodes()).thenReturn(ImmutableSet.of(\"job3\"));\n    Mockito.when(mockWorkflowConfig2.getJobDag()).thenReturn(mockJobDag2);\n\n    WorkflowContext mockWorkflowContext2 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext2.getWorkflowState()).thenReturn(TaskState.COMPLETED);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow2\")).thenReturn(mockWorkflowContext2);\n\n    JobContext mockJobContext3 = mock(JobContext.class);\n    Mockito.when(mockJobContext3.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(4), Integer.valueOf(5)));\n    Mockito.when(mockJobContext3.getAssignedParticipant(4)).thenReturn(\"worker3\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job3\")).thenReturn(mockJobContext3);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig1, \"workflow2\", mockWorkflowConfig2));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService, 1, 1, 10);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1)).requestTargetNumberOfContainers(3,\n        ImmutableSet.of(\"worker1\", \"worker2\"));\n  }\n","realPath":"gobblin-yarn/src/test/java/org/apache/gobblin/yarn/YarnAutoScalingManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"}],"commitId":"f3d75e392c554771e3c098cafb648ec55fa40ba7","commitMessage":"@@@[GOBBLIN-1072] Being more conservative on releasing containers\n\nAdd sliding window to protect AutoScaling from\nfluctuation of number of active Helix Partitions\n\nLess conservative on tagging an instance as unused\n\nAdd a unit test\n\nAddress comments\n\nCloses #2912 from\nautumnust/conservativeReleaseYarnContainers\n","date":"2020-03-10 00:42:14","modifiedFileCount":"5","status":"M","submitter":"autumnust"},{"authorTime":"2020-06-03 06:46:24","codes":[{"authorDate":"2020-06-03 06:46:24","commitOrder":3,"curCode":"  public void testTwoWorkflows() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n\n    WorkflowConfig mockWorkflowConfig1 = mock(WorkflowConfig.class);\n    JobDag mockJobDag1 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag1.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\", \"job2\"));\n    Mockito.when(mockWorkflowConfig1.getJobDag()).thenReturn(mockJobDag1);\n\n    WorkflowContext mockWorkflowContext1 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext1.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext1);\n\n    JobContext mockJobContext1 = mock(JobContext.class);\n    Mockito.when(mockJobContext1.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext1.getAssignedParticipant(2)).thenReturn(\"GobblinYarnTaskRunner-1\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext1);\n\n    JobContext mockJobContext2 = mock(JobContext.class);\n    Mockito.when(mockJobContext2.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(3)));\n    Mockito.when(mockJobContext2.getAssignedParticipant(3)).thenReturn(\"GobblinYarnTaskRunner-2\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job2\")).thenReturn(mockJobContext2);\n\n    WorkflowConfig mockWorkflowConfig2 = mock(WorkflowConfig.class);\n    JobDag mockJobDag2 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag2.getAllNodes()).thenReturn(ImmutableSet.of(\"job3\"));\n    Mockito.when(mockWorkflowConfig2.getJobDag()).thenReturn(mockJobDag2);\n\n    WorkflowContext mockWorkflowContext2 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext2.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow2\")).thenReturn(mockWorkflowContext2);\n\n    JobContext mockJobContext3 = mock(JobContext.class);\n    Mockito.when(mockJobContext3.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(4), Integer.valueOf(5)));\n    Mockito.when(mockJobContext3.getAssignedParticipant(4)).thenReturn(\"GobblinYarnTaskRunner-3\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job3\")).thenReturn(mockJobContext3);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig1, \"workflow2\", mockWorkflowConfig2));\n\n    HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);\n    Mockito.when(helixDataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(\"cluster\"));\n    Mockito.when(helixDataAccessor.getChildValuesMap(Mockito.any()))\n        .thenReturn(ImmutableMap.of(\"GobblinYarnTaskRunner-1\", new HelixProperty(\"\"),\n            \"GobblinYarnTaskRunner-2\", new HelixProperty(\"\"),\n            \"GobblinYarnTaskRunner-3\", new HelixProperty(\"\")));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService,\n            1, 1, 10, 1.0, noopQueue, helixDataAccessor);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1)).requestTargetNumberOfContainers(5,\n        ImmutableSet.of(\"GobblinYarnTaskRunner-1\", \"GobblinYarnTaskRunner-2\", \"GobblinYarnTaskRunner-3\"));\n  }\n","date":"2020-06-03 06:46:24","endLine":211,"groupId":"10131","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testTwoWorkflows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/6c/4047147485a64af836aa38441d6dd20717848b.src","preCode":"  public void testTwoWorkflows() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n\n    WorkflowConfig mockWorkflowConfig1 = mock(WorkflowConfig.class);\n    JobDag mockJobDag1 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag1.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\", \"job2\"));\n    Mockito.when(mockWorkflowConfig1.getJobDag()).thenReturn(mockJobDag1);\n\n    WorkflowContext mockWorkflowContext1 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext1.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext1);\n\n    JobContext mockJobContext1 = mock(JobContext.class);\n    Mockito.when(mockJobContext1.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext1.getAssignedParticipant(2)).thenReturn(\"GobblinYarnTaskRunner-1\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext1);\n\n    JobContext mockJobContext2 = mock(JobContext.class);\n    Mockito.when(mockJobContext2.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(3)));\n    Mockito.when(mockJobContext2.getAssignedParticipant(3)).thenReturn(\"GobblinYarnTaskRunner-2\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job2\")).thenReturn(mockJobContext2);\n\n    WorkflowConfig mockWorkflowConfig2 = mock(WorkflowConfig.class);\n    JobDag mockJobDag2 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag2.getAllNodes()).thenReturn(ImmutableSet.of(\"job3\"));\n    Mockito.when(mockWorkflowConfig2.getJobDag()).thenReturn(mockJobDag2);\n\n    WorkflowContext mockWorkflowContext2 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext2.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow2\")).thenReturn(mockWorkflowContext2);\n\n    JobContext mockJobContext3 = mock(JobContext.class);\n    Mockito.when(mockJobContext3.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(4), Integer.valueOf(5)));\n    Mockito.when(mockJobContext3.getAssignedParticipant(4)).thenReturn(\"GobblinYarnTaskRunner-3\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job3\")).thenReturn(mockJobContext3);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig1, \"workflow2\", mockWorkflowConfig2));\n\n    HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);\n    Mockito.when(helixDataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(\"cluster\"));\n    Mockito.when(helixDataAccessor.getChildValuesMap(Mockito.any()))\n        .thenReturn(ImmutableMap.of(\"GobblinYarnTaskRunner-1\", new HelixProperty(\"\"),\n            \"GobblinYarnTaskRunner-2\", new HelixProperty(\"\"),\n            \"GobblinYarnTaskRunner-3\", new HelixProperty(\"\")));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService,\n            1, 1, 10, noopQueue, helixDataAccessor);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1)).requestTargetNumberOfContainers(5,\n        ImmutableSet.of(\"GobblinYarnTaskRunner-1\", \"GobblinYarnTaskRunner-2\", \"GobblinYarnTaskRunner-3\"));\n  }\n","realPath":"gobblin-yarn/src/test/java/org/apache/gobblin/yarn/YarnAutoScalingManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2020-06-03 06:46:24","commitOrder":3,"curCode":"  public void testNotInProgress() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n\n    WorkflowConfig mockWorkflowConfig1 = mock(WorkflowConfig.class);\n    JobDag mockJobDag1 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag1.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\", \"job2\"));\n    Mockito.when(mockWorkflowConfig1.getJobDag()).thenReturn(mockJobDag1);\n\n    WorkflowContext mockWorkflowContext1 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext1.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext1);\n\n    JobContext mockJobContext1 = mock(JobContext.class);\n    Mockito.when(mockJobContext1.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext1.getAssignedParticipant(2)).thenReturn(\"GobblinYarnTaskRunner-1\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext1);\n\n    JobContext mockJobContext2 = mock(JobContext.class);\n    Mockito.when(mockJobContext2.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(3)));\n    Mockito.when(mockJobContext2.getAssignedParticipant(3)).thenReturn(\"GobblinYarnTaskRunner-2\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job2\")).thenReturn(mockJobContext2);\n\n    WorkflowConfig mockWorkflowConfig2 = mock(WorkflowConfig.class);\n    JobDag mockJobDag2 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag2.getAllNodes()).thenReturn(ImmutableSet.of(\"job3\"));\n    Mockito.when(mockWorkflowConfig2.getJobDag()).thenReturn(mockJobDag2);\n\n    WorkflowContext mockWorkflowContext2 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext2.getWorkflowState()).thenReturn(TaskState.COMPLETED);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow2\")).thenReturn(mockWorkflowContext2);\n\n    JobContext mockJobContext3 = mock(JobContext.class);\n    Mockito.when(mockJobContext3.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(4), Integer.valueOf(5)));\n    Mockito.when(mockJobContext3.getAssignedParticipant(4)).thenReturn(\"GobblinYarnTaskRunner-3\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job3\")).thenReturn(mockJobContext3);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig1, \"workflow2\", mockWorkflowConfig2));\n\n    HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);\n    Mockito.when(helixDataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(\"cluster\"));\n    Mockito.when(helixDataAccessor.getChildValuesMap(Mockito.any()))\n        .thenReturn(ImmutableMap.of(\"GobblinYarnTaskRunner-1\", new HelixProperty(\"\"),\n            \"GobblinYarnTaskRunner-2\", new HelixProperty(\"\")));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService,\n            1, 1, 10, 1.0, noopQueue, helixDataAccessor);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1)).requestTargetNumberOfContainers(3,\n        ImmutableSet.of(\"GobblinYarnTaskRunner-1\", \"GobblinYarnTaskRunner-2\"));\n  }\n","date":"2020-06-03 06:46:24","endLine":280,"groupId":"10131","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testNotInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/6c/4047147485a64af836aa38441d6dd20717848b.src","preCode":"  public void testNotInProgress() throws IOException {\n    YarnService mockYarnService = mock(YarnService.class);\n    TaskDriver mockTaskDriver = mock(TaskDriver.class);\n\n    WorkflowConfig mockWorkflowConfig1 = mock(WorkflowConfig.class);\n    JobDag mockJobDag1 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag1.getAllNodes()).thenReturn(ImmutableSet.of(\"job1\", \"job2\"));\n    Mockito.when(mockWorkflowConfig1.getJobDag()).thenReturn(mockJobDag1);\n\n    WorkflowContext mockWorkflowContext1 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext1.getWorkflowState()).thenReturn(TaskState.IN_PROGRESS);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow1\")).thenReturn(mockWorkflowContext1);\n\n    JobContext mockJobContext1 = mock(JobContext.class);\n    Mockito.when(mockJobContext1.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(1), Integer.valueOf(2)));\n    Mockito.when(mockJobContext1.getAssignedParticipant(2)).thenReturn(\"GobblinYarnTaskRunner-1\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job1\")).thenReturn(mockJobContext1);\n\n    JobContext mockJobContext2 = mock(JobContext.class);\n    Mockito.when(mockJobContext2.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(3)));\n    Mockito.when(mockJobContext2.getAssignedParticipant(3)).thenReturn(\"GobblinYarnTaskRunner-2\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job2\")).thenReturn(mockJobContext2);\n\n    WorkflowConfig mockWorkflowConfig2 = mock(WorkflowConfig.class);\n    JobDag mockJobDag2 = mock(JobDag.class);\n\n    Mockito.when(mockJobDag2.getAllNodes()).thenReturn(ImmutableSet.of(\"job3\"));\n    Mockito.when(mockWorkflowConfig2.getJobDag()).thenReturn(mockJobDag2);\n\n    WorkflowContext mockWorkflowContext2 = mock(WorkflowContext.class);\n    Mockito.when(mockWorkflowContext2.getWorkflowState()).thenReturn(TaskState.COMPLETED);\n\n    Mockito.when(mockTaskDriver.getWorkflowContext(\"workflow2\")).thenReturn(mockWorkflowContext2);\n\n    JobContext mockJobContext3 = mock(JobContext.class);\n    Mockito.when(mockJobContext3.getPartitionSet())\n        .thenReturn(ImmutableSet.of(Integer.valueOf(4), Integer.valueOf(5)));\n    Mockito.when(mockJobContext3.getAssignedParticipant(4)).thenReturn(\"GobblinYarnTaskRunner-3\");\n    Mockito.when(mockTaskDriver.getJobContext(\"job3\")).thenReturn(mockJobContext3);\n\n    Mockito.when(mockTaskDriver.getWorkflows())\n        .thenReturn(ImmutableMap.of(\"workflow1\", mockWorkflowConfig1, \"workflow2\", mockWorkflowConfig2));\n\n    HelixDataAccessor helixDataAccessor = mock(HelixDataAccessor.class);\n    Mockito.when(helixDataAccessor.keyBuilder()).thenReturn(new PropertyKey.Builder(\"cluster\"));\n    Mockito.when(helixDataAccessor.getChildValuesMap(Mockito.any()))\n        .thenReturn(ImmutableMap.of(\"GobblinYarnTaskRunner-1\", new HelixProperty(\"\"),\n            \"GobblinYarnTaskRunner-2\", new HelixProperty(\"\")));\n\n    YarnAutoScalingManager.YarnAutoScalingRunnable runnable =\n        new YarnAutoScalingManager.YarnAutoScalingRunnable(mockTaskDriver, mockYarnService,\n            1, 1, 10, noopQueue, helixDataAccessor);\n\n    runnable.run();\n\n    \r\n    Mockito.verify(mockYarnService, times(1)).requestTargetNumberOfContainers(3,\n        ImmutableSet.of(\"GobblinYarnTaskRunner-1\", \"GobblinYarnTaskRunner-2\"));\n  }\n","realPath":"gobblin-yarn/src/test/java/org/apache/gobblin/yarn/YarnAutoScalingManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"M"}],"commitId":"2ab6200116062f49f9d3c7854270ea19490d8ba1","commitMessage":"@@@[GOBBLIN-1177] Provide a config for overprovisioning Gobblin Yarn containers by a configurable amount[]\n\nCloses #3023 from sv2000/containerOverProvision\n","date":"2020-06-03 06:46:24","modifiedFileCount":"2","status":"M","submitter":"sv2000"}]
