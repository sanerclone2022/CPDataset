[{"authorTime":"2017-10-28 03:00:41","codes":[{"authorDate":"2017-10-28 03:00:41","commitOrder":1,"curCode":"  public KafkaEventReporter(Builder<?> builder) throws IOException {\n    super(builder);\n\n    this.serializer = this.closer.register(\n        createSerializer(new FixedSchemaVersionWriter()));\n\n    if(builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n        String pusherClassName = builder.pusherClassName.or(PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n        this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, builder.config);\n    }\n  }\n","date":"2017-10-28 03:00:41","endLine":57,"groupId":"7665","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"KafkaEventReporter","params":"(Builder<?>builder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b1/5e96ed5cfbca3d97eadaf283d067bca0d56137.src","preCode":"  public KafkaEventReporter(Builder<?> builder) throws IOException {\n    super(builder);\n\n    this.serializer = this.closer.register(\n        createSerializer(new FixedSchemaVersionWriter()));\n\n    if(builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n        String pusherClassName = builder.pusherClassName.or(PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n        this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, builder.config);\n    }\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/metrics/kafka/KafkaEventReporter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"},{"authorDate":"2017-10-28 03:00:41","commitOrder":1,"curCode":"  protected KafkaReporter(Builder<?> builder, Config config) throws IOException {\n    super(builder, config);\n\n    SchemaVersionWriter versionWriter;\n    if (config.hasPath(SCHEMA_VERSION_WRITER_TYPE)) {\n      try {\n        ClassAliasResolver<SchemaVersionWriter> resolver = new ClassAliasResolver<>(SchemaVersionWriter.class);\n        Class<? extends SchemaVersionWriter> klazz = resolver.resolveClass(config.getString(SCHEMA_VERSION_WRITER_TYPE));\n        versionWriter = klazz.newInstance();\n      } catch (ReflectiveOperationException roe) {\n        throw new IOException(\"Could not instantiate version writer.\", roe);\n      }\n    } else {\n      versionWriter = new FixedSchemaVersionWriter();\n    }\n\n    log.info(\"Schema version writer: \" + versionWriter.getClass().getName());\n    this.serializer = this.closer.register(createSerializer(versionWriter));\n\n    if (builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(config, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX);\n      String pusherClassName = ConfigUtils.getString(config, PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY,\n          PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n\n      this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, Optional.of(kafkaConfig));\n    }\n  }\n","date":"2017-10-28 03:00:41","endLine":81,"groupId":"7313","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"KafkaReporter","params":"(Builder<?>builder@Configconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/1c/935b477ff3a7dd0e2a800c487fa59b92bcb55a.src","preCode":"  protected KafkaReporter(Builder<?> builder, Config config) throws IOException {\n    super(builder, config);\n\n    SchemaVersionWriter versionWriter;\n    if (config.hasPath(SCHEMA_VERSION_WRITER_TYPE)) {\n      try {\n        ClassAliasResolver<SchemaVersionWriter> resolver = new ClassAliasResolver<>(SchemaVersionWriter.class);\n        Class<? extends SchemaVersionWriter> klazz = resolver.resolveClass(config.getString(SCHEMA_VERSION_WRITER_TYPE));\n        versionWriter = klazz.newInstance();\n      } catch (ReflectiveOperationException roe) {\n        throw new IOException(\"Could not instantiate version writer.\", roe);\n      }\n    } else {\n      versionWriter = new FixedSchemaVersionWriter();\n    }\n\n    log.info(\"Schema version writer: \" + versionWriter.getClass().getName());\n    this.serializer = this.closer.register(createSerializer(versionWriter));\n\n    if (builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(config, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX);\n      String pusherClassName = ConfigUtils.getString(config, PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY,\n          PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n\n      this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, Optional.of(kafkaConfig));\n    }\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/metrics/kafka/KafkaReporter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"B"}],"commitId":"ee770f5c5aeec469d7d93c016ce0a25200932eb2","commitMessage":"@@@[GOBBLIN-298] Add metric and event reporters that emit using a KafkaProducer\n\nCloses #2153 from htran1/metrics09\n","date":"2017-10-28 03:00:41","modifiedFileCount":"2","status":"B","submitter":"Hung Tran"},{"authorTime":"2017-11-21 11:51:48","codes":[{"authorDate":"2017-10-28 03:00:41","commitOrder":2,"curCode":"  public KafkaEventReporter(Builder<?> builder) throws IOException {\n    super(builder);\n\n    this.serializer = this.closer.register(\n        createSerializer(new FixedSchemaVersionWriter()));\n\n    if(builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n        String pusherClassName = builder.pusherClassName.or(PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n        this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, builder.config);\n    }\n  }\n","date":"2017-10-28 03:00:41","endLine":57,"groupId":"7665","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"KafkaEventReporter","params":"(Builder<?>builder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b1/5e96ed5cfbca3d97eadaf283d067bca0d56137.src","preCode":"  public KafkaEventReporter(Builder<?> builder) throws IOException {\n    super(builder);\n\n    this.serializer = this.closer.register(\n        createSerializer(new FixedSchemaVersionWriter()));\n\n    if(builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n        String pusherClassName = builder.pusherClassName.or(PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n        this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, builder.config);\n    }\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/metrics/kafka/KafkaEventReporter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"},{"authorDate":"2017-11-21 11:51:48","commitOrder":2,"curCode":"  protected KafkaReporter(Builder<?> builder, Config config) throws IOException {\n    super(builder, config);\n\n    SchemaVersionWriter versionWriter;\n    if (config.hasPath(SCHEMA_VERSION_WRITER_TYPE)) {\n      try {\n        ClassAliasResolver<SchemaVersionWriter> resolver = new ClassAliasResolver<>(SchemaVersionWriter.class);\n        Class<? extends SchemaVersionWriter> klazz = resolver.resolveClass(config.getString(SCHEMA_VERSION_WRITER_TYPE));\n        versionWriter = klazz.newInstance();\n      } catch (ReflectiveOperationException roe) {\n        throw new IOException(\"Could not instantiate version writer.\", roe);\n      }\n    } else {\n      versionWriter = new FixedSchemaVersionWriter();\n    }\n\n    log.info(\"Schema version writer: \" + versionWriter.getClass().getName());\n    this.serializer = this.closer.register(createSerializer(versionWriter));\n\n    if (builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(config, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(config, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      String pusherClassName = ConfigUtils.getString(config, PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY,\n          PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n\n      this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, Optional.of(kafkaConfig));\n    }\n  }\n","date":"2017-11-21 11:51:48","endLine":83,"groupId":"7313","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"KafkaReporter","params":"(Builder<?>builder@Configconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/40/a9fed342267073906c7832473bf26bd0542fd8.src","preCode":"  protected KafkaReporter(Builder<?> builder, Config config) throws IOException {\n    super(builder, config);\n\n    SchemaVersionWriter versionWriter;\n    if (config.hasPath(SCHEMA_VERSION_WRITER_TYPE)) {\n      try {\n        ClassAliasResolver<SchemaVersionWriter> resolver = new ClassAliasResolver<>(SchemaVersionWriter.class);\n        Class<? extends SchemaVersionWriter> klazz = resolver.resolveClass(config.getString(SCHEMA_VERSION_WRITER_TYPE));\n        versionWriter = klazz.newInstance();\n      } catch (ReflectiveOperationException roe) {\n        throw new IOException(\"Could not instantiate version writer.\", roe);\n      }\n    } else {\n      versionWriter = new FixedSchemaVersionWriter();\n    }\n\n    log.info(\"Schema version writer: \" + versionWriter.getClass().getName());\n    this.serializer = this.closer.register(createSerializer(versionWriter));\n\n    if (builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(config, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX);\n      String pusherClassName = ConfigUtils.getString(config, PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY,\n          PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n\n      this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, Optional.of(kafkaConfig));\n    }\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/metrics/kafka/KafkaReporter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"5c03b11b5b5a62a611fa2a1042bfe64c283c6a5e","commitMessage":"@@@[GOBBLIN-317] Add dynamic configuration injection in the mappers\n\nCloses #2170 from htran1/dynamic_config\n","date":"2017-11-21 11:51:48","modifiedFileCount":"9","status":"M","submitter":"Hung Tran"},{"authorTime":"2017-12-15 07:30:25","codes":[{"authorDate":"2017-12-15 07:30:25","commitOrder":3,"curCode":"  public KafkaEventReporter(Builder<?> builder) throws IOException {\n    super(builder);\n\n    this.serializer = this.closer.register(\n        createSerializer(new FixedSchemaVersionWriter()));\n\n    if(builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n        String pusherClassName = builder.pusherClassName.or(PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n        this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, builder.config);\n    }\n    this.closer.register(this.kafkaPusher);\n  }\n","date":"2017-12-15 07:30:33","endLine":58,"groupId":"7665","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"KafkaEventReporter","params":"(Builder<?>builder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/80/4d90926a534771a5752a75c59ae91950d13175.src","preCode":"  public KafkaEventReporter(Builder<?> builder) throws IOException {\n    super(builder);\n\n    this.serializer = this.closer.register(\n        createSerializer(new FixedSchemaVersionWriter()));\n\n    if(builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n        String pusherClassName = builder.pusherClassName.or(PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n        this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, builder.config);\n    }\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/metrics/kafka/KafkaEventReporter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2017-12-15 07:30:25","commitOrder":3,"curCode":"  protected KafkaReporter(Builder<?> builder, Config config) throws IOException {\n    super(builder, config);\n\n    SchemaVersionWriter versionWriter;\n    if (config.hasPath(SCHEMA_VERSION_WRITER_TYPE)) {\n      try {\n        ClassAliasResolver<SchemaVersionWriter> resolver = new ClassAliasResolver<>(SchemaVersionWriter.class);\n        Class<? extends SchemaVersionWriter> klazz = resolver.resolveClass(config.getString(SCHEMA_VERSION_WRITER_TYPE));\n        versionWriter = klazz.newInstance();\n      } catch (ReflectiveOperationException roe) {\n        throw new IOException(\"Could not instantiate version writer.\", roe);\n      }\n    } else {\n      versionWriter = new FixedSchemaVersionWriter();\n    }\n\n    log.info(\"Schema version writer: \" + versionWriter.getClass().getName());\n    this.serializer = this.closer.register(createSerializer(versionWriter));\n\n    if (builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(config, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(config, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      String pusherClassName = ConfigUtils.getString(config, PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY,\n          PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n\n      this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, Optional.of(kafkaConfig));\n    }\n    this.closer.register(this.kafkaPusher);\n  }\n","date":"2017-12-15 07:30:33","endLine":84,"groupId":"7313","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"KafkaReporter","params":"(Builder<?>builder@Configconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/35/281b5581e38b59366f4401b40077d70150cad3.src","preCode":"  protected KafkaReporter(Builder<?> builder, Config config) throws IOException {\n    super(builder, config);\n\n    SchemaVersionWriter versionWriter;\n    if (config.hasPath(SCHEMA_VERSION_WRITER_TYPE)) {\n      try {\n        ClassAliasResolver<SchemaVersionWriter> resolver = new ClassAliasResolver<>(SchemaVersionWriter.class);\n        Class<? extends SchemaVersionWriter> klazz = resolver.resolveClass(config.getString(SCHEMA_VERSION_WRITER_TYPE));\n        versionWriter = klazz.newInstance();\n      } catch (ReflectiveOperationException roe) {\n        throw new IOException(\"Could not instantiate version writer.\", roe);\n      }\n    } else {\n      versionWriter = new FixedSchemaVersionWriter();\n    }\n\n    log.info(\"Schema version writer: \" + versionWriter.getClass().getName());\n    this.serializer = this.closer.register(createSerializer(versionWriter));\n\n    if (builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(config, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(config, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      String pusherClassName = ConfigUtils.getString(config, PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY,\n          PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n\n      this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, Optional.of(kafkaConfig));\n    }\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/metrics/kafka/KafkaReporter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"9a05b70dabcef075e8137bce94ae05f934bac1e4","commitMessage":"@@@[GOBBLIN-347] Ensure KafkaPusher is registered with the closer\n\nCloses #2206 from beeramsunitha/master\n","date":"2017-12-15 07:30:33","modifiedFileCount":"2","status":"M","submitter":"Sunitha Beeram"},{"authorTime":"2017-12-15 07:30:25","codes":[{"authorDate":"2021-04-17 05:23:25","commitOrder":4,"curCode":"  public KafkaEventReporter(Builder<?> builder) throws IOException {\n    super(builder);\n\n    this.serializer = this.closer.register(\n        createSerializer(new FixedSchemaVersionWriter()));\n\n    if(builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n        String pusherClassName = builder.pusherClassName.or(PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n        this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, builder.kafkaConfig);\n    }\n    this.closer.register(this.kafkaPusher);\n  }\n","date":"2021-04-17 05:23:25","endLine":57,"groupId":"10469","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"KafkaEventReporter","params":"(Builder<?>builder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/06/1c1dad642780f8e92f4432ddb67d4667014fe2.src","preCode":"  public KafkaEventReporter(Builder<?> builder) throws IOException {\n    super(builder);\n\n    this.serializer = this.closer.register(\n        createSerializer(new FixedSchemaVersionWriter()));\n\n    if(builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n        String pusherClassName = builder.pusherClassName.or(PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n        this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, builder.config);\n    }\n    this.closer.register(this.kafkaPusher);\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/metrics/kafka/KafkaEventReporter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2017-12-15 07:30:25","commitOrder":4,"curCode":"  protected KafkaReporter(Builder<?> builder, Config config) throws IOException {\n    super(builder, config);\n\n    SchemaVersionWriter versionWriter;\n    if (config.hasPath(SCHEMA_VERSION_WRITER_TYPE)) {\n      try {\n        ClassAliasResolver<SchemaVersionWriter> resolver = new ClassAliasResolver<>(SchemaVersionWriter.class);\n        Class<? extends SchemaVersionWriter> klazz = resolver.resolveClass(config.getString(SCHEMA_VERSION_WRITER_TYPE));\n        versionWriter = klazz.newInstance();\n      } catch (ReflectiveOperationException roe) {\n        throw new IOException(\"Could not instantiate version writer.\", roe);\n      }\n    } else {\n      versionWriter = new FixedSchemaVersionWriter();\n    }\n\n    log.info(\"Schema version writer: \" + versionWriter.getClass().getName());\n    this.serializer = this.closer.register(createSerializer(versionWriter));\n\n    if (builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(config, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(config, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      String pusherClassName = ConfigUtils.getString(config, PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY,\n          PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n\n      this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, Optional.of(kafkaConfig));\n    }\n    this.closer.register(this.kafkaPusher);\n  }\n","date":"2017-12-15 07:30:33","endLine":84,"groupId":"10469","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"KafkaReporter","params":"(Builder<?>builder@Configconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/35/281b5581e38b59366f4401b40077d70150cad3.src","preCode":"  protected KafkaReporter(Builder<?> builder, Config config) throws IOException {\n    super(builder, config);\n\n    SchemaVersionWriter versionWriter;\n    if (config.hasPath(SCHEMA_VERSION_WRITER_TYPE)) {\n      try {\n        ClassAliasResolver<SchemaVersionWriter> resolver = new ClassAliasResolver<>(SchemaVersionWriter.class);\n        Class<? extends SchemaVersionWriter> klazz = resolver.resolveClass(config.getString(SCHEMA_VERSION_WRITER_TYPE));\n        versionWriter = klazz.newInstance();\n      } catch (ReflectiveOperationException roe) {\n        throw new IOException(\"Could not instantiate version writer.\", roe);\n      }\n    } else {\n      versionWriter = new FixedSchemaVersionWriter();\n    }\n\n    log.info(\"Schema version writer: \" + versionWriter.getClass().getName());\n    this.serializer = this.closer.register(createSerializer(versionWriter));\n\n    if (builder.kafkaPusher.isPresent()) {\n      this.kafkaPusher = builder.kafkaPusher.get();\n    } else {\n      Config kafkaConfig = ConfigUtils.getConfigOrEmpty(config, PusherUtils.METRICS_REPORTING_KAFKA_CONFIG_PREFIX)\n          .withFallback(ConfigUtils.getConfigOrEmpty(config, ConfigurationKeys.SHARED_KAFKA_CONFIG_PREFIX));\n\n      String pusherClassName = ConfigUtils.getString(config, PusherUtils.KAFKA_PUSHER_CLASS_NAME_KEY,\n          PusherUtils.DEFAULT_KAFKA_PUSHER_CLASS_NAME);\n\n      this.kafkaPusher = PusherUtils.getPusher(pusherClassName, builder.brokers, builder.topic, Optional.of(kafkaConfig));\n    }\n    this.closer.register(this.kafkaPusher);\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/main/java/org/apache/gobblin/metrics/kafka/KafkaReporter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"}],"commitId":"522d31205cba743209437976946adf7bf0c4f1be","commitMessage":"@@@[GOBBLIN-1423] Add config to Event reporter to control queue capacity?\n\nCloses #3259 from vikrambohra/GOBBLIN-1423\n","date":"2021-04-17 05:23:25","modifiedFileCount":"5","status":"M","submitter":"vbohra"}]
