[{"authorTime":"2020-05-12 01:04:28","codes":[{"authorDate":"2020-05-12 01:04:28","commitOrder":1,"curCode":"  public void testMetricFileReporterThrowsException() {\n    String id = getClass().getSimpleName() + \"-\" + System.currentTimeMillis();\n    GobblinMetrics gobblinMetrics = GobblinMetrics.get(id);\n\n    \r\n    Config config = ConfigFactory.empty()\n        .withValue(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY, ConfigValueFactory.fromAnyRef(true));\n\n    Properties properties = ConfigUtils.configToProperties(config);\n    \r\n    try {\n      gobblinMetrics.startMetricReporting(properties);\n      Assert.fail(\"Metric reporting unexpectedly succeeded.\");\n    } catch (MetricReporterException e) {\n      \r\n    } catch (EventReporterException e) {\n      Assert.fail(\"Unexpected exception \" + e.getMessage());\n    }\n  }\n","date":"2020-05-12 01:04:28","endLine":72,"groupId":"1446","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetricFileReporterThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/40/f94380f380304e65059c9961ea97df4517bcd8.src","preCode":"  public void testMetricFileReporterThrowsException() {\n    String id = getClass().getSimpleName() + \"-\" + System.currentTimeMillis();\n    GobblinMetrics gobblinMetrics = GobblinMetrics.get(id);\n\n    \r\n    Config config = ConfigFactory.empty()\n        .withValue(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY, ConfigValueFactory.fromAnyRef(true));\n\n    Properties properties = ConfigUtils.configToProperties(config);\n    \r\n    try {\n      gobblinMetrics.startMetricReporting(properties);\n      Assert.fail(\"Metric reporting unexpectedly succeeded.\");\n    } catch (MetricReporterException e) {\n      \r\n    } catch (EventReporterException e) {\n      Assert.fail(\"Unexpected exception \" + e.getMessage());\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/test/java/org/apache/gobblin/metrics/GobblinMetricsTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2020-05-12 01:04:28","commitOrder":1,"curCode":"  public void testMetricFileReporterSuccessful() {\n    String id = getClass().getSimpleName() + \"-\" + System.currentTimeMillis();\n    GobblinMetrics gobblinMetrics = GobblinMetrics.get(id);\n\n    \r\n    Config config = ConfigFactory.empty()\n        .withValue(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY, ConfigValueFactory.fromAnyRef(true))\n        .withValue(ConfigurationKeys.METRICS_LOG_DIR_KEY, ConfigValueFactory.fromAnyRef(\"/tmp\"))\n        .withValue(ConfigurationKeys.FAILURE_LOG_DIR_KEY, ConfigValueFactory.fromAnyRef(\"/tmp\"));\n\n    Properties properties = ConfigUtils.configToProperties(config);\n    \r\n    try {\n      gobblinMetrics.startMetricReporting(properties);\n    } catch (MetricReporterException e) {\n      Assert.fail(\"Unexpected exception \" + e.getMessage());\n    } catch (EventReporterException e) {\n      Assert.fail(\"Unexpected exception \" + e.getMessage());\n    }\n  }\n","date":"2020-05-12 01:04:28","endLine":93,"groupId":"1446","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetricFileReporterSuccessful","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/40/f94380f380304e65059c9961ea97df4517bcd8.src","preCode":"  public void testMetricFileReporterSuccessful() {\n    String id = getClass().getSimpleName() + \"-\" + System.currentTimeMillis();\n    GobblinMetrics gobblinMetrics = GobblinMetrics.get(id);\n\n    \r\n    Config config = ConfigFactory.empty()\n        .withValue(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY, ConfigValueFactory.fromAnyRef(true))\n        .withValue(ConfigurationKeys.METRICS_LOG_DIR_KEY, ConfigValueFactory.fromAnyRef(\"/tmp\"))\n        .withValue(ConfigurationKeys.FAILURE_LOG_DIR_KEY, ConfigValueFactory.fromAnyRef(\"/tmp\"));\n\n    Properties properties = ConfigUtils.configToProperties(config);\n    \r\n    try {\n      gobblinMetrics.startMetricReporting(properties);\n    } catch (MetricReporterException e) {\n      Assert.fail(\"Unexpected exception \" + e.getMessage());\n    } catch (EventReporterException e) {\n      Assert.fail(\"Unexpected exception \" + e.getMessage());\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/test/java/org/apache/gobblin/metrics/GobblinMetricsTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"239115778a08590d7ab5dfa32334efabe0e4fb49","commitMessage":"@@@[GOBBLIN-1127] Provide an option to make metric reporting instantiatio?\n\nCloses #2967 from sv2000/metricReportFatal\n","date":"2020-05-12 01:04:28","modifiedFileCount":"10","status":"B","submitter":"sv2000"},{"authorTime":"2020-06-17 01:04:05","codes":[{"authorDate":"2020-06-17 01:04:05","commitOrder":2,"curCode":"  public void testMetricFileReporterThrowsException() {\n    String id = getClass().getSimpleName() + \"-\" + System.currentTimeMillis();\n    GobblinMetrics gobblinMetrics = GobblinMetrics.get(id);\n\n    \r\n    Config config = ConfigFactory.empty()\n        .withValue(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY, ConfigValueFactory.fromAnyRef(true));\n\n    Properties properties = ConfigUtils.configToProperties(config);\n    \r\n    try {\n      gobblinMetrics.startMetricReporting(properties);\n      Assert.fail(\"Metric reporting unexpectedly succeeded.\");\n    } catch (MultiReporterException e) {\n      \r\n    }\n  }\n","date":"2020-06-17 01:04:05","endLine":70,"groupId":"1038","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testMetricFileReporterThrowsException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d2/789db6df6de3da4ff96d2d309d5e7d6ab76f29.src","preCode":"  public void testMetricFileReporterThrowsException() {\n    String id = getClass().getSimpleName() + \"-\" + System.currentTimeMillis();\n    GobblinMetrics gobblinMetrics = GobblinMetrics.get(id);\n\n    \r\n    Config config = ConfigFactory.empty()\n        .withValue(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY, ConfigValueFactory.fromAnyRef(true));\n\n    Properties properties = ConfigUtils.configToProperties(config);\n    \r\n    try {\n      gobblinMetrics.startMetricReporting(properties);\n      Assert.fail(\"Metric reporting unexpectedly succeeded.\");\n    } catch (MetricReporterException e) {\n      \r\n    } catch (EventReporterException e) {\n      Assert.fail(\"Unexpected exception \" + e.getMessage());\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/test/java/org/apache/gobblin/metrics/GobblinMetricsTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-06-17 01:04:05","commitOrder":2,"curCode":"  public void testMetricFileReporterSuccessful() {\n    String id = getClass().getSimpleName() + \"-\" + System.currentTimeMillis();\n    GobblinMetrics gobblinMetrics = GobblinMetrics.get(id);\n\n    \r\n    Config config = ConfigFactory.empty()\n        .withValue(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY, ConfigValueFactory.fromAnyRef(true))\n        .withValue(ConfigurationKeys.METRICS_LOG_DIR_KEY, ConfigValueFactory.fromAnyRef(\"/tmp\"))\n        .withValue(ConfigurationKeys.FAILURE_LOG_DIR_KEY, ConfigValueFactory.fromAnyRef(\"/tmp\"));\n\n    Properties properties = ConfigUtils.configToProperties(config);\n    \r\n    try {\n      gobblinMetrics.startMetricReporting(properties);\n    } catch (MultiReporterException e) {\n      Assert.fail(\"Unexpected exception \" + e.getMessage());\n    }\n  }\n","date":"2020-06-17 01:04:05","endLine":89,"groupId":"1038","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testMetricFileReporterSuccessful","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d2/789db6df6de3da4ff96d2d309d5e7d6ab76f29.src","preCode":"  public void testMetricFileReporterSuccessful() {\n    String id = getClass().getSimpleName() + \"-\" + System.currentTimeMillis();\n    GobblinMetrics gobblinMetrics = GobblinMetrics.get(id);\n\n    \r\n    Config config = ConfigFactory.empty()\n        .withValue(ConfigurationKeys.METRICS_REPORTING_FILE_ENABLED_KEY, ConfigValueFactory.fromAnyRef(true))\n        .withValue(ConfigurationKeys.METRICS_LOG_DIR_KEY, ConfigValueFactory.fromAnyRef(\"/tmp\"))\n        .withValue(ConfigurationKeys.FAILURE_LOG_DIR_KEY, ConfigValueFactory.fromAnyRef(\"/tmp\"));\n\n    Properties properties = ConfigUtils.configToProperties(config);\n    \r\n    try {\n      gobblinMetrics.startMetricReporting(properties);\n    } catch (MetricReporterException e) {\n      Assert.fail(\"Unexpected exception \" + e.getMessage());\n    } catch (EventReporterException e) {\n      Assert.fail(\"Unexpected exception \" + e.getMessage());\n    }\n  }\n","realPath":"gobblin-metrics-libs/gobblin-metrics/src/test/java/org/apache/gobblin/metrics/GobblinMetricsTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"c762c97c97336aa5603f571f383258a1baa7e8c3","commitMessage":"@@@[GOBBLIN-1127] Provide an option to make metric reporting instantiation failure fatal\n\nCloses #3035 from\nsv2000/metricReportInstantiationFailure\n","date":"2020-06-17 01:04:05","modifiedFileCount":"12","status":"M","submitter":"sv2000"}]
