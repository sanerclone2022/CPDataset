[{"authorTime":"2019-11-16 06:44:53","codes":[{"authorDate":"2019-05-30 05:47:09","commitOrder":4,"curCode":"  public void runTest(Properties jobProps) throws Exception {\n    String jobName = jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);\n    String jobId = JobLauncherUtils.newJobId(jobName);\n    jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY, jobId);\n\n    JobContext jobContext = null;\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      jobLauncher.launchJob(null);\n      jobContext = ((AbstractJobLauncher) jobLauncher).getJobContext();\n    } finally {\n      closer.close();\n    }\n\n    Assert.assertTrue(jobContext.getJobMetricsOptional().isPresent());\n    String jobMetricContextTags = jobContext.getJobMetricsOptional().get().getMetricContext().getTags().toString();\n    Assert.assertTrue(jobMetricContextTags.contains(ClusterNameTags.CLUSTER_IDENTIFIER_TAG_NAME),\n        ClusterNameTags.CLUSTER_IDENTIFIER_TAG_NAME + \" tag missing in job metric context tags.\");\n\n    List<JobState.DatasetState> datasetStateList = this.datasetStateStore.getAll(jobName, sanitizeJobNameForDatasetStore(jobId) + \".jst\");\n    DatasetState datasetState = datasetStateList.get(0);\n\n    Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n    Assert.assertEquals(datasetState.getCompletedTasks(), 4);\n    Assert.assertEquals(datasetState.getJobFailures(), 0);\n\n    for (TaskState taskState : datasetState.getTaskStates()) {\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n      Assert.assertEquals(taskState.getPropAsLong(ConfigurationKeys.WRITER_RECORDS_WRITTEN),\n          TestExtractor.TOTAL_RECORDS);\n\n      \r\n      if (Boolean.valueOf(taskState.getProp(ConfigurationKeys.WRITER_ADD_TASK_TIMESTAMP, \"false\"))) {\n        String pattern = \".*part.task_.*_(\\\\d+)_\\\\d+_(\\\\d+)_\\\\d+.avro\";\n        String value = taskState.getProp(ConfigurationKeys.WRITER_FINAL_OUTPUT_FILE_PATHS);\n        Pattern r = Pattern.compile(pattern);\n        Matcher m = r.matcher(taskState.getProp(ConfigurationKeys.WRITER_FINAL_OUTPUT_FILE_PATHS));\n        long timeBuffer = 5 * 60 * 1000;\n        if (!m.matches()) {\n          Assert.fail(\"no matches for \" + value);\n        }\n\n        Long currentTime = System.currentTimeMillis();\n        Assert.assertTrue(Long.valueOf(m.group(1)) > currentTime - timeBuffer);\n        Assert.assertTrue(Long.valueOf(m.group(1)) < currentTime);\n        \r\n        Assert.assertTrue(Long.valueOf(m.group(1)) < Long.valueOf(m.group(2)));\n        Assert.assertTrue(Long.valueOf(m.group(2)) > currentTime - timeBuffer);\n        Assert.assertTrue(Long.valueOf(m.group(2)) < currentTime);\n      }\n    }\n  }\n","date":"2019-05-30 05:47:09","endLine":118,"groupId":"266","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runTest","params":"(PropertiesjobProps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e6/08e448f4c639482e51dd47a016eb11b58eea1a.src","preCode":"  public void runTest(Properties jobProps) throws Exception {\n    String jobName = jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);\n    String jobId = JobLauncherUtils.newJobId(jobName);\n    jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY, jobId);\n\n    JobContext jobContext = null;\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      jobLauncher.launchJob(null);\n      jobContext = ((AbstractJobLauncher) jobLauncher).getJobContext();\n    } finally {\n      closer.close();\n    }\n\n    Assert.assertTrue(jobContext.getJobMetricsOptional().isPresent());\n    String jobMetricContextTags = jobContext.getJobMetricsOptional().get().getMetricContext().getTags().toString();\n    Assert.assertTrue(jobMetricContextTags.contains(ClusterNameTags.CLUSTER_IDENTIFIER_TAG_NAME),\n        ClusterNameTags.CLUSTER_IDENTIFIER_TAG_NAME + \" tag missing in job metric context tags.\");\n\n    List<JobState.DatasetState> datasetStateList = this.datasetStateStore.getAll(jobName, sanitizeJobNameForDatasetStore(jobId) + \".jst\");\n    DatasetState datasetState = datasetStateList.get(0);\n\n    Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n    Assert.assertEquals(datasetState.getCompletedTasks(), 4);\n    Assert.assertEquals(datasetState.getJobFailures(), 0);\n\n    for (TaskState taskState : datasetState.getTaskStates()) {\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n      Assert.assertEquals(taskState.getPropAsLong(ConfigurationKeys.WRITER_RECORDS_WRITTEN),\n          TestExtractor.TOTAL_RECORDS);\n\n      \r\n      if (Boolean.valueOf(taskState.getProp(ConfigurationKeys.WRITER_ADD_TASK_TIMESTAMP, \"false\"))) {\n        String pattern = \".*part.task_.*_(\\\\d+)_\\\\d+_(\\\\d+)_\\\\d+.avro\";\n        String value = taskState.getProp(ConfigurationKeys.WRITER_FINAL_OUTPUT_FILE_PATHS);\n        Pattern r = Pattern.compile(pattern);\n        Matcher m = r.matcher(taskState.getProp(ConfigurationKeys.WRITER_FINAL_OUTPUT_FILE_PATHS));\n        long timeBuffer = 5 * 60 * 1000;\n        if (!m.matches()) {\n          Assert.fail(\"no matches for \" + value);\n        }\n\n        Long currentTime = System.currentTimeMillis();\n        Assert.assertTrue(Long.valueOf(m.group(1)) > currentTime - timeBuffer);\n        Assert.assertTrue(Long.valueOf(m.group(1)) < currentTime);\n        \r\n        Assert.assertTrue(Long.valueOf(m.group(1)) < Long.valueOf(m.group(2)));\n        Assert.assertTrue(Long.valueOf(m.group(2)) > currentTime - timeBuffer);\n        Assert.assertTrue(Long.valueOf(m.group(2)) < currentTime);\n      }\n    }\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/JobLauncherTestHelper.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"NB"},{"authorDate":"2019-11-16 06:44:53","commitOrder":4,"curCode":"  private JobContext dummyJobContextInitHelper(Properties jobProps) throws Exception {\n    JobContext jobContext = null;\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      return ((AbstractJobLauncher) jobLauncher).getJobContext();\n    } finally {\n      closer.close();\n    }\n  }\n","date":"2019-11-16 06:44:53","endLine":156,"groupId":"3187","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"dummyJobContextInitHelper","params":"(PropertiesjobProps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/1d/781c732dba1c6ba640a6d9edf497ca829ba8c6.src","preCode":"  private JobContext dummyJobContextInitHelper(Properties jobProps) throws Exception {\n    JobContext jobContext = null;\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      return ((AbstractJobLauncher) jobLauncher).getJobContext();\n    } finally {\n      closer.close();\n    }\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/LocalJobLauncherTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"B"}],"commitId":"9f0218b276dbf18cd31af11642dcf23230ebcdfc","commitMessage":"@@@[GOBBLIN-960] Resolving multiple templates in top-level\n\nCloses #2809 from autumnust/multiple-templates\n","date":"2019-11-16 06:44:53","modifiedFileCount":"7","status":"M","submitter":"autumnust"},{"authorTime":"2019-11-16 06:44:53","codes":[{"authorDate":"2020-09-23 06:51:19","commitOrder":5,"curCode":"  public JobContext runTest(Properties jobProps) throws Exception {\n    String jobName = jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);\n    String jobId = JobLauncherUtils.newJobId(jobName);\n    jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY, jobId);\n\n    JobContext jobContext = null;\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      jobLauncher.launchJob(null);\n      jobContext = ((AbstractJobLauncher) jobLauncher).getJobContext();\n    } finally {\n      closer.close();\n    }\n\n    Assert.assertTrue(jobContext.getJobMetricsOptional().isPresent());\n    String jobMetricContextTags = jobContext.getJobMetricsOptional().get().getMetricContext().getTags().toString();\n    Assert.assertTrue(jobMetricContextTags.contains(ClusterNameTags.CLUSTER_IDENTIFIER_TAG_NAME),\n        ClusterNameTags.CLUSTER_IDENTIFIER_TAG_NAME + \" tag missing in job metric context tags.\");\n\n    List<JobState.DatasetState> datasetStateList = this.datasetStateStore.getAll(jobName, sanitizeJobNameForDatasetStore(jobId) + \".jst\");\n    DatasetState datasetState = datasetStateList.get(0);\n\n    Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n    Assert.assertEquals(datasetState.getJobFailures(), 0);\n\n    int skippedWorkunits = 0;\n\n    for (TaskState taskState : datasetState.getTaskStates()) {\n      if (Boolean.parseBoolean(jobProps.getProperty(ConfigurationKeys.WORK_UNIT_SKIP_KEY, Boolean.FALSE.toString()))\n          && taskState.getWorkingState() == WorkUnitState.WorkingState.SKIPPED) {\n        skippedWorkunits++;\n        continue;\n      }\n\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n      Assert.assertEquals(taskState.getPropAsLong(ConfigurationKeys.WRITER_RECORDS_WRITTEN),\n          TestExtractor.TOTAL_RECORDS);\n\n      \r\n      if (Boolean.valueOf(taskState.getProp(ConfigurationKeys.WRITER_ADD_TASK_TIMESTAMP, \"false\"))) {\n        String pattern = \".*part.task_.*_(\\\\d+)_\\\\d+_(\\\\d+)_\\\\d+.avro\";\n        String value = taskState.getProp(ConfigurationKeys.WRITER_FINAL_OUTPUT_FILE_PATHS);\n        Pattern r = Pattern.compile(pattern);\n        Matcher m = r.matcher(taskState.getProp(ConfigurationKeys.WRITER_FINAL_OUTPUT_FILE_PATHS));\n        long timeBuffer = 5 * 60 * 1000;\n        if (!m.matches()) {\n          Assert.fail(\"no matches for \" + value);\n        }\n\n        Long currentTime = System.currentTimeMillis();\n        Assert.assertTrue(Long.valueOf(m.group(1)) > currentTime - timeBuffer);\n        Assert.assertTrue(Long.valueOf(m.group(1)) < currentTime);\n        \r\n        Assert.assertTrue(Long.valueOf(m.group(1)) < Long.valueOf(m.group(2)));\n        Assert.assertTrue(Long.valueOf(m.group(2)) > currentTime - timeBuffer);\n        Assert.assertTrue(Long.valueOf(m.group(2)) < currentTime);\n      }\n    }\n\n    if (Boolean.parseBoolean(jobProps.getProperty(ConfigurationKeys.WORK_UNIT_SKIP_KEY,\n        Boolean.FALSE.toString()))) {\n      Assert.assertEquals(skippedWorkunits, 2);\n      Assert.assertEquals(datasetState.getCompletedTasks(), 2);\n    } else {\n      Assert.assertEquals(skippedWorkunits, 0);\n      Assert.assertEquals(datasetState.getCompletedTasks(), 4);\n    }\n\n    return jobContext;\n  }\n","date":"2020-09-23 06:51:19","endLine":136,"groupId":"10709","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"runTest","params":"(PropertiesjobProps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ff/f6c77fa3224ecd64d42e4b14d2a0cc13e41f75.src","preCode":"  public void runTest(Properties jobProps) throws Exception {\n    String jobName = jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);\n    String jobId = JobLauncherUtils.newJobId(jobName);\n    jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY, jobId);\n\n    JobContext jobContext = null;\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      jobLauncher.launchJob(null);\n      jobContext = ((AbstractJobLauncher) jobLauncher).getJobContext();\n    } finally {\n      closer.close();\n    }\n\n    Assert.assertTrue(jobContext.getJobMetricsOptional().isPresent());\n    String jobMetricContextTags = jobContext.getJobMetricsOptional().get().getMetricContext().getTags().toString();\n    Assert.assertTrue(jobMetricContextTags.contains(ClusterNameTags.CLUSTER_IDENTIFIER_TAG_NAME),\n        ClusterNameTags.CLUSTER_IDENTIFIER_TAG_NAME + \" tag missing in job metric context tags.\");\n\n    List<JobState.DatasetState> datasetStateList = this.datasetStateStore.getAll(jobName, sanitizeJobNameForDatasetStore(jobId) + \".jst\");\n    DatasetState datasetState = datasetStateList.get(0);\n\n    Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n    Assert.assertEquals(datasetState.getCompletedTasks(), 4);\n    Assert.assertEquals(datasetState.getJobFailures(), 0);\n\n    for (TaskState taskState : datasetState.getTaskStates()) {\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n      Assert.assertEquals(taskState.getPropAsLong(ConfigurationKeys.WRITER_RECORDS_WRITTEN),\n          TestExtractor.TOTAL_RECORDS);\n\n      \r\n      if (Boolean.valueOf(taskState.getProp(ConfigurationKeys.WRITER_ADD_TASK_TIMESTAMP, \"false\"))) {\n        String pattern = \".*part.task_.*_(\\\\d+)_\\\\d+_(\\\\d+)_\\\\d+.avro\";\n        String value = taskState.getProp(ConfigurationKeys.WRITER_FINAL_OUTPUT_FILE_PATHS);\n        Pattern r = Pattern.compile(pattern);\n        Matcher m = r.matcher(taskState.getProp(ConfigurationKeys.WRITER_FINAL_OUTPUT_FILE_PATHS));\n        long timeBuffer = 5 * 60 * 1000;\n        if (!m.matches()) {\n          Assert.fail(\"no matches for \" + value);\n        }\n\n        Long currentTime = System.currentTimeMillis();\n        Assert.assertTrue(Long.valueOf(m.group(1)) > currentTime - timeBuffer);\n        Assert.assertTrue(Long.valueOf(m.group(1)) < currentTime);\n        \r\n        Assert.assertTrue(Long.valueOf(m.group(1)) < Long.valueOf(m.group(2)));\n        Assert.assertTrue(Long.valueOf(m.group(2)) > currentTime - timeBuffer);\n        Assert.assertTrue(Long.valueOf(m.group(2)) < currentTime);\n      }\n    }\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/JobLauncherTestHelper.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2019-11-16 06:44:53","commitOrder":5,"curCode":"  private JobContext dummyJobContextInitHelper(Properties jobProps) throws Exception {\n    JobContext jobContext = null;\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      return ((AbstractJobLauncher) jobLauncher).getJobContext();\n    } finally {\n      closer.close();\n    }\n  }\n","date":"2019-11-16 06:44:53","endLine":156,"groupId":"10709","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"dummyJobContextInitHelper","params":"(PropertiesjobProps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/1d/781c732dba1c6ba640a6d9edf497ca829ba8c6.src","preCode":"  private JobContext dummyJobContextInitHelper(Properties jobProps) throws Exception {\n    JobContext jobContext = null;\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      return ((AbstractJobLauncher) jobLauncher).getJobContext();\n    } finally {\n      closer.close();\n    }\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/LocalJobLauncherTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"N"}],"commitId":"7c2a40230368fbd1d604f212b70ef36b07ce004f","commitMessage":"@@@[GOBBLIN-1268] track WORK_UNITS_PREPARATION timer event also in gaas\n\nCloses #3108 from arjun4084346/trackWU\n","date":"2020-09-23 06:51:19","modifiedFileCount":"5","status":"M","submitter":"Arjun"}]
