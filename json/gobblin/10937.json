[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testSimpleJobLoading() throws Exception {\n    Path path;\n    Config pullFile;\n\n    path = new Path(this.basePath, \"ajob.pull\");\n    pullFile = loader.loadPullFile(path, ConfigFactory.empty(), false);\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 3);\n\n    path = new Path(this.basePath, \"dir1/job.pull\");\n    pullFile = loader.loadPullFile(path, ConfigFactory.empty(), false);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 3);\n\n    path = new Path(this.basePath, \"dir1/job.conf\");\n    pullFile = loader.loadPullFile(path, ConfigFactory.empty(), false);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 4);\n  }\n","date":"2017-07-31 15:51:25","endLine":73,"groupId":"5677","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleJobLoading","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ab/1a72aaa757d2d10e816805478faf95149e7e07.src","preCode":"  public void testSimpleJobLoading() throws Exception {\n    Path path;\n    Config pullFile;\n\n    path = new Path(this.basePath, \"ajob.pull\");\n    pullFile = loader.loadPullFile(path, ConfigFactory.empty(), false);\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 3);\n\n    path = new Path(this.basePath, \"dir1/job.pull\");\n    pullFile = loader.loadPullFile(path, ConfigFactory.empty(), false);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 3);\n\n    path = new Path(this.basePath, \"dir1/job.conf\");\n    pullFile = loader.loadPullFile(path, ConfigFactory.empty(), false);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 4);\n  }\n","realPath":"gobblin-utility/src/test/java/org/apache/gobblin/util/PullFileLoaderTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testRecursiveJobLoadingWithAndGlobalProps() throws Exception {\n    Path path;\n    Config pullFile;\n\n    Properties sysProps = new Properties();\n    sysProps.put(\"key1\", \"sysProps1\");\n    Collection<Config> configs =\n        loader.loadPullFilesRecursively(this.basePath, ConfigUtils.propertiesToConfig(sysProps), true);\n\n    path = new Path(this.basePath, \"ajob.pull\");\n    pullFile = pullFileFromPath(configs, path);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"rootValue1\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(\"key3\"), \"rootValue3\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 5);\n\n    path = new Path(this.basePath, \"dir1/job.pull\");\n    pullFile = pullFileFromPath(configs, path);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(\"key3\"), \"rootValue3\");\n    Assert.assertEquals(pullFile.getString(\"key4\"), \"dir1Value4\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 5);\n\n    path = new Path(this.basePath, \"dir1/job.conf\");\n    pullFile = pullFileFromPath(configs, path);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"dir1Value4\");\n    Assert.assertEquals(pullFile.getString(\"key3\"), \"rootValue3\");\n    Assert.assertEquals(pullFile.getString(\"key4\"), \"dir1Value4\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 6);\n  }\n","date":"2017-07-31 15:51:25","endLine":215,"groupId":"7820","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecursiveJobLoadingWithAndGlobalProps","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ab/1a72aaa757d2d10e816805478faf95149e7e07.src","preCode":"  public void testRecursiveJobLoadingWithAndGlobalProps() throws Exception {\n    Path path;\n    Config pullFile;\n\n    Properties sysProps = new Properties();\n    sysProps.put(\"key1\", \"sysProps1\");\n    Collection<Config> configs =\n        loader.loadPullFilesRecursively(this.basePath, ConfigUtils.propertiesToConfig(sysProps), true);\n\n    path = new Path(this.basePath, \"ajob.pull\");\n    pullFile = pullFileFromPath(configs, path);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"rootValue1\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(\"key3\"), \"rootValue3\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 5);\n\n    path = new Path(this.basePath, \"dir1/job.pull\");\n    pullFile = pullFileFromPath(configs, path);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(\"key3\"), \"rootValue3\");\n    Assert.assertEquals(pullFile.getString(\"key4\"), \"dir1Value4\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 5);\n\n    path = new Path(this.basePath, \"dir1/job.conf\");\n    pullFile = pullFileFromPath(configs, path);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"dir1Value4\");\n    Assert.assertEquals(pullFile.getString(\"key3\"), \"rootValue3\");\n    Assert.assertEquals(pullFile.getString(\"key4\"), \"dir1Value4\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 6);\n  }\n","realPath":"gobblin-utility/src/test/java/org/apache/gobblin/util/PullFileLoaderTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-08-15 23:22:34","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void testSimpleJobLoading() throws Exception {\n    Path path;\n    Config pullFile;\n\n    path = new Path(this.basePath, \"ajob.pull\");\n    pullFile = loader.loadPullFile(path, ConfigFactory.empty(), false);\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 3);\n\n    path = new Path(this.basePath, \"dir1/job.pull\");\n    pullFile = loader.loadPullFile(path, ConfigFactory.empty(), false);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 3);\n\n    path = new Path(this.basePath, \"dir1/job.conf\");\n    pullFile = loader.loadPullFile(path, ConfigFactory.empty(), false);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 4);\n  }\n","date":"2017-07-31 15:51:25","endLine":73,"groupId":"10937","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleJobLoading","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ab/1a72aaa757d2d10e816805478faf95149e7e07.src","preCode":"  public void testSimpleJobLoading() throws Exception {\n    Path path;\n    Config pullFile;\n\n    path = new Path(this.basePath, \"ajob.pull\");\n    pullFile = loader.loadPullFile(path, ConfigFactory.empty(), false);\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 3);\n\n    path = new Path(this.basePath, \"dir1/job.pull\");\n    pullFile = loader.loadPullFile(path, ConfigFactory.empty(), false);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 3);\n\n    path = new Path(this.basePath, \"dir1/job.conf\");\n    pullFile = loader.loadPullFile(path, ConfigFactory.empty(), false);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 4);\n  }\n","realPath":"gobblin-utility/src/test/java/org/apache/gobblin/util/PullFileLoaderTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2017-08-15 23:22:34","commitOrder":2,"curCode":"  public void testRecursiveJobLoadingWithAndGlobalProps() throws Exception {\n    Path path;\n    Config pullFile;\n\n    Properties sysProps = new Properties();\n    sysProps.put(\"key1\", \"sysProps1\");\n    Collection<Config> configs =\n        loader.loadPullFilesRecursively(this.basePath, ConfigUtils.propertiesToConfig(sysProps), true);\n\n    path = new Path(this.basePath, \"ajob.pull\");\n    pullFile = pullFileFromPath(configs, path);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"rootValue1\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(\"key3\"), \"rootValue3\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 5);\n\n    path = new Path(this.basePath, \"dir1/job.pull\");\n    pullFile = pullFileFromPath(configs, path);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(\"key2a\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(\"key3\"), \"rootValue3\");\n    Assert.assertEquals(pullFile.getString(\"key4\"), \"dir1Value4\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 6);\n\n    path = new Path(this.basePath, \"dir1/job.conf\");\n    pullFile = pullFileFromPath(configs, path);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"dir1Value4\");\n    Assert.assertEquals(pullFile.getString(\"key2a\"), \"dir1Value4\");\n    Assert.assertEquals(pullFile.getString(\"key3\"), \"rootValue3\");\n    Assert.assertEquals(pullFile.getString(\"key4\"), \"dir1Value4\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 7);\n  }\n","date":"2017-08-15 23:22:34","endLine":219,"groupId":"10937","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRecursiveJobLoadingWithAndGlobalProps","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/87/261cd83671fb24377dab114643b3d5c568ee49.src","preCode":"  public void testRecursiveJobLoadingWithAndGlobalProps() throws Exception {\n    Path path;\n    Config pullFile;\n\n    Properties sysProps = new Properties();\n    sysProps.put(\"key1\", \"sysProps1\");\n    Collection<Config> configs =\n        loader.loadPullFilesRecursively(this.basePath, ConfigUtils.propertiesToConfig(sysProps), true);\n\n    path = new Path(this.basePath, \"ajob.pull\");\n    pullFile = pullFileFromPath(configs, path);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"rootValue1\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"aValue\");\n    Assert.assertEquals(pullFile.getString(\"key3\"), \"rootValue3\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 5);\n\n    path = new Path(this.basePath, \"dir1/job.pull\");\n    pullFile = pullFileFromPath(configs, path);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(\"key3\"), \"rootValue3\");\n    Assert.assertEquals(pullFile.getString(\"key4\"), \"dir1Value4\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 5);\n\n    path = new Path(this.basePath, \"dir1/job.conf\");\n    pullFile = pullFileFromPath(configs, path);\n    Assert.assertEquals(pullFile.getString(\"key1\"), \"jobValue1,jobValue2,jobValue3\");\n    Assert.assertEquals(pullFile.getString(\"key2\"), \"dir1Value4\");\n    Assert.assertEquals(pullFile.getString(\"key3\"), \"rootValue3\");\n    Assert.assertEquals(pullFile.getString(\"key4\"), \"dir1Value4\");\n    Assert.assertEquals(pullFile.getString(\"key10\"), \"jobValue2\");\n    Assert.assertEquals(pullFile.getString(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY), path.toString());\n    Assert.assertEquals(pullFile.entrySet().size(), 6);\n  }\n","realPath":"gobblin-utility/src/test/java/org/apache/gobblin/util/PullFileLoaderTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"d0ece1a0436df88df2d305467d1d94c0893ad0bf","commitMessage":"@@@[GOBBLIN-209] Support for hocon global configuration files.\n\nCloses #2061 from\nkadaan/add_support_for_hocon_global_files\n","date":"2017-08-15 23:22:34","modifiedFileCount":"2","status":"M","submitter":"Joel Baranick"}]
