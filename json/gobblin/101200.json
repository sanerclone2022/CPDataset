[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2020-06-12 01:14:42","commitOrder":2,"curCode":"    public void testGetHiveSpecs()\n            throws IOException {\n        State state = new State();\n        this.path = new Path(getClass().getResource(\"/test-hive-table/snapshot1\").toString());\n        \r\n        Collection<HiveSpec> specs = new HiveSnapshotRegistrationPolicy(state).getHiveSpecs(this.path);\n        Assert.assertEquals(specs.size(), 0);\n\n        \r\n        this.path = new Path(getClass().getResource(\"/test-hive-table/\").toString());\n\n        Assert.assertEquals(specs.size(), 0);\n        state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n        state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n        state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n        state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3\");\n        specs = new HiveSnapshotRegistrationPolicy(state).getHiveSpecs(this.path);\n        Assert.assertEquals(specs.size(), 6);\n        Iterator<HiveSpec> iterator = specs.iterator();\n        HiveSpec spec = iterator.next();\n        examine(spec, \"db1\", \"tbl1\");\n        spec = iterator.next();\n        examine(spec, \"db1\", \"tbl2\");\n        spec = iterator.next();\n        examine(spec, \"db1\", \"tbl3\");\n        spec = iterator.next();\n        examine(spec, \"db2\", \"tbl1\");\n        spec = iterator.next();\n        examine(spec, \"db2\", \"tbl2\");\n        spec = iterator.next();\n        examine(spec, \"db2\", \"tbl3\");\n    }\n","date":"2020-06-12 01:14:42","endLine":69,"groupId":"7514","id":1,"instanceNumber":1,"isCurCommit":1,"methodName":"testGetHiveSpecs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/8a/7d5070515cbbb04c1b6a444d23b2ca42cb1d6b.src","preCode":"    public void testGetHiveSpecs()\n            throws IOException {\n        State state = new State();\n        this.path = new Path(getClass().getResource(\"/test-hive-table/snapshot1\").toString());\n        \r\n        Collection<HiveSpec> specs = new HiveSnapshotRegistrationPolicy(state).getHiveSpecs(this.path);\n        Assert.assertEquals(specs.size(), 0);\n\n        \r\n        this.path = new Path(getClass().getResource(\"/test-hive-table/\").toString());\n\n        Assert.assertEquals(specs.size(), 0);\n        state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n        state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n        state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n        state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3\");\n        specs = new HiveSnapshotRegistrationPolicy(state).getHiveSpecs(this.path);\n        Assert.assertEquals(specs.size(), 6);\n        Iterator<HiveSpec> iterator = specs.iterator();\n        HiveSpec spec = iterator.next();\n        examine(spec, \"db1\", \"tbl1\");\n        spec = iterator.next();\n        examine(spec, \"db1\", \"tbl2\");\n        spec = iterator.next();\n        examine(spec, \"db1\", \"tbl3\");\n        spec = iterator.next();\n        examine(spec, \"db2\", \"tbl1\");\n        spec = iterator.next();\n        examine(spec, \"db2\", \"tbl2\");\n        spec = iterator.next();\n        examine(spec, \"db2\", \"tbl3\");\n    }\n","realPath":"gobblin-hive-registration/src/test/java/org/apache/gobblin/hive/policy/HiveSnapshotRegistrationPolicyTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void testGetHiveSpecsWithDBFilter() throws IOException{\n    State state = new State();\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3,$PRIMARY_TABLE_col\");\n\n    state.appendToListProp(\"db2.\" + HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"$PRIMARY_TABLE_col,tbl4,tbl5\");\n\n    this.path = new Path(getClass().getResource(\"/test-hive-table\").toString());\n\n    Collection<HiveSpec> specs = new HiveRegistrationPolicyBase(state).getHiveSpecs(this.path);\n\n    Assert.assertEquals(specs.size(), 7);\n    Iterator<HiveSpec> iterator = specs.iterator();\n    HiveSpec spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl3\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl4\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl5\");\n  }\n","date":"2017-07-31 15:51:25","endLine":102,"groupId":"7514","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetHiveSpecsWithDBFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/6e/da1d28149e6125a10a488cea4283d4f148cefc.src","preCode":"  public void testGetHiveSpecsWithDBFilter() throws IOException{\n    State state = new State();\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3,$PRIMARY_TABLE_col\");\n\n    state.appendToListProp(\"db2.\" + HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"$PRIMARY_TABLE_col,tbl4,tbl5\");\n\n    this.path = new Path(getClass().getResource(\"/test-hive-table\").toString());\n\n    Collection<HiveSpec> specs = new HiveRegistrationPolicyBase(state).getHiveSpecs(this.path);\n\n    Assert.assertEquals(specs.size(), 7);\n    Iterator<HiveSpec> iterator = specs.iterator();\n    HiveSpec spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl3\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl4\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl5\");\n  }\n","realPath":"gobblin-hive-registration/src/test/java/org/apache/gobblin/hive/policy/HiveRegistrationPolicyBaseTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"NB"}],"commitId":"6f074c31128d443e7b67f4ca3673e4af7b5dcf05","commitMessage":"@@@[GOBBLIN-1148] improve hive test coverage\n\nadd simple hive spec test\n\nadd test get hive table\n\nadd hive snapshot registration policy test\n\nAdd Apache License header; Use json instead of\navro for testing\n\nadd apach license header\n\nupdate method name\n\nuse .gitignore file to maintain a dummy directory\nfor hive snapshot testing\n\nCloses #2990 from\nhanghangliu/GOBBLIN-1148-improve-hive-test-\ncoverage\n","date":"2020-06-12 01:14:42","modifiedFileCount":"2","status":"M","submitter":"Hanghang Liu"},{"authorTime":"2020-09-12 07:28:05","codes":[{"authorDate":"2020-06-12 01:14:42","commitOrder":3,"curCode":"    public void testGetHiveSpecs()\n            throws IOException {\n        State state = new State();\n        this.path = new Path(getClass().getResource(\"/test-hive-table/snapshot1\").toString());\n        \r\n        Collection<HiveSpec> specs = new HiveSnapshotRegistrationPolicy(state).getHiveSpecs(this.path);\n        Assert.assertEquals(specs.size(), 0);\n\n        \r\n        this.path = new Path(getClass().getResource(\"/test-hive-table/\").toString());\n\n        Assert.assertEquals(specs.size(), 0);\n        state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n        state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n        state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n        state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3\");\n        specs = new HiveSnapshotRegistrationPolicy(state).getHiveSpecs(this.path);\n        Assert.assertEquals(specs.size(), 6);\n        Iterator<HiveSpec> iterator = specs.iterator();\n        HiveSpec spec = iterator.next();\n        examine(spec, \"db1\", \"tbl1\");\n        spec = iterator.next();\n        examine(spec, \"db1\", \"tbl2\");\n        spec = iterator.next();\n        examine(spec, \"db1\", \"tbl3\");\n        spec = iterator.next();\n        examine(spec, \"db2\", \"tbl1\");\n        spec = iterator.next();\n        examine(spec, \"db2\", \"tbl2\");\n        spec = iterator.next();\n        examine(spec, \"db2\", \"tbl3\");\n    }\n","date":"2020-06-12 01:14:42","endLine":69,"groupId":"101200","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testGetHiveSpecs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/8a/7d5070515cbbb04c1b6a444d23b2ca42cb1d6b.src","preCode":"    public void testGetHiveSpecs()\n            throws IOException {\n        State state = new State();\n        this.path = new Path(getClass().getResource(\"/test-hive-table/snapshot1\").toString());\n        \r\n        Collection<HiveSpec> specs = new HiveSnapshotRegistrationPolicy(state).getHiveSpecs(this.path);\n        Assert.assertEquals(specs.size(), 0);\n\n        \r\n        this.path = new Path(getClass().getResource(\"/test-hive-table/\").toString());\n\n        Assert.assertEquals(specs.size(), 0);\n        state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n        state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n        state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n        state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3\");\n        specs = new HiveSnapshotRegistrationPolicy(state).getHiveSpecs(this.path);\n        Assert.assertEquals(specs.size(), 6);\n        Iterator<HiveSpec> iterator = specs.iterator();\n        HiveSpec spec = iterator.next();\n        examine(spec, \"db1\", \"tbl1\");\n        spec = iterator.next();\n        examine(spec, \"db1\", \"tbl2\");\n        spec = iterator.next();\n        examine(spec, \"db1\", \"tbl3\");\n        spec = iterator.next();\n        examine(spec, \"db2\", \"tbl1\");\n        spec = iterator.next();\n        examine(spec, \"db2\", \"tbl2\");\n        spec = iterator.next();\n        examine(spec, \"db2\", \"tbl3\");\n    }\n","realPath":"gobblin-hive-registration/src/test/java/org/apache/gobblin/hive/policy/HiveSnapshotRegistrationPolicyTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"N"},{"authorDate":"2020-09-12 07:28:05","commitOrder":3,"curCode":"  public void testGetHiveSpecsWithDBFilter()\n      throws IOException {\n    State state = new State();\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n    state.appendToListProp(ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3,$PRIMARY_TABLE_col\");\n\n    state.appendToListProp(\"db2.\" + HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"$PRIMARY_TABLE_col,tbl4,tbl5\");\n\n    this.path = new Path(getClass().getResource(\"/test-hive-table\").toString());\n\n    Collection<HiveSpec> specs = new HiveRegistrationPolicyBase(state).getHiveSpecs(this.path);\n\n    Assert.assertEquals(specs.size(), 7);\n    Iterator<HiveSpec> iterator = specs.iterator();\n    HiveSpec spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl3\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl4\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl5\");\n  }\n","date":"2020-09-12 07:28:05","endLine":141,"groupId":"101200","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testGetHiveSpecsWithDBFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b2/36755409c9363b81bbbf4ccf72ab7cbef9caef.src","preCode":"  public void testGetHiveSpecsWithDBFilter()\n      throws IOException {\n    State state = new State();\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_DATABASE_NAME, \"db1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_DATABASE_NAMES, \"db2\");\n\n    state.appendToListProp(HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"tbl1\");\n    state.appendToListProp(HiveRegistrationPolicyBase.ADDITIONAL_HIVE_TABLE_NAMES, \"tbl2,tbl3,$PRIMARY_TABLE_col\");\n\n    state.appendToListProp(\"db2.\" + HiveRegistrationPolicyBase.HIVE_TABLE_NAME, \"$PRIMARY_TABLE_col,tbl4,tbl5\");\n\n    this.path = new Path(getClass().getResource(\"/test-hive-table\").toString());\n\n    Collection<HiveSpec> specs = new HiveRegistrationPolicyBase(state).getHiveSpecs(this.path);\n\n    Assert.assertEquals(specs.size(), 7);\n    Iterator<HiveSpec> iterator = specs.iterator();\n    HiveSpec spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl2\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl3\");\n    spec = iterator.next();\n    examine(spec, \"db1\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl1_col\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl4\");\n    spec = iterator.next();\n    examine(spec, \"db2\", \"tbl5\");\n  }\n","realPath":"gobblin-hive-registration/src/test/java/org/apache/gobblin/hive/policy/HiveRegistrationPolicyBaseTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"e49c068c5f3c9876ff5e89bfd16f3274d0335d00","commitMessage":"@@@[GOBBLIN-1263] Dataset specific Database name for registration\n\nDataset specific Database name for registration\n\nmove the getListOfValuesFromConfigStore to utils\nclass\n\nCloses #3104 from autumnust/datasetLevelDBReg\n","date":"2020-09-12 07:28:05","modifiedFileCount":"3","status":"M","submitter":"Lei Sun"}]
