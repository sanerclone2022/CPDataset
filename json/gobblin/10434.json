[{"authorTime":"2020-06-02 02:29:14","codes":[{"authorDate":"2020-06-02 02:29:14","commitOrder":1,"curCode":"  public void testExecuteIncreasingLatencyCheckEnabled()\n      throws InterruptedException {\n    this.countDownLatch = new CountDownLatch(1);\n    Config config = ConfigFactory.empty().withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_EXPECTED_CONSUMPTION_RATE_MBPS_KEY,\n        ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_LATENCY_THRESHOLD_MINUTES_KEY, ConfigValueFactory.fromAnyRef(5));\n\n    KafkaExtractorStatsTracker extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(6L)\n        .thenReturn(7L)\n        .thenReturn(10L)\n        .thenReturn(5L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1)\n        .thenReturn(2.5);\n\n    KafkaIngestionHealthCheck check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    \r\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 0);\n\n    \r\n    this.countDownLatch = new CountDownLatch(1);\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1);\n\n    config = config.withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_INCREASING_LATENCY_CHECK_ENABLED_KEY, ConfigValueFactory.fromAnyRef(false));\n    extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(10L)\n        .thenReturn(7L)\n        .thenReturn(5L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1);\n\n    check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    check.execute();\n  }\n","date":"2020-06-02 02:29:14","endLine":110,"groupId":"4668","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteIncreasingLatencyCheckEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ff/7049fbcf89e6d9e9ec852c434904a75d3ed4ce.src","preCode":"  public void testExecuteIncreasingLatencyCheckEnabled()\n      throws InterruptedException {\n    this.countDownLatch = new CountDownLatch(1);\n    Config config = ConfigFactory.empty().withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_EXPECTED_CONSUMPTION_RATE_MBPS_KEY,\n        ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_LATENCY_THRESHOLD_MINUTES_KEY, ConfigValueFactory.fromAnyRef(5));\n\n    KafkaExtractorStatsTracker extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(6L)\n        .thenReturn(7L)\n        .thenReturn(10L)\n        .thenReturn(5L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1)\n        .thenReturn(2.5);\n\n    KafkaIngestionHealthCheck check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    \r\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 0);\n\n    \r\n    this.countDownLatch = new CountDownLatch(1);\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1);\n\n    config = config.withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_INCREASING_LATENCY_CHECK_ENABLED_KEY, ConfigValueFactory.fromAnyRef(false));\n    extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(10L)\n        .thenReturn(7L)\n        .thenReturn(5L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1);\n\n    check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    check.execute();\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/test/java/org/apache/gobblin/source/extractor/extract/kafka/KafkaIngestionHealthCheckTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"},{"authorDate":"2020-06-02 02:29:14","commitOrder":1,"curCode":"  public void testExecuteIncreasingLatencyCheckDisabled()\n      throws InterruptedException {\n    this.countDownLatch = new CountDownLatch(1);\n\n    Config config = ConfigFactory.empty().withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_EXPECTED_CONSUMPTION_RATE_MBPS_KEY,\n        ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_LATENCY_THRESHOLD_MINUTES_KEY, ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_INCREASING_LATENCY_CHECK_ENABLED_KEY, ConfigValueFactory.fromAnyRef(false));\n\n    KafkaExtractorStatsTracker extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(10L)\n        .thenReturn(7L)\n        .thenReturn(6L)\n        .thenReturn(4L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1)\n        .thenReturn(2.5);\n\n    KafkaIngestionHealthCheck check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    \r\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 0);\n\n    \r\n    this.countDownLatch = new CountDownLatch(1);\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1);\n  }\n","date":"2020-06-02 02:29:14","endLine":154,"groupId":"4668","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExecuteIncreasingLatencyCheckDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ff/7049fbcf89e6d9e9ec852c434904a75d3ed4ce.src","preCode":"  public void testExecuteIncreasingLatencyCheckDisabled()\n      throws InterruptedException {\n    this.countDownLatch = new CountDownLatch(1);\n\n    Config config = ConfigFactory.empty().withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_EXPECTED_CONSUMPTION_RATE_MBPS_KEY,\n        ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_LATENCY_THRESHOLD_MINUTES_KEY, ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_INCREASING_LATENCY_CHECK_ENABLED_KEY, ConfigValueFactory.fromAnyRef(false));\n\n    KafkaExtractorStatsTracker extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(10L)\n        .thenReturn(7L)\n        .thenReturn(6L)\n        .thenReturn(4L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1)\n        .thenReturn(2.5);\n\n    KafkaIngestionHealthCheck check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    \r\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 0);\n\n    \r\n    this.countDownLatch = new CountDownLatch(1);\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1);\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/test/java/org/apache/gobblin/source/extractor/extract/kafka/KafkaIngestionHealthCheckTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"5cd38ac8d26dd4bccd8582a7182893f29ab5a009","commitMessage":"@@@[GOBBLIN-1162] Provide an option to allow slow containers to commit su?\n\nCloses #3002 from sv2000/containerSuicide\n","date":"2020-06-02 02:29:14","modifiedFileCount":"10","status":"B","submitter":"sv2000"},{"authorTime":"2020-06-02 02:29:14","codes":[{"authorDate":"2020-06-11 03:37:30","commitOrder":2,"curCode":"  public void testExecuteIncreasingLatencyCheckEnabled()\n      throws InterruptedException {\n    this.countDownLatch = new CountDownLatch(1);\n    Config config = ConfigFactory.empty().withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_EXPECTED_CONSUMPTION_RATE_MBPS_KEY,\n        ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_LATENCY_THRESHOLD_MINUTES_KEY, ConfigValueFactory.fromAnyRef(5));\n\n    KafkaExtractorStatsTracker extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(6L)\n        .thenReturn(7L)\n        .thenReturn(7L)\n        .thenReturn(5L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1)\n        .thenReturn(2.5);\n\n    KafkaIngestionHealthCheck check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    \r\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 0);\n\n    \r\n    this.countDownLatch = new CountDownLatch(1);\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1);\n\n    config = config.withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_INCREASING_LATENCY_CHECK_ENABLED_KEY, ConfigValueFactory.fromAnyRef(false));\n    extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(10L)\n        .thenReturn(7L)\n        .thenReturn(5L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1);\n\n    check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    check.execute();\n  }\n","date":"2020-06-11 03:37:30","endLine":110,"groupId":"4668","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteIncreasingLatencyCheckEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/32/6816435c09ad696ba2851f629d3b2d242d9029.src","preCode":"  public void testExecuteIncreasingLatencyCheckEnabled()\n      throws InterruptedException {\n    this.countDownLatch = new CountDownLatch(1);\n    Config config = ConfigFactory.empty().withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_EXPECTED_CONSUMPTION_RATE_MBPS_KEY,\n        ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_LATENCY_THRESHOLD_MINUTES_KEY, ConfigValueFactory.fromAnyRef(5));\n\n    KafkaExtractorStatsTracker extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(6L)\n        .thenReturn(7L)\n        .thenReturn(10L)\n        .thenReturn(5L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1)\n        .thenReturn(2.5);\n\n    KafkaIngestionHealthCheck check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    \r\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 0);\n\n    \r\n    this.countDownLatch = new CountDownLatch(1);\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1);\n\n    config = config.withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_INCREASING_LATENCY_CHECK_ENABLED_KEY, ConfigValueFactory.fromAnyRef(false));\n    extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(10L)\n        .thenReturn(7L)\n        .thenReturn(5L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1);\n\n    check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    check.execute();\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/test/java/org/apache/gobblin/source/extractor/extract/kafka/KafkaIngestionHealthCheckTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2020-06-02 02:29:14","commitOrder":2,"curCode":"  public void testExecuteIncreasingLatencyCheckDisabled()\n      throws InterruptedException {\n    this.countDownLatch = new CountDownLatch(1);\n\n    Config config = ConfigFactory.empty().withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_EXPECTED_CONSUMPTION_RATE_MBPS_KEY,\n        ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_LATENCY_THRESHOLD_MINUTES_KEY, ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_INCREASING_LATENCY_CHECK_ENABLED_KEY, ConfigValueFactory.fromAnyRef(false));\n\n    KafkaExtractorStatsTracker extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(10L)\n        .thenReturn(7L)\n        .thenReturn(6L)\n        .thenReturn(4L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1)\n        .thenReturn(2.5);\n\n    KafkaIngestionHealthCheck check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    \r\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 0);\n\n    \r\n    this.countDownLatch = new CountDownLatch(1);\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1);\n  }\n","date":"2020-06-02 02:29:14","endLine":154,"groupId":"4668","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExecuteIncreasingLatencyCheckDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ff/7049fbcf89e6d9e9ec852c434904a75d3ed4ce.src","preCode":"  public void testExecuteIncreasingLatencyCheckDisabled()\n      throws InterruptedException {\n    this.countDownLatch = new CountDownLatch(1);\n\n    Config config = ConfigFactory.empty().withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_EXPECTED_CONSUMPTION_RATE_MBPS_KEY,\n        ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_LATENCY_THRESHOLD_MINUTES_KEY, ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_INCREASING_LATENCY_CHECK_ENABLED_KEY, ConfigValueFactory.fromAnyRef(false));\n\n    KafkaExtractorStatsTracker extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(10L)\n        .thenReturn(7L)\n        .thenReturn(6L)\n        .thenReturn(4L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1)\n        .thenReturn(2.5);\n\n    KafkaIngestionHealthCheck check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    \r\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 0);\n\n    \r\n    this.countDownLatch = new CountDownLatch(1);\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1);\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/test/java/org/apache/gobblin/source/extractor/extract/kafka/KafkaIngestionHealthCheckTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"N"}],"commitId":"8b9744e21f9bfb7ff2d01391eed28bb0b8799b33","commitMessage":"@@@[GOBBLIN-1189] Relax the condition for the increasing ingestion latency check[]\n\nCloses #3037 from sv2000/latencyHealthCheck\n","date":"2020-06-11 03:37:30","modifiedFileCount":"2","status":"M","submitter":"sv2000"},{"authorTime":"2021-03-17 03:47:43","codes":[{"authorDate":"2021-03-17 03:47:43","commitOrder":3,"curCode":"  public void testExecuteIncreasingLatencyCheckEnabled()\n      throws InterruptedException {\n    this.countDownLatch = new CountDownLatch(1);\n    Config config = ConfigFactory.empty().withValue(KafkaTopicGroupingWorkUnitPacker.CONTAINER_CAPACITY_KEY,\n        ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_LATENCY_THRESHOLD_MINUTES_KEY, ConfigValueFactory.fromAnyRef(5));\n\n    KafkaExtractorStatsTracker extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(6L)\n        .thenReturn(7L)\n        .thenReturn(7L)\n        .thenReturn(5L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1)\n        .thenReturn(2.5);\n\n    KafkaIngestionHealthCheck check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    \r\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 0);\n\n    \r\n    this.countDownLatch = new CountDownLatch(1);\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1);\n\n    config = config.withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_INCREASING_LATENCY_CHECK_ENABLED_KEY, ConfigValueFactory.fromAnyRef(false));\n    extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(10L)\n        .thenReturn(7L)\n        .thenReturn(5L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1);\n\n    check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    check.execute();\n  }\n","date":"2021-03-17 03:47:43","endLine":111,"groupId":"10434","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testExecuteIncreasingLatencyCheckEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4f/69c6a7bf812e94ece89e47ede98f4dbf49f069.src","preCode":"  public void testExecuteIncreasingLatencyCheckEnabled()\n      throws InterruptedException {\n    this.countDownLatch = new CountDownLatch(1);\n    Config config = ConfigFactory.empty().withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_EXPECTED_CONSUMPTION_RATE_MBPS_KEY,\n        ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_LATENCY_THRESHOLD_MINUTES_KEY, ConfigValueFactory.fromAnyRef(5));\n\n    KafkaExtractorStatsTracker extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(6L)\n        .thenReturn(7L)\n        .thenReturn(7L)\n        .thenReturn(5L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1)\n        .thenReturn(2.5);\n\n    KafkaIngestionHealthCheck check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    \r\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 0);\n\n    \r\n    this.countDownLatch = new CountDownLatch(1);\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1);\n\n    config = config.withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_INCREASING_LATENCY_CHECK_ENABLED_KEY, ConfigValueFactory.fromAnyRef(false));\n    extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(10L)\n        .thenReturn(7L)\n        .thenReturn(5L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1);\n\n    check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    check.execute();\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/test/java/org/apache/gobblin/source/extractor/extract/kafka/KafkaIngestionHealthCheckTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2021-03-17 03:47:43","commitOrder":3,"curCode":"  public void testExecuteIncreasingLatencyCheckDisabled()\n      throws InterruptedException {\n    this.countDownLatch = new CountDownLatch(1);\n\n    Config config = ConfigFactory.empty().withValue(KafkaTopicGroupingWorkUnitPacker.CONTAINER_CAPACITY_KEY,\n        ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_LATENCY_THRESHOLD_MINUTES_KEY, ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_INCREASING_LATENCY_CHECK_ENABLED_KEY, ConfigValueFactory.fromAnyRef(false));\n\n    KafkaExtractorStatsTracker extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(10L)\n        .thenReturn(7L)\n        .thenReturn(6L)\n        .thenReturn(4L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1)\n        .thenReturn(2.5);\n\n    KafkaIngestionHealthCheck check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    \r\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 0);\n\n    \r\n    this.countDownLatch = new CountDownLatch(1);\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1);\n  }\n","date":"2021-03-17 03:47:43","endLine":155,"groupId":"10434","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testExecuteIncreasingLatencyCheckDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/4f/69c6a7bf812e94ece89e47ede98f4dbf49f069.src","preCode":"  public void testExecuteIncreasingLatencyCheckDisabled()\n      throws InterruptedException {\n    this.countDownLatch = new CountDownLatch(1);\n\n    Config config = ConfigFactory.empty().withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_EXPECTED_CONSUMPTION_RATE_MBPS_KEY,\n        ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_LATENCY_THRESHOLD_MINUTES_KEY, ConfigValueFactory.fromAnyRef(5))\n        .withValue(KafkaIngestionHealthCheck.KAFKA_INGESTION_HEALTH_CHECK_INCREASING_LATENCY_CHECK_ENABLED_KEY, ConfigValueFactory.fromAnyRef(false));\n\n    KafkaExtractorStatsTracker extractorStatsTracker = Mockito.mock(KafkaExtractorStatsTracker.class);\n    Mockito.when(extractorStatsTracker.getMaxIngestionLatency(TimeUnit.MINUTES))\n        .thenReturn(10L)\n        .thenReturn(7L)\n        .thenReturn(6L)\n        .thenReturn(4L);\n    Mockito.when(extractorStatsTracker.getConsumptionRateMBps())\n        .thenReturn(2.0)\n        .thenReturn(1.5)\n        .thenReturn(2.1)\n        .thenReturn(2.5);\n\n    KafkaIngestionHealthCheck check = new KafkaIngestionHealthCheck(config, extractorStatsTracker);\n\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1L);\n    check.execute();\n    \r\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 0);\n\n    \r\n    this.countDownLatch = new CountDownLatch(1);\n    \r\n    check.execute();\n    this.countDownLatch.await(10, TimeUnit.MILLISECONDS);\n    Assert.assertEquals(this.countDownLatch.getCount(), 1);\n  }\n","realPath":"gobblin-modules/gobblin-kafka-common/src/test/java/org/apache/gobblin/source/extractor/extract/kafka/KafkaIngestionHealthCheckTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"a030866737eca462c7eec9eb11483ca09ec29e83","commitMessage":"@@@[GOBBLIN-1406] Make KafkaIngestionHealth check use auto-tuned consumer?\n\nCloses #3240 from sv2000/autotuneConsumeRate\n","date":"2021-03-17 03:47:43","modifiedFileCount":"4","status":"M","submitter":"suvasude"}]
