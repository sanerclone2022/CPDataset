[{"authorTime":"2018-07-31 00:57:31","codes":[{"authorDate":"2018-07-31 00:57:31","commitOrder":1,"curCode":"  public void testUpdateEdge()\n      throws IOException, GitAPIException, URISyntaxException, ExecutionException, InterruptedException {\n    \r\n    Files.write(FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY + \"=node1\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY + \"=node2\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_NAME_KEY + \"=edge1\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_IS_ACTIVE_KEY + \"=true\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_TEMPLATE_DIR_URI_KEY + \"=FS:///flowEdgeTemplate\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".0.\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTOR_CLASS_KEY + \"=org.apache.gobblin.runtime.spec_executorInstance.InMemorySpecExecutor\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".0.specStore.fs.dir=/tmp1\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".0.specExecInstance.capabilities=s1:d1\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".1.\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTOR_CLASS_KEY + \"=org.apache.gobblin.runtime.spec_executorInstance.InMemorySpecExecutor\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".1.specStore.fs.dir=/tmp2\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".1.specExecInstance.capabilities=s2:d2\\n\"\n        + \"key1=value1\\n\", edge1File, Charsets.UTF_8);\n\n    \r\n    this.gitForPush.add().addFilepattern(formEdgeFilePath(this.edge1Dir.getParentFile().getName(), this.edge1Dir.getName(), this.edge1File.getName())).call();\n    this.gitForPush.commit().setMessage(\"Edge commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.gitFlowGraphMonitor.processGitConfigChanges();\n\n    \r\n    Set<FlowEdge> edgeSet = this.flowGraph.getEdges(\"node1\");\n    Assert.assertEquals(edgeSet.size(), 1);\n    FlowEdge flowEdge = edgeSet.iterator().next();\n    Assert.assertEquals(flowEdge.getSrc(), \"node1\");\n    Assert.assertEquals(flowEdge.getDest(), \"node2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getConfig().getString(\"key1\"), \"value1\");\n  }\n","date":"2018-07-31 00:57:31","endLine":231,"groupId":"6123","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateEdge","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b5/451bc12d40ee46bc20b96ff0709e392e4d01a9.src","preCode":"  public void testUpdateEdge()\n      throws IOException, GitAPIException, URISyntaxException, ExecutionException, InterruptedException {\n    \r\n    Files.write(FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY + \"=node1\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY + \"=node2\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_NAME_KEY + \"=edge1\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_IS_ACTIVE_KEY + \"=true\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_TEMPLATE_DIR_URI_KEY + \"=FS:///flowEdgeTemplate\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".0.\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTOR_CLASS_KEY + \"=org.apache.gobblin.runtime.spec_executorInstance.InMemorySpecExecutor\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".0.specStore.fs.dir=/tmp1\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".0.specExecInstance.capabilities=s1:d1\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".1.\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTOR_CLASS_KEY + \"=org.apache.gobblin.runtime.spec_executorInstance.InMemorySpecExecutor\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".1.specStore.fs.dir=/tmp2\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".1.specExecInstance.capabilities=s2:d2\\n\"\n        + \"key1=value1\\n\", edge1File, Charsets.UTF_8);\n\n    \r\n    this.gitForPush.add().addFilepattern(formEdgeFilePath(this.edge1Dir.getParentFile().getName(), this.edge1Dir.getName(), this.edge1File.getName())).call();\n    this.gitForPush.commit().setMessage(\"Edge commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.gitFlowGraphMonitor.processGitConfigChanges();\n\n    \r\n    Set<FlowEdge> edgeSet = this.flowGraph.getEdges(\"node1\");\n    Assert.assertEquals(edgeSet.size(), 1);\n    FlowEdge flowEdge = edgeSet.iterator().next();\n    Assert.assertEquals(flowEdge.getSrc(), \"node1\");\n    Assert.assertEquals(flowEdge.getDest(), \"node2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getConfig().getString(\"key1\"), \"value1\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"B"},{"authorDate":"2018-07-31 00:57:31","commitOrder":1,"curCode":"  public void testRemoveNode() throws GitAPIException, IOException {\n    \r\n    node1File.delete();\n\n    \r\n    DataNode node1 = this.flowGraph.getNode(\"node1\");\n    Assert.assertNotNull(node1);\n\n    \r\n    DirCache ac = this.gitForPush.rm().addFilepattern(formNodeFilePath(this.node1Dir.getName(), this.node1File.getName())).call();\n    RevCommit cc = this.gitForPush.commit().setMessage(\"Node remove commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.gitFlowGraphMonitor.processGitConfigChanges();\n\n    \r\n    node1 = this.flowGraph.getNode(\"node1\");\n    Assert.assertNull(node1);\n  }\n","date":"2018-07-31 00:57:31","endLine":282,"groupId":"7926","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b5/451bc12d40ee46bc20b96ff0709e392e4d01a9.src","preCode":"  public void testRemoveNode() throws GitAPIException, IOException {\n    \r\n    node1File.delete();\n\n    \r\n    DataNode node1 = this.flowGraph.getNode(\"node1\");\n    Assert.assertNotNull(node1);\n\n    \r\n    DirCache ac = this.gitForPush.rm().addFilepattern(formNodeFilePath(this.node1Dir.getName(), this.node1File.getName())).call();\n    RevCommit cc = this.gitForPush.commit().setMessage(\"Node remove commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.gitFlowGraphMonitor.processGitConfigChanges();\n\n    \r\n    node1 = this.flowGraph.getNode(\"node1\");\n    Assert.assertNull(node1);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"B"}],"commitId":"22a951f0a4ac0c963e99cd2a15989c62a08c81cf","commitMessage":"@@@[GOBBLIN-528] Multihop Flow Compiler for Gobblin-as-a-Service (GaaS).\n\nCloses #2393 from sv2000/multiHopCompiler\n","date":"2018-07-31 00:57:31","modifiedFileCount":"19","status":"B","submitter":"suvasude"},{"authorTime":"2018-10-13 01:19:40","codes":[{"authorDate":"2018-10-13 01:19:40","commitOrder":2,"curCode":"  public void testUpdateEdge()\n      throws IOException, GitAPIException, URISyntaxException, ExecutionException, InterruptedException {\n    \r\n    String fileContents = buildEdgeFileContents(\"node1\", \"node2\", \"edge1\", \"value2\");\n\n    addEdge(this.edge1Dir, this.edge1File, fileContents);\n\n    \r\n    this.gitForPush.add().addFilepattern(formEdgeFilePath(this.edge1Dir.getParentFile().getName(), this.edge1Dir.getName(), this.edge1File.getName())).call();\n    this.gitForPush.commit().setMessage(\"Edge commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.gitFlowGraphMonitor.processGitConfigChanges();\n\n    \r\n    testIfEdgeSuccessfullyAdded(\"node1\", \"node2\", \"edge1\", \"value2\");\n  }\n","date":"2018-10-13 01:19:40","endLine":175,"groupId":"101100","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUpdateEdge","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/bd/7d3cfe772884036503ac0dbd275337c8ef4d0c.src","preCode":"  public void testUpdateEdge()\n      throws IOException, GitAPIException, URISyntaxException, ExecutionException, InterruptedException {\n    \r\n    Files.write(FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY + \"=node1\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY + \"=node2\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_NAME_KEY + \"=edge1\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_IS_ACTIVE_KEY + \"=true\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_TEMPLATE_DIR_URI_KEY + \"=FS:///flowEdgeTemplate\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".0.\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTOR_CLASS_KEY + \"=org.apache.gobblin.runtime.spec_executorInstance.InMemorySpecExecutor\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".0.specStore.fs.dir=/tmp1\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".0.specExecInstance.capabilities=s1:d1\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".1.\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTOR_CLASS_KEY + \"=org.apache.gobblin.runtime.spec_executorInstance.InMemorySpecExecutor\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".1.specStore.fs.dir=/tmp2\\n\"\n        + FlowGraphConfigurationKeys.FLOW_EDGE_SPEC_EXECUTORS_KEY + \".1.specExecInstance.capabilities=s2:d2\\n\"\n        + \"key1=value1\\n\", edge1File, Charsets.UTF_8);\n\n    \r\n    this.gitForPush.add().addFilepattern(formEdgeFilePath(this.edge1Dir.getParentFile().getName(), this.edge1Dir.getName(), this.edge1File.getName())).call();\n    this.gitForPush.commit().setMessage(\"Edge commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.gitFlowGraphMonitor.processGitConfigChanges();\n\n    \r\n    Set<FlowEdge> edgeSet = this.flowGraph.getEdges(\"node1\");\n    Assert.assertEquals(edgeSet.size(), 1);\n    FlowEdge flowEdge = edgeSet.iterator().next();\n    Assert.assertEquals(flowEdge.getSrc(), \"node1\");\n    Assert.assertEquals(flowEdge.getDest(), \"node2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s1:d1\");\n    Assert.assertEquals(flowEdge.getExecutors().get(0).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specStore.fs.dir\"), \"/tmp2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getConfig().get().getString(\"specExecInstance.capabilities\"), \"s2:d2\");\n    Assert.assertEquals(flowEdge.getExecutors().get(1).getClass().getSimpleName(), \"InMemorySpecExecutor\");\n    Assert.assertEquals(flowEdge.getConfig().getString(\"key1\"), \"value1\");\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2018-10-13 01:19:40","commitOrder":2,"curCode":"  public void testRemoveNode() throws GitAPIException, IOException {\n    \r\n    node1File.delete();\n    node2File.delete();\n\n    \r\n    DataNode node1 = this.flowGraph.getNode(\"node1\");\n    Assert.assertNotNull(node1);\n    DataNode node2 = this.flowGraph.getNode(\"node2\");\n    Assert.assertNotNull(node2);\n\n    \r\n    this.gitForPush.rm().addFilepattern(formNodeFilePath(this.node1Dir.getName(), this.node1File.getName())).call();\n    this.gitForPush.rm().addFilepattern(formNodeFilePath(this.node2Dir.getName(), this.node2File.getName())).call();\n    this.gitForPush.commit().setMessage(\"Node remove commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.gitFlowGraphMonitor.processGitConfigChanges();\n\n    \r\n    node1 = this.flowGraph.getNode(\"node1\");\n    Assert.assertNull(node1);\n    node2 = this.flowGraph.getNode(\"node2\");\n    Assert.assertNull(node2);\n  }\n","date":"2018-10-13 01:19:40","endLine":240,"groupId":"101100","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/bd/7d3cfe772884036503ac0dbd275337c8ef4d0c.src","preCode":"  public void testRemoveNode() throws GitAPIException, IOException {\n    \r\n    node1File.delete();\n\n    \r\n    DataNode node1 = this.flowGraph.getNode(\"node1\");\n    Assert.assertNotNull(node1);\n\n    \r\n    DirCache ac = this.gitForPush.rm().addFilepattern(formNodeFilePath(this.node1Dir.getName(), this.node1File.getName())).call();\n    RevCommit cc = this.gitForPush.commit().setMessage(\"Node remove commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.gitFlowGraphMonitor.processGitConfigChanges();\n\n    \r\n    node1 = this.flowGraph.getNode(\"node1\");\n    Assert.assertNull(node1);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"}],"commitId":"4f2f2b3a5c3d354d6e13d91e93bda7a3ade096a9","commitMessage":"@@@[GOBBLIN-611] Ensure node events are processed before edge events in GitFlowGraphMonitor.[]\n\nCloses #2477 from\nsv2000/flowGraphMonitorChangeDepth\n","date":"2018-10-13 01:19:40","modifiedFileCount":"3","status":"M","submitter":"sv2000"}]
