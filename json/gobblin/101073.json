[{"authorTime":"2019-04-25 04:04:38","codes":[{"authorDate":"2019-04-25 04:04:38","commitOrder":1,"curCode":"  public void createTopologySpec() {\n    \r\n    Collection<Spec> specs = topologyCatalog.getSpecs();\n    logger.info(\"[Before Create] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      TopologySpec topologySpec = (TopologySpec) spec;\n      logger.info(\"[Before Create] Spec \" + i++ + \": \" + gson.toJson(topologySpec));\n    }\n    Assert.assertTrue(specs.size() == 0, \"Spec store should be empty before addition\");\n\n    \r\n    this.topologyCatalog.put(topologySpec);\n\n    \r\n    specs = topologyCatalog.getSpecs();\n    logger.info(\"[After Create] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      topologySpec = (TopologySpec) spec;\n      logger.info(\"[After Create] Spec \" + i++ + \": \" + gson.toJson(topologySpec));\n    }\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Spec after addition\");\n  }\n","date":"2019-04-25 04:04:38","endLine":138,"groupId":"7778","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createTopologySpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/42/54b0439adbb36fed31033fe5d965c280727828.src","preCode":"  public void createTopologySpec() {\n    \r\n    Collection<Spec> specs = topologyCatalog.getSpecs();\n    logger.info(\"[Before Create] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      TopologySpec topologySpec = (TopologySpec) spec;\n      logger.info(\"[Before Create] Spec \" + i++ + \": \" + gson.toJson(topologySpec));\n    }\n    Assert.assertTrue(specs.size() == 0, \"Spec store should be empty before addition\");\n\n    \r\n    this.topologyCatalog.put(topologySpec);\n\n    \r\n    specs = topologyCatalog.getSpecs();\n    logger.info(\"[After Create] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      topologySpec = (TopologySpec) spec;\n      logger.info(\"[After Create] Spec \" + i++ + \": \" + gson.toJson(topologySpec));\n    }\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Spec after addition\");\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/spec_catalog/TopologyCatalogTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"},{"authorDate":"2019-04-25 04:04:38","commitOrder":1,"curCode":"  public void createFlowSpec() {\n    \r\n    Collection<Spec> specs = flowCatalog.getSpecs();\n    logger.info(\"[Before Create] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      FlowSpec flowSpec = (FlowSpec) spec;\n      logger.info(\"[Before Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    Assert.assertTrue(specs.size() == 0, \"Spec store should be empty before addition\");\n\n    \r\n    this.flowCatalog.put(flowSpec);\n\n    \r\n    specs = flowCatalog.getSpecs();\n    logger.info(\"[After Create] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      flowSpec = (FlowSpec) spec;\n      logger.info(\"[After Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Spec after addition\");\n  }\n","date":"2019-04-25 04:04:38","endLine":145,"groupId":"7778","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createFlowSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/3d/73281c4f4e55dc1d201585f17e6f322d395c8e.src","preCode":"  public void createFlowSpec() {\n    \r\n    Collection<Spec> specs = flowCatalog.getSpecs();\n    logger.info(\"[Before Create] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      FlowSpec flowSpec = (FlowSpec) spec;\n      logger.info(\"[Before Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    Assert.assertTrue(specs.size() == 0, \"Spec store should be empty before addition\");\n\n    \r\n    this.flowCatalog.put(flowSpec);\n\n    \r\n    specs = flowCatalog.getSpecs();\n    logger.info(\"[After Create] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      flowSpec = (FlowSpec) spec;\n      logger.info(\"[After Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Spec after addition\");\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalogTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"}],"commitId":"d972f72edf359b1348554ba9948f4942ea0c8c69","commitMessage":"@@@[GOBBLIN-746] Async loading FlowSpec\n\nDear Gobblin maintainers. \n\nPlease accept this PR. I understand that it will\nnot be reviewed until I have checked off all the\nsteps below!\n\nThis PR contains:\n- Change `SpecStore` interface to add listing-like\nmethods.  returning an iterator of all `Spec`s it\ncontains.\n- Loading and scheduling `FlowSpec` in\n`GobblinServiceJobScheduler` asynchronously and\nnotifying the completeness using a countdownlatch.\n- Add unit tests for `FSSpecStore` and\n`GobblinServiceJobScheduler`.\n\n\n JIRA\n- [x] My PR addresses the following [Gobblin JIRA]\n    -\nhttps://issues.apache.org/jira/browse/GOBBLIN-746\n\n\n Description\n- [x] Here are some details about my PR.  including\nscreenshots (if applicable):\n\n\n Tests\n- [x] My PR adds the following unit tests __OR__\ndoes not need testing for this extremely good\nreason:\n\n\n Commits\n- [x] My commits all reference JIRA issues in\ntheir subject lines.  and I have squashed multiple\ncommits if they address the same issue. In\naddition.  my commits follow the guidelines from\n\"[How to write a good git commit\nmessage](http://chris.beams.io/posts/git-\ncommit/)\":\n    1. Subject is separated from body by a blank line\n    2. Subject is limited to 50 characters\n    3. Subject does not end with a period\n    4. Subject uses the imperative mood (\"add\".  not\n\"adding\")\n    5. Body wraps at 72 characters\n    6. Body explains \"what\" and \"why\".  not \"how\"\n\nAdd method in specStore to return an iterator of\nSpec URI\n\nAdd async loading and unit test\n\nFix fingbusMain\n\nAddress comments and fix travis failure\n\nCloses #2611 from autumnust/asyncLoadingFlowSpec\n","date":"2019-04-25 04:04:38","modifiedFileCount":"6","status":"B","submitter":"autumnust"},{"authorTime":"2021-08-18 01:51:47","codes":[{"authorDate":"2019-04-25 04:04:38","commitOrder":2,"curCode":"  public void createTopologySpec() {\n    \r\n    Collection<Spec> specs = topologyCatalog.getSpecs();\n    logger.info(\"[Before Create] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      TopologySpec topologySpec = (TopologySpec) spec;\n      logger.info(\"[Before Create] Spec \" + i++ + \": \" + gson.toJson(topologySpec));\n    }\n    Assert.assertTrue(specs.size() == 0, \"Spec store should be empty before addition\");\n\n    \r\n    this.topologyCatalog.put(topologySpec);\n\n    \r\n    specs = topologyCatalog.getSpecs();\n    logger.info(\"[After Create] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      topologySpec = (TopologySpec) spec;\n      logger.info(\"[After Create] Spec \" + i++ + \": \" + gson.toJson(topologySpec));\n    }\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Spec after addition\");\n  }\n","date":"2019-04-25 04:04:38","endLine":138,"groupId":"101073","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createTopologySpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/42/54b0439adbb36fed31033fe5d965c280727828.src","preCode":"  public void createTopologySpec() {\n    \r\n    Collection<Spec> specs = topologyCatalog.getSpecs();\n    logger.info(\"[Before Create] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      TopologySpec topologySpec = (TopologySpec) spec;\n      logger.info(\"[Before Create] Spec \" + i++ + \": \" + gson.toJson(topologySpec));\n    }\n    Assert.assertTrue(specs.size() == 0, \"Spec store should be empty before addition\");\n\n    \r\n    this.topologyCatalog.put(topologySpec);\n\n    \r\n    specs = topologyCatalog.getSpecs();\n    logger.info(\"[After Create] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      topologySpec = (TopologySpec) spec;\n      logger.info(\"[After Create] Spec \" + i++ + \": \" + gson.toJson(topologySpec));\n    }\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Spec after addition\");\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/spec_catalog/TopologyCatalogTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"N"},{"authorDate":"2021-08-18 01:51:47","commitOrder":2,"curCode":"  public void createFlowSpec() {\n    \r\n    Collection<Spec> specs = flowCatalog.getSpecs();\n    logger.info(\"[Before Create] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      FlowSpec flowSpec = (FlowSpec) spec;\n      logger.info(\"[Before Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    Assert.assertEquals(specs.size(), 0, \"Spec store should be empty before addition\");\n\n    \r\n    this.flowCatalog.put(flowSpec);\n\n    \r\n    specs = flowCatalog.getSpecs();\n    logger.info(\"[After Create] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      flowSpec = (FlowSpec) spec;\n      logger.info(\"[After Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    Assert.assertEquals(specs.size(), 1, \"Spec store should contain 1 Spec after addition\");\n    Assert.assertEquals(flowCatalog.getSize(), 1, \"Spec store should contain 1 Spec after addition\");\n  }\n","date":"2021-08-18 01:51:47","endLine":165,"groupId":"101073","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createFlowSpec","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/91/47b7fb61c08c712c2534c6b9b845c9b9791080.src","preCode":"  public void createFlowSpec() {\n    \r\n    Collection<Spec> specs = flowCatalog.getSpecs();\n    logger.info(\"[Before Create] Number of specs: \" + specs.size());\n    int i=0;\n    for (Spec spec : specs) {\n      FlowSpec flowSpec = (FlowSpec) spec;\n      logger.info(\"[Before Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    Assert.assertTrue(specs.size() == 0, \"Spec store should be empty before addition\");\n\n    \r\n    this.flowCatalog.put(flowSpec);\n\n    \r\n    specs = flowCatalog.getSpecs();\n    logger.info(\"[After Create] Number of specs: \" + specs.size());\n    i = 0;\n    for (Spec spec : specs) {\n      flowSpec = (FlowSpec) spec;\n      logger.info(\"[After Create] Spec \" + i++ + \": \" + gson.toJson(flowSpec));\n    }\n    Assert.assertTrue(specs.size() == 1, \"Spec store should contain 1 Spec after addition\");\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalogTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"}],"commitId":"bea210a70fad93951eedb49590b9bcca4615e255","commitMessage":"@@@[GOBBLIN-1518] create getSize api for spec store which is faster than doing getAll (#3367)\n\nDuring a memory profiling we noticed that a lot of CPU cycles are used in calling getSpecs().size() from metric reporting thread which runs in every n seconds. Right now there is no API to get size of the spec store.\nDoing getAllSpecs and then calling size() over it.  does a lot of unnecessary work viz reading the content of spec.\nThis PR will provide a method to direct get the size of the spec store without doing any unnecessary work.","date":"2021-08-18 01:51:47","modifiedFileCount":"10","status":"M","submitter":"Arjun Singh Bora"}]
