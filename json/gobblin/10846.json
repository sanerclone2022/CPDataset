[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n          ((FlowSpec) spec).getConfigAsProperties()));\n      if (specStore.exists(spec.getUri())) {\n        specStore.updateSpec(spec);\n        this.listeners.onUpdateSpec(spec);\n      } else {\n        specStore.addSpec(spec);\n        this.listeners.onAddSpec(spec);\n      }\n\n    } catch (IOException | SpecNotFoundException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":240,"groupId":"2095","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(Specspec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/8f/fa4d7feb43999b76142b902f30a3e4cf78d8bd.src","preCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n          ((FlowSpec) spec).getConfigAsProperties()));\n      if (specStore.exists(spec.getUri())) {\n        specStore.updateSpec(spec);\n        this.listeners.onUpdateSpec(spec);\n      } else {\n        specStore.addSpec(spec);\n        this.listeners.onAddSpec(spec);\n      }\n\n    } catch (IOException | SpecNotFoundException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n      if (specStore.exists(spec.getUri())) {\n        specStore.updateSpec(spec);\n        this.listeners.onUpdateSpec(spec);\n      } else {\n        specStore.addSpec(spec);\n        this.listeners.onAddSpec(spec);\n      }\n\n    } catch (IOException | SpecNotFoundException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":241,"groupId":"2095","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(Specspec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/21/22014590971a4074b341b58640845e7a9f5977.src","preCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n      if (specStore.exists(spec.getUri())) {\n        specStore.updateSpec(spec);\n        this.listeners.onUpdateSpec(spec);\n      } else {\n        specStore.addSpec(spec);\n        this.listeners.onAddSpec(spec);\n      }\n\n    } catch (IOException | SpecNotFoundException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/TopologyCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-11-08 06:04:53","codes":[{"authorDate":"2017-11-08 06:04:53","commitOrder":2,"curCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n          ((FlowSpec) spec).getConfigAsProperties()));\n      specStore.addSpec(spec);\n      this.listeners.onAddSpec(spec);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","date":"2017-11-08 06:04:53","endLine":242,"groupId":"2095","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(Specspec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ec/fe0365134d0bbbea8a206df5d6d8d2fe2a71ec.src","preCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n          ((FlowSpec) spec).getConfigAsProperties()));\n      if (specStore.exists(spec.getUri())) {\n        specStore.updateSpec(spec);\n        this.listeners.onUpdateSpec(spec);\n      } else {\n        specStore.addSpec(spec);\n        this.listeners.onAddSpec(spec);\n      }\n\n    } catch (IOException | SpecNotFoundException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"},{"authorDate":"2017-11-08 06:04:53","commitOrder":2,"curCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n        this.listeners.onAddSpec(spec);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","date":"2017-11-08 06:04:53","endLine":241,"groupId":"2095","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(Specspec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/7b/b8b9cb08e739df047cc54b45e33d86f24698b1.src","preCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n      if (specStore.exists(spec.getUri())) {\n        specStore.updateSpec(spec);\n        this.listeners.onUpdateSpec(spec);\n      } else {\n        specStore.addSpec(spec);\n        this.listeners.onAddSpec(spec);\n      }\n\n    } catch (IOException | SpecNotFoundException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/TopologyCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"c385f1dddb0124f0ff2545d9a591f3b055f76080","commitMessage":"@@@[GOBBLIN-304] Change default version of flow specs to null.\n\nCloses #2159 from arjun4084346/removeSpecVersion\n","date":"2017-11-08 06:04:53","modifiedFileCount":"14","status":"M","submitter":"Arjun"},{"authorTime":"2017-11-08 06:04:53","codes":[{"authorDate":"2017-12-08 07:28:16","commitOrder":3,"curCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      long startTime = System.currentTimeMillis();\n      log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n          ((FlowSpec) spec).getConfigAsProperties()));\n      specStore.addSpec(spec);\n      metrics.updatePutSpecTime(startTime);\n      this.listeners.onAddSpec(spec);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","date":"2017-12-08 07:28:16","endLine":256,"groupId":"6298","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(Specspec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/48/2825fd51dc8e2cc68934b38319f6888fe42812.src","preCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n          ((FlowSpec) spec).getConfigAsProperties()));\n      specStore.addSpec(spec);\n      this.listeners.onAddSpec(spec);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2017-11-08 06:04:53","commitOrder":3,"curCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n        this.listeners.onAddSpec(spec);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","date":"2017-11-08 06:04:53","endLine":241,"groupId":"2095","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(Specspec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/7b/b8b9cb08e739df047cc54b45e33d86f24698b1.src","preCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n        this.listeners.onAddSpec(spec);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/TopologyCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"}],"commitId":"1be7455246d5c35900c8715c32559bd75b6c7bde","commitMessage":"@@@[GOBBLIN-326] Add more metrics for GaaS and Gobblin Cluster\n\nCloses #2178 from yukuai518/timer\n","date":"2017-12-08 07:28:16","modifiedFileCount":"22","status":"M","submitter":"Kuai Yu"},{"authorTime":"2017-11-08 06:04:53","codes":[{"authorDate":"2018-05-17 02:40:22","commitOrder":4,"curCode":"  public void put(Spec spec, boolean triggerListener) {\n    try {\n      Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      long startTime = System.currentTimeMillis();\n      log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n          ((FlowSpec) spec).getConfigAsProperties()));\n      specStore.addSpec(spec);\n      metrics.updatePutSpecTime(startTime);\n      if (triggerListener) {\n        this.listeners.onAddSpec(spec);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":258,"groupId":"6298","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(Specspec@booleantriggerListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/34/22d667da13436d9a9d97b5298b12c92183591d.src","preCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      long startTime = System.currentTimeMillis();\n      log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n          ((FlowSpec) spec).getConfigAsProperties()));\n      specStore.addSpec(spec);\n      metrics.updatePutSpecTime(startTime);\n      this.listeners.onAddSpec(spec);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2017-11-08 06:04:53","commitOrder":4,"curCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n        this.listeners.onAddSpec(spec);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","date":"2017-11-08 06:04:53","endLine":241,"groupId":"2095","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(Specspec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/7b/b8b9cb08e739df047cc54b45e33d86f24698b1.src","preCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n        this.listeners.onAddSpec(spec);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/TopologyCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"}],"commitId":"01302a6db2c468507c0adea5daa69de997aaf14b","commitMessage":"@@@[GOBBLIN-458] Refactor flowConfig resource handler\n\nCloses #2329 from yukuai518/delete\n","date":"2018-05-17 02:40:22","modifiedFileCount":"9","status":"M","submitter":"Kuai Yu"},{"authorTime":"2019-03-18 10:52:52","codes":[{"authorDate":"2019-03-18 10:52:52","commitOrder":5,"curCode":"  public Map<String, AddSpecResponse> put(Spec spec, boolean triggerListener) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n    try {\n      Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      long startTime = System.currentTimeMillis();\n      log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n          ((FlowSpec) spec).getConfigAsProperties()));\n      specStore.addSpec(spec);\n      metrics.updatePutSpecTime(startTime);\n      if (triggerListener) {\n        AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n        for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n          responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","date":"2019-03-18 10:52:52","endLine":266,"groupId":"6298","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(Specspec@booleantriggerListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/a7/db4fd13e6c46325cae36986a3ae0b9517727b7.src","preCode":"  public void put(Spec spec, boolean triggerListener) {\n    try {\n      Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      long startTime = System.currentTimeMillis();\n      log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n          ((FlowSpec) spec).getConfigAsProperties()));\n      specStore.addSpec(spec);\n      metrics.updatePutSpecTime(startTime);\n      if (triggerListener) {\n        this.listeners.onAddSpec(spec);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2019-03-18 10:52:52","commitOrder":5,"curCode":"  public Map<String, AddSpecResponse> put(Spec spec) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","date":"2019-03-18 10:52:52","endLine":253,"groupId":"2095","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(Specspec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c4/4e111bdc3b4a8193180f37f753ebad26204e15.src","preCode":"  public void put(Spec spec) {\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n        this.listeners.onAddSpec(spec);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/TopologyCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"}],"commitId":"aadf53dbb8acc5a3de0249d3695384fdefa4eb35","commitMessage":"@@@[GOBBLIN-696] Provide an \"explain\" option to return a compiled flow wh?\n\nCloses #2567 from sv2000/dagPlan1\n","date":"2019-03-18 10:52:52","modifiedFileCount":"19","status":"M","submitter":"suvasude"},{"authorTime":"2019-03-18 10:52:52","codes":[{"authorDate":"2020-03-13 02:01:09","commitOrder":6,"curCode":"  public Map<String, AddSpecResponse> put(Spec spec, boolean triggerListener) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n    Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n    Preconditions.checkNotNull(spec);\n\n    log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n        ((FlowSpec) spec).getConfigAsProperties()));\n    if (triggerListener) {\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    }\n\n    boolean compileSuccess = isCompileSuccessful(responseMap);\n\n    if (compileSuccess) {\n      long startTime = System.currentTimeMillis();\n      metrics.updatePutSpecTime(startTime);\n      try {\n        specStore.addSpec(spec);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n      }\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"true\"));\n    } else {\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"false\"));\n    }\n\n    return responseMap;\n  }\n","date":"2020-03-13 02:01:09","endLine":328,"groupId":"5131","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(Specspec@booleantriggerListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/69/19cfc93900a5c9972cfb4eedb89fd09b8d50ad.src","preCode":"  public Map<String, AddSpecResponse> put(Spec spec, boolean triggerListener) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n    try {\n      Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      long startTime = System.currentTimeMillis();\n      log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n          ((FlowSpec) spec).getConfigAsProperties()));\n      specStore.addSpec(spec);\n      metrics.updatePutSpecTime(startTime);\n      if (triggerListener) {\n        AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n        for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n          responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"},{"authorDate":"2019-03-18 10:52:52","commitOrder":6,"curCode":"  public Map<String, AddSpecResponse> put(Spec spec) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","date":"2019-03-18 10:52:52","endLine":253,"groupId":"2095","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(Specspec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c4/4e111bdc3b4a8193180f37f753ebad26204e15.src","preCode":"  public Map<String, AddSpecResponse> put(Spec spec) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/TopologyCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"}],"commitId":"5796bb4c890cf4c7e48c061907232289cfb08ab9","commitMessage":"@@@[GOBBLIN-1082] compile a flow before storing it in spec catalog\n\nCloses #2921 from\narjun4084346/storeSpecAfterCompile\n","date":"2020-03-13 02:01:09","modifiedFileCount":"4","status":"M","submitter":"Arjun"},{"authorTime":"2019-03-18 10:52:52","codes":[{"authorDate":"2020-03-20 11:32:25","commitOrder":7,"curCode":"  public Map<String, AddSpecResponse> put(Spec spec, boolean triggerListener) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n    Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n    Preconditions.checkNotNull(spec);\n\n    log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n        ((FlowSpec) spec).getConfigAsProperties()));\n    if (triggerListener) {\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    }\n\n    boolean compileSuccess = isCompileSuccessful(responseMap);\n\n    if (compileSuccess) {\n      long startTime = System.currentTimeMillis();\n      metrics.updatePutSpecTime(startTime);\n      try {\n        if (!((FlowSpec) spec).isExplain()) {\n          specStore.addSpec(spec);\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n      }\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"true\"));\n    } else {\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"false\"));\n    }\n\n    return responseMap;\n  }\n","date":"2020-03-20 11:32:25","endLine":326,"groupId":"5131","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(Specspec@booleantriggerListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d9/02fdf5f6ac7a3927c8130fae2396975b9c69f9.src","preCode":"  public Map<String, AddSpecResponse> put(Spec spec, boolean triggerListener) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n    Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n    Preconditions.checkNotNull(spec);\n\n    log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n        ((FlowSpec) spec).getConfigAsProperties()));\n    if (triggerListener) {\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    }\n\n    boolean compileSuccess = isCompileSuccessful(responseMap);\n\n    if (compileSuccess) {\n      long startTime = System.currentTimeMillis();\n      metrics.updatePutSpecTime(startTime);\n      try {\n        specStore.addSpec(spec);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n      }\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"true\"));\n    } else {\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"false\"));\n    }\n\n    return responseMap;\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"},{"authorDate":"2019-03-18 10:52:52","commitOrder":7,"curCode":"  public Map<String, AddSpecResponse> put(Spec spec) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","date":"2019-03-18 10:52:52","endLine":253,"groupId":"2095","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(Specspec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c4/4e111bdc3b4a8193180f37f753ebad26204e15.src","preCode":"  public Map<String, AddSpecResponse> put(Spec spec) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/TopologyCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"}],"commitId":"64cc9ffaa8a9a232a4181305a9500bbc4229cd7a","commitMessage":"@@@[GOBBLIN-1092][Gobblin 1092] added some logs.  fix checkstyle.  removed some redundant code\n\nCloses #2932 from arjun4084346/debug\n","date":"2020-03-20 11:32:25","modifiedFileCount":"9","status":"M","submitter":"Arjun"},{"authorTime":"2019-03-18 10:52:52","codes":[{"authorDate":"2020-05-15 01:18:36","commitOrder":8,"curCode":"  public Map<String, AddSpecResponse> put(Spec spec, boolean triggerListener) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n    FlowSpec flowSpec = (FlowSpec) spec;\n    Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n    Preconditions.checkNotNull(flowSpec);\n\n    log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", flowSpec.getUri(), flowSpec.getConfigAsProperties()));\n    try {\n      long startTime = System.currentTimeMillis();\n      specStore.addSpec(flowSpec);\n      metrics.updatePutSpecTime(startTime);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + flowSpec, e);\n    }\n\n    if (triggerListener) {\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(flowSpec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    }\n\n    if (isCompileSuccessful(responseMap)) {\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"true\"));\n    } else {\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"false\"));\n    }\n\n    return responseMap;\n  }\n","date":"2020-05-15 01:18:36","endLine":326,"groupId":"0","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(Specspec@booleantriggerListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/02/9005cc2179b95256956c3b501b77c4298db407.src","preCode":"  public Map<String, AddSpecResponse> put(Spec spec, boolean triggerListener) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n    Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n    Preconditions.checkNotNull(spec);\n\n    log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", spec.getUri(),\n        ((FlowSpec) spec).getConfigAsProperties()));\n    if (triggerListener) {\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    }\n\n    boolean compileSuccess = isCompileSuccessful(responseMap);\n\n    if (compileSuccess) {\n      long startTime = System.currentTimeMillis();\n      metrics.updatePutSpecTime(startTime);\n      try {\n        if (!((FlowSpec) spec).isExplain()) {\n          specStore.addSpec(spec);\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n      }\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"true\"));\n    } else {\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"false\"));\n    }\n\n    return responseMap;\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2019-03-18 10:52:52","commitOrder":8,"curCode":"  public Map<String, AddSpecResponse> put(Spec spec) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","date":"2019-03-18 10:52:52","endLine":253,"groupId":"2095","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(Specspec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c4/4e111bdc3b4a8193180f37f753ebad26204e15.src","preCode":"  public Map<String, AddSpecResponse> put(Spec spec) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/TopologyCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"}],"commitId":"76d5a3bab26b471b722787d735f3df696beecd68","commitMessage":"@@@[GOBBLIN-1144] remove specs from gobblin service job scheduler\n\nDear Gobblin maintainers. \n\nPlease accept this PR. I understand that it will\nnot be reviewed until I have checked off all the\nsteps below!\n\n\n JIRA\n- [x] My PR addresses the following [Gobblin JIRA]\n(https://issues.apache.org/jira/browse/GOBBLIN/)\nissues and references them in the PR title. For\nexample.  \"[GOBBLIN-XXX] My Gobblin PR\"\n    -\nhttps://issues.apache.org/jira/browse/GOBBLIN-1144\n\n\n Description\n- [x] Here are some details about my PR.  including\nscreenshots (if applicable):\nimplement option 4 mentioned in the doc https://do\ncs.google.com/document/d/1OsImllAZRnJIp2NWEOdlfw0X\ntqY1b-ysyKEZYLHwVbQ/edit\n\n\n Tests\n- [x] My PR adds the following unit tests __OR__\ndoes not need testing for this extremely good\nreason:\ntrivial changes\n\n\n Commits\n- [x] My commits all reference JIRA issues in\ntheir subject lines.  and I have squashed multiple\ncommits if they address the same issue. In\naddition.  my commits follow the guidelines from\n\"[How to write a good git commit\nmessage](http://chris.beams.io/posts/git-\ncommit/)\":\n    1. Subject is separated from body by a blank line\n    2. Subject is limited to 50 characters\n    3. Subject does not end with a period\n    4. Subject uses the imperative mood (\"add\".  not\n\"adding\")\n    5. Body wraps at 72 characters\n    6. Body explains \"what\" and \"why\".  not \"how\"\n\nCloses #2981 from\narjun4084346/flowCatalogRaceCondition\n","date":"2020-05-15 01:18:36","modifiedFileCount":"2","status":"M","submitter":"Arjun"},{"authorTime":"2019-03-18 10:52:52","codes":[{"authorDate":"2020-06-02 05:44:20","commitOrder":9,"curCode":"  public Map<String, AddSpecResponse> put(Spec spec, boolean triggerListener) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n    FlowSpec flowSpec = (FlowSpec) spec;\n    Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n    Preconditions.checkNotNull(flowSpec);\n\n    log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", flowSpec.getUri(), flowSpec.getConfigAsProperties()));\n\n    Object syncObject = new Object();\n    specSyncObjects.put(flowSpec.getUri().toString(), syncObject);\n\n    if (triggerListener) {\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(flowSpec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    }\n\n    if (isCompileSuccessful(responseMap)) {\n      synchronized (syncObject) {\n        try {\n          if (!flowSpec.isExplain()) {\n            long startTime = System.currentTimeMillis();\n            specStore.addSpec(spec);\n            metrics.updatePutSpecTime(startTime);\n          }\n          responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"true\"));\n        } catch (IOException e) {\n          throw new RuntimeException(\"Cannot add Spec to Spec store: \" + flowSpec, e);\n        } finally {\n          syncObject.notifyAll();\n          this.specSyncObjects.remove(flowSpec.getUri().toString());\n        }\n      }\n    } else {\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"false\"));\n    }\n\n    return responseMap;\n  }\n","date":"2020-06-02 05:44:20","endLine":349,"groupId":"4771","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(Specspec@booleantriggerListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b6/4ebd7120fff5379bf50a6b194cfba109757e9b.src","preCode":"  public Map<String, AddSpecResponse> put(Spec spec, boolean triggerListener) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n    FlowSpec flowSpec = (FlowSpec) spec;\n    Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n    Preconditions.checkNotNull(flowSpec);\n\n    log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", flowSpec.getUri(), flowSpec.getConfigAsProperties()));\n    try {\n      long startTime = System.currentTimeMillis();\n      specStore.addSpec(flowSpec);\n      metrics.updatePutSpecTime(startTime);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + flowSpec, e);\n    }\n\n    if (triggerListener) {\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(flowSpec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    }\n\n    if (isCompileSuccessful(responseMap)) {\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"true\"));\n    } else {\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"false\"));\n    }\n\n    return responseMap;\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"},{"authorDate":"2019-03-18 10:52:52","commitOrder":9,"curCode":"  public Map<String, AddSpecResponse> put(Spec spec) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","date":"2019-03-18 10:52:52","endLine":253,"groupId":"2095","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(Specspec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c4/4e111bdc3b4a8193180f37f753ebad26204e15.src","preCode":"  public Map<String, AddSpecResponse> put(Spec spec) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/TopologyCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"}],"commitId":"6bc395c3c1428852a30b5add8db7402be7b4b1ae","commitMessage":"@@@[GOBBLIN-1160] No spec delete on gobblin service start\n\nCloses #3011 from arjun4084346/noSpecRemoveOnStart\n","date":"2020-06-02 05:44:20","modifiedFileCount":"7","status":"M","submitter":"Arjun"},{"authorTime":"2019-03-18 10:52:52","codes":[{"authorDate":"2021-05-07 07:45:15","commitOrder":10,"curCode":"  public Map<String, AddSpecResponse> put(Spec spec, boolean triggerListener) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n    FlowSpec flowSpec = (FlowSpec) spec;\n    Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n    Preconditions.checkNotNull(flowSpec);\n\n    log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", flowSpec.getUri(), flowSpec.getConfigAsProperties()));\n\n    Object syncObject = new Object();\n    specSyncObjects.put(flowSpec.getUri().toString(), syncObject);\n\n    if (triggerListener) {\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(flowSpec);\n      \r\n      if (!response.getValue().getFailures().isEmpty()) {\n        for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getFailures().entrySet()) {\n          flowSpec.getCompilationErrors().add(Throwables.getStackTraceAsString(entry.getValue().getError()));\n          responseMap.put(entry.getKey().getName(), new AddSpecResponse(entry.getValue().getResult()));\n        }\n      } else {\n        for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry : response.getValue().getSuccesses().entrySet()) {\n          responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n        }\n      }\n    }\n\n    if (isCompileSuccessful(responseMap)) {\n      synchronized (syncObject) {\n        try {\n          if (!flowSpec.isExplain()) {\n            long startTime = System.currentTimeMillis();\n            specStore.addSpec(spec);\n            metrics.updatePutSpecTime(startTime);\n          }\n          responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"true\"));\n        } catch (IOException e) {\n          throw new RuntimeException(\"Cannot add Spec to Spec store: \" + flowSpec, e);\n        } finally {\n          syncObject.notifyAll();\n          this.specSyncObjects.remove(flowSpec.getUri().toString());\n        }\n      }\n    } else {\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"false\"));\n    }\n\n    return responseMap;\n  }\n","date":"2021-05-07 07:45:15","endLine":378,"groupId":"0","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(Specspec@booleantriggerListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/be/7b205671a783f3fa297e0a6baf3c393adb415e.src","preCode":"  public Map<String, AddSpecResponse> put(Spec spec, boolean triggerListener) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n    FlowSpec flowSpec = (FlowSpec) spec;\n    Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n    Preconditions.checkNotNull(flowSpec);\n\n    log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", flowSpec.getUri(), flowSpec.getConfigAsProperties()));\n\n    Object syncObject = new Object();\n    specSyncObjects.put(flowSpec.getUri().toString(), syncObject);\n\n    if (triggerListener) {\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(flowSpec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    }\n\n    if (isCompileSuccessful(responseMap)) {\n      synchronized (syncObject) {\n        try {\n          if (!flowSpec.isExplain()) {\n            long startTime = System.currentTimeMillis();\n            specStore.addSpec(spec);\n            metrics.updatePutSpecTime(startTime);\n          }\n          responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"true\"));\n        } catch (IOException e) {\n          throw new RuntimeException(\"Cannot add Spec to Spec store: \" + flowSpec, e);\n        } finally {\n          syncObject.notifyAll();\n          this.specSyncObjects.remove(flowSpec.getUri().toString());\n        }\n      }\n    } else {\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"false\"));\n    }\n\n    return responseMap;\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"},{"authorDate":"2019-03-18 10:52:52","commitOrder":10,"curCode":"  public Map<String, AddSpecResponse> put(Spec spec) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","date":"2019-03-18 10:52:52","endLine":253,"groupId":"2095","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(Specspec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c4/4e111bdc3b4a8193180f37f753ebad26204e15.src","preCode":"  public Map<String, AddSpecResponse> put(Spec spec) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/TopologyCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"}],"commitId":"701840858f1323a1f009a44bc70c1e14e7464935","commitMessage":"@@@[GOBBLIN-1439] Handle flow configs that cause compilation errors from being added and blocking scheduler\n\nCloses #3273 from Will-Lo/handle-flowspec-\ncompilation-errors\n","date":"2021-05-07 07:45:15","modifiedFileCount":"4","status":"M","submitter":"William Lo"},{"authorTime":"2019-03-18 10:52:52","codes":[{"authorDate":"2021-06-05 06:46:57","commitOrder":11,"curCode":"  public Map<String, AddSpecResponse> put(Spec spec, boolean triggerListener) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n    FlowSpec flowSpec = (FlowSpec) spec;\n    Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n    Preconditions.checkNotNull(flowSpec);\n\n    log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", flowSpec.getUri(), flowSpec.getConfigAsProperties()));\n\n    Object syncObject = new Object();\n    specSyncObjects.put(flowSpec.getUri().toString(), syncObject);\n\n    if (triggerListener) {\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(flowSpec);\n      \r\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry : response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    }\n\n    if (isCompileSuccessful(responseMap)) {\n      synchronized (syncObject) {\n        try {\n          if (!flowSpec.isExplain()) {\n            long startTime = System.currentTimeMillis();\n            specStore.addSpec(spec);\n            metrics.updatePutSpecTime(startTime);\n          }\n          responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"true\"));\n        } catch (IOException e) {\n          throw new RuntimeException(\"Cannot add Spec to Spec store: \" + flowSpec, e);\n        } finally {\n          syncObject.notifyAll();\n          this.specSyncObjects.remove(flowSpec.getUri().toString());\n        }\n      }\n    } else {\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"false\"));\n    }\n\n    return responseMap;\n  }\n","date":"2021-06-05 06:46:57","endLine":368,"groupId":"10846","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(Specspec@booleantriggerListener)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/14/7a86b9a2e3106552b4530d7904324197c68963.src","preCode":"  public Map<String, AddSpecResponse> put(Spec spec, boolean triggerListener) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n    FlowSpec flowSpec = (FlowSpec) spec;\n    Preconditions.checkState(state() == State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n    Preconditions.checkNotNull(flowSpec);\n\n    log.info(String.format(\"Adding FlowSpec with URI: %s and Config: %s\", flowSpec.getUri(), flowSpec.getConfigAsProperties()));\n\n    Object syncObject = new Object();\n    specSyncObjects.put(flowSpec.getUri().toString(), syncObject);\n\n    if (triggerListener) {\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(flowSpec);\n      \r\n      if (!response.getValue().getFailures().isEmpty()) {\n        for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getFailures().entrySet()) {\n          flowSpec.getCompilationErrors().add(Throwables.getStackTraceAsString(entry.getValue().getError()));\n          responseMap.put(entry.getKey().getName(), new AddSpecResponse(entry.getValue().getResult()));\n        }\n      } else {\n        for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry : response.getValue().getSuccesses().entrySet()) {\n          responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n        }\n      }\n    }\n\n    if (isCompileSuccessful(responseMap)) {\n      synchronized (syncObject) {\n        try {\n          if (!flowSpec.isExplain()) {\n            long startTime = System.currentTimeMillis();\n            specStore.addSpec(spec);\n            metrics.updatePutSpecTime(startTime);\n          }\n          responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"true\"));\n        } catch (IOException e) {\n          throw new RuntimeException(\"Cannot add Spec to Spec store: \" + flowSpec, e);\n        } finally {\n          syncObject.notifyAll();\n          this.specSyncObjects.remove(flowSpec.getUri().toString());\n        }\n      }\n    } else {\n      responseMap.put(ServiceConfigKeys.COMPILATION_SUCCESSFUL, new AddSpecResponse<>(\"false\"));\n    }\n\n    return responseMap;\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/FlowCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"M"},{"authorDate":"2019-03-18 10:52:52","commitOrder":11,"curCode":"  public Map<String, AddSpecResponse> put(Spec spec) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","date":"2019-03-18 10:52:52","endLine":253,"groupId":"10846","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"put","params":"(Specspec)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c4/4e111bdc3b4a8193180f37f753ebad26204e15.src","preCode":"  public Map<String, AddSpecResponse> put(Spec spec) {\n    Map<String, AddSpecResponse> responseMap = new HashMap<>();\n\n    try {\n      Preconditions.checkState(state() == Service.State.RUNNING, String.format(\"%s is not running.\", this.getClass().getName()));\n      Preconditions.checkNotNull(spec);\n\n      log.info(String.format(\"Adding TopologySpec with URI: %s and Config: %s\", spec.getUri(),\n          ((TopologySpec) spec).getConfigAsProperties()));\n        specStore.addSpec(spec);\n      AddSpecResponse<CallbacksDispatcher.CallbackResults<SpecCatalogListener, AddSpecResponse>> response = this.listeners.onAddSpec(spec);\n      for (Map.Entry<SpecCatalogListener, CallbackResult<AddSpecResponse>> entry: response.getValue().getSuccesses().entrySet()) {\n        responseMap.put(entry.getKey().getName(), entry.getValue().getResult());\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(\"Cannot add Spec to Spec store: \" + spec, e);\n    }\n    return responseMap;\n  }\n","realPath":"gobblin-runtime/src/main/java/org/apache/gobblin/runtime/spec_catalog/TopologyCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"}],"commitId":"381b659d3da7a241d6f038696396e6bba690120e","commitMessage":"@@@[GOBBLIN-1453] Improve error reporting on failed flow compilations and fix bugs wher?\n\nCloses #3291 from Will-Lo/modify-flow-compilation-\nerror-reporting\n","date":"2021-06-05 06:46:57","modifiedFileCount":"11","status":"M","submitter":"William Lo"}]
