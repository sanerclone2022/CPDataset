[{"authorTime":"2018-06-12 05:23:21","codes":[{"authorDate":"2018-07-31 00:57:31","commitOrder":3,"curCode":"  public void setUp() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\"\n            + ConfigurationKeys.GIT_MONITOR_REPO_URI, this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/git-flowgraph\")\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    \r\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    Properties properties = new Properties();\n    properties.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(properties);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    this.flowCatalog = new FSFlowCatalog(templateCatalogCfg);\n\n    \r\n    this.flowGraph = new BaseFlowGraph();\n\n    this.gitFlowGraphMonitor = new GitFlowGraphMonitor(this.config, this.flowCatalog, this.flowGraph);\n    this.gitFlowGraphMonitor.setActive(true);\n  }\n","date":"2018-07-31 00:57:31","endLine":120,"groupId":"7924","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b5/451bc12d40ee46bc20b96ff0709e392e4d01a9.src","preCode":"  public void setUp() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\"\n            + ConfigurationKeys.GIT_MONITOR_REPO_URI, this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/git-flowgraph\")\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    \r\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    Properties properties = new Properties();\n    properties.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(properties);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    this.flowCatalog = new FSFlowCatalog(templateCatalogCfg);\n\n    \r\n    this.flowGraph = new BaseFlowGraph();\n\n    this.gitFlowGraphMonitor = new GitFlowGraphMonitor(this.config, this.flowCatalog, this.flowGraph);\n    this.gitFlowGraphMonitor.setActive(true);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"B"},{"authorDate":"2018-06-12 05:23:21","commitOrder":3,"curCode":"  public void setup() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI,\n            this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/jobConfig\")\n        .addPrimitive(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY, TEST_DIR + \"flowCatalog\")\n        .addPrimitive(ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    this.flowCatalog = new FlowCatalog(config);\n    this.flowCatalog.startAsync().awaitRunning();\n    this.gitConfigMonitor = new GitConfigMonitor(this.config, this.flowCatalog);\n    this.gitConfigMonitor.setActive(true);\n  }\n","date":"2018-06-12 05:23:21","endLine":107,"groupId":"7178","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/71/ad56d476d3c62b367aa1a06ff77fdfe4e8e1e4.src","preCode":"  public void setup() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI,\n            this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/jobConfig\")\n        .addPrimitive(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY, TEST_DIR + \"flowCatalog\")\n        .addPrimitive(ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    this.flowCatalog = new FlowCatalog(config);\n    this.flowCatalog.startAsync().awaitRunning();\n    this.gitConfigMonitor = new GitConfigMonitor(this.config, this.flowCatalog);\n    this.gitConfigMonitor.setActive(true);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitConfigMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"NB"}],"commitId":"22a951f0a4ac0c963e99cd2a15989c62a08c81cf","commitMessage":"@@@[GOBBLIN-528] Multihop Flow Compiler for Gobblin-as-a-Service (GaaS).\n\nCloses #2393 from sv2000/multiHopCompiler\n","date":"2018-07-31 00:57:31","modifiedFileCount":"19","status":"M","submitter":"suvasude"},{"authorTime":"2018-06-12 05:23:21","codes":[{"authorDate":"2018-12-08 01:01:05","commitOrder":4,"curCode":"  public void setUp() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    URI topologyCatalogUri = this.getClass().getClassLoader().getResource(\"topologyspec_catalog\").toURI();\n    Map<URI, TopologySpec> topologySpecMap = MultiHopFlowCompilerTest.buildTopologySpecMap(topologyCatalogUri);\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\"\n            + ConfigurationKeys.GIT_MONITOR_REPO_URI, this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/git-flowgraph\")\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    \r\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    Properties properties = new Properties();\n    properties.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(properties);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    this.flowCatalog = new FSFlowCatalog(templateCatalogCfg);\n\n    \r\n    this.flowGraph = new BaseFlowGraph();\n\n    this.gitFlowGraphMonitor = new GitFlowGraphMonitor(this.config, this.flowCatalog, this.flowGraph, topologySpecMap);\n    this.gitFlowGraphMonitor.setActive(true);\n  }\n","date":"2018-12-08 01:01:05","endLine":127,"groupId":"4199","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ab/8af70a10354ec60e299cb093bf94fa2da50b43.src","preCode":"  public void setUp() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\"\n            + ConfigurationKeys.GIT_MONITOR_REPO_URI, this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/git-flowgraph\")\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    \r\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    Properties properties = new Properties();\n    properties.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(properties);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    this.flowCatalog = new FSFlowCatalog(templateCatalogCfg);\n\n    \r\n    this.flowGraph = new BaseFlowGraph();\n\n    this.gitFlowGraphMonitor = new GitFlowGraphMonitor(this.config, this.flowCatalog, this.flowGraph);\n    this.gitFlowGraphMonitor.setActive(true);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2018-06-12 05:23:21","commitOrder":4,"curCode":"  public void setup() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI,\n            this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/jobConfig\")\n        .addPrimitive(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY, TEST_DIR + \"flowCatalog\")\n        .addPrimitive(ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    this.flowCatalog = new FlowCatalog(config);\n    this.flowCatalog.startAsync().awaitRunning();\n    this.gitConfigMonitor = new GitConfigMonitor(this.config, this.flowCatalog);\n    this.gitConfigMonitor.setActive(true);\n  }\n","date":"2018-06-12 05:23:21","endLine":107,"groupId":"7178","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/71/ad56d476d3c62b367aa1a06ff77fdfe4e8e1e4.src","preCode":"  public void setup() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI,\n            this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/jobConfig\")\n        .addPrimitive(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY, TEST_DIR + \"flowCatalog\")\n        .addPrimitive(ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    this.flowCatalog = new FlowCatalog(config);\n    this.flowCatalog.startAsync().awaitRunning();\n    this.gitConfigMonitor = new GitConfigMonitor(this.config, this.flowCatalog);\n    this.gitConfigMonitor.setActive(true);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitConfigMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"N"}],"commitId":"ccaa02c6e132a5731706a61620f04abd89be75fe","commitMessage":"@@@[GOBBLIN-646] Refactor MultiHopFlowCompiler to use SpecExecutor configs from TopologySpecMap.[]\n\nCloses #2516 from sv2000/specExecutorsRefactor\n","date":"2018-12-08 01:01:05","modifiedFileCount":"8","status":"M","submitter":"suvasude"},{"authorTime":"2018-06-12 05:23:21","codes":[{"authorDate":"2019-01-04 13:12:22","commitOrder":5,"curCode":"  public void setUp() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    URI topologyCatalogUri = this.getClass().getClassLoader().getResource(\"topologyspec_catalog\").toURI();\n    Map<URI, TopologySpec> topologySpecMap = MultiHopFlowCompilerTest.buildTopologySpecMap(topologyCatalogUri);\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\"\n            + ConfigurationKeys.GIT_MONITOR_REPO_URI, this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/git-flowgraph\")\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    \r\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    Properties properties = new Properties();\n    properties.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(properties);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    this.flowCatalog = new FSFlowCatalog(templateCatalogCfg);\n\n    \r\n    this.flowGraph = new BaseFlowGraph();\n\n    this.gitFlowGraphMonitor = new GitFlowGraphMonitor(this.config, this.flowCatalog, this.flowGraph, topologySpecMap, new CountDownLatch(1));\n    this.gitFlowGraphMonitor.setActive(true);\n  }\n","date":"2019-01-04 13:12:22","endLine":128,"groupId":"4199","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/13/a452ade6f2f0c75620d49e9cb5a84b6e09afb6.src","preCode":"  public void setUp() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    URI topologyCatalogUri = this.getClass().getClassLoader().getResource(\"topologyspec_catalog\").toURI();\n    Map<URI, TopologySpec> topologySpecMap = MultiHopFlowCompilerTest.buildTopologySpecMap(topologyCatalogUri);\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\"\n            + ConfigurationKeys.GIT_MONITOR_REPO_URI, this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/git-flowgraph\")\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    \r\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    Properties properties = new Properties();\n    properties.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(properties);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    this.flowCatalog = new FSFlowCatalog(templateCatalogCfg);\n\n    \r\n    this.flowGraph = new BaseFlowGraph();\n\n    this.gitFlowGraphMonitor = new GitFlowGraphMonitor(this.config, this.flowCatalog, this.flowGraph, topologySpecMap);\n    this.gitFlowGraphMonitor.setActive(true);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2018-06-12 05:23:21","commitOrder":5,"curCode":"  public void setup() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI,\n            this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/jobConfig\")\n        .addPrimitive(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY, TEST_DIR + \"flowCatalog\")\n        .addPrimitive(ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    this.flowCatalog = new FlowCatalog(config);\n    this.flowCatalog.startAsync().awaitRunning();\n    this.gitConfigMonitor = new GitConfigMonitor(this.config, this.flowCatalog);\n    this.gitConfigMonitor.setActive(true);\n  }\n","date":"2018-06-12 05:23:21","endLine":107,"groupId":"7178","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/71/ad56d476d3c62b367aa1a06ff77fdfe4e8e1e4.src","preCode":"  public void setup() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI,\n            this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/jobConfig\")\n        .addPrimitive(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY, TEST_DIR + \"flowCatalog\")\n        .addPrimitive(ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    this.flowCatalog = new FlowCatalog(config);\n    this.flowCatalog.startAsync().awaitRunning();\n    this.gitConfigMonitor = new GitConfigMonitor(this.config, this.flowCatalog);\n    this.gitConfigMonitor.setActive(true);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitConfigMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"N"}],"commitId":"f861dca3212e874d64433f573d73927a025e44a5","commitMessage":"@@@[GOBBLIN-659] Ensure MultiHopFlowCompiler is properly initialized before attempting flow orchestration.[]\n\nCloses #2529 from sv2000/gaasStartUp\n","date":"2019-01-04 13:12:22","modifiedFileCount":"8","status":"M","submitter":"suvasude"},{"authorTime":"2018-06-12 05:23:21","codes":[{"authorDate":"2019-01-23 22:38:08","commitOrder":6,"curCode":"  public void setUp() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    URI topologyCatalogUri = this.getClass().getClassLoader().getResource(\"topologyspec_catalog\").toURI();\n    Map<URI, TopologySpec> topologySpecMap = MultiHopFlowCompilerTest.buildTopologySpecMap(topologyCatalogUri);\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\"\n            + ConfigurationKeys.GIT_MONITOR_REPO_URI, this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/git-flowgraph\")\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    \r\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    Properties properties = new Properties();\n    properties.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(properties);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    this.flowCatalog = Optional.of(new FSFlowCatalog(templateCatalogCfg));\n\n    \r\n    this.flowGraph = new BaseFlowGraph();\n\n    this.gitFlowGraphMonitor = new GitFlowGraphMonitor(this.config, this.flowCatalog, this.flowGraph, topologySpecMap, new CountDownLatch(1));\n    this.gitFlowGraphMonitor.setActive(true);\n  }\n","date":"2019-01-23 22:38:08","endLine":129,"groupId":"4199","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/26/f2180cc7ac3394d2bc89d7b474d607bc0edaa6.src","preCode":"  public void setUp() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    URI topologyCatalogUri = this.getClass().getClassLoader().getResource(\"topologyspec_catalog\").toURI();\n    Map<URI, TopologySpec> topologySpecMap = MultiHopFlowCompilerTest.buildTopologySpecMap(topologyCatalogUri);\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\"\n            + ConfigurationKeys.GIT_MONITOR_REPO_URI, this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/git-flowgraph\")\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    \r\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    Properties properties = new Properties();\n    properties.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(properties);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    this.flowCatalog = new FSFlowCatalog(templateCatalogCfg);\n\n    \r\n    this.flowGraph = new BaseFlowGraph();\n\n    this.gitFlowGraphMonitor = new GitFlowGraphMonitor(this.config, this.flowCatalog, this.flowGraph, topologySpecMap, new CountDownLatch(1));\n    this.gitFlowGraphMonitor.setActive(true);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2018-06-12 05:23:21","commitOrder":6,"curCode":"  public void setup() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI,\n            this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/jobConfig\")\n        .addPrimitive(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY, TEST_DIR + \"flowCatalog\")\n        .addPrimitive(ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    this.flowCatalog = new FlowCatalog(config);\n    this.flowCatalog.startAsync().awaitRunning();\n    this.gitConfigMonitor = new GitConfigMonitor(this.config, this.flowCatalog);\n    this.gitConfigMonitor.setActive(true);\n  }\n","date":"2018-06-12 05:23:21","endLine":107,"groupId":"7178","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/71/ad56d476d3c62b367aa1a06ff77fdfe4e8e1e4.src","preCode":"  public void setup() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI,\n            this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/jobConfig\")\n        .addPrimitive(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY, TEST_DIR + \"flowCatalog\")\n        .addPrimitive(ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    this.flowCatalog = new FlowCatalog(config);\n    this.flowCatalog.startAsync().awaitRunning();\n    this.gitConfigMonitor = new GitConfigMonitor(this.config, this.flowCatalog);\n    this.gitConfigMonitor.setActive(true);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitConfigMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"N"}],"commitId":"55a19bbfe693e68828ff2a85e6e0666b754b6a9b","commitMessage":"@@@[GOBBLIN-670] Ensure MultiHopFlowCompiler is initialized when job template catalog location is not provided.[]\n\nCloses #2540 from sv2000/startUp\n","date":"2019-01-23 22:38:08","modifiedFileCount":"3","status":"M","submitter":"suvasude"},{"authorTime":"2019-04-25 05:49:54","codes":[{"authorDate":"2019-04-25 05:49:54","commitOrder":7,"curCode":"  public void setUp() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    URI topologyCatalogUri = this.getClass().getClassLoader().getResource(\"topologyspec_catalog\").toURI();\n    Map<URI, TopologySpec> topologySpecMap = MultiHopFlowCompilerTest.buildTopologySpecMap(topologyCatalogUri);\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\"\n            + ConfigurationKeys.GIT_MONITOR_REPO_URI, this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/git-flowgraph\")\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    \r\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    Properties properties = new Properties();\n    properties.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(properties);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    this.flowCatalog = Optional.of(new FSFlowTemplateCatalog(templateCatalogCfg));\n\n    \r\n    this.flowGraph = new BaseFlowGraph();\n\n    this.gitFlowGraphMonitor = new GitFlowGraphMonitor(this.config, this.flowCatalog, this.flowGraph, topologySpecMap, new CountDownLatch(1));\n    this.gitFlowGraphMonitor.setActive(true);\n  }\n","date":"2019-04-25 05:49:54","endLine":129,"groupId":"4199","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/6a/02652e7dc4b5bbe947fa42d642f65c4c6f1e0f.src","preCode":"  public void setUp() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    URI topologyCatalogUri = this.getClass().getClassLoader().getResource(\"topologyspec_catalog\").toURI();\n    Map<URI, TopologySpec> topologySpecMap = MultiHopFlowCompilerTest.buildTopologySpecMap(topologyCatalogUri);\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\"\n            + ConfigurationKeys.GIT_MONITOR_REPO_URI, this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/git-flowgraph\")\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    \r\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    Properties properties = new Properties();\n    properties.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(properties);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    this.flowCatalog = Optional.of(new FSFlowCatalog(templateCatalogCfg));\n\n    \r\n    this.flowGraph = new BaseFlowGraph();\n\n    this.gitFlowGraphMonitor = new GitFlowGraphMonitor(this.config, this.flowCatalog, this.flowGraph, topologySpecMap, new CountDownLatch(1));\n    this.gitFlowGraphMonitor.setActive(true);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2019-04-25 05:49:54","commitOrder":7,"curCode":"  public void setup() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI,\n            this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/jobConfig\")\n        .addPrimitive(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, TEST_DIR + \"flowCatalog\")\n        .addPrimitive(ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    this.flowCatalog = new FlowCatalog(config);\n    this.flowCatalog.startAsync().awaitRunning();\n    this.gitConfigMonitor = new GitConfigMonitor(this.config, this.flowCatalog);\n    this.gitConfigMonitor.setActive(true);\n  }\n","date":"2019-04-25 05:49:54","endLine":107,"groupId":"7178","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/19/12d15a422c7fd6e3dbee0e0cbcb2516a3439c5.src","preCode":"  public void setup() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI,\n            this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/jobConfig\")\n        .addPrimitive(ConfigurationKeys.FLOWSPEC_STORE_DIR_KEY, TEST_DIR + \"flowCatalog\")\n        .addPrimitive(ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    this.flowCatalog = new FlowCatalog(config);\n    this.flowCatalog.startAsync().awaitRunning();\n    this.gitConfigMonitor = new GitConfigMonitor(this.config, this.flowCatalog);\n    this.gitConfigMonitor.setActive(true);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitConfigMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"9661916684d466edf6ae499800a252c108bb9aa2","commitMessage":"@@@[GOBBLIN-748] Craftsmanship code cleaning in Gobblin Service Code\n\nDear Gobblin maintainers. \n\nPlease accept this PR. I understand that it will\nnot be reviewed until I have checked off all the\nsteps below!\n\nEssentially a bunch of renaming.  moving\nconfigurations key around.\nThings that we should agree on:\n- Configuration keys should always placed in the\nclass where they are relevant.  instead of\n`ConfigurationKeys.java` or similar things. We\nshould definitely stop doing that.\n- Naming of `FSFlowCatalog` is misleading. In fact\nit should be `FsTemplateFlowCatalog`. Also.  it\nshould not extend `FsJobCatalog`. The missing\npiece is a `FsCatalogBase`  that implement all\nFileSystem related basic functionality.  and have\n`Template` and `Job` FsCatalog extending that base\nimplementation with it own interface.\n\n\n JIRA\n- [x ] My PR addresses the following [Gobblin\nJIRA]\n    -\nhttps://issues.apache.org/jira/browse/GOBBLIN-748\n\n\n Description\n- [ x] Here are some details about my PR. \nincluding screenshots (if applicable):\n\n\n Tests\n- [ ] My PR adds the following unit tests __OR__\ndoes not need testing for this extremely good\nreason:\n\n\n Commits\n- [ ] My commits all reference JIRA issues in\ntheir subject lines.  and I have squashed multiple\ncommits if they address the same issue. In\naddition.  my commits follow the guidelines from\n\"[How to write a good git commit\nmessage](http://chris.beams.io/posts/git-\ncommit/)\":\n    1. Subject is separated from body by a blank line\n    2. Subject is limited to 50 characters\n    3. Subject does not end with a period\n    4. Subject uses the imperative mood (\"add\".  not\n\"adding\")\n    5. Body wraps at 72 characters\n    6. Body explains \"what\" and \"why\".  not \"how\"\n\nSome naive code changes made while reading through\nGaaS code: There are some work needs to be done\nfor understand master/slave interaction\n\nAdding some documentation and renaming stuff\n\nAddress comments\n\nResolving conflicts\n\nCloses #2613 from\nautumnust/craftsmanshipCleaningGaaS\n","date":"2019-04-25 05:49:54","modifiedFileCount":"26","status":"M","submitter":"autumnust"},{"authorTime":"2021-06-05 06:46:57","codes":[{"authorDate":"2019-04-25 05:49:54","commitOrder":8,"curCode":"  public void setUp() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    URI topologyCatalogUri = this.getClass().getClassLoader().getResource(\"topologyspec_catalog\").toURI();\n    Map<URI, TopologySpec> topologySpecMap = MultiHopFlowCompilerTest.buildTopologySpecMap(topologyCatalogUri);\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\"\n            + ConfigurationKeys.GIT_MONITOR_REPO_URI, this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/git-flowgraph\")\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    \r\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    Properties properties = new Properties();\n    properties.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(properties);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    this.flowCatalog = Optional.of(new FSFlowTemplateCatalog(templateCatalogCfg));\n\n    \r\n    this.flowGraph = new BaseFlowGraph();\n\n    this.gitFlowGraphMonitor = new GitFlowGraphMonitor(this.config, this.flowCatalog, this.flowGraph, topologySpecMap, new CountDownLatch(1));\n    this.gitFlowGraphMonitor.setActive(true);\n  }\n","date":"2019-04-25 05:49:54","endLine":129,"groupId":"101098","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/6a/02652e7dc4b5bbe947fa42d642f65c4c6f1e0f.src","preCode":"  public void setUp() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    URI topologyCatalogUri = this.getClass().getClassLoader().getResource(\"topologyspec_catalog\").toURI();\n    Map<URI, TopologySpec> topologySpecMap = MultiHopFlowCompilerTest.buildTopologySpecMap(topologyCatalogUri);\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\"\n            + ConfigurationKeys.GIT_MONITOR_REPO_URI, this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/git-flowgraph\")\n        .addPrimitive(GitFlowGraphMonitor.GIT_FLOWGRAPH_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    \r\n    URI flowTemplateCatalogUri = this.getClass().getClassLoader().getResource(\"template_catalog\").toURI();\n    Properties properties = new Properties();\n    properties.put(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY, flowTemplateCatalogUri.toString());\n    Config config = ConfigFactory.parseProperties(properties);\n    Config templateCatalogCfg = config\n        .withValue(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY,\n            config.getValue(ServiceConfigKeys.TEMPLATE_CATALOGS_FULLY_QUALIFIED_PATH_KEY));\n    this.flowCatalog = Optional.of(new FSFlowTemplateCatalog(templateCatalogCfg));\n\n    \r\n    this.flowGraph = new BaseFlowGraph();\n\n    this.gitFlowGraphMonitor = new GitFlowGraphMonitor(this.config, this.flowCatalog, this.flowGraph, topologySpecMap, new CountDownLatch(1));\n    this.gitFlowGraphMonitor.setActive(true);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitFlowGraphMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"},{"authorDate":"2021-06-05 06:46:57","commitOrder":8,"curCode":"  public void setup() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI,\n            this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/jobConfig\")\n        .addPrimitive(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, TEST_DIR + \"flowCatalog\")\n        .addPrimitive(ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    this.flowCatalog = new FlowCatalog(config);\n\n    this.mockListener = mock(SpecCatalogListener.class);\n    when(mockListener.getName()).thenReturn(ServiceConfigKeys.GOBBLIN_SERVICE_JOB_SCHEDULER_LISTENER_CLASS);\n    when(mockListener.onAddSpec(any())).thenReturn(new AddSpecResponse(\"\"));\n\n    this.flowCatalog.addListener(mockListener);\n    this.flowCatalog.startAsync().awaitRunning();\n    this.gitConfigMonitor = new GitConfigMonitor(this.config, this.flowCatalog);\n    this.gitConfigMonitor.setActive(true);\n  }\n","date":"2021-06-05 06:46:57","endLine":121,"groupId":"101098","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/3f/ddd4aab1b4a84105ff48aba21e03b8a9e89424.src","preCode":"  public void setup() throws Exception {\n    cleanUpDir(TEST_DIR);\n\n    \r\n    RepositoryCache.FileKey fileKey = RepositoryCache.FileKey.exact(remoteDir, FS.DETECTED);\n    this.remoteRepo = fileKey.open(false);\n    this.remoteRepo.create(true);\n\n    this.gitForPush = Git.cloneRepository().setURI(this.remoteRepo.getDirectory().getAbsolutePath()).setDirectory(cloneDir).call();\n\n    \r\n    this.gitForPush.commit().setMessage(\"First commit\").call();\n    this.gitForPush.push().setRemote(\"origin\").setRefSpecs(this.masterRefSpec).call();\n\n    this.config = ConfigBuilder.create()\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_URI,\n            this.remoteRepo.getDirectory().getAbsolutePath())\n        .addPrimitive(GitConfigMonitor.GIT_CONFIG_MONITOR_PREFIX + \".\" + ConfigurationKeys.GIT_MONITOR_REPO_DIR, TEST_DIR + \"/jobConfig\")\n        .addPrimitive(FlowCatalog.FLOWSPEC_STORE_DIR_KEY, TEST_DIR + \"flowCatalog\")\n        .addPrimitive(ConfigurationKeys.GIT_MONITOR_POLLING_INTERVAL, 5)\n        .build();\n\n    this.flowCatalog = new FlowCatalog(config);\n    this.flowCatalog.startAsync().awaitRunning();\n    this.gitConfigMonitor = new GitConfigMonitor(this.config, this.flowCatalog);\n    this.gitConfigMonitor.setActive(true);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/core/GitConfigMonitorTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"381b659d3da7a241d6f038696396e6bba690120e","commitMessage":"@@@[GOBBLIN-1453] Improve error reporting on failed flow compilations and fix bugs wher?\n\nCloses #3291 from Will-Lo/modify-flow-compilation-\nerror-reporting\n","date":"2021-06-05 06:46:57","modifiedFileCount":"11","status":"M","submitter":"William Lo"}]
