[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testloadGenericJobConfigs()\n      throws ConfigurationException, IOException, URISyntaxException {\n    Properties properties = new Properties();\n    properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getAbsolutePath());\n    List<JobSpec> jobSpecs = Lists.transform(\n        Lists.newArrayList(loader.loadPullFilesRecursively(loader.getRootDirectory(), this.sysConfig, false)),\n        this.converter);\n\n    List<Properties> jobConfigs = convertJobSpecList2PropList(jobSpecs);\n    Assert.assertEquals(jobConfigs.size(), 4);\n\n    \r\n    Properties jobProps1 = getJobConfigForFile(jobConfigs, \"test111.pull\");\n\n    \r\n    \r\n    \r\n    \r\n    Assert.assertEquals(jobProps1.stringPropertyNames().size(), 5);\n    Assert.assertTrue(jobProps1.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps1.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps1.getProperty(\"k1\"), \"d1\");\n    Assert.assertEquals(jobProps1.getProperty(\"k8\"), \"a8\");\n    Assert.assertEquals(jobProps1.getProperty(\"k9\"), \"a8\");\n\n    \r\n    Properties jobProps2 = getJobConfigForFile(jobConfigs, \"test11.pull\");\n    Assert.assertEquals(jobProps2.stringPropertyNames().size(), 5);\n    Assert.assertTrue(jobProps2.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps2.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n                        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps2.getProperty(\"k1\"), \"c1\");\n    Assert.assertEquals(jobProps2.getProperty(\"k3\"), \"b3\");\n    Assert.assertEquals(jobProps2.getProperty(\"k6\"), \"a6\");\n\n    \r\n    Properties jobProps3 = getJobConfigForFile(jobConfigs, \"test12.PULL\");\n    Assert.assertEquals(jobProps3.stringPropertyNames().size(), 3);\n    Assert.assertTrue(jobProps3.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps3.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps3.getProperty(\"k7\"), \"a7\");\n\n    \r\n    Properties jobProps4 = getJobConfigForFile(jobConfigs, \"test21.PULL\");\n    Assert.assertEquals(jobProps4.stringPropertyNames().size(), 3);\n    Assert.assertTrue(jobProps4.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps4.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps4.getProperty(\"k5\"), \"b5\");\n  }\n","date":"2017-07-31 15:51:25","endLine":207,"groupId":"1284","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testloadGenericJobConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c5/0daecfd9964996a9dc1b971cc8c489c14554ef.src","preCode":"  public void testloadGenericJobConfigs()\n      throws ConfigurationException, IOException, URISyntaxException {\n    Properties properties = new Properties();\n    properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getAbsolutePath());\n    List<JobSpec> jobSpecs = Lists.transform(\n        Lists.newArrayList(loader.loadPullFilesRecursively(loader.getRootDirectory(), this.sysConfig, false)),\n        this.converter);\n\n    List<Properties> jobConfigs = convertJobSpecList2PropList(jobSpecs);\n    Assert.assertEquals(jobConfigs.size(), 4);\n\n    \r\n    Properties jobProps1 = getJobConfigForFile(jobConfigs, \"test111.pull\");\n\n    \r\n    \r\n    \r\n    \r\n    Assert.assertEquals(jobProps1.stringPropertyNames().size(), 5);\n    Assert.assertTrue(jobProps1.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps1.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps1.getProperty(\"k1\"), \"d1\");\n    Assert.assertEquals(jobProps1.getProperty(\"k8\"), \"a8\");\n    Assert.assertEquals(jobProps1.getProperty(\"k9\"), \"a8\");\n\n    \r\n    Properties jobProps2 = getJobConfigForFile(jobConfigs, \"test11.pull\");\n    Assert.assertEquals(jobProps2.stringPropertyNames().size(), 5);\n    Assert.assertTrue(jobProps2.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps2.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n                        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps2.getProperty(\"k1\"), \"c1\");\n    Assert.assertEquals(jobProps2.getProperty(\"k3\"), \"b3\");\n    Assert.assertEquals(jobProps2.getProperty(\"k6\"), \"a6\");\n\n    \r\n    Properties jobProps3 = getJobConfigForFile(jobConfigs, \"test12.PULL\");\n    Assert.assertEquals(jobProps3.stringPropertyNames().size(), 3);\n    Assert.assertTrue(jobProps3.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps3.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps3.getProperty(\"k7\"), \"a7\");\n\n    \r\n    Properties jobProps4 = getJobConfigForFile(jobConfigs, \"test21.PULL\");\n    Assert.assertEquals(jobProps4.stringPropertyNames().size(), 3);\n    Assert.assertTrue(jobProps4.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps4.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps4.getProperty(\"k5\"), \"b5\");\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/job_catalog/FSJobCatalogHelperTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testLoadJobConfigsForCommonPropsFile()\n      throws ConfigurationException, IOException {\n    Path commonPropsPath = new Path(this.subDir1.getAbsolutePath() + \"/test.properties\");\n\n    Properties properties = new Properties();\n    properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getAbsolutePath());\n    List<Properties> jobConfigs = SchedulerUtils.loadGenericJobConfigs(properties, commonPropsPath,\n        new Path(this.jobConfigDir.getAbsolutePath()));\n    Assert.assertEquals(jobConfigs.size(), 3);\n\n    \r\n    Properties jobProps1 = getJobConfigForFile(jobConfigs, \"test111.pull\");\n    Assert.assertEquals(jobProps1.stringPropertyNames().size(), 7);\n    Assert.assertEquals(jobProps1.getProperty(\"k1\"), \"d1\");\n    Assert.assertEquals(jobProps1.getProperty(\"k2\"), \"a2\");\n    Assert.assertEquals(jobProps1.getProperty(\"k3\"), \"a3\");\n    Assert.assertEquals(jobProps1.getProperty(\"k8\"), \"a8\");\n    Assert.assertEquals(jobProps1.getProperty(\"k9\"), \"a8\");\n\n    \r\n    Properties jobProps2 = getJobConfigForFile(jobConfigs, \"test11.pull\");\n    Assert.assertEquals(jobProps2.stringPropertyNames().size(), 6);\n    Assert.assertEquals(jobProps2.getProperty(\"k1\"), \"c1\");\n    Assert.assertEquals(jobProps2.getProperty(\"k2\"), \"a2\");\n    Assert.assertEquals(jobProps2.getProperty(\"k3\"), \"b3\");\n    Assert.assertEquals(jobProps2.getProperty(\"k6\"), \"a6\");\n\n    \r\n    Properties jobProps3 = getJobConfigForFile(jobConfigs, \"test12.PULL\");\n    Assert.assertEquals(jobProps3.stringPropertyNames().size(), 6);\n    Assert.assertEquals(jobProps3.getProperty(\"k1\"), \"b1\");\n    Assert.assertEquals(jobProps3.getProperty(\"k2\"), \"a2\");\n    Assert.assertEquals(jobProps3.getProperty(\"k3\"), \"a3\");\n    Assert.assertEquals(jobProps3.getProperty(\"k7\"), \"a7\");\n  }\n","date":"2017-07-31 15:51:25","endLine":204,"groupId":"3909","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoadJobConfigsForCommonPropsFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/43/696f806d6db529e50b2ed3fef90c62df8963dd.src","preCode":"  public void testLoadJobConfigsForCommonPropsFile()\n      throws ConfigurationException, IOException {\n    Path commonPropsPath = new Path(this.subDir1.getAbsolutePath() + \"/test.properties\");\n\n    Properties properties = new Properties();\n    properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getAbsolutePath());\n    List<Properties> jobConfigs = SchedulerUtils.loadGenericJobConfigs(properties, commonPropsPath,\n        new Path(this.jobConfigDir.getAbsolutePath()));\n    Assert.assertEquals(jobConfigs.size(), 3);\n\n    \r\n    Properties jobProps1 = getJobConfigForFile(jobConfigs, \"test111.pull\");\n    Assert.assertEquals(jobProps1.stringPropertyNames().size(), 7);\n    Assert.assertEquals(jobProps1.getProperty(\"k1\"), \"d1\");\n    Assert.assertEquals(jobProps1.getProperty(\"k2\"), \"a2\");\n    Assert.assertEquals(jobProps1.getProperty(\"k3\"), \"a3\");\n    Assert.assertEquals(jobProps1.getProperty(\"k8\"), \"a8\");\n    Assert.assertEquals(jobProps1.getProperty(\"k9\"), \"a8\");\n\n    \r\n    Properties jobProps2 = getJobConfigForFile(jobConfigs, \"test11.pull\");\n    Assert.assertEquals(jobProps2.stringPropertyNames().size(), 6);\n    Assert.assertEquals(jobProps2.getProperty(\"k1\"), \"c1\");\n    Assert.assertEquals(jobProps2.getProperty(\"k2\"), \"a2\");\n    Assert.assertEquals(jobProps2.getProperty(\"k3\"), \"b3\");\n    Assert.assertEquals(jobProps2.getProperty(\"k6\"), \"a6\");\n\n    \r\n    Properties jobProps3 = getJobConfigForFile(jobConfigs, \"test12.PULL\");\n    Assert.assertEquals(jobProps3.stringPropertyNames().size(), 6);\n    Assert.assertEquals(jobProps3.getProperty(\"k1\"), \"b1\");\n    Assert.assertEquals(jobProps3.getProperty(\"k2\"), \"a2\");\n    Assert.assertEquals(jobProps3.getProperty(\"k3\"), \"a3\");\n    Assert.assertEquals(jobProps3.getProperty(\"k7\"), \"a7\");\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/util/SchedulerUtilsTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2019-09-25 06:00:52","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void testloadGenericJobConfigs()\n      throws ConfigurationException, IOException, URISyntaxException {\n    Properties properties = new Properties();\n    properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getAbsolutePath());\n    List<JobSpec> jobSpecs = Lists.transform(\n        Lists.newArrayList(loader.loadPullFilesRecursively(loader.getRootDirectory(), this.sysConfig, false)),\n        this.converter);\n\n    List<Properties> jobConfigs = convertJobSpecList2PropList(jobSpecs);\n    Assert.assertEquals(jobConfigs.size(), 4);\n\n    \r\n    Properties jobProps1 = getJobConfigForFile(jobConfigs, \"test111.pull\");\n\n    \r\n    \r\n    \r\n    \r\n    Assert.assertEquals(jobProps1.stringPropertyNames().size(), 5);\n    Assert.assertTrue(jobProps1.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps1.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps1.getProperty(\"k1\"), \"d1\");\n    Assert.assertEquals(jobProps1.getProperty(\"k8\"), \"a8\");\n    Assert.assertEquals(jobProps1.getProperty(\"k9\"), \"a8\");\n\n    \r\n    Properties jobProps2 = getJobConfigForFile(jobConfigs, \"test11.pull\");\n    Assert.assertEquals(jobProps2.stringPropertyNames().size(), 5);\n    Assert.assertTrue(jobProps2.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps2.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n                        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps2.getProperty(\"k1\"), \"c1\");\n    Assert.assertEquals(jobProps2.getProperty(\"k3\"), \"b3\");\n    Assert.assertEquals(jobProps2.getProperty(\"k6\"), \"a6\");\n\n    \r\n    Properties jobProps3 = getJobConfigForFile(jobConfigs, \"test12.PULL\");\n    Assert.assertEquals(jobProps3.stringPropertyNames().size(), 3);\n    Assert.assertTrue(jobProps3.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps3.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps3.getProperty(\"k7\"), \"a7\");\n\n    \r\n    Properties jobProps4 = getJobConfigForFile(jobConfigs, \"test21.PULL\");\n    Assert.assertEquals(jobProps4.stringPropertyNames().size(), 3);\n    Assert.assertTrue(jobProps4.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps4.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps4.getProperty(\"k5\"), \"b5\");\n  }\n","date":"2017-07-31 15:51:25","endLine":207,"groupId":"10804","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testloadGenericJobConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/c5/0daecfd9964996a9dc1b971cc8c489c14554ef.src","preCode":"  public void testloadGenericJobConfigs()\n      throws ConfigurationException, IOException, URISyntaxException {\n    Properties properties = new Properties();\n    properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getAbsolutePath());\n    List<JobSpec> jobSpecs = Lists.transform(\n        Lists.newArrayList(loader.loadPullFilesRecursively(loader.getRootDirectory(), this.sysConfig, false)),\n        this.converter);\n\n    List<Properties> jobConfigs = convertJobSpecList2PropList(jobSpecs);\n    Assert.assertEquals(jobConfigs.size(), 4);\n\n    \r\n    Properties jobProps1 = getJobConfigForFile(jobConfigs, \"test111.pull\");\n\n    \r\n    \r\n    \r\n    \r\n    Assert.assertEquals(jobProps1.stringPropertyNames().size(), 5);\n    Assert.assertTrue(jobProps1.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps1.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps1.getProperty(\"k1\"), \"d1\");\n    Assert.assertEquals(jobProps1.getProperty(\"k8\"), \"a8\");\n    Assert.assertEquals(jobProps1.getProperty(\"k9\"), \"a8\");\n\n    \r\n    Properties jobProps2 = getJobConfigForFile(jobConfigs, \"test11.pull\");\n    Assert.assertEquals(jobProps2.stringPropertyNames().size(), 5);\n    Assert.assertTrue(jobProps2.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps2.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n                        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps2.getProperty(\"k1\"), \"c1\");\n    Assert.assertEquals(jobProps2.getProperty(\"k3\"), \"b3\");\n    Assert.assertEquals(jobProps2.getProperty(\"k6\"), \"a6\");\n\n    \r\n    Properties jobProps3 = getJobConfigForFile(jobConfigs, \"test12.PULL\");\n    Assert.assertEquals(jobProps3.stringPropertyNames().size(), 3);\n    Assert.assertTrue(jobProps3.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps3.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps3.getProperty(\"k7\"), \"a7\");\n\n    \r\n    Properties jobProps4 = getJobConfigForFile(jobConfigs, \"test21.PULL\");\n    Assert.assertEquals(jobProps4.stringPropertyNames().size(), 3);\n    Assert.assertTrue(jobProps4.containsKey(ConfigurationKeys.JOB_CONFIG_FILE_PATH_KEY));\n    Assert.assertEquals(jobProps4.getProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY),\n        this.jobConfigDir.getAbsolutePath());\n    Assert.assertEquals(jobProps4.getProperty(\"k5\"), \"b5\");\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/job_catalog/FSJobCatalogHelperTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"},{"authorDate":"2019-09-25 06:00:52","commitOrder":2,"curCode":"  public void testLoadJobConfigsForCommonPropsFile()\n      throws ConfigurationException, IOException {\n    Path commonPropsPath = new Path(this.subDir1.getAbsolutePath() + \"/test.properties\");\n\n    Properties properties = new Properties();\n    properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getAbsolutePath());\n    List<Properties> jobConfigs = SchedulerUtils.loadGenericJobConfigs(properties, commonPropsPath,\n        new Path(this.jobConfigDir.getAbsolutePath()), JobSpecResolver.mock());\n    Assert.assertEquals(jobConfigs.size(), 3);\n\n    \r\n    Properties jobProps1 = getJobConfigForFile(jobConfigs, \"test111.pull\");\n    Assert.assertEquals(jobProps1.stringPropertyNames().size(), 7);\n    Assert.assertEquals(jobProps1.getProperty(\"k1\"), \"d1\");\n    Assert.assertEquals(jobProps1.getProperty(\"k2\"), \"a2\");\n    Assert.assertEquals(jobProps1.getProperty(\"k3\"), \"a3\");\n    Assert.assertEquals(jobProps1.getProperty(\"k8\"), \"a8\");\n    Assert.assertEquals(jobProps1.getProperty(\"k9\"), \"a8\");\n\n    \r\n    Properties jobProps2 = getJobConfigForFile(jobConfigs, \"test11.pull\");\n    Assert.assertEquals(jobProps2.stringPropertyNames().size(), 6);\n    Assert.assertEquals(jobProps2.getProperty(\"k1\"), \"c1\");\n    Assert.assertEquals(jobProps2.getProperty(\"k2\"), \"a2\");\n    Assert.assertEquals(jobProps2.getProperty(\"k3\"), \"b3\");\n    Assert.assertEquals(jobProps2.getProperty(\"k6\"), \"a6\");\n\n    \r\n    Properties jobProps3 = getJobConfigForFile(jobConfigs, \"test12.PULL\");\n    Assert.assertEquals(jobProps3.stringPropertyNames().size(), 6);\n    Assert.assertEquals(jobProps3.getProperty(\"k1\"), \"b1\");\n    Assert.assertEquals(jobProps3.getProperty(\"k2\"), \"a2\");\n    Assert.assertEquals(jobProps3.getProperty(\"k3\"), \"a3\");\n    Assert.assertEquals(jobProps3.getProperty(\"k7\"), \"a7\");\n  }\n","date":"2019-09-25 06:00:52","endLine":207,"groupId":"10804","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testLoadJobConfigsForCommonPropsFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/47/6ba2ae48b44c5654258d7398c5fef13848ab0d.src","preCode":"  public void testLoadJobConfigsForCommonPropsFile()\n      throws ConfigurationException, IOException {\n    Path commonPropsPath = new Path(this.subDir1.getAbsolutePath() + \"/test.properties\");\n\n    Properties properties = new Properties();\n    properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getAbsolutePath());\n    List<Properties> jobConfigs = SchedulerUtils.loadGenericJobConfigs(properties, commonPropsPath,\n        new Path(this.jobConfigDir.getAbsolutePath()));\n    Assert.assertEquals(jobConfigs.size(), 3);\n\n    \r\n    Properties jobProps1 = getJobConfigForFile(jobConfigs, \"test111.pull\");\n    Assert.assertEquals(jobProps1.stringPropertyNames().size(), 7);\n    Assert.assertEquals(jobProps1.getProperty(\"k1\"), \"d1\");\n    Assert.assertEquals(jobProps1.getProperty(\"k2\"), \"a2\");\n    Assert.assertEquals(jobProps1.getProperty(\"k3\"), \"a3\");\n    Assert.assertEquals(jobProps1.getProperty(\"k8\"), \"a8\");\n    Assert.assertEquals(jobProps1.getProperty(\"k9\"), \"a8\");\n\n    \r\n    Properties jobProps2 = getJobConfigForFile(jobConfigs, \"test11.pull\");\n    Assert.assertEquals(jobProps2.stringPropertyNames().size(), 6);\n    Assert.assertEquals(jobProps2.getProperty(\"k1\"), \"c1\");\n    Assert.assertEquals(jobProps2.getProperty(\"k2\"), \"a2\");\n    Assert.assertEquals(jobProps2.getProperty(\"k3\"), \"b3\");\n    Assert.assertEquals(jobProps2.getProperty(\"k6\"), \"a6\");\n\n    \r\n    Properties jobProps3 = getJobConfigForFile(jobConfigs, \"test12.PULL\");\n    Assert.assertEquals(jobProps3.stringPropertyNames().size(), 6);\n    Assert.assertEquals(jobProps3.getProperty(\"k1\"), \"b1\");\n    Assert.assertEquals(jobProps3.getProperty(\"k2\"), \"a2\");\n    Assert.assertEquals(jobProps3.getProperty(\"k3\"), \"a3\");\n    Assert.assertEquals(jobProps3.getProperty(\"k7\"), \"a7\");\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/util/SchedulerUtilsTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"7d260ab2c32a773e317a31cd264f5c97d2d48a10","commitMessage":"@@@[GOBBLIN-701] Add secure templates (duplicate of #2571)\n\nCloses #2739 from jack-moseley/secure-template\n","date":"2019-09-25 06:00:52","modifiedFileCount":"15","status":"M","submitter":"Jack Moseley"}]
