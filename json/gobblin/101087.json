[{"authorTime":"2018-10-24 04:35:42","codes":[{"authorDate":"2018-10-24 04:35:42","commitOrder":2,"curCode":"  public void testSuccessfulDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName0, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName0, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName2, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator6 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName2, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator7 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever.getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(),\n        Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 0);\n    Assert.assertEquals(this.jobToDag.size(), 0);\n    Assert.assertEquals(this.dagToJobs.size(), 0);\n    Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n  }\n","date":"2018-10-24 04:35:42","endLine":207,"groupId":"3243","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSuccessfulDag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f2/3ece1a81fddcb1e887ec6e7b5222dd8f961bf7.src","preCode":"  public void testSuccessfulDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName0, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName0, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName2, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator6 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName2, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator7 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever.getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(),\n        Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 0);\n    Assert.assertEquals(this.jobToDag.size(), 0);\n    Assert.assertEquals(this.dagToJobs.size(), 0);\n    Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"MB"},{"authorDate":"2018-10-24 04:35:42","commitOrder":2,"curCode":"  public void testFailedDag() throws URISyntaxException, IOException {\n    for (String failureOption: Lists.newArrayList(\"FINISH_RUNNING\", \"FINISH_ALL_POSSIBLE\")) {\n      long flowExecutionId = System.currentTimeMillis();\n      String flowGroupId = \"0\";\n      String flowGroup = \"group\" + flowGroupId;\n      String flowName = \"flow\" + flowGroupId;\n      String jobName0 = \"job0\";\n      String jobName1 = \"job1\";\n      String jobName2 = \"job2\";\n\n      Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, failureOption, false);\n      String dagId = DagManagerUtils.generateDagId(dag);\n\n      \r\n      this.queue.offer(dag);\n      Iterator<JobStatus> jobStatusIterator1 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName0, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator2 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName0, String.valueOf(ExecutionStatus.COMPLETE));\n      Iterator<JobStatus> jobStatusIterator3 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator4 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName2, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator5 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator6 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName2, String.valueOf(ExecutionStatus.FAILED));\n      Iterator<JobStatus> jobStatusIterator7 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.COMPLETE));\n      Iterator<JobStatus> jobStatusIterator8 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator9 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.COMPLETE));\n\n\n      Mockito.when(_jobStatusRetriever\n          .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n          thenReturn(jobStatusIterator1).\n          thenReturn(jobStatusIterator2).\n          thenReturn(jobStatusIterator3).\n          thenReturn(jobStatusIterator4).\n          thenReturn(jobStatusIterator5).\n          thenReturn(jobStatusIterator6).\n          thenReturn(jobStatusIterator7).\n          thenReturn(jobStatusIterator8).\n          thenReturn(jobStatusIterator9);\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 1);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 2);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 2);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n      \r\n      this._dagManagerThread.run();\n\n      if (\"FINISH_RUNNING\".equals(failureOption)) {\n        \r\n        Assert.assertEquals(this.dags.size(), 0);\n        Assert.assertEquals(this.jobToDag.size(), 0);\n        Assert.assertEquals(this.dagToJobs.size(), 0);\n        Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n      } else {\n        \r\n        for (int i = 0; i < 3; i++) {\n          Assert.assertEquals(this.dags.size(), 1);\n          Assert.assertEquals(this.jobToDag.size(), 1);\n          Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n          this._dagManagerThread.run();\n        }\n        \r\n        Assert.assertEquals(this.dags.size(), 0);\n        Assert.assertEquals(this.jobToDag.size(), 0);\n        Assert.assertEquals(this.dagToJobs.size(), 0);\n        Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n      }\n    }\n  }\n","date":"2018-10-24 04:35:42","endLine":312,"groupId":"5716","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailedDag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f2/3ece1a81fddcb1e887ec6e7b5222dd8f961bf7.src","preCode":"  public void testFailedDag() throws URISyntaxException, IOException {\n    for (String failureOption: Lists.newArrayList(\"FINISH_RUNNING\", \"FINISH_ALL_POSSIBLE\")) {\n      long flowExecutionId = System.currentTimeMillis();\n      String flowGroupId = \"0\";\n      String flowGroup = \"group\" + flowGroupId;\n      String flowName = \"flow\" + flowGroupId;\n      String jobName0 = \"job0\";\n      String jobName1 = \"job1\";\n      String jobName2 = \"job2\";\n\n      Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, failureOption, false);\n      String dagId = DagManagerUtils.generateDagId(dag);\n\n      \r\n      this.queue.offer(dag);\n      Iterator<JobStatus> jobStatusIterator1 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName0, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator2 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName0, String.valueOf(ExecutionStatus.COMPLETE));\n      Iterator<JobStatus> jobStatusIterator3 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator4 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName2, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator5 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator6 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName2, String.valueOf(ExecutionStatus.FAILED));\n      Iterator<JobStatus> jobStatusIterator7 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.COMPLETE));\n      Iterator<JobStatus> jobStatusIterator8 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator9 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.COMPLETE));\n\n\n      Mockito.when(_jobStatusRetriever\n          .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n          thenReturn(jobStatusIterator1).\n          thenReturn(jobStatusIterator2).\n          thenReturn(jobStatusIterator3).\n          thenReturn(jobStatusIterator4).\n          thenReturn(jobStatusIterator5).\n          thenReturn(jobStatusIterator6).\n          thenReturn(jobStatusIterator7).\n          thenReturn(jobStatusIterator8).\n          thenReturn(jobStatusIterator9);\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 1);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 2);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 2);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n      \r\n      this._dagManagerThread.run();\n\n      if (\"FINISH_RUNNING\".equals(failureOption)) {\n        \r\n        Assert.assertEquals(this.dags.size(), 0);\n        Assert.assertEquals(this.jobToDag.size(), 0);\n        Assert.assertEquals(this.dagToJobs.size(), 0);\n        Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n      } else {\n        \r\n        for (int i = 0; i < 3; i++) {\n          Assert.assertEquals(this.dags.size(), 1);\n          Assert.assertEquals(this.jobToDag.size(), 1);\n          Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n          this._dagManagerThread.run();\n        }\n        \r\n        Assert.assertEquals(this.dags.size(), 0);\n        Assert.assertEquals(this.jobToDag.size(), 0);\n        Assert.assertEquals(this.dagToJobs.size(), 0);\n        Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n      }\n    }\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"MB"}],"commitId":"c103a8f6a6fc09926fdb2b62ead516b63a4ba9aa","commitMessage":"@@@[GOBBLIN-614][GOBBLIN-599][GOBBLIN-598][GOBBLIN-615][GOBBLIN-616] Allow multiple flow failure options in DagManager.\n\nCloses #2481 from sv2000/retention\n","date":"2018-10-24 04:35:42","modifiedFileCount":"5","status":"M","submitter":"suvasude"},{"authorTime":"2018-12-15 02:47:27","codes":[{"authorDate":"2018-12-15 02:47:27","commitOrder":3,"curCode":"  public void testSuccessfulDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator6 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator7 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever.getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(),\n        Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 0);\n    Assert.assertEquals(this.jobToDag.size(), 0);\n    Assert.assertEquals(this.dagToJobs.size(), 0);\n    Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n  }\n","date":"2018-12-15 02:47:27","endLine":207,"groupId":"3243","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSuccessfulDag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/62/0c2eefe3d42c43276f4cdd6da7ec57168a7b2d.src","preCode":"  public void testSuccessfulDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName0, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName0, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName2, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator6 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName2, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator7 = getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever.getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(),\n        Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 0);\n    Assert.assertEquals(this.jobToDag.size(), 0);\n    Assert.assertEquals(this.dagToJobs.size(), 0);\n    Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2018-12-15 02:47:27","commitOrder":3,"curCode":"  public void testFailedDag() throws URISyntaxException, IOException {\n    for (String failureOption: Lists.newArrayList(\"FINISH_RUNNING\", \"FINISH_ALL_POSSIBLE\")) {\n      long flowExecutionId = System.currentTimeMillis();\n      String flowGroupId = \"0\";\n      String flowGroup = \"group\" + flowGroupId;\n      String flowName = \"flow\" + flowGroupId;\n      String jobName0 = \"job0\";\n      String jobName1 = \"job1\";\n      String jobName2 = \"job2\";\n\n      Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, failureOption, false);\n      String dagId = DagManagerUtils.generateDagId(dag);\n\n      \r\n      this.queue.offer(dag);\n      Iterator<JobStatus> jobStatusIterator1 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator2 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n      Iterator<JobStatus> jobStatusIterator3 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator4 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator5 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator6 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.FAILED));\n      Iterator<JobStatus> jobStatusIterator7 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n      Iterator<JobStatus> jobStatusIterator8 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator9 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n\n      Mockito.when(_jobStatusRetriever\n          .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n          thenReturn(jobStatusIterator1).\n          thenReturn(jobStatusIterator2).\n          thenReturn(jobStatusIterator3).\n          thenReturn(jobStatusIterator4).\n          thenReturn(jobStatusIterator5).\n          thenReturn(jobStatusIterator6).\n          thenReturn(jobStatusIterator7).\n          thenReturn(jobStatusIterator8).\n          thenReturn(jobStatusIterator9);\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 1);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 2);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 2);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n      \r\n      this._dagManagerThread.run();\n\n      if (\"FINISH_RUNNING\".equals(failureOption)) {\n        \r\n        Assert.assertEquals(this.dags.size(), 0);\n        Assert.assertEquals(this.jobToDag.size(), 0);\n        Assert.assertEquals(this.dagToJobs.size(), 0);\n        Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n      } else {\n        \r\n        for (int i = 0; i < 3; i++) {\n          Assert.assertEquals(this.dags.size(), 1);\n          Assert.assertEquals(this.jobToDag.size(), 1);\n          Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n          this._dagManagerThread.run();\n        }\n        \r\n        Assert.assertEquals(this.dags.size(), 0);\n        Assert.assertEquals(this.jobToDag.size(), 0);\n        Assert.assertEquals(this.dagToJobs.size(), 0);\n        Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n      }\n    }\n  }\n","date":"2018-12-15 02:47:27","endLine":312,"groupId":"5716","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailedDag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/62/0c2eefe3d42c43276f4cdd6da7ec57168a7b2d.src","preCode":"  public void testFailedDag() throws URISyntaxException, IOException {\n    for (String failureOption: Lists.newArrayList(\"FINISH_RUNNING\", \"FINISH_ALL_POSSIBLE\")) {\n      long flowExecutionId = System.currentTimeMillis();\n      String flowGroupId = \"0\";\n      String flowGroup = \"group\" + flowGroupId;\n      String flowName = \"flow\" + flowGroupId;\n      String jobName0 = \"job0\";\n      String jobName1 = \"job1\";\n      String jobName2 = \"job2\";\n\n      Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, failureOption, false);\n      String dagId = DagManagerUtils.generateDagId(dag);\n\n      \r\n      this.queue.offer(dag);\n      Iterator<JobStatus> jobStatusIterator1 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName0, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator2 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName0, String.valueOf(ExecutionStatus.COMPLETE));\n      Iterator<JobStatus> jobStatusIterator3 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator4 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName2, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator5 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator6 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName2, String.valueOf(ExecutionStatus.FAILED));\n      Iterator<JobStatus> jobStatusIterator7 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.COMPLETE));\n      Iterator<JobStatus> jobStatusIterator8 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator9 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, flowGroup, jobName1, String.valueOf(ExecutionStatus.COMPLETE));\n\n\n      Mockito.when(_jobStatusRetriever\n          .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n          thenReturn(jobStatusIterator1).\n          thenReturn(jobStatusIterator2).\n          thenReturn(jobStatusIterator3).\n          thenReturn(jobStatusIterator4).\n          thenReturn(jobStatusIterator5).\n          thenReturn(jobStatusIterator6).\n          thenReturn(jobStatusIterator7).\n          thenReturn(jobStatusIterator8).\n          thenReturn(jobStatusIterator9);\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 1);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 2);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 2);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n      \r\n      this._dagManagerThread.run();\n\n      if (\"FINISH_RUNNING\".equals(failureOption)) {\n        \r\n        Assert.assertEquals(this.dags.size(), 0);\n        Assert.assertEquals(this.jobToDag.size(), 0);\n        Assert.assertEquals(this.dagToJobs.size(), 0);\n        Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n      } else {\n        \r\n        for (int i = 0; i < 3; i++) {\n          Assert.assertEquals(this.dags.size(), 1);\n          Assert.assertEquals(this.jobToDag.size(), 1);\n          Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n          this._dagManagerThread.run();\n        }\n        \r\n        Assert.assertEquals(this.dags.size(), 0);\n        Assert.assertEquals(this.jobToDag.size(), 0);\n        Assert.assertEquals(this.dagToJobs.size(), 0);\n        Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n      }\n    }\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"}],"commitId":"f8d791b6a6bda46d63279e76cd743895f1e8b394","commitMessage":"@@@[GOBBLIN-654] Fix the argument order of JobStatusRetriever APIs to reflect actual usage.[]\n\nCloses #2523 from sv2000/jobStatusRetriever\n","date":"2018-12-15 02:47:27","modifiedFileCount":"3","status":"M","submitter":"suvasude"},{"authorTime":"2018-12-15 02:47:27","codes":[{"authorDate":"2021-06-16 02:44:42","commitOrder":4,"curCode":"  public void testSuccessfulDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator6 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator7 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever.getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(),\n        Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dags.get(dagId).getNodes().get(0).getValue().getCurrentAttempts(), 1);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 0);\n    Assert.assertEquals(this.jobToDag.size(), 0);\n    Assert.assertEquals(this.dagToJobs.size(), 0);\n    Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n  }\n","date":"2021-06-16 02:44:42","endLine":239,"groupId":"101087","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSuccessfulDag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2b/7044f92e4533a1bd24d8fb4e2e658734935134.src","preCode":"  public void testSuccessfulDag() throws URISyntaxException, IOException {\n    long flowExecutionId = System.currentTimeMillis();\n    String flowGroupId = \"0\";\n    String flowGroup = \"group\" + flowGroupId;\n    String flowName = \"flow\" + flowGroupId;\n    String jobName0 = \"job0\";\n    String jobName1 = \"job1\";\n    String jobName2 = \"job2\";\n\n    Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, \"FINISH_RUNNING\", true);\n    String dagId = DagManagerUtils.generateDagId(dag);\n\n    \r\n    this.queue.offer(dag);\n    Iterator<JobStatus> jobStatusIterator1 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator2 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator3 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator4 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator5 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n    Iterator<JobStatus> jobStatusIterator6 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n    Iterator<JobStatus> jobStatusIterator7 = getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n    Mockito.when(_jobStatusRetriever.getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(),\n        Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n        thenReturn(jobStatusIterator1).\n        thenReturn(jobStatusIterator2).\n        thenReturn(jobStatusIterator3).\n        thenReturn(jobStatusIterator4).\n        thenReturn(jobStatusIterator5).\n        thenReturn(jobStatusIterator6).\n        thenReturn(jobStatusIterator7);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 2);\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.jobToDag.containsKey(dag.getEndNodes().get(1)));\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(0)));\n    Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getEndNodes().get(1)));\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 1);\n    Assert.assertTrue(this.dags.containsKey(dagId));\n    Assert.assertEquals(this.jobToDag.size(), 1);\n    Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n\n    \r\n    this._dagManagerThread.run();\n    Assert.assertEquals(this.dags.size(), 0);\n    Assert.assertEquals(this.jobToDag.size(), 0);\n    Assert.assertEquals(this.dagToJobs.size(), 0);\n    Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2018-12-15 02:47:27","commitOrder":4,"curCode":"  public void testFailedDag() throws URISyntaxException, IOException {\n    for (String failureOption: Lists.newArrayList(\"FINISH_RUNNING\", \"FINISH_ALL_POSSIBLE\")) {\n      long flowExecutionId = System.currentTimeMillis();\n      String flowGroupId = \"0\";\n      String flowGroup = \"group\" + flowGroupId;\n      String flowName = \"flow\" + flowGroupId;\n      String jobName0 = \"job0\";\n      String jobName1 = \"job1\";\n      String jobName2 = \"job2\";\n\n      Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, failureOption, false);\n      String dagId = DagManagerUtils.generateDagId(dag);\n\n      \r\n      this.queue.offer(dag);\n      Iterator<JobStatus> jobStatusIterator1 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator2 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n      Iterator<JobStatus> jobStatusIterator3 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator4 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator5 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator6 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.FAILED));\n      Iterator<JobStatus> jobStatusIterator7 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n      Iterator<JobStatus> jobStatusIterator8 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator9 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n\n      Mockito.when(_jobStatusRetriever\n          .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n          thenReturn(jobStatusIterator1).\n          thenReturn(jobStatusIterator2).\n          thenReturn(jobStatusIterator3).\n          thenReturn(jobStatusIterator4).\n          thenReturn(jobStatusIterator5).\n          thenReturn(jobStatusIterator6).\n          thenReturn(jobStatusIterator7).\n          thenReturn(jobStatusIterator8).\n          thenReturn(jobStatusIterator9);\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 1);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 2);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 2);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n      \r\n      this._dagManagerThread.run();\n\n      if (\"FINISH_RUNNING\".equals(failureOption)) {\n        \r\n        Assert.assertEquals(this.dags.size(), 0);\n        Assert.assertEquals(this.jobToDag.size(), 0);\n        Assert.assertEquals(this.dagToJobs.size(), 0);\n        Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n      } else {\n        \r\n        for (int i = 0; i < 3; i++) {\n          Assert.assertEquals(this.dags.size(), 1);\n          Assert.assertEquals(this.jobToDag.size(), 1);\n          Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n          this._dagManagerThread.run();\n        }\n        \r\n        Assert.assertEquals(this.dags.size(), 0);\n        Assert.assertEquals(this.jobToDag.size(), 0);\n        Assert.assertEquals(this.dagToJobs.size(), 0);\n        Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n      }\n    }\n  }\n","date":"2018-12-15 02:47:27","endLine":312,"groupId":"101087","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFailedDag","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/62/0c2eefe3d42c43276f4cdd6da7ec57168a7b2d.src","preCode":"  public void testFailedDag() throws URISyntaxException, IOException {\n    for (String failureOption: Lists.newArrayList(\"FINISH_RUNNING\", \"FINISH_ALL_POSSIBLE\")) {\n      long flowExecutionId = System.currentTimeMillis();\n      String flowGroupId = \"0\";\n      String flowGroup = \"group\" + flowGroupId;\n      String flowName = \"flow\" + flowGroupId;\n      String jobName0 = \"job0\";\n      String jobName1 = \"job1\";\n      String jobName2 = \"job2\";\n\n      Dag<JobExecutionPlan> dag = buildDag(flowGroupId, flowExecutionId, failureOption, false);\n      String dagId = DagManagerUtils.generateDagId(dag);\n\n      \r\n      this.queue.offer(dag);\n      Iterator<JobStatus> jobStatusIterator1 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator2 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName0, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n      Iterator<JobStatus> jobStatusIterator3 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator4 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator5 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator6 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName2, flowGroup, String.valueOf(ExecutionStatus.FAILED));\n      Iterator<JobStatus> jobStatusIterator7 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n      Iterator<JobStatus> jobStatusIterator8 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.RUNNING));\n      Iterator<JobStatus> jobStatusIterator9 =\n          getMockJobStatus(flowName, flowGroup, flowExecutionId, jobName1, flowGroup, String.valueOf(ExecutionStatus.COMPLETE));\n\n\n      Mockito.when(_jobStatusRetriever\n          .getJobStatusesForFlowExecution(Mockito.anyString(), Mockito.anyString(), Mockito.anyLong(), Mockito.anyString(), Mockito.anyString())).\n          thenReturn(jobStatusIterator1).\n          thenReturn(jobStatusIterator2).\n          thenReturn(jobStatusIterator3).\n          thenReturn(jobStatusIterator4).\n          thenReturn(jobStatusIterator5).\n          thenReturn(jobStatusIterator6).\n          thenReturn(jobStatusIterator7).\n          thenReturn(jobStatusIterator8).\n          thenReturn(jobStatusIterator9);\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 1);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getStartNodes().get(0)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getStartNodes().get(0)));\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 2);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n      \r\n      this._dagManagerThread.run();\n      Assert.assertEquals(this.dags.size(), 1);\n      Assert.assertTrue(this.dags.containsKey(dagId));\n      Assert.assertEquals(this.jobToDag.size(), 2);\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(1)));\n      Assert.assertTrue(this.jobToDag.containsKey(dag.getNodes().get(2)));\n      Assert.assertEquals(this.dagToJobs.get(dagId).size(), 2);\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(1)));\n      Assert.assertTrue(this.dagToJobs.get(dagId).contains(dag.getNodes().get(2)));\n\n      \r\n      this._dagManagerThread.run();\n\n      if (\"FINISH_RUNNING\".equals(failureOption)) {\n        \r\n        Assert.assertEquals(this.dags.size(), 0);\n        Assert.assertEquals(this.jobToDag.size(), 0);\n        Assert.assertEquals(this.dagToJobs.size(), 0);\n        Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n      } else {\n        \r\n        for (int i = 0; i < 3; i++) {\n          Assert.assertEquals(this.dags.size(), 1);\n          Assert.assertEquals(this.jobToDag.size(), 1);\n          Assert.assertEquals(this.dagToJobs.get(dagId).size(), 1);\n          this._dagManagerThread.run();\n        }\n        \r\n        Assert.assertEquals(this.dags.size(), 0);\n        Assert.assertEquals(this.jobToDag.size(), 0);\n        Assert.assertEquals(this.dagToJobs.size(), 0);\n        Assert.assertEquals(this._dagStateStore.getDags().size(), 0);\n      }\n    }\n  }\n","realPath":"gobblin-service/src/test/java/org/apache/gobblin/service/modules/orchestration/DagManagerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"N"}],"commitId":"1e03329332a14277b7507e75127ffa5b30377757","commitMessage":"@@@[GOBBLIN-1468] reset currentAttempt counter on resume flow\n\nCloses #3308 from\narjun4084346/resetCurrentAttemptOnFlowResume\n","date":"2021-06-16 02:44:42","modifiedFileCount":"2","status":"M","submitter":"Arjun"}]
