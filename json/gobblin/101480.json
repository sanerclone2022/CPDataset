[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testRetriableFail() throws Exception {\n    Queue<RequestAndCallback> queue = Queues.newArrayDeque();\n\n    BatchedPermitsRequester container = BatchedPermitsRequester.builder().resourceId(\"resource\")\n        .requestorIdentifier(\"requestor\").requestSender(new TestRequestSender(queue, false)).build();\n    try (ParallelRequester requester = new ParallelRequester(container)) {\n\n      Future<Boolean> future = requester.request(10);\n\n      for (int i = 0; i < BatchedPermitsRequester.MAX_RETRIES; i++) {\n        \r\n        await(new QueueSize(queue, 1), 1000);\n        Assert.assertFalse(future.isDone());\n        failRequestBuilder().requestAndCallback(queue.poll()).fail();\n      }\n\n      \r\n      Assert.assertFalse(future.get());\n      \r\n      Assert.assertEquals(queue.size(), 0);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":139,"groupId":"7081","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetriableFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b0/2f545ea800c10725c4f08e35b65920f7925342.src","preCode":"  public void testRetriableFail() throws Exception {\n    Queue<RequestAndCallback> queue = Queues.newArrayDeque();\n\n    BatchedPermitsRequester container = BatchedPermitsRequester.builder().resourceId(\"resource\")\n        .requestorIdentifier(\"requestor\").requestSender(new TestRequestSender(queue, false)).build();\n    try (ParallelRequester requester = new ParallelRequester(container)) {\n\n      Future<Boolean> future = requester.request(10);\n\n      for (int i = 0; i < BatchedPermitsRequester.MAX_RETRIES; i++) {\n        \r\n        await(new QueueSize(queue, 1), 1000);\n        Assert.assertFalse(future.isDone());\n        failRequestBuilder().requestAndCallback(queue.poll()).fail();\n      }\n\n      \r\n      Assert.assertFalse(future.get());\n      \r\n      Assert.assertEquals(queue.size(), 0);\n    }\n  }\n","realPath":"gobblin-restli/gobblin-throttling-service/gobblin-throttling-service-client/src/test/java/org/apache/gobblin/util/limiter/BatchedPermitsRequesterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testNonRetriableFail() throws Exception {\n    Queue<RequestAndCallback> queue = Queues.newArrayDeque();\n\n    BatchedPermitsRequester container = BatchedPermitsRequester.builder().resourceId(\"resource\")\n        .requestorIdentifier(\"requestor\").requestSender(new TestRequestSender(queue, false)).build();\n    try (ParallelRequester requester = new ParallelRequester(container)) {\n\n      Future<Boolean> future = requester.request(10);\n\n      \r\n      await(new QueueSize(queue, 1), 1000);\n      Assert.assertFalse(future.isDone());\n      failRequestBuilder().requestAndCallback(queue.poll()).errorStatus(HttpStatus.S_422_UNPROCESSABLE_ENTITY).fail();\n\n      Assert.assertFalse(future.get());\n      Assert.assertEquals(queue.size(), 0);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":159,"groupId":"7081","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNonRetriableFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b0/2f545ea800c10725c4f08e35b65920f7925342.src","preCode":"  public void testNonRetriableFail() throws Exception {\n    Queue<RequestAndCallback> queue = Queues.newArrayDeque();\n\n    BatchedPermitsRequester container = BatchedPermitsRequester.builder().resourceId(\"resource\")\n        .requestorIdentifier(\"requestor\").requestSender(new TestRequestSender(queue, false)).build();\n    try (ParallelRequester requester = new ParallelRequester(container)) {\n\n      Future<Boolean> future = requester.request(10);\n\n      \r\n      await(new QueueSize(queue, 1), 1000);\n      Assert.assertFalse(future.isDone());\n      failRequestBuilder().requestAndCallback(queue.poll()).errorStatus(HttpStatus.S_422_UNPROCESSABLE_ENTITY).fail();\n\n      Assert.assertFalse(future.get());\n      Assert.assertEquals(queue.size(), 0);\n    }\n  }\n","realPath":"gobblin-restli/gobblin-throttling-service/gobblin-throttling-service-client/src/test/java/org/apache/gobblin/util/limiter/BatchedPermitsRequesterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2019-05-07 01:39:20","codes":[{"authorDate":"2019-05-07 01:39:20","commitOrder":2,"curCode":"  public void testRetriableFail() throws Exception {\n    Queue<RequestAndCallback> queue = Queues.newArrayDeque();\n\n    BatchedPermitsRequester container = BatchedPermitsRequester.builder().resourceId(\"resource\")\n        .requestorIdentifier(\"requestor\").requestSender(new TestRequestSender(queue, false))\n        .maxTimeoutMillis(1000).build();\n    try (ParallelRequester requester = new ParallelRequester(container)) {\n\n      Future<Boolean> future = requester.request(10);\n\n      for (int i = 0; i < BatchedPermitsRequester.MAX_RETRIES; i++) {\n        \r\n        await(new QueueSize(queue, 1), 1000);\n        Assert.assertFalse(future.isDone());\n        failRequestBuilder().requestAndCallback(queue.poll()).fail();\n      }\n\n      \r\n      Assert.assertFalse(future.get());\n      \r\n      Assert.assertEquals(queue.size(), 0);\n    }\n  }\n","date":"2019-05-07 01:39:20","endLine":140,"groupId":"101480","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testRetriableFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ce/e8f70670208f8908ddf7d1fda7d8e578a6da8b.src","preCode":"  public void testRetriableFail() throws Exception {\n    Queue<RequestAndCallback> queue = Queues.newArrayDeque();\n\n    BatchedPermitsRequester container = BatchedPermitsRequester.builder().resourceId(\"resource\")\n        .requestorIdentifier(\"requestor\").requestSender(new TestRequestSender(queue, false)).build();\n    try (ParallelRequester requester = new ParallelRequester(container)) {\n\n      Future<Boolean> future = requester.request(10);\n\n      for (int i = 0; i < BatchedPermitsRequester.MAX_RETRIES; i++) {\n        \r\n        await(new QueueSize(queue, 1), 1000);\n        Assert.assertFalse(future.isDone());\n        failRequestBuilder().requestAndCallback(queue.poll()).fail();\n      }\n\n      \r\n      Assert.assertFalse(future.get());\n      \r\n      Assert.assertEquals(queue.size(), 0);\n    }\n  }\n","realPath":"gobblin-restli/gobblin-throttling-service/gobblin-throttling-service-client/src/test/java/org/apache/gobblin/util/limiter/BatchedPermitsRequesterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2019-05-07 01:39:20","commitOrder":2,"curCode":"  public void testNonRetriableFail() throws Exception {\n    Queue<RequestAndCallback> queue = Queues.newArrayDeque();\n\n    BatchedPermitsRequester container = BatchedPermitsRequester.builder().resourceId(\"resource\")\n        .requestorIdentifier(\"requestor\").requestSender(new TestRequestSender(queue, false))\n        .maxTimeoutMillis(1000).build();\n    try (ParallelRequester requester = new ParallelRequester(container)) {\n\n      Future<Boolean> future = requester.request(10);\n\n      \r\n      await(new QueueSize(queue, 1), 1000);\n      Assert.assertFalse(future.isDone());\n      failRequestBuilder().requestAndCallback(queue.poll()).errorStatus(HttpStatus.S_422_UNPROCESSABLE_ENTITY).fail();\n\n      Assert.assertFalse(future.get());\n      Assert.assertEquals(queue.size(), 0);\n    }\n  }\n","date":"2019-05-07 01:39:20","endLine":161,"groupId":"101480","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testNonRetriableFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ce/e8f70670208f8908ddf7d1fda7d8e578a6da8b.src","preCode":"  public void testNonRetriableFail() throws Exception {\n    Queue<RequestAndCallback> queue = Queues.newArrayDeque();\n\n    BatchedPermitsRequester container = BatchedPermitsRequester.builder().resourceId(\"resource\")\n        .requestorIdentifier(\"requestor\").requestSender(new TestRequestSender(queue, false)).build();\n    try (ParallelRequester requester = new ParallelRequester(container)) {\n\n      Future<Boolean> future = requester.request(10);\n\n      \r\n      await(new QueueSize(queue, 1), 1000);\n      Assert.assertFalse(future.isDone());\n      failRequestBuilder().requestAndCallback(queue.poll()).errorStatus(HttpStatus.S_422_UNPROCESSABLE_ENTITY).fail();\n\n      Assert.assertFalse(future.get());\n      Assert.assertEquals(queue.size(), 0);\n    }\n  }\n","realPath":"gobblin-restli/gobblin-throttling-service/gobblin-throttling-service-client/src/test/java/org/apache/gobblin/util/limiter/BatchedPermitsRequesterTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"4c0735dfe2055c8fc4da87e9871ea4dec01196e7","commitMessage":"@@@[GOBBLIN-764] Allow injection of Rest.li configurations for throttling client and fixed unit test.\n\nCloses #2628 from ibuenros/limiter-timeout\n","date":"2019-05-07 01:39:20","modifiedFileCount":"6","status":"M","submitter":"ibuenros"}]
