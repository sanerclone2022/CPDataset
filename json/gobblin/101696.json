[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testEvolutionEnabledGenerateEvolutionDDL() {\n    String orcStagingTableName = schemaName + \"_staging\";\n    String orcTableName = schemaName;\n    boolean isEvolutionEnabled = true;\n    Optional<Table> destinationTableMeta = createEvolvedDestinationTable(schemaName, \"default\", \"\", true);\n    Map<String, String> hiveColumns = new HashMap<>();\n\n    \r\n    HiveAvroORCQueryGenerator.generateCreateTableDDL(outputSchema, schemaName, \"/tmp/dummy\", Optional.<String>absent(),\n        Optional.<Map<String, String>>absent(), Optional.<List<String>>absent(),\n        Optional.<Map<String, HiveAvroORCQueryGenerator.COLUMN_SORT_ORDER>>absent(), Optional.<Integer>absent(),\n        Optional.<String>absent(), Optional.<String>absent(), Optional.<String>absent(),\n        null, isEvolutionEnabled, destinationTableMeta, hiveColumns);\n\n    \r\n    List<String> generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    Assert.assertEquals(generateEvolutionDDL.size(), 2);\n    Assert.assertEquals(generateEvolutionDDL.get(1),\n        \"ALTER TABLE `sourceSchema` ADD COLUMNS (parentFieldRecord__nestedFieldInt int \"\n            + \"COMMENT 'from flatten_source parentFieldRecord.nestedFieldInt')\",\n        \"Generated evolution DDL did not match for evolution enabled\");\n\n    \r\n    destinationTableMeta = Optional.absent();\n    generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution enabled\");\n  }\n","date":"2017-07-31 15:51:25","endLine":235,"groupId":"6294","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testEvolutionEnabledGenerateEvolutionDDL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/36/edcd933c0f12caa554f056bbe469b7347100d3.src","preCode":"  public void testEvolutionEnabledGenerateEvolutionDDL() {\n    String orcStagingTableName = schemaName + \"_staging\";\n    String orcTableName = schemaName;\n    boolean isEvolutionEnabled = true;\n    Optional<Table> destinationTableMeta = createEvolvedDestinationTable(schemaName, \"default\", \"\", true);\n    Map<String, String> hiveColumns = new HashMap<>();\n\n    \r\n    HiveAvroORCQueryGenerator.generateCreateTableDDL(outputSchema, schemaName, \"/tmp/dummy\", Optional.<String>absent(),\n        Optional.<Map<String, String>>absent(), Optional.<List<String>>absent(),\n        Optional.<Map<String, HiveAvroORCQueryGenerator.COLUMN_SORT_ORDER>>absent(), Optional.<Integer>absent(),\n        Optional.<String>absent(), Optional.<String>absent(), Optional.<String>absent(),\n        null, isEvolutionEnabled, destinationTableMeta, hiveColumns);\n\n    \r\n    List<String> generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    Assert.assertEquals(generateEvolutionDDL.size(), 2);\n    Assert.assertEquals(generateEvolutionDDL.get(1),\n        \"ALTER TABLE `sourceSchema` ADD COLUMNS (parentFieldRecord__nestedFieldInt int \"\n            + \"COMMENT 'from flatten_source parentFieldRecord.nestedFieldInt')\",\n        \"Generated evolution DDL did not match for evolution enabled\");\n\n    \r\n    destinationTableMeta = Optional.absent();\n    generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution enabled\");\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/conversion/hive/converter/HiveSchemaEvolutionTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testEvolutionDisabledGenerateEvolutionDDL() {\n    String orcStagingTableName = schemaName + \"_staging\";\n    String orcTableName = schemaName;\n    boolean isEvolutionEnabled = false;\n    Optional<Table> destinationTableMeta = createEvolvedDestinationTable(schemaName, \"default\", \"\", true);\n    Map<String, String> hiveColumns = new HashMap<>();\n\n    \r\n    HiveAvroORCQueryGenerator.generateCreateTableDDL(outputSchema, schemaName, \"/tmp/dummy\", Optional.<String>absent(),\n        Optional.<Map<String, String>>absent(), Optional.<List<String>>absent(),\n        Optional.<Map<String, HiveAvroORCQueryGenerator.COLUMN_SORT_ORDER>>absent(), Optional.<Integer>absent(),\n        Optional.<String>absent(), Optional.<String>absent(), Optional.<String>absent(),\n        null, isEvolutionEnabled, destinationTableMeta, hiveColumns);\n\n    \r\n    List<String> generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution disabled\");\n\n    \r\n    destinationTableMeta = Optional.absent();\n    generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution disabled\");\n  }\n","date":"2017-07-31 15:51:25","endLine":268,"groupId":"6294","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testEvolutionDisabledGenerateEvolutionDDL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/36/edcd933c0f12caa554f056bbe469b7347100d3.src","preCode":"  public void testEvolutionDisabledGenerateEvolutionDDL() {\n    String orcStagingTableName = schemaName + \"_staging\";\n    String orcTableName = schemaName;\n    boolean isEvolutionEnabled = false;\n    Optional<Table> destinationTableMeta = createEvolvedDestinationTable(schemaName, \"default\", \"\", true);\n    Map<String, String> hiveColumns = new HashMap<>();\n\n    \r\n    HiveAvroORCQueryGenerator.generateCreateTableDDL(outputSchema, schemaName, \"/tmp/dummy\", Optional.<String>absent(),\n        Optional.<Map<String, String>>absent(), Optional.<List<String>>absent(),\n        Optional.<Map<String, HiveAvroORCQueryGenerator.COLUMN_SORT_ORDER>>absent(), Optional.<Integer>absent(),\n        Optional.<String>absent(), Optional.<String>absent(), Optional.<String>absent(),\n        null, isEvolutionEnabled, destinationTableMeta, hiveColumns);\n\n    \r\n    List<String> generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution disabled\");\n\n    \r\n    destinationTableMeta = Optional.absent();\n    generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution disabled\");\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/conversion/hive/converter/HiveSchemaEvolutionTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2019-04-26 12:05:29","commitOrder":2,"curCode":"  public void testEvolutionEnabledGenerateEvolutionDDL() {\n    String orcStagingTableName = schemaName + \"_staging\";\n    String orcTableName = schemaName;\n    boolean isEvolutionEnabled = true;\n    Optional<Table> destinationTableMeta = createEvolvedDestinationTable(schemaName, \"default\", \"\", true);\n    Map<String, String> hiveColumns = new HashMap<>();\n\n    \r\n    HiveAvroORCQueryGenerator.generateCreateTableDDL(outputSchema, schemaName, \"/tmp/dummy\", Optional.<String>absent(),\n        Optional.<Map<String, String>>absent(), Optional.<List<String>>absent(),\n        Optional.<Map<String, HiveAvroORCQueryGenerator.COLUMN_SORT_ORDER>>absent(), Optional.<Integer>absent(),\n        Optional.<String>absent(), Optional.<String>absent(), Optional.<String>absent(),\n        null, isEvolutionEnabled, destinationTableMeta, hiveColumns);\n\n    \r\n    List<String> generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    Assert.assertEquals(generateEvolutionDDL.size(), 2);\n    Assert.assertEquals(generateEvolutionDDL.get(1),\n        \"ALTER TABLE `sourceSchema` ADD COLUMNS (`parentFieldRecord__nestedFieldInt` int \"\n            + \"COMMENT 'from flatten_source parentFieldRecord.nestedFieldInt')\",\n        \"Generated evolution DDL did not match for evolution enabled\");\n\n    \r\n    destinationTableMeta = Optional.absent();\n    generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution enabled\");\n  }\n","date":"2019-04-26 12:05:29","endLine":235,"groupId":"6294","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testEvolutionEnabledGenerateEvolutionDDL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/44/32b54e778607fac010b959d4d9529e203d6512.src","preCode":"  public void testEvolutionEnabledGenerateEvolutionDDL() {\n    String orcStagingTableName = schemaName + \"_staging\";\n    String orcTableName = schemaName;\n    boolean isEvolutionEnabled = true;\n    Optional<Table> destinationTableMeta = createEvolvedDestinationTable(schemaName, \"default\", \"\", true);\n    Map<String, String> hiveColumns = new HashMap<>();\n\n    \r\n    HiveAvroORCQueryGenerator.generateCreateTableDDL(outputSchema, schemaName, \"/tmp/dummy\", Optional.<String>absent(),\n        Optional.<Map<String, String>>absent(), Optional.<List<String>>absent(),\n        Optional.<Map<String, HiveAvroORCQueryGenerator.COLUMN_SORT_ORDER>>absent(), Optional.<Integer>absent(),\n        Optional.<String>absent(), Optional.<String>absent(), Optional.<String>absent(),\n        null, isEvolutionEnabled, destinationTableMeta, hiveColumns);\n\n    \r\n    List<String> generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    Assert.assertEquals(generateEvolutionDDL.size(), 2);\n    Assert.assertEquals(generateEvolutionDDL.get(1),\n        \"ALTER TABLE `sourceSchema` ADD COLUMNS (parentFieldRecord__nestedFieldInt int \"\n            + \"COMMENT 'from flatten_source parentFieldRecord.nestedFieldInt')\",\n        \"Generated evolution DDL did not match for evolution enabled\");\n\n    \r\n    destinationTableMeta = Optional.absent();\n    generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution enabled\");\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/conversion/hive/converter/HiveSchemaEvolutionTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void testEvolutionDisabledGenerateEvolutionDDL() {\n    String orcStagingTableName = schemaName + \"_staging\";\n    String orcTableName = schemaName;\n    boolean isEvolutionEnabled = false;\n    Optional<Table> destinationTableMeta = createEvolvedDestinationTable(schemaName, \"default\", \"\", true);\n    Map<String, String> hiveColumns = new HashMap<>();\n\n    \r\n    HiveAvroORCQueryGenerator.generateCreateTableDDL(outputSchema, schemaName, \"/tmp/dummy\", Optional.<String>absent(),\n        Optional.<Map<String, String>>absent(), Optional.<List<String>>absent(),\n        Optional.<Map<String, HiveAvroORCQueryGenerator.COLUMN_SORT_ORDER>>absent(), Optional.<Integer>absent(),\n        Optional.<String>absent(), Optional.<String>absent(), Optional.<String>absent(),\n        null, isEvolutionEnabled, destinationTableMeta, hiveColumns);\n\n    \r\n    List<String> generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution disabled\");\n\n    \r\n    destinationTableMeta = Optional.absent();\n    generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution disabled\");\n  }\n","date":"2017-07-31 15:51:25","endLine":268,"groupId":"6294","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testEvolutionDisabledGenerateEvolutionDDL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/36/edcd933c0f12caa554f056bbe469b7347100d3.src","preCode":"  public void testEvolutionDisabledGenerateEvolutionDDL() {\n    String orcStagingTableName = schemaName + \"_staging\";\n    String orcTableName = schemaName;\n    boolean isEvolutionEnabled = false;\n    Optional<Table> destinationTableMeta = createEvolvedDestinationTable(schemaName, \"default\", \"\", true);\n    Map<String, String> hiveColumns = new HashMap<>();\n\n    \r\n    HiveAvroORCQueryGenerator.generateCreateTableDDL(outputSchema, schemaName, \"/tmp/dummy\", Optional.<String>absent(),\n        Optional.<Map<String, String>>absent(), Optional.<List<String>>absent(),\n        Optional.<Map<String, HiveAvroORCQueryGenerator.COLUMN_SORT_ORDER>>absent(), Optional.<Integer>absent(),\n        Optional.<String>absent(), Optional.<String>absent(), Optional.<String>absent(),\n        null, isEvolutionEnabled, destinationTableMeta, hiveColumns);\n\n    \r\n    List<String> generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution disabled\");\n\n    \r\n    destinationTableMeta = Optional.absent();\n    generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution disabled\");\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/conversion/hive/converter/HiveSchemaEvolutionTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":238,"status":"N"}],"commitId":"aa3b3d01406c8e0580329cb38b486839b1b5bd94","commitMessage":"@@@[GOBBLIN-755] add delimiter to hive queries\n\nDear Gobblin maintainers. \n\nPlease accept this PR. I understand that it will\nnot be reviewed until I have checked off all the\nsteps below! zxcware please review\n\n\n JIRA\n- [x] My PR addresses the following [Gobblin JIRA]\n(https://issues.apache.org/jira/browse/GOBBLIN/)\nissues and references them in the PR title. For\nexample.  \"[GOBBLIN-XXX] My Gobblin PR\"\n    - https://issues.apache.org/jira/browse/GOBBLIN-\nXXX\n\n\n Description\n- [x] Here are some details about my PR.  including\nscreenshots (if applicable):\nadd the delimiter around all column names in hive\nqueries\n\n\n Tests\n- [x] My PR adds the following unit tests __OR__\ndoes not need testing for this extremely good\nreason:\nupdated the test case\n\n\n Commits\n- [x] My commits all reference JIRA issues in\ntheir subject lines.  and I have squashed multiple\ncommits if they address the same issue. In\naddition.  my commits follow the guidelines from\n\"[How to write a good git commit\nmessage](http://chris.beams.io/posts/git-\ncommit/)\":\n    1. Subject is separated from body by a blank line\n    2. Subject is limited to 50 characters\n    3. Subject does not end with a period\n    4. Subject uses the imperative mood (\"add\".  not\n\"adding\")\n    5. Body wraps at 72 characters\n    6. Body explains \"what\" and \"why\".  not \"how\"\n\nadd delimiter to hive queries\n\naddress review comment\n\nCloses #2619 from arjun4084346/fixHiveQueries\n","date":"2019-04-26 12:05:29","modifiedFileCount":"2","status":"M","submitter":"Arjun"},{"authorTime":"2019-12-19 02:38:41","codes":[{"authorDate":"2019-12-19 02:38:41","commitOrder":3,"curCode":"  public void testEvolutionEnabledGenerateEvolutionDDL() {\n    String orcStagingTableName = schemaName + \"_staging\";\n    String orcTableName = schemaName;\n    boolean isEvolutionEnabled = true;\n    Optional<Table> destinationTableMeta = createEvolvedDestinationTable(schemaName, \"default\", \"\", true);\n    Map<String, String> hiveColumns = new HashMap<>();\n\n    \r\n    HiveAvroORCQueryGenerator.generateCreateTableDDL(outputSchema, schemaName, \"/tmp/dummy\", Optional.<String>absent(),\n        Optional.<Map<String, String>>absent(), Optional.<List<String>>absent(),\n        Optional.<Map<String, HiveAvroORCQueryGenerator.COLUMN_SORT_ORDER>>absent(), Optional.<Integer>absent(),\n        Optional.<String>absent(), Optional.<String>absent(), Optional.<String>absent(),\n        null, isEvolutionEnabled, true, destinationTableMeta, hiveColumns);\n\n    \r\n    Properties tableProperties = new Properties();\n    tableProperties.setProperty(\"random\", \"value\");\n    List<String> generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta, tableProperties);\n    Assert.assertEquals(generateEvolutionDDL.size(), 4);\n    Assert.assertEquals(generateEvolutionDDL.get(1),\n        \"ALTER TABLE `sourceSchema` ADD COLUMNS (`parentFieldRecord__nestedFieldInt` int \"\n            + \"COMMENT 'from flatten_source parentFieldRecord.nestedFieldInt')\",\n        \"Generated evolution DDL did not match for evolution enabled\");\n\n    \r\n    destinationTableMeta = Optional.absent();\n    generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta, tableProperties);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution enabled\");\n  }\n","date":"2019-12-19 02:38:41","endLine":239,"groupId":"101696","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testEvolutionEnabledGenerateEvolutionDDL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2e/a51859bb1284ba80749f35bd1ce06a4a7efd48.src","preCode":"  public void testEvolutionEnabledGenerateEvolutionDDL() {\n    String orcStagingTableName = schemaName + \"_staging\";\n    String orcTableName = schemaName;\n    boolean isEvolutionEnabled = true;\n    Optional<Table> destinationTableMeta = createEvolvedDestinationTable(schemaName, \"default\", \"\", true);\n    Map<String, String> hiveColumns = new HashMap<>();\n\n    \r\n    HiveAvroORCQueryGenerator.generateCreateTableDDL(outputSchema, schemaName, \"/tmp/dummy\", Optional.<String>absent(),\n        Optional.<Map<String, String>>absent(), Optional.<List<String>>absent(),\n        Optional.<Map<String, HiveAvroORCQueryGenerator.COLUMN_SORT_ORDER>>absent(), Optional.<Integer>absent(),\n        Optional.<String>absent(), Optional.<String>absent(), Optional.<String>absent(),\n        null, isEvolutionEnabled, destinationTableMeta, hiveColumns);\n\n    \r\n    List<String> generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    Assert.assertEquals(generateEvolutionDDL.size(), 2);\n    Assert.assertEquals(generateEvolutionDDL.get(1),\n        \"ALTER TABLE `sourceSchema` ADD COLUMNS (`parentFieldRecord__nestedFieldInt` int \"\n            + \"COMMENT 'from flatten_source parentFieldRecord.nestedFieldInt')\",\n        \"Generated evolution DDL did not match for evolution enabled\");\n\n    \r\n    destinationTableMeta = Optional.absent();\n    generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution enabled\");\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/conversion/hive/converter/HiveSchemaEvolutionTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2019-12-19 02:38:41","commitOrder":3,"curCode":"  public void testEvolutionDisabledGenerateEvolutionDDL() {\n    String orcStagingTableName = schemaName + \"_staging\";\n    String orcTableName = schemaName;\n    boolean isEvolutionEnabled = false;\n    Optional<Table> destinationTableMeta = createEvolvedDestinationTable(schemaName, \"default\", \"\", true);\n    Map<String, String> hiveColumns = new HashMap<>();\n\n    \r\n    HiveAvroORCQueryGenerator.generateCreateTableDDL(outputSchema, schemaName, \"/tmp/dummy\", Optional.<String>absent(),\n        Optional.<Map<String, String>>absent(), Optional.<List<String>>absent(),\n        Optional.<Map<String, HiveAvroORCQueryGenerator.COLUMN_SORT_ORDER>>absent(), Optional.<Integer>absent(),\n        Optional.<String>absent(), Optional.<String>absent(), Optional.<String>absent(),\n        null, isEvolutionEnabled, true, destinationTableMeta, hiveColumns);\n\n    \r\n    Properties tableProperties = new Properties();\n    tableProperties.setProperty(\"random\", \"value\");\n    List<String> generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta, tableProperties);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution disabled\");\n\n    \r\n    destinationTableMeta = Optional.absent();\n    generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta, tableProperties);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution disabled\");\n  }\n","date":"2019-12-19 02:38:41","endLine":274,"groupId":"101696","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testEvolutionDisabledGenerateEvolutionDDL","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2e/a51859bb1284ba80749f35bd1ce06a4a7efd48.src","preCode":"  public void testEvolutionDisabledGenerateEvolutionDDL() {\n    String orcStagingTableName = schemaName + \"_staging\";\n    String orcTableName = schemaName;\n    boolean isEvolutionEnabled = false;\n    Optional<Table> destinationTableMeta = createEvolvedDestinationTable(schemaName, \"default\", \"\", true);\n    Map<String, String> hiveColumns = new HashMap<>();\n\n    \r\n    HiveAvroORCQueryGenerator.generateCreateTableDDL(outputSchema, schemaName, \"/tmp/dummy\", Optional.<String>absent(),\n        Optional.<Map<String, String>>absent(), Optional.<List<String>>absent(),\n        Optional.<Map<String, HiveAvroORCQueryGenerator.COLUMN_SORT_ORDER>>absent(), Optional.<Integer>absent(),\n        Optional.<String>absent(), Optional.<String>absent(), Optional.<String>absent(),\n        null, isEvolutionEnabled, destinationTableMeta, hiveColumns);\n\n    \r\n    List<String> generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution disabled\");\n\n    \r\n    destinationTableMeta = Optional.absent();\n    generateEvolutionDDL = HiveAvroORCQueryGenerator\n        .generateEvolutionDDL(orcStagingTableName, orcTableName, Optional.of(hiveDbName), Optional.of(hiveDbName),\n            outputSchema, isEvolutionEnabled, hiveColumns, destinationTableMeta);\n    \r\n    Assert.assertEquals(generateEvolutionDDL.size(), 0,\n        \"Generated evolution DDL did not match for evolution disabled\");\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/conversion/hive/converter/HiveSchemaEvolutionTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"9fc44bca542754a6e865010c67eda1b6e4cfe0e8","commitMessage":"@@@[GOBBLIN-1006] Enable configurable case-preserving and schema source-of-truth in table level properties\n\nCloses #2851 from autumnust/enhaceA2OSchemaSupport\n","date":"2019-12-19 02:38:41","modifiedFileCount":"10","status":"M","submitter":"autumnust"}]
