[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testIntersect() throws IOException {\n    Properties props = new Properties();\n\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"1\",\n        ContainsARetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"2\",\n        ContainsBRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"3\",\n        ContainsCRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.DELETE_SETS_COMBINE_OPERATION,\n        CombineRetentionPolicy.DeletableCombineOperation.INTERSECT.name());\n\n    CombineRetentionPolicy policy = new CombineRetentionPolicy(props);\n\n    Collection<DatasetVersion> deletableVersions = policy.listDeletableVersions(Lists\n            .<DatasetVersion>newArrayList(new StringDatasetVersion(\"a\", new Path(\"/\")),\n                new StringDatasetVersion(\"abc\", new Path(\"/\")), new StringDatasetVersion(\"abcd\", new Path(\"/\")),\n                new StringDatasetVersion(\"bc\", new Path(\"/\")), new StringDatasetVersion(\"d\", new Path(\"/\"))));\n\n    Set<String> actualDeletableVersions = Sets\n        .newHashSet(Iterables.transform(deletableVersions, new Function<DatasetVersion, String>() {\n          @Nullable @Override public String apply(DatasetVersion input) {\n            return ((StringDatasetVersion) input).getVersion();\n          }\n        }));\n\n    Assert.assertEquals(policy.versionClass(), StringDatasetVersion.class);\n    Assert.assertEquals(deletableVersions.size(), 2);\n    Assert.assertEquals(actualDeletableVersions, Sets.newHashSet(\"abcd\", \"abc\"));\n\n  }\n","date":"2017-07-31 15:51:25","endLine":78,"groupId":"255","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntersect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b4/41ed966d81cde6a9065e305206e98e74864650.src","preCode":"  public void testIntersect() throws IOException {\n    Properties props = new Properties();\n\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"1\",\n        ContainsARetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"2\",\n        ContainsBRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"3\",\n        ContainsCRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.DELETE_SETS_COMBINE_OPERATION,\n        CombineRetentionPolicy.DeletableCombineOperation.INTERSECT.name());\n\n    CombineRetentionPolicy policy = new CombineRetentionPolicy(props);\n\n    Collection<DatasetVersion> deletableVersions = policy.listDeletableVersions(Lists\n            .<DatasetVersion>newArrayList(new StringDatasetVersion(\"a\", new Path(\"/\")),\n                new StringDatasetVersion(\"abc\", new Path(\"/\")), new StringDatasetVersion(\"abcd\", new Path(\"/\")),\n                new StringDatasetVersion(\"bc\", new Path(\"/\")), new StringDatasetVersion(\"d\", new Path(\"/\"))));\n\n    Set<String> actualDeletableVersions = Sets\n        .newHashSet(Iterables.transform(deletableVersions, new Function<DatasetVersion, String>() {\n          @Nullable @Override public String apply(DatasetVersion input) {\n            return ((StringDatasetVersion) input).getVersion();\n          }\n        }));\n\n    Assert.assertEquals(policy.versionClass(), StringDatasetVersion.class);\n    Assert.assertEquals(deletableVersions.size(), 2);\n    Assert.assertEquals(actualDeletableVersions, Sets.newHashSet(\"abcd\", \"abc\"));\n\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/retention/CombineRetentionPolicyTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testUnion() throws IOException {\n    Properties props = new Properties();\n\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"1\",\n        ContainsARetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"2\",\n        ContainsBRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"3\",\n        ContainsCRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.DELETE_SETS_COMBINE_OPERATION,\n        CombineRetentionPolicy.DeletableCombineOperation.UNION.name());\n\n    CombineRetentionPolicy policy = new CombineRetentionPolicy(props);\n\n    Collection<DatasetVersion> deletableVersions = policy.listDeletableVersions(Lists\n        .<DatasetVersion>newArrayList(new StringDatasetVersion(\"a\", new Path(\"/\")),\n            new StringDatasetVersion(\"abc\", new Path(\"/\")), new StringDatasetVersion(\"abcd\", new Path(\"/\")),\n            new StringDatasetVersion(\"bc\", new Path(\"/\")), new StringDatasetVersion(\"d\", new Path(\"/\"))));\n\n    Set<String> actualDeletableVersions = Sets\n        .newHashSet(Iterables.transform(deletableVersions, new Function<DatasetVersion, String>() {\n          @Nullable @Override public String apply(DatasetVersion input) {\n            return ((StringDatasetVersion) input).getVersion();\n          }\n        }));\n\n    Assert.assertEquals(deletableVersions.size(), 4);\n    Assert.assertEquals(actualDeletableVersions, Sets.newHashSet(\"abcd\", \"abc\", \"a\", \"bc\"));\n\n  }\n","date":"2017-07-31 15:51:25","endLine":110,"groupId":"2910","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b4/41ed966d81cde6a9065e305206e98e74864650.src","preCode":"  public void testUnion() throws IOException {\n    Properties props = new Properties();\n\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"1\",\n        ContainsARetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"2\",\n        ContainsBRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"3\",\n        ContainsCRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.DELETE_SETS_COMBINE_OPERATION,\n        CombineRetentionPolicy.DeletableCombineOperation.UNION.name());\n\n    CombineRetentionPolicy policy = new CombineRetentionPolicy(props);\n\n    Collection<DatasetVersion> deletableVersions = policy.listDeletableVersions(Lists\n        .<DatasetVersion>newArrayList(new StringDatasetVersion(\"a\", new Path(\"/\")),\n            new StringDatasetVersion(\"abc\", new Path(\"/\")), new StringDatasetVersion(\"abcd\", new Path(\"/\")),\n            new StringDatasetVersion(\"bc\", new Path(\"/\")), new StringDatasetVersion(\"d\", new Path(\"/\"))));\n\n    Set<String> actualDeletableVersions = Sets\n        .newHashSet(Iterables.transform(deletableVersions, new Function<DatasetVersion, String>() {\n          @Nullable @Override public String apply(DatasetVersion input) {\n            return ((StringDatasetVersion) input).getVersion();\n          }\n        }));\n\n    Assert.assertEquals(deletableVersions.size(), 4);\n    Assert.assertEquals(actualDeletableVersions, Sets.newHashSet(\"abcd\", \"abc\", \"a\", \"bc\"));\n\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/retention/CombineRetentionPolicyTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2020-10-27 06:43:07","codes":[{"authorDate":"2020-10-27 06:43:07","commitOrder":2,"curCode":"  public void testIntersect() throws IOException {\n    Properties props = new Properties();\n\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"1\",\n        ContainsARetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"2\",\n        ContainsBRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"3\",\n        ContainsCRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.DELETE_SETS_COMBINE_OPERATION,\n        CombineRetentionPolicy.DeletableCombineOperation.INTERSECT.name());\n\n    CombineRetentionPolicy<DatasetVersion> policy = new CombineRetentionPolicy<>(props);\n\n    Collection<DatasetVersion> deletableVersions = policy.listDeletableVersions(Lists\n            .newArrayList(new StringDatasetVersion(\"a\", new Path(\"/\")),\n                new StringDatasetVersion(\"abc\", new Path(\"/\")), new StringDatasetVersion(\"abcd\", new Path(\"/\")),\n                new StringDatasetVersion(\"bc\", new Path(\"/\")), new StringDatasetVersion(\"d\", new Path(\"/\"))));\n\n    Set<String> actualDeletableVersions =\n        deletableVersions.stream().map(input -> ((StringDatasetVersion) input).getVersion()).collect(Collectors.toSet());\n\n    Assert.assertEquals(policy.versionClass(), StringDatasetVersion.class);\n    Assert.assertEquals(deletableVersions.size(), 2);\n    Assert.assertEquals(actualDeletableVersions, Sets.newHashSet(\"abcd\", \"abc\"));\n\n  }\n","date":"2020-10-27 06:43:07","endLine":96,"groupId":"101587","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testIntersect","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/6e/abb06578e90b31f556a7cf2b94d6a104aeeb9a.src","preCode":"  public void testIntersect() throws IOException {\n    Properties props = new Properties();\n\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"1\",\n        ContainsARetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"2\",\n        ContainsBRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"3\",\n        ContainsCRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.DELETE_SETS_COMBINE_OPERATION,\n        CombineRetentionPolicy.DeletableCombineOperation.INTERSECT.name());\n\n    CombineRetentionPolicy policy = new CombineRetentionPolicy(props);\n\n    Collection<DatasetVersion> deletableVersions = policy.listDeletableVersions(Lists\n            .<DatasetVersion>newArrayList(new StringDatasetVersion(\"a\", new Path(\"/\")),\n                new StringDatasetVersion(\"abc\", new Path(\"/\")), new StringDatasetVersion(\"abcd\", new Path(\"/\")),\n                new StringDatasetVersion(\"bc\", new Path(\"/\")), new StringDatasetVersion(\"d\", new Path(\"/\"))));\n\n    Set<String> actualDeletableVersions = Sets\n        .newHashSet(Iterables.transform(deletableVersions, new Function<DatasetVersion, String>() {\n          @Nullable @Override public String apply(DatasetVersion input) {\n            return ((StringDatasetVersion) input).getVersion();\n          }\n        }));\n\n    Assert.assertEquals(policy.versionClass(), StringDatasetVersion.class);\n    Assert.assertEquals(deletableVersions.size(), 2);\n    Assert.assertEquals(actualDeletableVersions, Sets.newHashSet(\"abcd\", \"abc\"));\n\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/retention/CombineRetentionPolicyTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-10-27 06:43:07","commitOrder":2,"curCode":"  public void testUnion() throws IOException {\n    Properties props = new Properties();\n\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"1\",\n        ContainsARetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"2\",\n        ContainsBRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"3\",\n        ContainsCRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.DELETE_SETS_COMBINE_OPERATION,\n        CombineRetentionPolicy.DeletableCombineOperation.UNION.name());\n\n    CombineRetentionPolicy<DatasetVersion> policy = new CombineRetentionPolicy<>(props);\n\n    Collection<DatasetVersion> deletableVersions = policy.listDeletableVersions(Lists\n        .newArrayList(new StringDatasetVersion(\"a\", new Path(\"/\")),\n            new StringDatasetVersion(\"abc\", new Path(\"/\")), new StringDatasetVersion(\"abcd\", new Path(\"/\")),\n            new StringDatasetVersion(\"bc\", new Path(\"/\")), new StringDatasetVersion(\"d\", new Path(\"/\"))));\n\n    Set<String> actualDeletableVersions =\n        deletableVersions.stream().map(input -> ((StringDatasetVersion) input).getVersion())\n            .collect(Collectors.toSet());\n\n    Assert.assertEquals(deletableVersions.size(), 4);\n    Assert.assertEquals(actualDeletableVersions, Sets.newHashSet(\"abcd\", \"abc\", \"a\", \"bc\"));\n\n  }\n","date":"2020-10-27 06:43:07","endLine":125,"groupId":"101587","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testUnion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/6e/abb06578e90b31f556a7cf2b94d6a104aeeb9a.src","preCode":"  public void testUnion() throws IOException {\n    Properties props = new Properties();\n\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"1\",\n        ContainsARetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"2\",\n        ContainsBRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.RETENTION_POLICIES_PREFIX + \"3\",\n        ContainsCRetentionPolicy.class.getCanonicalName());\n    props.setProperty(CombineRetentionPolicy.DELETE_SETS_COMBINE_OPERATION,\n        CombineRetentionPolicy.DeletableCombineOperation.UNION.name());\n\n    CombineRetentionPolicy policy = new CombineRetentionPolicy(props);\n\n    Collection<DatasetVersion> deletableVersions = policy.listDeletableVersions(Lists\n        .<DatasetVersion>newArrayList(new StringDatasetVersion(\"a\", new Path(\"/\")),\n            new StringDatasetVersion(\"abc\", new Path(\"/\")), new StringDatasetVersion(\"abcd\", new Path(\"/\")),\n            new StringDatasetVersion(\"bc\", new Path(\"/\")), new StringDatasetVersion(\"d\", new Path(\"/\"))));\n\n    Set<String> actualDeletableVersions = Sets\n        .newHashSet(Iterables.transform(deletableVersions, new Function<DatasetVersion, String>() {\n          @Nullable @Override public String apply(DatasetVersion input) {\n            return ((StringDatasetVersion) input).getVersion();\n          }\n        }));\n\n    Assert.assertEquals(deletableVersions.size(), 4);\n    Assert.assertEquals(actualDeletableVersions, Sets.newHashSet(\"abcd\", \"abc\", \"a\", \"bc\"));\n\n  }\n","realPath":"gobblin-data-management/src/test/java/org/apache/gobblin/data/management/retention/CombineRetentionPolicyTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"bf3357f7502017d68e974256cdd5b086bdfc8bc5","commitMessage":"@@@[GOBBLIN-1302] add COMBINE_RETENTION_POLICIES config\n\nCloses #3140 from\narjun4084346/combineRetentionPolicyConfigs\n","date":"2020-10-27 06:43:07","modifiedFileCount":"10","status":"M","submitter":"Arjun"}]
