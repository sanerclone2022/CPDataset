[{"authorTime":"2017-11-30 06:15:32","codes":[{"authorDate":"2017-11-30 06:15:32","commitOrder":1,"curCode":"  public void testComputeTime() throws DataRecordException, IOException {\n    final int MEM_ALLOC_BYTES = 100;\n    final int NUM_WORK_UNITS = 1;\n    final int COMPUTE_TIME_MICRO = 10000;\n    final int NUM_RECORDS = 500;\n\n    SourceState state = new SourceState();\n    state.setProp(StressTestingSource.NUM_WORK_UNITS_KEY, NUM_WORK_UNITS);\n    state.setProp(StressTestingSource.MEM_ALLOC_BYTES_KEY, MEM_ALLOC_BYTES);\n    state.setProp(StressTestingSource.COMPUTE_TIME_MICRO_KEY, COMPUTE_TIME_MICRO);\n    state.setProp(StressTestingSource.NUM_RECORDS_KEY, NUM_RECORDS);\n\n    StressTestingSource source = new StressTestingSource();\n\n    List<WorkUnit> wus = source.getWorkunits(state);\n    Assert.assertEquals(wus.size(), NUM_WORK_UNITS);\n\n    WorkUnit wu = wus.get(0);\n    WorkUnitState wuState = new WorkUnitState(wu, state);\n    Extractor<String, byte[]> extractor = source.getExtractor(wuState);\n\n    byte[] record;\n    long startTimeNano = System.nanoTime();\n    while ((record = extractor.readRecord(null)) != null) {\n      Assert.assertEquals(record.length, 100);\n    }\n    long endTimeNano = System.nanoTime();\n\n    long timeSpentMicro = (endTimeNano - startTimeNano)/(1000);\n    \r\n    Assert.assertTrue(Math.abs(timeSpentMicro - (COMPUTE_TIME_MICRO * NUM_RECORDS)) < (2000000));\n  }\n","date":"2017-11-30 06:15:32","endLine":97,"groupId":"722","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testComputeTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/aa/d8a3abaf4eb40e7c5196f7df0b969317db76f4.src","preCode":"  public void testComputeTime() throws DataRecordException, IOException {\n    final int MEM_ALLOC_BYTES = 100;\n    final int NUM_WORK_UNITS = 1;\n    final int COMPUTE_TIME_MICRO = 10000;\n    final int NUM_RECORDS = 500;\n\n    SourceState state = new SourceState();\n    state.setProp(StressTestingSource.NUM_WORK_UNITS_KEY, NUM_WORK_UNITS);\n    state.setProp(StressTestingSource.MEM_ALLOC_BYTES_KEY, MEM_ALLOC_BYTES);\n    state.setProp(StressTestingSource.COMPUTE_TIME_MICRO_KEY, COMPUTE_TIME_MICRO);\n    state.setProp(StressTestingSource.NUM_RECORDS_KEY, NUM_RECORDS);\n\n    StressTestingSource source = new StressTestingSource();\n\n    List<WorkUnit> wus = source.getWorkunits(state);\n    Assert.assertEquals(wus.size(), NUM_WORK_UNITS);\n\n    WorkUnit wu = wus.get(0);\n    WorkUnitState wuState = new WorkUnitState(wu, state);\n    Extractor<String, byte[]> extractor = source.getExtractor(wuState);\n\n    byte[] record;\n    long startTimeNano = System.nanoTime();\n    while ((record = extractor.readRecord(null)) != null) {\n      Assert.assertEquals(record.length, 100);\n    }\n    long endTimeNano = System.nanoTime();\n\n    long timeSpentMicro = (endTimeNano - startTimeNano)/(1000);\n    \r\n    Assert.assertTrue(Math.abs(timeSpentMicro - (COMPUTE_TIME_MICRO * NUM_RECORDS)) < (2000000));\n  }\n","realPath":"gobblin-utility/src/test/java/org/apache/gobblin/util/test/TestStressTestingSource.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"},{"authorDate":"2017-11-30 06:15:32","commitOrder":1,"curCode":"  public void testRunDuration() throws DataRecordException, IOException {\n    final int MEM_ALLOC_BYTES = 100;\n    final int NUM_WORK_UNITS = 1;\n    final int SLEEP_TIME_MICRO = 1000;\n    final int NUM_RECORDS = 30; \r\n    final int RUN_DURATION_SECS = 5;\n\n    SourceState state = new SourceState();\n    state.setProp(StressTestingSource.NUM_WORK_UNITS_KEY, NUM_WORK_UNITS);\n    state.setProp(StressTestingSource.MEM_ALLOC_BYTES_KEY, MEM_ALLOC_BYTES);\n    state.setProp(StressTestingSource.SLEEP_TIME_MICRO_KEY, SLEEP_TIME_MICRO);\n    state.setProp(StressTestingSource.NUM_RECORDS_KEY, NUM_RECORDS);\n    state.setProp(StressTestingSource.RUN_DURATION_KEY, RUN_DURATION_SECS);\n\n    StressTestingSource source = new StressTestingSource();\n\n    List<WorkUnit> wus = source.getWorkunits(state);\n    Assert.assertEquals(wus.size(), NUM_WORK_UNITS);\n\n    WorkUnit wu = wus.get(0);\n    WorkUnitState wuState = new WorkUnitState(wu, state);\n    Extractor<String, byte[]> extractor = source.getExtractor(wuState);\n\n    byte[] record;\n    long startTimeNano = System.nanoTime();\n    while ((record = extractor.readRecord(null)) != null) {\n      Assert.assertEquals(record.length, 100);\n    }\n    long endTimeNano = System.nanoTime();\n\n    long timeSpentMicro = (endTimeNano - startTimeNano)/(1000);\n    \r\n    Assert.assertTrue(Math.abs(timeSpentMicro - (RUN_DURATION_SECS * 1000000)) < (1000000));\n  }\n","date":"2017-11-30 06:15:32","endLine":167,"groupId":"722","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunDuration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/aa/d8a3abaf4eb40e7c5196f7df0b969317db76f4.src","preCode":"  public void testRunDuration() throws DataRecordException, IOException {\n    final int MEM_ALLOC_BYTES = 100;\n    final int NUM_WORK_UNITS = 1;\n    final int SLEEP_TIME_MICRO = 1000;\n    final int NUM_RECORDS = 30; \r\n    final int RUN_DURATION_SECS = 5;\n\n    SourceState state = new SourceState();\n    state.setProp(StressTestingSource.NUM_WORK_UNITS_KEY, NUM_WORK_UNITS);\n    state.setProp(StressTestingSource.MEM_ALLOC_BYTES_KEY, MEM_ALLOC_BYTES);\n    state.setProp(StressTestingSource.SLEEP_TIME_MICRO_KEY, SLEEP_TIME_MICRO);\n    state.setProp(StressTestingSource.NUM_RECORDS_KEY, NUM_RECORDS);\n    state.setProp(StressTestingSource.RUN_DURATION_KEY, RUN_DURATION_SECS);\n\n    StressTestingSource source = new StressTestingSource();\n\n    List<WorkUnit> wus = source.getWorkunits(state);\n    Assert.assertEquals(wus.size(), NUM_WORK_UNITS);\n\n    WorkUnit wu = wus.get(0);\n    WorkUnitState wuState = new WorkUnitState(wu, state);\n    Extractor<String, byte[]> extractor = source.getExtractor(wuState);\n\n    byte[] record;\n    long startTimeNano = System.nanoTime();\n    while ((record = extractor.readRecord(null)) != null) {\n      Assert.assertEquals(record.length, 100);\n    }\n    long endTimeNano = System.nanoTime();\n\n    long timeSpentMicro = (endTimeNano - startTimeNano)/(1000);\n    \r\n    Assert.assertTrue(Math.abs(timeSpentMicro - (RUN_DURATION_SECS * 1000000)) < (1000000));\n  }\n","realPath":"gobblin-utility/src/test/java/org/apache/gobblin/util/test/TestStressTestingSource.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"B"}],"commitId":"55689d284dacd6a60c019d1f52fd208ea0746537","commitMessage":"@@@[GOBBLIN-325] Add a Source and Extractor for stress testing\n\n* Configurable sleep time per record\n* Configurable compute time per record\n* Run duration or record count limit per extractor\n\nCloses #2177 from htran1/stress_test_extractor\n","date":"2017-11-30 06:15:32","modifiedFileCount":"0","status":"B","submitter":"Hung Tran"},{"authorTime":"2018-01-24 12:23:20","codes":[{"authorDate":"2018-01-24 12:23:20","commitOrder":2,"curCode":"  public void testComputeTime() throws DataRecordException, IOException {\n    final int MEM_ALLOC_BYTES = 100;\n    final int NUM_WORK_UNITS = 1;\n    final int COMPUTE_TIME_MICRO = 10000;\n    final int NUM_RECORDS = 500;\n\n    SourceState state = new SourceState();\n    state.setProp(StressTestingSource.NUM_WORK_UNITS_KEY, NUM_WORK_UNITS);\n    state.setProp(StressTestingSource.MEM_ALLOC_BYTES_KEY, MEM_ALLOC_BYTES);\n    state.setProp(StressTestingSource.COMPUTE_TIME_MICRO_KEY, COMPUTE_TIME_MICRO);\n    state.setProp(StressTestingSource.NUM_RECORDS_KEY, NUM_RECORDS);\n\n    StressTestingSource source = new StressTestingSource();\n\n    List<WorkUnit> wus = source.getWorkunits(state);\n    Assert.assertEquals(wus.size(), NUM_WORK_UNITS);\n\n    WorkUnit wu = wus.get(0);\n    WorkUnitState wuState = new WorkUnitState(wu, state);\n    Extractor<String, byte[]> extractor = source.getExtractor(wuState);\n\n    byte[] record;\n    long startTimeNano = System.nanoTime();\n    while ((record = extractor.readRecord(null)) != null) {\n      Assert.assertEquals(record.length, 100);\n    }\n    long endTimeNano = System.nanoTime();\n\n    long timeSpentMicro = (endTimeNano - startTimeNano)/(1000);\n    \r\n    Assert.assertTrue(Math.abs(timeSpentMicro - (COMPUTE_TIME_MICRO * NUM_RECORDS)) < (5000000),\n        \"Time spent \" + timeSpentMicro);\n  }\n","date":"2018-01-24 12:23:20","endLine":98,"groupId":"10966","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testComputeTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/04/0d69bf1ea020f9c20c0342943cef2408d69821.src","preCode":"  public void testComputeTime() throws DataRecordException, IOException {\n    final int MEM_ALLOC_BYTES = 100;\n    final int NUM_WORK_UNITS = 1;\n    final int COMPUTE_TIME_MICRO = 10000;\n    final int NUM_RECORDS = 500;\n\n    SourceState state = new SourceState();\n    state.setProp(StressTestingSource.NUM_WORK_UNITS_KEY, NUM_WORK_UNITS);\n    state.setProp(StressTestingSource.MEM_ALLOC_BYTES_KEY, MEM_ALLOC_BYTES);\n    state.setProp(StressTestingSource.COMPUTE_TIME_MICRO_KEY, COMPUTE_TIME_MICRO);\n    state.setProp(StressTestingSource.NUM_RECORDS_KEY, NUM_RECORDS);\n\n    StressTestingSource source = new StressTestingSource();\n\n    List<WorkUnit> wus = source.getWorkunits(state);\n    Assert.assertEquals(wus.size(), NUM_WORK_UNITS);\n\n    WorkUnit wu = wus.get(0);\n    WorkUnitState wuState = new WorkUnitState(wu, state);\n    Extractor<String, byte[]> extractor = source.getExtractor(wuState);\n\n    byte[] record;\n    long startTimeNano = System.nanoTime();\n    while ((record = extractor.readRecord(null)) != null) {\n      Assert.assertEquals(record.length, 100);\n    }\n    long endTimeNano = System.nanoTime();\n\n    long timeSpentMicro = (endTimeNano - startTimeNano)/(1000);\n    \r\n    Assert.assertTrue(Math.abs(timeSpentMicro - (COMPUTE_TIME_MICRO * NUM_RECORDS)) < (2000000));\n  }\n","realPath":"gobblin-utility/src/test/java/org/apache/gobblin/util/test/TestStressTestingSource.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2018-01-24 12:23:20","commitOrder":2,"curCode":"  public void testRunDuration() throws DataRecordException, IOException {\n    final int MEM_ALLOC_BYTES = 100;\n    final int NUM_WORK_UNITS = 1;\n    final int SLEEP_TIME_MICRO = 1000;\n    final int NUM_RECORDS = 30; \r\n    final int RUN_DURATION_SECS = 5;\n\n    SourceState state = new SourceState();\n    state.setProp(StressTestingSource.NUM_WORK_UNITS_KEY, NUM_WORK_UNITS);\n    state.setProp(StressTestingSource.MEM_ALLOC_BYTES_KEY, MEM_ALLOC_BYTES);\n    state.setProp(StressTestingSource.SLEEP_TIME_MICRO_KEY, SLEEP_TIME_MICRO);\n    state.setProp(StressTestingSource.NUM_RECORDS_KEY, NUM_RECORDS);\n    state.setProp(StressTestingSource.RUN_DURATION_KEY, RUN_DURATION_SECS);\n\n    StressTestingSource source = new StressTestingSource();\n\n    List<WorkUnit> wus = source.getWorkunits(state);\n    Assert.assertEquals(wus.size(), NUM_WORK_UNITS);\n\n    WorkUnit wu = wus.get(0);\n    WorkUnitState wuState = new WorkUnitState(wu, state);\n    Extractor<String, byte[]> extractor = source.getExtractor(wuState);\n\n    byte[] record;\n    long startTimeNano = System.nanoTime();\n    while ((record = extractor.readRecord(null)) != null) {\n      Assert.assertEquals(record.length, 100);\n    }\n    long endTimeNano = System.nanoTime();\n\n    long timeSpentMicro = (endTimeNano - startTimeNano)/(1000);\n    \r\n    Assert.assertTrue(Math.abs(timeSpentMicro - (RUN_DURATION_SECS * 1000000)) < (1000000),\n        \"Time spent \" + timeSpentMicro);\n  }\n","date":"2018-01-24 12:23:20","endLine":170,"groupId":"10966","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRunDuration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/04/0d69bf1ea020f9c20c0342943cef2408d69821.src","preCode":"  public void testRunDuration() throws DataRecordException, IOException {\n    final int MEM_ALLOC_BYTES = 100;\n    final int NUM_WORK_UNITS = 1;\n    final int SLEEP_TIME_MICRO = 1000;\n    final int NUM_RECORDS = 30; \r\n    final int RUN_DURATION_SECS = 5;\n\n    SourceState state = new SourceState();\n    state.setProp(StressTestingSource.NUM_WORK_UNITS_KEY, NUM_WORK_UNITS);\n    state.setProp(StressTestingSource.MEM_ALLOC_BYTES_KEY, MEM_ALLOC_BYTES);\n    state.setProp(StressTestingSource.SLEEP_TIME_MICRO_KEY, SLEEP_TIME_MICRO);\n    state.setProp(StressTestingSource.NUM_RECORDS_KEY, NUM_RECORDS);\n    state.setProp(StressTestingSource.RUN_DURATION_KEY, RUN_DURATION_SECS);\n\n    StressTestingSource source = new StressTestingSource();\n\n    List<WorkUnit> wus = source.getWorkunits(state);\n    Assert.assertEquals(wus.size(), NUM_WORK_UNITS);\n\n    WorkUnit wu = wus.get(0);\n    WorkUnitState wuState = new WorkUnitState(wu, state);\n    Extractor<String, byte[]> extractor = source.getExtractor(wuState);\n\n    byte[] record;\n    long startTimeNano = System.nanoTime();\n    while ((record = extractor.readRecord(null)) != null) {\n      Assert.assertEquals(record.length, 100);\n    }\n    long endTimeNano = System.nanoTime();\n\n    long timeSpentMicro = (endTimeNano - startTimeNano)/(1000);\n    \r\n    Assert.assertTrue(Math.abs(timeSpentMicro - (RUN_DURATION_SECS * 1000000)) < (1000000));\n  }\n","realPath":"gobblin-utility/src/test/java/org/apache/gobblin/util/test/TestStressTestingSource.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"}],"commitId":"f2f6e468536bf3f0d79a3c126f620ac0741df65d","commitMessage":"@@@[GOBBLIN-382] Support storing job.state file in mysql state store for standalone cluster\n\nCloses #2262 from htran1/cluster_job_state_store\n","date":"2018-01-24 12:23:20","modifiedFileCount":"11","status":"M","submitter":"Hung Tran"}]
