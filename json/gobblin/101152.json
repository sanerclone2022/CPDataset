[{"authorTime":"2019-03-06 13:05:43","codes":[{"authorDate":"2018-12-06 07:30:19","commitOrder":7,"curCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String source = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY, \"\");\n      String destination = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY, \"\");\n\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, source, destination);\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(FSFlowCatalog.JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","date":"2018-12-06 07:30:19","endLine":128,"groupId":"429","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildJobSpec","params":"(FlowSpecflowSpec@ConfigjobConfig@LongflowExecutionId@ConfigsysConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/6d/6259177560d412fc1deea16cccd63304ecf3f9.src","preCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String source = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY, \"\");\n      String destination = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY, \"\");\n\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, source, destination);\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(FSFlowCatalog.JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/spec/JobExecutionPlan.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"NB"},{"authorDate":"2019-03-06 13:05:43","commitOrder":7,"curCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","date":"2019-03-06 13:05:43","endLine":86,"groupId":"4553","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getFullyQualifiedJobName","params":"(DagNode<JobExecutionPlan>dagNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/00/44c2bea0230e2895670097da4303a1a24e466b.src","preCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/orchestration/DagManagerUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"}],"commitId":"151fe143a566060e5f25bbda56f1efd94fd181e1","commitMessage":"@@@[GOBBLIN-698] Enhance logging to print job and flow details when a job?\n\nCloses #2569 from sv2000/logging\n","date":"2019-03-06 13:05:43","modifiedFileCount":"2","status":"M","submitter":"suvasude"},{"authorTime":"2019-03-06 13:05:43","codes":[{"authorDate":"2019-04-25 05:49:54","commitOrder":8,"curCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String source = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY, \"\");\n      String destination = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY, \"\");\n\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, source, destination);\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(FSFlowTemplateCatalog.JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","date":"2019-04-25 05:49:54","endLine":128,"groupId":"429","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildJobSpec","params":"(FlowSpecflowSpec@ConfigjobConfig@LongflowExecutionId@ConfigsysConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/45/e65bc7265d1162ad45cb2c67073d18818aa5fe.src","preCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String source = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY, \"\");\n      String destination = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY, \"\");\n\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, source, destination);\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(FSFlowCatalog.JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/spec/JobExecutionPlan.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2019-03-06 13:05:43","commitOrder":8,"curCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","date":"2019-03-06 13:05:43","endLine":86,"groupId":"4553","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getFullyQualifiedJobName","params":"(DagNode<JobExecutionPlan>dagNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/00/44c2bea0230e2895670097da4303a1a24e466b.src","preCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/orchestration/DagManagerUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"9661916684d466edf6ae499800a252c108bb9aa2","commitMessage":"@@@[GOBBLIN-748] Craftsmanship code cleaning in Gobblin Service Code\n\nDear Gobblin maintainers. \n\nPlease accept this PR. I understand that it will\nnot be reviewed until I have checked off all the\nsteps below!\n\nEssentially a bunch of renaming.  moving\nconfigurations key around.\nThings that we should agree on:\n- Configuration keys should always placed in the\nclass where they are relevant.  instead of\n`ConfigurationKeys.java` or similar things. We\nshould definitely stop doing that.\n- Naming of `FSFlowCatalog` is misleading. In fact\nit should be `FsTemplateFlowCatalog`. Also.  it\nshould not extend `FsJobCatalog`. The missing\npiece is a `FsCatalogBase`  that implement all\nFileSystem related basic functionality.  and have\n`Template` and `Job` FsCatalog extending that base\nimplementation with it own interface.\n\n\n JIRA\n- [x ] My PR addresses the following [Gobblin\nJIRA]\n    -\nhttps://issues.apache.org/jira/browse/GOBBLIN-748\n\n\n Description\n- [ x] Here are some details about my PR. \nincluding screenshots (if applicable):\n\n\n Tests\n- [ ] My PR adds the following unit tests __OR__\ndoes not need testing for this extremely good\nreason:\n\n\n Commits\n- [ ] My commits all reference JIRA issues in\ntheir subject lines.  and I have squashed multiple\ncommits if they address the same issue. In\naddition.  my commits follow the guidelines from\n\"[How to write a good git commit\nmessage](http://chris.beams.io/posts/git-\ncommit/)\":\n    1. Subject is separated from body by a blank line\n    2. Subject is limited to 50 characters\n    3. Subject does not end with a period\n    4. Subject uses the imperative mood (\"add\".  not\n\"adding\")\n    5. Body wraps at 72 characters\n    6. Body explains \"what\" and \"why\".  not \"how\"\n\nSome naive code changes made while reading through\nGaaS code: There are some work needs to be done\nfor understand master/slave interaction\n\nAdding some documentation and renaming stuff\n\nAddress comments\n\nResolving conflicts\n\nCloses #2613 from\nautumnust/craftsmanshipCleaningGaaS\n","date":"2019-04-25 05:49:54","modifiedFileCount":"26","status":"M","submitter":"autumnust"},{"authorTime":"2019-03-06 13:05:43","codes":[{"authorDate":"2019-06-18 02:08:10","commitOrder":9,"curCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String source = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY, \"\");\n      String destination = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY, \"\");\n\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, source, destination);\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(FSFlowTemplateCatalog.JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      DynamicConfigGenerator dynamicConfigGenerator = DynamicConfigGeneratorFactory.createDynamicConfigGenerator(sysConfig);\n      Config dynamicConfig = dynamicConfigGenerator.generateDynamicConfig(jobSpec.getConfig().withFallback(sysConfig));\n      jobSpec.setConfig(jobSpec.getConfig().withFallback(dynamicConfig));\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","date":"2019-06-18 02:08:10","endLine":139,"groupId":"429","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"buildJobSpec","params":"(FlowSpecflowSpec@ConfigjobConfig@LongflowExecutionId@ConfigsysConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/bb/7955f86c779e05d63b067814dd7eaa6f3f8f40.src","preCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String source = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY, \"\");\n      String destination = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY, \"\");\n\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, source, destination);\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(FSFlowTemplateCatalog.JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/spec/JobExecutionPlan.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2019-03-06 13:05:43","commitOrder":9,"curCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","date":"2019-03-06 13:05:43","endLine":86,"groupId":"4553","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getFullyQualifiedJobName","params":"(DagNode<JobExecutionPlan>dagNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/00/44c2bea0230e2895670097da4303a1a24e466b.src","preCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/orchestration/DagManagerUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"7b75aa10e49db2479458aeaf81d0e233af2c186a","commitMessage":"@@@[GOBBLIN-782] Add dynamic config to JobSpec\n\nCloses #2645 from jack-moseley/gaas-inject-\nproperty\n","date":"2019-06-18 02:08:10","modifiedFileCount":"1","status":"M","submitter":"Jack Moseley"},{"authorTime":"2019-03-06 13:05:43","codes":[{"authorDate":"2019-07-16 01:53:15","commitOrder":10,"curCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String edgeId = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"\");\n\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, edgeId);\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(FSFlowTemplateCatalog.JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      DynamicConfigGenerator dynamicConfigGenerator = DynamicConfigGeneratorFactory.createDynamicConfigGenerator(sysConfig);\n      Config dynamicConfig = dynamicConfigGenerator.generateDynamicConfig(jobSpec.getConfig().withFallback(sysConfig));\n      jobSpec.setConfig(jobSpec.getConfig().withFallback(dynamicConfig));\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","date":"2019-07-16 01:53:15","endLine":138,"groupId":"429","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"buildJobSpec","params":"(FlowSpecflowSpec@ConfigjobConfig@LongflowExecutionId@ConfigsysConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d0/ec90187d51269bc6b15746d94b70d8112b753a.src","preCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String source = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_SOURCE_KEY, \"\");\n      String destination = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_DESTINATION_KEY, \"\");\n\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, source, destination);\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(FSFlowTemplateCatalog.JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      DynamicConfigGenerator dynamicConfigGenerator = DynamicConfigGeneratorFactory.createDynamicConfigGenerator(sysConfig);\n      Config dynamicConfig = dynamicConfigGenerator.generateDynamicConfig(jobSpec.getConfig().withFallback(sysConfig));\n      jobSpec.setConfig(jobSpec.getConfig().withFallback(dynamicConfig));\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/spec/JobExecutionPlan.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2019-03-06 13:05:43","commitOrder":10,"curCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","date":"2019-03-06 13:05:43","endLine":86,"groupId":"4553","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getFullyQualifiedJobName","params":"(DagNode<JobExecutionPlan>dagNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/00/44c2bea0230e2895670097da4303a1a24e466b.src","preCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/orchestration/DagManagerUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"86515b99fac8d4dd12ca99c79674f0faf572736f","commitMessage":"@@@[GOBBLIN-810] Include flow edge ID in job name\n\nCloses #2675 from jack-moseley/job-name-conflict\n","date":"2019-07-16 01:53:15","modifiedFileCount":"5","status":"M","submitter":"Jack Moseley"},{"authorTime":"2019-03-06 13:05:43","codes":[{"authorDate":"2019-07-19 05:55:08","commitOrder":11,"curCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String edgeId = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"\");\n\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, edgeId);\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(FSFlowTemplateCatalog.JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      DynamicConfigGenerator dynamicConfigGenerator = DynamicConfigGeneratorFactory.createDynamicConfigGenerator(sysConfig);\n      Config dynamicConfig = dynamicConfigGenerator.generateDynamicConfig(jobSpec.getConfig().withFallback(sysConfig));\n      jobSpec.setConfig(dynamicConfig.withFallback(jobSpec.getConfig()));\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","date":"2019-07-19 05:55:08","endLine":138,"groupId":"429","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"buildJobSpec","params":"(FlowSpecflowSpec@ConfigjobConfig@LongflowExecutionId@ConfigsysConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/48/5f55524133803d1e6217d959ee6af8155ad2c0.src","preCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String edgeId = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"\");\n\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, edgeId);\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(FSFlowTemplateCatalog.JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      DynamicConfigGenerator dynamicConfigGenerator = DynamicConfigGeneratorFactory.createDynamicConfigGenerator(sysConfig);\n      Config dynamicConfig = dynamicConfigGenerator.generateDynamicConfig(jobSpec.getConfig().withFallback(sysConfig));\n      jobSpec.setConfig(jobSpec.getConfig().withFallback(dynamicConfig));\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/spec/JobExecutionPlan.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2019-03-06 13:05:43","commitOrder":11,"curCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","date":"2019-03-06 13:05:43","endLine":86,"groupId":"4553","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getFullyQualifiedJobName","params":"(DagNode<JobExecutionPlan>dagNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/00/44c2bea0230e2895670097da4303a1a24e466b.src","preCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/orchestration/DagManagerUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"86c3a910dbcb15702bbb538444d548268fe19d03","commitMessage":"@@@[GOBBLIN-828] Make dynamic config override job config\n\nCloses #2689 from jack-moseley/dynamic-config\n","date":"2019-07-19 05:55:08","modifiedFileCount":"1","status":"M","submitter":"Jack Moseley"},{"authorTime":"2019-03-06 13:05:43","codes":[{"authorDate":"2019-10-03 01:49:10","commitOrder":12,"curCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n      String flowInputPath = ConfigUtils.getString(flowConfig, DatasetDescriptorConfigKeys.FLOW_INPUT_DATASET_DESCRIPTOR_PREFIX\n          + \".\" + DatasetDescriptorConfigKeys.PATH_KEY, \"\");\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String edgeId = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"\");\n\n      \r\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, edgeId, flowInputPath.hashCode());\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(FSFlowTemplateCatalog.JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      DynamicConfigGenerator dynamicConfigGenerator = DynamicConfigGeneratorFactory.createDynamicConfigGenerator(sysConfig);\n      Config dynamicConfig = dynamicConfigGenerator.generateDynamicConfig(jobSpec.getConfig().withFallback(sysConfig));\n      jobSpec.setConfig(dynamicConfig.withFallback(jobSpec.getConfig()));\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","date":"2019-10-03 01:49:10","endLine":145,"groupId":"429","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"buildJobSpec","params":"(FlowSpecflowSpec@ConfigjobConfig@LongflowExecutionId@ConfigsysConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/82/d2baee2c3f8a6f57475435a18b6fddbdff7f42.src","preCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String edgeId = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"\");\n\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, edgeId);\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(FSFlowTemplateCatalog.JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      DynamicConfigGenerator dynamicConfigGenerator = DynamicConfigGeneratorFactory.createDynamicConfigGenerator(sysConfig);\n      Config dynamicConfig = dynamicConfigGenerator.generateDynamicConfig(jobSpec.getConfig().withFallback(sysConfig));\n      jobSpec.setConfig(dynamicConfig.withFallback(jobSpec.getConfig()));\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/spec/JobExecutionPlan.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"},{"authorDate":"2019-03-06 13:05:43","commitOrder":12,"curCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","date":"2019-03-06 13:05:43","endLine":86,"groupId":"4553","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getFullyQualifiedJobName","params":"(DagNode<JobExecutionPlan>dagNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/00/44c2bea0230e2895670097da4303a1a24e466b.src","preCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/orchestration/DagManagerUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"37078ed6a40f73b2560863e3f73e0e1d67c05c87","commitMessage":"@@@[GOBBLIN-853] Support multiple paths specified in flow config\n\nCloses #2709 from jack-moseley/split-flowspec\n","date":"2019-10-03 01:49:10","modifiedFileCount":"4","status":"M","submitter":"Jack Moseley"},{"authorTime":"2019-03-06 13:05:43","codes":[{"authorDate":"2019-10-31 22:20:48","commitOrder":13,"curCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n      String flowInputPath = ConfigUtils.getString(flowConfig, DatasetDescriptorConfigKeys.FLOW_INPUT_DATASET_DESCRIPTOR_PREFIX\n          + \".\" + DatasetDescriptorConfigKeys.PATH_KEY, \"\");\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String edgeId = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"\");\n\n      \r\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, edgeId, flowInputPath.hashCode());\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(GOBBLIN_JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      DynamicConfigGenerator dynamicConfigGenerator = DynamicConfigGeneratorFactory.createDynamicConfigGenerator(sysConfig);\n      Config dynamicConfig = dynamicConfigGenerator.generateDynamicConfig(jobSpec.getConfig().withFallback(sysConfig));\n      jobSpec.setConfig(dynamicConfig.withFallback(jobSpec.getConfig()));\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","date":"2019-10-31 22:20:48","endLine":146,"groupId":"2693","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"buildJobSpec","params":"(FlowSpecflowSpec@ConfigjobConfig@LongflowExecutionId@ConfigsysConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/02/7bcc65ea7f7046694e3bfaf49eebaa0313091d.src","preCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n      String flowInputPath = ConfigUtils.getString(flowConfig, DatasetDescriptorConfigKeys.FLOW_INPUT_DATASET_DESCRIPTOR_PREFIX\n          + \".\" + DatasetDescriptorConfigKeys.PATH_KEY, \"\");\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String edgeId = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"\");\n\n      \r\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, edgeId, flowInputPath.hashCode());\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(FSFlowTemplateCatalog.JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      DynamicConfigGenerator dynamicConfigGenerator = DynamicConfigGeneratorFactory.createDynamicConfigGenerator(sysConfig);\n      Config dynamicConfig = dynamicConfigGenerator.generateDynamicConfig(jobSpec.getConfig().withFallback(sysConfig));\n      jobSpec.setConfig(dynamicConfig.withFallback(jobSpec.getConfig()));\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/spec/JobExecutionPlan.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2019-03-06 13:05:43","commitOrder":13,"curCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","date":"2019-03-06 13:05:43","endLine":86,"groupId":"4553","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getFullyQualifiedJobName","params":"(DagNode<JobExecutionPlan>dagNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/00/44c2bea0230e2895670097da4303a1a24e466b.src","preCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/orchestration/DagManagerUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"9ee4dcaf66257b6e2926cf1470b16b912cd343ff","commitMessage":"@@@[GOBBLIN-938] Make job-template resolution available in all JobLaunchers\n\nCloses #2787 from autumnust/ETL-9696\n","date":"2019-10-31 22:20:48","modifiedFileCount":"5","status":"M","submitter":"autumnust"},{"authorTime":"2019-03-06 13:05:43","codes":[{"authorDate":"2020-02-11 09:51:55","commitOrder":14,"curCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n      String flowInputPath = ConfigUtils.getString(flowConfig, DatasetDescriptorConfigKeys.FLOW_INPUT_DATASET_DESCRIPTOR_PREFIX\n          + \".\" + DatasetDescriptorConfigKeys.PATH_KEY, \"\");\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String edgeId = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"\");\n\n      \r\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, edgeId, flowInputPath.hashCode());\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(GOBBLIN_JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      addAdditionalConfig(jobSpec, sysConfig);\n\n      \r\n      DynamicConfigGenerator dynamicConfigGenerator = DynamicConfigGeneratorFactory.createDynamicConfigGenerator(sysConfig);\n      Config dynamicConfig = dynamicConfigGenerator.generateDynamicConfig(jobSpec.getConfig().withFallback(sysConfig));\n      jobSpec.setConfig(dynamicConfig.withFallback(jobSpec.getConfig()));\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","date":"2020-02-11 09:51:55","endLine":148,"groupId":"2693","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"buildJobSpec","params":"(FlowSpecflowSpec@ConfigjobConfig@LongflowExecutionId@ConfigsysConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/56/97a641c0fd4dd8dcf05382e98c3d1aa106fdcd.src","preCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n      String flowInputPath = ConfigUtils.getString(flowConfig, DatasetDescriptorConfigKeys.FLOW_INPUT_DATASET_DESCRIPTOR_PREFIX\n          + \".\" + DatasetDescriptorConfigKeys.PATH_KEY, \"\");\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String edgeId = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"\");\n\n      \r\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, edgeId, flowInputPath.hashCode());\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(GOBBLIN_JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      \r\n      DynamicConfigGenerator dynamicConfigGenerator = DynamicConfigGeneratorFactory.createDynamicConfigGenerator(sysConfig);\n      Config dynamicConfig = dynamicConfigGenerator.generateDynamicConfig(jobSpec.getConfig().withFallback(sysConfig));\n      jobSpec.setConfig(dynamicConfig.withFallback(jobSpec.getConfig()));\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/spec/JobExecutionPlan.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2019-03-06 13:05:43","commitOrder":14,"curCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","date":"2019-03-06 13:05:43","endLine":86,"groupId":"4553","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getFullyQualifiedJobName","params":"(DagNode<JobExecutionPlan>dagNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/00/44c2bea0230e2895670097da4303a1a24e466b.src","preCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/orchestration/DagManagerUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"678c8f0538287990f44974bc08d5a8a7f4d4876c","commitMessage":"@@@[GOBBLIN-1041][Gobblin-1041] send metrics for workunit creation time\n\nCloses #2881 from arjun4084346/benchmarking\n","date":"2020-02-11 09:51:55","modifiedFileCount":"6","status":"M","submitter":"Arjun"},{"authorTime":"2019-03-06 13:05:43","codes":[{"authorDate":"2020-09-17 07:39:45","commitOrder":15,"curCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig, Config specExecutorConfig)\n        throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n      String flowInputPath = ConfigUtils.getString(flowConfig, DatasetDescriptorConfigKeys.FLOW_INPUT_DATASET_DESCRIPTOR_PREFIX\n          + \".\" + DatasetDescriptorConfigKeys.PATH_KEY, \"\");\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String edgeId = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"\");\n\n      \r\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, edgeId, flowInputPath.hashCode());\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(GOBBLIN_JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      addAdditionalConfig(jobSpec, sysConfig, specExecutorConfig);\n\n      \r\n      DynamicConfigGenerator dynamicConfigGenerator = DynamicConfigGeneratorFactory.createDynamicConfigGenerator(sysConfig);\n      Config dynamicConfig = dynamicConfigGenerator.generateDynamicConfig(jobSpec.getConfig().withFallback(sysConfig));\n      jobSpec.setConfig(dynamicConfig.withFallback(jobSpec.getConfig()));\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","date":"2020-09-17 07:39:45","endLine":158,"groupId":"101152","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"buildJobSpec","params":"(FlowSpecflowSpec@ConfigjobConfig@LongflowExecutionId@ConfigsysConfig@ConfigspecExecutorConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f8/8b561f0c052717050df8a59f42ff6a54834502.src","preCode":"    private static JobSpec buildJobSpec(FlowSpec flowSpec, Config jobConfig, Long flowExecutionId, Config sysConfig) throws URISyntaxException {\n      Config flowConfig = flowSpec.getConfig();\n\n      String flowName = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n      String flowGroup = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n      String flowFailureOption = ConfigUtils.getString(flowConfig, ConfigurationKeys.FLOW_FAILURE_OPTION, DagManager.DEFAULT_FLOW_FAILURE_OPTION);\n      String flowInputPath = ConfigUtils.getString(flowConfig, DatasetDescriptorConfigKeys.FLOW_INPUT_DATASET_DESCRIPTOR_PREFIX\n          + \".\" + DatasetDescriptorConfigKeys.PATH_KEY, \"\");\n\n      String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n      String edgeId = ConfigUtils.getString(jobConfig, FlowGraphConfigurationKeys.FLOW_EDGE_ID_KEY, \"\");\n\n      \r\n      \r\n      jobName = Joiner.on(JOB_NAME_COMPONENT_SEPARATION_CHAR).join(flowGroup, flowName, jobName, edgeId, flowInputPath.hashCode());\n\n      JobSpec.Builder jobSpecBuilder = JobSpec.builder(jobSpecURIGenerator(flowGroup, jobName, flowSpec)).withConfig(jobConfig)\n          .withDescription(flowSpec.getDescription()).withVersion(flowSpec.getVersion());\n\n      \r\n      URI jobTemplateUri = new URI(jobConfig.getString(ConfigurationKeys.JOB_TEMPLATE_PATH));\n      JobSpec jobSpec = jobSpecBuilder.withTemplate(jobTemplateUri).build();\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.fromAnyRef(flowName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_EXECUTION_ID_KEY, ConfigValueFactory.fromAnyRef(flowExecutionId)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(ConfigurationKeys.JOB_SCHEDULE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withoutPath(GOBBLIN_JOB_TEMPLATE_KEY));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_NAME_KEY, ConfigValueFactory.fromAnyRef(jobName)));\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.JOB_GROUP_KEY, ConfigValueFactory.fromAnyRef(flowGroup)));\n\n      \r\n      jobSpec.setConfig(jobSpec.getConfig().withValue(ConfigurationKeys.FLOW_FAILURE_OPTION,\n          ConfigValueFactory.fromAnyRef(flowFailureOption)));\n\n      \r\n      addTrackingEventConfig(jobSpec, sysConfig);\n\n      addAdditionalConfig(jobSpec, sysConfig);\n\n      \r\n      DynamicConfigGenerator dynamicConfigGenerator = DynamicConfigGeneratorFactory.createDynamicConfigGenerator(sysConfig);\n      Config dynamicConfig = dynamicConfigGenerator.generateDynamicConfig(jobSpec.getConfig().withFallback(sysConfig));\n      jobSpec.setConfig(dynamicConfig.withFallback(jobSpec.getConfig()));\n\n      \r\n      jobSpec.setConfigAsProperties(ConfigUtils.configToProperties(jobSpec.getConfig()));\n\n      return jobSpec;\n    }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/spec/JobExecutionPlan.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2019-03-06 13:05:43","commitOrder":15,"curCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","date":"2019-03-06 13:05:43","endLine":86,"groupId":"101152","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"getFullyQualifiedJobName","params":"(DagNode<JobExecutionPlan>dagNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/00/44c2bea0230e2895670097da4303a1a24e466b.src","preCode":"  static String getFullyQualifiedJobName(DagNode<JobExecutionPlan> dagNode) {\n    Config jobConfig = dagNode.getValue().getJobSpec().getConfig();\n\n    String flowGroup = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_GROUP_KEY, \"\");\n    String flowName = ConfigUtils.getString(jobConfig, ConfigurationKeys.FLOW_NAME_KEY, \"\");\n    Long flowExecutionId = ConfigUtils.getLong(jobConfig, ConfigurationKeys.FLOW_EXECUTION_ID_KEY, 0L);\n    String jobName = ConfigUtils.getString(jobConfig, ConfigurationKeys.JOB_NAME_KEY, \"\");\n\n    return \"(flowGroup: \" + flowGroup + \", flowName: \" + flowName + \", flowExecutionId: \" + flowExecutionId + \", jobName: \" + jobName + \")\";\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/orchestration/DagManagerUtils.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"}],"commitId":"4d921928b9ca35b81ded594bfa8fc1301c6ff9e7","commitMessage":"@@@[GOBBLIN-1230] add option to add spec executor configs to gaas job\n\nCloses #3076 from arjun4084346/gaasmetrics\n","date":"2020-09-17 07:39:45","modifiedFileCount":"4","status":"M","submitter":"Arjun"}]
