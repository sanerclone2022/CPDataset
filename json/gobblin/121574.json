[{"authorTime":"2019-03-15 07:07:35","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  Schema getKeySchema(Job job, Schema topicSchema) throws IOException {\n    Schema keySchema = null;\n    DedupKeyOption dedupKeyOption = getDedupKeyOption();\n    if (dedupKeyOption == DedupKeyOption.ALL) {\n      LOG.info(\"Using all attributes in the schema (except Map, Arrar and Enum fields) for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(topicSchema).get();\n    } else if (dedupKeyOption == DedupKeyOption.KEY) {\n      LOG.info(\"Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n    } else if (keySchemaFileSpecified()) {\n      Path keySchemaFile = getKeySchemaFile();\n      LOG.info(\"Using attributes specified in schema file \" + keySchemaFile + \" for compaction\");\n      try {\n        keySchema = AvroUtils.parseSchemaFromFile(keySchemaFile, this.fs);\n      } catch (IOException e) {\n        LOG.error(\"Failed to parse avro schema from \" + keySchemaFile\n            + \", using key attributes in the schema for compaction\");\n        keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n      }\n      if (!isKeySchemaValid(keySchema, topicSchema)) {\n        LOG.warn(String.format(\"Key schema %s is not compatible with record schema %s.\", keySchema, topicSchema)\n            + \"Using key attributes in the schema for compaction\");\n        keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n      }\n    } else {\n      LOG.info(\"Property \" + COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC\n          + \" not provided. Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n    }\n\n    return keySchema;\n  }\n","date":"2017-07-31 15:51:25","endLine":165,"groupId":"6368","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getKeySchema","params":"(Jobjob@SchematopicSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/00/b67425778085410026949fa315c8ea1c97a972.src","preCode":"  Schema getKeySchema(Job job, Schema topicSchema) throws IOException {\n    Schema keySchema = null;\n    DedupKeyOption dedupKeyOption = getDedupKeyOption();\n    if (dedupKeyOption == DedupKeyOption.ALL) {\n      LOG.info(\"Using all attributes in the schema (except Map, Arrar and Enum fields) for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(topicSchema).get();\n    } else if (dedupKeyOption == DedupKeyOption.KEY) {\n      LOG.info(\"Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n    } else if (keySchemaFileSpecified()) {\n      Path keySchemaFile = getKeySchemaFile();\n      LOG.info(\"Using attributes specified in schema file \" + keySchemaFile + \" for compaction\");\n      try {\n        keySchema = AvroUtils.parseSchemaFromFile(keySchemaFile, this.fs);\n      } catch (IOException e) {\n        LOG.error(\"Failed to parse avro schema from \" + keySchemaFile\n            + \", using key attributes in the schema for compaction\");\n        keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n      }\n      if (!isKeySchemaValid(keySchema, topicSchema)) {\n        LOG.warn(String.format(\"Key schema %s is not compatible with record schema %s.\", keySchema, topicSchema)\n            + \"Using key attributes in the schema for compaction\");\n        keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n      }\n    } else {\n      LOG.info(\"Property \" + COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC\n          + \" not provided. Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n    }\n\n    return keySchema;\n  }\n","realPath":"gobblin-compaction/src/main/java/org/apache/gobblin/compaction/mapreduce/avro/MRCompactorAvroKeyDedupJobRunner.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"NB"},{"authorDate":"2019-03-15 07:07:35","commitOrder":2,"curCode":"  private Schema getDedupKeySchema(Schema topicSchema) {\n\n    boolean keySchemaFileSpecified =\n        this.state.contains(MRCompactorAvroKeyDedupJobRunner.COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC);\n\n    Schema keySchema = null;\n\n    MRCompactorAvroKeyDedupJobRunner.DedupKeyOption dedupKeyOption = getDedupKeyOption();\n    if (dedupKeyOption == MRCompactorAvroKeyDedupJobRunner.DedupKeyOption.ALL) {\n      log.info(\"Using all attributes in the schema (except Map, Arrar and Enum fields) for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(topicSchema).get();\n    } else if (dedupKeyOption == MRCompactorAvroKeyDedupJobRunner.DedupKeyOption.KEY) {\n      log.info(\"Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n    } else if (keySchemaFileSpecified) {\n      Path keySchemaFile = new Path(state.getProp(MRCompactorAvroKeyDedupJobRunner.COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC));\n      log.info(\"Using attributes specified in schema file \" + keySchemaFile + \" for compaction\");\n      try {\n        keySchema = AvroUtils.parseSchemaFromFile(keySchemaFile, this.fs);\n      } catch (IOException e) {\n        log.error(\"Failed to parse avro schema from \" + keySchemaFile\n            + \", using key attributes in the schema for compaction\");\n        keySchema =\n            AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n      }\n\n      if (!MRCompactorAvroKeyDedupJobRunner.isKeySchemaValid(keySchema, topicSchema)) {\n        log.warn(String.format(\"Key schema %s is not compatible with record schema %s.\", keySchema, topicSchema)\n            + \"Using key attributes in the schema for compaction\");\n        keySchema =\n            AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n      }\n    } else {\n      log.info(\"Property \" + MRCompactorAvroKeyDedupJobRunner.COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC\n          + \" not provided. Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n    }\n\n    return keySchema;\n  }\n","date":"2019-03-15 07:07:35","endLine":125,"groupId":"6368","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getDedupKeySchema","params":"(SchematopicSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/65/fdce5876e8b524371cd17a2b98d394541a52b4.src","preCode":"  private Schema getDedupKeySchema(Schema topicSchema) {\n\n    boolean keySchemaFileSpecified =\n        this.state.contains(MRCompactorAvroKeyDedupJobRunner.COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC);\n\n    Schema keySchema = null;\n\n    MRCompactorAvroKeyDedupJobRunner.DedupKeyOption dedupKeyOption = getDedupKeyOption();\n    if (dedupKeyOption == MRCompactorAvroKeyDedupJobRunner.DedupKeyOption.ALL) {\n      log.info(\"Using all attributes in the schema (except Map, Arrar and Enum fields) for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(topicSchema).get();\n    } else if (dedupKeyOption == MRCompactorAvroKeyDedupJobRunner.DedupKeyOption.KEY) {\n      log.info(\"Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n    } else if (keySchemaFileSpecified) {\n      Path keySchemaFile = new Path(state.getProp(MRCompactorAvroKeyDedupJobRunner.COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC));\n      log.info(\"Using attributes specified in schema file \" + keySchemaFile + \" for compaction\");\n      try {\n        keySchema = AvroUtils.parseSchemaFromFile(keySchemaFile, this.fs);\n      } catch (IOException e) {\n        log.error(\"Failed to parse avro schema from \" + keySchemaFile\n            + \", using key attributes in the schema for compaction\");\n        keySchema =\n            AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n      }\n\n      if (!MRCompactorAvroKeyDedupJobRunner.isKeySchemaValid(keySchema, topicSchema)) {\n        log.warn(String.format(\"Key schema %s is not compatible with record schema %s.\", keySchema, topicSchema)\n            + \"Using key attributes in the schema for compaction\");\n        keySchema =\n            AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n      }\n    } else {\n      log.info(\"Property \" + MRCompactorAvroKeyDedupJobRunner.COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC\n          + \" not provided. Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n    }\n\n    return keySchema;\n  }\n","realPath":"gobblin-compaction/src/main/java/org/apache/gobblin/compaction/mapreduce/CompactionAvroJobConfigurator.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"f589c732e298735039e4f2be8058bfdbbe04526b","commitMessage":"@@@[GOBBLIN-699] Orc compaction impl.\n\nCloses #2570 from autumnust/orcCompactionImpl\n","date":"2019-03-15 07:07:35","modifiedFileCount":"14","status":"M","submitter":"Lei Sun"},{"authorTime":"2019-05-09 00:49:53","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":3,"curCode":"  Schema getKeySchema(Job job, Schema topicSchema) throws IOException {\n    Schema keySchema = null;\n    DedupKeyOption dedupKeyOption = getDedupKeyOption();\n    if (dedupKeyOption == DedupKeyOption.ALL) {\n      LOG.info(\"Using all attributes in the schema (except Map, Arrar and Enum fields) for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(topicSchema).get();\n    } else if (dedupKeyOption == DedupKeyOption.KEY) {\n      LOG.info(\"Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n    } else if (keySchemaFileSpecified()) {\n      Path keySchemaFile = getKeySchemaFile();\n      LOG.info(\"Using attributes specified in schema file \" + keySchemaFile + \" for compaction\");\n      try {\n        keySchema = AvroUtils.parseSchemaFromFile(keySchemaFile, this.fs);\n      } catch (IOException e) {\n        LOG.error(\"Failed to parse avro schema from \" + keySchemaFile\n            + \", using key attributes in the schema for compaction\");\n        keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n      }\n      if (!isKeySchemaValid(keySchema, topicSchema)) {\n        LOG.warn(String.format(\"Key schema %s is not compatible with record schema %s.\", keySchema, topicSchema)\n            + \"Using key attributes in the schema for compaction\");\n        keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n      }\n    } else {\n      LOG.info(\"Property \" + COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC\n          + \" not provided. Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n    }\n\n    return keySchema;\n  }\n","date":"2017-07-31 15:51:25","endLine":165,"groupId":"121574","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getKeySchema","params":"(Jobjob@SchematopicSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/00/b67425778085410026949fa315c8ea1c97a972.src","preCode":"  Schema getKeySchema(Job job, Schema topicSchema) throws IOException {\n    Schema keySchema = null;\n    DedupKeyOption dedupKeyOption = getDedupKeyOption();\n    if (dedupKeyOption == DedupKeyOption.ALL) {\n      LOG.info(\"Using all attributes in the schema (except Map, Arrar and Enum fields) for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(topicSchema).get();\n    } else if (dedupKeyOption == DedupKeyOption.KEY) {\n      LOG.info(\"Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n    } else if (keySchemaFileSpecified()) {\n      Path keySchemaFile = getKeySchemaFile();\n      LOG.info(\"Using attributes specified in schema file \" + keySchemaFile + \" for compaction\");\n      try {\n        keySchema = AvroUtils.parseSchemaFromFile(keySchemaFile, this.fs);\n      } catch (IOException e) {\n        LOG.error(\"Failed to parse avro schema from \" + keySchemaFile\n            + \", using key attributes in the schema for compaction\");\n        keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n      }\n      if (!isKeySchemaValid(keySchema, topicSchema)) {\n        LOG.warn(String.format(\"Key schema %s is not compatible with record schema %s.\", keySchema, topicSchema)\n            + \"Using key attributes in the schema for compaction\");\n        keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n      }\n    } else {\n      LOG.info(\"Property \" + COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC\n          + \" not provided. Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(getKeySchema(topicSchema)).get();\n    }\n\n    return keySchema;\n  }\n","realPath":"gobblin-compaction/src/main/java/org/apache/gobblin/compaction/mapreduce/avro/MRCompactorAvroKeyDedupJobRunner.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"N"},{"authorDate":"2019-05-09 00:49:53","commitOrder":3,"curCode":"  Schema getDedupKeySchema(Schema topicSchema) {\n\n    boolean keySchemaFileSpecified =\n        this.state.contains(MRCompactorAvroKeyDedupJobRunner.COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC);\n\n    Schema keySchema = null;\n\n    MRCompactorAvroKeyDedupJobRunner.DedupKeyOption dedupKeyOption = getDedupKeyOption();\n    if (dedupKeyOption == MRCompactorAvroKeyDedupJobRunner.DedupKeyOption.ALL) {\n      log.info(\"Using all attributes in the schema (except Map, Arrar and Enum fields) for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(topicSchema).get();\n    } else if (dedupKeyOption == MRCompactorAvroKeyDedupJobRunner.DedupKeyOption.KEY) {\n      log.info(\"Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n    } else if (keySchemaFileSpecified) {\n      Path keySchemaFile = new Path(state.getProp(MRCompactorAvroKeyDedupJobRunner.COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC));\n      log.info(\"Using attributes specified in schema file \" + keySchemaFile + \" for compaction\");\n      try {\n        keySchema = AvroUtils.parseSchemaFromFile(keySchemaFile, this.fs);\n      } catch (IOException e) {\n        log.error(\"Failed to parse avro schema from \" + keySchemaFile\n            + \", using key attributes in the schema for compaction\");\n        keySchema =\n            AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n      }\n\n      if (!MRCompactorAvroKeyDedupJobRunner.isKeySchemaValid(keySchema, topicSchema)) {\n        log.warn(String.format(\"Key schema %s is not compatible with record schema %s.\", keySchema, topicSchema)\n            + \"Using key attributes in the schema for compaction\");\n        keySchema =\n            AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n      }\n    } else {\n      log.info(\"Property \" + MRCompactorAvroKeyDedupJobRunner.COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC\n          + \" not provided. Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n    }\n\n\n    if (keyFieldBlacklist.isPresent()) {\n      AvroSchemaFieldRemover fieldRemover = new AvroSchemaFieldRemover(keyFieldBlacklist.get());\n      keySchema = fieldRemover.removeFields(keySchema);\n      log.info(\"Adjusted key schema {}\", keySchema);\n    }\n\n    return keySchema;\n  }\n","date":"2019-05-09 00:49:53","endLine":139,"groupId":"121574","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getDedupKeySchema","params":"(SchematopicSchema)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/be/e1e9c96cec70b58f0d7f397afa894b97a4767e.src","preCode":"  private Schema getDedupKeySchema(Schema topicSchema) {\n\n    boolean keySchemaFileSpecified =\n        this.state.contains(MRCompactorAvroKeyDedupJobRunner.COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC);\n\n    Schema keySchema = null;\n\n    MRCompactorAvroKeyDedupJobRunner.DedupKeyOption dedupKeyOption = getDedupKeyOption();\n    if (dedupKeyOption == MRCompactorAvroKeyDedupJobRunner.DedupKeyOption.ALL) {\n      log.info(\"Using all attributes in the schema (except Map, Arrar and Enum fields) for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(topicSchema).get();\n    } else if (dedupKeyOption == MRCompactorAvroKeyDedupJobRunner.DedupKeyOption.KEY) {\n      log.info(\"Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n    } else if (keySchemaFileSpecified) {\n      Path keySchemaFile = new Path(state.getProp(MRCompactorAvroKeyDedupJobRunner.COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC));\n      log.info(\"Using attributes specified in schema file \" + keySchemaFile + \" for compaction\");\n      try {\n        keySchema = AvroUtils.parseSchemaFromFile(keySchemaFile, this.fs);\n      } catch (IOException e) {\n        log.error(\"Failed to parse avro schema from \" + keySchemaFile\n            + \", using key attributes in the schema for compaction\");\n        keySchema =\n            AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n      }\n\n      if (!MRCompactorAvroKeyDedupJobRunner.isKeySchemaValid(keySchema, topicSchema)) {\n        log.warn(String.format(\"Key schema %s is not compatible with record schema %s.\", keySchema, topicSchema)\n            + \"Using key attributes in the schema for compaction\");\n        keySchema =\n            AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n      }\n    } else {\n      log.info(\"Property \" + MRCompactorAvroKeyDedupJobRunner.COMPACTION_JOB_AVRO_KEY_SCHEMA_LOC\n          + \" not provided. Using key attributes in the schema for compaction\");\n      keySchema = AvroUtils.removeUncomparableFields(MRCompactorAvroKeyDedupJobRunner.getKeySchema(topicSchema)).get();\n    }\n\n    return keySchema;\n  }\n","realPath":"gobblin-compaction/src/main/java/org/apache/gobblin/compaction/mapreduce/CompactionAvroJobConfigurator.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"8a9b5d0c803a95b4bfb9ac3135ee4e849ccdb27b","commitMessage":"@@@[GOBBLIN-763] Support fields removal for compaction dedup key schema\n\nCloses #2627 from zxcware/compact\n","date":"2019-05-09 00:49:53","modifiedFileCount":"3","status":"M","submitter":"zhchen"}]
