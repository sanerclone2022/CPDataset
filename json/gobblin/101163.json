[{"authorTime":"2018-05-17 02:40:22","codes":[{"authorDate":"2018-05-17 02:40:22","commitOrder":1,"curCode":"  public UpdateResponse updateFlowConfig(FlowId flowId, FlowConfig flowConfig)\n      throws FlowConfigLoggedException {\n    String flowName = flowId.getFlowName();\n    String flowGroup = flowId.getFlowGroup();\n\n    if (!flowGroup.equals(flowConfig.getId().getFlowGroup()) || !flowName.equals(flowConfig.getId().getFlowName())) {\n      throw new FlowConfigLoggedException(HttpStatus.S_400_BAD_REQUEST,\n          \"flowName and flowGroup cannot be changed in update\", null);\n    }\n\n    checkHelixConnection(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, flowName, flowGroup);\n\n    try {\n      if (!jobScheduler.isActive() && helixManager.isPresent()) {\n\n        if (this.flowCatalogLocalCommit) {\n          \r\n          this.localHandler.updateFlowConfig(flowId, flowConfig, false);\n        }\n\n        forwardMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, FlowConfigUtils.serializeFlowConfig(flowConfig), flowName, flowGroup);\n\n        \r\n        log.info(\"Forwarding update flowConfig [flowName=\" + flowName + \" flowGroup=\" + flowGroup + \"]\");\n        return new UpdateResponse(HttpStatus.S_200_OK);\n      } else {\n        return this.localHandler.updateFlowConfig(flowId, flowConfig);\n      }\n\n    } catch (IOException e) {\n      throw new FlowConfigLoggedException(HttpStatus.S_500_INTERNAL_SERVER_ERROR,\n          \"Cannot update flowConfig [flowName=\" + flowName + \" flowGroup=\" + flowGroup + \"]\", e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":154,"groupId":"8151","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"updateFlowConfig","params":"(FlowIdflowId@FlowConfigflowConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/55/d9cf07fbeb6b8310b3632a613ed5505abf66a3.src","preCode":"  public UpdateResponse updateFlowConfig(FlowId flowId, FlowConfig flowConfig)\n      throws FlowConfigLoggedException {\n    String flowName = flowId.getFlowName();\n    String flowGroup = flowId.getFlowGroup();\n\n    if (!flowGroup.equals(flowConfig.getId().getFlowGroup()) || !flowName.equals(flowConfig.getId().getFlowName())) {\n      throw new FlowConfigLoggedException(HttpStatus.S_400_BAD_REQUEST,\n          \"flowName and flowGroup cannot be changed in update\", null);\n    }\n\n    checkHelixConnection(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, flowName, flowGroup);\n\n    try {\n      if (!jobScheduler.isActive() && helixManager.isPresent()) {\n\n        if (this.flowCatalogLocalCommit) {\n          \r\n          this.localHandler.updateFlowConfig(flowId, flowConfig, false);\n        }\n\n        forwardMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, FlowConfigUtils.serializeFlowConfig(flowConfig), flowName, flowGroup);\n\n        \r\n        log.info(\"Forwarding update flowConfig [flowName=\" + flowName + \" flowGroup=\" + flowGroup + \"]\");\n        return new UpdateResponse(HttpStatus.S_200_OK);\n      } else {\n        return this.localHandler.updateFlowConfig(flowId, flowConfig);\n      }\n\n    } catch (IOException e) {\n      throw new FlowConfigLoggedException(HttpStatus.S_500_INTERNAL_SERVER_ERROR,\n          \"Cannot update flowConfig [flowName=\" + flowName + \" flowGroup=\" + flowGroup + \"]\", e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/restli/GobblinServiceFlowConfigResourceHandler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"},{"authorDate":"2018-05-17 02:40:22","commitOrder":1,"curCode":"  public UpdateResponse deleteFlowConfig(FlowId flowId, Properties header)\n      throws FlowConfigLoggedException {\n    String flowName = flowId.getFlowName();\n    String flowGroup = flowId.getFlowGroup();\n\n    checkHelixConnection(ServiceConfigKeys.HELIX_FLOWSPEC_REMOVE, flowName, flowGroup);\n\n    try {\n      if (!jobScheduler.isActive() && helixManager.isPresent()) {\n\n        if (this.flowCatalogLocalCommit) {\n          \r\n          this.localHandler.deleteFlowConfig(flowId, header, false);\n        }\n\n        forwardMessage(ServiceConfigKeys.HELIX_FLOWSPEC_REMOVE, FlowConfigUtils.serializeFlowId(flowId), flowName, flowGroup);\n\n        return new UpdateResponse(HttpStatus.S_200_OK);\n      } else {\n        return this.localHandler.deleteFlowConfig(flowId, header);\n      }\n    } catch (IOException e) {\n      throw new FlowConfigLoggedException(HttpStatus.S_500_INTERNAL_SERVER_ERROR,\n          \"Cannot delete flowConfig [flowName=\" + flowName + \" flowGroup=\" + flowGroup + \"]\", e);\n    }\n  }\n","date":"2018-05-17 02:40:22","endLine":189,"groupId":"3657","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteFlowConfig","params":"(FlowIdflowId@Propertiesheader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/55/d9cf07fbeb6b8310b3632a613ed5505abf66a3.src","preCode":"  public UpdateResponse deleteFlowConfig(FlowId flowId, Properties header)\n      throws FlowConfigLoggedException {\n    String flowName = flowId.getFlowName();\n    String flowGroup = flowId.getFlowGroup();\n\n    checkHelixConnection(ServiceConfigKeys.HELIX_FLOWSPEC_REMOVE, flowName, flowGroup);\n\n    try {\n      if (!jobScheduler.isActive() && helixManager.isPresent()) {\n\n        if (this.flowCatalogLocalCommit) {\n          \r\n          this.localHandler.deleteFlowConfig(flowId, header, false);\n        }\n\n        forwardMessage(ServiceConfigKeys.HELIX_FLOWSPEC_REMOVE, FlowConfigUtils.serializeFlowId(flowId), flowName, flowGroup);\n\n        return new UpdateResponse(HttpStatus.S_200_OK);\n      } else {\n        return this.localHandler.deleteFlowConfig(flowId, header);\n      }\n    } catch (IOException e) {\n      throw new FlowConfigLoggedException(HttpStatus.S_500_INTERNAL_SERVER_ERROR,\n          \"Cannot delete flowConfig [flowName=\" + flowName + \" flowGroup=\" + flowGroup + \"]\", e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/restli/GobblinServiceFlowConfigResourceHandler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"}],"commitId":"01302a6db2c468507c0adea5daa69de997aaf14b","commitMessage":"@@@[GOBBLIN-458] Refactor flowConfig resource handler\n\nCloses #2329 from yukuai518/delete\n","date":"2018-05-17 02:40:22","modifiedFileCount":"9","status":"B","submitter":"Kuai Yu"},{"authorTime":"2020-11-04 06:14:06","codes":[{"authorDate":"2020-11-04 06:14:06","commitOrder":2,"curCode":"  public UpdateResponse updateFlowConfig(FlowId flowId, FlowConfig flowConfig)\n      throws FlowConfigLoggedException {\n    String flowName = flowId.getFlowName();\n    String flowGroup = flowId.getFlowGroup();\n\n    if (!flowGroup.equals(flowConfig.getId().getFlowGroup()) || !flowName.equals(flowConfig.getId().getFlowName())) {\n      throw new FlowConfigLoggedException(HttpStatus.S_400_BAD_REQUEST,\n          \"flowName and flowGroup cannot be changed in update\", null);\n    }\n\n    checkHelixConnection(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, flowName, flowGroup);\n\n    if (forceLeader) {\n      HelixUtils.throwErrorIfNotLeader(helixManager);\n    }\n\n    try {\n      if (!jobScheduler.isActive() && helixManager.isPresent()) {\n\n        if (this.flowCatalogLocalCommit) {\n          \r\n          this.localHandler.updateFlowConfig(flowId, flowConfig, false);\n        }\n\n        forwardMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, FlowConfigUtils.serializeFlowConfig(flowConfig), flowName, flowGroup);\n\n        \r\n        log.info(\"Forwarding update flowConfig [flowName=\" + flowName + \" flowGroup=\" + flowGroup + \"]\");\n        return new UpdateResponse(HttpStatus.S_200_OK);\n      } else {\n        return this.localHandler.updateFlowConfig(flowId, flowConfig);\n      }\n\n    } catch (IOException e) {\n      throw new FlowConfigLoggedException(HttpStatus.S_500_INTERNAL_SERVER_ERROR,\n          \"Cannot update flowConfig [flowName=\" + flowName + \" flowGroup=\" + flowGroup + \"]\", e);\n    }\n  }\n","date":"2020-11-04 06:14:06","endLine":202,"groupId":"101163","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"updateFlowConfig","params":"(FlowIdflowId@FlowConfigflowConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/12/ce857b2b280883e440fcf7be08fb3fd21e1447.src","preCode":"  public UpdateResponse updateFlowConfig(FlowId flowId, FlowConfig flowConfig)\n      throws FlowConfigLoggedException {\n    String flowName = flowId.getFlowName();\n    String flowGroup = flowId.getFlowGroup();\n\n    if (!flowGroup.equals(flowConfig.getId().getFlowGroup()) || !flowName.equals(flowConfig.getId().getFlowName())) {\n      throw new FlowConfigLoggedException(HttpStatus.S_400_BAD_REQUEST,\n          \"flowName and flowGroup cannot be changed in update\", null);\n    }\n\n    checkHelixConnection(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, flowName, flowGroup);\n\n    try {\n      if (!jobScheduler.isActive() && helixManager.isPresent()) {\n\n        if (this.flowCatalogLocalCommit) {\n          \r\n          this.localHandler.updateFlowConfig(flowId, flowConfig, false);\n        }\n\n        forwardMessage(ServiceConfigKeys.HELIX_FLOWSPEC_UPDATE, FlowConfigUtils.serializeFlowConfig(flowConfig), flowName, flowGroup);\n\n        \r\n        log.info(\"Forwarding update flowConfig [flowName=\" + flowName + \" flowGroup=\" + flowGroup + \"]\");\n        return new UpdateResponse(HttpStatus.S_200_OK);\n      } else {\n        return this.localHandler.updateFlowConfig(flowId, flowConfig);\n      }\n\n    } catch (IOException e) {\n      throw new FlowConfigLoggedException(HttpStatus.S_500_INTERNAL_SERVER_ERROR,\n          \"Cannot update flowConfig [flowName=\" + flowName + \" flowGroup=\" + flowGroup + \"]\", e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/restli/GobblinServiceFlowConfigResourceHandler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2020-11-04 06:14:06","commitOrder":2,"curCode":"  public UpdateResponse deleteFlowConfig(FlowId flowId, Properties header)\n      throws FlowConfigLoggedException {\n    String flowName = flowId.getFlowName();\n    String flowGroup = flowId.getFlowGroup();\n\n    checkHelixConnection(ServiceConfigKeys.HELIX_FLOWSPEC_REMOVE, flowName, flowGroup);\n\n    if (forceLeader) {\n      HelixUtils.throwErrorIfNotLeader(helixManager);\n    }\n\n    try {\n      if (!jobScheduler.isActive() && helixManager.isPresent()) {\n\n        if (this.flowCatalogLocalCommit) {\n          \r\n          this.localHandler.deleteFlowConfig(flowId, header, false);\n        }\n\n        forwardMessage(ServiceConfigKeys.HELIX_FLOWSPEC_REMOVE, FlowConfigUtils.serializeFlowId(flowId), flowName, flowGroup);\n\n        return new UpdateResponse(HttpStatus.S_200_OK);\n      } else {\n        return this.localHandler.deleteFlowConfig(flowId, header);\n      }\n    } catch (IOException e) {\n      throw new FlowConfigLoggedException(HttpStatus.S_500_INTERNAL_SERVER_ERROR,\n          \"Cannot delete flowConfig [flowName=\" + flowName + \" flowGroup=\" + flowGroup + \"]\", e);\n    }\n  }\n","date":"2020-11-04 06:14:06","endLine":259,"groupId":"101163","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteFlowConfig","params":"(FlowIdflowId@Propertiesheader)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/12/ce857b2b280883e440fcf7be08fb3fd21e1447.src","preCode":"  public UpdateResponse deleteFlowConfig(FlowId flowId, Properties header)\n      throws FlowConfigLoggedException {\n    String flowName = flowId.getFlowName();\n    String flowGroup = flowId.getFlowGroup();\n\n    checkHelixConnection(ServiceConfigKeys.HELIX_FLOWSPEC_REMOVE, flowName, flowGroup);\n\n    try {\n      if (!jobScheduler.isActive() && helixManager.isPresent()) {\n\n        if (this.flowCatalogLocalCommit) {\n          \r\n          this.localHandler.deleteFlowConfig(flowId, header, false);\n        }\n\n        forwardMessage(ServiceConfigKeys.HELIX_FLOWSPEC_REMOVE, FlowConfigUtils.serializeFlowId(flowId), flowName, flowGroup);\n\n        return new UpdateResponse(HttpStatus.S_200_OK);\n      } else {\n        return this.localHandler.deleteFlowConfig(flowId, header);\n      }\n    } catch (IOException e) {\n      throw new FlowConfigLoggedException(HttpStatus.S_500_INTERNAL_SERVER_ERROR,\n          \"Cannot delete flowConfig [flowName=\" + flowName + \" flowGroup=\" + flowGroup + \"]\", e);\n    }\n  }\n","realPath":"gobblin-service/src/main/java/org/apache/gobblin/service/modules/restli/GobblinServiceFlowConfigResourceHandler.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"}],"commitId":"f2767242fe863307feaf68332f0d3617f30e8e4b","commitMessage":"@@@[GOBBLIN-1285] Add option to only accept requests to leader node and redirect requests in the client\n\nCloses #3124 from jack-moseley/gaas-redirect\n","date":"2020-11-04 06:14:06","modifiedFileCount":"9","status":"M","submitter":"Jack Moseley"}]
