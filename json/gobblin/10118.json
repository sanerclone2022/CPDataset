[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      Log4jConfigHelper.updateLog4jConfiguration(GobblinTaskRunner.class,\n          GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      final String applicationName = cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME);\n      final String helixInstanceName = cmd.getOptionValue(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME);\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      final GobblinTaskRunner gobblinTaskRunner =\n          new GobblinAWSTaskRunner(applicationName, helixInstanceName, ConfigFactory.load(),\n              Optional.of(new Path(appWorkDir)));\n      gobblinTaskRunner.start();\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":198,"groupId":"2864","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/93/f36cf2585769a26cb7cb2e587a41fa96fe8e72.src","preCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      Log4jConfigHelper.updateLog4jConfiguration(GobblinTaskRunner.class,\n          GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      final String applicationName = cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME);\n      final String helixInstanceName = cmd.getOptionValue(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME);\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      final GobblinTaskRunner gobblinTaskRunner =\n          new GobblinAWSTaskRunner(applicationName, helixInstanceName, ConfigFactory.load(),\n              Optional.of(new Path(appWorkDir)));\n      gobblinTaskRunner.start();\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/GobblinAWSTaskRunner.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      Log4jConfigHelper.updateLog4jConfiguration(GobblinAWSClusterManager.class,\n          GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      \r\n      \r\n      final String applicationId = \"1\";\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      try (GobblinAWSClusterManager clusterMaster = new GobblinAWSClusterManager(\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME), applicationId,\n          ConfigFactory.load(), Optional.of(new Path(appWorkDir)))) {\n\n        clusterMaster.start();\n      }\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":186,"groupId":"3100","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/e1/8ca5b5fa0beb915dbfc272086cb8ea14e2e837.src","preCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      Log4jConfigHelper.updateLog4jConfiguration(GobblinAWSClusterManager.class,\n          GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      \r\n      \r\n      final String applicationId = \"1\";\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      try (GobblinAWSClusterManager clusterMaster = new GobblinAWSClusterManager(\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME), applicationId,\n          ConfigFactory.load(), Optional.of(new Path(appWorkDir)))) {\n\n        clusterMaster.start();\n      }\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/GobblinAWSClusterManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-08-11 14:05:36","codes":[{"authorDate":"2017-08-11 14:05:36","commitOrder":2,"curCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      if (System.getProperty(\"log4j.configuration\") == null) {\n        Log4jConfigHelper.updateLog4jConfiguration(GobblinTaskRunner.class,\n                GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n      }\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      final String applicationName = cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME);\n      final String helixInstanceName = cmd.getOptionValue(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME);\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      final GobblinTaskRunner gobblinTaskRunner =\n          new GobblinAWSTaskRunner(applicationName, helixInstanceName, ConfigFactory.load(),\n              Optional.of(new Path(appWorkDir)));\n      gobblinTaskRunner.start();\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","date":"2017-08-11 14:05:36","endLine":200,"groupId":"10118","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/cd/2045fa4d2fc911fb2c4be7d3277b66c345175a.src","preCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      Log4jConfigHelper.updateLog4jConfiguration(GobblinTaskRunner.class,\n          GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      final String applicationName = cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME);\n      final String helixInstanceName = cmd.getOptionValue(GobblinClusterConfigurationKeys.HELIX_INSTANCE_NAME_OPTION_NAME);\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      final GobblinTaskRunner gobblinTaskRunner =\n          new GobblinAWSTaskRunner(applicationName, helixInstanceName, ConfigFactory.load(),\n              Optional.of(new Path(appWorkDir)));\n      gobblinTaskRunner.start();\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/GobblinAWSTaskRunner.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"},{"authorDate":"2017-08-11 14:05:36","commitOrder":2,"curCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      if (System.getProperty(\"log4j.configuration\") == null) {\n        Log4jConfigHelper.updateLog4jConfiguration(GobblinAWSClusterManager.class,\n                GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n      }\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      \r\n      \r\n      final String applicationId = \"1\";\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      try (GobblinAWSClusterManager clusterMaster = new GobblinAWSClusterManager(\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME), applicationId,\n          ConfigFactory.load(), Optional.of(new Path(appWorkDir)))) {\n\n        clusterMaster.start();\n      }\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","date":"2017-08-11 14:05:36","endLine":188,"groupId":"10118","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/17/865df20b45819d7fbea2e057a8d84d01e0e553.src","preCode":"  public static void main(String[] args) throws Exception {\n    final Options options = buildOptions();\n    try {\n      final CommandLine cmd = new DefaultParser().parse(options, args);\n      if (!cmd.hasOption(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME) ||\n          !cmd.hasOption(GobblinAWSConfigurationKeys.APP_WORK_DIR)) {\n        printUsage(options);\n        System.exit(1);\n      }\n\n      Log4jConfigHelper.updateLog4jConfiguration(GobblinAWSClusterManager.class,\n          GobblinAWSConfigurationKeys.GOBBLIN_AWS_LOG4J_CONFIGURATION_FILE);\n\n      LOGGER.info(JvmUtils.getJvmInputArguments());\n\n      \r\n      \r\n      final String applicationId = \"1\";\n      final String appWorkDir = cmd.getOptionValue(GobblinAWSConfigurationKeys.APP_WORK_DIR);\n\n      try (GobblinAWSClusterManager clusterMaster = new GobblinAWSClusterManager(\n          cmd.getOptionValue(GobblinClusterConfigurationKeys.APPLICATION_NAME_OPTION_NAME), applicationId,\n          ConfigFactory.load(), Optional.of(new Path(appWorkDir)))) {\n\n        clusterMaster.start();\n      }\n    } catch (ParseException pe) {\n      printUsage(options);\n      System.exit(1);\n    }\n  }\n","realPath":"gobblin-aws/src/main/java/org/apache/gobblin/aws/GobblinAWSClusterManager.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"c111fa13116c69416e4fd4535d56a1132f90387f","commitMessage":"@@@[GOBBLIN-192] Allow log4j configuration to be specified on command line\n\nCurrently.  `GobblinAWSClusterManager` and\n`GobblinAWSTaskRunner` hardcodes the log4j\nconfiguration.  This PR allows\n`log4j.configuration` to be specified on the\ncommand line.  If so.  it overrides the hardcoded\nconfiguration.  This lets users bootstrap the AWS\ncluster on their own without relying on\n`GobblinAWSClusterLauncher`.\n\nCloses #2043 from\nkadaan/AllowOverrideOfLog4jConfig\n","date":"2017-08-11 14:05:36","modifiedFileCount":"2","status":"M","submitter":"Joel Baranick"}]
