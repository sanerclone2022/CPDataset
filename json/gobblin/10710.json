[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void runTestWithMultipleDatasets(Properties jobProps) throws Exception {\n    String jobName = jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);\n    String jobId = JobLauncherUtils.newJobId(jobName).toString();\n    jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY, jobId);\n    jobProps.setProperty(ConfigurationKeys.SOURCE_CLASS_KEY, MultiDatasetTestSource.class.getName());\n\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      jobLauncher.launchJob(null);\n    } finally {\n      closer.close();\n    }\n\n    for (int i = 0; i < 4; i++) {\n      List<JobState.DatasetState> datasetStateList =\n          this.datasetStateStore.getAll(jobName, \"Dataset\" + i + \"-current.jst\");\n      DatasetState datasetState = datasetStateList.get(0);\n\n      Assert.assertEquals(datasetState.getDatasetUrn(), \"Dataset\" + i);\n      Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n      Assert.assertEquals(datasetState.getCompletedTasks(), 1);\n      Assert.assertEquals(datasetState.getJobFailures(), 0);\n      for (TaskState taskState : datasetState.getTaskStates()) {\n        Assert.assertEquals(taskState.getProp(ConfigurationKeys.DATASET_URN_KEY), \"Dataset\" + i);\n        Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n        Assert.assertEquals(taskState.getPropAsLong(ConfigurationKeys.WRITER_RECORDS_WRITTEN),\n            TestExtractor.TOTAL_RECORDS);\n      }\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":223,"groupId":"2411","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runTestWithMultipleDatasets","params":"(PropertiesjobProps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/06/8d35783c41533d427f2cd7e9750d0b6622d096.src","preCode":"  public void runTestWithMultipleDatasets(Properties jobProps) throws Exception {\n    String jobName = jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);\n    String jobId = JobLauncherUtils.newJobId(jobName).toString();\n    jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY, jobId);\n    jobProps.setProperty(ConfigurationKeys.SOURCE_CLASS_KEY, MultiDatasetTestSource.class.getName());\n\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      jobLauncher.launchJob(null);\n    } finally {\n      closer.close();\n    }\n\n    for (int i = 0; i < 4; i++) {\n      List<JobState.DatasetState> datasetStateList =\n          this.datasetStateStore.getAll(jobName, \"Dataset\" + i + \"-current.jst\");\n      DatasetState datasetState = datasetStateList.get(0);\n\n      Assert.assertEquals(datasetState.getDatasetUrn(), \"Dataset\" + i);\n      Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n      Assert.assertEquals(datasetState.getCompletedTasks(), 1);\n      Assert.assertEquals(datasetState.getJobFailures(), 0);\n      for (TaskState taskState : datasetState.getTaskStates()) {\n        Assert.assertEquals(taskState.getProp(ConfigurationKeys.DATASET_URN_KEY), \"Dataset\" + i);\n        Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n        Assert.assertEquals(taskState.getPropAsLong(ConfigurationKeys.WRITER_RECORDS_WRITTEN),\n            TestExtractor.TOTAL_RECORDS);\n      }\n    }\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/JobLauncherTestHelper.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void runTestWithMultipleDatasetsAndFaultyExtractor(Properties jobProps, boolean usePartialCommitPolicy)\n      throws Exception {\n    String jobName = jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);\n    String jobId = JobLauncherUtils.newJobId(jobName).toString();\n    jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY, jobId);\n    jobProps.setProperty(ConfigurationKeys.SOURCE_CLASS_KEY, MultiDatasetTestSourceWithFaultyExtractor.class.getName());\n    jobProps.setProperty(ConfigurationKeys.MAX_TASK_RETRIES_KEY, \"0\");\n    if (usePartialCommitPolicy) {\n      jobProps.setProperty(ConfigurationKeys.JOB_COMMIT_POLICY_KEY, \"partial\");\n    }\n\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      jobLauncher.launchJob(null);\n    } catch (JobException je) {\n      \r\n    } finally {\n      closer.close();\n    }\n\n    if (usePartialCommitPolicy) {\n      List<JobState.DatasetState> datasetStateList = this.datasetStateStore.getAll(jobName, \"Dataset0-current.jst\");\n      JobState.DatasetState datasetState = datasetStateList.get(0);\n      Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n      Assert.assertEquals(datasetState.getTaskCount(), 1);\n      TaskState taskState = datasetState.getTaskStates().get(0);\n      \r\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n    } else {\n      \r\n      Assert.assertTrue(this.datasetStateStore.getAll(jobName, \"Dataset0-current.jst\").isEmpty());\n    }\n\n    for (int i = 1; i < 4; i++) {\n      List<JobState.DatasetState> datasetStateList =\n          this.datasetStateStore.getAll(jobName, \"Dataset\" + i + \"-current.jst\");\n      JobState.DatasetState datasetState = datasetStateList.get(0);\n\n      Assert.assertEquals(datasetState.getDatasetUrn(), \"Dataset\" + i);\n      Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n      Assert.assertEquals(datasetState.getCompletedTasks(), 1);\n      for (TaskState taskState : datasetState.getTaskStates()) {\n        Assert.assertEquals(taskState.getProp(ConfigurationKeys.DATASET_URN_KEY), \"Dataset\" + i);\n        Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n      }\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":305,"groupId":"2588","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"runTestWithMultipleDatasetsAndFaultyExtractor","params":"(PropertiesjobProps@booleanusePartialCommitPolicy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/06/8d35783c41533d427f2cd7e9750d0b6622d096.src","preCode":"  public void runTestWithMultipleDatasetsAndFaultyExtractor(Properties jobProps, boolean usePartialCommitPolicy)\n      throws Exception {\n    String jobName = jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);\n    String jobId = JobLauncherUtils.newJobId(jobName).toString();\n    jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY, jobId);\n    jobProps.setProperty(ConfigurationKeys.SOURCE_CLASS_KEY, MultiDatasetTestSourceWithFaultyExtractor.class.getName());\n    jobProps.setProperty(ConfigurationKeys.MAX_TASK_RETRIES_KEY, \"0\");\n    if (usePartialCommitPolicy) {\n      jobProps.setProperty(ConfigurationKeys.JOB_COMMIT_POLICY_KEY, \"partial\");\n    }\n\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      jobLauncher.launchJob(null);\n    } catch (JobException je) {\n      \r\n    } finally {\n      closer.close();\n    }\n\n    if (usePartialCommitPolicy) {\n      List<JobState.DatasetState> datasetStateList = this.datasetStateStore.getAll(jobName, \"Dataset0-current.jst\");\n      JobState.DatasetState datasetState = datasetStateList.get(0);\n      Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n      Assert.assertEquals(datasetState.getTaskCount(), 1);\n      TaskState taskState = datasetState.getTaskStates().get(0);\n      \r\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n    } else {\n      \r\n      Assert.assertTrue(this.datasetStateStore.getAll(jobName, \"Dataset0-current.jst\").isEmpty());\n    }\n\n    for (int i = 1; i < 4; i++) {\n      List<JobState.DatasetState> datasetStateList =\n          this.datasetStateStore.getAll(jobName, \"Dataset\" + i + \"-current.jst\");\n      JobState.DatasetState datasetState = datasetStateList.get(0);\n\n      Assert.assertEquals(datasetState.getDatasetUrn(), \"Dataset\" + i);\n      Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n      Assert.assertEquals(datasetState.getCompletedTasks(), 1);\n      for (TaskState taskState : datasetState.getTaskStates()) {\n        Assert.assertEquals(taskState.getProp(ConfigurationKeys.DATASET_URN_KEY), \"Dataset\" + i);\n        Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n      }\n    }\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/JobLauncherTestHelper.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2020-02-14 07:18:50","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void runTestWithMultipleDatasets(Properties jobProps) throws Exception {\n    String jobName = jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);\n    String jobId = JobLauncherUtils.newJobId(jobName).toString();\n    jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY, jobId);\n    jobProps.setProperty(ConfigurationKeys.SOURCE_CLASS_KEY, MultiDatasetTestSource.class.getName());\n\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      jobLauncher.launchJob(null);\n    } finally {\n      closer.close();\n    }\n\n    for (int i = 0; i < 4; i++) {\n      List<JobState.DatasetState> datasetStateList =\n          this.datasetStateStore.getAll(jobName, \"Dataset\" + i + \"-current.jst\");\n      DatasetState datasetState = datasetStateList.get(0);\n\n      Assert.assertEquals(datasetState.getDatasetUrn(), \"Dataset\" + i);\n      Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n      Assert.assertEquals(datasetState.getCompletedTasks(), 1);\n      Assert.assertEquals(datasetState.getJobFailures(), 0);\n      for (TaskState taskState : datasetState.getTaskStates()) {\n        Assert.assertEquals(taskState.getProp(ConfigurationKeys.DATASET_URN_KEY), \"Dataset\" + i);\n        Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n        Assert.assertEquals(taskState.getPropAsLong(ConfigurationKeys.WRITER_RECORDS_WRITTEN),\n            TestExtractor.TOTAL_RECORDS);\n      }\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":223,"groupId":"10710","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runTestWithMultipleDatasets","params":"(PropertiesjobProps)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/06/8d35783c41533d427f2cd7e9750d0b6622d096.src","preCode":"  public void runTestWithMultipleDatasets(Properties jobProps) throws Exception {\n    String jobName = jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);\n    String jobId = JobLauncherUtils.newJobId(jobName).toString();\n    jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY, jobId);\n    jobProps.setProperty(ConfigurationKeys.SOURCE_CLASS_KEY, MultiDatasetTestSource.class.getName());\n\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      jobLauncher.launchJob(null);\n    } finally {\n      closer.close();\n    }\n\n    for (int i = 0; i < 4; i++) {\n      List<JobState.DatasetState> datasetStateList =\n          this.datasetStateStore.getAll(jobName, \"Dataset\" + i + \"-current.jst\");\n      DatasetState datasetState = datasetStateList.get(0);\n\n      Assert.assertEquals(datasetState.getDatasetUrn(), \"Dataset\" + i);\n      Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n      Assert.assertEquals(datasetState.getCompletedTasks(), 1);\n      Assert.assertEquals(datasetState.getJobFailures(), 0);\n      for (TaskState taskState : datasetState.getTaskStates()) {\n        Assert.assertEquals(taskState.getProp(ConfigurationKeys.DATASET_URN_KEY), \"Dataset\" + i);\n        Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n        Assert.assertEquals(taskState.getPropAsLong(ConfigurationKeys.WRITER_RECORDS_WRITTEN),\n            TestExtractor.TOTAL_RECORDS);\n      }\n    }\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/JobLauncherTestHelper.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"N"},{"authorDate":"2020-02-14 07:18:50","commitOrder":2,"curCode":"  public void runTestWithMultipleDatasetsAndFaultyExtractor(Properties jobProps, boolean usePartialCommitPolicy)\n      throws Exception {\n    String jobName = jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);\n    String jobId = JobLauncherUtils.newJobId(jobName).toString();\n    jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY, jobId);\n    jobProps.setProperty(ConfigurationKeys.SOURCE_CLASS_KEY, MultiDatasetTestSourceWithFaultyExtractor.class.getName());\n    jobProps.setProperty(ConfigurationKeys.MAX_TASK_RETRIES_KEY, \"0\");\n    if (usePartialCommitPolicy) {\n      jobProps.setProperty(ConfigurationKeys.JOB_COMMIT_POLICY_KEY, \"partial\");\n    }\n\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      jobLauncher.launchJob(null);\n    } catch (JobException je) {\n      \r\n    } finally {\n      closer.close();\n    }\n\n    if (usePartialCommitPolicy) {\n      List<JobState.DatasetState> datasetStateList = this.datasetStateStore.getAll(jobName, \"Dataset0-current.jst\");\n      JobState.DatasetState datasetState = datasetStateList.get(0);\n      Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n      Assert.assertEquals(datasetState.getTaskCount(), 1);\n      TaskState taskState = datasetState.getTaskStates().get(0);\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.FAILED);\n    } else {\n      \r\n      Assert.assertTrue(this.datasetStateStore.getAll(jobName, \"Dataset0-current.jst\").isEmpty());\n    }\n\n    for (int i = 1; i < 4; i++) {\n      List<JobState.DatasetState> datasetStateList =\n          this.datasetStateStore.getAll(jobName, \"Dataset\" + i + \"-current.jst\");\n      JobState.DatasetState datasetState = datasetStateList.get(0);\n\n      Assert.assertEquals(datasetState.getDatasetUrn(), \"Dataset\" + i);\n      Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n      Assert.assertEquals(datasetState.getCompletedTasks(), 1);\n      for (TaskState taskState : datasetState.getTaskStates()) {\n        Assert.assertEquals(taskState.getProp(ConfigurationKeys.DATASET_URN_KEY), \"Dataset\" + i);\n        Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n      }\n    }\n  }\n","date":"2020-02-14 07:18:50","endLine":367,"groupId":"10710","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"runTestWithMultipleDatasetsAndFaultyExtractor","params":"(PropertiesjobProps@booleanusePartialCommitPolicy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/89/249b3d5b5891e2d1b0d276e4821869ac494019.src","preCode":"  public void runTestWithMultipleDatasetsAndFaultyExtractor(Properties jobProps, boolean usePartialCommitPolicy)\n      throws Exception {\n    String jobName = jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);\n    String jobId = JobLauncherUtils.newJobId(jobName).toString();\n    jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY, jobId);\n    jobProps.setProperty(ConfigurationKeys.SOURCE_CLASS_KEY, MultiDatasetTestSourceWithFaultyExtractor.class.getName());\n    jobProps.setProperty(ConfigurationKeys.MAX_TASK_RETRIES_KEY, \"0\");\n    if (usePartialCommitPolicy) {\n      jobProps.setProperty(ConfigurationKeys.JOB_COMMIT_POLICY_KEY, \"partial\");\n    }\n\n    Closer closer = Closer.create();\n    try {\n      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(this.launcherProps, jobProps));\n      jobLauncher.launchJob(null);\n    } catch (JobException je) {\n      \r\n    } finally {\n      closer.close();\n    }\n\n    if (usePartialCommitPolicy) {\n      List<JobState.DatasetState> datasetStateList = this.datasetStateStore.getAll(jobName, \"Dataset0-current.jst\");\n      JobState.DatasetState datasetState = datasetStateList.get(0);\n      Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n      Assert.assertEquals(datasetState.getTaskCount(), 1);\n      TaskState taskState = datasetState.getTaskStates().get(0);\n      \r\n      Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n    } else {\n      \r\n      Assert.assertTrue(this.datasetStateStore.getAll(jobName, \"Dataset0-current.jst\").isEmpty());\n    }\n\n    for (int i = 1; i < 4; i++) {\n      List<JobState.DatasetState> datasetStateList =\n          this.datasetStateStore.getAll(jobName, \"Dataset\" + i + \"-current.jst\");\n      JobState.DatasetState datasetState = datasetStateList.get(0);\n\n      Assert.assertEquals(datasetState.getDatasetUrn(), \"Dataset\" + i);\n      Assert.assertEquals(datasetState.getState(), JobState.RunningState.COMMITTED);\n      Assert.assertEquals(datasetState.getCompletedTasks(), 1);\n      for (TaskState taskState : datasetState.getTaskStates()) {\n        Assert.assertEquals(taskState.getProp(ConfigurationKeys.DATASET_URN_KEY), \"Dataset\" + i);\n        Assert.assertEquals(taskState.getWorkingState(), WorkUnitState.WorkingState.COMMITTED);\n      }\n    }\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/JobLauncherTestHelper.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"}],"commitId":"6e17d0c7f1785004ffca5cb17a0e11c445703afe","commitMessage":"@@@[GOBBLIN-1049] Move workunit commit logic to the end of publish().\n\nCloses #2889 from yukuai518/commit\n","date":"2020-02-14 07:18:50","modifiedFileCount":"3","status":"M","submitter":"Kuai Yu"}]
