[{"authorTime":"2019-11-21 06:25:54","codes":[{"authorDate":"2019-11-21 06:25:54","commitOrder":1,"curCode":"  public void testRowLevelPolicy()\n      throws Exception {\n    State state = new State();\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST, \"org.apache.gobblin.qualitychecker.TestRowLevelPolicy\");\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST_TYPE, \"FAIL\");\n\n    RowLevelPolicyChecker checker =\n        new RowLevelPolicyCheckerBuilderFactory().newPolicyCheckerBuilder(state, -1).build();\n    RowLevelPolicyCheckResults results = new RowLevelPolicyCheckResults();\n\n    FileReader<GenericRecord> fileReader = openFile(state);\n\n    for (GenericRecord datum : fileReader) {\n      Assert.assertTrue(checker.executePolicies(datum, results));\n    }\n  }\n","date":"2019-11-21 06:25:54","endLine":61,"groupId":"1501","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRowLevelPolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/48/eb8185f0a08da5db4d089f40b89e107c1549dd.src","preCode":"  public void testRowLevelPolicy()\n      throws Exception {\n    State state = new State();\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST, \"org.apache.gobblin.qualitychecker.TestRowLevelPolicy\");\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST_TYPE, \"FAIL\");\n\n    RowLevelPolicyChecker checker =\n        new RowLevelPolicyCheckerBuilderFactory().newPolicyCheckerBuilder(state, -1).build();\n    RowLevelPolicyCheckResults results = new RowLevelPolicyCheckResults();\n\n    FileReader<GenericRecord> fileReader = openFile(state);\n\n    for (GenericRecord datum : fileReader) {\n      Assert.assertTrue(checker.executePolicies(datum, results));\n    }\n  }\n","realPath":"gobblin-core/src/test/java/org/apache/gobblin/qualitychecker/row/RowLevelQualityCheckerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2019-11-21 06:25:54","commitOrder":1,"curCode":"  public void testWriteToErrFile()\n      throws Exception {\n    State state = new State();\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST, \"org.apache.gobblin.qualitychecker.TestRowLevelPolicyFail\");\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST_TYPE, \"ERR_FILE\");\n    state.setProp(ConfigurationKeys.ROW_LEVEL_ERR_FILE, TestConstants.TEST_ERR_FILE);\n    state.setProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI, TestConstants.TEST_FS_URI);\n\n    RowLevelPolicyChecker checker =\n        new RowLevelPolicyCheckerBuilderFactory().newPolicyCheckerBuilder(state, -1).build();\n    RowLevelPolicyCheckResults results = new RowLevelPolicyCheckResults();\n\n    FileReader<GenericRecord> fileReader = openFile(state);\n\n    for (GenericRecord datum : fileReader) {\n      Assert.assertFalse(checker.executePolicies(datum, results));\n    }\n\n    FileSystem fs = FileSystem.get(new URI(TestConstants.TEST_FS_URI), new Configuration());\n    Path outputPath = new Path(TestConstants.TEST_ERR_FILE,\n        state.getProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST).replaceAll(\"\\\\.\", \"-\") + \".err\");\n    Assert.assertTrue(fs.exists(outputPath));\n    fs.delete(new Path(TestConstants.TEST_ERR_FILE), true);\n  }\n","date":"2019-11-21 06:25:54","endLine":116,"groupId":"4164","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteToErrFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/48/eb8185f0a08da5db4d089f40b89e107c1549dd.src","preCode":"  public void testWriteToErrFile()\n      throws Exception {\n    State state = new State();\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST, \"org.apache.gobblin.qualitychecker.TestRowLevelPolicyFail\");\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST_TYPE, \"ERR_FILE\");\n    state.setProp(ConfigurationKeys.ROW_LEVEL_ERR_FILE, TestConstants.TEST_ERR_FILE);\n    state.setProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI, TestConstants.TEST_FS_URI);\n\n    RowLevelPolicyChecker checker =\n        new RowLevelPolicyCheckerBuilderFactory().newPolicyCheckerBuilder(state, -1).build();\n    RowLevelPolicyCheckResults results = new RowLevelPolicyCheckResults();\n\n    FileReader<GenericRecord> fileReader = openFile(state);\n\n    for (GenericRecord datum : fileReader) {\n      Assert.assertFalse(checker.executePolicies(datum, results));\n    }\n\n    FileSystem fs = FileSystem.get(new URI(TestConstants.TEST_FS_URI), new Configuration());\n    Path outputPath = new Path(TestConstants.TEST_ERR_FILE,\n        state.getProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST).replaceAll(\"\\\\.\", \"-\") + \".err\");\n    Assert.assertTrue(fs.exists(outputPath));\n    fs.delete(new Path(TestConstants.TEST_ERR_FILE), true);\n  }\n","realPath":"gobblin-core/src/test/java/org/apache/gobblin/qualitychecker/row/RowLevelQualityCheckerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"afdc95c6c26d67e4362d81010a52c13af5ac204d","commitMessage":"@@@[GOBBLIN-971] Enable speculative execution awareness for RowQualityChecker\n\nCloses #2819 from autumnust/PolicyCheckerfileHanld\nerContentionWhenSpeculativeExecutionHappens\n","date":"2019-11-21 06:25:54","modifiedFileCount":"1","status":"B","submitter":"autumnust"},{"authorTime":"2020-04-17 04:59:57","codes":[{"authorDate":"2019-11-21 06:25:54","commitOrder":2,"curCode":"  public void testRowLevelPolicy()\n      throws Exception {\n    State state = new State();\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST, \"org.apache.gobblin.qualitychecker.TestRowLevelPolicy\");\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST_TYPE, \"FAIL\");\n\n    RowLevelPolicyChecker checker =\n        new RowLevelPolicyCheckerBuilderFactory().newPolicyCheckerBuilder(state, -1).build();\n    RowLevelPolicyCheckResults results = new RowLevelPolicyCheckResults();\n\n    FileReader<GenericRecord> fileReader = openFile(state);\n\n    for (GenericRecord datum : fileReader) {\n      Assert.assertTrue(checker.executePolicies(datum, results));\n    }\n  }\n","date":"2019-11-21 06:25:54","endLine":61,"groupId":"101378","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRowLevelPolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/48/eb8185f0a08da5db4d089f40b89e107c1549dd.src","preCode":"  public void testRowLevelPolicy()\n      throws Exception {\n    State state = new State();\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST, \"org.apache.gobblin.qualitychecker.TestRowLevelPolicy\");\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST_TYPE, \"FAIL\");\n\n    RowLevelPolicyChecker checker =\n        new RowLevelPolicyCheckerBuilderFactory().newPolicyCheckerBuilder(state, -1).build();\n    RowLevelPolicyCheckResults results = new RowLevelPolicyCheckResults();\n\n    FileReader<GenericRecord> fileReader = openFile(state);\n\n    for (GenericRecord datum : fileReader) {\n      Assert.assertTrue(checker.executePolicies(datum, results));\n    }\n  }\n","realPath":"gobblin-core/src/test/java/org/apache/gobblin/qualitychecker/row/RowLevelQualityCheckerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"},{"authorDate":"2020-04-17 04:59:57","commitOrder":2,"curCode":"  public void testWriteToErrFile()\n      throws Exception {\n    State state = new State();\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST, \"org.apache.gobblin.qualitychecker.TestRowLevelPolicyFail\");\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST_TYPE, \"ERR_FILE\");\n    state.setProp(ROW_LEVEL_ERR_FILE, TestConstants.TEST_ERR_FILE);\n    state.setProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI, TestConstants.TEST_FS_URI);\n\n    RowLevelPolicyChecker checker =\n        new RowLevelPolicyCheckerBuilderFactory().newPolicyCheckerBuilder(state, -1).build();\n    RowLevelPolicyCheckResults results = new RowLevelPolicyCheckResults();\n\n    FileReader<GenericRecord> fileReader = openFile(state);\n\n    for (GenericRecord datum : fileReader) {\n      Assert.assertFalse(checker.executePolicies(datum, results));\n    }\n\n    FileSystem fs = FileSystem.get(new URI(TestConstants.TEST_FS_URI), new Configuration());\n    Path outputPath = new Path(TestConstants.TEST_ERR_FILE,\n        state.getProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST).replaceAll(\"\\\\.\", \"-\") + \".err\");\n    Assert.assertTrue(fs.exists(outputPath));\n    fs.delete(new Path(TestConstants.TEST_ERR_FILE), true);\n  }\n","date":"2020-04-17 04:59:57","endLine":188,"groupId":"101378","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteToErrFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/09/dc729db069abb4fe621f42a2934171746966dd.src","preCode":"  public void testWriteToErrFile()\n      throws Exception {\n    State state = new State();\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST, \"org.apache.gobblin.qualitychecker.TestRowLevelPolicyFail\");\n    state.setProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST_TYPE, \"ERR_FILE\");\n    state.setProp(ConfigurationKeys.ROW_LEVEL_ERR_FILE, TestConstants.TEST_ERR_FILE);\n    state.setProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI, TestConstants.TEST_FS_URI);\n\n    RowLevelPolicyChecker checker =\n        new RowLevelPolicyCheckerBuilderFactory().newPolicyCheckerBuilder(state, -1).build();\n    RowLevelPolicyCheckResults results = new RowLevelPolicyCheckResults();\n\n    FileReader<GenericRecord> fileReader = openFile(state);\n\n    for (GenericRecord datum : fileReader) {\n      Assert.assertFalse(checker.executePolicies(datum, results));\n    }\n\n    FileSystem fs = FileSystem.get(new URI(TestConstants.TEST_FS_URI), new Configuration());\n    Path outputPath = new Path(TestConstants.TEST_ERR_FILE,\n        state.getProp(ConfigurationKeys.ROW_LEVEL_POLICY_LIST).replaceAll(\"\\\\.\", \"-\") + \".err\");\n    Assert.assertTrue(fs.exists(outputPath));\n    fs.delete(new Path(TestConstants.TEST_ERR_FILE), true);\n  }\n","realPath":"gobblin-core/src/test/java/org/apache/gobblin/qualitychecker/row/RowLevelQualityCheckerTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"4ab42c30e20398910b9496eaece9006183ef931f","commitMessage":"@@@[GOBBLIN-1119] Enable close-on-flush for quality-checker's err-file\n\nEnable close-on-flush for quality-checker's err-\nfile\n\nAddress comments\n\nCloses #2959 from\nautumnust/qualityCheckererrFileFlush\n","date":"2020-04-17 04:59:57","modifiedFileCount":"3","status":"M","submitter":"Lei Sun"}]
