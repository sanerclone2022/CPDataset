[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  private static MutableJobCatalog createMockCatalog(final Map<URI, JobSpec> jobSpecs) {\n    MutableJobCatalog jobCatalog = Mockito.mock(MutableJobCatalog.class);\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec jobSpec = (JobSpec) invocation.getArguments()[0];\n        jobSpecs.put(jobSpec.getUri(), jobSpec);\n        return null;\n      }\n    }).when(jobCatalog).put(Mockito.any(JobSpec.class));\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        URI uri = (URI) invocation.getArguments()[0];\n        jobSpecs.remove(uri);\n        return null;\n      }\n    }).when(jobCatalog).remove(Mockito.any(URI.class));\n\n    return jobCatalog;\n  }\n","date":"2017-07-31 15:51:25","endLine":99,"groupId":"2690","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createMockCatalog","params":"(finalMap<URI@JobSpec>jobSpecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/7d/3ef37052fcbb73f162b48534ff8359da25e196.src","preCode":"  private static MutableJobCatalog createMockCatalog(final Map<URI, JobSpec> jobSpecs) {\n    MutableJobCatalog jobCatalog = Mockito.mock(MutableJobCatalog.class);\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec jobSpec = (JobSpec) invocation.getArguments()[0];\n        jobSpecs.put(jobSpec.getUri(), jobSpec);\n        return null;\n      }\n    }).when(jobCatalog).put(Mockito.any(JobSpec.class));\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        URI uri = (URI) invocation.getArguments()[0];\n        jobSpecs.remove(uri);\n        return null;\n      }\n    }).when(jobCatalog).remove(Mockito.any(URI.class));\n\n    return jobCatalog;\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/job_monitor/MockedKafkaJobMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testCallbacks()\n      throws Exception {\n    this.jobConfigDir = java.nio.file.Files.createTempDirectory(\n        String.format(\"gobblin-test_%s_job-conf\", this.getClass().getSimpleName())).toFile();\n    this.jobConfigDirPath = new Path(this.jobConfigDir.getPath());\n\n    try (PrintWriter printWriter = new PrintWriter(new Path(jobConfigDirPath, \"job3.template\").toString(), \"UTF-8\")) {\n      printWriter.println(\"param1 = value1\");\n      printWriter.println(\"param2 = value2\");\n    }\n\n    Properties properties = new Properties();\n    properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getPath());\n\n    NonObservingFSJobCatalog cat = new NonObservingFSJobCatalog(ConfigUtils.propertiesToConfig(properties));\n    cat.startAsync();\n    cat.awaitRunning(10, TimeUnit.SECONDS);\n\n    final Map<URI, JobSpec> specs = new Hashtable<>();\n\n    JobCatalogListener l = Mockito.mock(JobCatalogListener.class);\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec spec = (JobSpec) invocation.getArguments()[0];\n        specs.put(spec.getUri(), spec);\n        return null;\n      }\n    }).when(l).onAddJob(Mockito.any(JobSpec.class));\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec spec = (JobSpec) invocation.getArguments()[0];\n        specs.put(spec.getUri(), spec);\n        return null;\n      }\n    }).when(l).onUpdateJob(Mockito.any(JobSpec.class));\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        URI uri = (URI) invocation.getArguments()[0];\n        specs.remove(uri);\n        return null;\n      }\n    }).when(l).onDeleteJob(Mockito.any(URI.class), Mockito.anyString());\n\n    JobSpec js1_1 = JobSpec.builder(\"test_job1\").withVersion(\"1\").build();\n    JobSpec js1_2 = JobSpec.builder(\"test_job1\").withVersion(\"2\").build();\n    JobSpec js2 = JobSpec.builder(\"test_job2\").withVersion(\"1\").build();\n    JobSpec js3 = JobSpec.builder(\"test_job3\").withVersion(\"1\").withTemplate(new URI(\"FS:///job3.template\"))\n    .withConfig(ConfigBuilder.create().addPrimitive(\"job.template\", \"FS:///job3.template\").build()).build();\n\n    cat.addListener(l);\n\n    cat.put(js1_1);\n    Assert.assertTrue(specs.containsKey(js1_1.getUri()));\n    JobSpec js1_1_notified = specs.get(js1_1.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js1_1_notified.getConfig(), js1_1.getConfig()));\n    Assert.assertEquals(js1_1.getVersion(), js1_1_notified.getVersion());\n\n    cat.put(js1_2);\n    Assert.assertTrue(specs.containsKey(js1_2.getUri()));\n    JobSpec js1_2_notified = specs.get(js1_2.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js1_2_notified.getConfig(), js1_2.getConfig()));\n    Assert.assertEquals(js1_2.getVersion(), js1_2_notified.getVersion());\n\n    cat.put(js2);\n    Assert.assertTrue(specs.containsKey(js2.getUri()));\n    JobSpec js2_notified = specs.get(js2.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js2_notified.getConfig(), js2.getConfig()));\n    Assert.assertEquals(js2.getVersion(), js2_notified.getVersion());\n\n    cat.remove(js2.getUri());\n    Assert.assertFalse(specs.containsKey(js2.getUri()));\n\n    cat.put(js3);\n    Assert.assertTrue(specs.containsKey(js3.getUri()));\n    JobSpec js3_notified = specs.get(js3.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js3_notified.getConfig(), js3.getConfig()));\n    Assert.assertEquals(js3.getVersion(), js3_notified.getVersion());\n    ResolvedJobSpec js3_resolved = new ResolvedJobSpec(js3_notified, cat);\n    Assert.assertEquals(js3_resolved.getConfig().getString(\"param1\"), \"value1\");\n    Assert.assertEquals(js3_resolved.getConfig().getString(\"param2\"), \"value2\");\n\n    cat.stopAsync();\n    cat.awaitTerminated(10, TimeUnit.SECONDS);\n  }\n","date":"2017-07-31 15:51:25","endLine":144,"groupId":"7677","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCallbacks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/33/467667cd27008a63016386383cb724648d15a3.src","preCode":"  public void testCallbacks()\n      throws Exception {\n    this.jobConfigDir = java.nio.file.Files.createTempDirectory(\n        String.format(\"gobblin-test_%s_job-conf\", this.getClass().getSimpleName())).toFile();\n    this.jobConfigDirPath = new Path(this.jobConfigDir.getPath());\n\n    try (PrintWriter printWriter = new PrintWriter(new Path(jobConfigDirPath, \"job3.template\").toString(), \"UTF-8\")) {\n      printWriter.println(\"param1 = value1\");\n      printWriter.println(\"param2 = value2\");\n    }\n\n    Properties properties = new Properties();\n    properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getPath());\n\n    NonObservingFSJobCatalog cat = new NonObservingFSJobCatalog(ConfigUtils.propertiesToConfig(properties));\n    cat.startAsync();\n    cat.awaitRunning(10, TimeUnit.SECONDS);\n\n    final Map<URI, JobSpec> specs = new Hashtable<>();\n\n    JobCatalogListener l = Mockito.mock(JobCatalogListener.class);\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec spec = (JobSpec) invocation.getArguments()[0];\n        specs.put(spec.getUri(), spec);\n        return null;\n      }\n    }).when(l).onAddJob(Mockito.any(JobSpec.class));\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec spec = (JobSpec) invocation.getArguments()[0];\n        specs.put(spec.getUri(), spec);\n        return null;\n      }\n    }).when(l).onUpdateJob(Mockito.any(JobSpec.class));\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        URI uri = (URI) invocation.getArguments()[0];\n        specs.remove(uri);\n        return null;\n      }\n    }).when(l).onDeleteJob(Mockito.any(URI.class), Mockito.anyString());\n\n    JobSpec js1_1 = JobSpec.builder(\"test_job1\").withVersion(\"1\").build();\n    JobSpec js1_2 = JobSpec.builder(\"test_job1\").withVersion(\"2\").build();\n    JobSpec js2 = JobSpec.builder(\"test_job2\").withVersion(\"1\").build();\n    JobSpec js3 = JobSpec.builder(\"test_job3\").withVersion(\"1\").withTemplate(new URI(\"FS:///job3.template\"))\n    .withConfig(ConfigBuilder.create().addPrimitive(\"job.template\", \"FS:///job3.template\").build()).build();\n\n    cat.addListener(l);\n\n    cat.put(js1_1);\n    Assert.assertTrue(specs.containsKey(js1_1.getUri()));\n    JobSpec js1_1_notified = specs.get(js1_1.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js1_1_notified.getConfig(), js1_1.getConfig()));\n    Assert.assertEquals(js1_1.getVersion(), js1_1_notified.getVersion());\n\n    cat.put(js1_2);\n    Assert.assertTrue(specs.containsKey(js1_2.getUri()));\n    JobSpec js1_2_notified = specs.get(js1_2.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js1_2_notified.getConfig(), js1_2.getConfig()));\n    Assert.assertEquals(js1_2.getVersion(), js1_2_notified.getVersion());\n\n    cat.put(js2);\n    Assert.assertTrue(specs.containsKey(js2.getUri()));\n    JobSpec js2_notified = specs.get(js2.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js2_notified.getConfig(), js2.getConfig()));\n    Assert.assertEquals(js2.getVersion(), js2_notified.getVersion());\n\n    cat.remove(js2.getUri());\n    Assert.assertFalse(specs.containsKey(js2.getUri()));\n\n    cat.put(js3);\n    Assert.assertTrue(specs.containsKey(js3.getUri()));\n    JobSpec js3_notified = specs.get(js3.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js3_notified.getConfig(), js3.getConfig()));\n    Assert.assertEquals(js3.getVersion(), js3_notified.getVersion());\n    ResolvedJobSpec js3_resolved = new ResolvedJobSpec(js3_notified, cat);\n    Assert.assertEquals(js3_resolved.getConfig().getString(\"param1\"), \"value1\");\n    Assert.assertEquals(js3_resolved.getConfig().getString(\"param2\"), \"value2\");\n\n    cat.stopAsync();\n    cat.awaitTerminated(10, TimeUnit.SECONDS);\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/job_catalog/TestNonObservingFSJobCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2020-12-01 05:57:54","commitOrder":2,"curCode":"  private static MutableJobCatalog createMockCatalog(final Map<URI, JobSpec> jobSpecs) {\n    MutableJobCatalog jobCatalog = Mockito.mock(MutableJobCatalog.class);\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec jobSpec = (JobSpec) invocation.getArguments()[0];\n        jobSpecs.put(jobSpec.getUri(), jobSpec);\n        return null;\n      }\n    }).when(jobCatalog).put(Mockito.any(JobSpec.class));\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        URI uri = (URI) invocation.getArguments()[0];\n        jobSpecs.remove(uri);\n        return null;\n      }\n    }).when(jobCatalog).remove(Mockito.any(URI.class), Mockito.anyBoolean());\n\n    return jobCatalog;\n  }\n","date":"2020-12-01 05:57:54","endLine":96,"groupId":"2690","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createMockCatalog","params":"(finalMap<URI@JobSpec>jobSpecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/b6/8bc1a4a91d86b316b9acc91c203f78617bcd8b.src","preCode":"  private static MutableJobCatalog createMockCatalog(final Map<URI, JobSpec> jobSpecs) {\n    MutableJobCatalog jobCatalog = Mockito.mock(MutableJobCatalog.class);\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec jobSpec = (JobSpec) invocation.getArguments()[0];\n        jobSpecs.put(jobSpec.getUri(), jobSpec);\n        return null;\n      }\n    }).when(jobCatalog).put(Mockito.any(JobSpec.class));\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        URI uri = (URI) invocation.getArguments()[0];\n        jobSpecs.remove(uri);\n        return null;\n      }\n    }).when(jobCatalog).remove(Mockito.any(URI.class));\n\n    return jobCatalog;\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/job_monitor/MockedKafkaJobMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public void testCallbacks()\n      throws Exception {\n    this.jobConfigDir = java.nio.file.Files.createTempDirectory(\n        String.format(\"gobblin-test_%s_job-conf\", this.getClass().getSimpleName())).toFile();\n    this.jobConfigDirPath = new Path(this.jobConfigDir.getPath());\n\n    try (PrintWriter printWriter = new PrintWriter(new Path(jobConfigDirPath, \"job3.template\").toString(), \"UTF-8\")) {\n      printWriter.println(\"param1 = value1\");\n      printWriter.println(\"param2 = value2\");\n    }\n\n    Properties properties = new Properties();\n    properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getPath());\n\n    NonObservingFSJobCatalog cat = new NonObservingFSJobCatalog(ConfigUtils.propertiesToConfig(properties));\n    cat.startAsync();\n    cat.awaitRunning(10, TimeUnit.SECONDS);\n\n    final Map<URI, JobSpec> specs = new Hashtable<>();\n\n    JobCatalogListener l = Mockito.mock(JobCatalogListener.class);\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec spec = (JobSpec) invocation.getArguments()[0];\n        specs.put(spec.getUri(), spec);\n        return null;\n      }\n    }).when(l).onAddJob(Mockito.any(JobSpec.class));\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec spec = (JobSpec) invocation.getArguments()[0];\n        specs.put(spec.getUri(), spec);\n        return null;\n      }\n    }).when(l).onUpdateJob(Mockito.any(JobSpec.class));\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        URI uri = (URI) invocation.getArguments()[0];\n        specs.remove(uri);\n        return null;\n      }\n    }).when(l).onDeleteJob(Mockito.any(URI.class), Mockito.anyString());\n\n    JobSpec js1_1 = JobSpec.builder(\"test_job1\").withVersion(\"1\").build();\n    JobSpec js1_2 = JobSpec.builder(\"test_job1\").withVersion(\"2\").build();\n    JobSpec js2 = JobSpec.builder(\"test_job2\").withVersion(\"1\").build();\n    JobSpec js3 = JobSpec.builder(\"test_job3\").withVersion(\"1\").withTemplate(new URI(\"FS:///job3.template\"))\n    .withConfig(ConfigBuilder.create().addPrimitive(\"job.template\", \"FS:///job3.template\").build()).build();\n\n    cat.addListener(l);\n\n    cat.put(js1_1);\n    Assert.assertTrue(specs.containsKey(js1_1.getUri()));\n    JobSpec js1_1_notified = specs.get(js1_1.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js1_1_notified.getConfig(), js1_1.getConfig()));\n    Assert.assertEquals(js1_1.getVersion(), js1_1_notified.getVersion());\n\n    cat.put(js1_2);\n    Assert.assertTrue(specs.containsKey(js1_2.getUri()));\n    JobSpec js1_2_notified = specs.get(js1_2.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js1_2_notified.getConfig(), js1_2.getConfig()));\n    Assert.assertEquals(js1_2.getVersion(), js1_2_notified.getVersion());\n\n    cat.put(js2);\n    Assert.assertTrue(specs.containsKey(js2.getUri()));\n    JobSpec js2_notified = specs.get(js2.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js2_notified.getConfig(), js2.getConfig()));\n    Assert.assertEquals(js2.getVersion(), js2_notified.getVersion());\n\n    cat.remove(js2.getUri());\n    Assert.assertFalse(specs.containsKey(js2.getUri()));\n\n    cat.put(js3);\n    Assert.assertTrue(specs.containsKey(js3.getUri()));\n    JobSpec js3_notified = specs.get(js3.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js3_notified.getConfig(), js3.getConfig()));\n    Assert.assertEquals(js3.getVersion(), js3_notified.getVersion());\n    ResolvedJobSpec js3_resolved = new ResolvedJobSpec(js3_notified, cat);\n    Assert.assertEquals(js3_resolved.getConfig().getString(\"param1\"), \"value1\");\n    Assert.assertEquals(js3_resolved.getConfig().getString(\"param2\"), \"value2\");\n\n    cat.stopAsync();\n    cat.awaitTerminated(10, TimeUnit.SECONDS);\n  }\n","date":"2017-07-31 15:51:25","endLine":144,"groupId":"7677","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCallbacks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/33/467667cd27008a63016386383cb724648d15a3.src","preCode":"  public void testCallbacks()\n      throws Exception {\n    this.jobConfigDir = java.nio.file.Files.createTempDirectory(\n        String.format(\"gobblin-test_%s_job-conf\", this.getClass().getSimpleName())).toFile();\n    this.jobConfigDirPath = new Path(this.jobConfigDir.getPath());\n\n    try (PrintWriter printWriter = new PrintWriter(new Path(jobConfigDirPath, \"job3.template\").toString(), \"UTF-8\")) {\n      printWriter.println(\"param1 = value1\");\n      printWriter.println(\"param2 = value2\");\n    }\n\n    Properties properties = new Properties();\n    properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getPath());\n\n    NonObservingFSJobCatalog cat = new NonObservingFSJobCatalog(ConfigUtils.propertiesToConfig(properties));\n    cat.startAsync();\n    cat.awaitRunning(10, TimeUnit.SECONDS);\n\n    final Map<URI, JobSpec> specs = new Hashtable<>();\n\n    JobCatalogListener l = Mockito.mock(JobCatalogListener.class);\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec spec = (JobSpec) invocation.getArguments()[0];\n        specs.put(spec.getUri(), spec);\n        return null;\n      }\n    }).when(l).onAddJob(Mockito.any(JobSpec.class));\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec spec = (JobSpec) invocation.getArguments()[0];\n        specs.put(spec.getUri(), spec);\n        return null;\n      }\n    }).when(l).onUpdateJob(Mockito.any(JobSpec.class));\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        URI uri = (URI) invocation.getArguments()[0];\n        specs.remove(uri);\n        return null;\n      }\n    }).when(l).onDeleteJob(Mockito.any(URI.class), Mockito.anyString());\n\n    JobSpec js1_1 = JobSpec.builder(\"test_job1\").withVersion(\"1\").build();\n    JobSpec js1_2 = JobSpec.builder(\"test_job1\").withVersion(\"2\").build();\n    JobSpec js2 = JobSpec.builder(\"test_job2\").withVersion(\"1\").build();\n    JobSpec js3 = JobSpec.builder(\"test_job3\").withVersion(\"1\").withTemplate(new URI(\"FS:///job3.template\"))\n    .withConfig(ConfigBuilder.create().addPrimitive(\"job.template\", \"FS:///job3.template\").build()).build();\n\n    cat.addListener(l);\n\n    cat.put(js1_1);\n    Assert.assertTrue(specs.containsKey(js1_1.getUri()));\n    JobSpec js1_1_notified = specs.get(js1_1.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js1_1_notified.getConfig(), js1_1.getConfig()));\n    Assert.assertEquals(js1_1.getVersion(), js1_1_notified.getVersion());\n\n    cat.put(js1_2);\n    Assert.assertTrue(specs.containsKey(js1_2.getUri()));\n    JobSpec js1_2_notified = specs.get(js1_2.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js1_2_notified.getConfig(), js1_2.getConfig()));\n    Assert.assertEquals(js1_2.getVersion(), js1_2_notified.getVersion());\n\n    cat.put(js2);\n    Assert.assertTrue(specs.containsKey(js2.getUri()));\n    JobSpec js2_notified = specs.get(js2.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js2_notified.getConfig(), js2.getConfig()));\n    Assert.assertEquals(js2.getVersion(), js2_notified.getVersion());\n\n    cat.remove(js2.getUri());\n    Assert.assertFalse(specs.containsKey(js2.getUri()));\n\n    cat.put(js3);\n    Assert.assertTrue(specs.containsKey(js3.getUri()));\n    JobSpec js3_notified = specs.get(js3.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js3_notified.getConfig(), js3.getConfig()));\n    Assert.assertEquals(js3.getVersion(), js3_notified.getVersion());\n    ResolvedJobSpec js3_resolved = new ResolvedJobSpec(js3_notified, cat);\n    Assert.assertEquals(js3_resolved.getConfig().getString(\"param1\"), \"value1\");\n    Assert.assertEquals(js3_resolved.getConfig().getString(\"param2\"), \"value2\");\n\n    cat.stopAsync();\n    cat.awaitTerminated(10, TimeUnit.SECONDS);\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/job_catalog/TestNonObservingFSJobCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"}],"commitId":"0ac0671251f39f9a922e68267894099cb668e896","commitMessage":"@@@[GOBBLIN-1319] fix cancellation in gobblin cluster jobs\n\nCloses #3155 from arjun4084346/flowCancel\n","date":"2020-12-01 05:57:54","modifiedFileCount":"17","status":"M","submitter":"Arjun"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2021-05-11 08:17:01","commitOrder":3,"curCode":"  private static MutableJobCatalog createMockCatalog(final Map<URI, JobSpec> jobSpecs) {\n    MutableJobCatalog jobCatalog = Mockito.mock(MutableJobCatalog.class);\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec jobSpec = (JobSpec) invocation.getArguments()[0];\n        jobSpecs.put(jobSpec.getUri(), jobSpec);\n        return null;\n      }\n    }).when(jobCatalog).put(Mockito.any(JobSpec.class));\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        URI uri = (URI) invocation.getArguments()[0];\n        jobSpecs.remove(uri);\n        return null;\n      }\n    }).when(jobCatalog).remove(Mockito.any(URI.class));\n\n    return jobCatalog;\n  }\n","date":"2021-05-11 08:17:01","endLine":95,"groupId":"10742","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"createMockCatalog","params":"(finalMap<URI@JobSpec>jobSpecs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2d/0c64d8aa62daf7831d2c76bfb5a7503c3132b0.src","preCode":"  private static MutableJobCatalog createMockCatalog(final Map<URI, JobSpec> jobSpecs) {\n    MutableJobCatalog jobCatalog = Mockito.mock(MutableJobCatalog.class);\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec jobSpec = (JobSpec) invocation.getArguments()[0];\n        jobSpecs.put(jobSpec.getUri(), jobSpec);\n        return null;\n      }\n    }).when(jobCatalog).put(Mockito.any(JobSpec.class));\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        URI uri = (URI) invocation.getArguments()[0];\n        jobSpecs.remove(uri);\n        return null;\n      }\n    }).when(jobCatalog).remove(Mockito.any(URI.class), Mockito.anyBoolean());\n\n    return jobCatalog;\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/job_monitor/MockedKafkaJobMonitor.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":3,"curCode":"  public void testCallbacks()\n      throws Exception {\n    this.jobConfigDir = java.nio.file.Files.createTempDirectory(\n        String.format(\"gobblin-test_%s_job-conf\", this.getClass().getSimpleName())).toFile();\n    this.jobConfigDirPath = new Path(this.jobConfigDir.getPath());\n\n    try (PrintWriter printWriter = new PrintWriter(new Path(jobConfigDirPath, \"job3.template\").toString(), \"UTF-8\")) {\n      printWriter.println(\"param1 = value1\");\n      printWriter.println(\"param2 = value2\");\n    }\n\n    Properties properties = new Properties();\n    properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getPath());\n\n    NonObservingFSJobCatalog cat = new NonObservingFSJobCatalog(ConfigUtils.propertiesToConfig(properties));\n    cat.startAsync();\n    cat.awaitRunning(10, TimeUnit.SECONDS);\n\n    final Map<URI, JobSpec> specs = new Hashtable<>();\n\n    JobCatalogListener l = Mockito.mock(JobCatalogListener.class);\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec spec = (JobSpec) invocation.getArguments()[0];\n        specs.put(spec.getUri(), spec);\n        return null;\n      }\n    }).when(l).onAddJob(Mockito.any(JobSpec.class));\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec spec = (JobSpec) invocation.getArguments()[0];\n        specs.put(spec.getUri(), spec);\n        return null;\n      }\n    }).when(l).onUpdateJob(Mockito.any(JobSpec.class));\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        URI uri = (URI) invocation.getArguments()[0];\n        specs.remove(uri);\n        return null;\n      }\n    }).when(l).onDeleteJob(Mockito.any(URI.class), Mockito.anyString());\n\n    JobSpec js1_1 = JobSpec.builder(\"test_job1\").withVersion(\"1\").build();\n    JobSpec js1_2 = JobSpec.builder(\"test_job1\").withVersion(\"2\").build();\n    JobSpec js2 = JobSpec.builder(\"test_job2\").withVersion(\"1\").build();\n    JobSpec js3 = JobSpec.builder(\"test_job3\").withVersion(\"1\").withTemplate(new URI(\"FS:///job3.template\"))\n    .withConfig(ConfigBuilder.create().addPrimitive(\"job.template\", \"FS:///job3.template\").build()).build();\n\n    cat.addListener(l);\n\n    cat.put(js1_1);\n    Assert.assertTrue(specs.containsKey(js1_1.getUri()));\n    JobSpec js1_1_notified = specs.get(js1_1.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js1_1_notified.getConfig(), js1_1.getConfig()));\n    Assert.assertEquals(js1_1.getVersion(), js1_1_notified.getVersion());\n\n    cat.put(js1_2);\n    Assert.assertTrue(specs.containsKey(js1_2.getUri()));\n    JobSpec js1_2_notified = specs.get(js1_2.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js1_2_notified.getConfig(), js1_2.getConfig()));\n    Assert.assertEquals(js1_2.getVersion(), js1_2_notified.getVersion());\n\n    cat.put(js2);\n    Assert.assertTrue(specs.containsKey(js2.getUri()));\n    JobSpec js2_notified = specs.get(js2.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js2_notified.getConfig(), js2.getConfig()));\n    Assert.assertEquals(js2.getVersion(), js2_notified.getVersion());\n\n    cat.remove(js2.getUri());\n    Assert.assertFalse(specs.containsKey(js2.getUri()));\n\n    cat.put(js3);\n    Assert.assertTrue(specs.containsKey(js3.getUri()));\n    JobSpec js3_notified = specs.get(js3.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js3_notified.getConfig(), js3.getConfig()));\n    Assert.assertEquals(js3.getVersion(), js3_notified.getVersion());\n    ResolvedJobSpec js3_resolved = new ResolvedJobSpec(js3_notified, cat);\n    Assert.assertEquals(js3_resolved.getConfig().getString(\"param1\"), \"value1\");\n    Assert.assertEquals(js3_resolved.getConfig().getString(\"param2\"), \"value2\");\n\n    cat.stopAsync();\n    cat.awaitTerminated(10, TimeUnit.SECONDS);\n  }\n","date":"2017-07-31 15:51:25","endLine":144,"groupId":"10742","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCallbacks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/33/467667cd27008a63016386383cb724648d15a3.src","preCode":"  public void testCallbacks()\n      throws Exception {\n    this.jobConfigDir = java.nio.file.Files.createTempDirectory(\n        String.format(\"gobblin-test_%s_job-conf\", this.getClass().getSimpleName())).toFile();\n    this.jobConfigDirPath = new Path(this.jobConfigDir.getPath());\n\n    try (PrintWriter printWriter = new PrintWriter(new Path(jobConfigDirPath, \"job3.template\").toString(), \"UTF-8\")) {\n      printWriter.println(\"param1 = value1\");\n      printWriter.println(\"param2 = value2\");\n    }\n\n    Properties properties = new Properties();\n    properties.setProperty(ConfigurationKeys.JOB_CONFIG_FILE_GENERAL_PATH_KEY, this.jobConfigDir.getPath());\n\n    NonObservingFSJobCatalog cat = new NonObservingFSJobCatalog(ConfigUtils.propertiesToConfig(properties));\n    cat.startAsync();\n    cat.awaitRunning(10, TimeUnit.SECONDS);\n\n    final Map<URI, JobSpec> specs = new Hashtable<>();\n\n    JobCatalogListener l = Mockito.mock(JobCatalogListener.class);\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec spec = (JobSpec) invocation.getArguments()[0];\n        specs.put(spec.getUri(), spec);\n        return null;\n      }\n    }).when(l).onAddJob(Mockito.any(JobSpec.class));\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        JobSpec spec = (JobSpec) invocation.getArguments()[0];\n        specs.put(spec.getUri(), spec);\n        return null;\n      }\n    }).when(l).onUpdateJob(Mockito.any(JobSpec.class));\n\n    Mockito.doAnswer(new Answer<Void>() {\n      @Override\n      public Void answer(InvocationOnMock invocation)\n          throws Throwable {\n        URI uri = (URI) invocation.getArguments()[0];\n        specs.remove(uri);\n        return null;\n      }\n    }).when(l).onDeleteJob(Mockito.any(URI.class), Mockito.anyString());\n\n    JobSpec js1_1 = JobSpec.builder(\"test_job1\").withVersion(\"1\").build();\n    JobSpec js1_2 = JobSpec.builder(\"test_job1\").withVersion(\"2\").build();\n    JobSpec js2 = JobSpec.builder(\"test_job2\").withVersion(\"1\").build();\n    JobSpec js3 = JobSpec.builder(\"test_job3\").withVersion(\"1\").withTemplate(new URI(\"FS:///job3.template\"))\n    .withConfig(ConfigBuilder.create().addPrimitive(\"job.template\", \"FS:///job3.template\").build()).build();\n\n    cat.addListener(l);\n\n    cat.put(js1_1);\n    Assert.assertTrue(specs.containsKey(js1_1.getUri()));\n    JobSpec js1_1_notified = specs.get(js1_1.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js1_1_notified.getConfig(), js1_1.getConfig()));\n    Assert.assertEquals(js1_1.getVersion(), js1_1_notified.getVersion());\n\n    cat.put(js1_2);\n    Assert.assertTrue(specs.containsKey(js1_2.getUri()));\n    JobSpec js1_2_notified = specs.get(js1_2.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js1_2_notified.getConfig(), js1_2.getConfig()));\n    Assert.assertEquals(js1_2.getVersion(), js1_2_notified.getVersion());\n\n    cat.put(js2);\n    Assert.assertTrue(specs.containsKey(js2.getUri()));\n    JobSpec js2_notified = specs.get(js2.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js2_notified.getConfig(), js2.getConfig()));\n    Assert.assertEquals(js2.getVersion(), js2_notified.getVersion());\n\n    cat.remove(js2.getUri());\n    Assert.assertFalse(specs.containsKey(js2.getUri()));\n\n    cat.put(js3);\n    Assert.assertTrue(specs.containsKey(js3.getUri()));\n    JobSpec js3_notified = specs.get(js3.getUri());\n    Assert.assertTrue(ConfigUtils.verifySubset(js3_notified.getConfig(), js3.getConfig()));\n    Assert.assertEquals(js3.getVersion(), js3_notified.getVersion());\n    ResolvedJobSpec js3_resolved = new ResolvedJobSpec(js3_notified, cat);\n    Assert.assertEquals(js3_resolved.getConfig().getString(\"param1\"), \"value1\");\n    Assert.assertEquals(js3_resolved.getConfig().getString(\"param2\"), \"value2\");\n\n    cat.stopAsync();\n    cat.awaitTerminated(10, TimeUnit.SECONDS);\n  }\n","realPath":"gobblin-runtime/src/test/java/org/apache/gobblin/runtime/job_catalog/TestNonObservingFSJobCatalog.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"}],"commitId":"ae62d77a0b3b0d123cea811b00bd363b6c6d30f3","commitMessage":"@@@[GOBBLIN-1441] separate delete and cancel specs in KafkaJobMonitor\n\nCloses #3276 from\narjun4084346/cancelDeleteInCluster\n","date":"2021-05-11 08:17:01","modifiedFileCount":"13","status":"M","submitter":"Arjun"}]
