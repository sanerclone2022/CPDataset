[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  protected InstrumentedDataWriterBase(State state, Optional<Class<?>> classTag) {\n    this.closer = Closer.create();\n    this.instrumentationEnabled = GobblinMetrics.isEnabled(state);\n    this.metricContext = this.closer.register(Instrumented.getMetricContext(state, classTag.or(this.getClass())));\n\n    if (this.instrumentationEnabled) {\n      this.writerMetricsUpdater = Optional.of(buildWriterMetricsUpdater());\n      scheduleWriterMetricsUpdater(this.writerMetricsUpdater.get(), getWriterMetricsUpdaterInterval(state));\n    } else {\n      this.writerMetricsUpdater = Optional.absent();\n    }\n\n    regenerateMetrics();\n  }\n","date":"2017-07-31 15:51:25","endLine":90,"groupId":"5752","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"InstrumentedDataWriterBase","params":"(Statestate@Optional<Class<?>>classTag)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d5/b83cb6ed9d1b20a08afb2929063b92fc09d4f0.src","preCode":"  protected InstrumentedDataWriterBase(State state, Optional<Class<?>> classTag) {\n    this.closer = Closer.create();\n    this.instrumentationEnabled = GobblinMetrics.isEnabled(state);\n    this.metricContext = this.closer.register(Instrumented.getMetricContext(state, classTag.or(this.getClass())));\n\n    if (this.instrumentationEnabled) {\n      this.writerMetricsUpdater = Optional.of(buildWriterMetricsUpdater());\n      scheduleWriterMetricsUpdater(this.writerMetricsUpdater.get(), getWriterMetricsUpdaterInterval(state));\n    } else {\n      this.writerMetricsUpdater = Optional.absent();\n    }\n\n    regenerateMetrics();\n  }\n","realPath":"gobblin-core-base/src/main/java/org/apache/gobblin/instrumented/writer/InstrumentedDataWriterBase.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  protected InstrumentedExtractorBase(WorkUnitState workUnitState, Optional<Class<?>> classTag) {\n    super();\n    this.closer = Closer.create();\n\n    this.instrumentationEnabled = GobblinMetrics.isEnabled(workUnitState);\n\n    this.metricContext = this.closer.register(\n        Instrumented.getMetricContext(workUnitState, classTag.or(this.getClass()), generateTags(workUnitState)));\n\n    regenerateMetrics();\n  }\n","date":"2017-07-31 15:51:25","endLine":84,"groupId":"5752","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"InstrumentedExtractorBase","params":"(WorkUnitStateworkUnitState@Optional<Class<?>>classTag)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/35/de7121b3f3d283cc6cc1d4520855ccc68b552a.src","preCode":"  protected InstrumentedExtractorBase(WorkUnitState workUnitState, Optional<Class<?>> classTag) {\n    super();\n    this.closer = Closer.create();\n\n    this.instrumentationEnabled = GobblinMetrics.isEnabled(workUnitState);\n\n    this.metricContext = this.closer.register(\n        Instrumented.getMetricContext(workUnitState, classTag.or(this.getClass()), generateTags(workUnitState)));\n\n    regenerateMetrics();\n  }\n","realPath":"gobblin-core-base/src/main/java/org/apache/gobblin/instrumented/extractor/InstrumentedExtractorBase.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2021-08-18 07:06:31","commitOrder":2,"curCode":"  protected InstrumentedDataWriterBase(State state, Optional<Class<?>> classTag) {\n    this.closer = Closer.create();\n    this.instrumentationEnabled = GobblinMetrics.isEnabled(state);\n    this.metricContext = this.closer.register(Instrumented.getMetricContext(state, classTag.or(this.getClass())));\n\n    if (this.instrumentationEnabled) {\n      this.writerMetricsUpdateExecutor = Optional.of(buildWriterMetricsUpdateExecutor());\n      scheduleWriterMetricsUpdater(this.writerMetricsUpdateExecutor.get(), getWriterMetricsUpdaterInterval(state));\n    } else {\n      this.writerMetricsUpdateExecutor = Optional.absent();\n    }\n\n    regenerateMetrics();\n  }\n","date":"2021-08-18 07:06:31","endLine":90,"groupId":"1073","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"InstrumentedDataWriterBase","params":"(Statestate@Optional<Class<?>>classTag)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2d/3f72ffc4ca5c34151e9d18145992316a0fa6f2.src","preCode":"  protected InstrumentedDataWriterBase(State state, Optional<Class<?>> classTag) {\n    this.closer = Closer.create();\n    this.instrumentationEnabled = GobblinMetrics.isEnabled(state);\n    this.metricContext = this.closer.register(Instrumented.getMetricContext(state, classTag.or(this.getClass())));\n\n    if (this.instrumentationEnabled) {\n      this.writerMetricsUpdater = Optional.of(buildWriterMetricsUpdater());\n      scheduleWriterMetricsUpdater(this.writerMetricsUpdater.get(), getWriterMetricsUpdaterInterval(state));\n    } else {\n      this.writerMetricsUpdater = Optional.absent();\n    }\n\n    regenerateMetrics();\n  }\n","realPath":"gobblin-core-base/src/main/java/org/apache/gobblin/instrumented/writer/InstrumentedDataWriterBase.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  protected InstrumentedExtractorBase(WorkUnitState workUnitState, Optional<Class<?>> classTag) {\n    super();\n    this.closer = Closer.create();\n\n    this.instrumentationEnabled = GobblinMetrics.isEnabled(workUnitState);\n\n    this.metricContext = this.closer.register(\n        Instrumented.getMetricContext(workUnitState, classTag.or(this.getClass()), generateTags(workUnitState)));\n\n    regenerateMetrics();\n  }\n","date":"2017-07-31 15:51:25","endLine":84,"groupId":"1073","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"InstrumentedExtractorBase","params":"(WorkUnitStateworkUnitState@Optional<Class<?>>classTag)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/35/de7121b3f3d283cc6cc1d4520855ccc68b552a.src","preCode":"  protected InstrumentedExtractorBase(WorkUnitState workUnitState, Optional<Class<?>> classTag) {\n    super();\n    this.closer = Closer.create();\n\n    this.instrumentationEnabled = GobblinMetrics.isEnabled(workUnitState);\n\n    this.metricContext = this.closer.register(\n        Instrumented.getMetricContext(workUnitState, classTag.or(this.getClass()), generateTags(workUnitState)));\n\n    regenerateMetrics();\n  }\n","realPath":"gobblin-core-base/src/main/java/org/apache/gobblin/instrumented/extractor/InstrumentedExtractorBase.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"N"}],"commitId":"10f1dbd8943a271fc3fb605cd4e5a7553339890a","commitMessage":"@@@[GOBBLIN-1516] Only schedule TaskMetricsUpdateder when metric-reporting is enabled by config (#3365)\n\n* Only schedule TaskMetricsUpdateder is metrics reporting is enabled: The removal of MetricsUpdateder is happening only after task's commit.  where all task objects will be holding up until all other tasks completed\n\n* Populate the changes into all implementation of registerNewTask","date":"2021-08-18 07:06:31","modifiedFileCount":"4","status":"M","submitter":"Lei"}]
