[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void commit()\n      throws IOException {\n    int writersCommitted = 0;\n    for (Map.Entry<GenericRecord, DataWriter<D>> entry : this.partitionWriters.asMap().entrySet()) {\n      try {\n        entry.getValue().commit();\n        writersCommitted++;\n      } catch (Throwable throwable) {\n        log.error(String.format(\"Failed to commit writer for partition %s.\", entry.getKey()), throwable);\n      }\n    }\n    if (writersCommitted < this.partitionWriters.asMap().size()) {\n      throw new IOException(\"Failed to commit all writers.\");\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":183,"groupId":"4256","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"commit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d9/1573024054c82a7d152898e0f3695bec082bd3.src","preCode":"  public void commit()\n      throws IOException {\n    int writersCommitted = 0;\n    for (Map.Entry<GenericRecord, DataWriter<D>> entry : this.partitionWriters.asMap().entrySet()) {\n      try {\n        entry.getValue().commit();\n        writersCommitted++;\n      } catch (Throwable throwable) {\n        log.error(String.format(\"Failed to commit writer for partition %s.\", entry.getKey()), throwable);\n      }\n    }\n    if (writersCommitted < this.partitionWriters.asMap().size()) {\n      throw new IOException(\"Failed to commit all writers.\");\n    }\n  }\n","realPath":"gobblin-core/src/main/java/org/apache/gobblin/writer/PartitionedDataWriter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void cleanup()\n      throws IOException {\n    int writersCleanedUp = 0;\n    for (Map.Entry<GenericRecord, DataWriter<D>> entry : this.partitionWriters.asMap().entrySet()) {\n      try {\n        entry.getValue().cleanup();\n        writersCleanedUp++;\n      } catch (Throwable throwable) {\n        log.error(String.format(\"Failed to cleanup writer for partition %s.\", entry.getKey()));\n      }\n    }\n    if (writersCleanedUp < this.partitionWriters.asMap().size()) {\n      throw new IOException(\"Failed to clean up all writers.\");\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":200,"groupId":"4936","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d9/1573024054c82a7d152898e0f3695bec082bd3.src","preCode":"  public void cleanup()\n      throws IOException {\n    int writersCleanedUp = 0;\n    for (Map.Entry<GenericRecord, DataWriter<D>> entry : this.partitionWriters.asMap().entrySet()) {\n      try {\n        entry.getValue().cleanup();\n        writersCleanedUp++;\n      } catch (Throwable throwable) {\n        log.error(String.format(\"Failed to cleanup writer for partition %s.\", entry.getKey()));\n      }\n    }\n    if (writersCleanedUp < this.partitionWriters.asMap().size()) {\n      throw new IOException(\"Failed to clean up all writers.\");\n    }\n  }\n","realPath":"gobblin-core/src/main/java/org/apache/gobblin/writer/PartitionedDataWriter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2020-02-01 00:51:48","codes":[{"authorDate":"2020-02-01 00:51:48","commitOrder":2,"curCode":"  public synchronized void commit()\n      throws IOException {\n    int writersCommitted = 0;\n    for (Map.Entry<GenericRecord, DataWriter<D>> entry : this.partitionWriters.asMap().entrySet()) {\n      try {\n        entry.getValue().commit();\n        writersCommitted++;\n      } catch (Throwable throwable) {\n        log.error(String.format(\"Failed to commit writer for partition %s.\", entry.getKey()), throwable);\n      }\n    }\n    if (writersCommitted < this.partitionWriters.asMap().size()) {\n      throw new IOException(\"Failed to commit all writers.\");\n    }\n  }\n","date":"2020-02-01 00:51:48","endLine":266,"groupId":"4256","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"commit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d7/d2de239e8cec3d3a04d4297cc0dd342f6d2bbb.src","preCode":"  public void commit()\n      throws IOException {\n    int writersCommitted = 0;\n    for (Map.Entry<GenericRecord, DataWriter<D>> entry : this.partitionWriters.asMap().entrySet()) {\n      try {\n        entry.getValue().commit();\n        writersCommitted++;\n      } catch (Throwable throwable) {\n        log.error(String.format(\"Failed to commit writer for partition %s.\", entry.getKey()), throwable);\n      }\n    }\n    if (writersCommitted < this.partitionWriters.asMap().size()) {\n      throw new IOException(\"Failed to commit all writers.\");\n    }\n  }\n","realPath":"gobblin-core/src/main/java/org/apache/gobblin/writer/PartitionedDataWriter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2020-02-01 00:51:48","commitOrder":2,"curCode":"  public synchronized void cleanup()\n      throws IOException {\n    int writersCleanedUp = 0;\n    for (Map.Entry<GenericRecord, DataWriter<D>> entry : this.partitionWriters.asMap().entrySet()) {\n      try {\n        entry.getValue().cleanup();\n        writersCleanedUp++;\n      } catch (Throwable throwable) {\n        log.error(String.format(\"Failed to cleanup writer for partition %s.\", entry.getKey()));\n      }\n    }\n    if (writersCleanedUp < this.partitionWriters.asMap().size()) {\n      throw new IOException(\"Failed to clean up all writers.\");\n    }\n  }\n","date":"2020-02-01 00:51:48","endLine":283,"groupId":"4936","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d7/d2de239e8cec3d3a04d4297cc0dd342f6d2bbb.src","preCode":"  public void cleanup()\n      throws IOException {\n    int writersCleanedUp = 0;\n    for (Map.Entry<GenericRecord, DataWriter<D>> entry : this.partitionWriters.asMap().entrySet()) {\n      try {\n        entry.getValue().cleanup();\n        writersCleanedUp++;\n      } catch (Throwable throwable) {\n        log.error(String.format(\"Failed to cleanup writer for partition %s.\", entry.getKey()));\n      }\n    }\n    if (writersCleanedUp < this.partitionWriters.asMap().size()) {\n      throw new IOException(\"Failed to clean up all writers.\");\n    }\n  }\n","realPath":"gobblin-core/src/main/java/org/apache/gobblin/writer/PartitionedDataWriter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"}],"commitId":"c5c050d22b4899dcad9d0d7519693e200d531df8","commitMessage":"@@@[GOBBLIN-1034] Ensure underlying writers are expired from the Partitio?\n\nCloses #2876 from sv2000/partitionedWritersLeak\n","date":"2020-02-01 00:51:48","modifiedFileCount":"2","status":"M","submitter":"sv2000"},{"authorTime":"2020-05-13 07:52:51","codes":[{"authorDate":"2020-02-01 00:51:48","commitOrder":3,"curCode":"  public synchronized void commit()\n      throws IOException {\n    int writersCommitted = 0;\n    for (Map.Entry<GenericRecord, DataWriter<D>> entry : this.partitionWriters.asMap().entrySet()) {\n      try {\n        entry.getValue().commit();\n        writersCommitted++;\n      } catch (Throwable throwable) {\n        log.error(String.format(\"Failed to commit writer for partition %s.\", entry.getKey()), throwable);\n      }\n    }\n    if (writersCommitted < this.partitionWriters.asMap().size()) {\n      throw new IOException(\"Failed to commit all writers.\");\n    }\n  }\n","date":"2020-02-01 00:51:48","endLine":266,"groupId":"101402","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"commit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/d7/d2de239e8cec3d3a04d4297cc0dd342f6d2bbb.src","preCode":"  public synchronized void commit()\n      throws IOException {\n    int writersCommitted = 0;\n    for (Map.Entry<GenericRecord, DataWriter<D>> entry : this.partitionWriters.asMap().entrySet()) {\n      try {\n        entry.getValue().commit();\n        writersCommitted++;\n      } catch (Throwable throwable) {\n        log.error(String.format(\"Failed to commit writer for partition %s.\", entry.getKey()), throwable);\n      }\n    }\n    if (writersCommitted < this.partitionWriters.asMap().size()) {\n      throw new IOException(\"Failed to commit all writers.\");\n    }\n  }\n","realPath":"gobblin-core/src/main/java/org/apache/gobblin/writer/PartitionedDataWriter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"},{"authorDate":"2020-05-13 07:52:51","commitOrder":3,"curCode":"  public synchronized void cleanup()\n      throws IOException {\n    int writersCleanedUp = 0;\n    for (Map.Entry<GenericRecord, DataWriter<D>> entry : this.partitionWriters.asMap().entrySet()) {\n      try {\n        entry.getValue().cleanup();\n        writersCleanedUp++;\n      } catch (Throwable throwable) {\n        log.error(String.format(\"Failed to cleanup writer for partition %s.\", entry.getKey()), throwable);\n      }\n    }\n    if (writersCleanedUp < this.partitionWriters.asMap().size()) {\n      throw new IOException(\"Failed to clean up all writers.\");\n    }\n  }\n","date":"2020-05-13 07:52:51","endLine":283,"groupId":"101402","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"cleanup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/3e/bba0ec402f3e87542171cc6bc37a92a4cfc9ab.src","preCode":"  public synchronized void cleanup()\n      throws IOException {\n    int writersCleanedUp = 0;\n    for (Map.Entry<GenericRecord, DataWriter<D>> entry : this.partitionWriters.asMap().entrySet()) {\n      try {\n        entry.getValue().cleanup();\n        writersCleanedUp++;\n      } catch (Throwable throwable) {\n        log.error(String.format(\"Failed to cleanup writer for partition %s.\", entry.getKey()));\n      }\n    }\n    if (writersCleanedUp < this.partitionWriters.asMap().size()) {\n      throw new IOException(\"Failed to clean up all writers.\");\n    }\n  }\n","realPath":"gobblin-core/src/main/java/org/apache/gobblin/writer/PartitionedDataWriter.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"}],"commitId":"5ece4e15140fb34a2a17f4b7b425c4252ca0ea02","commitMessage":"@@@[GOBBLIN-1146] Allow configuring autocommit in JDBCWriters\n\nCloses #2984 from zxcware/jdbc\n","date":"2020-05-13 07:52:51","modifiedFileCount":"4","status":"M","submitter":"zhchen"}]
