[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public Collection<HiveDatasetVersion> findDatasetVersions(Dataset dataset) throws IOException {\n    if (!(dataset instanceof HiveDataset)) {\n      throw new IllegalArgumentException(\"HiveDatasetVersionFinder is only compatible with HiveDataset\");\n    }\n    final HiveDataset hiveDataset = (HiveDataset) dataset;\n\n    if (!HiveUtils.isPartitioned(hiveDataset.getTable())) {\n      throw new IllegalArgumentException(\"HiveDatasetVersionFinder is only compatible with partitioned hive tables\");\n    }\n\n    try (AutoReturnableObject<IMetaStoreClient> client = hiveDataset.getClientPool().getClient()) {\n\n      List<Partition> partitions = HiveUtils.getPartitions(client.get(), hiveDataset.getTable(), Optional.<String> absent());\n      return Lists.newArrayList(Iterables.filter(Iterables.transform(partitions, new Function<Partition, HiveDatasetVersion>() {\n\n        @Override\n        public HiveDatasetVersion apply(Partition partition) {\n          try {\n            return getDatasetVersion(partition);\n          } catch (Throwable e) {\n            log.warn(String.format(\"Failed to get DatasetVersion %s. Skipping.\", partition.getCompleteName()), e);\n            return null;\n          }\n        }\n      }), Predicates.notNull()));\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":91,"groupId":"7218","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"findDatasetVersions","params":"(Datasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/ce/167b454628f4abfa2a4804e2de30afb2255ba2.src","preCode":"  public Collection<HiveDatasetVersion> findDatasetVersions(Dataset dataset) throws IOException {\n    if (!(dataset instanceof HiveDataset)) {\n      throw new IllegalArgumentException(\"HiveDatasetVersionFinder is only compatible with HiveDataset\");\n    }\n    final HiveDataset hiveDataset = (HiveDataset) dataset;\n\n    if (!HiveUtils.isPartitioned(hiveDataset.getTable())) {\n      throw new IllegalArgumentException(\"HiveDatasetVersionFinder is only compatible with partitioned hive tables\");\n    }\n\n    try (AutoReturnableObject<IMetaStoreClient> client = hiveDataset.getClientPool().getClient()) {\n\n      List<Partition> partitions = HiveUtils.getPartitions(client.get(), hiveDataset.getTable(), Optional.<String> absent());\n      return Lists.newArrayList(Iterables.filter(Iterables.transform(partitions, new Function<Partition, HiveDatasetVersion>() {\n\n        @Override\n        public HiveDatasetVersion apply(Partition partition) {\n          try {\n            return getDatasetVersion(partition);\n          } catch (Throwable e) {\n            log.warn(String.format(\"Failed to get DatasetVersion %s. Skipping.\", partition.getCompleteName()), e);\n            return null;\n          }\n        }\n      }), Predicates.notNull()));\n    }\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/version/finder/AbstractHiveDatasetVersionFinder.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public List<Partition> getPartitionsFromDataset() throws IOException{\n    try (AutoReturnableObject<IMetaStoreClient> client = getClientPool().getClient()) {\n      List<Partition> partitions =\n          HiveUtils.getPartitions(client.get(), getTable(), Optional.<String>absent());\n      return sortPartitions(partitions);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":322,"groupId":"2136","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getPartitionsFromDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2a/f2f804294c178167c5d19e83122237d2f481fc.src","preCode":"  public List<Partition> getPartitionsFromDataset() throws IOException{\n    try (AutoReturnableObject<IMetaStoreClient> client = getClientPool().getClient()) {\n      List<Partition> partitions =\n          HiveUtils.getPartitions(client.get(), getTable(), Optional.<String>absent());\n      return sortPartitions(partitions);\n    }\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/copy/hive/HiveDataset.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2019-10-02 06:46:59","commitOrder":2,"curCode":"  public Collection<HiveDatasetVersion> findDatasetVersions(Dataset dataset) throws IOException {\n    if (!(dataset instanceof HiveDataset)) {\n      throw new IllegalArgumentException(\"HiveDatasetVersionFinder is only compatible with HiveDataset\");\n    }\n    final HiveDataset hiveDataset = (HiveDataset) dataset;\n\n    if (!hiveDataset.getTable().isPartitioned()) {\n      throw new IllegalArgumentException(\"HiveDatasetVersionFinder is only compatible with partitioned hive tables\");\n    }\n\n    try (AutoReturnableObject<IMetaStoreClient> client = hiveDataset.getClientPool().getClient()) {\n\n      List<Partition> partitions = HiveUtils.getPartitions(client.get(), hiveDataset.getTable(), Optional.<String> absent());\n      return Lists.newArrayList(Iterables.filter(Iterables.transform(partitions, new Function<Partition, HiveDatasetVersion>() {\n\n        @Override\n        public HiveDatasetVersion apply(Partition partition) {\n          try {\n            return getDatasetVersion(partition);\n          } catch (Throwable e) {\n            log.warn(String.format(\"Failed to get DatasetVersion %s. Skipping.\", partition.getCompleteName()), e);\n            return null;\n          }\n        }\n      }), Predicates.notNull()));\n    }\n  }\n","date":"2019-10-02 06:46:59","endLine":91,"groupId":"101706","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"findDatasetVersions","params":"(Datasetdataset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/f1/2204862bb2897e4a3f17701af3d55b4f89155c.src","preCode":"  public Collection<HiveDatasetVersion> findDatasetVersions(Dataset dataset) throws IOException {\n    if (!(dataset instanceof HiveDataset)) {\n      throw new IllegalArgumentException(\"HiveDatasetVersionFinder is only compatible with HiveDataset\");\n    }\n    final HiveDataset hiveDataset = (HiveDataset) dataset;\n\n    if (!HiveUtils.isPartitioned(hiveDataset.getTable())) {\n      throw new IllegalArgumentException(\"HiveDatasetVersionFinder is only compatible with partitioned hive tables\");\n    }\n\n    try (AutoReturnableObject<IMetaStoreClient> client = hiveDataset.getClientPool().getClient()) {\n\n      List<Partition> partitions = HiveUtils.getPartitions(client.get(), hiveDataset.getTable(), Optional.<String> absent());\n      return Lists.newArrayList(Iterables.filter(Iterables.transform(partitions, new Function<Partition, HiveDatasetVersion>() {\n\n        @Override\n        public HiveDatasetVersion apply(Partition partition) {\n          try {\n            return getDatasetVersion(partition);\n          } catch (Throwable e) {\n            log.warn(String.format(\"Failed to get DatasetVersion %s. Skipping.\", partition.getCompleteName()), e);\n            return null;\n          }\n        }\n      }), Predicates.notNull()));\n    }\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/version/finder/AbstractHiveDatasetVersionFinder.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2017-07-31 15:51:25","commitOrder":2,"curCode":"  public List<Partition> getPartitionsFromDataset() throws IOException{\n    try (AutoReturnableObject<IMetaStoreClient> client = getClientPool().getClient()) {\n      List<Partition> partitions =\n          HiveUtils.getPartitions(client.get(), getTable(), Optional.<String>absent());\n      return sortPartitions(partitions);\n    }\n  }\n","date":"2017-07-31 15:51:25","endLine":322,"groupId":"101706","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getPartitionsFromDataset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2a/f2f804294c178167c5d19e83122237d2f481fc.src","preCode":"  public List<Partition> getPartitionsFromDataset() throws IOException{\n    try (AutoReturnableObject<IMetaStoreClient> client = getClientPool().getClient()) {\n      List<Partition> partitions =\n          HiveUtils.getPartitions(client.get(), getTable(), Optional.<String>absent());\n      return sortPartitions(partitions);\n    }\n  }\n","realPath":"gobblin-data-management/src/main/java/org/apache/gobblin/data/management/copy/hive/HiveDataset.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"N"}],"commitId":"edc2b3a5b4073d9a0e50abea609a27d082ddbb9d","commitMessage":"@@@[GOBBLIN-785] remove wrapper isPartition function.  use table.isPartitioned instead\n\nCloses #2650 from jhsenjaliya/GOBBLIN-785\n","date":"2019-10-02 06:46:59","modifiedFileCount":"7","status":"M","submitter":"Jay Sen"}]
