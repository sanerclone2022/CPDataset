[{"authorTime":"2017-07-31 15:51:25","codes":[{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testKillWorker() throws TimeoutException, InterruptedException {\n    Collection<File> matches = Collections.EMPTY_LIST;\n\n    final File testJobFile = new File(_jobDirPath + \"/GobblinClusterKillTestJob.conf\");\n\n    \r\n    Assert.assertTrue(testJobFile.exists());\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File writerOutputDir = getWriterOutputDir();\n\n        if (writerOutputDir != null && writerOutputDir.exists()) {\n          return FileUtils.listFiles(writerOutputDir, new String[]{\"txt\"}, true).size() >= 25;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for writer output\");\n\n    File writerOutputDir = getWriterOutputDir();\n    LOG.info(\"{} matches found before disconnecting worker\",\n        FileUtils.listFiles(writerOutputDir, new String[]{\"txt\"}, true).size());\n\n    _clusterWorkers[0].disconnectHelixManager();\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File jobOutputDir = getJobOutputDir();\n\n        if (jobOutputDir != null && jobOutputDir.exists()) {\n          return FileUtils.listFiles(jobOutputDir, new String[]{\"txt\"}, true).size() >= 100;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for job-completion\");\n\n    \r\n    Thread.sleep(5000);\n    Assert.assertFalse(testJobFile.exists());\n  }\n","date":"2017-07-31 15:51:25","endLine":227,"groupId":"62","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testKillWorker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2c/5d53dbb759d5cb5d6044db083e161ee3dfde57.src","preCode":"  public void testKillWorker() throws TimeoutException, InterruptedException {\n    Collection<File> matches = Collections.EMPTY_LIST;\n\n    final File testJobFile = new File(_jobDirPath + \"/GobblinClusterKillTestJob.conf\");\n\n    \r\n    Assert.assertTrue(testJobFile.exists());\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File writerOutputDir = getWriterOutputDir();\n\n        if (writerOutputDir != null && writerOutputDir.exists()) {\n          return FileUtils.listFiles(writerOutputDir, new String[]{\"txt\"}, true).size() >= 25;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for writer output\");\n\n    File writerOutputDir = getWriterOutputDir();\n    LOG.info(\"{} matches found before disconnecting worker\",\n        FileUtils.listFiles(writerOutputDir, new String[]{\"txt\"}, true).size());\n\n    _clusterWorkers[0].disconnectHelixManager();\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File jobOutputDir = getJobOutputDir();\n\n        if (jobOutputDir != null && jobOutputDir.exists()) {\n          return FileUtils.listFiles(jobOutputDir, new String[]{\"txt\"}, true).size() >= 100;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for job-completion\");\n\n    \r\n    Thread.sleep(5000);\n    Assert.assertFalse(testJobFile.exists());\n  }\n","realPath":"gobblin-cluster/src/test/java/org/apache/gobblin/cluster/GobblinClusterKillTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"B"},{"authorDate":"2017-07-31 15:51:25","commitOrder":1,"curCode":"  public void testKillManager() throws IOException, TimeoutException, InterruptedException {\n    Collection<File> matches = Collections.EMPTY_LIST;\n\n    \r\n    setupTestDir();\n\n    \r\n    _clusterManagers[0].disconnectHelixManager();\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File writerOutputDir = getWriterOutputDir();\n\n        if (writerOutputDir != null && writerOutputDir.exists()) {\n          return FileUtils.listFiles(writerOutputDir, new String[]{\"txt\"}, true).size() >= 25;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for writer output\");\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File jobOutputDir = getJobOutputDir();\n\n        if (jobOutputDir != null && jobOutputDir.exists()) {\n          return FileUtils.listFiles(jobOutputDir, new String[]{\"txt\"}, true).size() >= 100;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for job-completion\");\n\n    \r\n    Thread.sleep(5000);\n    final File testJobFile = new File(_jobDirPath + \"/GobblinClusterKillTestJob.conf\");\n    Assert.assertFalse(testJobFile.exists());\n  }\n","date":"2017-07-31 15:51:25","endLine":273,"groupId":"62","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testKillManager","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/2c/5d53dbb759d5cb5d6044db083e161ee3dfde57.src","preCode":"  public void testKillManager() throws IOException, TimeoutException, InterruptedException {\n    Collection<File> matches = Collections.EMPTY_LIST;\n\n    \r\n    setupTestDir();\n\n    \r\n    _clusterManagers[0].disconnectHelixManager();\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File writerOutputDir = getWriterOutputDir();\n\n        if (writerOutputDir != null && writerOutputDir.exists()) {\n          return FileUtils.listFiles(writerOutputDir, new String[]{\"txt\"}, true).size() >= 25;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for writer output\");\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File jobOutputDir = getJobOutputDir();\n\n        if (jobOutputDir != null && jobOutputDir.exists()) {\n          return FileUtils.listFiles(jobOutputDir, new String[]{\"txt\"}, true).size() >= 100;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for job-completion\");\n\n    \r\n    Thread.sleep(5000);\n    final File testJobFile = new File(_jobDirPath + \"/GobblinClusterKillTestJob.conf\");\n    Assert.assertFalse(testJobFile.exists());\n  }\n","realPath":"gobblin-cluster/src/test/java/org/apache/gobblin/cluster/GobblinClusterKillTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"B"}],"commitId":"5457af88d56b8fb89b172129fd1ff24ecdd4eba8","commitMessage":"@@@Merge pull request #2031 from abti/move_packages_to_apache\n","date":"2017-07-31 15:51:25","modifiedFileCount":"2","status":"B","submitter":"Abhishek Tiwari"},{"authorTime":"2017-12-01 13:28:39","codes":[{"authorDate":"2017-12-01 13:28:39","commitOrder":2,"curCode":"  public void testKillWorker() throws Exception {\n    final File testJobFile = new File(_jobDirPath + \"/GobblinClusterKillTestJob.conf\");\n\n    \r\n    Assert.assertTrue(testJobFile.exists());\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File writerOutputDir = getWriterOutputDir();\n\n        if (writerOutputDir != null && writerOutputDir.exists()) {\n          return FileUtils.listFiles(writerOutputDir, new String[]{\"txt\"}, true).size() >= 25;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for writer output\");\n\n    File writerOutputDir = getWriterOutputDir();\n    LOG.info(\"{} matches found before disconnecting worker\",\n        FileUtils.listFiles(writerOutputDir, new String[]{\"txt\"}, true).size());\n\n    _clusterWorkers[0].disconnectHelixManager();\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File jobOutputDir = getJobOutputDir();\n\n        if (jobOutputDir != null && jobOutputDir.exists()) {\n          return FileUtils.listFiles(jobOutputDir, new String[]{\"txt\"}, true).size() >= 100;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for job-completion\");\n\n    \r\n    Thread.sleep(5000);\n    Assert.assertFalse(testJobFile.exists());\n  }\n","date":"2017-12-01 13:28:39","endLine":223,"groupId":"1096","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testKillWorker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/22/0417b2dfd5fe7da578b8a0ba3e27d1fc195a7d.src","preCode":"  public void testKillWorker() throws TimeoutException, InterruptedException {\n    Collection<File> matches = Collections.EMPTY_LIST;\n\n    final File testJobFile = new File(_jobDirPath + \"/GobblinClusterKillTestJob.conf\");\n\n    \r\n    Assert.assertTrue(testJobFile.exists());\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File writerOutputDir = getWriterOutputDir();\n\n        if (writerOutputDir != null && writerOutputDir.exists()) {\n          return FileUtils.listFiles(writerOutputDir, new String[]{\"txt\"}, true).size() >= 25;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for writer output\");\n\n    File writerOutputDir = getWriterOutputDir();\n    LOG.info(\"{} matches found before disconnecting worker\",\n        FileUtils.listFiles(writerOutputDir, new String[]{\"txt\"}, true).size());\n\n    _clusterWorkers[0].disconnectHelixManager();\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File jobOutputDir = getJobOutputDir();\n\n        if (jobOutputDir != null && jobOutputDir.exists()) {\n          return FileUtils.listFiles(jobOutputDir, new String[]{\"txt\"}, true).size() >= 100;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for job-completion\");\n\n    \r\n    Thread.sleep(5000);\n    Assert.assertFalse(testJobFile.exists());\n  }\n","realPath":"gobblin-cluster/src/test/java/org/apache/gobblin/cluster/GobblinClusterKillTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"},{"authorDate":"2017-12-01 13:28:39","commitOrder":2,"curCode":"  public void testKillManager() throws IOException, TimeoutException, InterruptedException {\n    \r\n    _clusterManagers[0].disconnectHelixManager();\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File writerOutputDir = getWriterOutputDir();\n\n        if (writerOutputDir != null && writerOutputDir.exists()) {\n          return FileUtils.listFiles(writerOutputDir, new String[]{\"txt\"}, true).size() >= 25;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for writer output\");\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File jobOutputDir = getJobOutputDir();\n\n        if (jobOutputDir != null && jobOutputDir.exists()) {\n          return FileUtils.listFiles(jobOutputDir, new String[]{\"txt\"}, true).size() >= 100;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for job-completion\");\n\n    \r\n    Thread.sleep(5000);\n    final File testJobFile = new File(_jobDirPath + \"/GobblinClusterKillTestJob.conf\");\n    Assert.assertFalse(testJobFile.exists());\n  }\n","date":"2017-12-01 13:28:39","endLine":264,"groupId":"1096","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testKillManager","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-gobblin-10-0.7/blobInfo/CC_OUT/blobs/22/0417b2dfd5fe7da578b8a0ba3e27d1fc195a7d.src","preCode":"  public void testKillManager() throws IOException, TimeoutException, InterruptedException {\n    Collection<File> matches = Collections.EMPTY_LIST;\n\n    \r\n    setupTestDir();\n\n    \r\n    _clusterManagers[0].disconnectHelixManager();\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File writerOutputDir = getWriterOutputDir();\n\n        if (writerOutputDir != null && writerOutputDir.exists()) {\n          return FileUtils.listFiles(writerOutputDir, new String[]{\"txt\"}, true).size() >= 25;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for writer output\");\n\n    AssertWithBackoff.create().logger(LOG).timeoutMs(ASSERT_TIMEOUT).maxSleepMs(ASSERT_MAX_SLEEP).backoffFactor(1.5)\n        .assertTrue(new Predicate<Void>() {\n      @Override\n      public boolean apply(Void input) {\n        File jobOutputDir = getJobOutputDir();\n\n        if (jobOutputDir != null && jobOutputDir.exists()) {\n          return FileUtils.listFiles(jobOutputDir, new String[]{\"txt\"}, true).size() >= 100;\n        } else {\n          return false;\n        }\n      }\n    }, \"Waiting for job-completion\");\n\n    \r\n    Thread.sleep(5000);\n    final File testJobFile = new File(_jobDirPath + \"/GobblinClusterKillTestJob.conf\");\n    Assert.assertFalse(testJobFile.exists());\n  }\n","realPath":"gobblin-cluster/src/test/java/org/apache/gobblin/cluster/GobblinClusterKillTest.java","repoName":"gobblin","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"4a8f7ba8da986869e7c2426992b9cc4a9f6674ea","commitMessage":"@@@[GOBBLIN-328] Fix GobblinClusterKillTest failure. Path mismatch\n\nIssue:\norg.apache.gobblin.cluster.GobblinClusterKillTest\nfailed because it looks at the wrong output path\nfor the output files.\n\nCause:\nIt appears that the paths have changed.\n\nFix:\nUpdate the path to match.\n\nAlso:\n* Instead of disabling the tests. Move the tests\nto the group\ndisabledOnTravis to continue to disable it on\nTravis until we have\nhigher confidence with these tests.\nThis makes it easier to run these tests locally.\n\n* Run the setup and teardown methods per method.\nThis adds about 10s\noverhead per method.\nThe worker kill test failed without this change\nwhen running with other\ntests. I suspect it is related to some state\nmanagement issues.\n This change makes tests more self contained.\n\n* Some minor code quality improvements.\n\nCloses #2180 from HappyRay/fix-cluster-kill-tests\n","date":"2017-12-01 13:28:39","modifiedFileCount":"1","status":"M","submitter":"Ray Yang"}]
