[{"authorTime":"2021-04-08 05:40:33","codes":[{"authorDate":"2021-04-08 05:40:33","commitOrder":1,"curCode":"    void testExportToXML() throws Exception {\n        try (XSSFWorkbook wb = XSSFTestDataSamples.openSampleWorkbook(\"CustomXMLMappings.xlsx\")) {\n\n            boolean found = false;\n            for (POIXMLDocumentPart p : wb.getRelations()) {\n\n                if (!(p instanceof MapInfo)) {\n                    continue;\n                }\n                MapInfo mapInfo = (MapInfo) p;\n\n                XSSFMap map = mapInfo.getXSSFMapById(1);\n                XSSFExportToXml exporter = new XSSFExportToXml(map);\n                ByteArrayOutputStream os = new ByteArrayOutputStream();\n                exporter.exportToXML(os, true);\n                String xml = os.toString(\"UTF-8\");\n\n                assertNotNull(xml);\n                assertFalse(xml.isEmpty());\n\n                String docente = xml.split(\"<DOCENTE>\")[1].split(\"</DOCENTE>\")[0].trim();\n                String nome = xml.split(\"<NOME>\")[1].split(\"</NOME>\")[0].trim();\n                String tutor = xml.split(\"<TUTOR>\")[1].split(\"</TUTOR>\")[0].trim();\n                String cdl = xml.split(\"<CDL>\")[1].split(\"</CDL>\")[0].trim();\n                String durata = xml.split(\"<DURATA>\")[1].split(\"</DURATA>\")[0].trim();\n                String argomento = xml.split(\"<ARGOMENTO>\")[1].split(\"</ARGOMENTO>\")[0].trim();\n                String progetto = xml.split(\"<PROGETTO>\")[1].split(\"</PROGETTO>\")[0].trim();\n                String crediti = xml.split(\"<CREDITI>\")[1].split(\"</CREDITI>\")[0].trim();\n\n                assertEquals(\"ro\", docente);\n                assertEquals(\"ro\", nome);\n                assertEquals(\"ds\", tutor);\n                assertEquals(\"gs\", cdl);\n                assertEquals(\"g\", durata);\n                assertEquals(\"gvvv\", argomento);\n                assertEquals(\"aaaa\", progetto);\n                assertEquals(\"aa\", crediti);\n\n                parseXML(xml);\n\n                found = true;\n            }\n            assertTrue(found);\n        }\n    }\n","date":"2021-04-08 05:40:33","endLine":103,"groupId":"8504","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExportToXML","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/5a/6afb7e20e9dd3b98d18d03ce8e756989b3498c.src","preCode":"    void testExportToXML() throws Exception {\n        try (XSSFWorkbook wb = XSSFTestDataSamples.openSampleWorkbook(\"CustomXMLMappings.xlsx\")) {\n\n            boolean found = false;\n            for (POIXMLDocumentPart p : wb.getRelations()) {\n\n                if (!(p instanceof MapInfo)) {\n                    continue;\n                }\n                MapInfo mapInfo = (MapInfo) p;\n\n                XSSFMap map = mapInfo.getXSSFMapById(1);\n                XSSFExportToXml exporter = new XSSFExportToXml(map);\n                ByteArrayOutputStream os = new ByteArrayOutputStream();\n                exporter.exportToXML(os, true);\n                String xml = os.toString(\"UTF-8\");\n\n                assertNotNull(xml);\n                assertFalse(xml.isEmpty());\n\n                String docente = xml.split(\"<DOCENTE>\")[1].split(\"</DOCENTE>\")[0].trim();\n                String nome = xml.split(\"<NOME>\")[1].split(\"</NOME>\")[0].trim();\n                String tutor = xml.split(\"<TUTOR>\")[1].split(\"</TUTOR>\")[0].trim();\n                String cdl = xml.split(\"<CDL>\")[1].split(\"</CDL>\")[0].trim();\n                String durata = xml.split(\"<DURATA>\")[1].split(\"</DURATA>\")[0].trim();\n                String argomento = xml.split(\"<ARGOMENTO>\")[1].split(\"</ARGOMENTO>\")[0].trim();\n                String progetto = xml.split(\"<PROGETTO>\")[1].split(\"</PROGETTO>\")[0].trim();\n                String crediti = xml.split(\"<CREDITI>\")[1].split(\"</CREDITI>\")[0].trim();\n\n                assertEquals(\"ro\", docente);\n                assertEquals(\"ro\", nome);\n                assertEquals(\"ds\", tutor);\n                assertEquals(\"gs\", cdl);\n                assertEquals(\"g\", durata);\n                assertEquals(\"gvvv\", argomento);\n                assertEquals(\"aaaa\", progetto);\n                assertEquals(\"aa\", crediti);\n\n                parseXML(xml);\n\n                found = true;\n            }\n            assertTrue(found);\n        }\n    }\n","realPath":"poi-ooxml/src/test/java/org/apache/poi/xssf/extractor/TestXSSFExportToXML.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"},{"authorDate":"2021-04-08 05:40:33","commitOrder":1,"curCode":"    void testExportToXMLInverseOrder() throws Exception {\n        try (XSSFWorkbook wb = XSSFTestDataSamples\n                .openSampleWorkbook(\"CustomXmlMappings-inverse-order.xlsx\")) {\n\n            boolean found = false;\n            for (POIXMLDocumentPart p : wb.getRelations()) {\n\n                if (!(p instanceof MapInfo)) {\n                    continue;\n                }\n                MapInfo mapInfo = (MapInfo) p;\n\n                XSSFMap map = mapInfo.getXSSFMapById(1);\n                XSSFExportToXml exporter = new XSSFExportToXml(map);\n                ByteArrayOutputStream os = new ByteArrayOutputStream();\n                exporter.exportToXML(os, true);\n                String xml = os.toString(\"UTF-8\");\n\n                assertNotNull(xml);\n                assertFalse(xml.isEmpty());\n\n                String docente = xml.split(\"<DOCENTE>\")[1].split(\"</DOCENTE>\")[0].trim();\n                String nome = xml.split(\"<NOME>\")[1].split(\"</NOME>\")[0].trim();\n                String tutor = xml.split(\"<TUTOR>\")[1].split(\"</TUTOR>\")[0].trim();\n                String cdl = xml.split(\"<CDL>\")[1].split(\"</CDL>\")[0].trim();\n                String durata = xml.split(\"<DURATA>\")[1].split(\"</DURATA>\")[0].trim();\n                String argomento = xml.split(\"<ARGOMENTO>\")[1].split(\"</ARGOMENTO>\")[0].trim();\n                String progetto = xml.split(\"<PROGETTO>\")[1].split(\"</PROGETTO>\")[0].trim();\n                String crediti = xml.split(\"<CREDITI>\")[1].split(\"</CREDITI>\")[0].trim();\n\n                assertEquals(\"aa\", nome);\n                assertEquals(\"aaaa\", docente);\n                assertEquals(\"gvvv\", tutor);\n                assertEquals(\"g\", cdl);\n                assertEquals(\"gs\", durata);\n                assertEquals(\"ds\", argomento);\n                assertEquals(\"ro\", progetto);\n                assertEquals(\"ro\", crediti);\n\n                parseXML(xml);\n\n                found = true;\n            }\n            assertTrue(found);\n        }\n    }\n","date":"2021-04-08 05:40:33","endLine":151,"groupId":"8504","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExportToXMLInverseOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/5a/6afb7e20e9dd3b98d18d03ce8e756989b3498c.src","preCode":"    void testExportToXMLInverseOrder() throws Exception {\n        try (XSSFWorkbook wb = XSSFTestDataSamples\n                .openSampleWorkbook(\"CustomXmlMappings-inverse-order.xlsx\")) {\n\n            boolean found = false;\n            for (POIXMLDocumentPart p : wb.getRelations()) {\n\n                if (!(p instanceof MapInfo)) {\n                    continue;\n                }\n                MapInfo mapInfo = (MapInfo) p;\n\n                XSSFMap map = mapInfo.getXSSFMapById(1);\n                XSSFExportToXml exporter = new XSSFExportToXml(map);\n                ByteArrayOutputStream os = new ByteArrayOutputStream();\n                exporter.exportToXML(os, true);\n                String xml = os.toString(\"UTF-8\");\n\n                assertNotNull(xml);\n                assertFalse(xml.isEmpty());\n\n                String docente = xml.split(\"<DOCENTE>\")[1].split(\"</DOCENTE>\")[0].trim();\n                String nome = xml.split(\"<NOME>\")[1].split(\"</NOME>\")[0].trim();\n                String tutor = xml.split(\"<TUTOR>\")[1].split(\"</TUTOR>\")[0].trim();\n                String cdl = xml.split(\"<CDL>\")[1].split(\"</CDL>\")[0].trim();\n                String durata = xml.split(\"<DURATA>\")[1].split(\"</DURATA>\")[0].trim();\n                String argomento = xml.split(\"<ARGOMENTO>\")[1].split(\"</ARGOMENTO>\")[0].trim();\n                String progetto = xml.split(\"<PROGETTO>\")[1].split(\"</PROGETTO>\")[0].trim();\n                String crediti = xml.split(\"<CREDITI>\")[1].split(\"</CREDITI>\")[0].trim();\n\n                assertEquals(\"aa\", nome);\n                assertEquals(\"aaaa\", docente);\n                assertEquals(\"gvvv\", tutor);\n                assertEquals(\"g\", cdl);\n                assertEquals(\"gs\", durata);\n                assertEquals(\"ds\", argomento);\n                assertEquals(\"ro\", progetto);\n                assertEquals(\"ro\", crediti);\n\n                parseXML(xml);\n\n                found = true;\n            }\n            assertTrue(found);\n        }\n    }\n","realPath":"poi-ooxml/src/test/java/org/apache/poi/xssf/extractor/TestXSSFExportToXML.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"}],"commitId":"b6aee1ef6d3e92a28ffd4b5c03e677b63b43747f","commitMessage":"@@@65206 - Migrate ant / maven to gradle build\ncompile / jar / test of mrJars\ndon't include ants build.xml anymore\nrename directories to match project and maven artifact names\nrefactor artifacts - so each project has one artifact\nreplace static references in hssf/dev tests with junit5 constructs.  which had problems in parallel tests\nincrease gradle heap to 4gb because of OOM - maybe less would also work\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1888488 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2021-04-08 05:40:33","modifiedFileCount":"0","status":"B","submitter":"Andreas Beeker"},{"authorTime":"2021-05-14 08:37:50","codes":[{"authorDate":"2021-05-14 08:37:50","commitOrder":2,"curCode":"    void testExportToXML() throws Exception {\n        try (XSSFWorkbook wb = XSSFTestDataSamples.openSampleWorkbook(\"CustomXMLMappings.xlsx\")) {\n\n            boolean found = false;\n            for (POIXMLDocumentPart p : wb.getRelations()) {\n\n                if (!(p instanceof MapInfo)) {\n                    continue;\n                }\n                MapInfo mapInfo = (MapInfo) p;\n\n                XSSFMap map = mapInfo.getXSSFMapById(1);\n                XSSFExportToXml exporter = new XSSFExportToXml(map);\n                UnsynchronizedByteArrayOutputStream os = new UnsynchronizedByteArrayOutputStream();\n                exporter.exportToXML(os, true);\n                String xml = os.toString(\"UTF-8\");\n\n                assertNotNull(xml);\n                assertFalse(xml.isEmpty());\n\n                String docente = xml.split(\"<DOCENTE>\")[1].split(\"</DOCENTE>\")[0].trim();\n                String nome = xml.split(\"<NOME>\")[1].split(\"</NOME>\")[0].trim();\n                String tutor = xml.split(\"<TUTOR>\")[1].split(\"</TUTOR>\")[0].trim();\n                String cdl = xml.split(\"<CDL>\")[1].split(\"</CDL>\")[0].trim();\n                String durata = xml.split(\"<DURATA>\")[1].split(\"</DURATA>\")[0].trim();\n                String argomento = xml.split(\"<ARGOMENTO>\")[1].split(\"</ARGOMENTO>\")[0].trim();\n                String progetto = xml.split(\"<PROGETTO>\")[1].split(\"</PROGETTO>\")[0].trim();\n                String crediti = xml.split(\"<CREDITI>\")[1].split(\"</CREDITI>\")[0].trim();\n\n                assertEquals(\"ro\", docente);\n                assertEquals(\"ro\", nome);\n                assertEquals(\"ds\", tutor);\n                assertEquals(\"gs\", cdl);\n                assertEquals(\"g\", durata);\n                assertEquals(\"gvvv\", argomento);\n                assertEquals(\"aaaa\", progetto);\n                assertEquals(\"aa\", crediti);\n\n                parseXML(xml);\n\n                found = true;\n            }\n            assertTrue(found);\n        }\n    }\n","date":"2021-05-14 08:37:50","endLine":100,"groupId":"10908","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExportToXML","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/56/72564fd0e17c9bea0c9d9eb78257214a1927ac.src","preCode":"    void testExportToXML() throws Exception {\n        try (XSSFWorkbook wb = XSSFTestDataSamples.openSampleWorkbook(\"CustomXMLMappings.xlsx\")) {\n\n            boolean found = false;\n            for (POIXMLDocumentPart p : wb.getRelations()) {\n\n                if (!(p instanceof MapInfo)) {\n                    continue;\n                }\n                MapInfo mapInfo = (MapInfo) p;\n\n                XSSFMap map = mapInfo.getXSSFMapById(1);\n                XSSFExportToXml exporter = new XSSFExportToXml(map);\n                ByteArrayOutputStream os = new ByteArrayOutputStream();\n                exporter.exportToXML(os, true);\n                String xml = os.toString(\"UTF-8\");\n\n                assertNotNull(xml);\n                assertFalse(xml.isEmpty());\n\n                String docente = xml.split(\"<DOCENTE>\")[1].split(\"</DOCENTE>\")[0].trim();\n                String nome = xml.split(\"<NOME>\")[1].split(\"</NOME>\")[0].trim();\n                String tutor = xml.split(\"<TUTOR>\")[1].split(\"</TUTOR>\")[0].trim();\n                String cdl = xml.split(\"<CDL>\")[1].split(\"</CDL>\")[0].trim();\n                String durata = xml.split(\"<DURATA>\")[1].split(\"</DURATA>\")[0].trim();\n                String argomento = xml.split(\"<ARGOMENTO>\")[1].split(\"</ARGOMENTO>\")[0].trim();\n                String progetto = xml.split(\"<PROGETTO>\")[1].split(\"</PROGETTO>\")[0].trim();\n                String crediti = xml.split(\"<CREDITI>\")[1].split(\"</CREDITI>\")[0].trim();\n\n                assertEquals(\"ro\", docente);\n                assertEquals(\"ro\", nome);\n                assertEquals(\"ds\", tutor);\n                assertEquals(\"gs\", cdl);\n                assertEquals(\"g\", durata);\n                assertEquals(\"gvvv\", argomento);\n                assertEquals(\"aaaa\", progetto);\n                assertEquals(\"aa\", crediti);\n\n                parseXML(xml);\n\n                found = true;\n            }\n            assertTrue(found);\n        }\n    }\n","realPath":"poi-ooxml/src/test/java/org/apache/poi/xssf/extractor/TestXSSFExportToXML.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2021-05-14 08:37:50","commitOrder":2,"curCode":"    void testExportToXMLInverseOrder() throws Exception {\n        try (XSSFWorkbook wb = XSSFTestDataSamples\n                .openSampleWorkbook(\"CustomXmlMappings-inverse-order.xlsx\")) {\n\n            boolean found = false;\n            for (POIXMLDocumentPart p : wb.getRelations()) {\n\n                if (!(p instanceof MapInfo)) {\n                    continue;\n                }\n                MapInfo mapInfo = (MapInfo) p;\n\n                XSSFMap map = mapInfo.getXSSFMapById(1);\n                XSSFExportToXml exporter = new XSSFExportToXml(map);\n                UnsynchronizedByteArrayOutputStream os = new UnsynchronizedByteArrayOutputStream();\n                exporter.exportToXML(os, true);\n                String xml = os.toString(\"UTF-8\");\n\n                assertNotNull(xml);\n                assertFalse(xml.isEmpty());\n\n                String docente = xml.split(\"<DOCENTE>\")[1].split(\"</DOCENTE>\")[0].trim();\n                String nome = xml.split(\"<NOME>\")[1].split(\"</NOME>\")[0].trim();\n                String tutor = xml.split(\"<TUTOR>\")[1].split(\"</TUTOR>\")[0].trim();\n                String cdl = xml.split(\"<CDL>\")[1].split(\"</CDL>\")[0].trim();\n                String durata = xml.split(\"<DURATA>\")[1].split(\"</DURATA>\")[0].trim();\n                String argomento = xml.split(\"<ARGOMENTO>\")[1].split(\"</ARGOMENTO>\")[0].trim();\n                String progetto = xml.split(\"<PROGETTO>\")[1].split(\"</PROGETTO>\")[0].trim();\n                String crediti = xml.split(\"<CREDITI>\")[1].split(\"</CREDITI>\")[0].trim();\n\n                assertEquals(\"aa\", nome);\n                assertEquals(\"aaaa\", docente);\n                assertEquals(\"gvvv\", tutor);\n                assertEquals(\"g\", cdl);\n                assertEquals(\"gs\", durata);\n                assertEquals(\"ds\", argomento);\n                assertEquals(\"ro\", progetto);\n                assertEquals(\"ro\", crediti);\n\n                parseXML(xml);\n\n                found = true;\n            }\n            assertTrue(found);\n        }\n    }\n","date":"2021-05-14 08:37:50","endLine":148,"groupId":"10908","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExportToXMLInverseOrder","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/56/72564fd0e17c9bea0c9d9eb78257214a1927ac.src","preCode":"    void testExportToXMLInverseOrder() throws Exception {\n        try (XSSFWorkbook wb = XSSFTestDataSamples\n                .openSampleWorkbook(\"CustomXmlMappings-inverse-order.xlsx\")) {\n\n            boolean found = false;\n            for (POIXMLDocumentPart p : wb.getRelations()) {\n\n                if (!(p instanceof MapInfo)) {\n                    continue;\n                }\n                MapInfo mapInfo = (MapInfo) p;\n\n                XSSFMap map = mapInfo.getXSSFMapById(1);\n                XSSFExportToXml exporter = new XSSFExportToXml(map);\n                ByteArrayOutputStream os = new ByteArrayOutputStream();\n                exporter.exportToXML(os, true);\n                String xml = os.toString(\"UTF-8\");\n\n                assertNotNull(xml);\n                assertFalse(xml.isEmpty());\n\n                String docente = xml.split(\"<DOCENTE>\")[1].split(\"</DOCENTE>\")[0].trim();\n                String nome = xml.split(\"<NOME>\")[1].split(\"</NOME>\")[0].trim();\n                String tutor = xml.split(\"<TUTOR>\")[1].split(\"</TUTOR>\")[0].trim();\n                String cdl = xml.split(\"<CDL>\")[1].split(\"</CDL>\")[0].trim();\n                String durata = xml.split(\"<DURATA>\")[1].split(\"</DURATA>\")[0].trim();\n                String argomento = xml.split(\"<ARGOMENTO>\")[1].split(\"</ARGOMENTO>\")[0].trim();\n                String progetto = xml.split(\"<PROGETTO>\")[1].split(\"</PROGETTO>\")[0].trim();\n                String crediti = xml.split(\"<CREDITI>\")[1].split(\"</CREDITI>\")[0].trim();\n\n                assertEquals(\"aa\", nome);\n                assertEquals(\"aaaa\", docente);\n                assertEquals(\"gvvv\", tutor);\n                assertEquals(\"g\", cdl);\n                assertEquals(\"gs\", durata);\n                assertEquals(\"ds\", argomento);\n                assertEquals(\"ro\", progetto);\n                assertEquals(\"ro\", crediti);\n\n                parseXML(xml);\n\n                found = true;\n            }\n            assertTrue(found);\n        }\n    }\n","realPath":"poi-ooxml/src/test/java/org/apache/poi/xssf/extractor/TestXSSFExportToXML.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"0614835c55f44ab6f3e9b0850ca51e0e53a65a49","commitMessage":"@@@#65304 - Add commons-io as a dependency\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1889871 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2021-05-14 08:37:50","modifiedFileCount":"277","status":"M","submitter":"Andreas Beeker"}]
