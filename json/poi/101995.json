[{"authorTime":"2021-04-08 05:40:33","codes":[{"authorDate":"2021-04-08 05:40:33","commitOrder":1,"curCode":"    void testWriteNewStream() throws Exception {\n        POIFSFileSystem fs = new POIFSFileSystem(_inst.openResourceAsStream(\"BlockSize512.zvi\"));\n\n        \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(100));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n\n        \r\n        byte[] data = new byte[512];\n        for (int i = 0; i < data.length; i++) {\n            data[i] = (byte) (i % 256);\n        }\n\n        POIFSStream stream = new POIFSStream(fs);\n        stream.updateContents(data);\n\n        \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n        \r\n        Iterator<ByteBuffer> it = stream.getBlockIterator();\n        int count = 0;\n        while (it.hasNext()) {\n            ByteBuffer b = it.next();\n            data = new byte[512];\n            b.get(data);\n            for (int i = 0; i < data.length; i++) {\n                byte exp = (byte) (i % 256);\n                assertEquals(exp, data[i]);\n            }\n            count++;\n        }\n        assertEquals(1, count);\n\n\n        \r\n        data = new byte[512 * 3];\n        for (int i = 0; i < data.length; i++) {\n            data[i] = (byte) (i % 256);\n        }\n\n        stream = new POIFSStream(fs);\n        stream.updateContents(data);\n\n        \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));\n        assertEquals(102, fs.getNextBlock(101));\n        assertEquals(103, fs.getNextBlock(102));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(103));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n        \r\n        it = stream.getBlockIterator();\n        count = 0;\n        while (it.hasNext()) {\n            ByteBuffer b = it.next();\n            data = new byte[512];\n            b.get(data);\n            for (int i = 0; i < data.length; i++) {\n                byte exp = (byte) (i % 256);\n                assertEquals(exp, data[i]);\n            }\n            count++;\n        }\n        assertEquals(3, count);\n\n        \r\n        stream.free();\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n        fs.close();\n    }\n","date":"2021-04-08 05:40:33","endLine":544,"groupId":"13672","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteNewStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/2a/2a8122d18a15c23423f3af10ee11c719792def.src","preCode":"    void testWriteNewStream() throws Exception {\n        POIFSFileSystem fs = new POIFSFileSystem(_inst.openResourceAsStream(\"BlockSize512.zvi\"));\n\n        \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(100));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n\n        \r\n        byte[] data = new byte[512];\n        for (int i = 0; i < data.length; i++) {\n            data[i] = (byte) (i % 256);\n        }\n\n        POIFSStream stream = new POIFSStream(fs);\n        stream.updateContents(data);\n\n        \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n        \r\n        Iterator<ByteBuffer> it = stream.getBlockIterator();\n        int count = 0;\n        while (it.hasNext()) {\n            ByteBuffer b = it.next();\n            data = new byte[512];\n            b.get(data);\n            for (int i = 0; i < data.length; i++) {\n                byte exp = (byte) (i % 256);\n                assertEquals(exp, data[i]);\n            }\n            count++;\n        }\n        assertEquals(1, count);\n\n\n        \r\n        data = new byte[512 * 3];\n        for (int i = 0; i < data.length; i++) {\n            data[i] = (byte) (i % 256);\n        }\n\n        stream = new POIFSStream(fs);\n        stream.updateContents(data);\n\n        \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));\n        assertEquals(102, fs.getNextBlock(101));\n        assertEquals(103, fs.getNextBlock(102));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(103));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n        \r\n        it = stream.getBlockIterator();\n        count = 0;\n        while (it.hasNext()) {\n            ByteBuffer b = it.next();\n            data = new byte[512];\n            b.get(data);\n            for (int i = 0; i < data.length; i++) {\n                byte exp = (byte) (i % 256);\n                assertEquals(exp, data[i]);\n            }\n            count++;\n        }\n        assertEquals(3, count);\n\n        \r\n        stream.free();\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n        fs.close();\n    }\n","realPath":"poi/src/test/java/org/apache/poi/poifs/filesystem/TestPOIFSStream.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":457,"status":"B"},{"authorDate":"2021-04-08 05:40:33","commitOrder":1,"curCode":"    void testWriteStream4096() throws Exception {\n        POIFSFileSystem fs = new POIFSFileSystem(_inst.openResourceAsStream(\"BlockSize4096.zvi\"));\n\n        \r\n        assertEquals(1, fs.getNextBlock(0));\n        assertEquals(2, fs.getNextBlock(1));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(2));\n        assertEquals(4, fs.getNextBlock(3));\n\n        \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(14));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(15));\n\n\n        \r\n        byte[] data = new byte[4096 * 5];\n        for (int i = 0; i < data.length; i++) {\n            data[i] = (byte) (i % 256);\n        }\n        POIFSStream stream = new POIFSStream(fs, 0);\n        stream.updateContents(data);\n\n\n        \r\n        assertEquals(1, fs.getNextBlock(0));\n        assertEquals(2, fs.getNextBlock(1));\n        assertEquals(15, fs.getNextBlock(2)); \r\n        assertEquals(4, fs.getNextBlock(3));  \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(14));\n        assertEquals(16, fs.getNextBlock(15)); \r\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(16)); \r\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(17)); \r\n\n        \r\n        Iterator<ByteBuffer> it = stream.getBlockIterator();\n        int count = 0;\n        while (it.hasNext()) {\n            ByteBuffer b = it.next();\n            data = new byte[512];\n            b.get(data);\n            for (int i = 0; i < data.length; i++) {\n                byte exp = (byte) (i % 256);\n                assertEquals(exp, data[i]);\n            }\n            count++;\n        }\n        assertEquals(5, count);\n\n        fs.close();\n    }\n","date":"2021-04-08 05:40:33","endLine":643,"groupId":"6087","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteStream4096","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/2a/2a8122d18a15c23423f3af10ee11c719792def.src","preCode":"    void testWriteStream4096() throws Exception {\n        POIFSFileSystem fs = new POIFSFileSystem(_inst.openResourceAsStream(\"BlockSize4096.zvi\"));\n\n        \r\n        assertEquals(1, fs.getNextBlock(0));\n        assertEquals(2, fs.getNextBlock(1));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(2));\n        assertEquals(4, fs.getNextBlock(3));\n\n        \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(14));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(15));\n\n\n        \r\n        byte[] data = new byte[4096 * 5];\n        for (int i = 0; i < data.length; i++) {\n            data[i] = (byte) (i % 256);\n        }\n        POIFSStream stream = new POIFSStream(fs, 0);\n        stream.updateContents(data);\n\n\n        \r\n        assertEquals(1, fs.getNextBlock(0));\n        assertEquals(2, fs.getNextBlock(1));\n        assertEquals(15, fs.getNextBlock(2)); \r\n        assertEquals(4, fs.getNextBlock(3));  \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(14));\n        assertEquals(16, fs.getNextBlock(15)); \r\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(16)); \r\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(17)); \r\n\n        \r\n        Iterator<ByteBuffer> it = stream.getBlockIterator();\n        int count = 0;\n        while (it.hasNext()) {\n            ByteBuffer b = it.next();\n            data = new byte[512];\n            b.get(data);\n            for (int i = 0; i < data.length; i++) {\n                byte exp = (byte) (i % 256);\n                assertEquals(exp, data[i]);\n            }\n            count++;\n        }\n        assertEquals(5, count);\n\n        fs.close();\n    }\n","realPath":"poi/src/test/java/org/apache/poi/poifs/filesystem/TestPOIFSStream.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":594,"status":"B"}],"commitId":"b6aee1ef6d3e92a28ffd4b5c03e677b63b43747f","commitMessage":"@@@65206 - Migrate ant / maven to gradle build\ncompile / jar / test of mrJars\ndon't include ants build.xml anymore\nrename directories to match project and maven artifact names\nrefactor artifacts - so each project has one artifact\nreplace static references in hssf/dev tests with junit5 constructs.  which had problems in parallel tests\nincrease gradle heap to 4gb because of OOM - maybe less would also work\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1888488 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2021-04-08 05:40:33","modifiedFileCount":"0","status":"B","submitter":"Andreas Beeker"},{"authorTime":"2021-05-14 08:37:50","codes":[{"authorDate":"2021-05-14 08:37:50","commitOrder":2,"curCode":"    void testWriteNewStream() throws Exception {\n        try (POIFSFileSystem fs = new POIFSFileSystem(_inst.openResourceAsStream(\"BlockSize512.zvi\"))) {\n\n            \r\n            assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(100));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n\n            \r\n            byte[] data = new byte[512];\n            for (int i = 0; i < data.length; i++) {\n                data[i] = (byte) (i % 256);\n            }\n\n            POIFSStream stream = new POIFSStream(fs);\n            stream.updateContents(data);\n\n            \r\n            assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n            assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n            \r\n            Iterator<ByteBuffer> it = stream.getBlockIterator();\n            int count = 0;\n            while (it.hasNext()) {\n                ByteBuffer b = it.next();\n                data = new byte[512];\n                b.get(data);\n                for (int i = 0; i < data.length; i++) {\n                    byte exp = (byte) (i % 256);\n                    assertEquals(exp, data[i]);\n                }\n                count++;\n            }\n            assertEquals(1, count);\n\n\n            \r\n            data = new byte[512 * 3];\n            for (int i = 0; i < data.length; i++) {\n                data[i] = (byte) (i % 256);\n            }\n\n            stream = new POIFSStream(fs);\n            stream.updateContents(data);\n\n            \r\n            assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n            assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));\n            assertEquals(102, fs.getNextBlock(101));\n            assertEquals(103, fs.getNextBlock(102));\n            assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(103));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n            \r\n            it = stream.getBlockIterator();\n            count = 0;\n            while (it.hasNext()) {\n                ByteBuffer b = it.next();\n                data = new byte[512];\n                b.get(data);\n                for (int i = 0; i < data.length; i++) {\n                    byte exp = (byte) (i % 256);\n                    assertEquals(exp, data[i]);\n                }\n                count++;\n            }\n            assertEquals(3, count);\n\n            \r\n            stream.free();\n            assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n            assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n        }\n    }\n","date":"2021-05-14 08:37:50","endLine":545,"groupId":"101995","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testWriteNewStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/43/0cd8e5d2048f4ede7699ed07de7ef76c4ac1ee.src","preCode":"    void testWriteNewStream() throws Exception {\n        POIFSFileSystem fs = new POIFSFileSystem(_inst.openResourceAsStream(\"BlockSize512.zvi\"));\n\n        \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(100));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n\n        \r\n        byte[] data = new byte[512];\n        for (int i = 0; i < data.length; i++) {\n            data[i] = (byte) (i % 256);\n        }\n\n        POIFSStream stream = new POIFSStream(fs);\n        stream.updateContents(data);\n\n        \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n        \r\n        Iterator<ByteBuffer> it = stream.getBlockIterator();\n        int count = 0;\n        while (it.hasNext()) {\n            ByteBuffer b = it.next();\n            data = new byte[512];\n            b.get(data);\n            for (int i = 0; i < data.length; i++) {\n                byte exp = (byte) (i % 256);\n                assertEquals(exp, data[i]);\n            }\n            count++;\n        }\n        assertEquals(1, count);\n\n\n        \r\n        data = new byte[512 * 3];\n        for (int i = 0; i < data.length; i++) {\n            data[i] = (byte) (i % 256);\n        }\n\n        stream = new POIFSStream(fs);\n        stream.updateContents(data);\n\n        \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));\n        assertEquals(102, fs.getNextBlock(101));\n        assertEquals(103, fs.getNextBlock(102));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(103));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n        \r\n        it = stream.getBlockIterator();\n        count = 0;\n        while (it.hasNext()) {\n            ByteBuffer b = it.next();\n            data = new byte[512];\n            b.get(data);\n            for (int i = 0; i < data.length; i++) {\n                byte exp = (byte) (i % 256);\n                assertEquals(exp, data[i]);\n            }\n            count++;\n        }\n        assertEquals(3, count);\n\n        \r\n        stream.free();\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(99));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(100));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(101));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(102));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(103));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(104));\n\n        fs.close();\n    }\n","realPath":"poi/src/test/java/org/apache/poi/poifs/filesystem/TestPOIFSStream.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"M"},{"authorDate":"2021-05-14 08:37:50","commitOrder":2,"curCode":"    void testWriteStream4096() throws Exception {\n        try (POIFSFileSystem fs = new POIFSFileSystem(_inst.openResourceAsStream(\"BlockSize4096.zvi\"))) {\n\n            \r\n            assertEquals(1, fs.getNextBlock(0));\n            assertEquals(2, fs.getNextBlock(1));\n            assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(2));\n            assertEquals(4, fs.getNextBlock(3));\n\n            \r\n            assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(14));\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(15));\n\n\n            \r\n            byte[] data = new byte[4096 * 5];\n            for (int i = 0; i < data.length; i++) {\n                data[i] = (byte) (i % 256);\n            }\n            POIFSStream stream = new POIFSStream(fs, 0);\n            stream.updateContents(data);\n\n\n            \r\n            assertEquals(1, fs.getNextBlock(0));\n            assertEquals(2, fs.getNextBlock(1));\n            assertEquals(15, fs.getNextBlock(2)); \r\n            assertEquals(4, fs.getNextBlock(3));  \r\n            assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(14));\n            assertEquals(16, fs.getNextBlock(15)); \r\n            assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(16)); \r\n            assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(17)); \r\n\n            \r\n            Iterator<ByteBuffer> it = stream.getBlockIterator();\n            int count = 0;\n            while (it.hasNext()) {\n                ByteBuffer b = it.next();\n                data = new byte[512];\n                b.get(data);\n                for (int i = 0; i < data.length; i++) {\n                    byte exp = (byte) (i % 256);\n                    assertEquals(exp, data[i]);\n                }\n                count++;\n            }\n            assertEquals(5, count);\n        }\n    }\n","date":"2021-05-14 08:37:50","endLine":642,"groupId":"101995","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testWriteStream4096","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/43/0cd8e5d2048f4ede7699ed07de7ef76c4ac1ee.src","preCode":"    void testWriteStream4096() throws Exception {\n        POIFSFileSystem fs = new POIFSFileSystem(_inst.openResourceAsStream(\"BlockSize4096.zvi\"));\n\n        \r\n        assertEquals(1, fs.getNextBlock(0));\n        assertEquals(2, fs.getNextBlock(1));\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(2));\n        assertEquals(4, fs.getNextBlock(3));\n\n        \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(14));\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(15));\n\n\n        \r\n        byte[] data = new byte[4096 * 5];\n        for (int i = 0; i < data.length; i++) {\n            data[i] = (byte) (i % 256);\n        }\n        POIFSStream stream = new POIFSStream(fs, 0);\n        stream.updateContents(data);\n\n\n        \r\n        assertEquals(1, fs.getNextBlock(0));\n        assertEquals(2, fs.getNextBlock(1));\n        assertEquals(15, fs.getNextBlock(2)); \r\n        assertEquals(4, fs.getNextBlock(3));  \r\n        assertEquals(POIFSConstants.FAT_SECTOR_BLOCK, fs.getNextBlock(14));\n        assertEquals(16, fs.getNextBlock(15)); \r\n        assertEquals(POIFSConstants.END_OF_CHAIN, fs.getNextBlock(16)); \r\n        assertEquals(POIFSConstants.UNUSED_BLOCK, fs.getNextBlock(17)); \r\n\n        \r\n        Iterator<ByteBuffer> it = stream.getBlockIterator();\n        int count = 0;\n        while (it.hasNext()) {\n            ByteBuffer b = it.next();\n            data = new byte[512];\n            b.get(data);\n            for (int i = 0; i < data.length; i++) {\n                byte exp = (byte) (i % 256);\n                assertEquals(exp, data[i]);\n            }\n            count++;\n        }\n        assertEquals(5, count);\n\n        fs.close();\n    }\n","realPath":"poi/src/test/java/org/apache/poi/poifs/filesystem/TestPOIFSStream.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":594,"status":"M"}],"commitId":"0614835c55f44ab6f3e9b0850ca51e0e53a65a49","commitMessage":"@@@#65304 - Add commons-io as a dependency\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1889871 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2021-05-14 08:37:50","modifiedFileCount":"277","status":"M","submitter":"Andreas Beeker"}]
