[{"authorTime":"2021-04-08 05:40:33","codes":[{"authorDate":"2021-04-08 05:40:33","commitOrder":1,"curCode":"\tpublic void testSampleFile() throws Exception {\n\t\tfinal ByteArrayOutputStream outputBytes = new ByteArrayOutputStream();\n\t\tPrintStream out = new PrintStream(outputBytes);\n\n\t\t\r\n\t\ttry (OPCPackage p = OPCPackage.open(XSSFTestDataSamples.getSampleFile(\"sample.xlsx\").getAbsolutePath(), PackageAccess.READ)) {\n\t\t\tXLSX2CSV xlsx2csv = new XLSX2CSV(p, out, -1);\n\t\t\txlsx2csv.process();\n\t\t}\n\n\t\tString errorOutput = errorBytes.toString(\"UTF-8\");\n\t\tassertEquals(errorOutput.length(), 0);\n\n\t\tString output = outputBytes.toString(\"UTF-8\");\n\t\tassertTrue(output.contains(\"\\\"Lorem\\\",111\"), \"Had: \" + output);\n\t\tassertTrue(output.contains(\",\\\"hello, xssf\\\",,\\\"hello, xssf\\\"\"), \"Had: \" + output);\n\t}\n","date":"2021-04-08 05:40:33","endLine":93,"groupId":"8784","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSampleFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/68/63fc9bbeb124303452aa397e59b967e1cd9684.src","preCode":"\tpublic void testSampleFile() throws Exception {\n\t\tfinal ByteArrayOutputStream outputBytes = new ByteArrayOutputStream();\n\t\tPrintStream out = new PrintStream(outputBytes);\n\n\t\t\r\n\t\ttry (OPCPackage p = OPCPackage.open(XSSFTestDataSamples.getSampleFile(\"sample.xlsx\").getAbsolutePath(), PackageAccess.READ)) {\n\t\t\tXLSX2CSV xlsx2csv = new XLSX2CSV(p, out, -1);\n\t\t\txlsx2csv.process();\n\t\t}\n\n\t\tString errorOutput = errorBytes.toString(\"UTF-8\");\n\t\tassertEquals(errorOutput.length(), 0);\n\n\t\tString output = outputBytes.toString(\"UTF-8\");\n\t\tassertTrue(output.contains(\"\\\"Lorem\\\",111\"), \"Had: \" + output);\n\t\tassertTrue(output.contains(\",\\\"hello, xssf\\\",,\\\"hello, xssf\\\"\"), \"Had: \" + output);\n\t}\n","realPath":"poi-examples/src/test/java/org/apache/poi/integration/TestXLSX2CSV.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2021-04-08 05:40:33","commitOrder":1,"curCode":"\tpublic void testMinColumns() throws Exception {\n\t\tfinal ByteArrayOutputStream outputBytes = new ByteArrayOutputStream();\n\t\tPrintStream out = new PrintStream(outputBytes);\n\n\t\t\r\n\t\ttry (OPCPackage p = OPCPackage.open(XSSFTestDataSamples.getSampleFile(\"sample.xlsx\").getAbsolutePath(), PackageAccess.READ)) {\n\t\t\tXLSX2CSV xlsx2csv = new XLSX2CSV(p, out, 5);\n\t\t\txlsx2csv.process();\n\t\t}\n\n\t\tString errorOutput = errorBytes.toString(\"UTF-8\");\n\t\tassertEquals(errorOutput.length(), 0);\n\n\t\tString output = outputBytes.toString(\"UTF-8\");\n\t\tassertTrue(output.contains(\"\\\"Lorem\\\",111,,,\"), \"Had: \" + output);\n\t\tassertTrue(output.contains(\",\\\"hello, xssf\\\",,\\\"hello, xssf\\\",\"), \"Had: \" + output);\n\t}\n","date":"2021-04-08 05:40:33","endLine":112,"groupId":"16215","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMinColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/68/63fc9bbeb124303452aa397e59b967e1cd9684.src","preCode":"\tpublic void testMinColumns() throws Exception {\n\t\tfinal ByteArrayOutputStream outputBytes = new ByteArrayOutputStream();\n\t\tPrintStream out = new PrintStream(outputBytes);\n\n\t\t\r\n\t\ttry (OPCPackage p = OPCPackage.open(XSSFTestDataSamples.getSampleFile(\"sample.xlsx\").getAbsolutePath(), PackageAccess.READ)) {\n\t\t\tXLSX2CSV xlsx2csv = new XLSX2CSV(p, out, 5);\n\t\t\txlsx2csv.process();\n\t\t}\n\n\t\tString errorOutput = errorBytes.toString(\"UTF-8\");\n\t\tassertEquals(errorOutput.length(), 0);\n\n\t\tString output = outputBytes.toString(\"UTF-8\");\n\t\tassertTrue(output.contains(\"\\\"Lorem\\\",111,,,\"), \"Had: \" + output);\n\t\tassertTrue(output.contains(\",\\\"hello, xssf\\\",,\\\"hello, xssf\\\",\"), \"Had: \" + output);\n\t}\n","realPath":"poi-examples/src/test/java/org/apache/poi/integration/TestXLSX2CSV.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"}],"commitId":"b6aee1ef6d3e92a28ffd4b5c03e677b63b43747f","commitMessage":"@@@65206 - Migrate ant / maven to gradle build\ncompile / jar / test of mrJars\ndon't include ants build.xml anymore\nrename directories to match project and maven artifact names\nrefactor artifacts - so each project has one artifact\nreplace static references in hssf/dev tests with junit5 constructs.  which had problems in parallel tests\nincrease gradle heap to 4gb because of OOM - maybe less would also work\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1888488 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2021-04-08 05:40:33","modifiedFileCount":"0","status":"B","submitter":"Andreas Beeker"},{"authorTime":"2021-05-14 08:37:50","codes":[{"authorDate":"2021-05-14 08:37:50","commitOrder":2,"curCode":"\tpublic void testSampleFile() throws Exception {\n\t\tfinal UnsynchronizedByteArrayOutputStream outputBytes = new UnsynchronizedByteArrayOutputStream();\n\t\tPrintStream out = new PrintStream(outputBytes);\n\n\t\t\r\n\t\ttry (OPCPackage p = OPCPackage.open(XSSFTestDataSamples.getSampleFile(\"sample.xlsx\").getAbsolutePath(), PackageAccess.READ)) {\n\t\t\tXLSX2CSV xlsx2csv = new XLSX2CSV(p, out, -1);\n\t\t\txlsx2csv.process();\n\t\t}\n\n\t\tString errorOutput = errorBytes.toString(StandardCharsets.UTF_8);\n\t\tassertEquals(errorOutput.length(), 0);\n\n\t\tString output = outputBytes.toString(StandardCharsets.UTF_8);\n\t\tassertTrue(output.contains(\"\\\"Lorem\\\",111\"), \"Had: \" + output);\n\t\tassertTrue(output.contains(\",\\\"hello, xssf\\\",,\\\"hello, xssf\\\"\"), \"Had: \" + output);\n\t}\n","date":"2021-05-14 08:37:50","endLine":94,"groupId":"8784","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSampleFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/f2/1f512284e544abd884d06e394b09df099add67.src","preCode":"\tpublic void testSampleFile() throws Exception {\n\t\tfinal ByteArrayOutputStream outputBytes = new ByteArrayOutputStream();\n\t\tPrintStream out = new PrintStream(outputBytes);\n\n\t\t\r\n\t\ttry (OPCPackage p = OPCPackage.open(XSSFTestDataSamples.getSampleFile(\"sample.xlsx\").getAbsolutePath(), PackageAccess.READ)) {\n\t\t\tXLSX2CSV xlsx2csv = new XLSX2CSV(p, out, -1);\n\t\t\txlsx2csv.process();\n\t\t}\n\n\t\tString errorOutput = errorBytes.toString(\"UTF-8\");\n\t\tassertEquals(errorOutput.length(), 0);\n\n\t\tString output = outputBytes.toString(\"UTF-8\");\n\t\tassertTrue(output.contains(\"\\\"Lorem\\\",111\"), \"Had: \" + output);\n\t\tassertTrue(output.contains(\",\\\"hello, xssf\\\",,\\\"hello, xssf\\\"\"), \"Had: \" + output);\n\t}\n","realPath":"poi-examples/src/test/java/org/apache/poi/integration/TestXLSX2CSV.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-05-14 08:37:50","commitOrder":2,"curCode":"\tpublic void testMinColumns() throws Exception {\n\t\tfinal UnsynchronizedByteArrayOutputStream outputBytes = new UnsynchronizedByteArrayOutputStream();\n\t\tPrintStream out = new PrintStream(outputBytes);\n\n\t\t\r\n\t\ttry (OPCPackage p = OPCPackage.open(XSSFTestDataSamples.getSampleFile(\"sample.xlsx\").getAbsolutePath(), PackageAccess.READ)) {\n\t\t\tXLSX2CSV xlsx2csv = new XLSX2CSV(p, out, 5);\n\t\t\txlsx2csv.process();\n\t\t}\n\n\t\tString errorOutput = errorBytes.toString(StandardCharsets.UTF_8);\n\t\tassertEquals(errorOutput.length(), 0);\n\n\t\tString output = outputBytes.toString(StandardCharsets.UTF_8);\n\t\tassertTrue(output.contains(\"\\\"Lorem\\\",111,,,\"), \"Had: \" + output);\n\t\tassertTrue(output.contains(\",\\\"hello, xssf\\\",,\\\"hello, xssf\\\",\"), \"Had: \" + output);\n\t}\n","date":"2021-05-14 08:37:50","endLine":113,"groupId":"16215","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMinColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/f2/1f512284e544abd884d06e394b09df099add67.src","preCode":"\tpublic void testMinColumns() throws Exception {\n\t\tfinal ByteArrayOutputStream outputBytes = new ByteArrayOutputStream();\n\t\tPrintStream out = new PrintStream(outputBytes);\n\n\t\t\r\n\t\ttry (OPCPackage p = OPCPackage.open(XSSFTestDataSamples.getSampleFile(\"sample.xlsx\").getAbsolutePath(), PackageAccess.READ)) {\n\t\t\tXLSX2CSV xlsx2csv = new XLSX2CSV(p, out, 5);\n\t\t\txlsx2csv.process();\n\t\t}\n\n\t\tString errorOutput = errorBytes.toString(\"UTF-8\");\n\t\tassertEquals(errorOutput.length(), 0);\n\n\t\tString output = outputBytes.toString(\"UTF-8\");\n\t\tassertTrue(output.contains(\"\\\"Lorem\\\",111,,,\"), \"Had: \" + output);\n\t\tassertTrue(output.contains(\",\\\"hello, xssf\\\",,\\\"hello, xssf\\\",\"), \"Had: \" + output);\n\t}\n","realPath":"poi-examples/src/test/java/org/apache/poi/integration/TestXLSX2CSV.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"0614835c55f44ab6f3e9b0850ca51e0e53a65a49","commitMessage":"@@@#65304 - Add commons-io as a dependency\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1889871 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2021-05-14 08:37:50","modifiedFileCount":"277","status":"M","submitter":"Andreas Beeker"},{"authorTime":"2021-05-22 06:32:09","codes":[{"authorDate":"2021-05-22 06:32:09","commitOrder":3,"curCode":"\tpublic void testSampleFile() throws Exception {\n\t\tfinal UnsynchronizedByteArrayOutputStream outputBytes = new UnsynchronizedByteArrayOutputStream();\n\t\tPrintStream out = new PrintStream(outputBytes, true, \"UTF-8\");\n\n\t\t\r\n\t\ttry (OPCPackage p = OPCPackage.open(XSSFTestDataSamples.getSampleFile(\"sample.xlsx\").getAbsolutePath(), PackageAccess.READ)) {\n\t\t\tXLSX2CSV xlsx2csv = new XLSX2CSV(p, out, -1);\n\t\t\txlsx2csv.process();\n\t\t}\n\n\t\tString errorOutput = errorBytes.toString(StandardCharsets.UTF_8);\n\t\tassertEquals(errorOutput.length(), 0);\n\n\t\tString output = outputBytes.toString(StandardCharsets.UTF_8);\n\t\tassertTrue(output.contains(\"\\\"Lorem\\\",111\"), \"Had: \" + output);\n\t\tassertTrue(output.contains(\",\\\"hello, xssf\\\",,\\\"hello, xssf\\\"\"), \"Had: \" + output);\n\t}\n","date":"2021-05-22 06:32:09","endLine":95,"groupId":"106","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSampleFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/13/9b9115d3aa73294df3d8a52eda3b7bebef5ed4.src","preCode":"\tpublic void testSampleFile() throws Exception {\n\t\tfinal UnsynchronizedByteArrayOutputStream outputBytes = new UnsynchronizedByteArrayOutputStream();\n\t\tPrintStream out = new PrintStream(outputBytes);\n\n\t\t\r\n\t\ttry (OPCPackage p = OPCPackage.open(XSSFTestDataSamples.getSampleFile(\"sample.xlsx\").getAbsolutePath(), PackageAccess.READ)) {\n\t\t\tXLSX2CSV xlsx2csv = new XLSX2CSV(p, out, -1);\n\t\t\txlsx2csv.process();\n\t\t}\n\n\t\tString errorOutput = errorBytes.toString(StandardCharsets.UTF_8);\n\t\tassertEquals(errorOutput.length(), 0);\n\n\t\tString output = outputBytes.toString(StandardCharsets.UTF_8);\n\t\tassertTrue(output.contains(\"\\\"Lorem\\\",111\"), \"Had: \" + output);\n\t\tassertTrue(output.contains(\",\\\"hello, xssf\\\",,\\\"hello, xssf\\\"\"), \"Had: \" + output);\n\t}\n","realPath":"poi-examples/src/test/java/org/apache/poi/integration/TestXLSX2CSV.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2021-05-22 06:32:09","commitOrder":3,"curCode":"\tpublic void testMinColumns() throws Exception {\n\t\tfinal UnsynchronizedByteArrayOutputStream outputBytes = new UnsynchronizedByteArrayOutputStream();\n\t\tPrintStream out = new PrintStream(outputBytes, true, \"UTF-8\");\n\n\t\t\r\n\t\ttry (OPCPackage p = OPCPackage.open(XSSFTestDataSamples.getSampleFile(\"sample.xlsx\").getAbsolutePath(), PackageAccess.READ)) {\n\t\t\tXLSX2CSV xlsx2csv = new XLSX2CSV(p, out, 5);\n\t\t\txlsx2csv.process();\n\t\t}\n\n\t\tString errorOutput = errorBytes.toString(StandardCharsets.UTF_8);\n\t\tassertEquals(errorOutput.length(), 0);\n\n\t\tString output = outputBytes.toString(StandardCharsets.UTF_8);\n\t\tassertTrue(output.contains(\"\\\"Lorem\\\",111,,,\"), \"Had: \" + output);\n\t\tassertTrue(output.contains(\",\\\"hello, xssf\\\",,\\\"hello, xssf\\\",\"), \"Had: \" + output);\n\t}\n","date":"2021-05-22 06:32:09","endLine":114,"groupId":"106","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMinColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/13/9b9115d3aa73294df3d8a52eda3b7bebef5ed4.src","preCode":"\tpublic void testMinColumns() throws Exception {\n\t\tfinal UnsynchronizedByteArrayOutputStream outputBytes = new UnsynchronizedByteArrayOutputStream();\n\t\tPrintStream out = new PrintStream(outputBytes);\n\n\t\t\r\n\t\ttry (OPCPackage p = OPCPackage.open(XSSFTestDataSamples.getSampleFile(\"sample.xlsx\").getAbsolutePath(), PackageAccess.READ)) {\n\t\t\tXLSX2CSV xlsx2csv = new XLSX2CSV(p, out, 5);\n\t\t\txlsx2csv.process();\n\t\t}\n\n\t\tString errorOutput = errorBytes.toString(StandardCharsets.UTF_8);\n\t\tassertEquals(errorOutput.length(), 0);\n\n\t\tString output = outputBytes.toString(StandardCharsets.UTF_8);\n\t\tassertTrue(output.contains(\"\\\"Lorem\\\",111,,,\"), \"Had: \" + output);\n\t\tassertTrue(output.contains(\",\\\"hello, xssf\\\",,\\\"hello, xssf\\\",\"), \"Had: \" + output);\n\t}\n","realPath":"poi-examples/src/test/java/org/apache/poi/integration/TestXLSX2CSV.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"f21019db12ad2234d5681f49a0c5a40064fc2418","commitMessage":"@@@add forbidden-apis plugin to gradle builds\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1890090 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2021-05-22 06:32:09","modifiedFileCount":"3","status":"M","submitter":"Andreas Beeker"}]
