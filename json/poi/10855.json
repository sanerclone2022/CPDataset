[{"authorTime":"2021-04-08 05:40:33","codes":[{"authorDate":"2021-04-08 05:40:33","commitOrder":1,"curCode":"    void addToExistingWorkbook() throws IOException {\n    \tXSSFWorkbook xssfWb1 = new XSSFWorkbook();\n    \txssfWb1.createSheet(\"S1\");\n    \tSheet sheet = xssfWb1.createSheet(\"S2\");\n    \tRow row = sheet.createRow(1);\n    \tCell cell = row.createCell(1);\n    \tcell.setCellValue(\"value 2_1_1\");\n        SXSSFWorkbook wb1 = new SXSSFWorkbook(xssfWb1);\n    \tXSSFWorkbook xssfWb2 = SXSSFITestDataProvider.instance.writeOutAndReadBack(wb1);\n        assertTrue(wb1.dispose());\n        xssfWb1.close();\n\n        SXSSFWorkbook wb2 = new SXSSFWorkbook(xssfWb2);\n    \t\r\n    \tSheet sheet1 = wb2.getSheetAt(0);\n    \tRow row1_1 = sheet1.createRow(1);\n    \tCell cell1_1_1 = row1_1.createCell(1);\n    \tcell1_1_1.setCellValue(\"value 1_1_1\");\n\n    \t\r\n    \tSheet sheet2 = wb2.getSheetAt(1);\n    \tRow row2_2 = sheet2.createRow(2);\n    \tCell cell2_2_1 = row2_2.createCell(1);\n    \tcell2_2_1.setCellValue(\"value 2_2_1\");\n\n    \t\r\n    \tSheet sheet3 = wb2.createSheet(\"S3\");\n    \tRow row3_1 = sheet3.createRow(1);\n    \tCell cell3_1_1 = row3_1.createCell(1);\n    \tcell3_1_1.setCellValue(\"value 3_1_1\");\n\n    \tXSSFWorkbook xssfWb3 = SXSSFITestDataProvider.instance.writeOutAndReadBack(wb2);\n    \twb2.close();\n\n    \tassertEquals(3, xssfWb3.getNumberOfSheets());\n    \t\r\n    \tsheet1 = xssfWb3.getSheetAt(0);\n    \tassertEquals(\"S1\", sheet1.getSheetName());\n    \tassertEquals(1, sheet1.getPhysicalNumberOfRows());\n    \trow1_1 = sheet1.getRow(1);\n    \tassertNotNull(row1_1);\n    \tcell1_1_1 = row1_1.getCell(1);\n    \tassertNotNull(cell1_1_1);\n    \tassertEquals(\"value 1_1_1\", cell1_1_1.getStringCellValue());\n    \t\r\n    \tsheet2 = xssfWb3.getSheetAt(1);\n    \tassertEquals(\"S2\", sheet2.getSheetName());\n    \tassertEquals(2, sheet2.getPhysicalNumberOfRows());\n    \tRow row2_1 = sheet2.getRow(1);\n    \tassertNotNull(row2_1);\n    \tCell cell2_1_1 = row2_1.getCell(1);\n    \tassertNotNull(cell2_1_1);\n    \tassertEquals(\"value 2_1_1\", cell2_1_1.getStringCellValue());\n    \trow2_2 = sheet2.getRow(2);\n    \tassertNotNull(row2_2);\n    \tcell2_2_1 = row2_2.getCell(1);\n    \tassertNotNull(cell2_2_1);\n    \tassertEquals(\"value 2_2_1\", cell2_2_1.getStringCellValue());\n    \t\r\n    \tsheet3 = xssfWb3.getSheetAt(2);\n    \tassertEquals(\"S3\", sheet3.getSheetName());\n    \tassertEquals(1, sheet3.getPhysicalNumberOfRows());\n    \trow3_1 = sheet3.getRow(1);\n    \tassertNotNull(row3_1);\n    \tcell3_1_1 = row3_1.getCell(1);\n    \tassertNotNull(cell3_1_1);\n    \tassertEquals(\"value 3_1_1\", cell3_1_1.getStringCellValue());\n\n        xssfWb2.close();\n    \txssfWb3.close();\n    \twb1.close();\n    }\n","date":"2021-04-08 05:40:33","endLine":231,"groupId":"17862","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addToExistingWorkbook","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/e0/65b26adb12d67a01af04750ebf64145cc54c74.src","preCode":"    void addToExistingWorkbook() throws IOException {\n    \tXSSFWorkbook xssfWb1 = new XSSFWorkbook();\n    \txssfWb1.createSheet(\"S1\");\n    \tSheet sheet = xssfWb1.createSheet(\"S2\");\n    \tRow row = sheet.createRow(1);\n    \tCell cell = row.createCell(1);\n    \tcell.setCellValue(\"value 2_1_1\");\n        SXSSFWorkbook wb1 = new SXSSFWorkbook(xssfWb1);\n    \tXSSFWorkbook xssfWb2 = SXSSFITestDataProvider.instance.writeOutAndReadBack(wb1);\n        assertTrue(wb1.dispose());\n        xssfWb1.close();\n\n        SXSSFWorkbook wb2 = new SXSSFWorkbook(xssfWb2);\n    \t\r\n    \tSheet sheet1 = wb2.getSheetAt(0);\n    \tRow row1_1 = sheet1.createRow(1);\n    \tCell cell1_1_1 = row1_1.createCell(1);\n    \tcell1_1_1.setCellValue(\"value 1_1_1\");\n\n    \t\r\n    \tSheet sheet2 = wb2.getSheetAt(1);\n    \tRow row2_2 = sheet2.createRow(2);\n    \tCell cell2_2_1 = row2_2.createCell(1);\n    \tcell2_2_1.setCellValue(\"value 2_2_1\");\n\n    \t\r\n    \tSheet sheet3 = wb2.createSheet(\"S3\");\n    \tRow row3_1 = sheet3.createRow(1);\n    \tCell cell3_1_1 = row3_1.createCell(1);\n    \tcell3_1_1.setCellValue(\"value 3_1_1\");\n\n    \tXSSFWorkbook xssfWb3 = SXSSFITestDataProvider.instance.writeOutAndReadBack(wb2);\n    \twb2.close();\n\n    \tassertEquals(3, xssfWb3.getNumberOfSheets());\n    \t\r\n    \tsheet1 = xssfWb3.getSheetAt(0);\n    \tassertEquals(\"S1\", sheet1.getSheetName());\n    \tassertEquals(1, sheet1.getPhysicalNumberOfRows());\n    \trow1_1 = sheet1.getRow(1);\n    \tassertNotNull(row1_1);\n    \tcell1_1_1 = row1_1.getCell(1);\n    \tassertNotNull(cell1_1_1);\n    \tassertEquals(\"value 1_1_1\", cell1_1_1.getStringCellValue());\n    \t\r\n    \tsheet2 = xssfWb3.getSheetAt(1);\n    \tassertEquals(\"S2\", sheet2.getSheetName());\n    \tassertEquals(2, sheet2.getPhysicalNumberOfRows());\n    \tRow row2_1 = sheet2.getRow(1);\n    \tassertNotNull(row2_1);\n    \tCell cell2_1_1 = row2_1.getCell(1);\n    \tassertNotNull(cell2_1_1);\n    \tassertEquals(\"value 2_1_1\", cell2_1_1.getStringCellValue());\n    \trow2_2 = sheet2.getRow(2);\n    \tassertNotNull(row2_2);\n    \tcell2_2_1 = row2_2.getCell(1);\n    \tassertNotNull(cell2_2_1);\n    \tassertEquals(\"value 2_2_1\", cell2_2_1.getStringCellValue());\n    \t\r\n    \tsheet3 = xssfWb3.getSheetAt(2);\n    \tassertEquals(\"S3\", sheet3.getSheetName());\n    \tassertEquals(1, sheet3.getPhysicalNumberOfRows());\n    \trow3_1 = sheet3.getRow(1);\n    \tassertNotNull(row3_1);\n    \tcell3_1_1 = row3_1.getCell(1);\n    \tassertNotNull(cell3_1_1);\n    \tassertEquals(\"value 3_1_1\", cell3_1_1.getStringCellValue());\n\n        xssfWb2.close();\n    \txssfWb3.close();\n    \twb1.close();\n    }\n","realPath":"poi-ooxml/src/test/java/org/apache/poi/xssf/streaming/TestSXSSFWorkbook.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"B"},{"authorDate":"2021-04-08 05:40:33","commitOrder":1,"curCode":"    void addToExistingWorkbook() throws IOException {\n        XSSFWorkbook xssfWb1 = new XSSFWorkbook();\n        xssfWb1.createSheet(\"S1\");\n        Sheet sheet = xssfWb1.createSheet(\"S2\");\n        Row row = sheet.createRow(1);\n        Cell cell = row.createCell(1);\n        cell.setCellValue(\"value 2_1_1\");\n        DeferredSXSSFWorkbook wb1 = new DeferredSXSSFWorkbook(xssfWb1);\n        XSSFWorkbook xssfWb2 = DeferredSXSSFITestDataProvider.instance.writeOutAndReadBack(wb1);\n        assertTrue(wb1.dispose());\n        xssfWb1.close();\n\n        DeferredSXSSFWorkbook wb2 = new DeferredSXSSFWorkbook(xssfWb2);\n        \r\n        DeferredSXSSFSheet ssheet1 = wb2.getStreamingSheetAt(0);\n        ssheet1.setRowGenerator((ssxSheet) -> {\n            Row row1_1 = ssxSheet.createRow(1);\n            Cell cell1_1_1 = row1_1.createCell(1);\n            cell1_1_1.setCellValue(\"value 1_1_1\");\n        });\n\n        \r\n        DeferredSXSSFSheet ssheet2 = wb2.getStreamingSheetAt(1);\n        ssheet2.setRowGenerator((ssxSheet) -> {\n            Row row2_2 = ssxSheet.createRow(2);\n            Cell cell2_2_1 = row2_2.createCell(1);\n            cell2_2_1.setCellValue(\"value 2_2_1\");\n        });\n        \r\n        DeferredSXSSFSheet ssheet3 = wb2.createSheet(\"S3\");\n        ssheet3.setRowGenerator((ssxSheet) -> {\n            Row row3_1 = ssxSheet.createRow(1);\n            Cell cell3_1_1 = row3_1.createCell(1);\n            cell3_1_1.setCellValue(\"value 3_1_1\");\n        });\n\n        XSSFWorkbook xssfWb3 = DeferredSXSSFITestDataProvider.instance.writeOutAndReadBack(wb2);\n        wb2.close();\n\n        assertEquals(3, xssfWb3.getNumberOfSheets());\n        \r\n        XSSFSheet sheet1 = xssfWb3.getSheetAt(0);\n        assertEquals(\"S1\", sheet1.getSheetName());\n        assertEquals(1, sheet1.getPhysicalNumberOfRows());\n        XSSFRow row1_1 = sheet1.getRow(1);\n        assertNotNull(row1_1);\n        XSSFCell cell1_1_1 = row1_1.getCell(1);\n        assertNotNull(cell1_1_1);\n        assertEquals(\"value 1_1_1\", cell1_1_1.getStringCellValue());\n        \r\n        XSSFSheet sheet2 = xssfWb3.getSheetAt(1);\n        assertEquals(\"S2\", sheet2.getSheetName());\n        assertEquals(2, sheet2.getPhysicalNumberOfRows());\n        Row row2_1 = sheet2.getRow(1);\n        assertNotNull(row2_1);\n        Cell cell2_1_1 = row2_1.getCell(1);\n        assertNotNull(cell2_1_1);\n        assertEquals(\"value 2_1_1\", cell2_1_1.getStringCellValue());\n        XSSFRow row2_2 = sheet2.getRow(2);\n        assertNotNull(row2_2);\n        XSSFCell cell2_2_1 = row2_2.getCell(1);\n        assertNotNull(cell2_2_1);\n        assertEquals(\"value 2_2_1\", cell2_2_1.getStringCellValue());\n        \r\n        XSSFSheet sheet3 = xssfWb3.getSheetAt(2);\n        assertEquals(\"S3\", sheet3.getSheetName());\n        assertEquals(1, sheet3.getPhysicalNumberOfRows());\n        XSSFRow row3_1 = sheet3.getRow(1);\n        assertNotNull(row3_1);\n        XSSFCell cell3_1_1 = row3_1.getCell(1);\n        assertNotNull(cell3_1_1);\n        assertEquals(\"value 3_1_1\", cell3_1_1.getStringCellValue());\n\n        xssfWb2.close();\n        xssfWb3.close();\n        wb1.close();\n    }\n","date":"2021-04-08 05:40:33","endLine":189,"groupId":"2038","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addToExistingWorkbook","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/74/df887a504b928ca4eeef46c2fe095701e4fd19.src","preCode":"    void addToExistingWorkbook() throws IOException {\n        XSSFWorkbook xssfWb1 = new XSSFWorkbook();\n        xssfWb1.createSheet(\"S1\");\n        Sheet sheet = xssfWb1.createSheet(\"S2\");\n        Row row = sheet.createRow(1);\n        Cell cell = row.createCell(1);\n        cell.setCellValue(\"value 2_1_1\");\n        DeferredSXSSFWorkbook wb1 = new DeferredSXSSFWorkbook(xssfWb1);\n        XSSFWorkbook xssfWb2 = DeferredSXSSFITestDataProvider.instance.writeOutAndReadBack(wb1);\n        assertTrue(wb1.dispose());\n        xssfWb1.close();\n\n        DeferredSXSSFWorkbook wb2 = new DeferredSXSSFWorkbook(xssfWb2);\n        \r\n        DeferredSXSSFSheet ssheet1 = wb2.getStreamingSheetAt(0);\n        ssheet1.setRowGenerator((ssxSheet) -> {\n            Row row1_1 = ssxSheet.createRow(1);\n            Cell cell1_1_1 = row1_1.createCell(1);\n            cell1_1_1.setCellValue(\"value 1_1_1\");\n        });\n\n        \r\n        DeferredSXSSFSheet ssheet2 = wb2.getStreamingSheetAt(1);\n        ssheet2.setRowGenerator((ssxSheet) -> {\n            Row row2_2 = ssxSheet.createRow(2);\n            Cell cell2_2_1 = row2_2.createCell(1);\n            cell2_2_1.setCellValue(\"value 2_2_1\");\n        });\n        \r\n        DeferredSXSSFSheet ssheet3 = wb2.createSheet(\"S3\");\n        ssheet3.setRowGenerator((ssxSheet) -> {\n            Row row3_1 = ssxSheet.createRow(1);\n            Cell cell3_1_1 = row3_1.createCell(1);\n            cell3_1_1.setCellValue(\"value 3_1_1\");\n        });\n\n        XSSFWorkbook xssfWb3 = DeferredSXSSFITestDataProvider.instance.writeOutAndReadBack(wb2);\n        wb2.close();\n\n        assertEquals(3, xssfWb3.getNumberOfSheets());\n        \r\n        XSSFSheet sheet1 = xssfWb3.getSheetAt(0);\n        assertEquals(\"S1\", sheet1.getSheetName());\n        assertEquals(1, sheet1.getPhysicalNumberOfRows());\n        XSSFRow row1_1 = sheet1.getRow(1);\n        assertNotNull(row1_1);\n        XSSFCell cell1_1_1 = row1_1.getCell(1);\n        assertNotNull(cell1_1_1);\n        assertEquals(\"value 1_1_1\", cell1_1_1.getStringCellValue());\n        \r\n        XSSFSheet sheet2 = xssfWb3.getSheetAt(1);\n        assertEquals(\"S2\", sheet2.getSheetName());\n        assertEquals(2, sheet2.getPhysicalNumberOfRows());\n        Row row2_1 = sheet2.getRow(1);\n        assertNotNull(row2_1);\n        Cell cell2_1_1 = row2_1.getCell(1);\n        assertNotNull(cell2_1_1);\n        assertEquals(\"value 2_1_1\", cell2_1_1.getStringCellValue());\n        XSSFRow row2_2 = sheet2.getRow(2);\n        assertNotNull(row2_2);\n        XSSFCell cell2_2_1 = row2_2.getCell(1);\n        assertNotNull(cell2_2_1);\n        assertEquals(\"value 2_2_1\", cell2_2_1.getStringCellValue());\n        \r\n        XSSFSheet sheet3 = xssfWb3.getSheetAt(2);\n        assertEquals(\"S3\", sheet3.getSheetName());\n        assertEquals(1, sheet3.getPhysicalNumberOfRows());\n        XSSFRow row3_1 = sheet3.getRow(1);\n        assertNotNull(row3_1);\n        XSSFCell cell3_1_1 = row3_1.getCell(1);\n        assertNotNull(cell3_1_1);\n        assertEquals(\"value 3_1_1\", cell3_1_1.getStringCellValue());\n\n        xssfWb2.close();\n        xssfWb3.close();\n        wb1.close();\n    }\n","realPath":"poi-ooxml/src/test/java/org/apache/poi/xssf/streaming/TestDeferredSXSSFWorkbook.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"b6aee1ef6d3e92a28ffd4b5c03e677b63b43747f","commitMessage":"@@@65206 - Migrate ant / maven to gradle build\ncompile / jar / test of mrJars\ndon't include ants build.xml anymore\nrename directories to match project and maven artifact names\nrefactor artifacts - so each project has one artifact\nreplace static references in hssf/dev tests with junit5 constructs.  which had problems in parallel tests\nincrease gradle heap to 4gb because of OOM - maybe less would also work\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1888488 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2021-04-08 05:40:33","modifiedFileCount":"0","status":"B","submitter":"Andreas Beeker"},{"authorTime":"2021-08-29 07:48:48","codes":[{"authorDate":"2021-08-29 07:48:48","commitOrder":2,"curCode":"    void addToExistingWorkbook() throws IOException {\n        try (XSSFWorkbook xssfWb1 = new XSSFWorkbook()) {\n            xssfWb1.createSheet(\"S1\");\n            Sheet sheet = xssfWb1.createSheet(\"S2\");\n            Row row = sheet.createRow(1);\n            Cell cell = row.createCell(1);\n            cell.setCellValue(\"value 2_1_1\");\n            try (SXSSFWorkbook wb1 = new SXSSFWorkbook(xssfWb1);\n                 XSSFWorkbook xssfWb2 = SXSSFITestDataProvider.instance.writeOutAndReadBack(wb1)) {\n                assertTrue(wb1.dispose());\n\n                try (SXSSFWorkbook wb2 = new SXSSFWorkbook(xssfWb2)) {\n                    \r\n                    Sheet sheet1 = wb2.getSheetAt(0);\n                    Row row1_1 = sheet1.createRow(1);\n                    Cell cell1_1_1 = row1_1.createCell(1);\n                    cell1_1_1.setCellValue(\"value 1_1_1\");\n\n                    \r\n                    Sheet sheet2 = wb2.getSheetAt(1);\n                    Row row2_2 = sheet2.createRow(2);\n                    Cell cell2_2_1 = row2_2.createCell(1);\n                    cell2_2_1.setCellValue(\"value 2_2_1\");\n\n                    \r\n                    Sheet sheet3 = wb2.createSheet(\"S3\");\n                    Row row3_1 = sheet3.createRow(1);\n                    Cell cell3_1_1 = row3_1.createCell(1);\n                    cell3_1_1.setCellValue(\"value 3_1_1\");\n\n                    try (XSSFWorkbook xssfWb3 = SXSSFITestDataProvider.instance.writeOutAndReadBack(wb2)) {\n                        assertEquals(3, xssfWb3.getNumberOfSheets());\n                        \r\n                        sheet1 = xssfWb3.getSheetAt(0);\n                        assertEquals(\"S1\", sheet1.getSheetName());\n                        assertEquals(1, sheet1.getPhysicalNumberOfRows());\n                        row1_1 = sheet1.getRow(1);\n                        assertNotNull(row1_1);\n                        cell1_1_1 = row1_1.getCell(1);\n                        assertNotNull(cell1_1_1);\n                        assertEquals(\"value 1_1_1\", cell1_1_1.getStringCellValue());\n                        \r\n                        sheet2 = xssfWb3.getSheetAt(1);\n                        assertEquals(\"S2\", sheet2.getSheetName());\n                        assertEquals(2, sheet2.getPhysicalNumberOfRows());\n                        Row row2_1 = sheet2.getRow(1);\n                        assertNotNull(row2_1);\n                        Cell cell2_1_1 = row2_1.getCell(1);\n                        assertNotNull(cell2_1_1);\n                        assertEquals(\"value 2_1_1\", cell2_1_1.getStringCellValue());\n                        row2_2 = sheet2.getRow(2);\n                        assertNotNull(row2_2);\n                        cell2_2_1 = row2_2.getCell(1);\n                        assertNotNull(cell2_2_1);\n                        assertEquals(\"value 2_2_1\", cell2_2_1.getStringCellValue());\n                        \r\n                        sheet3 = xssfWb3.getSheetAt(2);\n                        assertEquals(\"S3\", sheet3.getSheetName());\n                        assertEquals(1, sheet3.getPhysicalNumberOfRows());\n                        row3_1 = sheet3.getRow(1);\n                        assertNotNull(row3_1);\n                        cell3_1_1 = row3_1.getCell(1);\n                        assertNotNull(cell3_1_1);\n                        assertEquals(\"value 3_1_1\", cell3_1_1.getStringCellValue());\n                    }\n                }\n            }\n        }\n    }\n","date":"2021-08-29 07:48:48","endLine":226,"groupId":"10855","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"addToExistingWorkbook","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/f4/eb9e0990560ce45f952583f1f3210942857737.src","preCode":"    void addToExistingWorkbook() throws IOException {\n        XSSFWorkbook xssfWb1 = new XSSFWorkbook();\n        xssfWb1.createSheet(\"S1\");\n        Sheet sheet = xssfWb1.createSheet(\"S2\");\n        Row row = sheet.createRow(1);\n        Cell cell = row.createCell(1);\n        cell.setCellValue(\"value 2_1_1\");\n        SXSSFWorkbook wb1 = new SXSSFWorkbook(xssfWb1);\n        XSSFWorkbook xssfWb2 = SXSSFITestDataProvider.instance.writeOutAndReadBack(wb1);\n        assertTrue(wb1.dispose());\n        xssfWb1.close();\n\n        SXSSFWorkbook wb2 = new SXSSFWorkbook(xssfWb2);\n        \r\n        Sheet sheet1 = wb2.getSheetAt(0);\n        Row row1_1 = sheet1.createRow(1);\n        Cell cell1_1_1 = row1_1.createCell(1);\n        cell1_1_1.setCellValue(\"value 1_1_1\");\n\n        \r\n        Sheet sheet2 = wb2.getSheetAt(1);\n        Row row2_2 = sheet2.createRow(2);\n        Cell cell2_2_1 = row2_2.createCell(1);\n        cell2_2_1.setCellValue(\"value 2_2_1\");\n\n        \r\n        Sheet sheet3 = wb2.createSheet(\"S3\");\n        Row row3_1 = sheet3.createRow(1);\n        Cell cell3_1_1 = row3_1.createCell(1);\n        cell3_1_1.setCellValue(\"value 3_1_1\");\n\n        XSSFWorkbook xssfWb3 = SXSSFITestDataProvider.instance.writeOutAndReadBack(wb2);\n        wb2.close();\n\n        assertEquals(3, xssfWb3.getNumberOfSheets());\n        \r\n        sheet1 = xssfWb3.getSheetAt(0);\n        assertEquals(\"S1\", sheet1.getSheetName());\n        assertEquals(1, sheet1.getPhysicalNumberOfRows());\n        row1_1 = sheet1.getRow(1);\n        assertNotNull(row1_1);\n        cell1_1_1 = row1_1.getCell(1);\n        assertNotNull(cell1_1_1);\n        assertEquals(\"value 1_1_1\", cell1_1_1.getStringCellValue());\n        \r\n        sheet2 = xssfWb3.getSheetAt(1);\n        assertEquals(\"S2\", sheet2.getSheetName());\n        assertEquals(2, sheet2.getPhysicalNumberOfRows());\n        Row row2_1 = sheet2.getRow(1);\n        assertNotNull(row2_1);\n        Cell cell2_1_1 = row2_1.getCell(1);\n        assertNotNull(cell2_1_1);\n        assertEquals(\"value 2_1_1\", cell2_1_1.getStringCellValue());\n        row2_2 = sheet2.getRow(2);\n        assertNotNull(row2_2);\n        cell2_2_1 = row2_2.getCell(1);\n        assertNotNull(cell2_2_1);\n        assertEquals(\"value 2_2_1\", cell2_2_1.getStringCellValue());\n        \r\n        sheet3 = xssfWb3.getSheetAt(2);\n        assertEquals(\"S3\", sheet3.getSheetName());\n        assertEquals(1, sheet3.getPhysicalNumberOfRows());\n        row3_1 = sheet3.getRow(1);\n        assertNotNull(row3_1);\n        cell3_1_1 = row3_1.getCell(1);\n        assertNotNull(cell3_1_1);\n        assertEquals(\"value 3_1_1\", cell3_1_1.getStringCellValue());\n\n        xssfWb2.close();\n        xssfWb3.close();\n        wb1.close();\n    }\n","realPath":"poi-ooxml/src/test/java/org/apache/poi/xssf/streaming/TestSXSSFWorkbook.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2021-08-29 07:48:48","commitOrder":2,"curCode":"    void addToExistingWorkbook() throws IOException {\n        try (XSSFWorkbook xssfWb1 = new XSSFWorkbook()) {\n            xssfWb1.createSheet(\"S1\");\n            Sheet sheet = xssfWb1.createSheet(\"S2\");\n            Row row = sheet.createRow(1);\n            Cell cell = row.createCell(1);\n            cell.setCellValue(\"value 2_1_1\");\n\n            try (DeferredSXSSFWorkbook wb1 = new DeferredSXSSFWorkbook(xssfWb1);\n                 XSSFWorkbook xssfWb2 = DeferredSXSSFITestDataProvider.instance.writeOutAndReadBack(wb1)) {\n                assertTrue(wb1.dispose());\n\n                try (DeferredSXSSFWorkbook wb2 = new DeferredSXSSFWorkbook(xssfWb2)) {\n                    \r\n                    DeferredSXSSFSheet ssheet1 = wb2.getStreamingSheetAt(0);\n                    ssheet1.setRowGenerator((ssxSheet) -> {\n                        Row row1_1 = ssxSheet.createRow(1);\n                        Cell cell1_1_1 = row1_1.createCell(1);\n                        cell1_1_1.setCellValue(\"value 1_1_1\");\n                    });\n\n                    \r\n                    DeferredSXSSFSheet ssheet2 = wb2.getStreamingSheetAt(1);\n                    ssheet2.setRowGenerator((ssxSheet) -> {\n                        Row row2_2 = ssxSheet.createRow(2);\n                        Cell cell2_2_1 = row2_2.createCell(1);\n                        cell2_2_1.setCellValue(\"value 2_2_1\");\n                    });\n                    \r\n                    DeferredSXSSFSheet ssheet3 = wb2.createSheet(\"S3\");\n                    ssheet3.setRowGenerator((ssxSheet) -> {\n                        Row row3_1 = ssxSheet.createRow(1);\n                        Cell cell3_1_1 = row3_1.createCell(1);\n                        cell3_1_1.setCellValue(\"value 3_1_1\");\n                    });\n\n                    try (XSSFWorkbook xssfWb3 = DeferredSXSSFITestDataProvider.instance.writeOutAndReadBack(wb2)) {\n\n                        assertEquals(3, xssfWb3.getNumberOfSheets());\n                        \r\n                        XSSFSheet sheet1 = xssfWb3.getSheetAt(0);\n                        assertEquals(\"S1\", sheet1.getSheetName());\n                        assertEquals(1, sheet1.getPhysicalNumberOfRows());\n                        XSSFRow row1_1 = sheet1.getRow(1);\n                        assertNotNull(row1_1);\n                        XSSFCell cell1_1_1 = row1_1.getCell(1);\n                        assertNotNull(cell1_1_1);\n                        assertEquals(\"value 1_1_1\", cell1_1_1.getStringCellValue());\n                        \r\n                        XSSFSheet sheet2 = xssfWb3.getSheetAt(1);\n                        assertEquals(\"S2\", sheet2.getSheetName());\n                        assertEquals(2, sheet2.getPhysicalNumberOfRows());\n                        Row row2_1 = sheet2.getRow(1);\n                        assertNotNull(row2_1);\n                        Cell cell2_1_1 = row2_1.getCell(1);\n                        assertNotNull(cell2_1_1);\n                        assertEquals(\"value 2_1_1\", cell2_1_1.getStringCellValue());\n                        XSSFRow row2_2 = sheet2.getRow(2);\n                        assertNotNull(row2_2);\n                        XSSFCell cell2_2_1 = row2_2.getCell(1);\n                        assertNotNull(cell2_2_1);\n                        assertEquals(\"value 2_2_1\", cell2_2_1.getStringCellValue());\n                        \r\n                        XSSFSheet sheet3 = xssfWb3.getSheetAt(2);\n                        assertEquals(\"S3\", sheet3.getSheetName());\n                        assertEquals(1, sheet3.getPhysicalNumberOfRows());\n                        XSSFRow row3_1 = sheet3.getRow(1);\n                        assertNotNull(row3_1);\n                        XSSFCell cell3_1_1 = row3_1.getCell(1);\n                        assertNotNull(cell3_1_1);\n                        assertEquals(\"value 3_1_1\", cell3_1_1.getStringCellValue());\n                    }\n                }\n            }\n        }\n    }\n","date":"2021-08-29 07:48:48","endLine":188,"groupId":"10855","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"addToExistingWorkbook","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/c0/7b59ca132a250ad2298b15a20fa07d8637ca5e.src","preCode":"    void addToExistingWorkbook() throws IOException {\n        XSSFWorkbook xssfWb1 = new XSSFWorkbook();\n        xssfWb1.createSheet(\"S1\");\n        Sheet sheet = xssfWb1.createSheet(\"S2\");\n        Row row = sheet.createRow(1);\n        Cell cell = row.createCell(1);\n        cell.setCellValue(\"value 2_1_1\");\n        DeferredSXSSFWorkbook wb1 = new DeferredSXSSFWorkbook(xssfWb1);\n        XSSFWorkbook xssfWb2 = DeferredSXSSFITestDataProvider.instance.writeOutAndReadBack(wb1);\n        assertTrue(wb1.dispose());\n        xssfWb1.close();\n\n        DeferredSXSSFWorkbook wb2 = new DeferredSXSSFWorkbook(xssfWb2);\n        \r\n        DeferredSXSSFSheet ssheet1 = wb2.getStreamingSheetAt(0);\n        ssheet1.setRowGenerator((ssxSheet) -> {\n            Row row1_1 = ssxSheet.createRow(1);\n            Cell cell1_1_1 = row1_1.createCell(1);\n            cell1_1_1.setCellValue(\"value 1_1_1\");\n        });\n\n        \r\n        DeferredSXSSFSheet ssheet2 = wb2.getStreamingSheetAt(1);\n        ssheet2.setRowGenerator((ssxSheet) -> {\n            Row row2_2 = ssxSheet.createRow(2);\n            Cell cell2_2_1 = row2_2.createCell(1);\n            cell2_2_1.setCellValue(\"value 2_2_1\");\n        });\n        \r\n        DeferredSXSSFSheet ssheet3 = wb2.createSheet(\"S3\");\n        ssheet3.setRowGenerator((ssxSheet) -> {\n            Row row3_1 = ssxSheet.createRow(1);\n            Cell cell3_1_1 = row3_1.createCell(1);\n            cell3_1_1.setCellValue(\"value 3_1_1\");\n        });\n\n        XSSFWorkbook xssfWb3 = DeferredSXSSFITestDataProvider.instance.writeOutAndReadBack(wb2);\n        wb2.close();\n\n        assertEquals(3, xssfWb3.getNumberOfSheets());\n        \r\n        XSSFSheet sheet1 = xssfWb3.getSheetAt(0);\n        assertEquals(\"S1\", sheet1.getSheetName());\n        assertEquals(1, sheet1.getPhysicalNumberOfRows());\n        XSSFRow row1_1 = sheet1.getRow(1);\n        assertNotNull(row1_1);\n        XSSFCell cell1_1_1 = row1_1.getCell(1);\n        assertNotNull(cell1_1_1);\n        assertEquals(\"value 1_1_1\", cell1_1_1.getStringCellValue());\n        \r\n        XSSFSheet sheet2 = xssfWb3.getSheetAt(1);\n        assertEquals(\"S2\", sheet2.getSheetName());\n        assertEquals(2, sheet2.getPhysicalNumberOfRows());\n        Row row2_1 = sheet2.getRow(1);\n        assertNotNull(row2_1);\n        Cell cell2_1_1 = row2_1.getCell(1);\n        assertNotNull(cell2_1_1);\n        assertEquals(\"value 2_1_1\", cell2_1_1.getStringCellValue());\n        XSSFRow row2_2 = sheet2.getRow(2);\n        assertNotNull(row2_2);\n        XSSFCell cell2_2_1 = row2_2.getCell(1);\n        assertNotNull(cell2_2_1);\n        assertEquals(\"value 2_2_1\", cell2_2_1.getStringCellValue());\n        \r\n        XSSFSheet sheet3 = xssfWb3.getSheetAt(2);\n        assertEquals(\"S3\", sheet3.getSheetName());\n        assertEquals(1, sheet3.getPhysicalNumberOfRows());\n        XSSFRow row3_1 = sheet3.getRow(1);\n        assertNotNull(row3_1);\n        XSSFCell cell3_1_1 = row3_1.getCell(1);\n        assertNotNull(cell3_1_1);\n        assertEquals(\"value 3_1_1\", cell3_1_1.getStringCellValue());\n\n        xssfWb2.close();\n        xssfWb3.close();\n        wb1.close();\n    }\n","realPath":"poi-ooxml/src/test/java/org/apache/poi/xssf/streaming/TestDeferredSXSSFWorkbook.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"}],"commitId":"f71cebcce5ed809ee15cd69524f8cb0b0b2ea47c","commitMessage":"@@@sonar fixes\nclose resources in tests\nfix gradle warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1892683 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2021-08-29 07:48:48","modifiedFileCount":"44","status":"M","submitter":"Andreas Beeker"}]
