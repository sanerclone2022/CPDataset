[{"authorTime":"2021-04-08 05:40:33","codes":[{"authorDate":"2021-04-08 05:40:33","commitOrder":1,"curCode":"    protected int processRow( HSSFWorkbook workbook,\n            CellRangeAddress[][] mergedRanges, HSSFRow row,\n            Element tableRowElement )\n    {\n        final HSSFSheet sheet = row.getSheet();\n        final short maxColIx = row.getLastCellNum();\n        if ( maxColIx <= 0 )\n        {\n            return 0;\n        }\n\n        final List<Element> emptyCells = new ArrayList<>(maxColIx);\n\n        if ( isOutputRowNumbers() )\n        {\n            Element tableRowNumberCellElement = processRowNumber( row );\n            emptyCells.add( tableRowNumberCellElement );\n        }\n\n        int maxRenderedColumn = 0;\n        for ( int colIx = 0; colIx < maxColIx; colIx++ )\n        {\n            if ( !isOutputHiddenColumns() && sheet.isColumnHidden( colIx ) )\n                continue;\n\n            CellRangeAddress range = AbstractExcelUtils.getMergedRange(\n                    mergedRanges, row.getRowNum(), colIx );\n\n            if ( range != null\n                    && ( range.getFirstColumn() != colIx || range.getFirstRow() != row\n                            .getRowNum() ) )\n                continue;\n\n            HSSFCell cell = row.getCell( colIx );\n\n            \r\n            int divWidthPx = 0;\n            {\n                divWidthPx = getColumnWidth( sheet, colIx );\n\n                boolean hasBreaks = false;\n                for ( int nextColumnIndex = colIx + 1; nextColumnIndex < maxColIx; nextColumnIndex++ )\n                {\n                    if ( !isOutputHiddenColumns()\n                            && sheet.isColumnHidden( nextColumnIndex ) )\n                        continue;\n\n                    if ( row.getCell( nextColumnIndex ) != null\n                            && !isTextEmpty( row.getCell( nextColumnIndex ) ) )\n                    {\n                        hasBreaks = true;\n                        break;\n                    }\n\n                    divWidthPx += getColumnWidth( sheet, nextColumnIndex );\n                }\n\n                if ( !hasBreaks )\n                    divWidthPx = Integer.MAX_VALUE;\n            }\n\n            Element tableCellElement = foDocumentFacade.createTableCell();\n\n            if ( range != null )\n            {\n                if ( range.getFirstColumn() != range.getLastColumn() )\n                    tableCellElement.setAttribute(\n                            \"number-columns-spanned\",\n                            String.valueOf( range.getLastColumn()\n                                    - range.getFirstColumn() + 1 ) );\n                if ( range.getFirstRow() != range.getLastRow() )\n                    tableCellElement.setAttribute(\n                            \"number-rows-spanned\",\n                            String.valueOf( range.getLastRow()\n                                    - range.getFirstRow() + 1 ) );\n            }\n\n            boolean emptyCell;\n            if ( cell != null )\n            {\n                emptyCell = processCell( workbook, cell, tableCellElement,\n                        getColumnWidth( sheet, colIx ), divWidthPx,\n                        row.getHeight() / 20f );\n            }\n            else\n            {\n                tableCellElement.appendChild( foDocumentFacade.createBlock() );\n                emptyCell = true;\n            }\n\n            if ( emptyCell )\n            {\n                emptyCells.add( tableCellElement );\n            }\n            else\n            {\n                for ( Element emptyCellElement : emptyCells )\n                {\n                    tableRowElement.appendChild( emptyCellElement );\n                }\n                emptyCells.clear();\n\n                tableRowElement.appendChild( tableCellElement );\n                maxRenderedColumn = colIx;\n            }\n        }\n\n        return maxRenderedColumn + 1;\n    }\n","date":"2021-04-08 05:40:33","endLine":613,"groupId":"21033","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"processRow","params":"(HSSFWorkbookworkbook@CellRangeAddress[][]mergedRanges@HSSFRowrow@ElementtableRowElement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/50/cf5427b26911ea859372f4d51bb8a8596c87a5.src","preCode":"    protected int processRow( HSSFWorkbook workbook,\n            CellRangeAddress[][] mergedRanges, HSSFRow row,\n            Element tableRowElement )\n    {\n        final HSSFSheet sheet = row.getSheet();\n        final short maxColIx = row.getLastCellNum();\n        if ( maxColIx <= 0 )\n        {\n            return 0;\n        }\n\n        final List<Element> emptyCells = new ArrayList<>(maxColIx);\n\n        if ( isOutputRowNumbers() )\n        {\n            Element tableRowNumberCellElement = processRowNumber( row );\n            emptyCells.add( tableRowNumberCellElement );\n        }\n\n        int maxRenderedColumn = 0;\n        for ( int colIx = 0; colIx < maxColIx; colIx++ )\n        {\n            if ( !isOutputHiddenColumns() && sheet.isColumnHidden( colIx ) )\n                continue;\n\n            CellRangeAddress range = AbstractExcelUtils.getMergedRange(\n                    mergedRanges, row.getRowNum(), colIx );\n\n            if ( range != null\n                    && ( range.getFirstColumn() != colIx || range.getFirstRow() != row\n                            .getRowNum() ) )\n                continue;\n\n            HSSFCell cell = row.getCell( colIx );\n\n            \r\n            int divWidthPx = 0;\n            {\n                divWidthPx = getColumnWidth( sheet, colIx );\n\n                boolean hasBreaks = false;\n                for ( int nextColumnIndex = colIx + 1; nextColumnIndex < maxColIx; nextColumnIndex++ )\n                {\n                    if ( !isOutputHiddenColumns()\n                            && sheet.isColumnHidden( nextColumnIndex ) )\n                        continue;\n\n                    if ( row.getCell( nextColumnIndex ) != null\n                            && !isTextEmpty( row.getCell( nextColumnIndex ) ) )\n                    {\n                        hasBreaks = true;\n                        break;\n                    }\n\n                    divWidthPx += getColumnWidth( sheet, nextColumnIndex );\n                }\n\n                if ( !hasBreaks )\n                    divWidthPx = Integer.MAX_VALUE;\n            }\n\n            Element tableCellElement = foDocumentFacade.createTableCell();\n\n            if ( range != null )\n            {\n                if ( range.getFirstColumn() != range.getLastColumn() )\n                    tableCellElement.setAttribute(\n                            \"number-columns-spanned\",\n                            String.valueOf( range.getLastColumn()\n                                    - range.getFirstColumn() + 1 ) );\n                if ( range.getFirstRow() != range.getLastRow() )\n                    tableCellElement.setAttribute(\n                            \"number-rows-spanned\",\n                            String.valueOf( range.getLastRow()\n                                    - range.getFirstRow() + 1 ) );\n            }\n\n            boolean emptyCell;\n            if ( cell != null )\n            {\n                emptyCell = processCell( workbook, cell, tableCellElement,\n                        getColumnWidth( sheet, colIx ), divWidthPx,\n                        row.getHeight() / 20f );\n            }\n            else\n            {\n                tableCellElement.appendChild( foDocumentFacade.createBlock() );\n                emptyCell = true;\n            }\n\n            if ( emptyCell )\n            {\n                emptyCells.add( tableCellElement );\n            }\n            else\n            {\n                for ( Element emptyCellElement : emptyCells )\n                {\n                    tableRowElement.appendChild( emptyCellElement );\n                }\n                emptyCells.clear();\n\n                tableRowElement.appendChild( tableCellElement );\n                maxRenderedColumn = colIx;\n            }\n        }\n\n        return maxRenderedColumn + 1;\n    }\n","realPath":"poi-scratchpad/src/main/java/org/apache/poi/hssf/converter/ExcelToFoConverter.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":505,"status":"B"},{"authorDate":"2021-04-08 05:40:33","commitOrder":1,"curCode":"    protected int processRow( CellRangeAddress[][] mergedRanges, HSSFRow row,\n            Element tableRowElement ) {\n        final HSSFSheet sheet = row.getSheet();\n        final short maxColIx = row.getLastCellNum();\n        if ( maxColIx <= 0 )\n            return 0;\n\n        final List<Element> emptyCells = new ArrayList<>(maxColIx);\n\n        if ( isOutputRowNumbers() )\n        {\n            Element tableRowNumberCellElement = htmlDocumentFacade\n                    .createTableHeaderCell();\n            processRowNumber( row, tableRowNumberCellElement );\n            emptyCells.add( tableRowNumberCellElement );\n        }\n\n        int maxRenderedColumn = 0;\n        for ( int colIx = 0; colIx < maxColIx; colIx++ )\n        {\n            if ( !isOutputHiddenColumns() && sheet.isColumnHidden( colIx ) )\n                continue;\n\n            CellRangeAddress range = AbstractExcelUtils.getMergedRange(\n                    mergedRanges, row.getRowNum(), colIx );\n\n            if ( range != null\n                    && ( range.getFirstColumn() != colIx || range.getFirstRow() != row\n                            .getRowNum() ) )\n                continue;\n\n            HSSFCell cell = row.getCell( colIx );\n\n            int divWidthPx = 0;\n            if ( isUseDivsToSpan() )\n            {\n                divWidthPx = getColumnWidth( sheet, colIx );\n\n                boolean hasBreaks = false;\n                for ( int nextColumnIndex = colIx + 1; nextColumnIndex < maxColIx; nextColumnIndex++ )\n                {\n                    if ( !isOutputHiddenColumns()\n                            && sheet.isColumnHidden( nextColumnIndex ) )\n                        continue;\n\n                    if ( row.getCell( nextColumnIndex ) != null\n                            && !isTextEmpty( row.getCell( nextColumnIndex ) ) )\n                    {\n                        hasBreaks = true;\n                        break;\n                    }\n\n                    divWidthPx += getColumnWidth( sheet, nextColumnIndex );\n                }\n\n                if ( !hasBreaks )\n                    divWidthPx = Integer.MAX_VALUE;\n            }\n\n            Element tableCellElement = htmlDocumentFacade.createTableCell();\n\n            if ( range != null )\n            {\n                if ( range.getFirstColumn() != range.getLastColumn() )\n                    tableCellElement.setAttribute(\n                            \"colspan\",\n                            String.valueOf( range.getLastColumn()\n                                    - range.getFirstColumn() + 1 ) );\n                if ( range.getFirstRow() != range.getLastRow() )\n                    tableCellElement.setAttribute(\n                            \"rowspan\",\n                            String.valueOf( range.getLastRow()\n                                    - range.getFirstRow() + 1 ) );\n            }\n\n            boolean emptyCell;\n            if ( cell != null )\n            {\n                emptyCell = processCell( cell, tableCellElement,\n                        getColumnWidth( sheet, colIx ), divWidthPx,\n                        row.getHeight() / 20f );\n            } else {\n                emptyCell = true;\n            }\n\n            if ( emptyCell ) {\n                emptyCells.add( tableCellElement );\n            } else {\n                for ( Element emptyCellElement : emptyCells )\n                {\n                    tableRowElement.appendChild( emptyCellElement );\n                }\n                emptyCells.clear();\n\n                tableRowElement.appendChild( tableCellElement );\n                maxRenderedColumn = colIx;\n            }\n        }\n\n        return maxRenderedColumn + 1;\n    }\n","date":"2021-04-08 05:40:33","endLine":587,"groupId":"15969","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"processRow","params":"(CellRangeAddress[][]mergedRanges@HSSFRowrow@ElementtableRowElement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/01/10c71ec908209cd703d1067ce0d1c391ee6b80.src","preCode":"    protected int processRow( CellRangeAddress[][] mergedRanges, HSSFRow row,\n            Element tableRowElement ) {\n        final HSSFSheet sheet = row.getSheet();\n        final short maxColIx = row.getLastCellNum();\n        if ( maxColIx <= 0 )\n            return 0;\n\n        final List<Element> emptyCells = new ArrayList<>(maxColIx);\n\n        if ( isOutputRowNumbers() )\n        {\n            Element tableRowNumberCellElement = htmlDocumentFacade\n                    .createTableHeaderCell();\n            processRowNumber( row, tableRowNumberCellElement );\n            emptyCells.add( tableRowNumberCellElement );\n        }\n\n        int maxRenderedColumn = 0;\n        for ( int colIx = 0; colIx < maxColIx; colIx++ )\n        {\n            if ( !isOutputHiddenColumns() && sheet.isColumnHidden( colIx ) )\n                continue;\n\n            CellRangeAddress range = AbstractExcelUtils.getMergedRange(\n                    mergedRanges, row.getRowNum(), colIx );\n\n            if ( range != null\n                    && ( range.getFirstColumn() != colIx || range.getFirstRow() != row\n                            .getRowNum() ) )\n                continue;\n\n            HSSFCell cell = row.getCell( colIx );\n\n            int divWidthPx = 0;\n            if ( isUseDivsToSpan() )\n            {\n                divWidthPx = getColumnWidth( sheet, colIx );\n\n                boolean hasBreaks = false;\n                for ( int nextColumnIndex = colIx + 1; nextColumnIndex < maxColIx; nextColumnIndex++ )\n                {\n                    if ( !isOutputHiddenColumns()\n                            && sheet.isColumnHidden( nextColumnIndex ) )\n                        continue;\n\n                    if ( row.getCell( nextColumnIndex ) != null\n                            && !isTextEmpty( row.getCell( nextColumnIndex ) ) )\n                    {\n                        hasBreaks = true;\n                        break;\n                    }\n\n                    divWidthPx += getColumnWidth( sheet, nextColumnIndex );\n                }\n\n                if ( !hasBreaks )\n                    divWidthPx = Integer.MAX_VALUE;\n            }\n\n            Element tableCellElement = htmlDocumentFacade.createTableCell();\n\n            if ( range != null )\n            {\n                if ( range.getFirstColumn() != range.getLastColumn() )\n                    tableCellElement.setAttribute(\n                            \"colspan\",\n                            String.valueOf( range.getLastColumn()\n                                    - range.getFirstColumn() + 1 ) );\n                if ( range.getFirstRow() != range.getLastRow() )\n                    tableCellElement.setAttribute(\n                            \"rowspan\",\n                            String.valueOf( range.getLastRow()\n                                    - range.getFirstRow() + 1 ) );\n            }\n\n            boolean emptyCell;\n            if ( cell != null )\n            {\n                emptyCell = processCell( cell, tableCellElement,\n                        getColumnWidth( sheet, colIx ), divWidthPx,\n                        row.getHeight() / 20f );\n            } else {\n                emptyCell = true;\n            }\n\n            if ( emptyCell ) {\n                emptyCells.add( tableCellElement );\n            } else {\n                for ( Element emptyCellElement : emptyCells )\n                {\n                    tableRowElement.appendChild( emptyCellElement );\n                }\n                emptyCells.clear();\n\n                tableRowElement.appendChild( tableCellElement );\n                maxRenderedColumn = colIx;\n            }\n        }\n\n        return maxRenderedColumn + 1;\n    }\n","realPath":"poi-scratchpad/src/main/java/org/apache/poi/hssf/converter/ExcelToHtmlConverter.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"B"}],"commitId":"b6aee1ef6d3e92a28ffd4b5c03e677b63b43747f","commitMessage":"@@@65206 - Migrate ant / maven to gradle build\ncompile / jar / test of mrJars\ndon't include ants build.xml anymore\nrename directories to match project and maven artifact names\nrefactor artifacts - so each project has one artifact\nreplace static references in hssf/dev tests with junit5 constructs.  which had problems in parallel tests\nincrease gradle heap to 4gb because of OOM - maybe less would also work\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1888488 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2021-04-08 05:40:33","modifiedFileCount":"0","status":"B","submitter":"Andreas Beeker"},{"authorTime":"2021-04-14 05:37:33","codes":[{"authorDate":"2021-04-14 05:37:33","commitOrder":2,"curCode":"    protected int processRow(HSSFWorkbook workbook,\n        CellRangeAddress[][] mergedRanges, HSSFRow row,\n        Element tableRowElement) {\n        final HSSFSheet sheet = row.getSheet();\n        final short maxColIx = row.getLastCellNum();\n        if (maxColIx <= 0) {\n            return 0;\n        }\n\n        final List<Element> emptyCells = new ArrayList<>(maxColIx);\n\n        if (isOutputRowNumbers()) {\n            Element tableRowNumberCellElement = processRowNumber(row);\n            emptyCells.add(tableRowNumberCellElement);\n        }\n\n        int maxRenderedColumn = 0;\n        for (int colIx = 0; colIx < maxColIx; colIx++) {\n            if (!isOutputHiddenColumns() && sheet.isColumnHidden(colIx)) {\n                continue;\n            }\n\n            CellRangeAddress range = getMergedRange(mergedRanges, row.getRowNum(), colIx);\n\n            if (range != null\n                && (range.getFirstColumn() != colIx || range.getFirstRow() != row\n                .getRowNum())) {\n                continue;\n            }\n\n            HSSFCell cell = row.getCell(colIx);\n\n            \r\n            int divWidthPx = 0;\n            {\n                divWidthPx = getColumnWidth(sheet, colIx);\n\n                boolean hasBreaks = false;\n                for (int nextColumnIndex = colIx + 1; nextColumnIndex < maxColIx; nextColumnIndex++) {\n                    if (!isOutputHiddenColumns()\n                        && sheet.isColumnHidden(nextColumnIndex)) {\n                        continue;\n                    }\n\n                    if (row.getCell(nextColumnIndex) != null\n                        && !isTextEmpty(row.getCell(nextColumnIndex))) {\n                        hasBreaks = true;\n                        break;\n                    }\n\n                    divWidthPx += getColumnWidth(sheet, nextColumnIndex);\n                }\n\n                if (!hasBreaks) {\n                    divWidthPx = Integer.MAX_VALUE;\n                }\n            }\n\n            Element tableCellElement = foDocumentFacade.createTableCell();\n\n            if (range != null) {\n                if (range.getFirstColumn() != range.getLastColumn()) {\n                    tableCellElement.setAttribute(\n                        \"number-columns-spanned\",\n                        String.valueOf(range.getLastColumn()\n                            - range.getFirstColumn() + 1));\n                }\n                if (range.getFirstRow() != range.getLastRow()) {\n                    tableCellElement.setAttribute(\n                        \"number-rows-spanned\",\n                        String.valueOf(range.getLastRow()\n                            - range.getFirstRow() + 1));\n                }\n            }\n\n            boolean emptyCell;\n            if (cell != null) {\n                emptyCell = processCell(workbook, cell, tableCellElement,\n                    getColumnWidth(sheet, colIx), divWidthPx,\n                    row.getHeight() / 20f);\n            } else {\n                tableCellElement.appendChild(foDocumentFacade.createBlock());\n                emptyCell = true;\n            }\n\n            if (emptyCell) {\n                emptyCells.add(tableCellElement);\n            } else {\n                for (Element emptyCellElement : emptyCells) {\n                    tableRowElement.appendChild(emptyCellElement);\n                }\n                emptyCells.clear();\n\n                tableRowElement.appendChild(tableCellElement);\n                maxRenderedColumn = colIx;\n            }\n        }\n\n        return maxRenderedColumn + 1;\n    }\n","date":"2021-04-14 05:37:33","endLine":584,"groupId":"10569","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"processRow","params":"(HSSFWorkbookworkbook@CellRangeAddress[][]mergedRanges@HSSFRowrow@ElementtableRowElement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/d6/938867e1a27ad25e99ca2dfae2be2af62448a3.src","preCode":"    protected int processRow( HSSFWorkbook workbook,\n            CellRangeAddress[][] mergedRanges, HSSFRow row,\n            Element tableRowElement )\n    {\n        final HSSFSheet sheet = row.getSheet();\n        final short maxColIx = row.getLastCellNum();\n        if ( maxColIx <= 0 )\n        {\n            return 0;\n        }\n\n        final List<Element> emptyCells = new ArrayList<>(maxColIx);\n\n        if ( isOutputRowNumbers() )\n        {\n            Element tableRowNumberCellElement = processRowNumber( row );\n            emptyCells.add( tableRowNumberCellElement );\n        }\n\n        int maxRenderedColumn = 0;\n        for ( int colIx = 0; colIx < maxColIx; colIx++ )\n        {\n            if ( !isOutputHiddenColumns() && sheet.isColumnHidden( colIx ) )\n                continue;\n\n            CellRangeAddress range = AbstractExcelUtils.getMergedRange(\n                    mergedRanges, row.getRowNum(), colIx );\n\n            if ( range != null\n                    && ( range.getFirstColumn() != colIx || range.getFirstRow() != row\n                            .getRowNum() ) )\n                continue;\n\n            HSSFCell cell = row.getCell( colIx );\n\n            \r\n            int divWidthPx = 0;\n            {\n                divWidthPx = getColumnWidth( sheet, colIx );\n\n                boolean hasBreaks = false;\n                for ( int nextColumnIndex = colIx + 1; nextColumnIndex < maxColIx; nextColumnIndex++ )\n                {\n                    if ( !isOutputHiddenColumns()\n                            && sheet.isColumnHidden( nextColumnIndex ) )\n                        continue;\n\n                    if ( row.getCell( nextColumnIndex ) != null\n                            && !isTextEmpty( row.getCell( nextColumnIndex ) ) )\n                    {\n                        hasBreaks = true;\n                        break;\n                    }\n\n                    divWidthPx += getColumnWidth( sheet, nextColumnIndex );\n                }\n\n                if ( !hasBreaks )\n                    divWidthPx = Integer.MAX_VALUE;\n            }\n\n            Element tableCellElement = foDocumentFacade.createTableCell();\n\n            if ( range != null )\n            {\n                if ( range.getFirstColumn() != range.getLastColumn() )\n                    tableCellElement.setAttribute(\n                            \"number-columns-spanned\",\n                            String.valueOf( range.getLastColumn()\n                                    - range.getFirstColumn() + 1 ) );\n                if ( range.getFirstRow() != range.getLastRow() )\n                    tableCellElement.setAttribute(\n                            \"number-rows-spanned\",\n                            String.valueOf( range.getLastRow()\n                                    - range.getFirstRow() + 1 ) );\n            }\n\n            boolean emptyCell;\n            if ( cell != null )\n            {\n                emptyCell = processCell( workbook, cell, tableCellElement,\n                        getColumnWidth( sheet, colIx ), divWidthPx,\n                        row.getHeight() / 20f );\n            }\n            else\n            {\n                tableCellElement.appendChild( foDocumentFacade.createBlock() );\n                emptyCell = true;\n            }\n\n            if ( emptyCell )\n            {\n                emptyCells.add( tableCellElement );\n            }\n            else\n            {\n                for ( Element emptyCellElement : emptyCells )\n                {\n                    tableRowElement.appendChild( emptyCellElement );\n                }\n                emptyCells.clear();\n\n                tableRowElement.appendChild( tableCellElement );\n                maxRenderedColumn = colIx;\n            }\n        }\n\n        return maxRenderedColumn + 1;\n    }\n","realPath":"poi-scratchpad/src/main/java/org/apache/poi/hssf/converter/ExcelToFoConverter.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":485,"status":"M"},{"authorDate":"2021-04-14 05:37:33","commitOrder":2,"curCode":"    protected int processRow(CellRangeAddress[][] mergedRanges, HSSFRow row,\n        Element tableRowElement) {\n        final HSSFSheet sheet = row.getSheet();\n        final short maxColIx = row.getLastCellNum();\n        if (maxColIx <= 0) {\n            return 0;\n        }\n\n        final List<Element> emptyCells = new ArrayList<>(maxColIx);\n\n        if (isOutputRowNumbers()) {\n            Element tableRowNumberCellElement = htmlDocumentFacade\n                .createTableHeaderCell();\n            processRowNumber(row, tableRowNumberCellElement);\n            emptyCells.add(tableRowNumberCellElement);\n        }\n\n        int maxRenderedColumn = 0;\n        for (int colIx = 0; colIx < maxColIx; colIx++) {\n            if (!isOutputHiddenColumns() && sheet.isColumnHidden(colIx)) {\n                continue;\n            }\n\n            CellRangeAddress range = getMergedRange(mergedRanges, row.getRowNum(), colIx);\n\n            if (range != null\n                && (range.getFirstColumn() != colIx || range.getFirstRow() != row\n                .getRowNum())) {\n                continue;\n            }\n\n            HSSFCell cell = row.getCell(colIx);\n\n            int divWidthPx = 0;\n            if (isUseDivsToSpan()) {\n                divWidthPx = getColumnWidth(sheet, colIx);\n\n                boolean hasBreaks = false;\n                for (int nextColumnIndex = colIx + 1; nextColumnIndex < maxColIx; nextColumnIndex++) {\n                    if (!isOutputHiddenColumns()\n                        && sheet.isColumnHidden(nextColumnIndex)) {\n                        continue;\n                    }\n\n                    if (row.getCell(nextColumnIndex) != null\n                        && !isTextEmpty(row.getCell(nextColumnIndex))) {\n                        hasBreaks = true;\n                        break;\n                    }\n\n                    divWidthPx += getColumnWidth(sheet, nextColumnIndex);\n                }\n\n                if (!hasBreaks) {\n                    divWidthPx = Integer.MAX_VALUE;\n                }\n            }\n\n            Element tableCellElement = htmlDocumentFacade.createTableCell();\n\n            if (range != null) {\n                if (range.getFirstColumn() != range.getLastColumn()) {\n                    tableCellElement.setAttribute(\n                        \"colspan\",\n                        String.valueOf(range.getLastColumn()\n                            - range.getFirstColumn() + 1));\n                }\n                if (range.getFirstRow() != range.getLastRow()) {\n                    tableCellElement.setAttribute(\n                        \"rowspan\",\n                        String.valueOf(range.getLastRow()\n                            - range.getFirstRow() + 1));\n                }\n            }\n\n            boolean emptyCell;\n            if (cell != null) {\n                emptyCell = processCell(cell, tableCellElement,\n                    getColumnWidth(sheet, colIx), divWidthPx,\n                    row.getHeight() / 20f);\n            } else {\n                emptyCell = true;\n            }\n\n            if (emptyCell) {\n                emptyCells.add(tableCellElement);\n            } else {\n                for (Element emptyCellElement : emptyCells) {\n                    tableRowElement.appendChild(emptyCellElement);\n                }\n                emptyCells.clear();\n\n                tableRowElement.appendChild(tableCellElement);\n                maxRenderedColumn = colIx;\n            }\n        }\n\n        return maxRenderedColumn + 1;\n    }\n","date":"2021-04-14 05:37:33","endLine":591,"groupId":"10569","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"processRow","params":"(CellRangeAddress[][]mergedRanges@HSSFRowrow@ElementtableRowElement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/aa/b72a0e69af0415c2eaa0e13757c44e7816d3d3.src","preCode":"    protected int processRow( CellRangeAddress[][] mergedRanges, HSSFRow row,\n            Element tableRowElement ) {\n        final HSSFSheet sheet = row.getSheet();\n        final short maxColIx = row.getLastCellNum();\n        if ( maxColIx <= 0 )\n            return 0;\n\n        final List<Element> emptyCells = new ArrayList<>(maxColIx);\n\n        if ( isOutputRowNumbers() )\n        {\n            Element tableRowNumberCellElement = htmlDocumentFacade\n                    .createTableHeaderCell();\n            processRowNumber( row, tableRowNumberCellElement );\n            emptyCells.add( tableRowNumberCellElement );\n        }\n\n        int maxRenderedColumn = 0;\n        for ( int colIx = 0; colIx < maxColIx; colIx++ )\n        {\n            if ( !isOutputHiddenColumns() && sheet.isColumnHidden( colIx ) )\n                continue;\n\n            CellRangeAddress range = AbstractExcelUtils.getMergedRange(\n                    mergedRanges, row.getRowNum(), colIx );\n\n            if ( range != null\n                    && ( range.getFirstColumn() != colIx || range.getFirstRow() != row\n                            .getRowNum() ) )\n                continue;\n\n            HSSFCell cell = row.getCell( colIx );\n\n            int divWidthPx = 0;\n            if ( isUseDivsToSpan() )\n            {\n                divWidthPx = getColumnWidth( sheet, colIx );\n\n                boolean hasBreaks = false;\n                for ( int nextColumnIndex = colIx + 1; nextColumnIndex < maxColIx; nextColumnIndex++ )\n                {\n                    if ( !isOutputHiddenColumns()\n                            && sheet.isColumnHidden( nextColumnIndex ) )\n                        continue;\n\n                    if ( row.getCell( nextColumnIndex ) != null\n                            && !isTextEmpty( row.getCell( nextColumnIndex ) ) )\n                    {\n                        hasBreaks = true;\n                        break;\n                    }\n\n                    divWidthPx += getColumnWidth( sheet, nextColumnIndex );\n                }\n\n                if ( !hasBreaks )\n                    divWidthPx = Integer.MAX_VALUE;\n            }\n\n            Element tableCellElement = htmlDocumentFacade.createTableCell();\n\n            if ( range != null )\n            {\n                if ( range.getFirstColumn() != range.getLastColumn() )\n                    tableCellElement.setAttribute(\n                            \"colspan\",\n                            String.valueOf( range.getLastColumn()\n                                    - range.getFirstColumn() + 1 ) );\n                if ( range.getFirstRow() != range.getLastRow() )\n                    tableCellElement.setAttribute(\n                            \"rowspan\",\n                            String.valueOf( range.getLastRow()\n                                    - range.getFirstRow() + 1 ) );\n            }\n\n            boolean emptyCell;\n            if ( cell != null )\n            {\n                emptyCell = processCell( cell, tableCellElement,\n                        getColumnWidth( sheet, colIx ), divWidthPx,\n                        row.getHeight() / 20f );\n            } else {\n                emptyCell = true;\n            }\n\n            if ( emptyCell ) {\n                emptyCells.add( tableCellElement );\n            } else {\n                for ( Element emptyCellElement : emptyCells )\n                {\n                    tableRowElement.appendChild( emptyCellElement );\n                }\n                emptyCells.clear();\n\n                tableRowElement.appendChild( tableCellElement );\n                maxRenderedColumn = colIx;\n            }\n        }\n\n        return maxRenderedColumn + 1;\n    }\n","realPath":"poi-scratchpad/src/main/java/org/apache/poi/hssf/converter/ExcelToHtmlConverter.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"M"}],"commitId":"088d1dd19728d4a49f84d718e8399974b021f0b3","commitMessage":"@@@:poi-scratchpad - fix javadocs - link to dependent/external project javadocs\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1888746 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2021-04-14 05:37:33","modifiedFileCount":"18","status":"M","submitter":"Andreas Beeker"}]
