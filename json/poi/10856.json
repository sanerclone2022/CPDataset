[{"authorTime":"2021-04-08 05:40:33","codes":[{"authorDate":"2021-04-08 05:40:33","commitOrder":1,"curCode":"    void gzipSheetdataWriter() throws IOException {\n        SXSSFWorkbook wb = new SXSSFWorkbook();\n        wb.setCompressTempFiles(true);\n\n        final int rowNum = 1000;\n        final int sheetNum = 5;\n        populateData(wb, 1000, 5);\n\n        XSSFWorkbook xwb = SXSSFITestDataProvider.instance.writeOutAndReadBack(wb);\n        for(int i = 0; i < sheetNum; i++){\n            Sheet sh = xwb.getSheetAt(i);\n            assertEquals(\"sheet\" + i, sh.getSheetName());\n            for(int j = 0; j < rowNum; j++){\n                Row row = sh.getRow(j);\n                assertNotNull(row, \"row[\" + j + \"]\");\n                Cell cell1 = row.getCell(0);\n                assertEquals(new CellReference(cell1).formatAsString(), cell1.getStringCellValue());\n\n                Cell cell2 = row.getCell(1);\n                assertEquals(i, (int)cell2.getNumericCellValue());\n\n                Cell cell3 = row.getCell(2);\n                assertEquals(j, (int)cell3.getNumericCellValue());\n            }\n        }\n\n        assertTrue(wb.dispose());\n        xwb.close();\n        wb.close();\n    }\n","date":"2021-04-08 05:40:33","endLine":298,"groupId":"1359","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"gzipSheetdataWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/e0/65b26adb12d67a01af04750ebf64145cc54c74.src","preCode":"    void gzipSheetdataWriter() throws IOException {\n        SXSSFWorkbook wb = new SXSSFWorkbook();\n        wb.setCompressTempFiles(true);\n\n        final int rowNum = 1000;\n        final int sheetNum = 5;\n        populateData(wb, 1000, 5);\n\n        XSSFWorkbook xwb = SXSSFITestDataProvider.instance.writeOutAndReadBack(wb);\n        for(int i = 0; i < sheetNum; i++){\n            Sheet sh = xwb.getSheetAt(i);\n            assertEquals(\"sheet\" + i, sh.getSheetName());\n            for(int j = 0; j < rowNum; j++){\n                Row row = sh.getRow(j);\n                assertNotNull(row, \"row[\" + j + \"]\");\n                Cell cell1 = row.getCell(0);\n                assertEquals(new CellReference(cell1).formatAsString(), cell1.getStringCellValue());\n\n                Cell cell2 = row.getCell(1);\n                assertEquals(i, (int)cell2.getNumericCellValue());\n\n                Cell cell3 = row.getCell(2);\n                assertEquals(j, (int)cell3.getNumericCellValue());\n            }\n        }\n\n        assertTrue(wb.dispose());\n        xwb.close();\n        wb.close();\n    }\n","realPath":"poi-ooxml/src/test/java/org/apache/poi/xssf/streaming/TestSXSSFWorkbook.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"B"},{"authorDate":"2021-04-08 05:40:33","commitOrder":1,"curCode":"    void gzipSheetdataWriter() throws IOException {\n        DeferredSXSSFWorkbook wb = new DeferredSXSSFWorkbook();\n\n        final int rowNum = 1000;\n        final int sheetNum = 5;\n        populateData(wb, 1000, 5);\n\n        XSSFWorkbook xwb = DeferredSXSSFITestDataProvider.instance.writeOutAndReadBack(wb);\n        for (int i = 0; i < sheetNum; i++) {\n            Sheet sh = xwb.getSheetAt(i);\n            assertEquals(\"sheet\" + i, sh.getSheetName());\n            for (int j = 0; j < rowNum; j++) {\n                Row row = sh.getRow(j);\n                assertNotNull(row, \"row[\" + j + \"]\");\n                Cell cell1 = row.getCell(0);\n                assertEquals(new CellReference(cell1).formatAsString(), cell1.getStringCellValue());\n\n                Cell cell2 = row.getCell(1);\n                assertEquals(i, (int) cell2.getNumericCellValue());\n\n                Cell cell3 = row.getCell(2);\n                assertEquals(j, (int) cell3.getNumericCellValue());\n            }\n        }\n\n        assertTrue(wb.dispose());\n        xwb.close();\n        wb.close();\n    }\n","date":"2021-04-08 05:40:33","endLine":255,"groupId":"1359","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"gzipSheetdataWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/74/df887a504b928ca4eeef46c2fe095701e4fd19.src","preCode":"    void gzipSheetdataWriter() throws IOException {\n        DeferredSXSSFWorkbook wb = new DeferredSXSSFWorkbook();\n\n        final int rowNum = 1000;\n        final int sheetNum = 5;\n        populateData(wb, 1000, 5);\n\n        XSSFWorkbook xwb = DeferredSXSSFITestDataProvider.instance.writeOutAndReadBack(wb);\n        for (int i = 0; i < sheetNum; i++) {\n            Sheet sh = xwb.getSheetAt(i);\n            assertEquals(\"sheet\" + i, sh.getSheetName());\n            for (int j = 0; j < rowNum; j++) {\n                Row row = sh.getRow(j);\n                assertNotNull(row, \"row[\" + j + \"]\");\n                Cell cell1 = row.getCell(0);\n                assertEquals(new CellReference(cell1).formatAsString(), cell1.getStringCellValue());\n\n                Cell cell2 = row.getCell(1);\n                assertEquals(i, (int) cell2.getNumericCellValue());\n\n                Cell cell3 = row.getCell(2);\n                assertEquals(j, (int) cell3.getNumericCellValue());\n            }\n        }\n\n        assertTrue(wb.dispose());\n        xwb.close();\n        wb.close();\n    }\n","realPath":"poi-ooxml/src/test/java/org/apache/poi/xssf/streaming/TestDeferredSXSSFWorkbook.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"B"}],"commitId":"b6aee1ef6d3e92a28ffd4b5c03e677b63b43747f","commitMessage":"@@@65206 - Migrate ant / maven to gradle build\ncompile / jar / test of mrJars\ndon't include ants build.xml anymore\nrename directories to match project and maven artifact names\nrefactor artifacts - so each project has one artifact\nreplace static references in hssf/dev tests with junit5 constructs.  which had problems in parallel tests\nincrease gradle heap to 4gb because of OOM - maybe less would also work\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1888488 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2021-04-08 05:40:33","modifiedFileCount":"0","status":"B","submitter":"Andreas Beeker"},{"authorTime":"2021-08-29 07:48:48","codes":[{"authorDate":"2021-08-29 07:48:48","commitOrder":2,"curCode":"    void gzipSheetdataWriter() throws IOException {\n        try (SXSSFWorkbook wb = new SXSSFWorkbook()) {\n            wb.setCompressTempFiles(true);\n\n            final int rowNum = 1000;\n            final int sheetNum = 5;\n            populateData(wb);\n\n            try (XSSFWorkbook xwb = SXSSFITestDataProvider.instance.writeOutAndReadBack(wb)) {\n                for (int i = 0; i < sheetNum; i++) {\n                    Sheet sh = xwb.getSheetAt(i);\n                    assertEquals(\"sheet\" + i, sh.getSheetName());\n                    for (int j = 0; j < rowNum; j++) {\n                        Row row = sh.getRow(j);\n                        assertNotNull(row, \"row[\" + j + \"]\");\n                        Cell cell1 = row.getCell(0);\n                        assertEquals(new CellReference(cell1).formatAsString(), cell1.getStringCellValue());\n\n                        Cell cell2 = row.getCell(1);\n                        assertEquals(i, (int) cell2.getNumericCellValue());\n\n                        Cell cell3 = row.getCell(2);\n                        assertEquals(j, (int) cell3.getNumericCellValue());\n                    }\n                }\n\n                assertTrue(wb.dispose());\n            }\n        }\n    }\n","date":"2021-08-29 07:48:48","endLine":292,"groupId":"10856","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"gzipSheetdataWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/f4/eb9e0990560ce45f952583f1f3210942857737.src","preCode":"    void gzipSheetdataWriter() throws IOException {\n        SXSSFWorkbook wb = new SXSSFWorkbook();\n        wb.setCompressTempFiles(true);\n\n        final int rowNum = 1000;\n        final int sheetNum = 5;\n        populateData(wb, 1000, 5);\n\n        XSSFWorkbook xwb = SXSSFITestDataProvider.instance.writeOutAndReadBack(wb);\n        for(int i = 0; i < sheetNum; i++){\n            Sheet sh = xwb.getSheetAt(i);\n            assertEquals(\"sheet\" + i, sh.getSheetName());\n            for(int j = 0; j < rowNum; j++){\n                Row row = sh.getRow(j);\n                assertNotNull(row, \"row[\" + j + \"]\");\n                Cell cell1 = row.getCell(0);\n                assertEquals(new CellReference(cell1).formatAsString(), cell1.getStringCellValue());\n\n                Cell cell2 = row.getCell(1);\n                assertEquals(i, (int)cell2.getNumericCellValue());\n\n                Cell cell3 = row.getCell(2);\n                assertEquals(j, (int)cell3.getNumericCellValue());\n            }\n        }\n\n        assertTrue(wb.dispose());\n        xwb.close();\n        wb.close();\n    }\n","realPath":"poi-ooxml/src/test/java/org/apache/poi/xssf/streaming/TestSXSSFWorkbook.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"},{"authorDate":"2021-08-29 07:48:48","commitOrder":2,"curCode":"    void gzipSheetdataWriter() throws IOException {\n        try (DeferredSXSSFWorkbook wb = new DeferredSXSSFWorkbook()) {\n\n            final int rowNum = 1000;\n            final int sheetNum = 5;\n            populateData(wb);\n\n            try (XSSFWorkbook xwb = DeferredSXSSFITestDataProvider.instance.writeOutAndReadBack(wb)) {\n                for (int i = 0; i < sheetNum; i++) {\n                    Sheet sh = xwb.getSheetAt(i);\n                    assertEquals(\"sheet\" + i, sh.getSheetName());\n                    for (int j = 0; j < rowNum; j++) {\n                        Row row = sh.getRow(j);\n                        assertNotNull(row, \"row[\" + j + \"]\");\n                        Cell cell1 = row.getCell(0);\n                        assertEquals(new CellReference(cell1).formatAsString(), cell1.getStringCellValue());\n\n                        Cell cell2 = row.getCell(1);\n                        assertEquals(i, (int) cell2.getNumericCellValue());\n\n                        Cell cell3 = row.getCell(2);\n                        assertEquals(j, (int) cell3.getNumericCellValue());\n                    }\n                }\n\n                assertTrue(wb.dispose());\n            }\n        }\n    }\n","date":"2021-08-29 07:48:48","endLine":254,"groupId":"10856","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"gzipSheetdataWriter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-poi-10-0.7/blobInfo/CC_OUT/blobs/c0/7b59ca132a250ad2298b15a20fa07d8637ca5e.src","preCode":"    void gzipSheetdataWriter() throws IOException {\n        DeferredSXSSFWorkbook wb = new DeferredSXSSFWorkbook();\n\n        final int rowNum = 1000;\n        final int sheetNum = 5;\n        populateData(wb, 1000, 5);\n\n        XSSFWorkbook xwb = DeferredSXSSFITestDataProvider.instance.writeOutAndReadBack(wb);\n        for (int i = 0; i < sheetNum; i++) {\n            Sheet sh = xwb.getSheetAt(i);\n            assertEquals(\"sheet\" + i, sh.getSheetName());\n            for (int j = 0; j < rowNum; j++) {\n                Row row = sh.getRow(j);\n                assertNotNull(row, \"row[\" + j + \"]\");\n                Cell cell1 = row.getCell(0);\n                assertEquals(new CellReference(cell1).formatAsString(), cell1.getStringCellValue());\n\n                Cell cell2 = row.getCell(1);\n                assertEquals(i, (int) cell2.getNumericCellValue());\n\n                Cell cell3 = row.getCell(2);\n                assertEquals(j, (int) cell3.getNumericCellValue());\n            }\n        }\n\n        assertTrue(wb.dispose());\n        xwb.close();\n        wb.close();\n    }\n","realPath":"poi-ooxml/src/test/java/org/apache/poi/xssf/streaming/TestDeferredSXSSFWorkbook.java","repoName":"poi","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"}],"commitId":"f71cebcce5ed809ee15cd69524f8cb0b0b2ea47c","commitMessage":"@@@sonar fixes\nclose resources in tests\nfix gradle warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/poi/trunk@1892683 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2021-08-29 07:48:48","modifiedFileCount":"44","status":"M","submitter":"Andreas Beeker"}]
