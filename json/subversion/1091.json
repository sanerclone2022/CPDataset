[{"authorTime":"2008-01-23 00:12:21","codes":[{"authorDate":"2007-12-05 05:12:27","commitOrder":4,"curCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeInfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 5);\n    }\n","date":"2007-12-05 05:12:27","endLine":2303,"groupId":"499","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeUsingHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/a6/12562d786124f1072dc77c7601351790baffa1.src","preCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeInfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 5);\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2271,"status":"NB"},{"authorDate":"2008-01-23 00:12:21","commitOrder":4,"curCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeInfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     5);\n\n        \r\n        client.update(thisTest.getWCPath() + \"/branches\", Revision.HEAD, true);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", true, false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPath(), Revision.HEAD, true);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", true, false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 7);\n\n    }\n","date":"2008-01-23 00:12:21","endLine":2387,"groupId":"32","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeReintegrate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/1f/6a93c635af1cc05332bc0bf597f3400c857be5.src","preCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeInfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     5);\n\n        \r\n        client.update(thisTest.getWCPath() + \"/branches\", Revision.HEAD, true);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", true, false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPath(), Revision.HEAD, true);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", true, false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 7);\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2319,"status":"B"}],"commitId":"1ade0766691e35b06df11def8c42397d28118385","commitMessage":"@@@Followup to r28979: Add mergeReintegrate method to JavaHL.\n\n[ in subversion/bindings/javahl/ ]\n* native/SVNClient.h. \n  native/SVNClient.cpp\n  (mergeReintegrate):  Add method and call svn_client_merge_reintegrate.\n\n* native/org_tigris_subversion_javahl_SVNClient.cpp\n  (Java_org_tigris_subversion_javahl_SVNClient_mergeReintegrate):\n  Added mergeReintegrate method.\n\n* src/org/tigris/subversion/javahl/SVNClientInterface.java. \n  src/org/tigris/subversion/javahl/SVNClient.java. \n  src/org/tigris/subversion/javahl/SVNClientSynchronized.java\n  (mergeReintegrate): Added method.\n\n* tests/org/tigris/subversion/javahl/BasicTests.java\n  (testMergeReintegrate): Added test of failure and success scenarios\n  (appendText): tweaked to allow update of file in branch\n\nReviewed by: hwright\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@869061 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-01-23 00:12:21","modifiedFileCount":"4","status":"M","submitter":"Mark Phippard"},{"authorTime":"2008-02-13 23:02:21","codes":[{"authorDate":"2008-02-13 23:02:21","commitOrder":5,"curCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 5);\n    }\n","date":"2008-02-13 23:02:21","endLine":2311,"groupId":"499","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeUsingHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/a4/a8284a0d877b6ac1664e28c528541a5d13ed6f.src","preCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeInfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 5);\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2279,"status":"M"},{"authorDate":"2008-02-13 23:02:21","commitOrder":5,"curCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     5);\n\n        \r\n        client.update(thisTest.getWCPath() + \"/branches\", Revision.HEAD, true);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", true, false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPath(), Revision.HEAD, true);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", true, false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 7);\n\n    }\n","date":"2008-02-13 23:02:21","endLine":2387,"groupId":"32","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeReintegrate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/a4/a8284a0d877b6ac1664e28c528541a5d13ed6f.src","preCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeInfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     5);\n\n        \r\n        client.update(thisTest.getWCPath() + \"/branches\", Revision.HEAD, true);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", true, false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPath(), Revision.HEAD, true);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", true, false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 7);\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2319,"status":"M"}],"commitId":"ee39f1ce8e69cf418789e4797678eb89f82fdb33","commitMessage":"@@@More mergeinfo nounifying.\n\n[ in subversion/bindings/javahl ]\n* tests/org/tigris/subversion/javahl/BasicTests.java. \n  native/org_tigris_subversion_javahl_SVNClient.cpp. \n  native/SVNClient.h. \n  native/SVNClient.cpp. \n  src/org/tigris/subversion/javahl/SVNClientSynchronized.java. \n  src/org/tigris/subversion/javahl/SVNClient.java. \n  src/org/tigris/subversion/javahl/SVNClientInterface.java:\n  Change instances of mergeInfo to mergeinfo.  and MergeInfo to Mergeinfo.\n\n* src/org/tigris/subversion/javahl/MergeInfo.java:\n  Move from here...\n\n* src/org/tigris/subversion/javahl/Mergeinfo.java:\n  ...to here.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@869394 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-02-13 23:02:21","modifiedFileCount":"4","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2008-02-29 19:37:58","codes":[{"authorDate":"2008-02-13 23:02:21","commitOrder":6,"curCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 5);\n    }\n","date":"2008-02-13 23:02:21","endLine":2311,"groupId":"499","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeUsingHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/a4/a8284a0d877b6ac1664e28c528541a5d13ed6f.src","preCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 5);\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2279,"status":"N"},{"authorDate":"2008-02-29 19:37:58","commitOrder":6,"curCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     5);\n\n        \r\n        client.update(thisTest.getWCPath() + \"/branches\", Revision.HEAD, true);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPath(), Revision.HEAD, true);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 7);\n\n    }\n","date":"2008-02-29 19:37:58","endLine":2387,"groupId":"32","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeReintegrate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/fb/950cbb155fb59c7d6800b82749f6eb329ad8f4.src","preCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     5);\n\n        \r\n        client.update(thisTest.getWCPath() + \"/branches\", Revision.HEAD, true);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", true, false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPath(), Revision.HEAD, true);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", true, false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 7);\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2319,"status":"M"}],"commitId":"a750f20c3b2ff1a428e5e2c472b5a0fa393b246f","commitMessage":"@@@Tweak the \"merge_reintegrate\" API: remove the redundant \"force\" argument\nand mention the \"peg_revision\" argument in its doc-string.\n\n* subversion/include/svn_client.h\n  (svn_client_merge_reintegrate): Remove the \"force\" argument.\n    Mention the \"peg_revision\" argument.\n* subversion/libsvn_client/merge.c\n  (svn_client_merge_reintegrate): Remove the \"force\" argument.\n* subversion/svn/merge-cmd.c\n  (svn_cl__merge): Do not pass the \"force\" argument to \"reintegrate\";\n    instead.  error if the \"--force\" option was given.\n\n* subversion/bindings/javahl/native/SVNClient.cpp. \n  subversion/bindings/javahl/native/SVNClient.h. \n  subversion/bindings/javahl/native/org_tigris_subversion_javahl_SVNClient.cpp. \n  subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java. \n  subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClientInterface.java. \n  subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClientSynchronized.java. \n  subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java\n    Remove the \"force\" argument from the \"svn_client_merge_reintegrate\" and\n    corresponding \"mergeReintegrate\" functions.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@869708 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-02-29 19:37:58","modifiedFileCount":"4","status":"M","submitter":"Julian Foad"},{"authorTime":"2008-04-05 06:11:08","codes":[{"authorDate":"2008-04-05 06:11:08","commitOrder":7,"curCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(getMergeinfo(new File(thisTest.getWCPath(), \"A\"),\n                                Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 5);\n    }\n","date":"2008-04-05 06:11:08","endLine":2356,"groupId":"499","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeUsingHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/4d/a75333421ea3ce11cfefef503c9fd86da6ee0e.src","preCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 5);\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2324,"status":"M"},{"authorDate":"2008-04-05 06:11:08","commitOrder":7,"curCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(getMergeinfo(new File(thisTest.getWCPath(), \"A\"), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     5);\n\n        \r\n        client.update(thisTest.getWCPath() + \"/branches\", Revision.HEAD, true);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPath(), Revision.HEAD, true);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 7);\n\n    }\n","date":"2008-04-05 06:11:08","endLine":2431,"groupId":"32","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeReintegrate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/4d/a75333421ea3ce11cfefef503c9fd86da6ee0e.src","preCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     5);\n\n        \r\n        client.update(thisTest.getWCPath() + \"/branches\", Revision.HEAD, true);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPath(), Revision.HEAD, true);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 7);\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2364,"status":"M"}],"commitId":"c0fbc970c04b9b2161b19db378390078d552693e","commitMessage":"@@@JavaHL: Followup to r30279: Remove replaced APIs.  and update tests.\n\nNote: One test still fails with this commit.  I'm working on it.  but would like\nto get this committed before delving further.  Other's welcome to look at it\nalso.  of course.\n\nPatch by: markphip\n          me\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/tigris/subversion/javahl/BasicTests.java\n  (testMergeinfoParser): Remove.\n  (assertExpectedMergeRange.  acquireMergeinfoAndAssertEquals. \n   getMergeinfoRevisions.  getMergeinfo): New.\n  (testBasicMerge.  testMergeUsingHistory.  testMergeReintegrate. \n   testRecordOnlyMerge): Update tests.\n\n* native/org_tigris_subversion_javahl_SVNClient.cpp\n  (Java_org_tigris_subversion_javahl_SVNClient_getAvailableMerges. \n   Java_org_tigris_subversion_javahl_SVNClient_getMergeinfo):\n    Remove.\n\n* native/SVNClient.h. \n  native/SVNClient.cpp\n  (makeJRevisionRangeArray.  getAvailableMerges.  getMergeinfo): Remove.\n\n* src/org/tigris/subversion/javahl/Mergeinfo.java:\n  Remove.\n\n* src/org/tigris/subversion/javahl/SVNClientSynchronized.java. \n  src/org/tigris/subversion/javahl/SVNClient.java. \n  src/org/tigris/subversion/javahl/SVNClientInterface.java\n  (getMergeinfo.  getAvailableMerges): Remove.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@870373 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-04-05 06:11:08","modifiedFileCount":"4","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2008-04-08 00:53:35","codes":[{"authorDate":"2008-04-08 00:53:35","commitOrder":8,"curCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 5);\n    }\n","date":"2008-04-08 00:53:35","endLine":2390,"groupId":"1091","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeUsingHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/33/0f75357bd9e6bdb3c9694d4fa405dcab6f349c.src","preCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(getMergeinfo(new File(thisTest.getWCPath(), \"A\"),\n                                Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 5);\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2358,"status":"M"},{"authorDate":"2008-04-08 00:53:35","commitOrder":8,"curCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     5);\n\n        \r\n        client.update(thisTest.getWCPath() + \"/branches\", Revision.HEAD, true);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPath(), Revision.HEAD, true);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 7);\n\n    }\n","date":"2008-04-08 00:53:35","endLine":2466,"groupId":"1091","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeReintegrate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/33/0f75357bd9e6bdb3c9694d4fa405dcab6f349c.src","preCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(getMergeinfo(new File(thisTest.getWCPath(), \"A\"), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true),\n                     5);\n\n        \r\n        client.update(thisTest.getWCPath() + \"/branches\", Revision.HEAD, true);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPath(), Revision.HEAD, true);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", true), 7);\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2398,"status":"M"}],"commitId":"cefcd6834b96292e78a69e976c6f796afbd93134","commitMessage":"@@@JavaHL: Follow up to r30407: restore the JavaHL getMergeInfo() method\nand Mergeinfo class.  This is a partial reverse-merge of r30299\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/tigris/subversion/javahl/BasicTests.java\n  (testMergeinfoParser): Restore.\n  (getMergeinfo): Remove.\n  (acquireMergeinfoAndAssertEquals): Restore and update.\n  (testBasicMerge.  testMergeUsingHistory.  testMergeReintegrate. \n   testRecordOnlyMerge): Update tests.\n\n* native/org_tigris_subversion_javahl_SVNClient.cpp\n  (Java_org_tigris_subversion_javahl_SVNClient_getMergeinfo):\n    Restore.\n\n* native/SVNClient.h. \n  native/SVNClient.cpp\n  (makeJRevisionRangeArray.  getMergeinfo): Restore.\n\n* src/org/tigris/subversion/javahl/Mergeinfo.java:\n  Restore.\n\n* src/org/tigris/subversion/javahl/SVNClientSynchronized.java. \n  src/org/tigris/subversion/javahl/SVNClient.java. \n  src/org/tigris/subversion/javahl/SVNClientInterface.java\n  (getMergeinfo): Restore.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@870486 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2008-04-08 00:53:35","modifiedFileCount":"4","status":"M","submitter":"Mark Phippard"}]
