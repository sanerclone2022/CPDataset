[{"authorTime":"2010-01-30 10:06:08","codes":[{"authorDate":"2010-01-30 10:06:08","commitOrder":1,"curCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 5);\n    }\n","date":"2010-01-30 10:06:08","endLine":2545,"groupId":"253","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeUsingHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/7b/85b406f167dae59b5a39f282a07a7e60ca4c97.src","preCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 5);\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2511,"status":"B"},{"authorDate":"2010-01-30 10:06:08","commitOrder":1,"curCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     5);\n\n        \r\n        client.update(new String[] {thisTest.getWCPath() + \"/branches\"},\n                Revision.HEAD, Depth.unknown, false, false, false);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(new String[] {thisTest.getWCPath()}, Revision.HEAD,\n                    Depth.unknown, false, false, false);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 7);\n\n    }\n","date":"2010-01-30 10:06:08","endLine":2627,"groupId":"81","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeReintegrate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/7b/85b406f167dae59b5a39f282a07a7e60ca4c97.src","preCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     5);\n\n        \r\n        client.update(new String[] {thisTest.getWCPath() + \"/branches\"},\n                Revision.HEAD, Depth.unknown, false, false, false);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(new String[] {thisTest.getWCPath()}, Revision.HEAD,\n                    Depth.unknown, false, false, false);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 7);\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2553,"status":"B"}],"commitId":"6928e23ce539756dfb45f2763d31147ec1abb736","commitMessage":"@@@JavaHL: First attempt to port the JavaHL tests to the new org.apache.subversion\npackage.  The tests should now compile with 'make javahl-compat-tests'.  but\nit is doubtful they will run and/or pass.\n\n* Makefile.in:\n  Add check-javahl-compat target.\n\n* build.conf\n  (javahl-compat-tests): New.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/SVNAdminTests.java. \n  tests/org/apache/subversion/javahl/BasicTests.java. \n  tests/org/apache/subversion/javahl/RunTests.java. \n  tests/org/apache/subversion/javahl/SVNTests.java. \n  tests/org/apache/subversion/javahl/WC.java. \n  src/org/apache/subversion/javahl/NotifyAction.java. \n  src/org/apache/subversion/javahl/IInput.java. \n  src/org/apache/subversion/javahl/LogDate.java. \n  src/org/apache/subversion/javahl/BlameCallbackImpl.java. \n  src/org/apache/subversion/javahl/LogMessage.java. \n  src/org/apache/subversion/javahl/ScheduleKind.java. \n  src/org/apache/subversion/javahl/IOutput.java. \n  src/org/apache/subversion/javahl/SVNAdmin.java. \n  src/org/apache/subversion/javahl/MergeinfoLogKind.java. \n  src/org/apache/subversion/javahl/Path.java:\n  New.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@904709 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-01-30 10:06:08","modifiedFileCount":"0","status":"B","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-03-02 00:10:06","codes":[{"authorDate":"2010-03-02 00:10:06","commitOrder":2,"curCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 5);\n    }\n","date":"2010-03-02 00:10:06","endLine":2548,"groupId":"253","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeUsingHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/6e/3cfb2c6ed809fb26c8d2aa0ea0d3c84ae54c3c.src","preCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 5);\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2513,"status":"M"},{"authorDate":"2010-03-02 00:10:06","commitOrder":2,"curCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     5);\n\n        \r\n        client.update(new String[] {thisTest.getWCPath() + \"/branches\"},\n                Revision.HEAD, Depth.unknown, false, false, false);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(new String[] {thisTest.getWCPath()}, Revision.HEAD,\n                    Depth.unknown, false, false, false);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 7);\n\n    }\n","date":"2010-03-02 00:10:06","endLine":2631,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeReintegrate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/6e/3cfb2c6ed809fb26c8d2aa0ea0d3c84ae54c3c.src","preCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     5);\n\n        \r\n        client.update(new String[] {thisTest.getWCPath() + \"/branches\"},\n                Revision.HEAD, Depth.unknown, false, false, false);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        client.merge(modUrl, Revision.HEAD,\n                     new RevisionRange[] { new RevisionRange(unspec, unspec) },\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(new String[] {thisTest.getWCPath()}, Revision.HEAD,\n                    Depth.unknown, false, false, false);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 7);\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2556,"status":"M"}],"commitId":"6bcb900e3f576a7c7654dda9687a8ecb526f0ff3","commitMessage":"@@@JavaHL: Convert RevisionRange[] args to a couple of methods into\nList<RevisionRange> args.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/BasicTests.java\n  (testBasicLogMessage.  testMergeUsingHistory.  testMergeReintegrate. \n   testMergeConflictResolution.  testRecordOnlyMerge.  toRevisionRange. \n   collectLogMessages): Update tests to reflect the API change.\n\n* src/org/tigris/subversion/javahl/SVNClient.java\n  (logMessages.  merge): Update wrappers to the new API.\n\n* src/org/apache/subversion/javahl/SVNClient.java\n  (logMessages.  merge): Update APIs to take a List of RevisionRanges.  rather\n    than an array.  Update wrappers accordingly.\n\n* src/org/apache/subversion/javahl/ISVNClient.java\n  (logMessages.  merge): Update the API to use a List of RevisionRanges.  rather\n    than an array.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@917569 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-03-02 00:10:06","modifiedFileCount":"4","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-03-02 04:03:48","codes":[{"authorDate":"2010-03-02 04:03:48","commitOrder":3,"curCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 5);\n    }\n","date":"2010-03-02 04:03:48","endLine":2557,"groupId":"529","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeUsingHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/47/734788eb25270974daa3e1c0b7dc7efcd91bb2.src","preCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 5);\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2522,"status":"M"},{"authorDate":"2010-03-02 04:03:48","commitOrder":3,"curCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     5);\n\n        \r\n        client.update(thisTest.getWCPathSet(\"/branches\"), Revision.HEAD,\n                      Depth.unknown, false, false, false);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPathSet(), Revision.HEAD,\n                          Depth.unknown, false, false, false);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 7);\n\n    }\n","date":"2010-03-02 04:03:48","endLine":2640,"groupId":"364","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeReintegrate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/47/734788eb25270974daa3e1c0b7dc7efcd91bb2.src","preCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     5);\n\n        \r\n        client.update(new String[] {thisTest.getWCPath() + \"/branches\"},\n                Revision.HEAD, Depth.unknown, false, false, false);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(new String[] {thisTest.getWCPath()}, Revision.HEAD,\n                    Depth.unknown, false, false, false);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(new String[] { thisTest.getWCPath() },\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 7);\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2565,"status":"M"}],"commitId":"5d3891f1932b0b1a17e7a0c7a8aa103b2dcabb99","commitMessage":"@@@JavaHL: For APIs which accept multiple paths.  use a Set of paths.  rather than\nan array.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/BasicTests.java:\n  Update calls to the affected APIs to pass a Set.  rather than an array.\n\n* tests/org/apache/subversion/javahl/SVNTests.java\n  (getWCPathSet.  getWCPathSet.  getUrlSet): New helpers.\n\n* src/org/tigris/subversion/javahl/SVNClient.java\n  (remove.  update.  commit.  mkdir.  addToChangelist.  removeFromChangelist.  lock. \n   unlock): Update wrappers to use Sets.\n\n* src/org/apache/subversion/javahl/SVNClient.java\n  (remove.  update.  commit.  mkdir.  addToChangelist.  removeFromChangelist.  lock. \n   unlock): Update wrappers to use Sets.\n\n* src/org/apache/subversion/javahl/ISVNClient.java\n  (remove.  update.  commit.  mkdir.  addToChangelist.  removeFromChangelist.  lock. \n   unlock): Update the API to accept Sets for APIs which accept multiple\n    paths.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@917687 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-03-02 04:03:48","modifiedFileCount":"5","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-03-17 11:39:45","codes":[{"authorDate":"2010-03-17 11:39:45","commitOrder":4,"curCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(Revision.Kind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 5);\n    }\n","date":"2010-03-17 11:39:45","endLine":2560,"groupId":"529","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeUsingHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/c9/e7e49d42de89f093f466399867cb223b9732bc.src","preCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 5);\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2525,"status":"M"},{"authorDate":"2010-03-17 11:39:45","commitOrder":4,"curCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     5);\n\n        \r\n        client.update(thisTest.getWCPathSet(\"/branches\"), Revision.HEAD,\n                      Depth.unknown, false, false, false);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(Revision.Kind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPathSet(), Revision.HEAD,\n                          Depth.unknown, false, false, false);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 7);\n\n    }\n","date":"2010-03-17 11:39:45","endLine":2643,"groupId":"255","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeReintegrate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/c9/e7e49d42de89f093f466399867cb223b9732bc.src","preCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     5);\n\n        \r\n        client.update(thisTest.getWCPathSet(\"/branches\"), Revision.HEAD,\n                      Depth.unknown, false, false, false);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(RevisionKind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPathSet(), Revision.HEAD,\n                          Depth.unknown, false, false, false);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 7);\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2568,"status":"M"}],"commitId":"a2963839783a3cc2c20ea402c752b7bfe6c1c872","commitMessage":"@@@JavaHL more enum'ing.  this time with RevisionKind.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/BasicTests.java:\n  Update to use Revision.Kind rather than RevisionKind.\n\n* native/Revision.cpp\n  (Revision): Update for the Revision.Kind type.  instead of an int.  Use\n    the new EnumMapper to dissect the incoming object.\n\n* native/EnumMapper.h. \n  native/EnumMapper.cpp\n  (toRevisionKind): New.\n\n* src/org/apache/subversion/javahl/RevisionKind.java:\n  Remove.\n\n* src/org/apache/subversion/javahl/Revision.java:\n  Update all Kind references to use the new enum\n  (Revision.Kind): Implement as an enum.  rather than a class.\n\n* src/org/tigris/subversion/javahl/Revision.java\n  (toApache.  createFromApache): Update backward compat wrappers.\n  (Kind.fromAKind.  Kind.toAKind): New.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@924137 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-03-17 11:39:45","modifiedFileCount":"3","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-08-14 01:33:26","codes":[{"authorDate":"2010-08-14 01:33:26","commitOrder":5,"curCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 4,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(Revision.Kind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 5,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n    }\n","date":"2010-08-14 01:33:26","endLine":2475,"groupId":"5","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeUsingHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/7b/84c56f6e8239568042dfe9508cd92c5f82b3dd.src","preCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(Revision.Kind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 5);\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2443,"status":"M"},{"authorDate":"2010-08-14 01:33:26","commitOrder":5,"curCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        checkCommitRevision(thisTest,\n                            \"wrong revision number from main commit\", 4,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        checkCommitRevision(thisTest,\n                            \"wrong revision number from branch commit\", 5,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        \r\n        client.update(thisTest.getWCPathSet(\"/branches\"), Revision.HEAD,\n                      Depth.unknown, false, false, false);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(Revision.Kind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 6,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPathSet(), Revision.HEAD,\n                          Depth.unknown, false, false, false);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 7,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n    }\n","date":"2010-08-14 01:33:26","endLine":2554,"groupId":"27","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeReintegrate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/7b/84c56f6e8239568042dfe9508cd92c5f82b3dd.src","preCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        assertEquals(\"wrong revision number from main commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     4);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        assertEquals(\"wrong revision number from branch commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null),\n                     5);\n\n        \r\n        client.update(thisTest.getWCPathSet(\"/branches\"), Revision.HEAD,\n                      Depth.unknown, false, false, false);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(Revision.Kind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 6);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPathSet(), Revision.HEAD,\n                          Depth.unknown, false, false, false);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        assertEquals(\"wrong revision number from commit\",\n                     client.commit(thisTest.getWCPathSet(),\n                                   \"log msg\", Depth.infinity, false, false,\n                                   null, null), 7);\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2483,"status":"M"}],"commitId":"4059dd07b9460b84f3966fcc2e55462194eb4412","commitMessage":"@@@JavaHL: Introduce the commit information callback for the commit() API.  This\ncallback will eventually spread to the other commit-y APIs.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/BasicTests.java:\n  Update tests calling commit().\n\n* native/CreateJ.cpp. \n* native/CreateJ.h\n  (CommitInfo): New.\n\n* native/SVNClient.h. \n* native/SVNClient.cpp\n  (commit): Update to use the user-provided callback.\n  (CommitNotfier): Remove.\n  (getContext): Don't set up the commit notifier.\n\n* native/CommitCallback.h:\n  New.\n\n* native/CommitCallback.cpp:\n  New.\n\n* native/org_apache_subversion_javahl_SVNClient.cpp\n  (Java_org_apache_subversion_javahl_SVNClient_commit): Change return type and\n    params to match the Java API.\n\n* src/org/apache/subversion/javahl/CommitInfo.java:\n  New.\n\n* src/org/apache/subversion/javahl/SVNClient.java\n* src/org/apache/subversion/javahl/ISVNClient.java\n  (commit): Take a callback to return the commit revision.  author.  date.  etc.\n\n* src/org/apache/subversion/javahl/callback/CommitCallback.java:\n  New.\n\n* src/org/tigris/subversion/javahl/SVNClient.java\n  (commit): Update compat wrapper for new callback.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@985295 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-08-14 01:33:26","modifiedFileCount":"4","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-09-03 00:34:58","codes":[{"authorDate":"2010-09-03 00:34:58","commitOrder":6,"curCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 4,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(Revision.Kind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl().toString(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl().toString(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 5,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n    }\n","date":"2010-09-03 00:34:58","endLine":2415,"groupId":"5","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeUsingHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/21/256301f178cdca9dae962d0fb360f896f60b82.src","preCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 4,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(Revision.Kind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 5,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2383,"status":"M"},{"authorDate":"2010-09-03 00:34:58","commitOrder":6,"curCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        checkCommitRevision(thisTest,\n                            \"wrong revision number from main commit\", 4,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        checkCommitRevision(thisTest,\n                            \"wrong revision number from branch commit\", 5,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        \r\n        client.update(thisTest.getWCPathSet(\"/branches\"), Revision.HEAD,\n                      Depth.unknown, false, false, false);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(Revision.Kind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl().toString(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl().toString(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 6,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPathSet(), Revision.HEAD,\n                          Depth.unknown, false, false, false);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(),\n                             thisTest.getUrl().toString(), \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(),\n                             thisTest.getUrl().toString(), \"A/D/G/rho\",\n                             NodeKind.file, CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 7,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n    }\n","date":"2010-09-03 00:34:58","endLine":2494,"groupId":"27","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeReintegrate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/21/256301f178cdca9dae962d0fb360f896f60b82.src","preCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        checkCommitRevision(thisTest,\n                            \"wrong revision number from main commit\", 4,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        checkCommitRevision(thisTest,\n                            \"wrong revision number from branch commit\", 5,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        \r\n        client.update(thisTest.getWCPathSet(\"/branches\"), Revision.HEAD,\n                      Depth.unknown, false, false, false);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(Revision.Kind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 6,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPathSet(), Revision.HEAD,\n                          Depth.unknown, false, false, false);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(),\n                              \"A/D/G/rho\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 7,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2423,"status":"M"}],"commitId":"502fbeac018384945b585dff779a333a1c5900a9","commitMessage":"@@@JavaHL: Use the java.net.URI class internally in the tests.  There are a few\nplaces we can / should use it in the public API as a more appropriate type\nthan a simple String.  but testing it out on the tests first is initialy safer.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/SVNAdminTests.java:\n  Update API calls to de-wrap the URI.\n\n* tests/org/apache/subversion/javahl/BasicTests.java:\n  Same.\n\n* tests/org/apache/subversion/javahl/SVNTests.java\n  (OneTest.makeReposUrl): Return a URI.\n  (OneTest.url): Change from String to URI.\n  (OneTest.getUrl): Return a URI.\n  (OneTest.createInitialWorkingCopy): Use the URI type.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@992010 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-09-03 00:34:58","modifiedFileCount":"3","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-12-31 00:46:55","codes":[{"authorDate":"2010-09-03 00:34:58","commitOrder":7,"curCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 4,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(Revision.Kind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl().toString(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl().toString(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 5,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n    }\n","date":"2010-09-03 00:34:58","endLine":2415,"groupId":"1045","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testMergeUsingHistory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/21/256301f178cdca9dae962d0fb360f896f60b82.src","preCode":"    public void testMergeUsingHistory() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 4,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(Revision.Kind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl().toString(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl().toString(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 5,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2383,"status":"N"},{"authorDate":"2010-12-31 00:46:55","commitOrder":7,"curCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        checkCommitRevision(thisTest,\n                            \"wrong revision number from main commit\", 4,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        checkCommitRevision(thisTest,\n                            \"wrong revision number from branch commit\", 5,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        \r\n        update(thisTest, \"/branches\");\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(Revision.Kind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl().toString(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl().toString(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 6,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            update(thisTest);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(),\n                             thisTest.getUrl().toString(), \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(),\n                             thisTest.getUrl().toString(), \"A/D/G/rho\",\n                             NodeKind.file, CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 7,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n    }\n","date":"2010-12-31 00:46:55","endLine":2479,"groupId":"1045","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeReintegrate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/38/a81b80b347d3fbe9cc65ff6b498c4014bad382.src","preCode":"    public void testMergeReintegrate() throws Throwable\n    {\n        OneTest thisTest = setupAndPerformMerge();\n\n        \r\n        assertNull(client.getMergeinfo(new File(thisTest.getWCPath(), \"A\")\n                                       .toString(), Revision.HEAD));\n\n        \r\n        appendText(thisTest, \"A/mu\", \"xxx\", 4);\n        checkCommitRevision(thisTest,\n                            \"wrong revision number from main commit\", 4,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n        \r\n        appendText(thisTest, \"branches/A/D/G/rho\", \"yyy\", -1);\n        checkCommitRevision(thisTest,\n                            \"wrong revision number from branch commit\", 5,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        \r\n        client.update(thisTest.getWCPathSet(\"/branches\"), Revision.HEAD,\n                      Depth.unknown, false, false, false);\n\n        String branchPath = thisTest.getWCPath() + \"/branches/A\";\n        String modUrl = thisTest.getUrl() + \"/A\";\n        Revision unspec = new Revision(Revision.Kind.unspecified);\n        List<RevisionRange> ranges = new ArrayList<RevisionRange>(1);\n        ranges.add(new RevisionRange(unspec, unspec));\n        client.merge(modUrl, Revision.HEAD, ranges,\n                     branchPath, true, Depth.infinity, false, false, false);\n\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl().toString(),\n                              \"branches/A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl().toString(),\n                              \"branches/A/mu\", NodeKind.file,\n                              CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 6,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n        \r\n        String branchUrl = thisTest.getUrl() + \"/branches/A\";\n        try\n        {\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n            fail(\"reintegrate merged into a mixed-revision WC\");\n        }\n        catch(ClientException e)\n        {\n            \r\n            client.update(thisTest.getWCPathSet(), Revision.HEAD,\n                          Depth.unknown, false, false, false);\n            client.mergeReintegrate(branchUrl, Revision.HEAD,\n                                    thisTest.getWCPath() + \"/A\", false);\n        }\n        \r\n        addExpectedCommitItem(thisTest.getWCPath(),\n                             thisTest.getUrl().toString(), \"A\", NodeKind.dir,\n                              CommitItemStateFlags.PropMods);\n        addExpectedCommitItem(thisTest.getWCPath(),\n                             thisTest.getUrl().toString(), \"A/D/G/rho\",\n                             NodeKind.file, CommitItemStateFlags.TextMods);\n        checkCommitRevision(thisTest, \"wrong revision number from commit\", 7,\n                            thisTest.getWCPathSet(), \"log msg\", Depth.infinity,\n                            false, false, null, null);\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2410,"status":"M"}],"commitId":"bf046bca32b9624b1ac89ee070af41b2e37153bd","commitMessage":"@@@JavaHL: Add a couple of helpers in the testsuite to do a simple update.\n\n* subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java\n  (update): New helpers.\n  [elsewhere]: Use the new helpers when prudent.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@1053937 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-12-31 00:46:55","modifiedFileCount":"1","status":"M","submitter":"Hyrum Kurt Wright"}]
