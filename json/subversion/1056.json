[{"authorTime":"2007-04-27 06:04:11","codes":[{"authorDate":"2010-01-30 10:06:08","commitOrder":2,"curCode":"    public void testBasicBlame() throws Throwable\n    {\n        OneTest thisTest = new OneTest();\n        \r\n        byte[] result = collectBlameLines(thisTest.getWCPath() + \"/iota\",\n                                          Revision.getInstance(1),\n                                          Revision.getInstance(1),\n                                          Revision.getInstance(1),\n                                          false, false);\n        assertEquals(\"     1    jrandom This is the file 'iota'.\\n\",\n                     new String(result));\n\n        \r\n        BlameCallbackImpl callback = new BlameCallbackImpl();\n        client.blame(thisTest.getWCPath() + \"/iota\", Revision.getInstance(1),\n                     Revision.getInstance(1), Revision.getInstance(1),\n                     false, false, callback);\n        assertEquals(1, callback.numberOfLines());\n        BlameCallbackImpl.BlameLine line = callback.getBlameLine(0);\n        if (line != null)\n        {\n            assertEquals(1, line.getRevision());\n            assertEquals(\"jrandom\", line.getAuthor());\n        }\n    }\n","date":"2010-01-30 10:06:08","endLine":3431,"groupId":"165","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicBlame","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/7b/85b406f167dae59b5a39f282a07a7e60ca4c97.src","preCode":"    public void testBasicBlame() throws Throwable\n    {\n        OneTest thisTest = new OneTest();\n        \r\n        byte[] result = collectBlameLines(thisTest.getWCPath() + \"/iota\",\n                                          Revision.getInstance(1),\n                                          Revision.getInstance(1),\n                                          Revision.getInstance(1),\n                                          false, false);\n        assertEquals(\"     1    jrandom This is the file 'iota'.\\n\",\n                     new String(result));\n\n        \r\n        BlameCallbackImpl callback = new BlameCallbackImpl();\n        client.blame(thisTest.getWCPath() + \"/iota\", Revision.getInstance(1),\n                     Revision.getInstance(1), Revision.getInstance(1),\n                     false, false, callback);\n        assertEquals(1, callback.numberOfLines());\n        BlameCallbackImpl.BlameLine line = callback.getBlameLine(0);\n        if (line != null)\n        {\n            assertEquals(1, line.getRevision());\n            assertEquals(\"jrandom\", line.getAuthor());\n        }\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":3407,"status":"B"},{"authorDate":"2007-04-27 06:04:11","commitOrder":2,"curCode":"    public void testBasicBlame() throws Throwable\n    {\n        OneTest thisTest = new OneTest();\n        \r\n        byte[] result = client.blame(thisTest.getWCPath() + \"/iota\", Revision\n                                     .getInstance(1), Revision.getInstance(1));\n        assertEquals(\"     1    jrandom This is the file 'iota'.\\n\",\n                     new String(result));\n\n        \r\n        BlameCallbackImpl callback = new BlameCallbackImpl();\n        client.blame(thisTest.getWCPath() + \"/iota\", Revision.getInstance(1),\n                     Revision.getInstance(1), callback);\n        assertEquals(1, callback.numberOfLines());\n        BlameCallbackImpl.BlameLine line = callback.getBlameLine(0);\n        if (line != null)\n        {\n            assertEquals(1, line.getRevision());\n            assertEquals(\"jrandom\", line.getAuthor());\n        }\n    }\n","date":"2007-04-27 06:04:11","endLine":2571,"groupId":"206","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasicBlame","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/a0/e143eecaa159a4c5dc744e73b35bafd6e18038.src","preCode":"    public void testBasicBlame() throws Throwable\n    {\n        OneTest thisTest = new OneTest();\n        \r\n        byte[] result = client.blame(thisTest.getWCPath() + \"/iota\", Revision\n                                     .getInstance(1), Revision.getInstance(1));\n        assertEquals(\"     1    jrandom This is the file 'iota'.\\n\",\n                     new String(result));\n\n        \r\n        BlameCallbackImpl callback = new BlameCallbackImpl();\n        client.blame(thisTest.getWCPath() + \"/iota\", Revision.getInstance(1),\n                     Revision.getInstance(1), callback);\n        assertEquals(1, callback.numberOfLines());\n        BlameCallbackImpl.BlameLine line = callback.getBlameLine(0);\n        if (line != null)\n        {\n            assertEquals(1, line.getRevision());\n            assertEquals(\"jrandom\", line.getAuthor());\n        }\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2551,"status":"NB"}],"commitId":"6928e23ce539756dfb45f2763d31147ec1abb736","commitMessage":"@@@JavaHL: First attempt to port the JavaHL tests to the new org.apache.subversion\npackage.  The tests should now compile with 'make javahl-compat-tests'.  but\nit is doubtful they will run and/or pass.\n\n* Makefile.in:\n  Add check-javahl-compat target.\n\n* build.conf\n  (javahl-compat-tests): New.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/SVNAdminTests.java. \n  tests/org/apache/subversion/javahl/BasicTests.java. \n  tests/org/apache/subversion/javahl/RunTests.java. \n  tests/org/apache/subversion/javahl/SVNTests.java. \n  tests/org/apache/subversion/javahl/WC.java. \n  src/org/apache/subversion/javahl/NotifyAction.java. \n  src/org/apache/subversion/javahl/IInput.java. \n  src/org/apache/subversion/javahl/LogDate.java. \n  src/org/apache/subversion/javahl/BlameCallbackImpl.java. \n  src/org/apache/subversion/javahl/LogMessage.java. \n  src/org/apache/subversion/javahl/ScheduleKind.java. \n  src/org/apache/subversion/javahl/IOutput.java. \n  src/org/apache/subversion/javahl/SVNAdmin.java. \n  src/org/apache/subversion/javahl/MergeinfoLogKind.java. \n  src/org/apache/subversion/javahl/Path.java:\n  New.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@904709 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-01-30 10:06:08","modifiedFileCount":"0","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2007-04-27 06:04:11","codes":[{"authorDate":"2015-01-28 21:52:45","commitOrder":3,"curCode":"    public void testBasicBlame() throws Throwable\n    {\n        OneTest thisTest = new OneTest();\n        \r\n        byte[] result = collectBlameLines(thisTest.getWCPath() + \"/iota\",\n                                          Revision.getInstance(1),\n                                          Revision.getInstance(1),\n                                          Revision.getInstance(1),\n                                          false, false);\n        assertEquals(\"     1    jrandom This is the file 'iota'.\\n\",\n                     new String(result));\n\n        \r\n        BlameCallbackImpl callback = new BlameCallbackImpl();\n        client.blame(thisTest.getWCPath() + \"/iota\", Revision.getInstance(1),\n                     Revision.getInstance(1), Revision.getInstance(1),\n                     false, false, callback);\n        assertEquals(1, callback.numberOfLines());\n        BlameCallbackImpl.BlameLine line = callback.getBlameLine(0);\n        assertNotNull(line);\n        assertEquals(1, line.getRevision());\n        assertEquals(\"jrandom\", line.getAuthor());\n        assertEquals(\"This is the file 'iota'.\", line.getLine());\n    }\n","date":"2015-01-28 21:52:45","endLine":3892,"groupId":"1056","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBasicBlame","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/d5/808a15f69c87346f82f6e3633b43350903e840.src","preCode":"    public void testBasicBlame() throws Throwable\n    {\n        OneTest thisTest = new OneTest();\n        \r\n        byte[] result = collectBlameLines(thisTest.getWCPath() + \"/iota\",\n                                          Revision.getInstance(1),\n                                          Revision.getInstance(1),\n                                          Revision.getInstance(1),\n                                          false, false);\n        assertEquals(\"     1    jrandom This is the file 'iota'.\\n\",\n                     new String(result));\n\n        \r\n        BlameCallbackImpl callback = new BlameCallbackImpl();\n        client.blame(thisTest.getWCPath() + \"/iota\", Revision.getInstance(1),\n                     Revision.getInstance(1), Revision.getInstance(1),\n                     false, false, callback);\n        assertEquals(1, callback.numberOfLines());\n        BlameCallbackImpl.BlameLine line = callback.getBlameLine(0);\n        if (line != null)\n        {\n            assertEquals(1, line.getRevision());\n            assertEquals(\"jrandom\", line.getAuthor());\n        }\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":3869,"status":"M"},{"authorDate":"2007-04-27 06:04:11","commitOrder":3,"curCode":"    public void testBasicBlame() throws Throwable\n    {\n        OneTest thisTest = new OneTest();\n        \r\n        byte[] result = client.blame(thisTest.getWCPath() + \"/iota\", Revision\n                                     .getInstance(1), Revision.getInstance(1));\n        assertEquals(\"     1    jrandom This is the file 'iota'.\\n\",\n                     new String(result));\n\n        \r\n        BlameCallbackImpl callback = new BlameCallbackImpl();\n        client.blame(thisTest.getWCPath() + \"/iota\", Revision.getInstance(1),\n                     Revision.getInstance(1), callback);\n        assertEquals(1, callback.numberOfLines());\n        BlameCallbackImpl.BlameLine line = callback.getBlameLine(0);\n        if (line != null)\n        {\n            assertEquals(1, line.getRevision());\n            assertEquals(\"jrandom\", line.getAuthor());\n        }\n    }\n","date":"2007-04-27 06:04:11","endLine":2571,"groupId":"1056","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBasicBlame","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/a0/e143eecaa159a4c5dc744e73b35bafd6e18038.src","preCode":"    public void testBasicBlame() throws Throwable\n    {\n        OneTest thisTest = new OneTest();\n        \r\n        byte[] result = client.blame(thisTest.getWCPath() + \"/iota\", Revision\n                                     .getInstance(1), Revision.getInstance(1));\n        assertEquals(\"     1    jrandom This is the file 'iota'.\\n\",\n                     new String(result));\n\n        \r\n        BlameCallbackImpl callback = new BlameCallbackImpl();\n        client.blame(thisTest.getWCPath() + \"/iota\", Revision.getInstance(1),\n                     Revision.getInstance(1), callback);\n        assertEquals(1, callback.numberOfLines());\n        BlameCallbackImpl.BlameLine line = callback.getBlameLine(0);\n        if (line != null)\n        {\n            assertEquals(1, line.getRevision());\n            assertEquals(\"jrandom\", line.getAuthor());\n        }\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2551,"status":"N"}],"commitId":"329c8b29b4b9e31038fcbd7e57296b3a8807d8db","commitMessage":"@@@Add a JavaHL test for ISVNClient.blame with diff options\nand remove the deprecation of the older blame method.\n\n[in subversion/bindings/javahl]\n* src/org/apache/subversion/javahl/ISVNClient.java\n  (ISVNClient.blame): Remove deprecation.\n* src/org/apache/subversion/javahl/SVNClient.java\n  (SVNClient.blame): Likewise.\n\n* tests/org/apache/subversion/javahl/BasicTests.java\n  (BasicTests.testBasicBlame): Check the contents of the blame line.\n  (BasicTests.testBlameWithDiffOptions): New test case.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@1655322 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-01-28 21:52:45","modifiedFileCount":"3","status":"M","submitter":"Branko ?ibej"}]
