[{"authorTime":"2013-03-02 09:24:45","codes":[{"authorDate":"2013-03-02 09:24:45","commitOrder":1,"curCode":"    public void testVersionExtendedQuiet() throws Throwable\n    {\n        try\n        {\n            VersionExtended vx = client.getVersionExtended(false);\n            String result = vx.getBuildDate();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Build date empty\");\n            result = vx.getBuildTime();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Build time empty\");\n            result = vx.getBuildHost();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Build host empty\");\n            result = vx.getCopyright();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Copyright empty\");\n        }\n        catch (Exception e)\n        {\n            fail(\"VersionExtended should always be available unless the \" +\n                 \"native libraries failed to initialize: \" + e);\n        }\n    }\n","date":"2013-03-02 09:24:45","endLine":160,"groupId":"322","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testVersionExtendedQuiet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/e0/85f17795c248b39512b5ef2a72221d460fcf84.src","preCode":"    public void testVersionExtendedQuiet() throws Throwable\n    {\n        try\n        {\n            VersionExtended vx = client.getVersionExtended(false);\n            String result = vx.getBuildDate();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Build date empty\");\n            result = vx.getBuildTime();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Build time empty\");\n            result = vx.getBuildHost();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Build host empty\");\n            result = vx.getCopyright();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Copyright empty\");\n        }\n        catch (Exception e)\n        {\n            fail(\"VersionExtended should always be available unless the \" +\n                 \"native libraries failed to initialize: \" + e);\n        }\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"},{"authorDate":"2013-03-02 09:24:45","commitOrder":1,"curCode":"    public void testVersionExtendedVerbose() throws Throwable\n    {\n        try\n        {\n            VersionExtended vx = client.getVersionExtended(true);\n            String result = vx.getRuntimeHost();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Runtime host empty\");\n\n            \r\n            result = vx.getRuntimeOSName();\n            if (result != null && result.trim().length() == 0)\n                throw new Exception(\"Runtime OS name empty\");\n\n            java.util.Iterator<VersionExtended.LinkedLib> ikl;\n            ikl = vx.getLinkedLibs();\n            if (ikl.hasNext())\n            {\n                VersionExtended.LinkedLib lib = ikl.next();\n                result = lib.getName();\n                if (result == null || result.trim().length() == 0)\n                    throw new Exception(\"Linked lib name empty\");\n                result = lib.getCompiledVersion();\n                if (result == null || result.trim().length() == 0)\n                    throw new Exception(\"Linked lib compiled version empty\");\n                \r\n                result = lib.getRuntimeVersion();\n                if (result != null && result.trim().length() == 0)\n                    throw new Exception(\"Linked lib runtime version empty\");\n            }\n\n            java.util.Iterator<VersionExtended.LoadedLib> ill;\n            ill = vx.getLoadedLibs();\n            if (ill.hasNext())\n            {\n                VersionExtended.LoadedLib lib = ill.next();\n                result = lib.getName();\n                if (result == null || result.trim().length() == 0)\n                    throw new Exception(\"Loaded lib name empty\");\n                \r\n                result = lib.getVersion();\n                if (result != null && result.trim().length() == 0)\n                    throw new Exception(\"Loaded lib version empty\");\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"VersionExtended should always be available unless the \" +\n                 \"native libraries failed to initialize: \" + e);\n        }\n    }\n","date":"2013-03-02 09:24:45","endLine":216,"groupId":"388","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testVersionExtendedVerbose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/e0/85f17795c248b39512b5ef2a72221d460fcf84.src","preCode":"    public void testVersionExtendedVerbose() throws Throwable\n    {\n        try\n        {\n            VersionExtended vx = client.getVersionExtended(true);\n            String result = vx.getRuntimeHost();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Runtime host empty\");\n\n            \r\n            result = vx.getRuntimeOSName();\n            if (result != null && result.trim().length() == 0)\n                throw new Exception(\"Runtime OS name empty\");\n\n            java.util.Iterator<VersionExtended.LinkedLib> ikl;\n            ikl = vx.getLinkedLibs();\n            if (ikl.hasNext())\n            {\n                VersionExtended.LinkedLib lib = ikl.next();\n                result = lib.getName();\n                if (result == null || result.trim().length() == 0)\n                    throw new Exception(\"Linked lib name empty\");\n                result = lib.getCompiledVersion();\n                if (result == null || result.trim().length() == 0)\n                    throw new Exception(\"Linked lib compiled version empty\");\n                \r\n                result = lib.getRuntimeVersion();\n                if (result != null && result.trim().length() == 0)\n                    throw new Exception(\"Linked lib runtime version empty\");\n            }\n\n            java.util.Iterator<VersionExtended.LoadedLib> ill;\n            ill = vx.getLoadedLibs();\n            if (ill.hasNext())\n            {\n                VersionExtended.LoadedLib lib = ill.next();\n                result = lib.getName();\n                if (result == null || result.trim().length() == 0)\n                    throw new Exception(\"Loaded lib name empty\");\n                \r\n                result = lib.getVersion();\n                if (result != null && result.trim().length() == 0)\n                    throw new Exception(\"Loaded lib version empty\");\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"VersionExtended should always be available unless the \" +\n                 \"native libraries failed to initialize: \" + e);\n        }\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"B"}],"commitId":"02ec09dfe4e9810dc07b8c4e733f5506c56097c6","commitMessage":"@@@Working on isue #4326 (update javahl with new 1.8 APIs).\n\nImplement the svn_version_extended interface in JavaHL.\n\n* build.conf: Declare new JavaHL generated headers.\n\n[in subversion/bindings/javahl/native]\n* VersionExtended.h: New; declares native wrapper for svn_version_extended_t.\n* VersionExtended.cpp: Out-of-line implementation of VersionExtended.h\n* org_apache_subversion_javahl_types_VersionExtended.cpp:\n   Implementations of native methods declared in VersionExtended.java.\n\n* SVNClient.h (SVNCliend::getVersionExtended): New method.\n* SVNClient.cpp: Inclide VersionExtended.h.\n  (SVNCliend::getVersionExtended): Implement.\n* org_apache_subversion_javahl_SVNClient.cpp\n  (Java_org_apache_subversion_javahl_SVNClient_getVersionExtended):\n   Implementation of JNI method SVNClient.getVersionExteded.\n\n[in subversion/bindings/javahl/src/org/apache/subversion/javahl]\n* ISVNClient.java (SVNCliend.getVersionExtended): New interface method.\n* SVNClient.java (SVNCliend.getVersionExtended): New native method.\n* types/VersionExtended.java: New; Java wrapper for svn_version_extended_t.\n\n[in subversion/bindings/javahl/tests/org/apache/subversion/javahl]\n* BasicTests.java\n  (BasicTests.testVersionExtendedQuiet. \n   BasicTests.testVersionExtendedVerbose): New test cases.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@1451810 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-03-02 09:24:45","modifiedFileCount":"3","status":"B","submitter":"Branko ?ibej"},{"authorTime":"2015-06-09 14:18:21","codes":[{"authorDate":"2015-06-09 14:18:21","commitOrder":2,"curCode":"    public void testVersionExtendedQuiet() throws Throwable\n    {\n        VersionExtended vx = null;\n        try\n        {\n            vx = client.getVersionExtended(false);\n            String result = vx.getBuildDate();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Build date empty\");\n            result = vx.getBuildTime();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Build time empty\");\n            result = vx.getBuildHost();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Build host empty\");\n            result = vx.getCopyright();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Copyright empty\");\n        }\n        catch (Exception e)\n        {\n            fail(\"VersionExtended should always be available unless the \" +\n                 \"native libraries failed to initialize: \" + e);\n        }\n        finally\n        {\n            if (vx != null)\n                vx.dispose();\n        }\n    }\n","date":"2015-06-09 14:18:21","endLine":169,"groupId":"106","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testVersionExtendedQuiet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/8c/a2b1fe2daf764ba1747ee1d9d3418dc12f415b.src","preCode":"    public void testVersionExtendedQuiet() throws Throwable\n    {\n        try\n        {\n            VersionExtended vx = client.getVersionExtended(false);\n            String result = vx.getBuildDate();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Build date empty\");\n            result = vx.getBuildTime();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Build time empty\");\n            result = vx.getBuildHost();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Build host empty\");\n            result = vx.getCopyright();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Copyright empty\");\n        }\n        catch (Exception e)\n        {\n            fail(\"VersionExtended should always be available unless the \" +\n                 \"native libraries failed to initialize: \" + e);\n        }\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2015-06-09 14:18:21","commitOrder":2,"curCode":"    public void testVersionExtendedVerbose() throws Throwable\n    {\n        VersionExtended vx = null;\n        try\n        {\n            vx = client.getVersionExtended(true);\n            String result = vx.getRuntimeHost();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Runtime host empty\");\n\n            \r\n            result = vx.getRuntimeOSName();\n            if (result != null && result.trim().length() == 0)\n                throw new Exception(\"Runtime OS name empty\");\n\n            java.util.Iterator<VersionExtended.LinkedLib> ikl;\n            ikl = vx.getLinkedLibs();\n            if (ikl.hasNext())\n            {\n                VersionExtended.LinkedLib lib = ikl.next();\n                result = lib.getName();\n                if (result == null || result.trim().length() == 0)\n                    throw new Exception(\"Linked lib name empty\");\n                result = lib.getCompiledVersion();\n                if (result == null || result.trim().length() == 0)\n                    throw new Exception(\"Linked lib compiled version empty\");\n                \r\n                result = lib.getRuntimeVersion();\n                if (result != null && result.trim().length() == 0)\n                    throw new Exception(\"Linked lib runtime version empty\");\n            }\n\n            java.util.Iterator<VersionExtended.LoadedLib> ill;\n            ill = vx.getLoadedLibs();\n            if (ill.hasNext())\n            {\n                VersionExtended.LoadedLib lib = ill.next();\n                result = lib.getName();\n                if (result == null || result.trim().length() == 0)\n                    throw new Exception(\"Loaded lib name empty\");\n                \r\n                result = lib.getVersion();\n                if (result != null && result.trim().length() == 0)\n                    throw new Exception(\"Loaded lib version empty\");\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"VersionExtended should always be available unless the \" +\n                 \"native libraries failed to initialize: \" + e);\n        }\n        finally\n        {\n            if (vx != null)\n                vx.dispose();\n        }\n    }\n","date":"2015-06-09 14:18:21","endLine":231,"groupId":"106","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testVersionExtendedVerbose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/8c/a2b1fe2daf764ba1747ee1d9d3418dc12f415b.src","preCode":"    public void testVersionExtendedVerbose() throws Throwable\n    {\n        try\n        {\n            VersionExtended vx = client.getVersionExtended(true);\n            String result = vx.getRuntimeHost();\n            if (result == null || result.trim().length() == 0)\n                throw new Exception(\"Runtime host empty\");\n\n            \r\n            result = vx.getRuntimeOSName();\n            if (result != null && result.trim().length() == 0)\n                throw new Exception(\"Runtime OS name empty\");\n\n            java.util.Iterator<VersionExtended.LinkedLib> ikl;\n            ikl = vx.getLinkedLibs();\n            if (ikl.hasNext())\n            {\n                VersionExtended.LinkedLib lib = ikl.next();\n                result = lib.getName();\n                if (result == null || result.trim().length() == 0)\n                    throw new Exception(\"Linked lib name empty\");\n                result = lib.getCompiledVersion();\n                if (result == null || result.trim().length() == 0)\n                    throw new Exception(\"Linked lib compiled version empty\");\n                \r\n                result = lib.getRuntimeVersion();\n                if (result != null && result.trim().length() == 0)\n                    throw new Exception(\"Linked lib runtime version empty\");\n            }\n\n            java.util.Iterator<VersionExtended.LoadedLib> ill;\n            ill = vx.getLoadedLibs();\n            if (ill.hasNext())\n            {\n                VersionExtended.LoadedLib lib = ill.next();\n                result = lib.getName();\n                if (result == null || result.trim().length() == 0)\n                    throw new Exception(\"Loaded lib name empty\");\n                \r\n                result = lib.getVersion();\n                if (result != null && result.trim().length() == 0)\n                    throw new Exception(\"Loaded lib version empty\");\n            }\n        }\n        catch (Exception e)\n        {\n            fail(\"VersionExtended should always be available unless the \" +\n                 \"native libraries failed to initialize: \" + e);\n        }\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"b7fcae2208e5b82be41177e0a2b5fd19836e1c24","commitMessage":"@@@Fix a minor omission in JavaHL's VersionExtended class:\nthe dispose() and finalize() methods were missing.\n\n[in subversion/bindings/javahl]\n* src/org/apache/subversion/javahl/types/VersionExtended.java\n  (VersionExtended.dispose.  VersionExtended.finalize): Add methods.\n\n* VersionExtended.h\n  (VersionExtended::getCppObject): Return a non-const pointer;\n   the implementation of dispose() cannot use an immutable object.\n* VersionExtended.cpp\n  (VersionExtended::getCppObject): Update implementation.\n\n* org_apache_subversion_javahl_types_VersionExtended.cpp:\n   Include svn_private_config.h\n  (Java_org_apache_subversion_javahl_types_VersionExtended_dispose):\n   Implement native method.\n\n* tests/org/apache/subversion/javahl/BasicTests.java\n  (BasicTests.testVersionExtendedQuiet. \n   BasicTests.testVersionExtendedVerbose): Dispose the VersionExtended object.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@1684322 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-09 14:18:21","modifiedFileCount":"2","status":"M","submitter":"Branko ?ibej"}]
