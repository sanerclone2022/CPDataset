[{"authorTime":"2010-02-09 12:36:52","codes":[{"authorDate":"2010-02-10 09:55:45","commitOrder":2,"curCode":"    public void logMessages(String path, Revision pegRevision,\n                            RevisionRange[] revisionRanges,\n                            boolean stopOnCopy, boolean discoverPath,\n                            boolean includeMergedRevisions, String[] revProps,\n                            long limit, LogMessageCallback callback)\n            throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            public aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    org.apache.subversion.javahl.ChangePath[] aChangedPaths,\n                    long revision, Map revprops, boolean hasChildren)\n            {\n                ChangePath[] changedPaths;\n                \n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.length];\n\n                    for (int i = 0; i < aChangedPaths.length; i++)\n                    {\n                        changedPaths[i] = new ChangePath(aChangedPaths[i]);\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                callback.singleMessage(changedPaths, revision, revprops,\n                                       hasChildren);\n            }\n        }\n","date":"2010-02-10 09:55:45","endLine":528,"groupId":"141","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"logMessages","params":"(Stringpath@RevisionpegRevision@RevisionRange[]revisionRanges@booleanstopOnCopy@booleandiscoverPath@booleanincludeMergedRevisions@String[]revProps@longlimit@LogMessageCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/cf/57c54a8a5c6127e572e90a9c08e62fbca5b9f0.src","preCode":"    public void logMessages(String path, Revision pegRevision,\n                            RevisionRange[] revisionRanges,\n                            boolean stopOnCopy, boolean discoverPath,\n                            boolean includeMergedRevisions, String[] revProps,\n                            long limit, LogMessageCallback callback)\n            throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            public aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    org.apache.subversion.javahl.ChangePath[] aChangedPaths,\n                    long revision, Map revprops, boolean hasChildren)\n            {\n                ChangePath[] changedPaths;\n                \n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.length];\n\n                    for (int i = 0; i < aChangedPaths.length; i++)\n                    {\n                        changedPaths[i] = new ChangePath(aChangedPaths[i]);\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                callback.singleMessage(changedPaths, revision, revprops,\n                                       hasChildren);\n            }\n        }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"B"},{"authorDate":"2010-02-09 12:36:52","commitOrder":2,"curCode":"    public void getMergeinfoLog(int kind, String pathOrUrl,\n                                Revision pegRevision, String mergeSourceUrl,\n                                Revision srcPegRevision,\n                                boolean discoverChangedPaths, int depth,\n                                String[] revprops, LogMessageCallback callback)\n        throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    org.apache.subversion.javahl.ChangePath[] aChangedPaths,\n                    long revision, Map revprops, boolean hasChildren)\n            {\n                ChangePath[] changedPaths;\n\n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.length];\n\n                    for (int i = 0; i < aChangedPaths.length; i++)\n                    {\n                        changedPaths[i] = new ChangePath(aChangedPaths[i]);\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                callback.singleMessage(changedPaths, revision, revprops,\n                                       hasChildren);\n            }\n        }\n","date":"2010-02-09 12:36:52","endLine":1336,"groupId":"141","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getMergeinfoLog","params":"(intkind@StringpathOrUrl@RevisionpegRevision@StringmergeSourceUrl@RevisionsrcPegRevision@booleandiscoverChangedPaths@intdepth@String[]revprops@LogMessageCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/6e/6f6e4632192851becdc77f978b88c5433c5ede.src","preCode":"    public void getMergeinfoLog(int kind, String pathOrUrl,\n                                Revision pegRevision, String mergeSourceUrl,\n                                Revision srcPegRevision,\n                                boolean discoverChangedPaths, int depth,\n                                String[] revprops, LogMessageCallback callback)\n        throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    org.apache.subversion.javahl.ChangePath[] aChangedPaths,\n                    long revision, Map revprops, boolean hasChildren)\n            {\n                ChangePath[] changedPaths;\n\n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.length];\n\n                    for (int i = 0; i < aChangedPaths.length; i++)\n                    {\n                        changedPaths[i] = new ChangePath(aChangedPaths[i]);\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                callback.singleMessage(changedPaths, revision, revprops,\n                                       hasChildren);\n            }\n        }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":1296,"status":"NB"}],"commitId":"5fd281af34902b50bbbb8ea4c8ae4101e5e039f5","commitMessage":"@@@JavaHL: Tighten the scope of some inner classes.\n\n* subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java\n  (MyStatusCallback.  MyListCallback.  MyLogMessageCallback.  BlameCallbackWrapper. \n   MyInfoCallback): Move these wrapper classes into the using functions.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@908310 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-02-10 09:55:45","modifiedFileCount":"1","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-02-09 12:36:52","codes":[{"authorDate":"2010-03-02 06:46:45","commitOrder":3,"curCode":"    public void logMessages(String path, Revision pegRevision,\n                            RevisionRange[] revisionRanges,\n                            boolean stopOnCopy, boolean discoverPath,\n                            boolean includeMergedRevisions, String[] revProps,\n                            long limit, LogMessageCallback callback)\n            throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            public aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    org.apache.subversion.javahl.ChangePath[] aChangedPaths,\n                    long revision, Map<String, byte[]> revprops,\n                    boolean hasChildren)\n            {\n                Map<String, String> oldRevprops =\n                                                new HashMap<String, String>();\n                ChangePath[] changedPaths;\n                \n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.length];\n\n                    for (int i = 0; i < aChangedPaths.length; i++)\n                    {\n                        changedPaths[i] = new ChangePath(aChangedPaths[i]);\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                for (String key : revprops.keySet())\n                {\n                    oldRevprops.put(key, new String(revprops.get(key)));\n                }\n\n                callback.singleMessage(changedPaths, revision, oldRevprops,\n                                       hasChildren);\n            }\n        }\n","date":"2010-03-02 06:46:45","endLine":537,"groupId":"141","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"logMessages","params":"(Stringpath@RevisionpegRevision@RevisionRange[]revisionRanges@booleanstopOnCopy@booleandiscoverPath@booleanincludeMergedRevisions@String[]revProps@longlimit@LogMessageCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/50/c21d4754631366339381f59f9c231ac1795d11.src","preCode":"    public void logMessages(String path, Revision pegRevision,\n                            RevisionRange[] revisionRanges,\n                            boolean stopOnCopy, boolean discoverPath,\n                            boolean includeMergedRevisions, String[] revProps,\n                            long limit, LogMessageCallback callback)\n            throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            public aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    org.apache.subversion.javahl.ChangePath[] aChangedPaths,\n                    long revision, Map revprops, boolean hasChildren)\n            {\n                ChangePath[] changedPaths;\n                \n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.length];\n\n                    for (int i = 0; i < aChangedPaths.length; i++)\n                    {\n                        changedPaths[i] = new ChangePath(aChangedPaths[i]);\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                callback.singleMessage(changedPaths, revision, revprops,\n                                       hasChildren);\n            }\n        }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"M"},{"authorDate":"2010-02-09 12:36:52","commitOrder":3,"curCode":"    public void getMergeinfoLog(int kind, String pathOrUrl,\n                                Revision pegRevision, String mergeSourceUrl,\n                                Revision srcPegRevision,\n                                boolean discoverChangedPaths, int depth,\n                                String[] revprops, LogMessageCallback callback)\n        throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    org.apache.subversion.javahl.ChangePath[] aChangedPaths,\n                    long revision, Map revprops, boolean hasChildren)\n            {\n                ChangePath[] changedPaths;\n\n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.length];\n\n                    for (int i = 0; i < aChangedPaths.length; i++)\n                    {\n                        changedPaths[i] = new ChangePath(aChangedPaths[i]);\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                callback.singleMessage(changedPaths, revision, revprops,\n                                       hasChildren);\n            }\n        }\n","date":"2010-02-09 12:36:52","endLine":1336,"groupId":"141","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getMergeinfoLog","params":"(intkind@StringpathOrUrl@RevisionpegRevision@StringmergeSourceUrl@RevisionsrcPegRevision@booleandiscoverChangedPaths@intdepth@String[]revprops@LogMessageCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/6e/6f6e4632192851becdc77f978b88c5433c5ede.src","preCode":"    public void getMergeinfoLog(int kind, String pathOrUrl,\n                                Revision pegRevision, String mergeSourceUrl,\n                                Revision srcPegRevision,\n                                boolean discoverChangedPaths, int depth,\n                                String[] revprops, LogMessageCallback callback)\n        throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    org.apache.subversion.javahl.ChangePath[] aChangedPaths,\n                    long revision, Map revprops, boolean hasChildren)\n            {\n                ChangePath[] changedPaths;\n\n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.length];\n\n                    for (int i = 0; i < aChangedPaths.length; i++)\n                    {\n                        changedPaths[i] = new ChangePath(aChangedPaths[i]);\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                callback.singleMessage(changedPaths, revision, revprops,\n                                       hasChildren);\n            }\n        }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":1296,"status":"N"}],"commitId":"579116a4d8d239d790d273223673fadf10b5692b","commitMessage":"@@@JavaHL: Return properties as byte[] throughout the callback interfaces.\n\nWe use byte[] in place of String because there could be binary data in the\nproperty.  and the conversion to String would truncate the property at any\nNULL bytes.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/BasicTests.java\n  (testBasicProperties.  getMergeinfoRevisions.  testCommitRevprops. \n   MyProplistCallback.  collectProperties.  collectLogMessages. \n   BlameCallbackImpl):\n    Update for byte[] property values.\n\n* native/ProplistCallback.cpp\n  (makeMapFromHash): Put the byte array into the Map.\n\n* src/org/apache/subversion/javahl/callback/LogMessageCallback.java\n  (LogMessageCallback): Change the interface to return byte[].\n\n* src/org/apache/subversion/javahl/callback/ProplistCallback.java\n  (singlePath): Same.\n\n* src/org/apache/subversion/javahl/callback/BlameCallback.java\n  (singleLine): Same.\n\n* src/org/tigris/subversion/javahl/SVNClient.java\n  (logMessages.  properties.  blame): Update wrappers for the byte[] switch.\n\n* src/org/tigris/subversion/javahl/ProplistCallbackImpl.java\n  (ProplistCallback): Wrap the byte[] for backward compat.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@917772 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-03-02 06:46:45","modifiedFileCount":"6","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-03-02 10:49:37","codes":[{"authorDate":"2010-03-02 06:46:45","commitOrder":4,"curCode":"    public void logMessages(String path, Revision pegRevision,\n                            RevisionRange[] revisionRanges,\n                            boolean stopOnCopy, boolean discoverPath,\n                            boolean includeMergedRevisions, String[] revProps,\n                            long limit, LogMessageCallback callback)\n            throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            public aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    org.apache.subversion.javahl.ChangePath[] aChangedPaths,\n                    long revision, Map<String, byte[]> revprops,\n                    boolean hasChildren)\n            {\n                Map<String, String> oldRevprops =\n                                                new HashMap<String, String>();\n                ChangePath[] changedPaths;\n                \n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.length];\n\n                    for (int i = 0; i < aChangedPaths.length; i++)\n                    {\n                        changedPaths[i] = new ChangePath(aChangedPaths[i]);\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                for (String key : revprops.keySet())\n                {\n                    oldRevprops.put(key, new String(revprops.get(key)));\n                }\n\n                callback.singleMessage(changedPaths, revision, oldRevprops,\n                                       hasChildren);\n            }\n        }\n","date":"2010-03-02 06:46:45","endLine":537,"groupId":"141","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"logMessages","params":"(Stringpath@RevisionpegRevision@RevisionRange[]revisionRanges@booleanstopOnCopy@booleandiscoverPath@booleanincludeMergedRevisions@String[]revProps@longlimit@LogMessageCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/50/c21d4754631366339381f59f9c231ac1795d11.src","preCode":"    public void logMessages(String path, Revision pegRevision,\n                            RevisionRange[] revisionRanges,\n                            boolean stopOnCopy, boolean discoverPath,\n                            boolean includeMergedRevisions, String[] revProps,\n                            long limit, LogMessageCallback callback)\n            throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            public aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    org.apache.subversion.javahl.ChangePath[] aChangedPaths,\n                    long revision, Map<String, byte[]> revprops,\n                    boolean hasChildren)\n            {\n                Map<String, String> oldRevprops =\n                                                new HashMap<String, String>();\n                ChangePath[] changedPaths;\n                \n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.length];\n\n                    for (int i = 0; i < aChangedPaths.length; i++)\n                    {\n                        changedPaths[i] = new ChangePath(aChangedPaths[i]);\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                for (String key : revprops.keySet())\n                {\n                    oldRevprops.put(key, new String(revprops.get(key)));\n                }\n\n                callback.singleMessage(changedPaths, revision, oldRevprops,\n                                       hasChildren);\n            }\n        }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"N"},{"authorDate":"2010-03-02 10:49:37","commitOrder":4,"curCode":"    public void getMergeinfoLog(int kind, String pathOrUrl,\n                                Revision pegRevision, String mergeSourceUrl,\n                                Revision srcPegRevision,\n                                boolean discoverChangedPaths, int depth,\n                                String[] revprops,\n                                final LogMessageCallback callback)\n        throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            public void singleMessage(\n                    org.apache.subversion.javahl.ChangePath[] aChangedPaths,\n                    long revision, Map revprops, boolean hasChildren)\n            {\n                ChangePath[] changedPaths;\n\n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.length];\n\n                    for (int i = 0; i < aChangedPaths.length; i++)\n                    {\n                        changedPaths[i] = new ChangePath(aChangedPaths[i]);\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                callback.singleMessage(changedPaths, revision, revprops,\n                                       hasChildren);\n            }\n        }\n","date":"2010-03-02 10:49:37","endLine":1365,"groupId":"141","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getMergeinfoLog","params":"(intkind@StringpathOrUrl@RevisionpegRevision@StringmergeSourceUrl@RevisionsrcPegRevision@booleandiscoverChangedPaths@intdepth@String[]revprops@finalLogMessageCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/66/6b63a52c51f4fe1b88d24af669d654e9f1bd40.src","preCode":"    public void getMergeinfoLog(int kind, String pathOrUrl,\n                                Revision pegRevision, String mergeSourceUrl,\n                                Revision srcPegRevision,\n                                boolean discoverChangedPaths, int depth,\n                                String[] revprops, LogMessageCallback callback)\n        throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    org.apache.subversion.javahl.ChangePath[] aChangedPaths,\n                    long revision, Map revprops, boolean hasChildren)\n            {\n                ChangePath[] changedPaths;\n\n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.length];\n\n                    for (int i = 0; i < aChangedPaths.length; i++)\n                    {\n                        changedPaths[i] = new ChangePath(aChangedPaths[i]);\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                callback.singleMessage(changedPaths, revision, revprops,\n                                       hasChildren);\n            }\n        }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":1331,"status":"M"}],"commitId":"90b238cf2a1d41ec93ce5494a4cbaad0a96c2ba2","commitMessage":"@@@* subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java:\n  Simplify wrapper classes throughout.  by using final local variables of\n  appropriate scope.  and annymous inner classes where appropriate.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@917844 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-03-02 10:49:37","modifiedFileCount":"1","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-03-04 01:11:22","codes":[{"authorDate":"2010-03-04 01:11:22","commitOrder":5,"curCode":"    public void logMessages(String path, Revision pegRevision,\n                            RevisionRange[] revisionRanges,\n                            boolean stopOnCopy, boolean discoverPath,\n                            boolean includeMergedRevisions, String[] revProps,\n                            long limit, LogMessageCallback callback)\n            throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            public aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    Set<org.apache.subversion.javahl.ChangePath> aChangedPaths,\n                    long revision, Map<String, byte[]> revprops,\n                    boolean hasChildren)\n            {\n                Map<String, String> oldRevprops =\n                                                new HashMap<String, String>();\n                ChangePath[] changedPaths;\n                \n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.size()];\n\n                    int i = 0;\n                    for (org.apache.subversion.javahl.ChangePath cp\n                                                            : aChangedPaths)\n                    {\n                        changedPaths[i] = new ChangePath(cp);\n                        i++;\n                    }\n                    Arrays.sort(changedPaths);\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                for (String key : revprops.keySet())\n                {\n                    oldRevprops.put(key, new String(revprops.get(key)));\n                }\n\n                callback.singleMessage(changedPaths, revision, oldRevprops,\n                                       hasChildren);\n            }\n        }\n","date":"2010-03-04 01:11:22","endLine":507,"groupId":"531","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"logMessages","params":"(Stringpath@RevisionpegRevision@RevisionRange[]revisionRanges@booleanstopOnCopy@booleandiscoverPath@booleanincludeMergedRevisions@String[]revProps@longlimit@LogMessageCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/23/ec09987834ad4e5d41038edf77ebbfe7a1bd03.src","preCode":"    public void logMessages(String path, Revision pegRevision,\n                            RevisionRange[] revisionRanges,\n                            boolean stopOnCopy, boolean discoverPath,\n                            boolean includeMergedRevisions, String[] revProps,\n                            long limit, LogMessageCallback callback)\n            throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            public aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    org.apache.subversion.javahl.ChangePath[] aChangedPaths,\n                    long revision, Map<String, byte[]> revprops,\n                    boolean hasChildren)\n            {\n                Map<String, String> oldRevprops =\n                                                new HashMap<String, String>();\n                ChangePath[] changedPaths;\n                \n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.length];\n\n                    for (int i = 0; i < aChangedPaths.length; i++)\n                    {\n                        changedPaths[i] = new ChangePath(aChangedPaths[i]);\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                for (String key : revprops.keySet())\n                {\n                    oldRevprops.put(key, new String(revprops.get(key)));\n                }\n\n                callback.singleMessage(changedPaths, revision, oldRevprops,\n                                       hasChildren);\n            }\n        }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":455,"status":"M"},{"authorDate":"2010-03-04 01:11:22","commitOrder":5,"curCode":"    public void getMergeinfoLog(int kind, String pathOrUrl,\n                                Revision pegRevision, String mergeSourceUrl,\n                                Revision srcPegRevision,\n                                boolean discoverChangedPaths, int depth,\n                                String[] revprops,\n                                final LogMessageCallback callback)\n        throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            public void singleMessage(\n                    Set<org.apache.subversion.javahl.ChangePath> aChangedPaths,\n                    long revision, Map<String, byte[]> revprops,\n                    boolean hasChildren)\n            {\n                ChangePath[] changedPaths;\n\n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.size()];\n\n                    int i = 0;\n                    for (org.apache.subversion.javahl.ChangePath cp\n                                                             : aChangedPaths)\n                    {\n                        changedPaths[i] = new ChangePath(cp);\n                        i++;\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                callback.singleMessage(changedPaths, revision, revprops,\n                                       hasChildren);\n            }\n        }\n","date":"2010-03-04 01:11:22","endLine":1376,"groupId":"531","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getMergeinfoLog","params":"(intkind@StringpathOrUrl@RevisionpegRevision@StringmergeSourceUrl@RevisionsrcPegRevision@booleandiscoverChangedPaths@intdepth@String[]revprops@finalLogMessageCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/23/ec09987834ad4e5d41038edf77ebbfe7a1bd03.src","preCode":"    public void getMergeinfoLog(int kind, String pathOrUrl,\n                                Revision pegRevision, String mergeSourceUrl,\n                                Revision srcPegRevision,\n                                boolean discoverChangedPaths, int depth,\n                                String[] revprops,\n                                final LogMessageCallback callback)\n        throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            public void singleMessage(\n                    org.apache.subversion.javahl.ChangePath[] aChangedPaths,\n                    long revision, Map revprops, boolean hasChildren)\n            {\n                ChangePath[] changedPaths;\n\n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.length];\n\n                    for (int i = 0; i < aChangedPaths.length; i++)\n                    {\n                        changedPaths[i] = new ChangePath(aChangedPaths[i]);\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                callback.singleMessage(changedPaths, revision, revprops,\n                                       hasChildren);\n            }\n        }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":1338,"status":"M"}],"commitId":"4f92f855d5099bdf94a151ba0007a7d32e7a55e6","commitMessage":"@@@JavaHL: Update a callback interface to return a Set in place of an array.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/BasicTests.java:\n  Update test implemetations to expect the new API.\n\n* native/LogMessageCallback.cpp\n  (singleMessage): Return a set of ChangePaths.  in place of the array.\n\n* src/org/tigris/subversion/javahl/ChangePath.java:\n  Make this class Comparable.  for backward compat.\n\n* src/org/tigris/subversion/javahl/SVNClient.java\n  (logMessages.  getMergeinfoLog): Update compat wrappers for the new API.\n\n* src/org/apache/subversion/javahl/LogMessage.java\n  (LogMessage): Update constructor to take the new type.\n  (changedPaths): Use the Set type.\n  (getChangedPaths): Return the new type.\n\n* src/org/apache/subversion/javahl/callback/LogMessageCallback.java\n  (singleMessage): Update the interface to use a Set of change paths.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@918579 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-03-04 01:11:22","modifiedFileCount":"5","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2011-01-04 00:36:51","codes":[{"authorDate":"2011-01-04 00:36:51","commitOrder":6,"curCode":"    public void logMessages(String path, Revision pegRevision,\n                            RevisionRange[] revisionRanges,\n                            boolean stopOnCopy, boolean discoverPath,\n                            boolean includeMergedRevisions, String[] revProps,\n                            long limit, LogMessageCallback callback)\n            throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            public aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    Set<org.apache.subversion.javahl.types.ChangePath> aChangedPaths,\n                    long revision, Map<String, byte[]> revprops,\n                    boolean hasChildren)\n            {\n                Map<String, String> oldRevprops =\n                                                new HashMap<String, String>();\n                ChangePath[] changedPaths;\n\n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.size()];\n\n                    int i = 0;\n                    for (org.apache.subversion.javahl.types.ChangePath cp\n                                                            : aChangedPaths)\n                    {\n                        changedPaths[i] = new ChangePath(cp);\n                        i++;\n                    }\n                    Arrays.sort(changedPaths);\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                for (String key : revprops.keySet())\n                {\n                    oldRevprops.put(key, new String(revprops.get(key)));\n                }\n\n                callback.singleMessage(changedPaths, revision, oldRevprops,\n                                       hasChildren);\n            }\n        }\n","date":"2011-01-04 00:36:51","endLine":566,"groupId":"12109","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"logMessages","params":"(Stringpath@RevisionpegRevision@RevisionRange[]revisionRanges@booleanstopOnCopy@booleandiscoverPath@booleanincludeMergedRevisions@String[]revProps@longlimit@LogMessageCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/b2/043b2570879d234e7b368f29113def40c101ca.src","preCode":"    public void logMessages(String path, Revision pegRevision,\n                            RevisionRange[] revisionRanges,\n                            boolean stopOnCopy, boolean discoverPath,\n                            boolean includeMergedRevisions, String[] revProps,\n                            long limit, LogMessageCallback callback)\n            throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            private LogMessageCallback callback;\n\n            public aLogMessageCallback(LogMessageCallback callback)\n            {\n                this.callback = callback;\n            }\n\n            public void singleMessage(\n                    Set<org.apache.subversion.javahl.ChangePath> aChangedPaths,\n                    long revision, Map<String, byte[]> revprops,\n                    boolean hasChildren)\n            {\n                Map<String, String> oldRevprops =\n                                                new HashMap<String, String>();\n                ChangePath[] changedPaths;\n\n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.size()];\n\n                    int i = 0;\n                    for (org.apache.subversion.javahl.ChangePath cp\n                                                            : aChangedPaths)\n                    {\n                        changedPaths[i] = new ChangePath(cp);\n                        i++;\n                    }\n                    Arrays.sort(changedPaths);\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                for (String key : revprops.keySet())\n                {\n                    oldRevprops.put(key, new String(revprops.get(key)));\n                }\n\n                callback.singleMessage(changedPaths, revision, oldRevprops,\n                                       hasChildren);\n            }\n        }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":514,"status":"M"},{"authorDate":"2011-01-04 00:36:51","commitOrder":6,"curCode":"    public void getMergeinfoLog(int kind, String pathOrUrl,\n                                Revision pegRevision, String mergeSourceUrl,\n                                Revision srcPegRevision,\n                                boolean discoverChangedPaths, int depth,\n                                String[] revprops,\n                                final LogMessageCallback callback)\n        throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            public void singleMessage(\n                    Set<org.apache.subversion.javahl.types.ChangePath> aChangedPaths,\n                    long revision, Map<String, byte[]> revprops,\n                    boolean hasChildren)\n            {\n                ChangePath[] changedPaths;\n\n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.size()];\n\n                    int i = 0;\n                    for (org.apache.subversion.javahl.types.ChangePath cp\n                                                             : aChangedPaths)\n                    {\n                        changedPaths[i] = new ChangePath(cp);\n                        i++;\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                callback.singleMessage(changedPaths, revision, revprops,\n                                       hasChildren);\n            }\n        }\n","date":"2011-01-04 00:36:51","endLine":1487,"groupId":"12109","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getMergeinfoLog","params":"(intkind@StringpathOrUrl@RevisionpegRevision@StringmergeSourceUrl@RevisionsrcPegRevision@booleandiscoverChangedPaths@intdepth@String[]revprops@finalLogMessageCallbackcallback)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/b2/043b2570879d234e7b368f29113def40c101ca.src","preCode":"    public void getMergeinfoLog(int kind, String pathOrUrl,\n                                Revision pegRevision, String mergeSourceUrl,\n                                Revision srcPegRevision,\n                                boolean discoverChangedPaths, int depth,\n                                String[] revprops,\n                                final LogMessageCallback callback)\n        throws ClientException\n    {\n        class aLogMessageCallback\n            implements org.apache.subversion.javahl.callback.LogMessageCallback\n        {\n            public void singleMessage(\n                    Set<org.apache.subversion.javahl.ChangePath> aChangedPaths,\n                    long revision, Map<String, byte[]> revprops,\n                    boolean hasChildren)\n            {\n                ChangePath[] changedPaths;\n\n                if (aChangedPaths != null)\n                {\n                    changedPaths = new ChangePath[aChangedPaths.size()];\n\n                    int i = 0;\n                    for (org.apache.subversion.javahl.ChangePath cp\n                                                             : aChangedPaths)\n                    {\n                        changedPaths[i] = new ChangePath(cp);\n                        i++;\n                    }\n                }\n                else\n                {\n                    changedPaths = null;\n                }\n\n                callback.singleMessage(changedPaths, revision, revprops,\n                                       hasChildren);\n            }\n        }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":1449,"status":"M"}],"commitId":"9577ed3e8975b54e98001d91913db452eb7a836c","commitMessage":"@@@JavaHL: Move several classes to the types package.\n\nThis will break JavaHL for a bit.  while I patch up the C++-side of things.\n\n[ in subversion/bindings/javahl/ ]\n\n* tests/org/apache/subversion/javahl/WC.java. \n  src/org/apache/subversion/javahl/ClientNotifyInformation.java. \n  src/org/apache/subversion/javahl/CopySource.java. \n  src/org/apache/subversion/javahl/CommitInfo.java. \n  src/org/apache/subversion/javahl/RevisionRange.java. \n  src/org/apache/subversion/javahl/callback/StatusCallback.java. \n  src/org/apache/subversion/javahl/callback/LogMessageCallback.java. \n  src/org/apache/subversion/javahl/callback/ListCallback.java. \n  src/org/apache/subversion/javahl/ConflictDescriptor.java:\n  Update imports and doc references.\n\n* src/org/apache/subversion/javahl/ConflictVersion.java. \n  src/org/apache/subversion/javahl/LogDate.java. \n  src/org/apache/subversion/javahl/DirEntry.java. \n  src/org/apache/subversion/javahl/ChangePath.java. \n  src/org/apache/subversion/javahl/Status.java. \n  src/org/apache/subversion/javahl/Revision.java. \n  src/org/apache/subversion/javahl/Lock.java:\n  Moved to src/org/apache/subversion/javahl/types/.\n\n* src/org/tigris/subversion/javahl/ConflictVersion.java. \n  src/org/tigris/subversion/javahl/SVNClient.java. \n  src/org/tigris/subversion/javahl/SVNAdmin.java. \n  src/org/tigris/subversion/javahl/Revision.java. \n  src/org/tigris/subversion/javahl/Lock.java. \n  src/org/tigris/subversion/javahl/DirEntry.java. \n  src/org/tigris/subversion/javahl/Status.java. \n  src/org/tigris/subversion/javahl/ChangePath.java:\n  Update references to implementation classes (from the wrappers).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@1054680 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-01-04 00:36:51","modifiedFileCount":"17","status":"M","submitter":"Hyrum Kurt Wright"}]
