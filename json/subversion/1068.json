[{"authorTime":"2015-06-30 01:48:10","codes":[{"authorDate":"2015-06-30 01:48:10","commitOrder":1,"curCode":"    public void testVerifyBrokenRepo() throws Throwable\n    {\n        OneTest thisTest = new OneTest(false);\n\n        if (!trytobreakrepo(thisTest)) {\n            \r\n            System.err.print(\"Cannot break repository for verify test.\");\n            return;\n        }\n\n        VerifyCallback cb = new VerifyCallback();\n        cb.keepGoing = false;\n\n        try {\n            admin.verify(thisTest.getRepository(),\n                         Revision.getInstance(0),\n                         Revision.HEAD,\n                         false, false, null, cb);\n        }\n        catch(ClientException ex) {\n            assertEquals(cb.mderr, 1);\n            assertEquals(cb.reverr, 0);\n            return;\n        }\n\n        assert(\"Verify did not catch repository corruption.\" == \"\");\n    }\n","date":"2015-06-30 01:48:10","endLine":175,"groupId":"520","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testVerifyBrokenRepo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/04/f4e5095d99b471e952c27787f23ea4b003489f.src","preCode":"    public void testVerifyBrokenRepo() throws Throwable\n    {\n        OneTest thisTest = new OneTest(false);\n\n        if (!trytobreakrepo(thisTest)) {\n            \r\n            System.err.print(\"Cannot break repository for verify test.\");\n            return;\n        }\n\n        VerifyCallback cb = new VerifyCallback();\n        cb.keepGoing = false;\n\n        try {\n            admin.verify(thisTest.getRepository(),\n                         Revision.getInstance(0),\n                         Revision.HEAD,\n                         false, false, null, cb);\n        }\n        catch(ClientException ex) {\n            assertEquals(cb.mderr, 1);\n            assertEquals(cb.reverr, 0);\n            return;\n        }\n\n        assert(\"Verify did not catch repository corruption.\" == \"\");\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNReposTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"},{"authorDate":"2015-06-30 01:48:10","commitOrder":1,"curCode":"    public void testVerifyBrokenRepo_KeepGoing() throws Throwable\n    {\n        OneTest thisTest = new OneTest(false);\n\n        if (!trytobreakrepo(thisTest)) {\n            \r\n            System.err.print(\"Cannot break repository for verify test.\");\n            return;\n        }\n\n        VerifyCallback cb = new VerifyCallback();\n        cb.keepGoing = true;\n\n        admin.verify(thisTest.getRepository(),\n                     Revision.getInstance(0),\n                     Revision.HEAD,\n                     false, false, null, cb);\n\n        assertEquals(cb.mderr, 1);\n        assertEquals(cb.reverr, 1);\n    }\n","date":"2015-06-30 01:48:10","endLine":197,"groupId":"522","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testVerifyBrokenRepo_KeepGoing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/04/f4e5095d99b471e952c27787f23ea4b003489f.src","preCode":"    public void testVerifyBrokenRepo_KeepGoing() throws Throwable\n    {\n        OneTest thisTest = new OneTest(false);\n\n        if (!trytobreakrepo(thisTest)) {\n            \r\n            System.err.print(\"Cannot break repository for verify test.\");\n            return;\n        }\n\n        VerifyCallback cb = new VerifyCallback();\n        cb.keepGoing = true;\n\n        admin.verify(thisTest.getRepository(),\n                     Revision.getInstance(0),\n                     Revision.HEAD,\n                     false, false, null, cb);\n\n        assertEquals(cb.mderr, 1);\n        assertEquals(cb.reverr, 1);\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNReposTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"B"}],"commitId":"9c13e07ebcecfe9053d54ac0ad1d41a6a4127981","commitMessage":"@@@Follow up to r1687769: Implement semantics equivalent to the new\nsvn_repos_verify_fs3 in JavaHL.\n\n[in subversion/bindings/javahl]\n\n* src/org/apache/subversion/javahl/callback/ReposVerifyCallback.java\n  (ReposVerifyCallback): New callback interface.\n* src/org/apache/subversion/javahl/ISVNRepos.java\n  (ISVNRepos.verify): Add the verification callback and update the\n   documentation of both versions of this method.\n* src/org/apache/subversion/javahl/SVNRepos.java\n  (ISVNRepos.verify): Update native method signature and wrapper\n   method implementation.\n* src/org/apache/subversion/javahl/ReposNotifyInformation.java\n  (ReposNotifyInformation): Update serial version UID after 1.9 API change.\n\n\n* native/ReposVerifyCallback.h. \n  native/ReposVerifyCallback.cpp: New files.\n\n* native/JNIUtil.h\n  (JNIUtil::createClientException): New.\n  (JNIUtil::wrappedCreateClientException): Renamed from wrappedHandleSVNError\n   and changed the the return type.\n\n* native/JNIUtil.cpp\n  (JNIUtil::wrappedCreateClientException): Return the created exception\n   instead of throwing it.\n  (JNIUtil::createClientException): Implement.\n  (JNIUtil::handleSVNError): Reimplement to call createClientException.\n\n* native/SVNRepos.h: Include ReposVerifyCallback.h.\n  (SVNRepos::Verify): Add the repository verification callback.\n* native/SVNRepos.cpp: Do not include ReposNotifyCallback.h.\n  (SVNRepos::Verify): Use the repository verification callback.\n* native/org_apache_subversion_javahl_SVNRepos.cpp\n  (Java_org_apache_subversion_javahl_SVNRepos_verify): Add the\n   repository verification callback and update the implementation.\n\n* tests/org/apache/subversion/javahl/SVNReposTests.java\n  (SVNReposTests.testVerify): Tweak repository creation.\n  (SVNReposTests.VerifyCallback.  SVNReposTests.trytobreakrepo): New helpers.\n  (SVNReposTests.testVerifyBrokenRepo. \n   SVNReposTests.testVerifyBrokenRepo_KeepGoing): New test cases.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@1688273 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-30 01:48:10","modifiedFileCount":"4","status":"B","submitter":"Branko ?ibej"},{"authorTime":"2015-06-30 16:26:59","codes":[{"authorDate":"2015-06-30 16:26:59","commitOrder":2,"curCode":"    public void testVerifyBrokenRepo() throws Throwable\n    {\n        OneTest thisTest = new OneTest(false, true);\n\n        if (!tryToBreakRepo(thisTest)) {\n            \r\n            System.err.print(\"Cannot break repository for verify test.\");\n            return;\n        }\n\n        VerifyCallback cb = new VerifyCallback();\n        cb.keepGoing = false;\n\n        try {\n            admin.verify(thisTest.getRepository(),\n                         Revision.getInstance(0),\n                         Revision.HEAD,\n                         false, false, null, cb);\n        }\n        catch(ClientException ex) {\n            assertEquals(cb.mderr, 1);\n            assertEquals(cb.reverr, 0);\n            return;\n        }\n\n        assert(\"Verify did not catch repository corruption.\" == \"\");\n    }\n","date":"2015-06-30 16:26:59","endLine":179,"groupId":"1068","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testVerifyBrokenRepo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/94/68760dd78161a54df798b702d2becb97684f3a.src","preCode":"    public void testVerifyBrokenRepo() throws Throwable\n    {\n        OneTest thisTest = new OneTest(false);\n\n        if (!trytobreakrepo(thisTest)) {\n            \r\n            System.err.print(\"Cannot break repository for verify test.\");\n            return;\n        }\n\n        VerifyCallback cb = new VerifyCallback();\n        cb.keepGoing = false;\n\n        try {\n            admin.verify(thisTest.getRepository(),\n                         Revision.getInstance(0),\n                         Revision.HEAD,\n                         false, false, null, cb);\n        }\n        catch(ClientException ex) {\n            assertEquals(cb.mderr, 1);\n            assertEquals(cb.reverr, 0);\n            return;\n        }\n\n        assert(\"Verify did not catch repository corruption.\" == \"\");\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNReposTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2015-06-30 16:26:59","commitOrder":2,"curCode":"    public void testVerifyBrokenRepo_KeepGoing() throws Throwable\n    {\n        OneTest thisTest = new OneTest(false, true);\n\n        if (!tryToBreakRepo(thisTest)) {\n            \r\n            System.err.print(\"Cannot break repository for verify test.\");\n            return;\n        }\n\n        VerifyCallback cb = new VerifyCallback();\n        cb.keepGoing = true;\n\n        admin.verify(thisTest.getRepository(),\n                     Revision.getInstance(0),\n                     Revision.HEAD,\n                     false, false, null, cb);\n\n        assertEquals(cb.mderr, 1);\n        assertEquals(cb.reverr, 1);\n    }\n","date":"2015-06-30 16:26:59","endLine":201,"groupId":"1068","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testVerifyBrokenRepo_KeepGoing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/94/68760dd78161a54df798b702d2becb97684f3a.src","preCode":"    public void testVerifyBrokenRepo_KeepGoing() throws Throwable\n    {\n        OneTest thisTest = new OneTest(false);\n\n        if (!trytobreakrepo(thisTest)) {\n            \r\n            System.err.print(\"Cannot break repository for verify test.\");\n            return;\n        }\n\n        VerifyCallback cb = new VerifyCallback();\n        cb.keepGoing = true;\n\n        admin.verify(thisTest.getRepository(),\n                     Revision.getInstance(0),\n                     Revision.HEAD,\n                     false, false, null, cb);\n\n        assertEquals(cb.mderr, 1);\n        assertEquals(cb.reverr, 1);\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNReposTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"7cea9a6ff2165ac58c89b731b022b5e36daf7cc8","commitMessage":"@@@Follow up to r1688273:\nMinor spelling and documentation fixes.  no functional change.\n\n[in subversion/bindings/javahl]\n\n* src/org/apache/subversion/javahl/callback/ReposVerifyCallback.java\n  (ReposVerifyCallback.onVerifyError): Fix typo in docstring.\n\n* native/ReposVerifyCallback.h\n  (ReposVerifyCallback::m_jverify_cb): Renamed from m_verify_cb.\n  (ReposVerifyCallback::ReposVerifyCallback): Add docstring and rename parameter.\n  (ReposVerifyCallback::callback): Fix docstring.\n* native/ReposVerifyCallback.cpp\n  (ReposVerifyCallback::ReposVerifyCallback): Remove docstring. Rename variables.\n  (ReposVerifyCallback::onVerifyError): Rename variables.\n\n* tests/org/apache/subversion/javahl/SVNReposTests.java\n  (SVNReposTests.VerifyCallback.onVerifyError): Add braces to compound conditional.\n  (SVNReposTests.tryToBreakRepo): Renamed from trytobreakrepo. Update callers.\n  (SVNReposTests.testVerifyBrokenRepo. \n   SVNReposTests.testVerifyBrokenRepo_KeepGoing): Make the test setup more explicit.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@1688395 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-30 16:26:59","modifiedFileCount":"2","status":"M","submitter":"Branko ?ibej"}]
