[{"authorTime":"2008-01-23 00:12:21","codes":[{"authorDate":"2010-01-30 10:06:08","commitOrder":3,"curCode":"    private File appendText(OneTest thisTest, String path, String toAppend,\n                            int rev)\n        throws FileNotFoundException\n    {\n        File f = new File(thisTest.getWorkingCopy(), path);\n        PrintWriter writer = new PrintWriter(new FileOutputStream(f, true));\n        writer.print(toAppend);\n        writer.close();\n        if (rev > 0)\n        {\n            WC wc = thisTest.getWc();\n            wc.setItemWorkingCopyRevision(path, rev);\n            wc.setItemContent(path, wc.getItemContent(path) + toAppend);\n        }\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(), path,\n                              NodeKind.file, CommitItemStateFlags.TextMods);\n        return f;\n    }\n","date":"2010-01-30 10:06:08","endLine":2404,"groupId":"496","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"appendText","params":"(OneTestthisTest@Stringpath@StringtoAppend@intrev)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/7b/85b406f167dae59b5a39f282a07a7e60ca4c97.src","preCode":"    private File appendText(OneTest thisTest, String path, String toAppend,\n                            int rev)\n        throws FileNotFoundException\n    {\n        File f = new File(thisTest.getWorkingCopy(), path);\n        PrintWriter writer = new PrintWriter(new FileOutputStream(f, true));\n        writer.print(toAppend);\n        writer.close();\n        if (rev > 0)\n        {\n            WC wc = thisTest.getWc();\n            wc.setItemWorkingCopyRevision(path, rev);\n            wc.setItemContent(path, wc.getItemContent(path) + toAppend);\n        }\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(), path,\n                              NodeKind.file, CommitItemStateFlags.TextMods);\n        return f;\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2387,"status":"B"},{"authorDate":"2008-01-23 00:12:21","commitOrder":3,"curCode":"    private File appendText(OneTest thisTest, String path, String toAppend,\n                            int rev)\n        throws FileNotFoundException\n    {\n        File f = new File(thisTest.getWorkingCopy(), path);\n        PrintWriter writer = new PrintWriter(new FileOutputStream(f, true));\n        writer.print(toAppend);\n        writer.close();\n        if (rev > 0)\n        {\n            WC wc = thisTest.getWc();\n            wc.setItemWorkingCopyRevision(path, rev);\n            wc.setItemContent(path, wc.getItemContent(path) + toAppend);\n        }\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(), path,\n                              NodeKind.file, CommitItemStateFlags.TextMods);\n        return f;\n    }\n","date":"2008-01-23 00:12:21","endLine":2175,"groupId":"496","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"appendText","params":"(OneTestthisTest@Stringpath@StringtoAppend@intrev)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/1f/6a93c635af1cc05332bc0bf597f3400c857be5.src","preCode":"    private File appendText(OneTest thisTest, String path, String toAppend,\n                            int rev)\n        throws FileNotFoundException\n    {\n        File f = new File(thisTest.getWorkingCopy(), path);\n        PrintWriter writer = new PrintWriter(new FileOutputStream(f, true));\n        writer.print(toAppend);\n        writer.close();\n        if (rev > 0)\n        {\n            WC wc = thisTest.getWc();\n            wc.setItemWorkingCopyRevision(path, rev);\n            wc.setItemContent(path, wc.getItemContent(path) + toAppend);\n        }\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(), path,\n                              NodeKind.file, CommitItemStateFlags.TextMods);\n        return f;\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2158,"status":"NB"}],"commitId":"6928e23ce539756dfb45f2763d31147ec1abb736","commitMessage":"@@@JavaHL: First attempt to port the JavaHL tests to the new org.apache.subversion\npackage.  The tests should now compile with 'make javahl-compat-tests'.  but\nit is doubtful they will run and/or pass.\n\n* Makefile.in:\n  Add check-javahl-compat target.\n\n* build.conf\n  (javahl-compat-tests): New.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/SVNAdminTests.java. \n  tests/org/apache/subversion/javahl/BasicTests.java. \n  tests/org/apache/subversion/javahl/RunTests.java. \n  tests/org/apache/subversion/javahl/SVNTests.java. \n  tests/org/apache/subversion/javahl/WC.java. \n  src/org/apache/subversion/javahl/NotifyAction.java. \n  src/org/apache/subversion/javahl/IInput.java. \n  src/org/apache/subversion/javahl/LogDate.java. \n  src/org/apache/subversion/javahl/BlameCallbackImpl.java. \n  src/org/apache/subversion/javahl/LogMessage.java. \n  src/org/apache/subversion/javahl/ScheduleKind.java. \n  src/org/apache/subversion/javahl/IOutput.java. \n  src/org/apache/subversion/javahl/SVNAdmin.java. \n  src/org/apache/subversion/javahl/MergeinfoLogKind.java. \n  src/org/apache/subversion/javahl/Path.java:\n  New.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@904709 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-01-30 10:06:08","modifiedFileCount":"0","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2008-01-23 00:12:21","codes":[{"authorDate":"2010-09-03 00:34:58","commitOrder":4,"curCode":"    private File appendText(OneTest thisTest, String path, String toAppend,\n                            int rev)\n        throws FileNotFoundException\n    {\n        File f = new File(thisTest.getWorkingCopy(), path);\n        PrintWriter writer = new PrintWriter(new FileOutputStream(f, true));\n        writer.print(toAppend);\n        writer.close();\n        if (rev > 0)\n        {\n            WC wc = thisTest.getWc();\n            wc.setItemWorkingCopyRevision(path, rev);\n            wc.setItemContent(path, wc.getItemContent(path) + toAppend);\n        }\n        addExpectedCommitItem(thisTest.getWCPath(),\n                             thisTest.getUrl().toString(), path,\n                              NodeKind.file, CommitItemStateFlags.TextMods);\n        return f;\n    }\n","date":"2010-09-03 00:34:58","endLine":2281,"groupId":"1043","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"appendText","params":"(OneTestthisTest@Stringpath@StringtoAppend@intrev)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/21/256301f178cdca9dae962d0fb360f896f60b82.src","preCode":"    private File appendText(OneTest thisTest, String path, String toAppend,\n                            int rev)\n        throws FileNotFoundException\n    {\n        File f = new File(thisTest.getWorkingCopy(), path);\n        PrintWriter writer = new PrintWriter(new FileOutputStream(f, true));\n        writer.print(toAppend);\n        writer.close();\n        if (rev > 0)\n        {\n            WC wc = thisTest.getWc();\n            wc.setItemWorkingCopyRevision(path, rev);\n            wc.setItemContent(path, wc.getItemContent(path) + toAppend);\n        }\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(), path,\n                              NodeKind.file, CommitItemStateFlags.TextMods);\n        return f;\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2263,"status":"M"},{"authorDate":"2008-01-23 00:12:21","commitOrder":4,"curCode":"    private File appendText(OneTest thisTest, String path, String toAppend,\n                            int rev)\n        throws FileNotFoundException\n    {\n        File f = new File(thisTest.getWorkingCopy(), path);\n        PrintWriter writer = new PrintWriter(new FileOutputStream(f, true));\n        writer.print(toAppend);\n        writer.close();\n        if (rev > 0)\n        {\n            WC wc = thisTest.getWc();\n            wc.setItemWorkingCopyRevision(path, rev);\n            wc.setItemContent(path, wc.getItemContent(path) + toAppend);\n        }\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(), path,\n                              NodeKind.file, CommitItemStateFlags.TextMods);\n        return f;\n    }\n","date":"2008-01-23 00:12:21","endLine":2175,"groupId":"1043","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"appendText","params":"(OneTestthisTest@Stringpath@StringtoAppend@intrev)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/1f/6a93c635af1cc05332bc0bf597f3400c857be5.src","preCode":"    private File appendText(OneTest thisTest, String path, String toAppend,\n                            int rev)\n        throws FileNotFoundException\n    {\n        File f = new File(thisTest.getWorkingCopy(), path);\n        PrintWriter writer = new PrintWriter(new FileOutputStream(f, true));\n        writer.print(toAppend);\n        writer.close();\n        if (rev > 0)\n        {\n            WC wc = thisTest.getWc();\n            wc.setItemWorkingCopyRevision(path, rev);\n            wc.setItemContent(path, wc.getItemContent(path) + toAppend);\n        }\n        addExpectedCommitItem(thisTest.getWCPath(), thisTest.getUrl(), path,\n                              NodeKind.file, CommitItemStateFlags.TextMods);\n        return f;\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2158,"status":"N"}],"commitId":"502fbeac018384945b585dff779a333a1c5900a9","commitMessage":"@@@JavaHL: Use the java.net.URI class internally in the tests.  There are a few\nplaces we can / should use it in the public API as a more appropriate type\nthan a simple String.  but testing it out on the tests first is initialy safer.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/SVNAdminTests.java:\n  Update API calls to de-wrap the URI.\n\n* tests/org/apache/subversion/javahl/BasicTests.java:\n  Same.\n\n* tests/org/apache/subversion/javahl/SVNTests.java\n  (OneTest.makeReposUrl): Return a URI.\n  (OneTest.url): Change from String to URI.\n  (OneTest.getUrl): Return a URI.\n  (OneTest.createInitialWorkingCopy): Use the URI type.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@992010 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-09-03 00:34:58","modifiedFileCount":"3","status":"M","submitter":"Hyrum Kurt Wright"}]
