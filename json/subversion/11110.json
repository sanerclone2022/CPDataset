[{"authorTime":"2010-02-09 12:36:52","codes":[{"authorDate":"2010-02-09 12:36:52","commitOrder":1,"curCode":"    public void diffSummarize(String target1, Revision revision1,\n                              String target2, Revision revision2,\n                              int depth, String[] changelists,\n                              boolean ignoreAncestry,\n                              DiffSummaryReceiver receiver)\n            throws ClientException\n    {\n        try\n        {\n            MyDiffSummaryReceiver aReceiver =\n                                        new MyDiffSummaryReceiver(receiver);\n            aSVNClient.diffSummarize(target1,\n                            revision1 == null ? null : revision1.toApache(),\n                            target2,\n                            revision2 == null ? null : revision2.toApache(),\n                            depth, changelists, ignoreAncestry, aReceiver);\n        }\n        catch (org.apache.subversion.javahl.ClientException ex)\n        {\n            throw new ClientException(ex);\n        }\n    }\n","date":"2010-02-09 12:36:52","endLine":1535,"groupId":"261","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"diffSummarize","params":"(Stringtarget1@Revisionrevision1@Stringtarget2@Revisionrevision2@intdepth@String[]changelists@booleanignoreAncestry@DiffSummaryReceiverreceiver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/6e/6f6e4632192851becdc77f978b88c5433c5ede.src","preCode":"    public void diffSummarize(String target1, Revision revision1,\n                              String target2, Revision revision2,\n                              int depth, String[] changelists,\n                              boolean ignoreAncestry,\n                              DiffSummaryReceiver receiver)\n            throws ClientException\n    {\n        try\n        {\n            MyDiffSummaryReceiver aReceiver =\n                                        new MyDiffSummaryReceiver(receiver);\n            aSVNClient.diffSummarize(target1,\n                            revision1 == null ? null : revision1.toApache(),\n                            target2,\n                            revision2 == null ? null : revision2.toApache(),\n                            depth, changelists, ignoreAncestry, aReceiver);\n        }\n        catch (org.apache.subversion.javahl.ClientException ex)\n        {\n            throw new ClientException(ex);\n        }\n    }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":1514,"status":"B"},{"authorDate":"2010-02-09 12:36:52","commitOrder":1,"curCode":"    public void diffSummarize(String target, Revision pegRevision,\n                              Revision startRevision, Revision endRevision,\n                              int depth, String[] changelists,\n                              boolean ignoreAncestry,\n                              DiffSummaryReceiver receiver)\n            throws ClientException\n    {\n        try\n        {\n            MyDiffSummaryReceiver aReceiver =\n                                        new MyDiffSummaryReceiver(receiver);\n            aSVNClient.diffSummarize(target,\n                       pegRevision == null ? null : pegRevision.toApache(),\n                       startRevision == null ? null : startRevision.toApache(),\n                       endRevision == null ? null : endRevision.toApache(),\n                       depth, changelists, ignoreAncestry, aReceiver);\n        }\n        catch (org.apache.subversion.javahl.ClientException ex)\n        {\n            throw new ClientException(ex);\n        }\n    }\n","date":"2010-02-09 12:36:52","endLine":1561,"groupId":"462","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"diffSummarize","params":"(Stringtarget@RevisionpegRevision@RevisionstartRevision@RevisionendRevision@intdepth@String[]changelists@booleanignoreAncestry@DiffSummaryReceiverreceiver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/6e/6f6e4632192851becdc77f978b88c5433c5ede.src","preCode":"    public void diffSummarize(String target, Revision pegRevision,\n                              Revision startRevision, Revision endRevision,\n                              int depth, String[] changelists,\n                              boolean ignoreAncestry,\n                              DiffSummaryReceiver receiver)\n            throws ClientException\n    {\n        try\n        {\n            MyDiffSummaryReceiver aReceiver =\n                                        new MyDiffSummaryReceiver(receiver);\n            aSVNClient.diffSummarize(target,\n                       pegRevision == null ? null : pegRevision.toApache(),\n                       startRevision == null ? null : startRevision.toApache(),\n                       endRevision == null ? null : endRevision.toApache(),\n                       depth, changelists, ignoreAncestry, aReceiver);\n        }\n        catch (org.apache.subversion.javahl.ClientException ex)\n        {\n            throw new ClientException(ex);\n        }\n    }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":1540,"status":"B"}],"commitId":"51cdb392744380ac5b1617573c9e1d759b7b3d7f","commitMessage":"@@@JavaHL: Migrate the JavaHL client class to be a wrapper around the class\nin the apache package.\n\nNote: 'make check-javahl' still works.  though 'make check-javahl-compat'\ncrashes the jvm.\n\n(And sorry 'bout the power plant of a patch.  There really wasn't a way to\nchop this sucker up :( )\n\n* Makefile.in:\n  (javahl): Depend on the javahl-compat targets.\n \n* build.conf\n  (libsvnjavahl): Depend on the javahl-compat headers.\n\n[ in subversion/bindings/javahl/ ]\n* native/ChangelistCallback.cpp. \n  native/DiffSummaryReceiver.cpp. \n  native/CreateJ.cpp. \n  native/ProplistCallback.cpp. \n  native/LogMessageCallback.cpp. \n  native/StatusCallback.cpp. \n  native/InfoCallback.cpp. \n  native/ListCallback.cpp. \n  native/BlameCallback.cpp. \n  native/ConflictResolverCallback.cpp:\n  Update package location for the new package.\n \n* native/Notify2.h:\n  Move from this...\n\n* native/NotifyCallback.h:\n  ...to this.\n \n* native/org_tigris_subversion_javahl_SVNClient.cpp:\n  Move from this...\n\n* native/org_apache_subversion_javahl_SVNClient.cpp:\n  ...to this.\n\n* native/Notify2.cpp:\n  Move this...\n\n* native/NotifyCallback.cpp:\n  ...to this.\n\n* native/SVNClient.h. \n  native/SVNClient.cpp:\n  Change Notify2 to NotifyCallback.\n\n* native/org_tigris_subversion_javahl_NativeResources.cpp:\n  Remove.\n\n* native/Outputer.cpp. \n  native/Inputer.cpp:\n  Use the new Interface name throughout.\n\n* native/JNIUtil.h\n  (JAVA_PACKAGE): Redefine to use the new package name.\n\n* src/org/tigris/subversion/javahl/ConflictVersion.java. \n  src/org/tigris/subversion/javahl/Version.java. \n  src/org/tigris/subversion/javahl/ChangePath.java. \n  src/org/tigris/subversion/javahl/CommitItem.java. \n  src/org/tigris/subversion/javahl/DirEntry.java. \n  src/org/tigris/subversion/javahl/Info2.java. \n  src/org/tigris/subversion/javahl/Info.java. \n  src/org/tigris/subversion/javahl/PropertyData.java. \n  src/org/tigris/subversion/javahl/CopySource.java. \n  src/org/tigris/subversion/javahl/RevisionRange.java. \n  src/org/tigris/subversion/javahl/ProgressEvent.java. \n  src/org/tigris/subversion/javahl/ConflictDescriptor.java. \n  src/org/tigris/subversion/javahl/DiffSummary.java. \n  src/org/tigris/subversion/javahl/ConflictResult.java. \n  src/org/tigris/subversion/javahl/Status.java. \n  src/org/tigris/subversion/javahl/NotifyInformation.java. \n  src/org/tigris/subversion/javahl/Mergeinfo.java:\n  Add a backward compat constructor.\n\n* src/org/tigris/subversion/javahl/Revision.java\n  (createFromApache): A new backward-compat wrapper.\n \n* src/org/tigris/subversion/javahl/SVNClient.java:\n  The power plant.  Implement this class as a wrapper around a surrogate\n  object from the apache package.\n\n* src/org/tigris/subversion/javahl/SVNAdmin.java\n  (getVersion): Use the NativeResources class from the new package.\n\n* src/org/tigris/subversion/javahl/NativeResources.java:\n  Remove.\n\n* src/org/tigris/subversion/javahl/Lock.java:\n  Only duplicate fields which are non-null.\n\n* src/org/tigris/subversion/javahl/PromptUserPassword.java. \n  src/org/tigris/subversion/javahl/ProplistCallback.java. \n  src/org/tigris/subversion/javahl/ChangelistCallback.java. \n  src/org/tigris/subversion/javahl/Notify.java:\n  Implement this wrapper by extending the apache-packaged class.\n\n* src/org/apache/subversion/javahl/NotifyStatus.java. \n  src/org/apache/subversion/javahl/Info.java. \n  src/org/apache/subversion/javahl/Notify.java:\n  New.  copied from the old package.\n\n* src/org/apache/subversion/javahl/SVNClient.java\n  (getCppAddr): New function.  useful for backward-compat.\n  (finalize): Make public for backward-compat.\n  (getLastPath.  notification.  info): Needed functions for backward compat.\n\n* src/org/apache/subversion/javahl/NativeResources.java:\n  Publicize for backward-compat.\n \n* src/org/apache/subversion/javahl/ClientException.java\n  (fromException): Make public for backward compat.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@907931 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-02-09 12:36:52","modifiedFileCount":"28","status":"B","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-02-27 06:04:58","codes":[{"authorDate":"2010-02-27 06:04:58","commitOrder":2,"curCode":"    public void diffSummarize(String target1, Revision revision1,\n                              String target2, Revision revision2,\n                              int depth, String[] changelists,\n                              boolean ignoreAncestry,\n                              DiffSummaryReceiver receiver)\n            throws ClientException\n    {\n        try\n        {\n            MyDiffSummaryReceiver aReceiver =\n                                        new MyDiffSummaryReceiver(receiver);\n            aSVNClient.diffSummarize(target1,\n                            revision1 == null ? null : revision1.toApache(),\n                            target2,\n                            revision2 == null ? null : revision2.toApache(),\n                            depth,\n                            changelists == null ? null\n                              : Arrays.asList(changelists),\n                            ignoreAncestry, aReceiver);\n        }\n        catch (org.apache.subversion.javahl.ClientException ex)\n        {\n            throw new ClientException(ex);\n        }\n    }\n","date":"2010-02-27 06:04:58","endLine":1636,"groupId":"261","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"diffSummarize","params":"(Stringtarget1@Revisionrevision1@Stringtarget2@Revisionrevision2@intdepth@String[]changelists@booleanignoreAncestry@DiffSummaryReceiverreceiver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/9e/a3dcdde018480a0cc39ef2d416fe9bc23804e0.src","preCode":"    public void diffSummarize(String target1, Revision revision1,\n                              String target2, Revision revision2,\n                              int depth, String[] changelists,\n                              boolean ignoreAncestry,\n                              DiffSummaryReceiver receiver)\n            throws ClientException\n    {\n        try\n        {\n            MyDiffSummaryReceiver aReceiver =\n                                        new MyDiffSummaryReceiver(receiver);\n            aSVNClient.diffSummarize(target1,\n                            revision1 == null ? null : revision1.toApache(),\n                            target2,\n                            revision2 == null ? null : revision2.toApache(),\n                            depth, changelists, ignoreAncestry, aReceiver);\n        }\n        catch (org.apache.subversion.javahl.ClientException ex)\n        {\n            throw new ClientException(ex);\n        }\n    }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":1612,"status":"M"},{"authorDate":"2010-02-27 06:04:58","commitOrder":2,"curCode":"    public void diffSummarize(String target, Revision pegRevision,\n                              Revision startRevision, Revision endRevision,\n                              int depth, String[] changelists,\n                              boolean ignoreAncestry,\n                              DiffSummaryReceiver receiver)\n            throws ClientException\n    {\n        try\n        {\n            MyDiffSummaryReceiver aReceiver =\n                                        new MyDiffSummaryReceiver(receiver);\n            aSVNClient.diffSummarize(target,\n                       pegRevision == null ? null : pegRevision.toApache(),\n                       startRevision == null ? null : startRevision.toApache(),\n                       endRevision == null ? null : endRevision.toApache(),\n                       depth, changelists == null ? null\n                            : Arrays.asList(changelists),\n                       ignoreAncestry, aReceiver);\n        }\n        catch (org.apache.subversion.javahl.ClientException ex)\n        {\n            throw new ClientException(ex);\n        }\n    }\n","date":"2010-02-27 06:04:58","endLine":1664,"groupId":"465","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"diffSummarize","params":"(Stringtarget@RevisionpegRevision@RevisionstartRevision@RevisionendRevision@intdepth@String[]changelists@booleanignoreAncestry@DiffSummaryReceiverreceiver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/9e/a3dcdde018480a0cc39ef2d416fe9bc23804e0.src","preCode":"    public void diffSummarize(String target, Revision pegRevision,\n                              Revision startRevision, Revision endRevision,\n                              int depth, String[] changelists,\n                              boolean ignoreAncestry,\n                              DiffSummaryReceiver receiver)\n            throws ClientException\n    {\n        try\n        {\n            MyDiffSummaryReceiver aReceiver =\n                                        new MyDiffSummaryReceiver(receiver);\n            aSVNClient.diffSummarize(target,\n                       pegRevision == null ? null : pegRevision.toApache(),\n                       startRevision == null ? null : startRevision.toApache(),\n                       endRevision == null ? null : endRevision.toApache(),\n                       depth, changelists, ignoreAncestry, aReceiver);\n        }\n        catch (org.apache.subversion.javahl.ClientException ex)\n        {\n            throw new ClientException(ex);\n        }\n    }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":1641,"status":"M"}],"commitId":"5bc76ebab2e2e71215f26a6e82e456cb66ff1953","commitMessage":"@@@JavaHL: Start using more of the Collections framework in our APIs.  In this\nstep.  I replace all the place we take String[] for a changelist list.  and use\na Collection<String> instead.  Update the tests accordingly.\n\nThis *doesn't* push any of these changes down to the C++ layer.  at least\nnot yet.  The infrastructure there is still set up for String[].  so we just\nmake the current native methods private in SVNClient.  and implement the public\nmethods as wrappers.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/BasicTests.java\n  (testBasicChangelist): Use a Collection of changelists.\n  (MyChangelistCallback): Update to hold a generic Collection.\n  (collectProperties.  collectInfos): Take a Collection of Strings.\n\n* src/org/tigris/subversion/javahl/SVNClient.java:\n  Anywhere a changelist array is passed in.  convert it to a list in the wrapper.\n\n* src/org/apache/subversion/javahl/SVNClient.java:\n  Change changelist array arguments to Collection<String>.  To prevent having\n  to rewrite all the native code for this commit.  we just privatize the native\n  functions.  and leave them alone for now (as above).\n\n* src/org/apache/subversion/javahl/ISVNClient.java:\n  Change all changelist array arguments to Collection<String>.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@916834 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-02-27 06:04:58","modifiedFileCount":"4","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-03-17 09:10:11","codes":[{"authorDate":"2010-03-17 09:10:11","commitOrder":3,"curCode":"    public void diffSummarize(String target1, Revision revision1,\n                              String target2, Revision revision2,\n                              int depth, String[] changelists,\n                              boolean ignoreAncestry,\n                              DiffSummaryReceiver receiver)\n            throws ClientException\n    {\n        try\n        {\n            MyDiffSummaryReceiver aReceiver =\n                                        new MyDiffSummaryReceiver(receiver);\n            aSVNClient.diffSummarize(target1,\n                            revision1 == null ? null : revision1.toApache(),\n                            target2,\n                            revision2 == null ? null : revision2.toApache(),\n                            Depth.toADepth(depth),\n                            changelists == null ? null\n                              : Arrays.asList(changelists),\n                            ignoreAncestry, aReceiver);\n        }\n        catch (org.apache.subversion.javahl.ClientException ex)\n        {\n            throw new ClientException(ex);\n        }\n    }\n","date":"2010-03-17 09:10:11","endLine":1587,"groupId":"11110","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"diffSummarize","params":"(Stringtarget1@Revisionrevision1@Stringtarget2@Revisionrevision2@intdepth@String[]changelists@booleanignoreAncestry@DiffSummaryReceiverreceiver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/b0/16959b9f86653070dcc10043e37183cb61734b.src","preCode":"    public void diffSummarize(String target1, Revision revision1,\n                              String target2, Revision revision2,\n                              int depth, String[] changelists,\n                              boolean ignoreAncestry,\n                              DiffSummaryReceiver receiver)\n            throws ClientException\n    {\n        try\n        {\n            MyDiffSummaryReceiver aReceiver =\n                                        new MyDiffSummaryReceiver(receiver);\n            aSVNClient.diffSummarize(target1,\n                            revision1 == null ? null : revision1.toApache(),\n                            target2,\n                            revision2 == null ? null : revision2.toApache(),\n                            depth,\n                            changelists == null ? null\n                              : Arrays.asList(changelists),\n                            ignoreAncestry, aReceiver);\n        }\n        catch (org.apache.subversion.javahl.ClientException ex)\n        {\n            throw new ClientException(ex);\n        }\n    }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":1563,"status":"M"},{"authorDate":"2010-03-17 09:10:11","commitOrder":3,"curCode":"    public void diffSummarize(String target, Revision pegRevision,\n                              Revision startRevision, Revision endRevision,\n                              int depth, String[] changelists,\n                              boolean ignoreAncestry,\n                              DiffSummaryReceiver receiver)\n            throws ClientException\n    {\n        try\n        {\n            MyDiffSummaryReceiver aReceiver =\n                                        new MyDiffSummaryReceiver(receiver);\n            aSVNClient.diffSummarize(target,\n                       pegRevision == null ? null : pegRevision.toApache(),\n                       startRevision == null ? null : startRevision.toApache(),\n                       endRevision == null ? null : endRevision.toApache(),\n                       Depth.toADepth(depth), changelists == null ? null\n                            : Arrays.asList(changelists),\n                       ignoreAncestry, aReceiver);\n        }\n        catch (org.apache.subversion.javahl.ClientException ex)\n        {\n            throw new ClientException(ex);\n        }\n    }\n","date":"2010-03-17 09:10:11","endLine":1615,"groupId":"11110","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"diffSummarize","params":"(Stringtarget@RevisionpegRevision@RevisionstartRevision@RevisionendRevision@intdepth@String[]changelists@booleanignoreAncestry@DiffSummaryReceiverreceiver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/b0/16959b9f86653070dcc10043e37183cb61734b.src","preCode":"    public void diffSummarize(String target, Revision pegRevision,\n                              Revision startRevision, Revision endRevision,\n                              int depth, String[] changelists,\n                              boolean ignoreAncestry,\n                              DiffSummaryReceiver receiver)\n            throws ClientException\n    {\n        try\n        {\n            MyDiffSummaryReceiver aReceiver =\n                                        new MyDiffSummaryReceiver(receiver);\n            aSVNClient.diffSummarize(target,\n                       pegRevision == null ? null : pegRevision.toApache(),\n                       startRevision == null ? null : startRevision.toApache(),\n                       endRevision == null ? null : endRevision.toApache(),\n                       depth, changelists == null ? null\n                            : Arrays.asList(changelists),\n                       ignoreAncestry, aReceiver);\n        }\n        catch (org.apache.subversion.javahl.ClientException ex)\n        {\n            throw new ClientException(ex);\n        }\n    }\n","realPath":"subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":1592,"status":"M"}],"commitId":"da6e695963efeef8a281f92da300360a106f7061","commitMessage":"@@@JavaHL: Make Depth a first-class type.  by declaring it as an enum.\n\nThis leaves a few inefficiencies.  particularly in the EnumMapper.  These will\nbe addressed later.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/BasicTests.java:\n  Use the Depth type instead of an int.\n\n* src/org/apache/subversion/javahl/SVNClient.java:\n  Same.\n\n* src/org/apache/subversion/javahl/ISVNClient.java:\n  Same.\n\n* native/InfoCallback.cpp\n  (createJavaInfo2): Same.\n\n* src/org/apache/subversion/javahl/Info2.java:\n  Same.\n\n* src/org/tigris/subversion/javahl/SVNClient.java:\n  Same.\n\n* native/EnumMapper.h. \n  native/EnumMapper.cpp\n  (mapEnum.  getName.  toDepth): New.\n  (mapDepth): Return the Depth object.  instead of the int.\n\n* native/org_apache_subversion_javahl_SVNClient.cpp:\n  Accept depth objects.  and convert them to the C enum.\n\n* src/org/apache/subversion/javahl/Depth.java\n  Convert the int defines to be part of the enum.  Adjust methods to\n  accept or return a Depth.\n\n* src/org/tigris/subversion/javahl/Depth.java\n  (toADepth.  fromADepth): New.\n\n* src/org/tigris/subversion/javahl/Info2.java\n  (Info2): Wrap the Depth object returned from the apache info object.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@924080 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-03-17 09:10:11","modifiedFileCount":"8","status":"M","submitter":"Hyrum Kurt Wright"}]
