[{"authorTime":"2009-12-03 16:59:09","codes":[{"authorDate":"2010-09-03 00:45:33","commitOrder":3,"curCode":"    public void testLoadRepo()\n        throws SubversionException, IOException\n    {\n        \r\n\r\n\n        \r\n        OneTest thisTest = new OneTest(false,false);\n        \r\n        URI repoUrl = makeReposUrl(thisTest.getRepository());\n        final Info2[] infoHolder = new Info2[1];\n        InfoCallback mycallback = new InfoCallback()\n        {\n            public void singleInfo(Info2 info)\n            {\n                infoHolder[0] = info;\n            }\n        };\n        client.info2(repoUrl.toString(), Revision.HEAD, Revision.HEAD,\n                Depth.immediates, null, mycallback);\n        assertNotNull(\"expect info callback\", infoHolder[0]);\n        assertEquals(\"expect zero revisions in new repository\",\n                0L, infoHolder[0].getLastChangedRev());\n\n        \r\n        String testSrcdir = System.getProperty(\"test.srcdir\",\n                \"subversion/bindings/javahl\");\n        File dump = new File(testSrcdir, \"tests/data/issue2979.dump\");\n        InputStream input = new FileInputStream(dump);\n        admin.load(thisTest.getRepository(),\n                   input, true, true, false, false, null, null);\n        \r\n        infoHolder[0] = null;\n        client.info2(repoUrl.toString(), Revision.HEAD, Revision.HEAD,\n                     Depth.immediates, null, mycallback);\n        assertEquals(\"expect two revisions after load()\",\n                     2L, infoHolder[0].getLastChangedRev());\n        \r\n        \r\n        assertEquals(\"expect 'svn4ant' as author of r2\",\n                     \"svn4ant\", infoHolder[0].getLastChangedAuthor());\n    }\n","date":"2010-09-03 00:45:33","endLine":143,"groupId":"565","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadRepo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/a3/290cdd1305e6303845f66aae0c6910d01d7b02.src","preCode":"    public void testLoadRepo()\n        throws SubversionException, IOException\n    {\n        \r\n\r\n\n        \r\n        OneTest thisTest = new OneTest(false,false);\n        \r\n        URI repoUrl = makeReposUrl(thisTest.getRepository());\n        final Info2[] infoHolder = new Info2[1];\n        InfoCallback mycallback = new InfoCallback()\n        {\n            public void singleInfo(Info2 info)\n            {\n                infoHolder[0] = info;\n            }\n        };\n        client.info2(repoUrl.toString(), Revision.HEAD, Revision.HEAD,\n                Depth.immediates, null, mycallback);\n        assertNotNull(\"expect info callback\", infoHolder[0]);\n        assertEquals(\"expect zero revisions in new repository\",\n                0L, infoHolder[0].getLastChangedRev());\n\n        \r\n        String testSrcdir = System.getProperty(\"test.srcdir\",\n                \"subversion/bindings/javahl\");\n        File dump = new File(testSrcdir, \"tests/data/issue2979.dump\");\n        InputStream input = new FileInputStream(dump);\n        admin.load(thisTest.getRepository(),\n                   input, true, true, false, false, null, null);\n        \r\n        infoHolder[0] = null;\n        client.info2(repoUrl.toString(), Revision.HEAD, Revision.HEAD,\n                     Depth.immediates, null, mycallback);\n        assertEquals(\"expect two revisions after load()\",\n                     2L, infoHolder[0].getLastChangedRev());\n        \r\n        \r\n        assertEquals(\"expect 'svn4ant' as author of r2\",\n                     \"svn4ant\", infoHolder[0].getLastChangedAuthor());\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNReposTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"B"},{"authorDate":"2009-12-03 16:59:09","commitOrder":3,"curCode":"    public void testLoadRepo()\n        throws SubversionException, IOException\n    {\n        \r\n\r\n\n        \r\n        OneTest thisTest = new OneTest(false,false);\n        \r\n        String repoUrl = makeReposUrl(thisTest.getRepository());\n        final Info2[] infoHolder = new Info2[1];\n        InfoCallback mycallback = new InfoCallback()\n        {\n            public void singleInfo(Info2 info)\n            {\n                infoHolder[0] = info;\n            }\n        };\n        client.info2(repoUrl, Revision.HEAD, Revision.HEAD,\n                Depth.immediates, null, mycallback);\n        assertNotNull(\"expect info callback\", infoHolder[0]);\n        assertEquals(\"expect zero revisions in new repository\",\n                0L, infoHolder[0].getLastChangedRev());\n\n        \r\n        String testSrcdir = System.getProperty(\"test.srcdir\",\n                \"subversion/bindings/javahl\");\n        File dump = new File(testSrcdir, \"tests/data/issue2979.dump\");\n        InputInterface input = new FileInputer(dump);\n        OutputInterface loadLog = new IgnoreOutputer();\n        admin.load(thisTest.getRepositoryPath(),\n                   input, loadLog, true, true, null);\n        \r\n        infoHolder[0] = null;\n        client.info2(repoUrl, Revision.HEAD, Revision.HEAD,\n                     Depth.immediates, null, mycallback);\n        assertEquals(\"expect two revisions after load()\",\n                     2L, infoHolder[0].getLastChangedRev());\n        \r\n        \r\n        assertEquals(\"expect 'svn4ant' as author of r2\",\n                     \"svn4ant\", infoHolder[0].getLastChangedAuthor());\n    }\n","date":"2009-12-03 16:59:09","endLine":122,"groupId":"311","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoadRepo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/17/88f666a72ce70e6036c71c846a3cc30b9bf7b3.src","preCode":"    public void testLoadRepo()\n        throws SubversionException, IOException\n    {\n        \r\n\r\n\n        \r\n        OneTest thisTest = new OneTest(false,false);\n        \r\n        String repoUrl = makeReposUrl(thisTest.getRepository());\n        final Info2[] infoHolder = new Info2[1];\n        InfoCallback mycallback = new InfoCallback()\n        {\n            public void singleInfo(Info2 info)\n            {\n                infoHolder[0] = info;\n            }\n        };\n        client.info2(repoUrl, Revision.HEAD, Revision.HEAD,\n                Depth.immediates, null, mycallback);\n        assertNotNull(\"expect info callback\", infoHolder[0]);\n        assertEquals(\"expect zero revisions in new repository\",\n                0L, infoHolder[0].getLastChangedRev());\n\n        \r\n        String testSrcdir = System.getProperty(\"test.srcdir\",\n                \"subversion/bindings/javahl\");\n        File dump = new File(testSrcdir, \"tests/data/issue2979.dump\");\n        InputInterface input = new FileInputer(dump);\n        OutputInterface loadLog = new IgnoreOutputer();\n        admin.load(thisTest.getRepositoryPath(),\n                   input, loadLog, true, true, null);\n        \r\n        infoHolder[0] = null;\n        client.info2(repoUrl, Revision.HEAD, Revision.HEAD,\n                     Depth.immediates, null, mycallback);\n        assertEquals(\"expect two revisions after load()\",\n                     2L, infoHolder[0].getLastChangedRev());\n        \r\n        \r\n        assertEquals(\"expect 'svn4ant' as author of r2\",\n                     \"svn4ant\", infoHolder[0].getLastChangedAuthor());\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/SVNAdminTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"NB"}],"commitId":"5f059b0de69a95320fddacc6346102a94efd197c","commitMessage":"@@@JavaHL: Rename a test class to reflect the name change to the class it is\ntesting.\n\n* subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNAdminTests.java:\n    Rename from this...\n\n* subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNReposTests.java:\n    ...to this.\n\n* subversion/bindings/javahl/tests/org/apache/subversion/javahl/RunTests.java:\n  (suite): Update reference.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@992017 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-09-03 00:45:33","modifiedFileCount":"1","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2009-12-03 16:59:09","codes":[{"authorDate":"2010-11-05 03:10:03","commitOrder":4,"curCode":"    public void testLoadRepo()\n        throws SubversionException, IOException\n    {\n        \r\n\r\n\n        \r\n        OneTest thisTest = new OneTest(false,false);\n        \r\n        URI repoUrl = makeReposUrl(thisTest.getRepository());\n        final Info[] infoHolder = new Info[1];\n        InfoCallback mycallback = new InfoCallback()\n        {\n            public void singleInfo(Info info)\n            {\n                infoHolder[0] = info;\n            }\n        };\n        client.info2(repoUrl.toString(), Revision.HEAD, Revision.HEAD,\n                Depth.immediates, null, mycallback);\n        assertNotNull(\"expect info callback\", infoHolder[0]);\n        assertEquals(\"expect zero revisions in new repository\",\n                0L, infoHolder[0].getLastChangedRev());\n\n        \r\n        String testSrcdir = System.getProperty(\"test.srcdir\",\n                \"subversion/bindings/javahl\");\n        File dump = new File(testSrcdir, \"tests/data/issue2979.dump\");\n        InputStream input = new FileInputStream(dump);\n        admin.load(thisTest.getRepository(),\n                   input, true, true, false, false, null, null);\n        \r\n        infoHolder[0] = null;\n        client.info2(repoUrl.toString(), Revision.HEAD, Revision.HEAD,\n                     Depth.immediates, null, mycallback);\n        assertEquals(\"expect two revisions after load()\",\n                     2L, infoHolder[0].getLastChangedRev());\n        \r\n        \r\n        assertEquals(\"expect 'svn4ant' as author of r2\",\n                     \"svn4ant\", infoHolder[0].getLastChangedAuthor());\n    }\n","date":"2010-11-05 03:10:03","endLine":143,"groupId":"1069","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLoadRepo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/56/388aead7bbac35ed70b70e7290565d8718943f.src","preCode":"    public void testLoadRepo()\n        throws SubversionException, IOException\n    {\n        \r\n\r\n\n        \r\n        OneTest thisTest = new OneTest(false,false);\n        \r\n        URI repoUrl = makeReposUrl(thisTest.getRepository());\n        final Info2[] infoHolder = new Info2[1];\n        InfoCallback mycallback = new InfoCallback()\n        {\n            public void singleInfo(Info2 info)\n            {\n                infoHolder[0] = info;\n            }\n        };\n        client.info2(repoUrl.toString(), Revision.HEAD, Revision.HEAD,\n                Depth.immediates, null, mycallback);\n        assertNotNull(\"expect info callback\", infoHolder[0]);\n        assertEquals(\"expect zero revisions in new repository\",\n                0L, infoHolder[0].getLastChangedRev());\n\n        \r\n        String testSrcdir = System.getProperty(\"test.srcdir\",\n                \"subversion/bindings/javahl\");\n        File dump = new File(testSrcdir, \"tests/data/issue2979.dump\");\n        InputStream input = new FileInputStream(dump);\n        admin.load(thisTest.getRepository(),\n                   input, true, true, false, false, null, null);\n        \r\n        infoHolder[0] = null;\n        client.info2(repoUrl.toString(), Revision.HEAD, Revision.HEAD,\n                     Depth.immediates, null, mycallback);\n        assertEquals(\"expect two revisions after load()\",\n                     2L, infoHolder[0].getLastChangedRev());\n        \r\n        \r\n        assertEquals(\"expect 'svn4ant' as author of r2\",\n                     \"svn4ant\", infoHolder[0].getLastChangedAuthor());\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNReposTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2009-12-03 16:59:09","commitOrder":4,"curCode":"    public void testLoadRepo()\n        throws SubversionException, IOException\n    {\n        \r\n\r\n\n        \r\n        OneTest thisTest = new OneTest(false,false);\n        \r\n        String repoUrl = makeReposUrl(thisTest.getRepository());\n        final Info2[] infoHolder = new Info2[1];\n        InfoCallback mycallback = new InfoCallback()\n        {\n            public void singleInfo(Info2 info)\n            {\n                infoHolder[0] = info;\n            }\n        };\n        client.info2(repoUrl, Revision.HEAD, Revision.HEAD,\n                Depth.immediates, null, mycallback);\n        assertNotNull(\"expect info callback\", infoHolder[0]);\n        assertEquals(\"expect zero revisions in new repository\",\n                0L, infoHolder[0].getLastChangedRev());\n\n        \r\n        String testSrcdir = System.getProperty(\"test.srcdir\",\n                \"subversion/bindings/javahl\");\n        File dump = new File(testSrcdir, \"tests/data/issue2979.dump\");\n        InputInterface input = new FileInputer(dump);\n        OutputInterface loadLog = new IgnoreOutputer();\n        admin.load(thisTest.getRepositoryPath(),\n                   input, loadLog, true, true, null);\n        \r\n        infoHolder[0] = null;\n        client.info2(repoUrl, Revision.HEAD, Revision.HEAD,\n                     Depth.immediates, null, mycallback);\n        assertEquals(\"expect two revisions after load()\",\n                     2L, infoHolder[0].getLastChangedRev());\n        \r\n        \r\n        assertEquals(\"expect 'svn4ant' as author of r2\",\n                     \"svn4ant\", infoHolder[0].getLastChangedAuthor());\n    }\n","date":"2009-12-03 16:59:09","endLine":122,"groupId":"1069","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLoadRepo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/17/88f666a72ce70e6036c71c846a3cc30b9bf7b3.src","preCode":"    public void testLoadRepo()\n        throws SubversionException, IOException\n    {\n        \r\n\r\n\n        \r\n        OneTest thisTest = new OneTest(false,false);\n        \r\n        String repoUrl = makeReposUrl(thisTest.getRepository());\n        final Info2[] infoHolder = new Info2[1];\n        InfoCallback mycallback = new InfoCallback()\n        {\n            public void singleInfo(Info2 info)\n            {\n                infoHolder[0] = info;\n            }\n        };\n        client.info2(repoUrl, Revision.HEAD, Revision.HEAD,\n                Depth.immediates, null, mycallback);\n        assertNotNull(\"expect info callback\", infoHolder[0]);\n        assertEquals(\"expect zero revisions in new repository\",\n                0L, infoHolder[0].getLastChangedRev());\n\n        \r\n        String testSrcdir = System.getProperty(\"test.srcdir\",\n                \"subversion/bindings/javahl\");\n        File dump = new File(testSrcdir, \"tests/data/issue2979.dump\");\n        InputInterface input = new FileInputer(dump);\n        OutputInterface loadLog = new IgnoreOutputer();\n        admin.load(thisTest.getRepositoryPath(),\n                   input, loadLog, true, true, null);\n        \r\n        infoHolder[0] = null;\n        client.info2(repoUrl, Revision.HEAD, Revision.HEAD,\n                     Depth.immediates, null, mycallback);\n        assertEquals(\"expect two revisions after load()\",\n                     2L, infoHolder[0].getLastChangedRev());\n        \r\n        \r\n        assertEquals(\"expect 'svn4ant' as author of r2\",\n                     \"svn4ant\", infoHolder[0].getLastChangedAuthor());\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/SVNAdminTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"}],"commitId":"20d40a4d177a613db3d40964cd0273e118262d5f","commitMessage":"@@@JavaHL: Some gratuitous refactoring: Rename the Info2 class to just Info.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/SVNReposTests.java. \n  tests/org/apache/subversion/javahl/BasicTests.java. \n  src/org/tigris/subversion/javahl/SVNClient.java. \n  src/org/tigris/subversion/javahl/Info2.java. \n  src/org/tigris/subversion/javahl/Info.java. \n  native/CreateJ.cpp. \n  native/InfoCallback.cpp. \n  native/EnumMapper.cpp. \n  native/CreateJ.h. \n  src/org/apache/subversion/javahl/callback/InfoCallback.java:\n    Update references.\n\n* src/org/apache/subversion/javahl/Info2.java:\n  Move from here...\n\n  src/org/apache/subversion/javahl/Info.java:\n  ...to here.  and update class name and refernces.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@1031161 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-11-05 03:10:03","modifiedFileCount":"6","status":"M","submitter":"Hyrum Kurt Wright"}]
