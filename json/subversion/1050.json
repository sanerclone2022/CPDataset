[{"authorTime":"2009-08-08 04:46:48","codes":[{"authorDate":"2010-01-30 10:06:08","commitOrder":7,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\",\n                            Depth.empty, false, false, null, null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-01-30 10:06:08","endLine":3001,"groupId":"259","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/7b/85b406f167dae59b5a39f282a07a7e60ca4c97.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\",\n                            Depth.empty, false, false, null, null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2776,"status":"B"},{"authorDate":"2009-08-08 04:46:48","commitOrder":7,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2009-08-08 04:46:48","endLine":2919,"groupId":"200","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/0b/e46538767e6a00d03b874d13dc083a8908e2a5.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2701,"status":"NB"}],"commitId":"6928e23ce539756dfb45f2763d31147ec1abb736","commitMessage":"@@@JavaHL: First attempt to port the JavaHL tests to the new org.apache.subversion\npackage.  The tests should now compile with 'make javahl-compat-tests'.  but\nit is doubtful they will run and/or pass.\n\n* Makefile.in:\n  Add check-javahl-compat target.\n\n* build.conf\n  (javahl-compat-tests): New.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/SVNAdminTests.java. \n  tests/org/apache/subversion/javahl/BasicTests.java. \n  tests/org/apache/subversion/javahl/RunTests.java. \n  tests/org/apache/subversion/javahl/SVNTests.java. \n  tests/org/apache/subversion/javahl/WC.java. \n  src/org/apache/subversion/javahl/NotifyAction.java. \n  src/org/apache/subversion/javahl/IInput.java. \n  src/org/apache/subversion/javahl/LogDate.java. \n  src/org/apache/subversion/javahl/BlameCallbackImpl.java. \n  src/org/apache/subversion/javahl/LogMessage.java. \n  src/org/apache/subversion/javahl/ScheduleKind.java. \n  src/org/apache/subversion/javahl/IOutput.java. \n  src/org/apache/subversion/javahl/SVNAdmin.java. \n  src/org/apache/subversion/javahl/MergeinfoLogKind.java. \n  src/org/apache/subversion/javahl/Path.java:\n  New.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@904709 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-01-30 10:06:08","modifiedFileCount":"0","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2009-08-08 04:46:48","codes":[{"authorDate":"2010-03-02 04:03:48","commitOrder":8,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\",\n                            Depth.empty, false, false, null, null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-03-02 04:03:48","endLine":3017,"groupId":"365","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/47/734788eb25270974daa3e1c0b7dc7efcd91bb2.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\",\n                            Depth.empty, false, false, null, null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2791,"status":"M"},{"authorDate":"2009-08-08 04:46:48","commitOrder":8,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2009-08-08 04:46:48","endLine":2919,"groupId":"200","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/0b/e46538767e6a00d03b874d13dc083a8908e2a5.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2701,"status":"N"}],"commitId":"5d3891f1932b0b1a17e7a0c7a8aa103b2dcabb99","commitMessage":"@@@JavaHL: For APIs which accept multiple paths.  use a Set of paths.  rather than\nan array.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/BasicTests.java:\n  Update calls to the affected APIs to pass a Set.  rather than an array.\n\n* tests/org/apache/subversion/javahl/SVNTests.java\n  (getWCPathSet.  getWCPathSet.  getUrlSet): New helpers.\n\n* src/org/tigris/subversion/javahl/SVNClient.java\n  (remove.  update.  commit.  mkdir.  addToChangelist.  removeFromChangelist.  lock. \n   unlock): Update wrappers to use Sets.\n\n* src/org/apache/subversion/javahl/SVNClient.java\n  (remove.  update.  commit.  mkdir.  addToChangelist.  removeFromChangelist.  lock. \n   unlock): Update wrappers to use Sets.\n\n* src/org/apache/subversion/javahl/ISVNClient.java\n  (remove.  update.  commit.  mkdir.  addToChangelist.  removeFromChangelist.  lock. \n   unlock): Update the API to accept Sets for APIs which accept multiple\n    paths.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@917687 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-03-02 04:03:48","modifiedFileCount":"5","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2009-08-08 04:46:48","codes":[{"authorDate":"2010-07-19 23:01:09","commitOrder":9,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\",\n                            Depth.empty, false, false, null, null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-07-19 23:01:09","endLine":3010,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/ce/c6e0e9395e5831b2ca1887bfff008c6144d7cd.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\",\n                            Depth.empty, false, false, null, null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2778,"status":"M"},{"authorDate":"2009-08-08 04:46:48","commitOrder":9,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2009-08-08 04:46:48","endLine":2919,"groupId":"200","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/0b/e46538767e6a00d03b874d13dc083a8908e2a5.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2701,"status":"N"}],"commitId":"ecfe37b60768340aeb976d856b9b09c667c0549c","commitMessage":"@@@Update a javahl test to always display a diff header.  even if we just have \nproperty changes. That change of behavior was introduced in r962670.\n\n* subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java\n  (testDiff): Add diff headers to the expected diff output.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@965520 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-07-19 23:01:09","modifiedFileCount":"1","status":"M","submitter":"Daniel N?slund"},{"authorTime":"2010-07-21 20:42:28","codes":[{"authorDate":"2010-07-19 23:01:09","commitOrder":10,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\",\n                            Depth.empty, false, false, null, null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-07-19 23:01:09","endLine":3010,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/ce/c6e0e9395e5831b2ca1887bfff008c6144d7cd.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\",\n                            Depth.empty, false, false, null, null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2778,"status":"N"},{"authorDate":"2010-07-21 20:42:28","commitOrder":10,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-07-21 20:42:28","endLine":2885,"groupId":"351","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/10/44b0616f37fbd199ab7a2c939a36bc3072f796.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2661,"status":"M"}],"commitId":"f8afbbd6d5c427f98a16e8b6d842f3deb0e33251","commitMessage":"@@@Follow-up to r965520. Fix a failure in the javahl-compat tests in the same way\nas was done for the org.apache tests.\n\nUpdate a javahl test to always display a diff header.  even if we just have\nproperty changes.\n\n * subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java\n   (testDiff): Add diff headers to the expected diff output.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@966210 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-07-21 20:42:28","modifiedFileCount":"1","status":"M","submitter":"Daniel N?slund"},{"authorTime":"2010-07-21 20:42:28","codes":[{"authorDate":"2010-08-14 01:33:26","commitOrder":11,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\",\n                            Depth.empty, false, false, null, null, null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-08-14 01:33:26","endLine":2969,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/7b/84c56f6e8239568042dfe9508cd92c5f82b3dd.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\",\n                            Depth.empty, false, false, null, null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2737,"status":"M"},{"authorDate":"2010-07-21 20:42:28","commitOrder":11,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-07-21 20:42:28","endLine":2885,"groupId":"351","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/10/44b0616f37fbd199ab7a2c939a36bc3072f796.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2661,"status":"N"}],"commitId":"4059dd07b9460b84f3966fcc2e55462194eb4412","commitMessage":"@@@JavaHL: Introduce the commit information callback for the commit() API.  This\ncallback will eventually spread to the other commit-y APIs.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/BasicTests.java:\n  Update tests calling commit().\n\n* native/CreateJ.cpp. \n* native/CreateJ.h\n  (CommitInfo): New.\n\n* native/SVNClient.h. \n* native/SVNClient.cpp\n  (commit): Update to use the user-provided callback.\n  (CommitNotfier): Remove.\n  (getContext): Don't set up the commit notifier.\n\n* native/CommitCallback.h:\n  New.\n\n* native/CommitCallback.cpp:\n  New.\n\n* native/org_apache_subversion_javahl_SVNClient.cpp\n  (Java_org_apache_subversion_javahl_SVNClient_commit): Change return type and\n    params to match the Java API.\n\n* src/org/apache/subversion/javahl/CommitInfo.java:\n  New.\n\n* src/org/apache/subversion/javahl/SVNClient.java\n* src/org/apache/subversion/javahl/ISVNClient.java\n  (commit): Take a callback to return the commit revision.  author.  date.  etc.\n\n* src/org/apache/subversion/javahl/callback/CommitCallback.java:\n  New.\n\n* src/org/tigris/subversion/javahl/SVNClient.java\n  (commit): Update compat wrapper for new callback.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@985295 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-08-14 01:33:26","modifiedFileCount":"4","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-07-21 20:42:28","codes":[{"authorDate":"2010-08-14 04:09:35","commitOrder":12,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false, null);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\",\n                            Depth.empty, false, false, null, null, null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-08-14 04:09:35","endLine":2969,"groupId":"598","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/be/274490ae55c7b77b9fa5663ca0af725b3d0579.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\",\n                            Depth.empty, false, false, null, null, null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2737,"status":"M"},{"authorDate":"2010-07-21 20:42:28","commitOrder":12,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-07-21 20:42:28","endLine":2885,"groupId":"351","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/10/44b0616f37fbd199ab7a2c939a36bc3072f796.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2661,"status":"N"}],"commitId":"a3814ee3994e0e2d9ee7c40908a5981719c1be6f","commitMessage":"@@@JavaHL: Extend the commit callback to all commit-y APIs.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/BasicTests.java:\n  Update tests to use the updated API.\n\n* tests/org/apache/subversion/javahl/SVNTests.java:\n  Same.\n\n* subversion/bindings/javahl/native/SVNClient.h\n  (propertySet.  doImport.  mkdir.  move.  copy.  remove): Add commit callback param.\n\n* subversion/bindings/javahl/native/SVNClient.cpp\n  (propertySet.  doImport.  mkdir.  move.  copy.  remove): Add commit callback param. \n    and set it in the client context.\n\n* native/org_apache_subversion_javahl_SVNClient.cpp\n  (Java_org_apache_subversion_javahl_SVNClient_remove. \n   Java_org_apache_subversion_javahl_SVNClient_copy. \n   Java_org_apache_subversion_javahl_SVNClient_move. \n   Java_org_apache_subversion_javahl_SVNClient_mkdir. \n   Java_org_apache_subversion_javahl_SVNClient_doImport. \n   Java_org_apache_subversion_javahl_SVNClient_propertySet):\n    Add commit callback param.  and pass it to the C++ object.\n\n* src/org/apache/subversion/javahl/SVNClient.java\n  (remove.  copy.  move.  mkdir.  doImport.  propertySet): Add CommitCallback\n    param.\n  (propertyRemove.  propertyCreate): Add param and update callers.\n\n* src/org/apache/subversion/javahl/ISVNClient.java\n  (remove.  copy.  move.  mkdir.  doImport.  propertySet.  propertyRemove. \n   propertyCreate): Update wrappers.\n\n* src/org/tigris/subversion/javahl/SVNClient.java\n  (remove.  copy.  move.  mkdir.  doImport.  propertySet.  propertyRemove. \n   propertyCreate): Add CommitCallback\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@985339 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-08-14 04:09:35","modifiedFileCount":"5","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-07-21 20:42:28","codes":[{"authorDate":"2010-09-02 03:20:13","commitOrder":13,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false, null);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, Depth.empty, false, false, null, null,\n                                  new ConstMsg(\"Set svn:eol-style to native\"),\n                                  null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-09-02 03:20:13","endLine":2907,"groupId":"179","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/f3/c5129fe1c260839a5a29515f45e2ba506cb1b0.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false, null);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\",\n                            Depth.empty, false, false, null, null, null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2674,"status":"M"},{"authorDate":"2010-07-21 20:42:28","commitOrder":13,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-07-21 20:42:28","endLine":2885,"groupId":"351","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/10/44b0616f37fbd199ab7a2c939a36bc3072f796.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2661,"status":"N"}],"commitId":"7bc741ef31c0ffe597ee300eea19241a144b34a6","commitMessage":"@@@Followup to r991656.  this time with commit() and remove() APIs.\n\n* subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java:\n  Update tests.\n\n* subversion/bindings/javahl/src/org/apache/subversion/javahl/SVNClient.java\n  (remove.  commit): Remove Java wrappers.  and change the public API.\n\n* subversion/bindings/javahl/src/org/apache/subversion/javahl/ISVNClient.java\n  (remove.  commit): Update the public API to take a commit message callback.\n \n* subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java\n  (remove.  commit): Update wrappers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@991663 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-09-02 03:20:13","modifiedFileCount":"4","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-07-21 20:42:28","codes":[{"authorDate":"2010-09-03 00:34:58","commitOrder":14,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl().toString() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl().toString() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl().toString(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false, null);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl().toString(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, Depth.empty, false, false, null, null,\n                                  new ConstMsg(\"Set svn:eol-style to native\"),\n                                  null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-09-03 00:34:58","endLine":2911,"groupId":"179","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/21/256301f178cdca9dae962d0fb360f896f60b82.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false, null);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, Depth.empty, false, false, null, null,\n                                  new ConstMsg(\"Set svn:eol-style to native\"),\n                                  null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2678,"status":"M"},{"authorDate":"2010-07-21 20:42:28","commitOrder":14,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-07-21 20:42:28","endLine":2885,"groupId":"351","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/10/44b0616f37fbd199ab7a2c939a36bc3072f796.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2661,"status":"N"}],"commitId":"502fbeac018384945b585dff779a333a1c5900a9","commitMessage":"@@@JavaHL: Use the java.net.URI class internally in the tests.  There are a few\nplaces we can / should use it in the public API as a more appropriate type\nthan a simple String.  but testing it out on the tests first is initialy safer.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/SVNAdminTests.java:\n  Update API calls to de-wrap the URI.\n\n* tests/org/apache/subversion/javahl/BasicTests.java:\n  Same.\n\n* tests/org/apache/subversion/javahl/SVNTests.java\n  (OneTest.makeReposUrl): Return a URI.\n  (OneTest.url): Change from String to URI.\n  (OneTest.getUrl): Return a URI.\n  (OneTest.createInitialWorkingCopy): Use the URI type.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@992010 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-09-03 00:34:58","modifiedFileCount":"3","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-07-21 20:42:28","codes":[{"authorDate":"2010-12-31 01:18:28","commitOrder":15,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl().toString() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl().toString() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl().toString(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertySet(iotaPath, \"svn:eol-style\", \"native\",\n                                       Depth.empty, null, false, null, null);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl().toString(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, Depth.empty, false, false, null, null,\n                                  new ConstMsg(\"Set svn:eol-style to native\"),\n                                  null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-12-31 01:18:28","endLine":2895,"groupId":"0","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/3a/70429482be6b063ce673a2c37ae8b2e6666ce3.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl().toString() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl().toString() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl().toString(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\",\n                                          Depth.empty, null, false, null);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl().toString(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, Depth.empty, false, false, null, null,\n                                  new ConstMsg(\"Set svn:eol-style to native\"),\n                                  null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2662,"status":"M"},{"authorDate":"2010-07-21 20:42:28","commitOrder":15,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-07-21 20:42:28","endLine":2885,"groupId":"351","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/10/44b0616f37fbd199ab7a2c939a36bc3072f796.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2661,"status":"N"}],"commitId":"70596d91a39fb4fabd060588e1201053a448ea2c","commitMessage":"@@@JavaHL: Remove the quite superfluous propertyCreate() API.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/BasicTests.java:\n  Switch callers to propertySet().\n\n* src/org/apache/subversion/javahl/SVNClient.java. \n  src/org/apache/subversion/javahl/ISVNClient.java\n  (propertyCreate): Remove (with prejudice).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@1053945 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-12-31 01:18:28","modifiedFileCount":"3","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2010-07-21 20:42:28","codes":[{"authorDate":"2010-12-31 01:45:32","commitOrder":16,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl().toString() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl().toString() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl().toString(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        setprop(aPath, \"testprop\", \"Test property value.\");\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        setprop(aPath, \"testprop\", \"Test property value.\");\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    setprop(iotaPath, \"svn:eol-style\", \"native\");\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl().toString(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, Depth.empty, false, false, null, null,\n                                  new ConstMsg(\"Set svn:eol-style to native\"),\n                                  null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-12-31 01:45:32","endLine":2886,"groupId":"292","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/b7/dfbe0aa7579ad9e228eb0a9c23e294d9746841.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl().toString() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl().toString() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl().toString(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\",\n                Depth.empty, null, false, null, null);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertySet(iotaPath, \"svn:eol-style\", \"native\",\n                                       Depth.empty, null, false, null, null);\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl().toString(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, Depth.empty, false, false, null, null,\n                                  new ConstMsg(\"Set svn:eol-style to native\"),\n                                  null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2656,"status":"M"},{"authorDate":"2010-07-21 20:42:28","commitOrder":16,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2010-07-21 20:42:28","endLine":2885,"groupId":"351","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/10/44b0616f37fbd199ab7a2c939a36bc3072f796.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2661,"status":"N"}],"commitId":"fa6387f924045241fd10f45a6a337a6871812069","commitMessage":"@@@JavaHL: Remove the String version of the propertySet Java API.  and at the same\ntime introduce a similar helper for the tests.\n\n[ in subversion/bindings/javahl/ ]\n* tests/org/apache/subversion/javahl/BasicTests.java\n  (setprop): New helper.\n  [elsewhere]: Use the new helper.\n\n* src/org/apache/subversion/javahl/SVNClient.java. \n  src/org/apache/subversion/javahl/ISVNClient.java\n  (propertySet): Remove the String-value version.\n\n* src/org/tigris/subversion/javahl/SVNClient.java\n  (propertySet): Update compat wrapper.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@1053953 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2010-12-31 01:45:32","modifiedFileCount":"4","status":"M","submitter":"Hyrum Kurt Wright"},{"authorTime":"2011-11-27 21:43:09","codes":[{"authorDate":"2011-11-27 21:43:09","commitOrder":17,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl().toString() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl().toString() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl().toString(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        setprop(aPath, \"testprop\", \"Test property value.\" + NL);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        setprop(aPath, \"testprop\", \"Test property value.\" + NL);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    setprop(iotaPath, \"svn:eol-style\", \"native\");\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl().toString(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, Depth.empty, false, false, null, null,\n                                  new ConstMsg(\"Set svn:eol-style to native\"),\n                                  null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2011-11-27 21:43:09","endLine":2880,"groupId":"474","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/ee/2ea592a7e01893abc7706b59a04f685f700fa4.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl().toString() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl().toString() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl().toString(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        setprop(aPath, \"testprop\", \"Test property value.\");\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        setprop(aPath, \"testprop\", \"Test property value.\");\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    setprop(iotaPath, \"svn:eol-style\", \"native\");\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl().toString(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, Depth.empty, false, false, null, null,\n                                  new ConstMsg(\"Set svn:eol-style to native\"),\n                                  null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2650,"status":"M"},{"authorDate":"2011-11-27 21:43:09","commitOrder":17,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\" + NL,\n                           false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\" + NL,\n                           false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2011-11-27 21:43:09","endLine":2814,"groupId":"493","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/5b/7fcaf73af023a4d0dadd2bb4f8371bc6986a3e.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\", false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2588,"status":"M"}],"commitId":"060df0146a9e4e4b9dd87c22d156c57b8eb11342","commitMessage":"@@@Follow-up to r1206576: Blind attempt to fix JavaHL test failure.\n\n[in subversion/bindings/javahl/tests]\n\n* org/tigris/subversion/javahl/BasicTests.java. \n  org/apache/subversion/javahl/BasicTests.java\n  (testDiff): Append newline to property value to obtain expected diff output.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@1206719 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-11-27 21:43:09","modifiedFileCount":"2","status":"M","submitter":"Stefan Sperling"},{"authorTime":"2014-03-01 01:26:47","codes":[{"authorDate":"2014-03-01 01:26:47","commitOrder":18,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl().toString() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl().toString() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl().toString(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        setprop(aPath, \"testprop\", \"Test property value.\" + NL);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        setprop(aPath, \"testprop\", \"Test property value.\" + NL);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    setprop(iotaPath, \"svn:eol-style\", \"native\");\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl().toString(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, Depth.empty, false, false, null, null,\n                                  new ConstMsg(\"Set svn:eol-style to native\"),\n                                  null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2014-03-01 01:26:47","endLine":3222,"groupId":"1050","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/9c/91d4560371c6b83d1c3281846789835d375342.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    null, diffOutput.getPath(), Depth.files, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl().toString() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl().toString() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl().toString(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        setprop(aPath, \"testprop\", \"Test property value.\" + NL);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        setprop(aPath, \"testprop\", \"Test property value.\" + NL);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, Depth.infinity, null);\n\n                if (operativeRevision == 2) {\n                    \r\n                    setprop(iotaPath, \"svn:eol-style\", \"native\");\n                    Set<String> paths = new HashSet<String>(1);\n                    paths.add(iotaPath);\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl().toString(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, Depth.empty, false, false, null, null,\n                                  new ConstMsg(\"Set svn:eol-style to native\"),\n                                  null);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision),\n                                Revision.HEAD, null, diffOutput.getPath(),\n                                Depth.files, null, true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false,\n                                false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2992,"status":"M"},{"authorDate":"2014-03-01 01:26:47","commitOrder":18,"curCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\" + NL,\n                           false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\" + NL,\n                           false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","date":"2014-03-01 01:26:47","endLine":2820,"groupId":"1050","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testDiff","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/c2/bdb894431a7aa35ad62856e88e3bc3a3d138fe.src","preCode":"    public void testDiff()\n        throws SubversionException, IOException\n    {\n        OneTest thisTest = new OneTest(true);\n        File diffOutput = new File(super.localTmp, thisTest.testName);\n        final String NL = System.getProperty(\"line.separator\");\n        final String sepLine =\n            \"===================================================================\" + NL;\n        final String underSepLine =\n            \"___________________________________________________________________\" + NL;\n        final String expectedDiffBody =\n            \"@@ -1 +1 @@\" + NL +\n            \"-This is the file 'iota'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL +\n            \"+This is the file 'mu'.\" + NL +\n            \"\\\\ No newline at end of file\" + NL;\n\n        final String iotaPath = thisTest.getWCPath().replace('\\\\', '/') + \"/iota\";\n        final String wcPath = fileToSVNPath(new File(thisTest.getWCPath()),\n                false);\n\n        \r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(iotaPath));\n        writer.print(\"This is the file 'mu'.\");\n        writer.flush();\n        writer.close();\n\n        \r\n\r\n\r\n\r\n\n\n        \r\n        String expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n            \"--- iota\\t(.../iota)\\t(revision 1)\" + NL +\n            \"+++ iota\\t(.../A/mu)\\t(revision 1)\" + NL +\n            expectedDiffBody;\n        client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                    thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                    diffOutput.getPath(), false, true, true, false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        try\n        {\n            client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                        thisTest.getUrl() + \"/A/mu\", Revision.HEAD,\n                        thisTest.getUrl(), diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail becaus the relativeToDir parameter \" +\n                 \"does not work with URLs\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n\n        try\n        {\n            client.diff(iotaPath, Revision.BASE, iotaPath, Revision.WORKING,\n                        \"/non/existent/path\", diffOutput.getPath(),\n                        Depth.infinity, null, true, true, false);\n\n            fail(\"This test should fail because iotaPath is not a child of \" +\n                 \"the relativeToDir parameter\");\n        }\n        catch (Exception ignored)\n        {\n        }\n\n        \r\n        \r\n        String aPath = fileToSVNPath(new File(thisTest.getWCPath() + \"/A\"),\n                                     false);\n\n        expectedDiffOutput = \"Index: A\" + NL + sepLine +\n            \"--- A\\t(revision 1)\" + NL +\n            \"+++ A\\t(working copy)\" + NL +\n            NL + \"Property changes on: A\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\" + NL,\n                           false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, wcPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n        \r\n        expectedDiffOutput = \"Index: .\" + NL + sepLine +\n            \"--- .\\t(revision 1)\" + NL +\n            \"+++ .\\t(working copy)\" + NL +\n            NL + \"Property changes on: .\" + NL +\n            underSepLine +\n            \"Added: testprop\" + NL +\n            \"## -0,0 +1 ##\" + NL +\n            \"+Test property value.\" + NL;\n\n        client.propertySet(aPath, \"testprop\", \"Test property value.\" + NL,\n                           false);\n        client.diff(aPath, Revision.BASE, aPath, Revision.WORKING, aPath,\n                    diffOutput.getPath(), Depth.infinity, null, true, true,\n                    false);\n        assertFileContentsEquals(\"Unexpected diff output in file '\" +\n                                 diffOutput.getPath() + '\\'',\n                                 expectedDiffOutput, diffOutput);\n\n\n        \r\n\r\n\r\n\r\n\r\n\r\n\n\n        for (int operativeRevision = 1; operativeRevision < 3; operativeRevision++)\n         {\n                String revisionPrefix = \"While processing operativeRevison=\" + operativeRevision + \". \";\n                String assertPrefix = revisionPrefix + \"Unexpected diff output in file '\";\n\n                \r\n                client.revert(wcPath, true);\n\n                if (operativeRevision == 2) {\n                    \r\n                    client.propertyCreate(iotaPath, \"svn:eol-style\", \"native\", false);\n                    String[] paths = new String[] {iotaPath};\n                    addExpectedCommitItem(thisTest.getWCPath(),\n                            thisTest.getUrl(), \"iota\",NodeKind.file,\n                            CommitItemStateFlags.PropMods);\n                    client.commit(paths, \"Set svn:eol-style to native\", false);\n                }\n\n                \r\n                writer = new PrintWriter(new FileOutputStream(iotaPath));\n                writer.print(\"This is the file 'mu'.\");\n                writer.flush();\n                writer.close();\n                expectedDiffOutput = \"Index: \" + iotaPath + NL + sepLine +\n                    \"--- \" + iotaPath + \"\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ \" + iotaPath + \"\\t(working copy)\" + NL +\n                    expectedDiffBody;\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE,\n                                iotaPath, Revision.WORKING,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(thisTest.getUrl() + \"/iota\", Revision.HEAD,\n                                new Revision.Number(operativeRevision), Revision.HEAD,\n                                diffOutput.getPath(), false, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             \"\", diffOutput);\n\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n               \r\n                expectedDiffOutput = \"Index: iota\" + NL + sepLine +\n                    \"--- iota\\t(revision \" + operativeRevision + \")\" + NL +\n                    \"+++ iota\\t(working copy)\" + NL +\n                    expectedDiffBody;\n                try\n                {\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath, diffOutput.getPath(),\n                                Depth.infinity, null, true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n                try\n                {\n                    \r\n                    client.diff(iotaPath, Revision.BASE, iotaPath,\n                                Revision.WORKING, wcPath + \"/\",\n                                diffOutput.getPath(), Depth.infinity, null,\n                                true, true, false);\n                    assertFileContentsEquals(assertPrefix +\n                                             diffOutput.getPath() + '\\'',\n                                             expectedDiffOutput, diffOutput);\n                    diffOutput.delete();\n                }\n                catch (ClientException e)\n                {\n                    fail(revisionPrefix + e.getMessage());\n                }\n\n            }\n\n    }\n","realPath":"subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":2594,"status":"M"}],"commitId":"0f50ee9bd2315dfd7f030dcd6895677dfbff9942","commitMessage":"@@@Fix some typos.\n\n* CHANGES:\n* contrib/cgi/mirror_dir_through_svn.cgi:\n* contrib/client-side/emacs/psvn.el:\n* contrib/client-side/svn2cl/svn2cl.xsl:\n* contrib/hook-scripts/remove-zombie-locks.py:\n* contrib/hook-scripts/syntax-check.sh:\n* contrib/server-side/svnstsw/configure.ac:\n* notes/assurance.txt:\n* notes/fs-improvements.txt:\n* notes/knobs:\n* notes/merge-tracking/func-spec.html:\n* notes/merge-tracking/summit-survey.html:\n* notes/wc-ng/design:\n* notes/wc-ng/locking:\n* notes/wc-ng/nodes:\n* subversion/bindings/ctypes-python/csvn/core/__init__.py:\n* subversion/bindings/ctypes-python/examples/example.py:\n* subversion/bindings/javahl/src/org/apache/subversion/javahl/ConflictResult.java:\n* subversion/bindings/javahl/src/org/apache/subversion/javahl/ISVNClient.java:\n* subversion/bindings/javahl/src/org/apache/subversion/javahl/SVNClient.java:\n* subversion/bindings/javahl/src/org/apache/subversion/javahl/SVNRepos.java:\n* subversion/bindings/javahl/src/org/tigris/subversion/javahl/ConflictResult.java:\n* subversion/bindings/javahl/src/org/tigris/subversion/javahl/PropertyData.java:\n* subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNAdmin.java:\n* subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClient.java:\n* subversion/bindings/javahl/src/org/tigris/subversion/javahl/SVNClientInterface.java:\n* subversion/bindings/javahl/tests/org/apache/subversion/javahl/BasicTests.java:\n* subversion/bindings/javahl/tests/org/tigris/subversion/javahl/BasicTests.java:\n* subversion/bindings/swig/include/proxy_apr.swg:\n* subversion/bindings/swig/perl/native/Client.pm:\n* subversion/bindings/swig/perl/native/t/3client.t:\n* subversion/bindings/swig/python/libsvn_swig_py/swigutil_py.c:\n* subversion/include/private/svn_diff_tree.h:\n* subversion/include/private/svn_io_private.h:\n* subversion/include/private/svn_ra_svn_private.h:\n* subversion/include/private/svn_string_private.h:\n* subversion/include/svn_io.h:\n* subversion/include/svn_iter.h:\n* subversion/include/svn_props.h:\n* subversion/libsvn_client/copy_foreign.c:\n* subversion/libsvn_client/diff.c:\n* subversion/libsvn_client/merge.c:\n* subversion/libsvn_delta/xdelta.c:\n* subversion/libsvn_diff/diff4.c:\n* subversion/libsvn_diff/util.c:\n* subversion/libsvn_fs/editor.c:\n* subversion/libsvn_fs_fs/index.c:\n* subversion/libsvn_fs_fs/temp_serializer.c:\n* subversion/libsvn_fs_fs/temp_serializer.h:\n* subversion/libsvn_fs_fs/transaction.c:\n* subversion/libsvn_fs_fs/tree.c:\n* subversion/libsvn_fs_x/fs.h:\n* subversion/libsvn_fs_x/index.c:\n* subversion/libsvn_fs_x/reps.c:\n* subversion/libsvn_fs_x/temp_serializer.c:\n* subversion/libsvn_fs_x/temp_serializer.h:\n* subversion/libsvn_fs_x/transaction.c:\n* subversion/libsvn_fs_x/tree.c:\n* subversion/libsvn_ra_serf/README:\n* subversion/libsvn_ra_svn/protocol:\n* subversion/libsvn_repos/dump.c:\n* subversion/libsvn_repos/hooks.c:\n* subversion/libsvn_repos/load-fs-vtable.c:\n* subversion/libsvn_subr/dirent_uri.c:\n* subversion/libsvn_subr/io.c:\n* subversion/libsvn_subr/opt.c:\n* subversion/libsvn_subr/string.c:\n* subversion/libsvn_subr/subst.c:\n* subversion/libsvn_wc/entries.c:\n* subversion/libsvn_wc/externals.c:\n* subversion/libsvn_wc/lock.c:\n* subversion/libsvn_wc/update_editor.c:\n* subversion/svn/file-merge.c:\n* subversion/svn/status-cmd.c:\n* subversion/svnlook/svnlook.c:\n* subversion/svnrdump/load_editor.c:\n* subversion/svnserve/svnserve.c:\n* subversion/tests/cmdline/commit_tests.py:\n* subversion/tests/cmdline/diff_tests.py:\n* subversion/tests/cmdline/merge_reintegrate_tests.py:\n* subversion/tests/cmdline/merge_tests.py:\n* subversion/tests/cmdline/revert_tests.py:\n* subversion/tests/cmdline/svnauthz_tests.py:\n* subversion/tests/cmdline/svntest/factory.py:\n* subversion/tests/cmdline/svntest/main.py:\n* subversion/tests/libsvn_repos/repos-test.c:\n* subversion/tests/libsvn_subr/string-test.c:\n* subversion/tests/libsvn_subr/utf-test.c:\n* subversion/tests/libsvn_wc/db-test.c:\n* subversion/tests/svn_test_main.c:\n* tools/dev/trails.py: Fix some typos.\n\nPatch by: Veres Lajos <vlajos{_AT_}gmail.com>\n(I removed some changes that were wrong or can't be made due to API breakage)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@1573006 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-01 01:26:47","modifiedFileCount":"11","status":"M","submitter":"Ben Reser"}]
