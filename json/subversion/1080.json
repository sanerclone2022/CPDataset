[{"authorTime":"2013-06-23 00:17:12","codes":[{"authorDate":"2013-06-23 00:17:12","commitOrder":1,"curCode":"    public void testGetFile() throws Exception\n    {\n        Charset UTF8 = Charset.forName(\"UTF-8\");\n        ISVNRemote session = getSession();\n\n        ByteArrayOutputStream contents = new ByteArrayOutputStream();\n        HashMap<String, byte[]> properties = new HashMap<String, byte[]>();\n        properties.put(\"fakename\", \"fakecontents\".getBytes(UTF8));\n        long fetched_rev =\n            session.getFile(Revision.SVN_INVALID_REVNUM, \"A/B/lambda\",\n                            contents, properties);\n        assertEquals(fetched_rev, 1);\n        assertEquals(contents.toString(\"UTF-8\"),\n                     \"This is the file 'lambda'.\");\n        for (Map.Entry<String, byte[]> e : properties.entrySet())\n            assertTrue(e.getKey().startsWith(\"svn:entry:\"));\n    }\n","date":"2013-06-23 00:17:12","endLine":349,"groupId":"317","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/c6/f64d238644779a83bbed251ec0d6dee7852f80.src","preCode":"    public void testGetFile() throws Exception\n    {\n        Charset UTF8 = Charset.forName(\"UTF-8\");\n        ISVNRemote session = getSession();\n\n        ByteArrayOutputStream contents = new ByteArrayOutputStream();\n        HashMap<String, byte[]> properties = new HashMap<String, byte[]>();\n        properties.put(\"fakename\", \"fakecontents\".getBytes(UTF8));\n        long fetched_rev =\n            session.getFile(Revision.SVN_INVALID_REVNUM, \"A/B/lambda\",\n                            contents, properties);\n        assertEquals(fetched_rev, 1);\n        assertEquals(contents.toString(\"UTF-8\"),\n                     \"This is the file 'lambda'.\");\n        for (Map.Entry<String, byte[]> e : properties.entrySet())\n            assertTrue(e.getKey().startsWith(\"svn:entry:\"));\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNRemoteTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"B"},{"authorDate":"2013-06-23 00:17:12","commitOrder":1,"curCode":"    public void testGetDirectory() throws Exception\n    {\n        Charset UTF8 = Charset.forName(\"UTF-8\");\n        ISVNRemote session = getSession();\n\n        HashMap<String, DirEntry> dirents = new HashMap<String, DirEntry>();\n        dirents.put(\"E\", null);\n        dirents.put(\"F\", null);\n        dirents.put(\"lambda\", null);\n        HashMap<String, byte[]> properties = new HashMap<String, byte[]>();\n        properties.put(\"fakename\", \"fakecontents\".getBytes(UTF8));\n        long fetched_rev =\n            session.getDirectory(Revision.SVN_INVALID_REVNUM, \"A/B\",\n                                 DirEntry.Fields.all, dirents, properties);\n        assertEquals(fetched_rev, 1);\n        assertEquals(dirents.get(\"E\").getPath(), \"E\");\n        assertEquals(dirents.get(\"F\").getPath(), \"F\");\n        assertEquals(dirents.get(\"lambda\").getPath(), \"lambda\");\n        for (Map.Entry<String, byte[]> e : properties.entrySet())\n            assertTrue(e.getKey().startsWith(\"svn:entry:\"));\n    }\n","date":"2013-06-23 00:17:12","endLine":371,"groupId":"561","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetDirectory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/c6/f64d238644779a83bbed251ec0d6dee7852f80.src","preCode":"    public void testGetDirectory() throws Exception\n    {\n        Charset UTF8 = Charset.forName(\"UTF-8\");\n        ISVNRemote session = getSession();\n\n        HashMap<String, DirEntry> dirents = new HashMap<String, DirEntry>();\n        dirents.put(\"E\", null);\n        dirents.put(\"F\", null);\n        dirents.put(\"lambda\", null);\n        HashMap<String, byte[]> properties = new HashMap<String, byte[]>();\n        properties.put(\"fakename\", \"fakecontents\".getBytes(UTF8));\n        long fetched_rev =\n            session.getDirectory(Revision.SVN_INVALID_REVNUM, \"A/B\",\n                                 DirEntry.Fields.all, dirents, properties);\n        assertEquals(fetched_rev, 1);\n        assertEquals(dirents.get(\"E\").getPath(), \"E\");\n        assertEquals(dirents.get(\"F\").getPath(), \"F\");\n        assertEquals(dirents.get(\"lambda\").getPath(), \"lambda\");\n        for (Map.Entry<String, byte[]> e : properties.entrySet())\n            assertTrue(e.getKey().startsWith(\"svn:entry:\"));\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNRemoteTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"B"}],"commitId":"9406a36fa524a470f6006e3601ff4e0bf58f5f20","commitMessage":"@@@Implement the JavaHL RA methods ISVNRemote.getFile and ISVNRemote.getDirectory.\n\n[in subversion/bindings/javahl/src/org/apache/subversion/javahl]\n* ISVNRemote.java (ISVNRemote.getFile): Improve docstring.\n  (ISVNRemote.getDirectory): Change the type of the \"dirents\" argument to a\n   Map instead of a collection so that the native implementation does not\n   have to worry about sorting the entries. Also improve docstring.\n* remote/RemoteSession.java\n  (ISVNRemote.getDirectory.  RemoteSession.nativeGetDirectory): Update signature.\n\n[in subversion/bindings/javahl/native]\n* CreateJ.h (CreateJ::DirEntry.  CreateJ::FillPropertyMap): New methods.\n* CreateJ.cpp (CreateJ::DirEntry): Grab implementation from ListCallback.cpp.\n  (CreateJ::FillPropertyMap): Factor out of CreateJ::PropertyMap.\n  (CreateJ::PropertyMap): Call CreateJ::FillPropertyMap.\n* ListCallback.cpp (ListCallback::createJavaDirEntry): Replace the\n   implementation with a call to CreateJ::DirEntry.\n\n* RemoteSession.cpp (RemoteSession::getFile.  RemoteSession::getDirectory):\n   Implement.  using the new CreateJ::FillPropertyMap to fill in the properties.\n  (fill_dirents): Helper for getDirectory.  uses CreateJ::DirEntry.\n\n[in subversion/bindings/javahl/tests/org/apache/subversion/javahl]\n* SVNRemoteTests.java\n  (SVNRemoteTests.testGetFile.  SVNRemoteTests.testGetDirectory): New tests.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@1495751 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-06-23 00:17:12","modifiedFileCount":"3","status":"B","submitter":"Branko ?ibej"},{"authorTime":"2013-07-06 21:17:59","codes":[{"authorDate":"2013-07-06 21:17:59","commitOrder":2,"curCode":"    public void testGetFile() throws Exception\n    {\n        Charset UTF8 = Charset.forName(\"UTF-8\");\n        ISVNRemote session = getSession();\n\n        ByteArrayOutputStream contents = new ByteArrayOutputStream();\n        HashMap<String, byte[]> properties = new HashMap<String, byte[]>();\n        properties.put(\"fakename\", \"fakecontents\".getBytes(UTF8));\n        long fetched_rev =\n            session.getFile(Revision.SVN_INVALID_REVNUM, \"A/B/lambda\",\n                            contents, properties);\n        assertEquals(fetched_rev, 1);\n        assertEquals(contents.toString(\"UTF-8\"),\n                     \"This is the file 'lambda'.\");\n        for (Map.Entry<String, byte[]> e : properties.entrySet()) {\n            final String key = e.getKey();\n            assertTrue(key.startsWith(\"svn:entry:\")\n                       || key.startsWith(\"svn:wc:\"));\n        }\n    }\n","date":"2013-07-06 21:17:59","endLine":372,"groupId":"1080","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetFile","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/45/cff2c7c426e13fd04118fda2b3bb42db9c4aca.src","preCode":"    public void testGetFile() throws Exception\n    {\n        Charset UTF8 = Charset.forName(\"UTF-8\");\n        ISVNRemote session = getSession();\n\n        ByteArrayOutputStream contents = new ByteArrayOutputStream();\n        HashMap<String, byte[]> properties = new HashMap<String, byte[]>();\n        properties.put(\"fakename\", \"fakecontents\".getBytes(UTF8));\n        long fetched_rev =\n            session.getFile(Revision.SVN_INVALID_REVNUM, \"A/B/lambda\",\n                            contents, properties);\n        assertEquals(fetched_rev, 1);\n        assertEquals(contents.toString(\"UTF-8\"),\n                     \"This is the file 'lambda'.\");\n        for (Map.Entry<String, byte[]> e : properties.entrySet())\n            assertTrue(e.getKey().startsWith(\"svn:entry:\"));\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNRemoteTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"M"},{"authorDate":"2013-07-06 21:17:59","commitOrder":2,"curCode":"    public void testGetDirectory() throws Exception\n    {\n        Charset UTF8 = Charset.forName(\"UTF-8\");\n        ISVNRemote session = getSession();\n\n        HashMap<String, DirEntry> dirents = new HashMap<String, DirEntry>();\n        dirents.put(\"E\", null);\n        dirents.put(\"F\", null);\n        dirents.put(\"lambda\", null);\n        HashMap<String, byte[]> properties = new HashMap<String, byte[]>();\n        properties.put(\"fakename\", \"fakecontents\".getBytes(UTF8));\n        long fetched_rev =\n            session.getDirectory(Revision.SVN_INVALID_REVNUM, \"A/B\",\n                                 DirEntry.Fields.all, dirents, properties);\n        assertEquals(fetched_rev, 1);\n        assertEquals(dirents.get(\"E\").getPath(), \"E\");\n        assertEquals(dirents.get(\"F\").getPath(), \"F\");\n        assertEquals(dirents.get(\"lambda\").getPath(), \"lambda\");\n        for (Map.Entry<String, byte[]> e : properties.entrySet()) {\n            final String key = e.getKey();\n            assertTrue(key.startsWith(\"svn:entry:\")\n                       || key.startsWith(\"svn:wc:\"));\n        }\n    }\n","date":"2013-07-06 21:17:59","endLine":397,"groupId":"1080","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetDirectory","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-subversion-10-0.7/blobInfo/CC_OUT/blobs/45/cff2c7c426e13fd04118fda2b3bb42db9c4aca.src","preCode":"    public void testGetDirectory() throws Exception\n    {\n        Charset UTF8 = Charset.forName(\"UTF-8\");\n        ISVNRemote session = getSession();\n\n        HashMap<String, DirEntry> dirents = new HashMap<String, DirEntry>();\n        dirents.put(\"E\", null);\n        dirents.put(\"F\", null);\n        dirents.put(\"lambda\", null);\n        HashMap<String, byte[]> properties = new HashMap<String, byte[]>();\n        properties.put(\"fakename\", \"fakecontents\".getBytes(UTF8));\n        long fetched_rev =\n            session.getDirectory(Revision.SVN_INVALID_REVNUM, \"A/B\",\n                                 DirEntry.Fields.all, dirents, properties);\n        assertEquals(fetched_rev, 1);\n        assertEquals(dirents.get(\"E\").getPath(), \"E\");\n        assertEquals(dirents.get(\"F\").getPath(), \"F\");\n        assertEquals(dirents.get(\"lambda\").getPath(), \"lambda\");\n        for (Map.Entry<String, byte[]> e : properties.entrySet())\n            assertTrue(e.getKey().startsWith(\"svn:entry:\"));\n    }\n","realPath":"subversion/bindings/javahl/tests/org/apache/subversion/javahl/SVNRemoteTests.java","repoName":"subversion","snippetEndLine":0,"snippetStartLine":0,"startLine":374,"status":"M"}],"commitId":"2e9e6e5f1349ebe6206bfa7813f142fab0245e2a","commitMessage":"@@@Fixed the JavaHL RA implementation.  infrastructure and tests so that they\nall pass via ra_serf and ra_svn (on a local connection with trunk servers).\n\n[in subversion/bindings/javahl/native]\n* JNIUtil.cpp (JNIUtil::makeJByteArray): Check for null svn_string_t.\n\n* CommitEditor.h\n  (CommitEditor::provide_base_cb.  CommitEditor::provide_props_cb): New methods.\n* CommitEditor.cpp (open_callback_session): Extracted code for opening the\n   secondary session that suuports the Ev2 commit editor callbakcs from\n   CommitEditor::get_copysrc_kind_cb.\n  (CommitEditor::provide_base_cb.  CommitEditor::provide_props_cb): Implement.\n  (CommitEditor::CommitEditor): Use the new callbacks.\n\n[in subversion/bindings/javahl/tests/org/apache/subversion/javahl]\n* BasicTests.java (BasicTests.CountingProgressListener): New private class;\n   hoisted from BasicTests.testDataTransferProgressReport to avoid\n   throwing exceptions through native callbacks.  which clutter up the\n   output during the test run.\n  (BasicTests.testDataTransferProgressReport): Use the new callback class.\n\n* SVNRemoteTests.java\n  (SVNRemoteTests.testChangeRevpropAtomic): Check list of allowed error codes.\n  (SVNRemoteTests.testGetFile.  SVNRemoteTests.testGetDirectory): Expect wcprops.\n  (SVNRemoteTests.testEditorSetFileContents): New test case; covers a code path\n   that had not been tested before.\n  (SVNRemoteTests.testEditorSetFileProps): Replaced by testEditorSetFileContents.\n  (SVNRemoteTests.RemoteStatusReceiver): Make StatInfo array sortable.\n  (SVNRemoteTests.testPropchangeStatus. \n   SVNRemoteTests.testDeletedStatus): Sort status entries before checking\n   results because ra_serf sends them in the opposite order than ra_local.\n* SVNTests.java (SVNTests.prompt): Return true; we do have credentials info.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/subversion/trunk@1500255 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-07-06 21:17:59","modifiedFileCount":"3","status":"M","submitter":"Branko ?ibej"}]
