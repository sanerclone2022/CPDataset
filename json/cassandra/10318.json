[{"authorTime":"2019-02-15 17:03:47","codes":[{"authorDate":"2019-02-15 17:03:47","commitOrder":1,"curCode":"    private MockMessagingSpy createPrepareSpy(Collection<InetAddressAndPort> failed,\n                                              Collection<InetAddressAndPort> timeout,\n                                              Function<PrepareConsistentRequest, UUID> sessionIdFunc)\n    {\n        return MockMessagingService.when(\n        all(verb(MessagingService.Verb.REPAIR_MESSAGE),\n            payload((p) -> p instanceof PrepareConsistentRequest))\n        ).respond((msgOut, to) ->\n                  {\n                      if(timeout.contains(to)) return null;\n                      else return MessageIn.create(to,\n                                                   new PrepareConsistentResponse(sessionIdFunc.apply((PrepareConsistentRequest) msgOut.payload), to, !failed.contains(to)),\n                                                   Collections.emptyMap(),\n                                                   MessagingService.Verb.REPAIR_MESSAGE,\n                                                   MessagingService.current_version);\n                  });\n    }\n","date":"2019-02-23 02:55:08","endLine":289,"groupId":"1565","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createPrepareSpy","params":"(Collection<InetAddressAndPort>failed@Collection<InetAddressAndPort>timeout@Function<PrepareConsistentRequest@UUID>sessionIdFunc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b5/32abdcd5737781f7a6a3b0ccf289b8f2a495bc.src","preCode":"    private MockMessagingSpy createPrepareSpy(Collection<InetAddressAndPort> failed,\n                                              Collection<InetAddressAndPort> timeout,\n                                              Function<PrepareConsistentRequest, UUID> sessionIdFunc)\n    {\n        return MockMessagingService.when(\n        all(verb(MessagingService.Verb.REPAIR_MESSAGE),\n            payload((p) -> p instanceof PrepareConsistentRequest))\n        ).respond((msgOut, to) ->\n                  {\n                      if(timeout.contains(to)) return null;\n                      else return MessageIn.create(to,\n                                                   new PrepareConsistentResponse(sessionIdFunc.apply((PrepareConsistentRequest) msgOut.payload), to, !failed.contains(to)),\n                                                   Collections.emptyMap(),\n                                                   MessagingService.Verb.REPAIR_MESSAGE,\n                                                   MessagingService.current_version);\n                  });\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/CoordinatorMessagingTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"B"},{"authorDate":"2019-02-15 17:03:47","commitOrder":1,"curCode":"    private MockMessagingSpy createFinalizeSpy(Collection<InetAddressAndPort> failed,\n                                               Collection<InetAddressAndPort> timeout)\n    {\n        return MockMessagingService.when(\n        all(verb(MessagingService.Verb.REPAIR_MESSAGE),\n            payload((p) -> p instanceof FinalizePropose))\n        ).respond((msgOut, to) ->\n                  {\n                      if(timeout.contains(to)) return null;\n                      else return MessageIn.create(to,\n                                                   new FinalizePromise(((FinalizePropose) msgOut.payload).sessionID, to, !failed.contains(to)),\n                                                   Collections.emptyMap(),\n                                                   MessagingService.Verb.REPAIR_MESSAGE,\n                                                   MessagingService.current_version);\n                  });\n    }\n","date":"2019-02-23 02:55:08","endLine":306,"groupId":"1565","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createFinalizeSpy","params":"(Collection<InetAddressAndPort>failed@Collection<InetAddressAndPort>timeout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b5/32abdcd5737781f7a6a3b0ccf289b8f2a495bc.src","preCode":"    private MockMessagingSpy createFinalizeSpy(Collection<InetAddressAndPort> failed,\n                                               Collection<InetAddressAndPort> timeout)\n    {\n        return MockMessagingService.when(\n        all(verb(MessagingService.Verb.REPAIR_MESSAGE),\n            payload((p) -> p instanceof FinalizePropose))\n        ).respond((msgOut, to) ->\n                  {\n                      if(timeout.contains(to)) return null;\n                      else return MessageIn.create(to,\n                                                   new FinalizePromise(((FinalizePropose) msgOut.payload).sessionID, to, !failed.contains(to)),\n                                                   Collections.emptyMap(),\n                                                   MessagingService.Verb.REPAIR_MESSAGE,\n                                                   MessagingService.current_version);\n                  });\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/CoordinatorMessagingTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"B"}],"commitId":"9bde713ee8883f70d130efb6290ec0e6daea524f","commitMessage":"@@@Fix IR prepare anti-compaction race\n\nPatch by Stefan Podkowinski; Reviewed by Blake Eggleston for CASSANDRA-15027\n","date":"2019-02-23 02:55:08","modifiedFileCount":"14","status":"B","submitter":"Stefan Podkowinski"},{"authorTime":"2019-06-12 23:26:54","codes":[{"authorDate":"2019-06-12 23:26:54","commitOrder":2,"curCode":"    private MockMessagingSpy createPrepareSpy(Collection<InetAddressAndPort> failed,\n                                              Collection<InetAddressAndPort> timeout,\n                                              Function<PrepareConsistentRequest, UUID> sessionIdFunc)\n    {\n        return MockMessagingService.when(\n        all(verb(Verb.REPAIR_REQ),\n            payload((p) -> p instanceof PrepareConsistentRequest))\n        ).respond((msgOut, to) ->\n                  {\n                      if(timeout.contains(to)) return null;\n                      else return Message.out(Verb.REPAIR_REQ, new PrepareConsistentResponse(sessionIdFunc.apply((PrepareConsistentRequest) msgOut.payload), to, !failed.contains(to)));\n                  });\n    }\n","date":"2019-06-12 23:26:54","endLine":286,"groupId":"1565","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createPrepareSpy","params":"(Collection<InetAddressAndPort>failed@Collection<InetAddressAndPort>timeout@Function<PrepareConsistentRequest@UUID>sessionIdFunc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/23/7e9a86df710739d3b4fe157c21092217264d64.src","preCode":"    private MockMessagingSpy createPrepareSpy(Collection<InetAddressAndPort> failed,\n                                              Collection<InetAddressAndPort> timeout,\n                                              Function<PrepareConsistentRequest, UUID> sessionIdFunc)\n    {\n        return MockMessagingService.when(\n        all(verb(MessagingService.Verb.REPAIR_MESSAGE),\n            payload((p) -> p instanceof PrepareConsistentRequest))\n        ).respond((msgOut, to) ->\n                  {\n                      if(timeout.contains(to)) return null;\n                      else return MessageIn.create(to,\n                                                   new PrepareConsistentResponse(sessionIdFunc.apply((PrepareConsistentRequest) msgOut.payload), to, !failed.contains(to)),\n                                                   Collections.emptyMap(),\n                                                   MessagingService.Verb.REPAIR_MESSAGE,\n                                                   MessagingService.current_version);\n                  });\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/CoordinatorMessagingTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2019-06-12 23:26:54","commitOrder":2,"curCode":"    private MockMessagingSpy createFinalizeSpy(Collection<InetAddressAndPort> failed,\n                                               Collection<InetAddressAndPort> timeout)\n    {\n        return MockMessagingService.when(\n        all(verb(Verb.REPAIR_REQ),\n            payload((p) -> p instanceof FinalizePropose))\n        ).respond((msgOut, to) ->\n                  {\n                      if(timeout.contains(to)) return null;\n                      else return Message.out(Verb.REPAIR_REQ,\n                                                  new FinalizePromise(((FinalizePropose) msgOut.payload).sessionID, to, !failed.contains(to)));\n                  });\n    }\n","date":"2019-06-12 23:26:54","endLine":300,"groupId":"1565","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createFinalizeSpy","params":"(Collection<InetAddressAndPort>failed@Collection<InetAddressAndPort>timeout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/23/7e9a86df710739d3b4fe157c21092217264d64.src","preCode":"    private MockMessagingSpy createFinalizeSpy(Collection<InetAddressAndPort> failed,\n                                               Collection<InetAddressAndPort> timeout)\n    {\n        return MockMessagingService.when(\n        all(verb(MessagingService.Verb.REPAIR_MESSAGE),\n            payload((p) -> p instanceof FinalizePropose))\n        ).respond((msgOut, to) ->\n                  {\n                      if(timeout.contains(to)) return null;\n                      else return MessageIn.create(to,\n                                                   new FinalizePromise(((FinalizePropose) msgOut.payload).sessionID, to, !failed.contains(to)),\n                                                   Collections.emptyMap(),\n                                                   MessagingService.Verb.REPAIR_MESSAGE,\n                                                   MessagingService.current_version);\n                  });\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/CoordinatorMessagingTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"310a48efcfdc0fb77fbd5fd6e734bf17667f617d","commitMessage":"@@@Rewrite the internode messaging subsystem\n\npatch by Aleksey Yeschenko and Benedict Elliott Smith; reviewed by Alex\nPetrov.  Aleksey Yeschenko.  and Benedict Elliott Smith for CASSANDRA-15066\n\nCo-authored-by: Aleksey Yeschenko <aleksey@apache.org>\nCo-authored-by: Benedict Elliott Smith <benedict@apache.org>\n","date":"2019-06-12 23:26:54","modifiedFileCount":"253","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2019-06-14 21:49:46","codes":[{"authorDate":"2019-06-14 21:49:46","commitOrder":3,"curCode":"    private MockMessagingSpy createPrepareSpy(Collection<InetAddressAndPort> failed,\n                                              Collection<InetAddressAndPort> timeout,\n                                              Function<PrepareConsistentRequest, UUID> sessionIdFunc)\n    {\n        return MockMessagingService.when(verb(Verb.PREPARE_CONSISTENT_REQ)).respond((msgOut, to) ->\n        {\n            if (timeout.contains(to))\n                return null;\n\n            return Message.out(Verb.PREPARE_CONSISTENT_RSP,\n                               new PrepareConsistentResponse(sessionIdFunc.apply((PrepareConsistentRequest) msgOut.payload), to, !failed.contains(to)));\n        });\n    }\n","date":"2019-09-21 06:52:19","endLine":285,"groupId":"8709","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createPrepareSpy","params":"(Collection<InetAddressAndPort>failed@Collection<InetAddressAndPort>timeout@Function<PrepareConsistentRequest@UUID>sessionIdFunc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c9/fd9132c8325b790d568a5ca1ae9049776201e6.src","preCode":"    private MockMessagingSpy createPrepareSpy(Collection<InetAddressAndPort> failed,\n                                              Collection<InetAddressAndPort> timeout,\n                                              Function<PrepareConsistentRequest, UUID> sessionIdFunc)\n    {\n        return MockMessagingService.when(\n        all(verb(Verb.REPAIR_REQ),\n            payload((p) -> p instanceof PrepareConsistentRequest))\n        ).respond((msgOut, to) ->\n                  {\n                      if(timeout.contains(to)) return null;\n                      else return Message.out(Verb.REPAIR_REQ, new PrepareConsistentResponse(sessionIdFunc.apply((PrepareConsistentRequest) msgOut.payload), to, !failed.contains(to)));\n                  });\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/CoordinatorMessagingTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"},{"authorDate":"2019-06-14 21:49:46","commitOrder":3,"curCode":"    private MockMessagingSpy createFinalizeSpy(Collection<InetAddressAndPort> failed,\n                                               Collection<InetAddressAndPort> timeout)\n    {\n        return MockMessagingService.when(verb(Verb.FINALIZE_PROPOSE_MSG)).respond((msgOut, to) ->\n        {\n            if (timeout.contains(to))\n                return null;\n\n            return Message.out(Verb.FINALIZE_PROMISE_MSG, new FinalizePromise(((FinalizePropose) msgOut.payload).sessionID, to, !failed.contains(to)));\n        });\n    }\n","date":"2019-09-21 06:52:19","endLine":297,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createFinalizeSpy","params":"(Collection<InetAddressAndPort>failed@Collection<InetAddressAndPort>timeout)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c9/fd9132c8325b790d568a5ca1ae9049776201e6.src","preCode":"    private MockMessagingSpy createFinalizeSpy(Collection<InetAddressAndPort> failed,\n                                               Collection<InetAddressAndPort> timeout)\n    {\n        return MockMessagingService.when(\n        all(verb(Verb.REPAIR_REQ),\n            payload((p) -> p instanceof FinalizePropose))\n        ).respond((msgOut, to) ->\n                  {\n                      if(timeout.contains(to)) return null;\n                      else return Message.out(Verb.REPAIR_REQ,\n                                                  new FinalizePromise(((FinalizePropose) msgOut.payload).sessionID, to, !failed.contains(to)));\n                  });\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/CoordinatorMessagingTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"}],"commitId":"f9ff88437742675db5c53f5834884b43f8937e00","commitMessage":"@@@Untangle RepairMessage sub-hierarchy of messages.  use new messaging (more) correctly\n\npatch by Aleksey Yeschenko; reviewed by Blake Eggleston for\nCASSANDRA-15163\n","date":"2019-09-21 06:52:19","modifiedFileCount":"35","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2020-03-31 21:53:51","codes":[{"authorDate":"2020-03-31 21:53:51","commitOrder":4,"curCode":"    private MockMessagingSpy createPrepareSpy(Collection<InetAddressAndPort> failed,\n                                              Collection<InetAddressAndPort> timeout,\n                                              Function<PrepareConsistentRequest, UUID> sessionIdFunc,\n                                              CountDownLatch latch)\n    {\n        return MockMessagingService.when(verb(Verb.PREPARE_CONSISTENT_REQ)).respond((msgOut, to) ->\n        {\n            try\n            {\n                latch.await();\n            }\n            catch (InterruptedException e) { }\n            if (timeout.contains(to))\n                return null;\n\n            return Message.out(Verb.PREPARE_CONSISTENT_RSP,\n                               new PrepareConsistentResponse(sessionIdFunc.apply((PrepareConsistentRequest) msgOut.payload), to, !failed.contains(to)));\n        });\n    }\n","date":"2020-04-06 20:28:53","endLine":298,"groupId":"10318","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createPrepareSpy","params":"(Collection<InetAddressAndPort>failed@Collection<InetAddressAndPort>timeout@Function<PrepareConsistentRequest@UUID>sessionIdFunc@CountDownLatchlatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/6f/0d8467e63b70d6f2d905cbc89667a82ebd1701.src","preCode":"    private MockMessagingSpy createPrepareSpy(Collection<InetAddressAndPort> failed,\n                                              Collection<InetAddressAndPort> timeout,\n                                              Function<PrepareConsistentRequest, UUID> sessionIdFunc)\n    {\n        return MockMessagingService.when(verb(Verb.PREPARE_CONSISTENT_REQ)).respond((msgOut, to) ->\n        {\n            if (timeout.contains(to))\n                return null;\n\n            return Message.out(Verb.PREPARE_CONSISTENT_RSP,\n                               new PrepareConsistentResponse(sessionIdFunc.apply((PrepareConsistentRequest) msgOut.payload), to, !failed.contains(to)));\n        });\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/CoordinatorMessagingTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"},{"authorDate":"2020-03-31 21:53:51","commitOrder":4,"curCode":"    private MockMessagingSpy createFinalizeSpy(Collection<InetAddressAndPort> failed,\n                                               Collection<InetAddressAndPort> timeout,\n                                               CountDownLatch latch)\n    {\n        return MockMessagingService.when(verb(Verb.FINALIZE_PROPOSE_MSG)).respond((msgOut, to) ->\n        {\n            try\n            {\n                latch.await();\n            }\n            catch (InterruptedException e) { }\n            if (timeout.contains(to))\n                return null;\n\n            return Message.out(Verb.FINALIZE_PROMISE_MSG, new FinalizePromise(((FinalizePropose) msgOut.payload).sessionID, to, !failed.contains(to)));\n        });\n    }\n","date":"2020-04-06 20:28:53","endLine":316,"groupId":"10318","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createFinalizeSpy","params":"(Collection<InetAddressAndPort>failed@Collection<InetAddressAndPort>timeout@CountDownLatchlatch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/6f/0d8467e63b70d6f2d905cbc89667a82ebd1701.src","preCode":"    private MockMessagingSpy createFinalizeSpy(Collection<InetAddressAndPort> failed,\n                                               Collection<InetAddressAndPort> timeout)\n    {\n        return MockMessagingService.when(verb(Verb.FINALIZE_PROPOSE_MSG)).respond((msgOut, to) ->\n        {\n            if (timeout.contains(to))\n                return null;\n\n            return Message.out(Verb.FINALIZE_PROMISE_MSG, new FinalizePromise(((FinalizePropose) msgOut.payload).sessionID, to, !failed.contains(to)));\n        });\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/CoordinatorMessagingTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"}],"commitId":"b4e640a96e76f8d4a45937b1312b64ddc1aeb8ac","commitMessage":"@@@Fix flaky CoordinatorMessagingTest and docstring in OutboundSink and ConsistentSession\n\npatch by Aleksandr Sorokoumov; reviewed by Stefania Alborghetti for CASSANDRA-15672\n","date":"2020-04-06 20:28:53","modifiedFileCount":"3","status":"M","submitter":"Aleksandr Sorokoumov"}]
