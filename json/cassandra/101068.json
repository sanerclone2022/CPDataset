[{"authorTime":"2016-01-26 11:13:36","codes":[{"authorDate":"2016-01-26 11:13:36","commitOrder":2,"curCode":"    private void testCrossSSTableQueries(boolean forceFlush) throws Exception\n    {\n        Map<String, Pair<String, Integer>> part1 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create(\"Maxie\", 43));\n                put(\"key1\", Pair.create(\"Chelsie\", 33));\n                put(\"key2\", Pair.create(\"Josephine\", 43));\n                put(\"key3\", Pair.create(\"Shanna\", 27));\n                put(\"key4\", Pair.create(\"Amiya\", 36));\n            }};\n\n        loadData(part1, forceFlush); \r\n\n        Map<String, Pair<String, Integer>> part2 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key5\", Pair.create(\"Americo\", 20));\n                put(\"key6\", Pair.create(\"Fiona\", 39));\n                put(\"key7\", Pair.create(\"Francis\", 41));\n                put(\"key8\", Pair.create(\"Charley\", 21));\n                put(\"key9\", Pair.create(\"Amely\", 40));\n            }};\n\n        loadData(part2, forceFlush);\n\n        Map<String, Pair<String, Integer>> part3 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key10\", Pair.create(\"Eddie\", 42));\n                put(\"key11\", Pair.create(\"Oswaldo\", 35));\n                put(\"key12\", Pair.create(\"Susana\", 35));\n                put(\"key13\", Pair.create(\"Alivia\", 42));\n                put(\"key14\", Pair.create(\"Demario\", 28));\n            }};\n\n        ColumnFamilyStore store = loadData(part3, forceFlush);\n\n        final ByteBuffer firstName = UTF8Type.instance.decompose(\"first_name\");\n        final ByteBuffer age = UTF8Type.instance.decompose(\"age\");\n\n        Set<String> rows;\n        rows = getIndexed(store, 10, buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Fiona\")),\n                                     buildExpression(age, Operator.LT, Int32Type.instance.decompose(40)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key6\" }, rows.toArray(new String[rows.size()])));\n\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key14\",\n                                                                        \"key3\", \"key4\", \"key6\", \"key7\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 5,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertEquals(rows.toString(), 5, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GTE, Int32Type.instance.decompose(35)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key4\", \"key6\", \"key7\" },\n                                                         rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\", \"key3\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(27)),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(50)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"ie\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(43)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key1\", \"key10\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key12\", \"key13\", \"key3\", \"key4\", \"key6\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(33)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key3\" }, rows.toArray(new String[rows.size()])));\n    }\n","date":"2016-02-06 03:56:23","endLine":368,"groupId":"5181","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCrossSSTableQueries","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b3/2bfc55205929c7bc45439ad848da8e9fd21b83.src","preCode":"    private void testCrossSSTableQueries(boolean forceFlush) throws Exception\n    {\n        Map<String, Pair<String, Integer>> part1 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create(\"Maxie\", 43));\n                put(\"key1\", Pair.create(\"Chelsie\", 33));\n                put(\"key2\", Pair.create(\"Josephine\", 43));\n                put(\"key3\", Pair.create(\"Shanna\", 27));\n                put(\"key4\", Pair.create(\"Amiya\", 36));\n            }};\n\n        loadData(part1, forceFlush); \r\n\n        Map<String, Pair<String, Integer>> part2 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key5\", Pair.create(\"Americo\", 20));\n                put(\"key6\", Pair.create(\"Fiona\", 39));\n                put(\"key7\", Pair.create(\"Francis\", 41));\n                put(\"key8\", Pair.create(\"Charley\", 21));\n                put(\"key9\", Pair.create(\"Amely\", 40));\n            }};\n\n        loadData(part2, forceFlush);\n\n        Map<String, Pair<String, Integer>> part3 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key10\", Pair.create(\"Eddie\", 42));\n                put(\"key11\", Pair.create(\"Oswaldo\", 35));\n                put(\"key12\", Pair.create(\"Susana\", 35));\n                put(\"key13\", Pair.create(\"Alivia\", 42));\n                put(\"key14\", Pair.create(\"Demario\", 28));\n            }};\n\n        ColumnFamilyStore store = loadData(part3, forceFlush);\n\n        final ByteBuffer firstName = UTF8Type.instance.decompose(\"first_name\");\n        final ByteBuffer age = UTF8Type.instance.decompose(\"age\");\n\n        Set<String> rows;\n        rows = getIndexed(store, 10, buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Fiona\")),\n                                     buildExpression(age, Operator.LT, Int32Type.instance.decompose(40)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key6\" }, rows.toArray(new String[rows.size()])));\n\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key14\",\n                                                                        \"key3\", \"key4\", \"key6\", \"key7\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 5,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertEquals(rows.toString(), 5, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GTE, Int32Type.instance.decompose(35)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key4\", \"key6\", \"key7\" },\n                                                         rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\", \"key3\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(27)),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(50)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"ie\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(43)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key1\", \"key10\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key12\", \"key13\", \"key3\", \"key4\", \"key6\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(33)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key3\" }, rows.toArray(new String[rows.size()])));\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"MB"},{"authorDate":"2016-01-26 11:13:36","commitOrder":2,"curCode":"    private void testMultiExpressionQueriesWhereRowSplitBetweenSSTables(boolean forceFlush) throws Exception\n    {\n        Map<String, Pair<String, Integer>> part1 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create(\"Maxie\", -1));\n                put(\"key1\", Pair.create(\"Chelsie\", 33));\n                put(\"key2\", Pair.create((String)null, 43));\n                put(\"key3\", Pair.create(\"Shanna\", 27));\n                put(\"key4\", Pair.create(\"Amiya\", 36));\n        }};\n\n        loadData(part1, forceFlush); \r\n\n        Map<String, Pair<String, Integer>> part2 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key5\", Pair.create(\"Americo\", 20));\n                put(\"key6\", Pair.create(\"Fiona\", 39));\n                put(\"key7\", Pair.create(\"Francis\", 41));\n                put(\"key8\", Pair.create(\"Charley\", 21));\n                put(\"key9\", Pair.create(\"Amely\", 40));\n                put(\"key14\", Pair.create((String)null, 28));\n        }};\n\n        loadData(part2, forceFlush);\n\n        Map<String, Pair<String, Integer>> part3 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create((String)null, 43));\n                put(\"key10\", Pair.create(\"Eddie\", 42));\n                put(\"key11\", Pair.create(\"Oswaldo\", 35));\n                put(\"key12\", Pair.create(\"Susana\", 35));\n                put(\"key13\", Pair.create(\"Alivia\", 42));\n                put(\"key14\", Pair.create(\"Demario\", -1));\n                put(\"key2\", Pair.create(\"Josephine\", -1));\n        }};\n\n        ColumnFamilyStore store = loadData(part3, forceFlush);\n\n        final ByteBuffer firstName = UTF8Type.instance.decompose(\"first_name\");\n        final ByteBuffer age = UTF8Type.instance.decompose(\"age\");\n\n        Set<String> rows = getIndexed(store, 10,\n                                      buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Fiona\")),\n                                      buildExpression(age, Operator.LT, Int32Type.instance.decompose(40)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key6\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key14\",\n                                                                        \"key3\", \"key4\", \"key6\", \"key7\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 5,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertEquals(rows.toString(), 5, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GTE, Int32Type.instance.decompose(35)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key4\", \"key6\", \"key7\" },\n                                                         rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\", \"key3\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(27)),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\" }, rows.toArray(new String[rows.size()])));\n\n        Map<String, Pair<String, Integer>> part4 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key12\", Pair.create((String)null, 12));\n                put(\"key14\", Pair.create(\"Demario\", 42));\n                put(\"key2\", Pair.create(\"Frank\", -1));\n        }};\n\n        store = loadData(part4, forceFlush);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Susana\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(13)),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key12\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Demario\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(30)));\n        Assert.assertTrue(rows.toString(), rows.size() == 0);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Josephine\")));\n        Assert.assertTrue(rows.toString(), rows.size() == 0);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(50)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"ie\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(43)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key1\", \"key10\" }, rows.toArray(new String[rows.size()])));\n    }\n","date":"2016-02-06 03:56:23","endLine":536,"groupId":"5183","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiExpressionQueriesWhereRowSplitBetweenSSTables","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b3/2bfc55205929c7bc45439ad848da8e9fd21b83.src","preCode":"    private void testMultiExpressionQueriesWhereRowSplitBetweenSSTables(boolean forceFlush) throws Exception\n    {\n        Map<String, Pair<String, Integer>> part1 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create(\"Maxie\", -1));\n                put(\"key1\", Pair.create(\"Chelsie\", 33));\n                put(\"key2\", Pair.create((String)null, 43));\n                put(\"key3\", Pair.create(\"Shanna\", 27));\n                put(\"key4\", Pair.create(\"Amiya\", 36));\n        }};\n\n        loadData(part1, forceFlush); \r\n\n        Map<String, Pair<String, Integer>> part2 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key5\", Pair.create(\"Americo\", 20));\n                put(\"key6\", Pair.create(\"Fiona\", 39));\n                put(\"key7\", Pair.create(\"Francis\", 41));\n                put(\"key8\", Pair.create(\"Charley\", 21));\n                put(\"key9\", Pair.create(\"Amely\", 40));\n                put(\"key14\", Pair.create((String)null, 28));\n        }};\n\n        loadData(part2, forceFlush);\n\n        Map<String, Pair<String, Integer>> part3 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create((String)null, 43));\n                put(\"key10\", Pair.create(\"Eddie\", 42));\n                put(\"key11\", Pair.create(\"Oswaldo\", 35));\n                put(\"key12\", Pair.create(\"Susana\", 35));\n                put(\"key13\", Pair.create(\"Alivia\", 42));\n                put(\"key14\", Pair.create(\"Demario\", -1));\n                put(\"key2\", Pair.create(\"Josephine\", -1));\n        }};\n\n        ColumnFamilyStore store = loadData(part3, forceFlush);\n\n        final ByteBuffer firstName = UTF8Type.instance.decompose(\"first_name\");\n        final ByteBuffer age = UTF8Type.instance.decompose(\"age\");\n\n        Set<String> rows = getIndexed(store, 10,\n                                      buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Fiona\")),\n                                      buildExpression(age, Operator.LT, Int32Type.instance.decompose(40)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key6\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key14\",\n                                                                        \"key3\", \"key4\", \"key6\", \"key7\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 5,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertEquals(rows.toString(), 5, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GTE, Int32Type.instance.decompose(35)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key4\", \"key6\", \"key7\" },\n                                                         rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\", \"key3\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(27)),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\" }, rows.toArray(new String[rows.size()])));\n\n        Map<String, Pair<String, Integer>> part4 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key12\", Pair.create((String)null, 12));\n                put(\"key14\", Pair.create(\"Demario\", 42));\n                put(\"key2\", Pair.create(\"Frank\", -1));\n        }};\n\n        store = loadData(part4, forceFlush);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Susana\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(13)),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key12\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Demario\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(30)));\n        Assert.assertTrue(rows.toString(), rows.size() == 0);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Josephine\")));\n        Assert.assertTrue(rows.toString(), rows.size() == 0);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(50)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"ie\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(43)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key1\", \"key10\" }, rows.toArray(new String[rows.size()])));\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"MB"}],"commitId":"392866546e6377aafd018c3fcb2e124674a318dc","commitMessage":"@@@add LIKE support to CQL3\npatch by xedin; reviewed by beobal for CASSANDRA-11067\n","date":"2016-02-06 03:56:23","modifiedFileCount":"28","status":"M","submitter":"Pavel Yaskevich"},{"authorTime":"2016-02-08 09:15:21","codes":[{"authorDate":"2016-01-26 11:13:36","commitOrder":3,"curCode":"    private void testCrossSSTableQueries(boolean forceFlush) throws Exception\n    {\n        Map<String, Pair<String, Integer>> part1 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create(\"Maxie\", 43));\n                put(\"key1\", Pair.create(\"Chelsie\", 33));\n                put(\"key2\", Pair.create(\"Josephine\", 43));\n                put(\"key3\", Pair.create(\"Shanna\", 27));\n                put(\"key4\", Pair.create(\"Amiya\", 36));\n            }};\n\n        loadData(part1, forceFlush); \r\n\n        Map<String, Pair<String, Integer>> part2 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key5\", Pair.create(\"Americo\", 20));\n                put(\"key6\", Pair.create(\"Fiona\", 39));\n                put(\"key7\", Pair.create(\"Francis\", 41));\n                put(\"key8\", Pair.create(\"Charley\", 21));\n                put(\"key9\", Pair.create(\"Amely\", 40));\n            }};\n\n        loadData(part2, forceFlush);\n\n        Map<String, Pair<String, Integer>> part3 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key10\", Pair.create(\"Eddie\", 42));\n                put(\"key11\", Pair.create(\"Oswaldo\", 35));\n                put(\"key12\", Pair.create(\"Susana\", 35));\n                put(\"key13\", Pair.create(\"Alivia\", 42));\n                put(\"key14\", Pair.create(\"Demario\", 28));\n            }};\n\n        ColumnFamilyStore store = loadData(part3, forceFlush);\n\n        final ByteBuffer firstName = UTF8Type.instance.decompose(\"first_name\");\n        final ByteBuffer age = UTF8Type.instance.decompose(\"age\");\n\n        Set<String> rows;\n        rows = getIndexed(store, 10, buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Fiona\")),\n                                     buildExpression(age, Operator.LT, Int32Type.instance.decompose(40)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key6\" }, rows.toArray(new String[rows.size()])));\n\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key14\",\n                                                                        \"key3\", \"key4\", \"key6\", \"key7\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 5,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertEquals(rows.toString(), 5, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GTE, Int32Type.instance.decompose(35)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key4\", \"key6\", \"key7\" },\n                                                         rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\", \"key3\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(27)),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(50)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"ie\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(43)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key1\", \"key10\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key12\", \"key13\", \"key3\", \"key4\", \"key6\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(33)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key3\" }, rows.toArray(new String[rows.size()])));\n    }\n","date":"2016-02-06 03:56:23","endLine":368,"groupId":"5181","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCrossSSTableQueries","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b3/2bfc55205929c7bc45439ad848da8e9fd21b83.src","preCode":"    private void testCrossSSTableQueries(boolean forceFlush) throws Exception\n    {\n        Map<String, Pair<String, Integer>> part1 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create(\"Maxie\", 43));\n                put(\"key1\", Pair.create(\"Chelsie\", 33));\n                put(\"key2\", Pair.create(\"Josephine\", 43));\n                put(\"key3\", Pair.create(\"Shanna\", 27));\n                put(\"key4\", Pair.create(\"Amiya\", 36));\n            }};\n\n        loadData(part1, forceFlush); \r\n\n        Map<String, Pair<String, Integer>> part2 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key5\", Pair.create(\"Americo\", 20));\n                put(\"key6\", Pair.create(\"Fiona\", 39));\n                put(\"key7\", Pair.create(\"Francis\", 41));\n                put(\"key8\", Pair.create(\"Charley\", 21));\n                put(\"key9\", Pair.create(\"Amely\", 40));\n            }};\n\n        loadData(part2, forceFlush);\n\n        Map<String, Pair<String, Integer>> part3 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key10\", Pair.create(\"Eddie\", 42));\n                put(\"key11\", Pair.create(\"Oswaldo\", 35));\n                put(\"key12\", Pair.create(\"Susana\", 35));\n                put(\"key13\", Pair.create(\"Alivia\", 42));\n                put(\"key14\", Pair.create(\"Demario\", 28));\n            }};\n\n        ColumnFamilyStore store = loadData(part3, forceFlush);\n\n        final ByteBuffer firstName = UTF8Type.instance.decompose(\"first_name\");\n        final ByteBuffer age = UTF8Type.instance.decompose(\"age\");\n\n        Set<String> rows;\n        rows = getIndexed(store, 10, buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Fiona\")),\n                                     buildExpression(age, Operator.LT, Int32Type.instance.decompose(40)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key6\" }, rows.toArray(new String[rows.size()])));\n\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key14\",\n                                                                        \"key3\", \"key4\", \"key6\", \"key7\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 5,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertEquals(rows.toString(), 5, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GTE, Int32Type.instance.decompose(35)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key4\", \"key6\", \"key7\" },\n                                                         rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\", \"key3\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(27)),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(50)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"ie\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(43)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key1\", \"key10\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key12\", \"key13\", \"key3\", \"key4\", \"key6\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(33)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key3\" }, rows.toArray(new String[rows.size()])));\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"N"},{"authorDate":"2016-02-08 09:15:21","commitOrder":3,"curCode":"    private void testMultiExpressionQueriesWhereRowSplitBetweenSSTables(boolean forceFlush) throws Exception\n    {\n        Map<String, Pair<String, Integer>> part1 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create(\"Maxie\", -1));\n                put(\"key1\", Pair.create(\"Chelsie\", 33));\n                put(\"key2\", Pair.create((String)null, 43));\n                put(\"key3\", Pair.create(\"Shanna\", 27));\n                put(\"key4\", Pair.create(\"Amiya\", 36));\n        }};\n\n        loadData(part1, forceFlush); \r\n\n        Map<String, Pair<String, Integer>> part2 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key5\", Pair.create(\"Americo\", 20));\n                put(\"key6\", Pair.create(\"Fiona\", 39));\n                put(\"key7\", Pair.create(\"Francis\", 41));\n                put(\"key8\", Pair.create(\"Charley\", 21));\n                put(\"key9\", Pair.create(\"Amely\", 40));\n                put(\"key14\", Pair.create((String)null, 28));\n        }};\n\n        loadData(part2, forceFlush);\n\n        Map<String, Pair<String, Integer>> part3 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create((String)null, 43));\n                put(\"key10\", Pair.create(\"Eddie\", 42));\n                put(\"key11\", Pair.create(\"Oswaldo\", 35));\n                put(\"key12\", Pair.create(\"Susana\", 35));\n                put(\"key13\", Pair.create(\"Alivia\", 42));\n                put(\"key14\", Pair.create(\"Demario\", -1));\n                put(\"key2\", Pair.create(\"Josephine\", -1));\n        }};\n\n        ColumnFamilyStore store = loadData(part3, forceFlush);\n\n        final ByteBuffer firstName = UTF8Type.instance.decompose(\"first_name\");\n        final ByteBuffer age = UTF8Type.instance.decompose(\"age\");\n\n        Set<String> rows = getIndexed(store, 10,\n                                      buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Fiona\")),\n                                      buildExpression(age, Operator.LT, Int32Type.instance.decompose(40)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key6\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key14\",\n                                                                        \"key3\", \"key4\", \"key6\", \"key7\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 5,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertEquals(rows.toString(), 5, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GTE, Int32Type.instance.decompose(35)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key4\", \"key6\", \"key7\" },\n                                                         rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\", \"key3\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(27)),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\" }, rows.toArray(new String[rows.size()])));\n\n        Map<String, Pair<String, Integer>> part4 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key12\", Pair.create((String)null, 12));\n                put(\"key14\", Pair.create(\"Demario\", 42));\n                put(\"key2\", Pair.create(\"Frank\", -1));\n        }};\n\n        store = loadData(part4, forceFlush);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_MATCHES, UTF8Type.instance.decompose(\"Susana\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(13)),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key12\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_MATCHES, UTF8Type.instance.decompose(\"Demario\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(30)));\n        Assert.assertTrue(rows.toString(), rows.size() == 0);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_MATCHES, UTF8Type.instance.decompose(\"Josephine\")));\n        Assert.assertTrue(rows.toString(), rows.size() == 0);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(50)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"ie\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(43)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key1\", \"key10\" }, rows.toArray(new String[rows.size()])));\n    }\n","date":"2016-02-12 03:24:40","endLine":536,"groupId":"5183","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiExpressionQueriesWhereRowSplitBetweenSSTables","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a8/8e5940f8dc20287822e7c5aeb174cbab1c67af.src","preCode":"    private void testMultiExpressionQueriesWhereRowSplitBetweenSSTables(boolean forceFlush) throws Exception\n    {\n        Map<String, Pair<String, Integer>> part1 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create(\"Maxie\", -1));\n                put(\"key1\", Pair.create(\"Chelsie\", 33));\n                put(\"key2\", Pair.create((String)null, 43));\n                put(\"key3\", Pair.create(\"Shanna\", 27));\n                put(\"key4\", Pair.create(\"Amiya\", 36));\n        }};\n\n        loadData(part1, forceFlush); \r\n\n        Map<String, Pair<String, Integer>> part2 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key5\", Pair.create(\"Americo\", 20));\n                put(\"key6\", Pair.create(\"Fiona\", 39));\n                put(\"key7\", Pair.create(\"Francis\", 41));\n                put(\"key8\", Pair.create(\"Charley\", 21));\n                put(\"key9\", Pair.create(\"Amely\", 40));\n                put(\"key14\", Pair.create((String)null, 28));\n        }};\n\n        loadData(part2, forceFlush);\n\n        Map<String, Pair<String, Integer>> part3 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create((String)null, 43));\n                put(\"key10\", Pair.create(\"Eddie\", 42));\n                put(\"key11\", Pair.create(\"Oswaldo\", 35));\n                put(\"key12\", Pair.create(\"Susana\", 35));\n                put(\"key13\", Pair.create(\"Alivia\", 42));\n                put(\"key14\", Pair.create(\"Demario\", -1));\n                put(\"key2\", Pair.create(\"Josephine\", -1));\n        }};\n\n        ColumnFamilyStore store = loadData(part3, forceFlush);\n\n        final ByteBuffer firstName = UTF8Type.instance.decompose(\"first_name\");\n        final ByteBuffer age = UTF8Type.instance.decompose(\"age\");\n\n        Set<String> rows = getIndexed(store, 10,\n                                      buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Fiona\")),\n                                      buildExpression(age, Operator.LT, Int32Type.instance.decompose(40)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key6\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key14\",\n                                                                        \"key3\", \"key4\", \"key6\", \"key7\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 5,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertEquals(rows.toString(), 5, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GTE, Int32Type.instance.decompose(35)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key4\", \"key6\", \"key7\" },\n                                                         rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\", \"key3\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(27)),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\" }, rows.toArray(new String[rows.size()])));\n\n        Map<String, Pair<String, Integer>> part4 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key12\", Pair.create((String)null, 12));\n                put(\"key14\", Pair.create(\"Demario\", 42));\n                put(\"key2\", Pair.create(\"Frank\", -1));\n        }};\n\n        store = loadData(part4, forceFlush);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Susana\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(13)),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key12\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Demario\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(30)));\n        Assert.assertTrue(rows.toString(), rows.size() == 0);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Josephine\")));\n        Assert.assertTrue(rows.toString(), rows.size() == 0);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(50)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"ie\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(43)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key1\", \"key10\" }, rows.toArray(new String[rows.size()])));\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"M"}],"commitId":"479e8aff1346d41ebc05e1a113996a803228284d","commitMessage":"@@@fix EQ semantics of analyzed SASI indexes\n\npatch by xedin; reviewed by beobal for CASSANDRA-11130\n","date":"2016-02-12 03:24:40","modifiedFileCount":"13","status":"M","submitter":"Pavel Yaskevich"},{"authorTime":"2021-03-08 18:31:12","codes":[{"authorDate":"2021-03-08 18:31:12","commitOrder":4,"curCode":"    private void testCrossSSTableQueries(boolean forceFlush)\n    {\n        Map<String, Pair<String, Integer>> part1 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create(\"Maxie\", 43));\n                put(\"key1\", Pair.create(\"Chelsie\", 33));\n                put(\"key2\", Pair.create(\"Josephine\", 43));\n                put(\"key3\", Pair.create(\"Shanna\", 27));\n                put(\"key4\", Pair.create(\"Amiya\", 36));\n            }};\n\n        loadData(part1, forceFlush); \r\n\n        Map<String, Pair<String, Integer>> part2 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key5\", Pair.create(\"Americo\", 20));\n                put(\"key6\", Pair.create(\"Fiona\", 39));\n                put(\"key7\", Pair.create(\"Francis\", 41));\n                put(\"key8\", Pair.create(\"Charley\", 21));\n                put(\"key9\", Pair.create(\"Amely\", 40));\n            }};\n\n        loadData(part2, forceFlush);\n\n        Map<String, Pair<String, Integer>> part3 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key10\", Pair.create(\"Eddie\", 42));\n                put(\"key11\", Pair.create(\"Oswaldo\", 35));\n                put(\"key12\", Pair.create(\"Susana\", 35));\n                put(\"key13\", Pair.create(\"Alivia\", 42));\n                put(\"key14\", Pair.create(\"Demario\", 28));\n            }};\n\n        ColumnFamilyStore store = loadData(part3, forceFlush);\n\n        final ByteBuffer firstName = UTF8Type.instance.decompose(\"first_name\");\n        final ByteBuffer age = UTF8Type.instance.decompose(\"age\");\n\n        Set<String> rows;\n        rows = getIndexed(store, 10, buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Fiona\")),\n                                     buildExpression(age, Operator.LT, Int32Type.instance.decompose(40)));\n\n        assertRows(rows, \"key6\");\n\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        assertRows(rows, \"key0\", \"key11\", \"key12\", \"key13\", \"key14\", \"key3\", \"key4\", \"key6\", \"key7\", \"key8\" );\n\n        rows = getIndexed(store, 5,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        assertRowsSize(rows, 5);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GTE, Int32Type.instance.decompose(35)));\n\n        assertRows(rows, \"key0\", \"key11\", \"key12\", \"key13\", \"key4\", \"key6\", \"key7\");\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        assertRows(rows, \"key14\", \"key3\", \"key8\");\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(27)),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        assertRows(rows, \"key14\");\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n\n        assertRowsSize(rows, 10);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(50)));\n\n        assertRowsSize(rows, 10);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"ie\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(43)));\n\n        assertRows(rows, \"key1\", \"key10\");\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"a\")));\n\n        assertRows(rows, \"key12\", \"key13\", \"key3\", \"key4\", \"key6\");\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(33)));\n\n        assertRows(rows, \"key3\");\n    }\n","date":"2021-03-08 18:31:59","endLine":399,"groupId":"101068","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCrossSSTableQueries","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/33/96e3d86732343cf4348530977ce2e41af0605a.src","preCode":"    private void testCrossSSTableQueries(boolean forceFlush) throws Exception\n    {\n        Map<String, Pair<String, Integer>> part1 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create(\"Maxie\", 43));\n                put(\"key1\", Pair.create(\"Chelsie\", 33));\n                put(\"key2\", Pair.create(\"Josephine\", 43));\n                put(\"key3\", Pair.create(\"Shanna\", 27));\n                put(\"key4\", Pair.create(\"Amiya\", 36));\n            }};\n\n        loadData(part1, forceFlush); \r\n\n        Map<String, Pair<String, Integer>> part2 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key5\", Pair.create(\"Americo\", 20));\n                put(\"key6\", Pair.create(\"Fiona\", 39));\n                put(\"key7\", Pair.create(\"Francis\", 41));\n                put(\"key8\", Pair.create(\"Charley\", 21));\n                put(\"key9\", Pair.create(\"Amely\", 40));\n            }};\n\n        loadData(part2, forceFlush);\n\n        Map<String, Pair<String, Integer>> part3 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key10\", Pair.create(\"Eddie\", 42));\n                put(\"key11\", Pair.create(\"Oswaldo\", 35));\n                put(\"key12\", Pair.create(\"Susana\", 35));\n                put(\"key13\", Pair.create(\"Alivia\", 42));\n                put(\"key14\", Pair.create(\"Demario\", 28));\n            }};\n\n        ColumnFamilyStore store = loadData(part3, forceFlush);\n\n        final ByteBuffer firstName = UTF8Type.instance.decompose(\"first_name\");\n        final ByteBuffer age = UTF8Type.instance.decompose(\"age\");\n\n        Set<String> rows;\n        rows = getIndexed(store, 10, buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Fiona\")),\n                                     buildExpression(age, Operator.LT, Int32Type.instance.decompose(40)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key6\" }, rows.toArray(new String[rows.size()])));\n\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key14\",\n                                                                        \"key3\", \"key4\", \"key6\", \"key7\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 5,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertEquals(rows.toString(), 5, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GTE, Int32Type.instance.decompose(35)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key4\", \"key6\", \"key7\" },\n                                                         rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\", \"key3\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(27)),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(50)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"ie\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(43)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key1\", \"key10\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key12\", \"key13\", \"key3\", \"key4\", \"key6\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(33)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key3\" }, rows.toArray(new String[rows.size()])));\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2021-03-08 18:31:12","commitOrder":4,"curCode":"    private void testMultiExpressionQueriesWhereRowSplitBetweenSSTables(boolean forceFlush)\n    {\n        Map<String, Pair<String, Integer>> part1 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create(\"Maxie\", -1));\n                put(\"key1\", Pair.create(\"Chelsie\", 33));\n                put(\"key2\", Pair.create(null, 43));\n                put(\"key3\", Pair.create(\"Shanna\", 27));\n                put(\"key4\", Pair.create(\"Amiya\", 36));\n        }};\n\n        loadData(part1, forceFlush); \r\n\n        Map<String, Pair<String, Integer>> part2 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key5\", Pair.create(\"Americo\", 20));\n                put(\"key6\", Pair.create(\"Fiona\", 39));\n                put(\"key7\", Pair.create(\"Francis\", 41));\n                put(\"key8\", Pair.create(\"Charley\", 21));\n                put(\"key9\", Pair.create(\"Amely\", 40));\n                put(\"key14\", Pair.create(null, 28));\n        }};\n\n        loadData(part2, forceFlush);\n\n        Map<String, Pair<String, Integer>> part3 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create(null, 43));\n                put(\"key10\", Pair.create(\"Eddie\", 42));\n                put(\"key11\", Pair.create(\"Oswaldo\", 35));\n                put(\"key12\", Pair.create(\"Susana\", 35));\n                put(\"key13\", Pair.create(\"Alivia\", 42));\n                put(\"key14\", Pair.create(\"Demario\", -1));\n                put(\"key2\", Pair.create(\"Josephine\", -1));\n        }};\n\n        ColumnFamilyStore store = loadData(part3, forceFlush);\n\n        final ByteBuffer firstName = UTF8Type.instance.decompose(\"first_name\");\n        final ByteBuffer age = UTF8Type.instance.decompose(\"age\");\n\n        Set<String> rows = getIndexed(store, 10,\n                                      buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Fiona\")),\n                                      buildExpression(age, Operator.LT, Int32Type.instance.decompose(40)));\n\n        assertRows(rows, \"key6\");\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        assertRows(rows, \"key0\", \"key11\", \"key12\", \"key13\", \"key14\", \"key3\", \"key4\", \"key6\", \"key7\", \"key8\");\n\n        rows = getIndexed(store, 5,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        assertRowsSize(rows, 5);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GTE, Int32Type.instance.decompose(35)));\n\n        assertRows(rows, \"key0\", \"key11\", \"key12\", \"key13\", \"key4\", \"key6\", \"key7\");\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        assertRows(rows, \"key14\", \"key3\", \"key8\");\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(27)),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        assertRows(rows, \"key14\");\n\n        Map<String, Pair<String, Integer>> part4 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key12\", Pair.create(null, 12));\n                put(\"key14\", Pair.create(\"Demario\", 42));\n                put(\"key2\", Pair.create(\"Frank\", -1));\n        }};\n\n        store = loadData(part4, forceFlush);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_MATCHES, UTF8Type.instance.decompose(\"Susana\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(13)),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n        assertRows(rows, \"key12\");\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_MATCHES, UTF8Type.instance.decompose(\"Demario\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(30)));\n        assertRowsSize(rows, 0);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_MATCHES, UTF8Type.instance.decompose(\"Josephine\")));\n        assertRowsSize(rows, 0);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n\n        assertRowsSize(rows, 10);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(50)));\n\n        assertRowsSize(rows, 10);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"ie\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(43)));\n\n        assertRows(rows, \"key0\", \"key1\", \"key10\");\n    }\n","date":"2021-03-08 18:31:59","endLine":591,"groupId":"101068","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiExpressionQueriesWhereRowSplitBetweenSSTables","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/33/96e3d86732343cf4348530977ce2e41af0605a.src","preCode":"    private void testMultiExpressionQueriesWhereRowSplitBetweenSSTables(boolean forceFlush) throws Exception\n    {\n        Map<String, Pair<String, Integer>> part1 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create(\"Maxie\", -1));\n                put(\"key1\", Pair.create(\"Chelsie\", 33));\n                put(\"key2\", Pair.create((String)null, 43));\n                put(\"key3\", Pair.create(\"Shanna\", 27));\n                put(\"key4\", Pair.create(\"Amiya\", 36));\n        }};\n\n        loadData(part1, forceFlush); \r\n\n        Map<String, Pair<String, Integer>> part2 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key5\", Pair.create(\"Americo\", 20));\n                put(\"key6\", Pair.create(\"Fiona\", 39));\n                put(\"key7\", Pair.create(\"Francis\", 41));\n                put(\"key8\", Pair.create(\"Charley\", 21));\n                put(\"key9\", Pair.create(\"Amely\", 40));\n                put(\"key14\", Pair.create((String)null, 28));\n        }};\n\n        loadData(part2, forceFlush);\n\n        Map<String, Pair<String, Integer>> part3 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key0\", Pair.create((String)null, 43));\n                put(\"key10\", Pair.create(\"Eddie\", 42));\n                put(\"key11\", Pair.create(\"Oswaldo\", 35));\n                put(\"key12\", Pair.create(\"Susana\", 35));\n                put(\"key13\", Pair.create(\"Alivia\", 42));\n                put(\"key14\", Pair.create(\"Demario\", -1));\n                put(\"key2\", Pair.create(\"Josephine\", -1));\n        }};\n\n        ColumnFamilyStore store = loadData(part3, forceFlush);\n\n        final ByteBuffer firstName = UTF8Type.instance.decompose(\"first_name\");\n        final ByteBuffer age = UTF8Type.instance.decompose(\"age\");\n\n        Set<String> rows = getIndexed(store, 10,\n                                      buildExpression(firstName, Operator.EQ, UTF8Type.instance.decompose(\"Fiona\")),\n                                      buildExpression(age, Operator.LT, Int32Type.instance.decompose(40)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key6\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key14\",\n                                                                        \"key3\", \"key4\", \"key6\", \"key7\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 5,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")));\n\n        Assert.assertEquals(rows.toString(), 5, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GTE, Int32Type.instance.decompose(35)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key11\", \"key12\", \"key13\", \"key4\", \"key6\", \"key7\" },\n                                                         rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\", \"key3\", \"key8\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(27)),\n                          buildExpression(age, Operator.LT, Int32Type.instance.decompose(32)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key14\" }, rows.toArray(new String[rows.size()])));\n\n        Map<String, Pair<String, Integer>> part4 = new HashMap<String, Pair<String, Integer>>()\n        {{\n                put(\"key12\", Pair.create((String)null, 12));\n                put(\"key14\", Pair.create(\"Demario\", 42));\n                put(\"key2\", Pair.create(\"Frank\", -1));\n        }};\n\n        store = loadData(part4, forceFlush);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_MATCHES, UTF8Type.instance.decompose(\"Susana\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(13)),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key12\" }, rows.toArray(new String[rows.size()])));\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_MATCHES, UTF8Type.instance.decompose(\"Demario\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(30)));\n        Assert.assertTrue(rows.toString(), rows.size() == 0);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_MATCHES, UTF8Type.instance.decompose(\"Josephine\")));\n        Assert.assertTrue(rows.toString(), rows.size() == 0);\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.GT, Int32Type.instance.decompose(10)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_CONTAINS, UTF8Type.instance.decompose(\"a\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(50)));\n\n        Assert.assertEquals(rows.toString(), 10, rows.size());\n\n        rows = getIndexed(store, 10,\n                          buildExpression(firstName, Operator.LIKE_SUFFIX, UTF8Type.instance.decompose(\"ie\")),\n                          buildExpression(age, Operator.LTE, Int32Type.instance.decompose(43)));\n\n        Assert.assertTrue(rows.toString(), Arrays.equals(new String[] { \"key0\", \"key1\", \"key10\" }, rows.toArray(new String[rows.size()])));\n    }\n","realPath":"test/unit/org/apache/cassandra/index/sasi/SASIIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":474,"status":"M"}],"commitId":"2aa22ba99dcc1dacb07b7af31b2664e7db839063","commitMessage":"@@@Merge branch cassandra-3.11 into trunk\n","date":"2021-03-08 18:31:59","modifiedFileCount":"1","status":"M","submitter":"Benjamin Lerer"}]
