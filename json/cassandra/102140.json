[{"authorTime":"2018-07-06 06:10:40","codes":[{"authorDate":"2018-07-06 06:10:40","commitOrder":1,"curCode":"    public void testMutableEndpointsForRange()\n    {\n        ImmutableList<Replica> canonical1 = ENDPOINTS_FOR_X.subList(0, ENDPOINTS_FOR_X.size() - 1);\n        EndpointsForRange.Mutable test = new EndpointsForRange.Mutable(R1, canonical1.size());\n        test.addAll(canonical1, Conflict.NONE);\n        try\n        {   \r\n            test.addAll(canonical1, Conflict.NONE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.addAll(canonical1, Conflict.DUPLICATE); \r\n        try\n        {   \r\n            test.add(fullReplica(BROADCAST_EP, R2), Conflict.ALL);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        try\n        {   \r\n            test.add(transientReplica(EP1, R1), Conflict.DUPLICATE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.add(transientReplica(EP1, R1), Conflict.ALL);\n\n        new TestCase<>(test, canonical1).testAll();\n\n        EndpointsForRange view = test.asImmutableView();\n        EndpointsForRange snapshot = view.subList(0, view.size());\n\n        ImmutableList<Replica> canonical2 = ENDPOINTS_FOR_X;\n        test.addAll(canonical2.reverse(), Conflict.DUPLICATE);\n        new TestCase<>(snapshot, canonical1).testAll();\n        new TestCase<>(view, canonical2).testAll();\n        new TestCase<>(test, canonical2).testAll();\n    }\n","date":"2018-09-01 09:34:22","endLine":422,"groupId":"22943","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMutableEndpointsForRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/66/eff237fcdbc22df214bee0142dc4d59b1fd1cd.src","preCode":"    public void testMutableEndpointsForRange()\n    {\n        ImmutableList<Replica> canonical1 = ENDPOINTS_FOR_X.subList(0, ENDPOINTS_FOR_X.size() - 1);\n        EndpointsForRange.Mutable test = new EndpointsForRange.Mutable(R1, canonical1.size());\n        test.addAll(canonical1, Conflict.NONE);\n        try\n        {   \r\n            test.addAll(canonical1, Conflict.NONE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.addAll(canonical1, Conflict.DUPLICATE); \r\n        try\n        {   \r\n            test.add(fullReplica(BROADCAST_EP, R2), Conflict.ALL);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        try\n        {   \r\n            test.add(transientReplica(EP1, R1), Conflict.DUPLICATE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.add(transientReplica(EP1, R1), Conflict.ALL);\n\n        new TestCase<>(test, canonical1).testAll();\n\n        EndpointsForRange view = test.asImmutableView();\n        EndpointsForRange snapshot = view.subList(0, view.size());\n\n        ImmutableList<Replica> canonical2 = ENDPOINTS_FOR_X;\n        test.addAll(canonical2.reverse(), Conflict.DUPLICATE);\n        new TestCase<>(snapshot, canonical1).testAll();\n        new TestCase<>(view, canonical2).testAll();\n        new TestCase<>(test, canonical2).testAll();\n    }\n","realPath":"test/unit/org/apache/cassandra/locator/ReplicaCollectionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"B"},{"authorDate":"2018-07-06 06:10:40","commitOrder":1,"curCode":"    public void testMutableEndpointsForToken()\n    {\n        ImmutableList<Replica> canonical1 = ENDPOINTS_FOR_X.subList(0, ENDPOINTS_FOR_X.size() - 1);\n        EndpointsForToken.Mutable test = new EndpointsForToken.Mutable(tk(1), canonical1.size());\n        test.addAll(canonical1, Conflict.NONE);\n        try\n        {   \r\n            test.addAll(canonical1, Conflict.NONE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.addAll(canonical1, Conflict.DUPLICATE); \r\n        try\n        {   \r\n            test.add(fullReplica(BROADCAST_EP, R2), Conflict.ALL);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        try\n        {   \r\n            test.add(transientReplica(EP1, R1), Conflict.DUPLICATE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.add(transientReplica(EP1, R1), Conflict.ALL);\n\n        new TestCase<>(test, canonical1).testAll();\n\n        EndpointsForToken view = test.asImmutableView();\n        EndpointsForToken snapshot = view.subList(0, view.size());\n\n        ImmutableList<Replica> canonical2 = ENDPOINTS_FOR_X;\n        test.addAll(canonical2.reverse(), Conflict.DUPLICATE);\n        new TestCase<>(snapshot, canonical1).testAll();\n        new TestCase<>(view, canonical2).testAll();\n        new TestCase<>(test, canonical2).testAll();\n    }\n","date":"2018-09-01 09:34:22","endLine":467,"groupId":"12294","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMutableEndpointsForToken","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/66/eff237fcdbc22df214bee0142dc4d59b1fd1cd.src","preCode":"    public void testMutableEndpointsForToken()\n    {\n        ImmutableList<Replica> canonical1 = ENDPOINTS_FOR_X.subList(0, ENDPOINTS_FOR_X.size() - 1);\n        EndpointsForToken.Mutable test = new EndpointsForToken.Mutable(tk(1), canonical1.size());\n        test.addAll(canonical1, Conflict.NONE);\n        try\n        {   \r\n            test.addAll(canonical1, Conflict.NONE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.addAll(canonical1, Conflict.DUPLICATE); \r\n        try\n        {   \r\n            test.add(fullReplica(BROADCAST_EP, R2), Conflict.ALL);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        try\n        {   \r\n            test.add(transientReplica(EP1, R1), Conflict.DUPLICATE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.add(transientReplica(EP1, R1), Conflict.ALL);\n\n        new TestCase<>(test, canonical1).testAll();\n\n        EndpointsForToken view = test.asImmutableView();\n        EndpointsForToken snapshot = view.subList(0, view.size());\n\n        ImmutableList<Replica> canonical2 = ENDPOINTS_FOR_X;\n        test.addAll(canonical2.reverse(), Conflict.DUPLICATE);\n        new TestCase<>(snapshot, canonical1).testAll();\n        new TestCase<>(view, canonical2).testAll();\n        new TestCase<>(test, canonical2).testAll();\n    }\n","realPath":"test/unit/org/apache/cassandra/locator/ReplicaCollectionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"B"}],"commitId":"f7431b432875e334170ccdb19934d05545d2cebd","commitMessage":"@@@Transient Replication and Cheap Quorums\n\nPatch by Blake Eggleston.  Benedict Elliott Smith.  Marcus Eriksson.  Alex Petrov.  Ariel Weisberg; Reviewed by Blake Eggleston.  Marcus Eriksson.  Benedict Elliott Smith.  Alex Petrov.  Ariel Weisberg for CASSANDRA-14404\n\nCo-authored-by: Blake Eggleston <bdeggleston@gmail.com>\nCo-authored-by: Benedict Elliott Smith <benedict@apache.org>\nCo-authored-by: Marcus Eriksson <marcuse@apache.org>\nCo-authored-by: Alex Petrov <oleksandr.petrov@gmail.com>\n","date":"2018-09-01 09:34:22","modifiedFileCount":"230","status":"B","submitter":"Ariel Weisberg"},{"authorTime":"2018-09-08 02:28:16","codes":[{"authorDate":"2018-09-08 02:28:16","commitOrder":2,"curCode":"    public void testMutableEndpointsForRange()\n    {\n        ImmutableList<Replica> canonical1 = ENDPOINTS_FOR_X.subList(0, ENDPOINTS_FOR_X.size() - 1);\n        EndpointsForRange.Builder test = new EndpointsForRange.Builder(R1, canonical1.size());\n        test.addAll(canonical1, Conflict.NONE);\n        try\n        {   \r\n            test.addAll(canonical1, Conflict.NONE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.addAll(canonical1, Conflict.DUPLICATE); \r\n        try\n        {   \r\n            test.add(fullReplica(BROADCAST_EP, R2), Conflict.ALL);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        try\n        {   \r\n            test.add(transientReplica(EP1, R1), Conflict.DUPLICATE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.add(transientReplica(EP1, R1), Conflict.ALL);\n\n        new EndpointsTestCase<>(true, test, canonical1).testAll();\n\n        EndpointsForRange snapshot = test.subList(0, test.size());\n\n        ImmutableList<Replica> canonical2 = ENDPOINTS_FOR_X;\n        test.addAll(canonical2.reverse(), Conflict.DUPLICATE);\n        new EndpointsTestCase<>(false, snapshot, canonical1).testAll();\n        new EndpointsTestCase<>(true, test, canonical2).testAll();\n    }\n","date":"2018-10-03 21:38:22","endLine":568,"groupId":"102140","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMutableEndpointsForRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ce/d49e2fa4b5702a52f1b00b2de4f2ef9fbbeda5.src","preCode":"    public void testMutableEndpointsForRange()\n    {\n        ImmutableList<Replica> canonical1 = ENDPOINTS_FOR_X.subList(0, ENDPOINTS_FOR_X.size() - 1);\n        EndpointsForRange.Mutable test = new EndpointsForRange.Mutable(R1, canonical1.size());\n        test.addAll(canonical1, Conflict.NONE);\n        try\n        {   \r\n            test.addAll(canonical1, Conflict.NONE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.addAll(canonical1, Conflict.DUPLICATE); \r\n        try\n        {   \r\n            test.add(fullReplica(BROADCAST_EP, R2), Conflict.ALL);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        try\n        {   \r\n            test.add(transientReplica(EP1, R1), Conflict.DUPLICATE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.add(transientReplica(EP1, R1), Conflict.ALL);\n\n        new TestCase<>(test, canonical1).testAll();\n\n        EndpointsForRange view = test.asImmutableView();\n        EndpointsForRange snapshot = view.subList(0, view.size());\n\n        ImmutableList<Replica> canonical2 = ENDPOINTS_FOR_X;\n        test.addAll(canonical2.reverse(), Conflict.DUPLICATE);\n        new TestCase<>(snapshot, canonical1).testAll();\n        new TestCase<>(view, canonical2).testAll();\n        new TestCase<>(test, canonical2).testAll();\n    }\n","realPath":"test/unit/org/apache/cassandra/locator/ReplicaCollectionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":537,"status":"M"},{"authorDate":"2018-09-08 02:28:16","commitOrder":2,"curCode":"    public void testMutableEndpointsForToken()\n    {\n        ImmutableList<Replica> canonical1 = ENDPOINTS_FOR_X.subList(0, ENDPOINTS_FOR_X.size() - 1);\n        EndpointsForToken.Builder test = new EndpointsForToken.Builder(tk(1), canonical1.size());\n        test.addAll(canonical1, Conflict.NONE);\n        try\n        {   \r\n            test.addAll(canonical1, Conflict.NONE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.addAll(canonical1, Conflict.DUPLICATE); \r\n        try\n        {   \r\n            test.add(fullReplica(BROADCAST_EP, R2), Conflict.ALL);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        try\n        {   \r\n            test.add(transientReplica(EP1, R1), Conflict.DUPLICATE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.add(transientReplica(EP1, R1), Conflict.ALL);\n\n        new EndpointsTestCase<>(true, test, canonical1).testAll();\n\n        EndpointsForToken snapshot = test.subList(0, test.size());\n\n        ImmutableList<Replica> canonical2 = ENDPOINTS_FOR_X;\n        test.addAll(canonical2.reverse(), Conflict.DUPLICATE);\n        new EndpointsTestCase<>(false, snapshot, canonical1).testAll();\n        new EndpointsTestCase<>(true, test, canonical2).testAll();\n    }\n","date":"2018-10-03 21:38:22","endLine":611,"groupId":"102140","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMutableEndpointsForToken","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ce/d49e2fa4b5702a52f1b00b2de4f2ef9fbbeda5.src","preCode":"    public void testMutableEndpointsForToken()\n    {\n        ImmutableList<Replica> canonical1 = ENDPOINTS_FOR_X.subList(0, ENDPOINTS_FOR_X.size() - 1);\n        EndpointsForToken.Mutable test = new EndpointsForToken.Mutable(tk(1), canonical1.size());\n        test.addAll(canonical1, Conflict.NONE);\n        try\n        {   \r\n            test.addAll(canonical1, Conflict.NONE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.addAll(canonical1, Conflict.DUPLICATE); \r\n        try\n        {   \r\n            test.add(fullReplica(BROADCAST_EP, R2), Conflict.ALL);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        try\n        {   \r\n            test.add(transientReplica(EP1, R1), Conflict.DUPLICATE);\n            Assert.fail();\n        } catch (IllegalArgumentException e) { }\n        test.add(transientReplica(EP1, R1), Conflict.ALL);\n\n        new TestCase<>(test, canonical1).testAll();\n\n        EndpointsForToken view = test.asImmutableView();\n        EndpointsForToken snapshot = view.subList(0, view.size());\n\n        ImmutableList<Replica> canonical2 = ENDPOINTS_FOR_X;\n        test.addAll(canonical2.reverse(), Conflict.DUPLICATE);\n        new TestCase<>(snapshot, canonical1).testAll();\n        new TestCase<>(view, canonical2).testAll();\n        new TestCase<>(test, canonical2).testAll();\n    }\n","realPath":"test/unit/org/apache/cassandra/locator/ReplicaCollectionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":580,"status":"M"}],"commitId":"e645b9172c5d50fc2af407de724e46121edfe109","commitMessage":"@@@ReplicaCollection follow-up\n\npatch by Benedict; reviewed by Alex Petrov and Ariel Weisberg for CASSANDRA-14726\n","date":"2018-10-03 21:38:22","modifiedFileCount":"33","status":"M","submitter":"Benedict Elliott Smith"}]
