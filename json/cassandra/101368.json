[{"authorTime":"2018-07-06 06:10:40","codes":[{"authorDate":"2018-07-06 06:10:40","commitOrder":2,"curCode":"    public void readSpeculationCycle()\n    {\n        InstrumentedReadRepair repair = createInstrumentedReadRepair(replicaLayout(replicas, EndpointsForRange.of(replica1, replica2)));\n        ResultConsumer consumer = new ResultConsumer();\n\n        Assert.assertEquals(epSet(), repair.getReadRecipients());\n        repair.startRepair(null, consumer);\n\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n        repair.maybeSendAdditionalReads();\n        Assert.assertEquals(epSet(target1, target2, target3), repair.getReadRecipients());\n        Assert.assertNull(consumer.result);\n    }\n","date":"2018-09-01 09:34:22","endLine":283,"groupId":"5375","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"readSpeculationCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/7e/6ee292c5ee99955a3ce6242ee06d6d09157dc7.src","preCode":"    public void readSpeculationCycle()\n    {\n        InstrumentedReadRepair repair = createInstrumentedReadRepair(replicaLayout(replicas, EndpointsForRange.of(replica1, replica2)));\n        ResultConsumer consumer = new ResultConsumer();\n\n        Assert.assertEquals(epSet(), repair.getReadRecipients());\n        repair.startRepair(null, consumer);\n\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n        repair.maybeSendAdditionalReads();\n        Assert.assertEquals(epSet(target1, target2, target3), repair.getReadRecipients());\n        Assert.assertNull(consumer.result);\n    }\n","realPath":"test/unit/org/apache/cassandra/service/reads/repair/AbstractReadRepairTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"MB"},{"authorDate":"2018-07-06 06:10:40","commitOrder":2,"curCode":"    public void noSpeculationRequired()\n    {\n        InstrumentedReadRepair repair = createInstrumentedReadRepair(replicaLayout(replicas, EndpointsForRange.of(replica1, replica2)));\n        ResultConsumer consumer = new ResultConsumer();\n\n        Assert.assertEquals(epSet(), repair.getReadRecipients());\n        repair.startRepair(null, consumer);\n\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n        repair.getReadCallback().response(msg(target1, cell1));\n        repair.getReadCallback().response(msg(target2, cell1));\n\n        repair.maybeSendAdditionalReads();\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n\n        repair.awaitReads();\n\n        assertPartitionsEqual(partition(cell1), consumer.result);\n    }\n","date":"2018-09-01 09:34:22","endLine":308,"groupId":"5375","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"noSpeculationRequired","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/7e/6ee292c5ee99955a3ce6242ee06d6d09157dc7.src","preCode":"    public void noSpeculationRequired()\n    {\n        InstrumentedReadRepair repair = createInstrumentedReadRepair(replicaLayout(replicas, EndpointsForRange.of(replica1, replica2)));\n        ResultConsumer consumer = new ResultConsumer();\n\n        Assert.assertEquals(epSet(), repair.getReadRecipients());\n        repair.startRepair(null, consumer);\n\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n        repair.getReadCallback().response(msg(target1, cell1));\n        repair.getReadCallback().response(msg(target2, cell1));\n\n        repair.maybeSendAdditionalReads();\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n\n        repair.awaitReads();\n\n        assertPartitionsEqual(partition(cell1), consumer.result);\n    }\n","realPath":"test/unit/org/apache/cassandra/service/reads/repair/AbstractReadRepairTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"MB"}],"commitId":"f7431b432875e334170ccdb19934d05545d2cebd","commitMessage":"@@@Transient Replication and Cheap Quorums\n\nPatch by Blake Eggleston.  Benedict Elliott Smith.  Marcus Eriksson.  Alex Petrov.  Ariel Weisberg; Reviewed by Blake Eggleston.  Marcus Eriksson.  Benedict Elliott Smith.  Alex Petrov.  Ariel Weisberg for CASSANDRA-14404\n\nCo-authored-by: Blake Eggleston <bdeggleston@gmail.com>\nCo-authored-by: Benedict Elliott Smith <benedict@apache.org>\nCo-authored-by: Marcus Eriksson <marcuse@apache.org>\nCo-authored-by: Alex Petrov <oleksandr.petrov@gmail.com>\n","date":"2018-09-01 09:34:22","modifiedFileCount":"230","status":"M","submitter":"Ariel Weisberg"},{"authorTime":"2018-09-07 18:41:28","codes":[{"authorDate":"2018-09-07 18:41:28","commitOrder":3,"curCode":"    public void readSpeculationCycle()\n    {\n        InstrumentedReadRepair repair = createInstrumentedReadRepair(ReplicaPlan.shared(replicaPlan(replicas, EndpointsForRange.of(replica1, replica2))));\n        ResultConsumer consumer = new ResultConsumer();\n\n        Assert.assertEquals(epSet(), repair.getReadRecipients());\n        repair.startRepair(null, consumer);\n\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n        repair.maybeSendAdditionalReads();\n        Assert.assertEquals(epSet(target1, target2, target3), repair.getReadRecipients());\n        Assert.assertNull(consumer.result);\n    }\n","date":"2018-09-14 17:14:37","endLine":293,"groupId":"5375","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"readSpeculationCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/51/15581398dd1b90e81d58bd5f3d170dd6b75da6.src","preCode":"    public void readSpeculationCycle()\n    {\n        InstrumentedReadRepair repair = createInstrumentedReadRepair(replicaLayout(replicas, EndpointsForRange.of(replica1, replica2)));\n        ResultConsumer consumer = new ResultConsumer();\n\n        Assert.assertEquals(epSet(), repair.getReadRecipients());\n        repair.startRepair(null, consumer);\n\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n        repair.maybeSendAdditionalReads();\n        Assert.assertEquals(epSet(target1, target2, target3), repair.getReadRecipients());\n        Assert.assertNull(consumer.result);\n    }\n","realPath":"test/unit/org/apache/cassandra/service/reads/repair/AbstractReadRepairTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"M"},{"authorDate":"2018-09-07 18:41:28","commitOrder":3,"curCode":"    public void noSpeculationRequired()\n    {\n        InstrumentedReadRepair repair = createInstrumentedReadRepair(ReplicaPlan.shared(replicaPlan(replicas, EndpointsForRange.of(replica1, replica2))));\n        ResultConsumer consumer = new ResultConsumer();\n\n        Assert.assertEquals(epSet(), repair.getReadRecipients());\n        repair.startRepair(null, consumer);\n\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n        repair.getReadCallback().response(msg(target1, cell1));\n        repair.getReadCallback().response(msg(target2, cell1));\n\n        repair.maybeSendAdditionalReads();\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n\n        repair.awaitReads();\n\n        assertPartitionsEqual(partition(cell1), consumer.result);\n    }\n","date":"2018-09-14 17:14:37","endLine":318,"groupId":"5375","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"noSpeculationRequired","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/51/15581398dd1b90e81d58bd5f3d170dd6b75da6.src","preCode":"    public void noSpeculationRequired()\n    {\n        InstrumentedReadRepair repair = createInstrumentedReadRepair(replicaLayout(replicas, EndpointsForRange.of(replica1, replica2)));\n        ResultConsumer consumer = new ResultConsumer();\n\n        Assert.assertEquals(epSet(), repair.getReadRecipients());\n        repair.startRepair(null, consumer);\n\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n        repair.getReadCallback().response(msg(target1, cell1));\n        repair.getReadCallback().response(msg(target2, cell1));\n\n        repair.maybeSendAdditionalReads();\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n\n        repair.awaitReads();\n\n        assertPartitionsEqual(partition(cell1), consumer.result);\n    }\n","realPath":"test/unit/org/apache/cassandra/service/reads/repair/AbstractReadRepairTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"}],"commitId":"047bcd7ad171d6a4aa89128c5e6c6ed5f012b1c0","commitMessage":"@@@ReplicaPlan/Layout refactor follow-up/completion\n\nFinish much of the work to clarify endpoint selection\nthat was begun in Transient Replication (CASSANDRA-14404)\n\nAlso fixes:\n  - commitPaxos was incorrectly selecting only live nodes. \n    when needed to include down\n  - We were not writing to pending transient replicas\n  - On write.  we were not hinting to full nodes with transient\n    replication\n  - rr.maybeSendAdditional{Reads. Writes} would only consult the\n    same node we may have speculated a read to\n  - transient->full movements mishandled consistency level upgrade by\n    retaining the 'full' pending variant.  which increased CL requirement;\n    instead.  the 'natural' replica is upgraded to 'full' for writes\n\npatch by Benedict; reviewed by Alex Petrov and Ariel Weisberg for CASSANDRA-14705\n","date":"2018-09-14 17:14:37","modifiedFileCount":"53","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2019-06-12 23:26:54","codes":[{"authorDate":"2018-09-07 18:41:28","commitOrder":4,"curCode":"    public void readSpeculationCycle()\n    {\n        InstrumentedReadRepair repair = createInstrumentedReadRepair(ReplicaPlan.shared(replicaPlan(replicas, EndpointsForRange.of(replica1, replica2))));\n        ResultConsumer consumer = new ResultConsumer();\n\n        Assert.assertEquals(epSet(), repair.getReadRecipients());\n        repair.startRepair(null, consumer);\n\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n        repair.maybeSendAdditionalReads();\n        Assert.assertEquals(epSet(target1, target2, target3), repair.getReadRecipients());\n        Assert.assertNull(consumer.result);\n    }\n","date":"2018-09-14 17:14:37","endLine":293,"groupId":"101368","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"readSpeculationCycle","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/51/15581398dd1b90e81d58bd5f3d170dd6b75da6.src","preCode":"    public void readSpeculationCycle()\n    {\n        InstrumentedReadRepair repair = createInstrumentedReadRepair(ReplicaPlan.shared(replicaPlan(replicas, EndpointsForRange.of(replica1, replica2))));\n        ResultConsumer consumer = new ResultConsumer();\n\n        Assert.assertEquals(epSet(), repair.getReadRecipients());\n        repair.startRepair(null, consumer);\n\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n        repair.maybeSendAdditionalReads();\n        Assert.assertEquals(epSet(target1, target2, target3), repair.getReadRecipients());\n        Assert.assertNull(consumer.result);\n    }\n","realPath":"test/unit/org/apache/cassandra/service/reads/repair/AbstractReadRepairTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"N"},{"authorDate":"2019-06-12 23:26:54","commitOrder":4,"curCode":"    public void noSpeculationRequired()\n    {\n        InstrumentedReadRepair repair = createInstrumentedReadRepair(ReplicaPlan.shared(replicaPlan(replicas, EndpointsForRange.of(replica1, replica2))));\n        ResultConsumer consumer = new ResultConsumer();\n\n        Assert.assertEquals(epSet(), repair.getReadRecipients());\n        repair.startRepair(null, consumer);\n\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n        repair.getReadCallback().onResponse(msg(target1, cell1));\n        repair.getReadCallback().onResponse(msg(target2, cell1));\n\n        repair.maybeSendAdditionalReads();\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n\n        repair.awaitReads();\n\n        assertPartitionsEqual(partition(cell1), consumer.result);\n    }\n","date":"2019-06-12 23:26:54","endLine":314,"groupId":"101368","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"noSpeculationRequired","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/3d/3973273cab6efab04b273a1f8a302698e455ea.src","preCode":"    public void noSpeculationRequired()\n    {\n        InstrumentedReadRepair repair = createInstrumentedReadRepair(ReplicaPlan.shared(replicaPlan(replicas, EndpointsForRange.of(replica1, replica2))));\n        ResultConsumer consumer = new ResultConsumer();\n\n        Assert.assertEquals(epSet(), repair.getReadRecipients());\n        repair.startRepair(null, consumer);\n\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n        repair.getReadCallback().response(msg(target1, cell1));\n        repair.getReadCallback().response(msg(target2, cell1));\n\n        repair.maybeSendAdditionalReads();\n        Assert.assertEquals(epSet(target1, target2), repair.getReadRecipients());\n\n        repair.awaitReads();\n\n        assertPartitionsEqual(partition(cell1), consumer.result);\n    }\n","realPath":"test/unit/org/apache/cassandra/service/reads/repair/AbstractReadRepairTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"}],"commitId":"310a48efcfdc0fb77fbd5fd6e734bf17667f617d","commitMessage":"@@@Rewrite the internode messaging subsystem\n\npatch by Aleksey Yeschenko and Benedict Elliott Smith; reviewed by Alex\nPetrov.  Aleksey Yeschenko.  and Benedict Elliott Smith for CASSANDRA-15066\n\nCo-authored-by: Aleksey Yeschenko <aleksey@apache.org>\nCo-authored-by: Benedict Elliott Smith <benedict@apache.org>\n","date":"2019-06-12 23:26:54","modifiedFileCount":"253","status":"M","submitter":"Benedict Elliott Smith"}]
