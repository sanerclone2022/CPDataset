[{"authorTime":"2018-07-06 06:10:40","codes":[{"authorDate":"2018-07-06 06:10:40","commitOrder":1,"curCode":"    public Pair<RangesAtEndpoint, RangesAtEndpoint> calculateStreamAndFetchRangesMoveBackwardBetween() throws Exception\n    {\n        Range<Token> aPrimeRange = new Range<>(elevenToken, fourteenToken);\n\n        RangesAtEndpoint updated = RangesAtEndpoint.of(\n            new Replica(aAddress, aPrimeRange, true),\n            new Replica(aAddress, dRange, true),\n            new Replica(aAddress, cRange, false)\n        );\n\n\n        Pair<RangesAtEndpoint, RangesAtEndpoint> result = StorageService.calculateStreamAndFetchRanges(current, updated);\n        assertContentsIgnoreOrder(result.left, fullReplica(aAddress, oneToken, threeToken), fullReplica(aAddress, fourteenToken, oneToken));\n        assertContentsIgnoreOrder(result.right, transientReplica(aAddress, sixToken, nineToken), fullReplica(aAddress, nineToken, elevenToken));\n        return result;\n    }\n","date":"2018-09-01 09:34:22","endLine":183,"groupId":"2063","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"calculateStreamAndFetchRangesMoveBackwardBetween","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/1e/247358c736e3495a4d0e90228cb4c9b3816742.src","preCode":"    public Pair<RangesAtEndpoint, RangesAtEndpoint> calculateStreamAndFetchRangesMoveBackwardBetween() throws Exception\n    {\n        Range<Token> aPrimeRange = new Range<>(elevenToken, fourteenToken);\n\n        RangesAtEndpoint updated = RangesAtEndpoint.of(\n            new Replica(aAddress, aPrimeRange, true),\n            new Replica(aAddress, dRange, true),\n            new Replica(aAddress, cRange, false)\n        );\n\n\n        Pair<RangesAtEndpoint, RangesAtEndpoint> result = StorageService.calculateStreamAndFetchRanges(current, updated);\n        assertContentsIgnoreOrder(result.left, fullReplica(aAddress, oneToken, threeToken), fullReplica(aAddress, fourteenToken, oneToken));\n        assertContentsIgnoreOrder(result.right, transientReplica(aAddress, sixToken, nineToken), fullReplica(aAddress, nineToken, elevenToken));\n        return result;\n    }\n","realPath":"test/unit/org/apache/cassandra/service/MoveTransientTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"B"},{"authorDate":"2018-07-06 06:10:40","commitOrder":1,"curCode":"    private Pair<RangesAtEndpoint, RangesAtEndpoint> calculateStreamAndFetchRangesMoveForwardBetween() throws Exception\n    {\n        Range<Token> aPrimeRange = new Range<>(sixToken, sevenToken);\n        Range<Token> bPrimeRange = new Range<>(oneToken, sixToken);\n\n\n        RangesAtEndpoint updated = RangesAtEndpoint.of(\n            new Replica(aAddress, aPrimeRange, true),\n            new Replica(aAddress, bPrimeRange, true),\n            new Replica(aAddress, eRange, false)\n        );\n\n        Pair<RangesAtEndpoint, RangesAtEndpoint> result = StorageService.calculateStreamAndFetchRanges(current, updated);\n\n        assertContentsIgnoreOrder(result.left, fullReplica(aAddress, elevenToken, oneToken), transientReplica(aAddress, nineToken, elevenToken));\n        assertContentsIgnoreOrder(result.right, fullReplica(aAddress, threeToken, sixToken), fullReplica(aAddress, sixToken, sevenToken));\n        return result;\n    }\n","date":"2018-09-01 09:34:22","endLine":241,"groupId":"2063","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"calculateStreamAndFetchRangesMoveForwardBetween","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/1e/247358c736e3495a4d0e90228cb4c9b3816742.src","preCode":"    private Pair<RangesAtEndpoint, RangesAtEndpoint> calculateStreamAndFetchRangesMoveForwardBetween() throws Exception\n    {\n        Range<Token> aPrimeRange = new Range<>(sixToken, sevenToken);\n        Range<Token> bPrimeRange = new Range<>(oneToken, sixToken);\n\n\n        RangesAtEndpoint updated = RangesAtEndpoint.of(\n            new Replica(aAddress, aPrimeRange, true),\n            new Replica(aAddress, bPrimeRange, true),\n            new Replica(aAddress, eRange, false)\n        );\n\n        Pair<RangesAtEndpoint, RangesAtEndpoint> result = StorageService.calculateStreamAndFetchRanges(current, updated);\n\n        assertContentsIgnoreOrder(result.left, fullReplica(aAddress, elevenToken, oneToken), transientReplica(aAddress, nineToken, elevenToken));\n        assertContentsIgnoreOrder(result.right, fullReplica(aAddress, threeToken, sixToken), fullReplica(aAddress, sixToken, sevenToken));\n        return result;\n    }\n","realPath":"test/unit/org/apache/cassandra/service/MoveTransientTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"B"}],"commitId":"f7431b432875e334170ccdb19934d05545d2cebd","commitMessage":"@@@Transient Replication and Cheap Quorums\n\nPatch by Blake Eggleston.  Benedict Elliott Smith.  Marcus Eriksson.  Alex Petrov.  Ariel Weisberg; Reviewed by Blake Eggleston.  Marcus Eriksson.  Benedict Elliott Smith.  Alex Petrov.  Ariel Weisberg for CASSANDRA-14404\n\nCo-authored-by: Blake Eggleston <bdeggleston@gmail.com>\nCo-authored-by: Benedict Elliott Smith <benedict@apache.org>\nCo-authored-by: Marcus Eriksson <marcuse@apache.org>\nCo-authored-by: Alex Petrov <oleksandr.petrov@gmail.com>\n","date":"2018-09-01 09:34:22","modifiedFileCount":"230","status":"B","submitter":"Ariel Weisberg"},{"authorTime":"2018-09-17 17:51:56","codes":[{"authorDate":"2018-09-17 17:51:56","commitOrder":2,"curCode":"    public Pair<RangesAtEndpoint, RangesAtEndpoint> calculateStreamAndFetchRangesMoveBackwardBetween() throws Exception\n    {\n        Range<Token> aPrimeRange = new Range<>(elevenToken, fourteenToken);\n\n        RangesAtEndpoint updated = RangesAtEndpoint.of(\n            new Replica(address01, aPrimeRange, true),\n            new Replica(address01, range_9_11, true),\n            new Replica(address01, range_6_9, false)\n        );\n\n\n        Pair<RangesAtEndpoint, RangesAtEndpoint> result = RangeRelocator.calculateStreamAndFetchRanges(current, updated);\n        assertContentsIgnoreOrder(result.left, fullReplica(address01, oneToken, threeToken), fullReplica(address01, fourteenToken, oneToken));\n        assertContentsIgnoreOrder(result.right, transientReplica(address01, sixToken, nineToken), fullReplica(address01, nineToken, elevenToken));\n        return result;\n    }\n","date":"2018-09-26 17:42:46","endLine":222,"groupId":"101435","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"calculateStreamAndFetchRangesMoveBackwardBetween","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/e5/a63c7d20cfcd4445401b4c3036784b605b9f29.src","preCode":"    public Pair<RangesAtEndpoint, RangesAtEndpoint> calculateStreamAndFetchRangesMoveBackwardBetween() throws Exception\n    {\n        Range<Token> aPrimeRange = new Range<>(elevenToken, fourteenToken);\n\n        RangesAtEndpoint updated = RangesAtEndpoint.of(\n            new Replica(aAddress, aPrimeRange, true),\n            new Replica(aAddress, dRange, true),\n            new Replica(aAddress, cRange, false)\n        );\n\n\n        Pair<RangesAtEndpoint, RangesAtEndpoint> result = StorageService.calculateStreamAndFetchRanges(current, updated);\n        assertContentsIgnoreOrder(result.left, fullReplica(aAddress, oneToken, threeToken), fullReplica(aAddress, fourteenToken, oneToken));\n        assertContentsIgnoreOrder(result.right, transientReplica(aAddress, sixToken, nineToken), fullReplica(aAddress, nineToken, elevenToken));\n        return result;\n    }\n","realPath":"test/unit/org/apache/cassandra/service/MoveTransientTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2018-09-17 17:51:56","commitOrder":2,"curCode":"    private Pair<RangesAtEndpoint, RangesAtEndpoint> calculateStreamAndFetchRangesMoveForwardBetween() throws Exception\n    {\n        Range<Token> aPrimeRange = new Range<>(sixToken, sevenToken);\n        Range<Token> bPrimeRange = new Range<>(oneToken, sixToken);\n\n        RangesAtEndpoint updated = RangesAtEndpoint.of(\n            new Replica(address01, aPrimeRange, true),\n            new Replica(address01, bPrimeRange, true),\n            new Replica(address01, range_11_1, false)\n        );\n\n        Pair<RangesAtEndpoint, RangesAtEndpoint> result = RangeRelocator.calculateStreamAndFetchRanges(current, updated);\n\n        assertContentsIgnoreOrder(result.left, fullReplica(address01, elevenToken, oneToken), transientReplica(address01, nineToken, elevenToken));\n        assertContentsIgnoreOrder(result.right, fullReplica(address01, threeToken, sixToken), fullReplica(address01, sixToken, sevenToken));\n        return result;\n    }\n","date":"2018-09-26 17:42:46","endLine":279,"groupId":"101435","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"calculateStreamAndFetchRangesMoveForwardBetween","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/e5/a63c7d20cfcd4445401b4c3036784b605b9f29.src","preCode":"    private Pair<RangesAtEndpoint, RangesAtEndpoint> calculateStreamAndFetchRangesMoveForwardBetween() throws Exception\n    {\n        Range<Token> aPrimeRange = new Range<>(sixToken, sevenToken);\n        Range<Token> bPrimeRange = new Range<>(oneToken, sixToken);\n\n\n        RangesAtEndpoint updated = RangesAtEndpoint.of(\n            new Replica(aAddress, aPrimeRange, true),\n            new Replica(aAddress, bPrimeRange, true),\n            new Replica(aAddress, eRange, false)\n        );\n\n        Pair<RangesAtEndpoint, RangesAtEndpoint> result = StorageService.calculateStreamAndFetchRanges(current, updated);\n\n        assertContentsIgnoreOrder(result.left, fullReplica(aAddress, elevenToken, oneToken), transientReplica(aAddress, nineToken, elevenToken));\n        assertContentsIgnoreOrder(result.right, fullReplica(aAddress, threeToken, sixToken), fullReplica(aAddress, sixToken, sevenToken));\n        return result;\n    }\n","realPath":"test/unit/org/apache/cassandra/service/MoveTransientTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"}],"commitId":"0379201c7057f6bac4abf1e0f3d81a12d90abd08","commitMessage":"@@@Transient replication: range movement improvements\n\nPatch by Alex Petrov; reviewed by Ariel Weisberg and Benedict Elliott Smith for CASSANDRA-14756","date":"2018-09-26 17:42:46","modifiedFileCount":"15","status":"M","submitter":"Alex Petrov"}]
