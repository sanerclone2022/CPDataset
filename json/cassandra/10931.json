[{"authorTime":"2021-03-01 20:48:32","codes":[{"authorDate":"2021-03-01 20:48:32","commitOrder":1,"curCode":"    public void testSelectSimpleColumnWithMetadata()\n    {\n        Consumer<ColumnFilter> check = filter -> {\n            testRoundTrips(filter);\n            assertFetchedQueried(true, true, filter, v1);\n            if (\"3.0\".equals(clusterMinVersion))\n            {\n                assertEquals(\"*/*\", filter.toString());\n                assertFetchedQueried(true, true, filter, s1, s2, v2);\n                assertCellFetchedQueried(true, true, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(true, true, filter, s2, path0, path1, path2, path3, path4);\n            }\n            else if (\"3.11\".equals(clusterMinVersion))\n            {\n                assertEquals(\"*/[v1]\", filter.toString());\n                assertFetchedQueried(true, false, filter, s1, s2, v2);\n                assertCellFetchedQueried(true, false, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(true, false, filter, s2, path0, path1, path2, path3, path4);\n            }\n            else\n            {\n                assertEquals(\"<all regulars>/[v1]\", filter.toString());\n                assertFetchedQueried(true, false, filter, v2);\n                assertFetchedQueried(false, false, filter, s1, s2);\n                assertCellFetchedQueried(true, false, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n            }\n        };\n\n        check.accept(ColumnFilter.selection(metadata, RegularAndStaticColumns.builder().add(v1).build()));\n        check.accept(ColumnFilter.allRegularColumnsBuilder(metadata).add(v1).build());\n    }\n","date":"2021-03-01 20:48:32","endLine":317,"groupId":"14023","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectSimpleColumnWithMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a9/6aa57e16442e94530ea996f66846c7d2ed0b5e.src","preCode":"    public void testSelectSimpleColumnWithMetadata()\n    {\n        Consumer<ColumnFilter> check = filter -> {\n            testRoundTrips(filter);\n            assertFetchedQueried(true, true, filter, v1);\n            if (\"3.0\".equals(clusterMinVersion))\n            {\n                assertEquals(\"*/*\", filter.toString());\n                assertFetchedQueried(true, true, filter, s1, s2, v2);\n                assertCellFetchedQueried(true, true, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(true, true, filter, s2, path0, path1, path2, path3, path4);\n            }\n            else if (\"3.11\".equals(clusterMinVersion))\n            {\n                assertEquals(\"*/[v1]\", filter.toString());\n                assertFetchedQueried(true, false, filter, s1, s2, v2);\n                assertCellFetchedQueried(true, false, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(true, false, filter, s2, path0, path1, path2, path3, path4);\n            }\n            else\n            {\n                assertEquals(\"<all regulars>/[v1]\", filter.toString());\n                assertFetchedQueried(true, false, filter, v2);\n                assertFetchedQueried(false, false, filter, s1, s2);\n                assertCellFetchedQueried(true, false, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n            }\n        };\n\n        check.accept(ColumnFilter.selection(metadata, RegularAndStaticColumns.builder().add(v1).build()));\n        check.accept(ColumnFilter.allRegularColumnsBuilder(metadata).add(v1).build());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"B"},{"authorDate":"2021-03-01 20:48:32","commitOrder":1,"curCode":"    public void testSelectCellWithMetadata()\n    {\n        ColumnFilter filter = ColumnFilter.allRegularColumnsBuilder(metadata).select(v2, path1).build();\n        testRoundTrips(filter);\n        assertFetchedQueried(true, true, filter, v2);\n        if (\"3.0\".equals(clusterMinVersion))\n        {\n            assertEquals(\"*/*\", filter.toString());\n            assertFetchedQueried(true, true, filter, s1, s2, v1);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(true, true, filter, s2, path0, path1, path2, path3, path4);\n        }\n        else if (\"3.11\".equals(clusterMinVersion))\n        {\n            assertEquals(\"*/[v2[1]]\", filter.toString());\n            assertFetchedQueried(true, false, filter, s1, s2, v1);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(true, false, filter, s2, path0, path1, path2, path3, path4);\n        }\n        else\n        {\n            assertEquals(\"<all regulars>/[v2[1]]\", filter.toString());\n            assertFetchedQueried(true, false, filter, v1);\n            assertFetchedQueried(false, false, filter, s1, s2);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n        }\n    }\n","date":"2021-03-01 20:48:32","endLine":384,"groupId":"14017","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectCellWithMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a9/6aa57e16442e94530ea996f66846c7d2ed0b5e.src","preCode":"    public void testSelectCellWithMetadata()\n    {\n        ColumnFilter filter = ColumnFilter.allRegularColumnsBuilder(metadata).select(v2, path1).build();\n        testRoundTrips(filter);\n        assertFetchedQueried(true, true, filter, v2);\n        if (\"3.0\".equals(clusterMinVersion))\n        {\n            assertEquals(\"*/*\", filter.toString());\n            assertFetchedQueried(true, true, filter, s1, s2, v1);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(true, true, filter, s2, path0, path1, path2, path3, path4);\n        }\n        else if (\"3.11\".equals(clusterMinVersion))\n        {\n            assertEquals(\"*/[v2[1]]\", filter.toString());\n            assertFetchedQueried(true, false, filter, s1, s2, v1);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(true, false, filter, s2, path0, path1, path2, path3, path4);\n        }\n        else\n        {\n            assertEquals(\"<all regulars>/[v2[1]]\", filter.toString());\n            assertFetchedQueried(true, false, filter, v1);\n            assertFetchedQueried(false, false, filter, s1, s2);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"B"}],"commitId":"d1f3d40afc5d20bab70c6200508baa3cd9409458","commitMessage":"@@@Merge branch 'cassandra-3.11' into trunk\n","date":"2021-03-01 20:48:32","modifiedFileCount":"13","status":"B","submitter":"Andr?s de la Pe?a"},{"authorTime":"2021-03-11 01:34:20","codes":[{"authorDate":"2021-03-11 01:34:20","commitOrder":2,"curCode":"    public void testSelectSimpleColumnWithMetadata()\n    {\n        Consumer<ColumnFilter> check = filter -> {\n            testRoundTrips(filter);\n            assertFetchedQueried(true, true, filter, v1);\n            if (\"3.0\".equals(clusterMinVersion))\n            {\n                assertEquals(\"*/*\", filter.toString());\n                assertEquals(\"*\", filter.toCQLString());\n                assertFetchedQueried(true, true, filter, s1, s2, v2);\n                assertCellFetchedQueried(true, true, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(true, true, filter, s2, path0, path1, path2, path3, path4);\n            }\n            else if (\"3.11\".equals(clusterMinVersion))\n            {\n                assertEquals(\"*/[v1]\", filter.toString());\n                assertEquals(\"v1\", filter.toCQLString());\n                assertFetchedQueried(true, false, filter, s1, s2, v2);\n                assertCellFetchedQueried(true, false, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(true, false, filter, s2, path0, path1, path2, path3, path4);\n            }\n            else\n            {\n                assertEquals(\"<all regulars>/[v1]\", filter.toString());\n                assertEquals(\"v1\", filter.toCQLString());\n                assertFetchedQueried(true, false, filter, v2);\n                assertFetchedQueried(false, false, filter, s1, s2);\n                assertCellFetchedQueried(true, false, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n            }\n        };\n\n        check.accept(ColumnFilter.selection(metadata, RegularAndStaticColumns.builder().add(v1).build()));\n        check.accept(ColumnFilter.allRegularColumnsBuilder(metadata).add(v1).build());\n    }\n","date":"2021-03-11 01:34:20","endLine":352,"groupId":"14023","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSelectSimpleColumnWithMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/19/4a92fce9917d4aa1ec68af16bfabd4a7115a7a.src","preCode":"    public void testSelectSimpleColumnWithMetadata()\n    {\n        Consumer<ColumnFilter> check = filter -> {\n            testRoundTrips(filter);\n            assertFetchedQueried(true, true, filter, v1);\n            if (\"3.0\".equals(clusterMinVersion))\n            {\n                assertEquals(\"*/*\", filter.toString());\n                assertFetchedQueried(true, true, filter, s1, s2, v2);\n                assertCellFetchedQueried(true, true, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(true, true, filter, s2, path0, path1, path2, path3, path4);\n            }\n            else if (\"3.11\".equals(clusterMinVersion))\n            {\n                assertEquals(\"*/[v1]\", filter.toString());\n                assertFetchedQueried(true, false, filter, s1, s2, v2);\n                assertCellFetchedQueried(true, false, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(true, false, filter, s2, path0, path1, path2, path3, path4);\n            }\n            else\n            {\n                assertEquals(\"<all regulars>/[v1]\", filter.toString());\n                assertFetchedQueried(true, false, filter, v2);\n                assertFetchedQueried(false, false, filter, s1, s2);\n                assertCellFetchedQueried(true, false, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n            }\n        };\n\n        check.accept(ColumnFilter.selection(metadata, RegularAndStaticColumns.builder().add(v1).build()));\n        check.accept(ColumnFilter.allRegularColumnsBuilder(metadata).add(v1).build());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"},{"authorDate":"2021-03-11 01:34:20","commitOrder":2,"curCode":"    public void testSelectCellWithMetadata()\n    {\n        ColumnFilter filter = ColumnFilter.allRegularColumnsBuilder(metadata).select(v2, path1).build();\n        testRoundTrips(filter);\n        assertFetchedQueried(true, true, filter, v2);\n        if (\"3.0\".equals(clusterMinVersion))\n        {\n            assertEquals(\"*/*\", filter.toString());\n            assertEquals(\"*\", filter.toCQLString());\n            assertFetchedQueried(true, true, filter, s1, s2, v1);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(true, true, filter, s2, path0, path1, path2, path3, path4);\n        }\n        else if (\"3.11\".equals(clusterMinVersion))\n        {\n            assertEquals(\"*/[v2[1]]\", filter.toString());\n            assertEquals(\"v2[1]\", filter.toCQLString());\n            assertFetchedQueried(true, false, filter, s1, s2, v1);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(true, false, filter, s2, path0, path1, path2, path3, path4);\n        }\n        else\n        {\n            assertEquals(\"<all regulars>/[v2[1]]\", filter.toString());\n            assertEquals(\"v2[1]\", filter.toCQLString());\n            assertFetchedQueried(true, false, filter, v1);\n            assertFetchedQueried(false, false, filter, s1, s2);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n        }\n    }\n","date":"2021-03-11 01:34:20","endLine":425,"groupId":"14017","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSelectCellWithMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/19/4a92fce9917d4aa1ec68af16bfabd4a7115a7a.src","preCode":"    public void testSelectCellWithMetadata()\n    {\n        ColumnFilter filter = ColumnFilter.allRegularColumnsBuilder(metadata).select(v2, path1).build();\n        testRoundTrips(filter);\n        assertFetchedQueried(true, true, filter, v2);\n        if (\"3.0\".equals(clusterMinVersion))\n        {\n            assertEquals(\"*/*\", filter.toString());\n            assertFetchedQueried(true, true, filter, s1, s2, v1);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(true, true, filter, s2, path0, path1, path2, path3, path4);\n        }\n        else if (\"3.11\".equals(clusterMinVersion))\n        {\n            assertEquals(\"*/[v2[1]]\", filter.toString());\n            assertFetchedQueried(true, false, filter, s1, s2, v1);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(true, false, filter, s2, path0, path1, path2, path3, path4);\n        }\n        else\n        {\n            assertEquals(\"<all regulars>/[v2[1]]\", filter.toString());\n            assertFetchedQueried(true, false, filter, v1);\n            assertFetchedQueried(false, false, filter, s1, s2);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"}],"commitId":"0e990d7231f6152e95d5c21a6660594fc9a507bb","commitMessage":"@@@Merge branch 'cassandra-3.11' into trunk\n","date":"2021-03-11 01:34:20","modifiedFileCount":"4","status":"M","submitter":"Andr?s de la Pe?a"},{"authorTime":"2021-06-10 17:14:49","codes":[{"authorDate":"2021-06-10 17:14:49","commitOrder":3,"curCode":"    private void testSelectSimpleColumnWithMetadata(boolean returnStaticContentOnPartitionWithNoRows)\n    {\n        Consumer<ColumnFilter> check = filter -> {\n            testRoundTrips(filter);\n            assertFetchedQueried(true, true, filter, v1);\n            if (\"3.0\".equals(clusterMinVersion))\n            {\n                assertEquals(\"*/*\", filter.toString());\n                assertEquals(\"*\", filter.toCQLString());\n                assertFetchedQueried(true, true, filter, s1, s2, v2);\n                assertCellFetchedQueried(true, true, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(true, true, filter, s2, path0, path1, path2, path3, path4);\n            }\n            else if (\"3.11\".equals(clusterMinVersion) || (returnStaticContentOnPartitionWithNoRows && \"4.0\".equals(clusterMinVersion)))\n            {\n                assertEquals(\"*/[v1]\", filter.toString());\n                assertEquals(\"v1\", filter.toCQLString());\n                assertFetchedQueried(true, false, filter, s1, s2, v2);\n                assertCellFetchedQueried(true, false, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(true, false, filter, s2, path0, path1, path2, path3, path4);\n            }\n            else\n            {\n                assertEquals(\"<all regulars>/[v1]\", filter.toString());\n                assertEquals(\"v1\", filter.toCQLString());\n                assertFetchedQueried(true, false, filter, v2);\n                assertFetchedQueried(false, false, filter, s1, s2);\n                assertCellFetchedQueried(true, false, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n            }\n        };\n\n        check.accept(ColumnFilter.selection(metadata, RegularAndStaticColumns.builder().add(v1).build(), returnStaticContentOnPartitionWithNoRows));\n        check.accept(ColumnFilter.allRegularColumnsBuilder(metadata, returnStaticContentOnPartitionWithNoRows).add(v1).build());\n    }\n","date":"2021-06-10 17:14:49","endLine":369,"groupId":"10931","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testSelectSimpleColumnWithMetadata","params":"(booleanreturnStaticContentOnPartitionWithNoRows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/86/b81e5563b1b5f9819f729da7ea4ba5074555ee.src","preCode":"    public void testSelectSimpleColumnWithMetadata()\n    {\n        Consumer<ColumnFilter> check = filter -> {\n            testRoundTrips(filter);\n            assertFetchedQueried(true, true, filter, v1);\n            if (\"3.0\".equals(clusterMinVersion))\n            {\n                assertEquals(\"*/*\", filter.toString());\n                assertEquals(\"*\", filter.toCQLString());\n                assertFetchedQueried(true, true, filter, s1, s2, v2);\n                assertCellFetchedQueried(true, true, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(true, true, filter, s2, path0, path1, path2, path3, path4);\n            }\n            else if (\"3.11\".equals(clusterMinVersion))\n            {\n                assertEquals(\"*/[v1]\", filter.toString());\n                assertEquals(\"v1\", filter.toCQLString());\n                assertFetchedQueried(true, false, filter, s1, s2, v2);\n                assertCellFetchedQueried(true, false, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(true, false, filter, s2, path0, path1, path2, path3, path4);\n            }\n            else\n            {\n                assertEquals(\"<all regulars>/[v1]\", filter.toString());\n                assertEquals(\"v1\", filter.toCQLString());\n                assertFetchedQueried(true, false, filter, v2);\n                assertFetchedQueried(false, false, filter, s1, s2);\n                assertCellFetchedQueried(true, false, filter, v2, path0, path1, path2, path3, path4);\n                assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n            }\n        };\n\n        check.accept(ColumnFilter.selection(metadata, RegularAndStaticColumns.builder().add(v1).build()));\n        check.accept(ColumnFilter.allRegularColumnsBuilder(metadata).add(v1).build());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"},{"authorDate":"2021-06-10 17:14:49","commitOrder":3,"curCode":"    private void testSelectCellWithMetadata(boolean returnStaticContentOnPartitionWithNoRows)\n    {\n        ColumnFilter filter = ColumnFilter.allRegularColumnsBuilder(metadata, returnStaticContentOnPartitionWithNoRows)\n                                          .select(v2, path1)\n                                          .build();\n        testRoundTrips(filter);\n        assertFetchedQueried(true, true, filter, v2);\n        if (\"3.0\".equals(clusterMinVersion))\n        {\n            assertEquals(\"*/*\", filter.toString());\n            assertEquals(\"*\", filter.toCQLString());\n            assertFetchedQueried(true, true, filter, s1, s2, v1);\n            assertCellFetchedQueried(true, true, filter, v2, path0, path1, path2, path3, path4);\n            assertCellFetchedQueried(true, true, filter, s2, path0, path1, path2, path3, path4);\n        }\n        else if (\"3.11\".equals(clusterMinVersion) || (returnStaticContentOnPartitionWithNoRows && \"4.0\".equals(clusterMinVersion)))\n        {\n            assertEquals(\"*/[v2[1]]\", filter.toString());\n            assertEquals(\"v2[1]\", filter.toCQLString());\n            assertFetchedQueried(true, false, filter, s1, s2, v1);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(true, false, filter, s2, path0, path1, path2, path3, path4);\n        }\n        else\n        {\n            assertEquals(\"<all regulars>/[v2[1]]\", filter.toString());\n            assertEquals(\"v2[1]\", filter.toCQLString());\n            assertFetchedQueried(true, false, filter, v1);\n            assertFetchedQueried(false, false, filter, s1, s2);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n        }\n    }\n","date":"2021-06-10 17:14:49","endLine":465,"groupId":"10931","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"testSelectCellWithMetadata","params":"(booleanreturnStaticContentOnPartitionWithNoRows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/86/b81e5563b1b5f9819f729da7ea4ba5074555ee.src","preCode":"    public void testSelectCellWithMetadata()\n    {\n        ColumnFilter filter = ColumnFilter.allRegularColumnsBuilder(metadata).select(v2, path1).build();\n        testRoundTrips(filter);\n        assertFetchedQueried(true, true, filter, v2);\n        if (\"3.0\".equals(clusterMinVersion))\n        {\n            assertEquals(\"*/*\", filter.toString());\n            assertEquals(\"*\", filter.toCQLString());\n            assertFetchedQueried(true, true, filter, s1, s2, v1);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(true, true, filter, s2, path0, path1, path2, path3, path4);\n        }\n        else if (\"3.11\".equals(clusterMinVersion))\n        {\n            assertEquals(\"*/[v2[1]]\", filter.toString());\n            assertEquals(\"v2[1]\", filter.toCQLString());\n            assertFetchedQueried(true, false, filter, s1, s2, v1);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(true, false, filter, s2, path0, path1, path2, path3, path4);\n        }\n        else\n        {\n            assertEquals(\"<all regulars>/[v2[1]]\", filter.toString());\n            assertEquals(\"v2[1]\", filter.toCQLString());\n            assertFetchedQueried(true, false, filter, v1);\n            assertFetchedQueried(false, false, filter, s1, s2);\n            assertCellFetchedQueried(true, true, filter, v2, path1);\n            assertCellFetchedQueried(true, false, filter, v2, path0, path2, path3, path4);\n            assertCellFetchedQueried(false, false, filter, s2, path0, path1, path2, path3, path4);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/filter/ColumnFilterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":431,"status":"M"}],"commitId":"67cab368bc89da6cab0efbf019f666f6d647ebb1","commitMessage":"@@@Merge branch cassandra-4.0 into trunk\n","date":"2021-06-10 17:14:49","modifiedFileCount":"16","status":"M","submitter":"Benjamin Lerer"}]
