[{"authorTime":"2014-02-14 06:34:47","codes":[{"authorDate":"2014-02-14 06:34:47","commitOrder":1,"curCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = \"Keyspace1\";\n        String cfname = \"StandardLowIndexInterval\"; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.readMeter = new RestorableMeter(100.0, 100.0);\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), summarySpace);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace * 1.5));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace / 2));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), 10);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","date":"2014-02-14 06:34:47","endLine":232,"groupId":"9447","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testChangeMinIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c0/d96783669afbf0f22721787b64edfd50305c0d.src","preCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = \"Keyspace1\";\n        String cfname = \"StandardLowIndexInterval\"; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.readMeter = new RestorableMeter(100.0, 100.0);\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), summarySpace);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace * 1.5));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace / 2));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), 10);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"B"},{"authorDate":"2014-02-14 06:34:47","commitOrder":1,"curCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = \"Keyspace1\";\n        String cfname = \"StandardLowIndexInterval\"; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.readMeter = new RestorableMeter(100.0, 100.0);\n\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() / 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() * 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n    }\n","date":"2014-02-14 06:34:47","endLine":272,"groupId":"9444","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testChangeMaxIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c0/d96783669afbf0f22721787b64edfd50305c0d.src","preCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = \"Keyspace1\";\n        String cfname = \"StandardLowIndexInterval\"; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.readMeter = new RestorableMeter(100.0, 100.0);\n\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() / 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() * 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"B"}],"commitId":"ee477cc4ddd1ab8ba4c7c2338d31060119735e7a","commitMessage":"@@@Replace index_interval with min/max_index_interval\n\npatch by Tyler Hobbs; reviewed by Aleksey Yeschenko for CASSANDRA-6379\n","date":"2014-02-14 06:34:47","modifiedFileCount":"25","status":"B","submitter":"Aleksey Yeschenko"},{"authorTime":"2014-02-14 06:34:47","codes":[{"authorDate":"2014-02-15 08:25:41","commitOrder":2,"curCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = \"Keyspace1\";\n        String cfname = \"StandardLowIndexInterval\"; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.readMeter = new RestorableMeter(100.0, 100.0);\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), summarySpace);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace * 1.5));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace / 2.0));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), 10);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","date":"2014-02-15 08:25:41","endLine":232,"groupId":"9447","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testChangeMinIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/35/fd9bdc58ab37e8e8152a1cb52be04094f543fc.src","preCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = \"Keyspace1\";\n        String cfname = \"StandardLowIndexInterval\"; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.readMeter = new RestorableMeter(100.0, 100.0);\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), summarySpace);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace * 1.5));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace / 2));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), 10);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2014-02-14 06:34:47","commitOrder":2,"curCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = \"Keyspace1\";\n        String cfname = \"StandardLowIndexInterval\"; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.readMeter = new RestorableMeter(100.0, 100.0);\n\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() / 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() * 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n    }\n","date":"2014-02-14 06:34:47","endLine":272,"groupId":"9444","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testChangeMaxIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c0/d96783669afbf0f22721787b64edfd50305c0d.src","preCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = \"Keyspace1\";\n        String cfname = \"StandardLowIndexInterval\"; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.readMeter = new RestorableMeter(100.0, 100.0);\n\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() / 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() * 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"N"}],"commitId":"ad2f6bb6f7d7d684b8723d76d1a0fb008abf41f0","commitMessage":"@@@use floating pt math for floating pt results\n","date":"2014-02-15 08:25:41","modifiedFileCount":"1","status":"M","submitter":"Dave Brosius"},{"authorTime":"2014-06-21 01:55:35","codes":[{"authorDate":"2014-06-21 01:55:35","commitOrder":3,"curCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.readMeter = new RestorableMeter(100.0, 100.0);\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), summarySpace);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace * 1.5));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace / 2.0));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), 10);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","date":"2014-06-21 01:55:35","endLine":254,"groupId":"9447","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testChangeMinIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/83/c9daa2c8271503fd489892de4a46abba6b6064.src","preCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = \"Keyspace1\";\n        String cfname = \"StandardLowIndexInterval\"; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.readMeter = new RestorableMeter(100.0, 100.0);\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), summarySpace);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace * 1.5));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace / 2.0));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), 10);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2014-06-21 01:55:35","commitOrder":3,"curCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.readMeter = new RestorableMeter(100.0, 100.0);\n\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() / 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() * 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n    }\n","date":"2014-06-21 01:55:35","endLine":294,"groupId":"9444","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testChangeMaxIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/83/c9daa2c8271503fd489892de4a46abba6b6064.src","preCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = \"Keyspace1\";\n        String cfname = \"StandardLowIndexInterval\"; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.readMeter = new RestorableMeter(100.0, 100.0);\n\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() / 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() * 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"M"}],"commitId":"d2a3827a65f208eae7aed129dcb6dc582ac1f3d5","commitMessage":"@@@Reduce unit test times due to schema loading\n\nPatch by Lyuben Todorov; reviewed by Tyler Hobbs for CASSANDRA-6968\n","date":"2014-06-21 01:55:35","modifiedFileCount":"92","status":"M","submitter":"lyubent"},{"authorTime":"2015-02-11 23:23:17","codes":[{"authorDate":"2015-02-11 23:23:17","commitOrder":4,"curCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), summarySpace);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace * 1.5));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace / 2.0));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), 10);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","date":"2015-02-11 23:23:17","endLine":255,"groupId":"9447","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testChangeMinIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/0f/2143a291f5ef501a706e54005342e5d79b0fb5.src","preCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.readMeter = new RestorableMeter(100.0, 100.0);\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), summarySpace);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace * 1.5));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace / 2.0));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), 10);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2015-02-11 23:23:17","commitOrder":4,"curCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() / 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() * 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n    }\n","date":"2015-02-11 23:23:17","endLine":295,"groupId":"9444","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testChangeMaxIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/0f/2143a291f5ef501a706e54005342e5d79b0fb5.src","preCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.readMeter = new RestorableMeter(100.0, 100.0);\n\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() / 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() * 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"02c348939a6c2ba391af5eb52d290b0838643cb4","commitMessage":"@@@Merge branch 'cassandra-2.1' into trunk\n\nConflicts:\n\tsrc/java/org/apache/cassandra/io/sstable/format/SSTableReader.java\n\tsrc/java/org/apache/cassandra/io/sstable/format/big/BigTableWriter.java\n\tsrc/java/org/apache/cassandra/io/util/BufferedSegmentedFile.java\n\ttest/unit/org/apache/cassandra/db/compaction/AntiCompactionTest.java\n\ttest/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java\n\ttest/unit/org/apache/cassandra/utils/SerializationsTest.java\n","date":"2015-02-11 23:23:17","modifiedFileCount":"44","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2015-05-22 16:44:46","codes":[{"authorDate":"2015-05-22 16:44:46","commitOrder":5,"curCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), summarySpace);\n        }\n\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace * 1.5));\n        }\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace / 2.0));\n        }\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","date":"2015-05-22 16:44:46","endLine":280,"groupId":"21259","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testChangeMinIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/51/8d80ed96c066cb3f660ac083288abfe702969c.src","preCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), summarySpace);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace * 1.5));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), (long) Math.ceil(summarySpace / 2.0));\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, Arrays.asList(sstable), 10);\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2015-05-22 16:44:46","commitOrder":5,"curCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() / 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() * 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n    }\n","date":"2015-05-22 16:44:46","endLine":329,"groupId":"15065","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testChangeMaxIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/51/8d80ed96c066cb3f660ac083288abfe702969c.src","preCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() / 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() * 2);\n        IndexSummaryManager.redistributeSummaries(Collections.EMPTY_LIST, sstables, 1);\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"}],"commitId":"d96a02a12e20bc2e0b096904ebe7a1d68532d2f3","commitMessage":"@@@Merge branch 'cassandra-2.2' into trunk\n","date":"2015-05-22 16:44:46","modifiedFileCount":"48","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2015-06-28 21:49:09","codes":[{"authorDate":"2015-06-28 21:49:09","commitOrder":6,"curCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), summarySpace);\n        }\n\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace * 1.5));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace / 2.0));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","date":"2015-07-28 17:28:31","endLine":285,"groupId":"21259","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testChangeMinIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5f/11f514847f1e91b7ff6e0073b2a2709ca42f15.src","preCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), summarySpace);\n        }\n\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace * 1.5));\n        }\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace / 2.0));\n        }\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstable = cfs.getSSTables().iterator().next();\n        assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2015-06-28 21:49:09","commitOrder":6,"curCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() / 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() * 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n    }\n","date":"2015-07-28 17:28:31","endLine":334,"groupId":"15065","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testChangeMaxIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5f/11f514847f1e91b7ff6e0073b2a2709ca42f15.src","preCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() / 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        sstables = new ArrayList<>(cfs.getSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() * 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        for (SSTableReader sstable : cfs.getSSTables())\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"ad8cad7c4d05fd5dea68fb274c81a102533ebe36","commitMessage":"@@@Make choice of SSTableReader types explicit\n\nAll accessors of a collection of SSTableReader must now\nspecify whether they desire the LIVE or CANONICAL set.  so\nthat no internal clients are accidentally exposed to a partial\nsstable they are not capable of safely handling.\n\npatch by benedict; reviewed by marcus for CASSANDRA-9699\n","date":"2015-07-28 17:28:31","modifiedFileCount":"60","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2015-08-04 17:16:04","codes":[{"authorDate":"2015-08-04 17:16:04","commitOrder":7,"curCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.params.minIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.params.minIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), summarySpace);\n        }\n\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace * 1.5));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace / 2.0));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","date":"2015-08-04 17:16:04","endLine":284,"groupId":"15066","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testChangeMinIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/54/93edbb07bf42a80eac764c780dd670e248b4d5.src","preCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.getMinIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), summarySpace);\n        }\n\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace * 1.5));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace / 2.0));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(cfs.metadata.getMinIndexInterval(), sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"},{"authorDate":"2015-08-04 17:16:04","commitOrder":7,"curCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.params.maxIndexInterval / 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.params.maxIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.params.maxIndexInterval * 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.params.maxIndexInterval, sstable.getIndexSummarySize());\n        }\n    }\n","date":"2015-08-04 17:16:04","endLine":333,"groupId":"15065","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testChangeMaxIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/54/93edbb07bf42a80eac764c780dd670e248b4d5.src","preCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() / 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.getMaxIndexInterval() * 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.getMaxIndexInterval(), sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.getMaxIndexInterval(), sstable.getIndexSummarySize());\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"}],"commitId":"becee6ae4a04f76d5998de1814c9d6e0164d998d","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-08-04 17:16:04","modifiedFileCount":"79","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2016-08-01 19:47:43","codes":[{"authorDate":"2016-08-01 19:47:43","commitOrder":8,"curCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.params.minIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.params.minIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(redistribution(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), summarySpace));\n        }\n\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(redistribution(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace * 1.5)));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(redistribution(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace / 2.0)));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(redistribution(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","date":"2016-08-01 19:47:43","endLine":290,"groupId":"0","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testChangeMinIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c0/445d5aafa203b2c80c8e2ee5a12adad1d55e3e.src","preCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.params.minIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.params.minIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), summarySpace);\n        }\n\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace * 1.5));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace / 2.0));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"},{"authorDate":"2016-08-01 19:47:43","commitOrder":8,"curCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(redistribution(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10));\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.params.maxIndexInterval / 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(redistribution(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1));\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.params.maxIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.params.maxIndexInterval * 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(redistribution(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1));\n        }\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.params.maxIndexInterval, sstable.getIndexSummarySize());\n        }\n    }\n","date":"2016-08-01 19:47:43","endLine":339,"groupId":"0","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testChangeMaxIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c0/445d5aafa203b2c80c8e2ee5a12adad1d55e3e.src","preCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.params.maxIndexInterval / 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.params.maxIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.params.maxIndexInterval * 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.params.maxIndexInterval, sstable.getIndexSummarySize());\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"}],"commitId":"293908060bd8f8a94e5b6ec87dfd7aab457b4e61","commitMessage":"@@@Merge branch 'cassandra-3.9' into trunk\n","date":"2016-08-01 19:47:43","modifiedFileCount":"2","status":"M","submitter":"Sam Tunnicliffe"},{"authorTime":"2016-11-10 18:08:24","codes":[{"authorDate":"2016-11-10 18:08:24","commitOrder":9,"curCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.params.minIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.params.minIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), summarySpace);\n        }\n\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace * 1.5));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace / 2.0));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","date":"2016-11-10 18:08:24","endLine":290,"groupId":"15066","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testChangeMinIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/97/372815758eb5ed4b3a01aa49458215047afcb2.src","preCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.params.minIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.params.minIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(redistribution(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), summarySpace));\n        }\n\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(redistribution(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace * 1.5)));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(redistribution(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace / 2.0)));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(redistribution(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"},{"authorDate":"2016-11-10 18:08:24","commitOrder":9,"curCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.params.maxIndexInterval / 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.params.maxIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.params.maxIndexInterval * 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.params.maxIndexInterval, sstable.getIndexSummarySize());\n        }\n    }\n","date":"2016-11-10 18:08:24","endLine":339,"groupId":"15065","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testChangeMaxIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/97/372815758eb5ed4b3a01aa49458215047afcb2.src","preCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(redistribution(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10));\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.params.maxIndexInterval / 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(redistribution(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1));\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.params.maxIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.params.maxIndexInterval * 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(redistribution(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1));\n        }\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.params.maxIndexInterval, sstable.getIndexSummarySize());\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"}],"commitId":"97eeb66ed39f32afbe129e9540ddb5258f0586c9","commitMessage":"@@@Merge branch 'cassandra-3.X' into trunk\n","date":"2016-11-10 18:08:24","modifiedFileCount":"1","status":"M","submitter":"Sam Tunnicliffe"},{"authorTime":"2016-11-10 09:16:59","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":10,"curCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata().params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        MigrationManager.announceTableUpdate(cfs.metadata().unbuild().minIndexInterval(originalMinIndexInterval * 2).build(), true);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata().params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata().params.minIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        MigrationManager.announceTableUpdate(cfs.metadata().unbuild().minIndexInterval(originalMinIndexInterval).build(), true);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata().params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata().params.minIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        MigrationManager.announceTableUpdate(cfs.metadata().unbuild().minIndexInterval(originalMinIndexInterval / 2).build(), true);\n        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.id, txn), summarySpace);\n        }\n\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.id, txn), (long) Math.ceil(summarySpace * 1.5));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        MigrationManager.announceTableUpdate(cfs.metadata().unbuild().minIndexInterval(originalMinIndexInterval).build(), true);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.id, txn), (long) Math.ceil(summarySpace / 2.0));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        MigrationManager.announceTableUpdate(cfs.metadata().unbuild().minIndexInterval(originalMinIndexInterval * 4).build(), true);\n        MigrationManager.announceTableUpdate(cfs.metadata().unbuild().maxIndexInterval(originalMinIndexInterval * 4).build(), true);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.id, txn), 10);\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(cfs.metadata().params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","date":"2017-01-28 06:17:46","endLine":294,"groupId":"101975","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testChangeMinIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/18/6f0e8d2123fdad4d2590f04322f33c87d02b8d.src","preCode":"    public void testChangeMinIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 2);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.params.minIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        IndexSummaryManager.instance.redistributeSummaries();\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n            assertEquals(numRows / cfs.metadata.params.minIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval / 2);\n        SSTableReader sstable = cfs.getLiveSSTables().iterator().next();\n        long summarySpace = sstable.getIndexSummaryOffHeapSize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), summarySpace);\n        }\n\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / originalMinIndexInterval, sstable.getIndexSummarySize());\n\n        \r\n        double previousInterval = sstable.getEffectiveIndexInterval();\n        int previousSize = sstable.getIndexSummarySize();\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace * 1.5));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(previousSize * 1.5, (double) sstable.getIndexSummarySize(), 1);\n        assertEquals(previousInterval * (1.0 / 1.5), sstable.getEffectiveIndexInterval(), 0.001);\n\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), (long) Math.ceil(summarySpace / 2.0));\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(originalMinIndexInterval * 2, sstable.getEffectiveIndexInterval(), 0.001);\n        assertEquals(numRows / (originalMinIndexInterval * 2), sstable.getIndexSummarySize());\n\n        \r\n        \r\n        \r\n        cfs.metadata.minIndexInterval(originalMinIndexInterval * 4);\n        cfs.metadata.maxIndexInterval(originalMinIndexInterval * 4);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstable = cfs.getLiveSSTables().iterator().next();\n        assertEquals(cfs.metadata.params.minIndexInterval, sstable.getEffectiveIndexInterval(), 0.001);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2016-11-10 09:16:59","commitOrder":10,"curCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.id, txn), 10);\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata().params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        MigrationManager.announceTableUpdate(cfs.metadata().unbuild().maxIndexInterval(cfs.metadata().params.maxIndexInterval / 2).build(), true);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.id, txn), 1);\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata().params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata().params.maxIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        MigrationManager.announceTableUpdate(cfs.metadata().unbuild().maxIndexInterval(cfs.metadata().params.maxIndexInterval * 2).build(), true);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.id, txn), 1);\n        }\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata().params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata().params.maxIndexInterval, sstable.getIndexSummarySize());\n        }\n    }\n","date":"2017-01-28 06:17:46","endLine":343,"groupId":"101975","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testChangeMaxIndexInterval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/18/6f0e8d2123fdad4d2590f04322f33c87d02b8d.src","preCode":"    public void testChangeMaxIndexInterval() throws IOException\n    {\n        String ksname = KEYSPACE1;\n        String cfname = CF_STANDARDLOWiINTERVAL; \r\n        Keyspace keyspace = Keyspace.open(ksname);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname);\n        int numSSTables = 1;\n        int numRows = 256;\n        createSSTables(ksname, cfname, numSSTables, numRows);\n\n        List<SSTableReader> sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            sstable.overrideReadMeter(new RestorableMeter(100.0, 100.0));\n\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 10);\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.params.maxIndexInterval / 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        sstables = new ArrayList<>(cfs.getLiveSSTables());\n        for (SSTableReader sstable : sstables)\n        {\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.params.maxIndexInterval, sstable.getIndexSummarySize());\n        }\n\n        \r\n        cfs.metadata.maxIndexInterval(cfs.metadata.params.maxIndexInterval * 2);\n        try (LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN))\n        {\n            redistributeSummaries(Collections.EMPTY_LIST, of(cfs.metadata.cfId, txn), 1);\n        }\n        for (SSTableReader sstable : cfs.getLiveSSTables())\n        {\n            assertEquals(cfs.metadata.params.maxIndexInterval, sstable.getEffectiveIndexInterval(), 0.01);\n            assertEquals(numRows / cfs.metadata.params.maxIndexInterval, sstable.getIndexSummarySize());\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/IndexSummaryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"af3fe39dcabd9ef77a00309ce6741268423206df","commitMessage":"@@@Make TableMetadata immutable.  optimize Schema\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-9425\n","date":"2017-01-28 06:17:46","modifiedFileCount":"511","status":"M","submitter":"Aleksey Yeschenko"}]
