[{"authorTime":"2017-12-07 20:55:44","codes":[{"authorDate":"2017-12-07 20:55:44","commitOrder":1,"curCode":"    public void testFromEmptyMerkleTrees() throws UnknownHostException\n    {\n        InetAddress a1 = InetAddress.getByName(\"127.0.0.1\");\n        InetAddress a2 = InetAddress.getByName(\"127.0.0.2\");\n\n        MerkleTrees mt1 = new MerkleTrees(Murmur3Partitioner.instance);\n        MerkleTrees mt2 = new MerkleTrees(Murmur3Partitioner.instance);\n        mt1.init();\n        mt2.init();\n\n        TreeResponse tr1 = new TreeResponse(a1, mt1);\n        TreeResponse tr2 = new TreeResponse(a2, mt2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).isEmpty());\n    }\n","date":"2017-12-07 20:55:56","endLine":59,"groupId":"3019","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFromEmptyMerkleTrees","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/52/a43e6684e9b24e01c5e607d3dfbcd4d8cb9e3e.src","preCode":"    public void testFromEmptyMerkleTrees() throws UnknownHostException\n    {\n        InetAddress a1 = InetAddress.getByName(\"127.0.0.1\");\n        InetAddress a2 = InetAddress.getByName(\"127.0.0.2\");\n\n        MerkleTrees mt1 = new MerkleTrees(Murmur3Partitioner.instance);\n        MerkleTrees mt2 = new MerkleTrees(Murmur3Partitioner.instance);\n        mt1.init();\n        mt2.init();\n\n        TreeResponse tr1 = new TreeResponse(a1, mt1);\n        TreeResponse tr2 = new TreeResponse(a2, mt2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).isEmpty());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/asymmetric/DifferenceHolderTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2017-12-07 20:55:44","commitOrder":1,"curCode":"    public void testFromMismatchedMerkleTrees() throws UnknownHostException\n    {\n        IPartitioner partitioner = Murmur3Partitioner.instance;\n        Range<Token> fullRange = new Range<>(partitioner.getMinimumToken(), partitioner.getMinimumToken());\n        int maxsize = 16;\n        InetAddress a1 = InetAddress.getByName(\"127.0.0.1\");\n        InetAddress a2 = InetAddress.getByName(\"127.0.0.2\");\n        \r\n        MerkleTrees mt1 = new MerkleTrees(partitioner);\n        MerkleTrees mt2 = new MerkleTrees(partitioner);\n        mt1.addMerkleTree(32, fullRange);\n        mt2.addMerkleTree(32, fullRange);\n        mt1.init();\n        mt2.init();\n        \r\n        for (MerkleTree.TreeRange range : mt1.invalids())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n        for (MerkleTree.TreeRange range : mt2.invalids())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n\n        MerkleTree.TreeRange leftmost = null;\n        MerkleTree.TreeRange middle = null;\n\n        mt1.maxsize(fullRange, maxsize + 2); \r\n\n        \r\n        Iterator<MerkleTree.TreeRange> ranges = mt1.invalids();\n        leftmost = ranges.next();\n        mt1.split(leftmost.right);\n\n        \r\n        middle = mt1.get(leftmost.right);\n        middle.hash(\"arbitrary!\".getBytes());\n        mt1.get(partitioner.midpoint(leftmost.left, leftmost.right)).hash(\"even more arbitrary!\".getBytes());\n\n        TreeResponse tr1 = new TreeResponse(a1, mt1);\n        TreeResponse tr2 = new TreeResponse(a2, mt2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).size() == 1);\n        assertTrue(dh.hasDifferenceBetween(a1, a2, fullRange));\n        \r\n        assertEquals(Sets.newHashSet(a1), dh.keyHosts());\n    }\n","date":"2017-12-07 20:55:56","endLine":105,"groupId":"23269","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFromMismatchedMerkleTrees","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/52/a43e6684e9b24e01c5e607d3dfbcd4d8cb9e3e.src","preCode":"    public void testFromMismatchedMerkleTrees() throws UnknownHostException\n    {\n        IPartitioner partitioner = Murmur3Partitioner.instance;\n        Range<Token> fullRange = new Range<>(partitioner.getMinimumToken(), partitioner.getMinimumToken());\n        int maxsize = 16;\n        InetAddress a1 = InetAddress.getByName(\"127.0.0.1\");\n        InetAddress a2 = InetAddress.getByName(\"127.0.0.2\");\n        \r\n        MerkleTrees mt1 = new MerkleTrees(partitioner);\n        MerkleTrees mt2 = new MerkleTrees(partitioner);\n        mt1.addMerkleTree(32, fullRange);\n        mt2.addMerkleTree(32, fullRange);\n        mt1.init();\n        mt2.init();\n        \r\n        for (MerkleTree.TreeRange range : mt1.invalids())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n        for (MerkleTree.TreeRange range : mt2.invalids())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n\n        MerkleTree.TreeRange leftmost = null;\n        MerkleTree.TreeRange middle = null;\n\n        mt1.maxsize(fullRange, maxsize + 2); \r\n\n        \r\n        Iterator<MerkleTree.TreeRange> ranges = mt1.invalids();\n        leftmost = ranges.next();\n        mt1.split(leftmost.right);\n\n        \r\n        middle = mt1.get(leftmost.right);\n        middle.hash(\"arbitrary!\".getBytes());\n        mt1.get(partitioner.midpoint(leftmost.left, leftmost.right)).hash(\"even more arbitrary!\".getBytes());\n\n        TreeResponse tr1 = new TreeResponse(a1, mt1);\n        TreeResponse tr2 = new TreeResponse(a2, mt2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).size() == 1);\n        assertTrue(dh.hasDifferenceBetween(a1, a2, fullRange));\n        \r\n        assertEquals(Sets.newHashSet(a1), dh.keyHosts());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/asymmetric/DifferenceHolderTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"}],"commitId":"cb56d9fc3c773abbefa2044ce41ddbfb7717e0cb","commitMessage":"@@@Add option to optimize Merkle tree comparison across replicas\n\nPatch by marcuse; reviewed by Blake Eggleston for CASSANDRA-3200\n","date":"2017-12-07 20:55:56","modifiedFileCount":"15","status":"B","submitter":"Marcus Eriksson"},{"authorTime":"2017-11-10 00:33:48","codes":[{"authorDate":"2017-11-10 00:33:48","commitOrder":2,"curCode":"    public void testFromEmptyMerkleTrees() throws UnknownHostException\n    {\n        InetAddressAndPort a1 = InetAddressAndPort.getByName(\"127.0.0.1\");\n        InetAddressAndPort a2 = InetAddressAndPort.getByName(\"127.0.0.2\");\n\n        MerkleTrees mt1 = new MerkleTrees(Murmur3Partitioner.instance);\n        MerkleTrees mt2 = new MerkleTrees(Murmur3Partitioner.instance);\n        mt1.init();\n        mt2.init();\n\n        TreeResponse tr1 = new TreeResponse(a1, mt1);\n        TreeResponse tr2 = new TreeResponse(a2, mt2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).isEmpty());\n    }\n","date":"2018-01-26 03:32:24","endLine":59,"groupId":"3019","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFromEmptyMerkleTrees","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/96/930108d634b597357faa0fb8e9ee145ad390ca.src","preCode":"    public void testFromEmptyMerkleTrees() throws UnknownHostException\n    {\n        InetAddress a1 = InetAddress.getByName(\"127.0.0.1\");\n        InetAddress a2 = InetAddress.getByName(\"127.0.0.2\");\n\n        MerkleTrees mt1 = new MerkleTrees(Murmur3Partitioner.instance);\n        MerkleTrees mt2 = new MerkleTrees(Murmur3Partitioner.instance);\n        mt1.init();\n        mt2.init();\n\n        TreeResponse tr1 = new TreeResponse(a1, mt1);\n        TreeResponse tr2 = new TreeResponse(a2, mt2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).isEmpty());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/asymmetric/DifferenceHolderTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2017-11-10 00:33:48","commitOrder":2,"curCode":"    public void testFromMismatchedMerkleTrees() throws UnknownHostException\n    {\n        IPartitioner partitioner = Murmur3Partitioner.instance;\n        Range<Token> fullRange = new Range<>(partitioner.getMinimumToken(), partitioner.getMinimumToken());\n        int maxsize = 16;\n        InetAddressAndPort a1 = InetAddressAndPort.getByName(\"127.0.0.1\");\n        InetAddressAndPort a2 = InetAddressAndPort.getByName(\"127.0.0.2\");\n        \r\n        MerkleTrees mt1 = new MerkleTrees(partitioner);\n        MerkleTrees mt2 = new MerkleTrees(partitioner);\n        mt1.addMerkleTree(32, fullRange);\n        mt2.addMerkleTree(32, fullRange);\n        mt1.init();\n        mt2.init();\n        \r\n        for (MerkleTree.TreeRange range : mt1.invalids())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n        for (MerkleTree.TreeRange range : mt2.invalids())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n\n        MerkleTree.TreeRange leftmost = null;\n        MerkleTree.TreeRange middle = null;\n\n        mt1.maxsize(fullRange, maxsize + 2); \r\n\n        \r\n        Iterator<MerkleTree.TreeRange> ranges = mt1.invalids();\n        leftmost = ranges.next();\n        mt1.split(leftmost.right);\n\n        \r\n        middle = mt1.get(leftmost.right);\n        middle.hash(\"arbitrary!\".getBytes());\n        mt1.get(partitioner.midpoint(leftmost.left, leftmost.right)).hash(\"even more arbitrary!\".getBytes());\n\n        TreeResponse tr1 = new TreeResponse(a1, mt1);\n        TreeResponse tr2 = new TreeResponse(a2, mt2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).size() == 1);\n        assertTrue(dh.hasDifferenceBetween(a1, a2, fullRange));\n        \r\n        assertEquals(Sets.newHashSet(a1), dh.keyHosts());\n    }\n","date":"2018-01-26 03:32:24","endLine":105,"groupId":"23269","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFromMismatchedMerkleTrees","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/96/930108d634b597357faa0fb8e9ee145ad390ca.src","preCode":"    public void testFromMismatchedMerkleTrees() throws UnknownHostException\n    {\n        IPartitioner partitioner = Murmur3Partitioner.instance;\n        Range<Token> fullRange = new Range<>(partitioner.getMinimumToken(), partitioner.getMinimumToken());\n        int maxsize = 16;\n        InetAddress a1 = InetAddress.getByName(\"127.0.0.1\");\n        InetAddress a2 = InetAddress.getByName(\"127.0.0.2\");\n        \r\n        MerkleTrees mt1 = new MerkleTrees(partitioner);\n        MerkleTrees mt2 = new MerkleTrees(partitioner);\n        mt1.addMerkleTree(32, fullRange);\n        mt2.addMerkleTree(32, fullRange);\n        mt1.init();\n        mt2.init();\n        \r\n        for (MerkleTree.TreeRange range : mt1.invalids())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n        for (MerkleTree.TreeRange range : mt2.invalids())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n\n        MerkleTree.TreeRange leftmost = null;\n        MerkleTree.TreeRange middle = null;\n\n        mt1.maxsize(fullRange, maxsize + 2); \r\n\n        \r\n        Iterator<MerkleTree.TreeRange> ranges = mt1.invalids();\n        leftmost = ranges.next();\n        mt1.split(leftmost.right);\n\n        \r\n        middle = mt1.get(leftmost.right);\n        middle.hash(\"arbitrary!\".getBytes());\n        mt1.get(partitioner.midpoint(leftmost.left, leftmost.right)).hash(\"even more arbitrary!\".getBytes());\n\n        TreeResponse tr1 = new TreeResponse(a1, mt1);\n        TreeResponse tr2 = new TreeResponse(a2, mt2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).size() == 1);\n        assertTrue(dh.hasDifferenceBetween(a1, a2, fullRange));\n        \r\n        assertEquals(Sets.newHashSet(a1), dh.keyHosts());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/asymmetric/DifferenceHolderTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"59b5b6bef0fa76bf5740b688fcd4d9cf525760d0","commitMessage":"@@@Allow storage port to be configurable per node\n\nPatch by Ariel Weisberg; Reviewed by Jason Brown for CASSANDRA-7544\n","date":"2018-01-26 03:32:24","modifiedFileCount":"308","status":"M","submitter":"Ariel Weisberg"},{"authorTime":"2019-03-17 01:30:54","codes":[{"authorDate":"2017-11-10 00:33:48","commitOrder":3,"curCode":"    public void testFromEmptyMerkleTrees() throws UnknownHostException\n    {\n        InetAddressAndPort a1 = InetAddressAndPort.getByName(\"127.0.0.1\");\n        InetAddressAndPort a2 = InetAddressAndPort.getByName(\"127.0.0.2\");\n\n        MerkleTrees mt1 = new MerkleTrees(Murmur3Partitioner.instance);\n        MerkleTrees mt2 = new MerkleTrees(Murmur3Partitioner.instance);\n        mt1.init();\n        mt2.init();\n\n        TreeResponse tr1 = new TreeResponse(a1, mt1);\n        TreeResponse tr2 = new TreeResponse(a2, mt2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).isEmpty());\n    }\n","date":"2018-01-26 03:32:24","endLine":59,"groupId":"3019","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFromEmptyMerkleTrees","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/96/930108d634b597357faa0fb8e9ee145ad390ca.src","preCode":"    public void testFromEmptyMerkleTrees() throws UnknownHostException\n    {\n        InetAddressAndPort a1 = InetAddressAndPort.getByName(\"127.0.0.1\");\n        InetAddressAndPort a2 = InetAddressAndPort.getByName(\"127.0.0.2\");\n\n        MerkleTrees mt1 = new MerkleTrees(Murmur3Partitioner.instance);\n        MerkleTrees mt2 = new MerkleTrees(Murmur3Partitioner.instance);\n        mt1.init();\n        mt2.init();\n\n        TreeResponse tr1 = new TreeResponse(a1, mt1);\n        TreeResponse tr2 = new TreeResponse(a2, mt2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).isEmpty());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/asymmetric/DifferenceHolderTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"N"},{"authorDate":"2019-03-17 01:30:54","commitOrder":3,"curCode":"    public void testFromMismatchedMerkleTrees() throws UnknownHostException\n    {\n        IPartitioner partitioner = Murmur3Partitioner.instance;\n        Range<Token> fullRange = new Range<>(partitioner.getMinimumToken(), partitioner.getMinimumToken());\n        int maxsize = 16;\n        InetAddressAndPort a1 = InetAddressAndPort.getByName(\"127.0.0.1\");\n        InetAddressAndPort a2 = InetAddressAndPort.getByName(\"127.0.0.2\");\n        \r\n        MerkleTrees mt1 = new MerkleTrees(partitioner);\n        MerkleTrees mt2 = new MerkleTrees(partitioner);\n        mt1.addMerkleTree(32, fullRange);\n        mt2.addMerkleTree(32, fullRange);\n        mt1.init();\n        mt2.init();\n        \r\n        for (MerkleTree.TreeRange range : mt1.rangeIterator())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n        for (MerkleTree.TreeRange range : mt2.rangeIterator())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n\n        MerkleTree.TreeRange leftmost = null;\n        MerkleTree.TreeRange middle = null;\n\n        mt1.maxsize(fullRange, maxsize + 2); \r\n\n        \r\n        Iterator<MerkleTree.TreeRange> ranges = mt1.rangeIterator();\n        leftmost = ranges.next();\n        mt1.split(leftmost.right);\n\n        \r\n        middle = mt1.get(leftmost.right);\n        middle.hash(digest(\"arbitrary!\"));\n        mt1.get(partitioner.midpoint(leftmost.left, leftmost.right)).hash(digest(\"even more arbitrary!\"));\n\n        TreeResponse tr1 = new TreeResponse(a1, mt1);\n        TreeResponse tr2 = new TreeResponse(a2, mt2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).size() == 1);\n        assertTrue(dh.hasDifferenceBetween(a1, a2, fullRange));\n        \r\n        assertEquals(Sets.newHashSet(a1), dh.keyHosts());\n    }\n","date":"2019-08-02 21:53:54","endLine":111,"groupId":"3020","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFromMismatchedMerkleTrees","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/88/810180eb96aa243d59bced6249a21b7513b1e1.src","preCode":"    public void testFromMismatchedMerkleTrees() throws UnknownHostException\n    {\n        IPartitioner partitioner = Murmur3Partitioner.instance;\n        Range<Token> fullRange = new Range<>(partitioner.getMinimumToken(), partitioner.getMinimumToken());\n        int maxsize = 16;\n        InetAddressAndPort a1 = InetAddressAndPort.getByName(\"127.0.0.1\");\n        InetAddressAndPort a2 = InetAddressAndPort.getByName(\"127.0.0.2\");\n        \r\n        MerkleTrees mt1 = new MerkleTrees(partitioner);\n        MerkleTrees mt2 = new MerkleTrees(partitioner);\n        mt1.addMerkleTree(32, fullRange);\n        mt2.addMerkleTree(32, fullRange);\n        mt1.init();\n        mt2.init();\n        \r\n        for (MerkleTree.TreeRange range : mt1.invalids())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n        for (MerkleTree.TreeRange range : mt2.invalids())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n\n        MerkleTree.TreeRange leftmost = null;\n        MerkleTree.TreeRange middle = null;\n\n        mt1.maxsize(fullRange, maxsize + 2); \r\n\n        \r\n        Iterator<MerkleTree.TreeRange> ranges = mt1.invalids();\n        leftmost = ranges.next();\n        mt1.split(leftmost.right);\n\n        \r\n        middle = mt1.get(leftmost.right);\n        middle.hash(\"arbitrary!\".getBytes());\n        mt1.get(partitioner.midpoint(leftmost.left, leftmost.right)).hash(\"even more arbitrary!\".getBytes());\n\n        TreeResponse tr1 = new TreeResponse(a1, mt1);\n        TreeResponse tr2 = new TreeResponse(a2, mt2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).size() == 1);\n        assertTrue(dh.hasDifferenceBetween(a1, a2, fullRange));\n        \r\n        assertEquals(Sets.newHashSet(a1), dh.keyHosts());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/asymmetric/DifferenceHolderTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"2117e2af00603f5fb2181e53dbcba190b2eab861","commitMessage":"@@@Make repair coordination less expensive by moving MerkleTrees off heap\n\npatch by Aleksey Yeschenko and Jeff Jirsa; reviewed by Benedict Elliott\nSmith and Marcus Eriksson for CASSANDRA-15202\n\nCo-authored-by: Aleksey Yeschenko <aleksey@apache.org>\nCo-authored-by: Jeff Jirsa <jjirsa@apple.com>\n","date":"2019-08-02 21:53:54","modifiedFileCount":"24","status":"M","submitter":"Jeff Jirsa"},{"authorTime":"2021-07-19 21:32:12","codes":[{"authorDate":"2021-07-19 21:32:12","commitOrder":4,"curCode":"    public void testFromEmptyMerkleTrees() throws UnknownHostException\n    {\n        InetAddressAndPort a1 = InetAddressAndPort.getByName(\"127.0.0.1\");\n        InetAddressAndPort a2 = InetAddressAndPort.getByName(\"127.0.0.2\");\n\n        MerkleTrees mts1 = new MerkleTrees(Murmur3Partitioner.instance);\n        MerkleTrees mts2 = new MerkleTrees(Murmur3Partitioner.instance);\n        mts1.init();\n        mts2.init();\n\n        TreeResponse tr1 = new TreeResponse(a1, mts1);\n        TreeResponse tr2 = new TreeResponse(a2, mts2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).isEmpty());\n    }\n","date":"2021-07-28 20:55:58","endLine":67,"groupId":"10277","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testFromEmptyMerkleTrees","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c3/7e3d7d9a61d7d276b5936c2c658955273eca38.src","preCode":"    public void testFromEmptyMerkleTrees() throws UnknownHostException\n    {\n        InetAddressAndPort a1 = InetAddressAndPort.getByName(\"127.0.0.1\");\n        InetAddressAndPort a2 = InetAddressAndPort.getByName(\"127.0.0.2\");\n\n        MerkleTrees mt1 = new MerkleTrees(Murmur3Partitioner.instance);\n        MerkleTrees mt2 = new MerkleTrees(Murmur3Partitioner.instance);\n        mt1.init();\n        mt2.init();\n\n        TreeResponse tr1 = new TreeResponse(a1, mt1);\n        TreeResponse tr2 = new TreeResponse(a2, mt2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).isEmpty());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/asymmetric/DifferenceHolderTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2021-07-19 21:32:12","commitOrder":4,"curCode":"    public void testFromMismatchedMerkleTrees() throws UnknownHostException\n    {\n        IPartitioner partitioner = Murmur3Partitioner.instance;\n        Range<Token> fullRange = new Range<>(partitioner.getMinimumToken(), partitioner.getMinimumToken());\n        int maxsize = 16;\n        InetAddressAndPort a1 = InetAddressAndPort.getByName(\"127.0.0.1\");\n        InetAddressAndPort a2 = InetAddressAndPort.getByName(\"127.0.0.2\");\n        \r\n        MerkleTrees mts1 = new MerkleTrees(partitioner);\n        MerkleTrees mts2 = new MerkleTrees(partitioner);\n        mts1.addMerkleTree(32, fullRange);\n        mts2.addMerkleTree(32, fullRange);\n        mts1.init();\n        mts2.init();\n        \r\n        for (MerkleTree.TreeRange range : mts1.rangeIterator())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n        for (MerkleTree.TreeRange range : mts2.rangeIterator())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n\n        MerkleTree.TreeRange leftmost = null;\n        MerkleTree.TreeRange middle = null;\n\n        mts1.maxsize(fullRange, maxsize + 2); \r\n\n        \r\n        Iterator<MerkleTree.TreeRange> ranges = mts1.rangeIterator();\n        leftmost = ranges.next();\n        mts1.split(leftmost.right);\n\n        \r\n        middle = mts1.get(leftmost.right);\n        middle.hash(digest(\"arbitrary!\"));\n        mts1.get(partitioner.midpoint(leftmost.left, leftmost.right)).hash(digest(\"even more arbitrary!\"));\n\n        TreeResponse tr1 = new TreeResponse(a1, mts1);\n        TreeResponse tr2 = new TreeResponse(a2, mts2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).size() == 1);\n        assertTrue(dh.hasDifferenceBetween(a1, a2, fullRange));\n        \r\n        assertEquals(Sets.newHashSet(a1), dh.keyHosts());\n    }\n","date":"2021-07-28 20:55:58","endLine":113,"groupId":"10277","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testFromMismatchedMerkleTrees","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c3/7e3d7d9a61d7d276b5936c2c658955273eca38.src","preCode":"    public void testFromMismatchedMerkleTrees() throws UnknownHostException\n    {\n        IPartitioner partitioner = Murmur3Partitioner.instance;\n        Range<Token> fullRange = new Range<>(partitioner.getMinimumToken(), partitioner.getMinimumToken());\n        int maxsize = 16;\n        InetAddressAndPort a1 = InetAddressAndPort.getByName(\"127.0.0.1\");\n        InetAddressAndPort a2 = InetAddressAndPort.getByName(\"127.0.0.2\");\n        \r\n        MerkleTrees mt1 = new MerkleTrees(partitioner);\n        MerkleTrees mt2 = new MerkleTrees(partitioner);\n        mt1.addMerkleTree(32, fullRange);\n        mt2.addMerkleTree(32, fullRange);\n        mt1.init();\n        mt2.init();\n        \r\n        for (MerkleTree.TreeRange range : mt1.rangeIterator())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n        for (MerkleTree.TreeRange range : mt2.rangeIterator())\n            range.addAll(new MerkleTreesTest.HIterator(range.right));\n\n        MerkleTree.TreeRange leftmost = null;\n        MerkleTree.TreeRange middle = null;\n\n        mt1.maxsize(fullRange, maxsize + 2); \r\n\n        \r\n        Iterator<MerkleTree.TreeRange> ranges = mt1.rangeIterator();\n        leftmost = ranges.next();\n        mt1.split(leftmost.right);\n\n        \r\n        middle = mt1.get(leftmost.right);\n        middle.hash(digest(\"arbitrary!\"));\n        mt1.get(partitioner.midpoint(leftmost.left, leftmost.right)).hash(digest(\"even more arbitrary!\"));\n\n        TreeResponse tr1 = new TreeResponse(a1, mt1);\n        TreeResponse tr2 = new TreeResponse(a2, mt2);\n\n        DifferenceHolder dh = new DifferenceHolder(Lists.newArrayList(tr1, tr2));\n        assertTrue(dh.get(a1).get(a2).size() == 1);\n        assertTrue(dh.hasDifferenceBetween(a1, a2, fullRange));\n        \r\n        assertEquals(Sets.newHashSet(a1), dh.keyHosts());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/asymmetric/DifferenceHolderTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"fd5dcc51cb09041585fa16c24149d0a66e415b54","commitMessage":"@@@MerkleTrees variables renaming tree -> trees.\n\nPatch by Xiang Wang; reviewed by Aleksei Zotov.  Benjamin Lerer and Ekaterina Dimitrova\n","date":"2021-07-28 20:55:58","modifiedFileCount":"8","status":"M","submitter":"xiang.wang"}]
