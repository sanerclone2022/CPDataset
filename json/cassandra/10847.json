[{"authorTime":"2017-08-12 05:23:22","codes":[{"authorDate":"2017-02-16 02:47:24","commitOrder":3,"curCode":"    public void estimateRemainingTasksInProgress()\n    {\n        PendingRepairManager prm = csm.getPendingRepairManagers().get(0);\n\n        UUID repairID = registerSession(cfs, true, true);\n        LocalSessionAccessor.prepareUnsafe(repairID, COORDINATOR, PARTICIPANTS);\n        SSTableReader sstable = makeSSTable(true);\n        mutateRepaired(sstable, repairID);\n        prm.addSSTable(sstable);\n        Assert.assertNotNull(prm.get(repairID));\n\n        Assert.assertEquals(0, prm.getEstimatedRemainingTasks());\n        Assert.assertEquals(0, prm.getNumPendingRepairFinishedTasks());\n    }\n","date":"2017-02-18 05:57:17","endLine":114,"groupId":"5262","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"estimateRemainingTasksInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/1b/4321701b7daab4d5a691c3b836cfa5a12cfcc5.src","preCode":"    public void estimateRemainingTasksInProgress()\n    {\n        PendingRepairManager prm = csm.getPendingRepairManagers().get(0);\n\n        UUID repairID = registerSession(cfs, true, true);\n        LocalSessionAccessor.prepareUnsafe(repairID, COORDINATOR, PARTICIPANTS);\n        SSTableReader sstable = makeSSTable(true);\n        mutateRepaired(sstable, repairID);\n        prm.addSSTable(sstable);\n        Assert.assertNotNull(prm.get(repairID));\n\n        Assert.assertEquals(0, prm.getEstimatedRemainingTasks());\n        Assert.assertEquals(0, prm.getNumPendingRepairFinishedTasks());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/compaction/PendingRepairManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"NB"},{"authorDate":"2017-08-12 05:23:22","commitOrder":3,"curCode":"    public void sessionHasData()\n    {\n        PendingRepairManager prm = csm.getPendingRepairManagers().get(0);\n\n        UUID repairID = registerSession(cfs, true, true);\n        LocalSessionAccessor.prepareUnsafe(repairID, COORDINATOR, PARTICIPANTS);\n\n        Assert.assertFalse(prm.hasDataForSession(repairID));\n        SSTableReader sstable = makeSSTable(true);\n        mutateRepaired(sstable, repairID);\n        prm.addSSTable(sstable);\n        Assert.assertTrue(prm.hasDataForSession(repairID));\n    }\n","date":"2017-08-19 01:48:00","endLine":302,"groupId":"15838","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"sessionHasData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/2b/88c9c16496f301739c5f4813ead6266f857cf1.src","preCode":"    public void sessionHasData()\n    {\n        PendingRepairManager prm = csm.getPendingRepairManagers().get(0);\n\n        UUID repairID = registerSession(cfs, true, true);\n        LocalSessionAccessor.prepareUnsafe(repairID, COORDINATOR, PARTICIPANTS);\n\n        Assert.assertFalse(prm.hasDataForSession(repairID));\n        SSTableReader sstable = makeSSTable(true);\n        mutateRepaired(sstable, repairID);\n        prm.addSSTable(sstable);\n        Assert.assertTrue(prm.hasDataForSession(repairID));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/compaction/PendingRepairManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"B"}],"commitId":"e1a1b80d424e31eeb5805c710ce010953160e3a4","commitMessage":"@@@Don't delete incremental repair sessions if they still have sstables\n\nPatch by Blake Eggleston; reviewed by Marcus Eriksson for CASSANDRA-13758\n","date":"2017-08-19 01:48:00","modifiedFileCount":"5","status":"M","submitter":"Blake Eggleston"},{"authorTime":"2018-07-06 06:10:40","codes":[{"authorDate":"2018-07-06 06:10:40","commitOrder":4,"curCode":"    public void estimateRemainingTasksInProgress()\n    {\n        PendingRepairManager prm = csm.getPendingRepairManagers().get(0);\n\n        UUID repairID = registerSession(cfs, true, true);\n        LocalSessionAccessor.prepareUnsafe(repairID, COORDINATOR, PARTICIPANTS);\n        SSTableReader sstable = makeSSTable(true);\n        mutateRepaired(sstable, repairID, false);\n        prm.addSSTable(sstable);\n        Assert.assertNotNull(prm.get(repairID));\n\n        Assert.assertEquals(0, prm.getEstimatedRemainingTasks());\n        Assert.assertEquals(0, prm.getNumPendingRepairFinishedTasks());\n    }\n","date":"2018-09-01 09:34:22","endLine":115,"groupId":"10847","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"estimateRemainingTasksInProgress","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d8/3e0633ea6f49ad1349c54f95b17699fd0fe49e.src","preCode":"    public void estimateRemainingTasksInProgress()\n    {\n        PendingRepairManager prm = csm.getPendingRepairManagers().get(0);\n\n        UUID repairID = registerSession(cfs, true, true);\n        LocalSessionAccessor.prepareUnsafe(repairID, COORDINATOR, PARTICIPANTS);\n        SSTableReader sstable = makeSSTable(true);\n        mutateRepaired(sstable, repairID);\n        prm.addSSTable(sstable);\n        Assert.assertNotNull(prm.get(repairID));\n\n        Assert.assertEquals(0, prm.getEstimatedRemainingTasks());\n        Assert.assertEquals(0, prm.getNumPendingRepairFinishedTasks());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/compaction/PendingRepairManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2018-07-06 06:10:40","commitOrder":4,"curCode":"    public void sessionHasData()\n    {\n        PendingRepairManager prm = csm.getPendingRepairManagers().get(0);\n\n        UUID repairID = registerSession(cfs, true, true);\n        LocalSessionAccessor.prepareUnsafe(repairID, COORDINATOR, PARTICIPANTS);\n\n        Assert.assertFalse(prm.hasDataForSession(repairID));\n        SSTableReader sstable = makeSSTable(true);\n        mutateRepaired(sstable, repairID, false);\n        prm.addSSTable(sstable);\n        Assert.assertTrue(prm.hasDataForSession(repairID));\n    }\n","date":"2018-09-01 09:34:22","endLine":302,"groupId":"10847","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"sessionHasData","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d8/3e0633ea6f49ad1349c54f95b17699fd0fe49e.src","preCode":"    public void sessionHasData()\n    {\n        PendingRepairManager prm = csm.getPendingRepairManagers().get(0);\n\n        UUID repairID = registerSession(cfs, true, true);\n        LocalSessionAccessor.prepareUnsafe(repairID, COORDINATOR, PARTICIPANTS);\n\n        Assert.assertFalse(prm.hasDataForSession(repairID));\n        SSTableReader sstable = makeSSTable(true);\n        mutateRepaired(sstable, repairID);\n        prm.addSSTable(sstable);\n        Assert.assertTrue(prm.hasDataForSession(repairID));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/compaction/PendingRepairManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"}],"commitId":"f7431b432875e334170ccdb19934d05545d2cebd","commitMessage":"@@@Transient Replication and Cheap Quorums\n\nPatch by Blake Eggleston.  Benedict Elliott Smith.  Marcus Eriksson.  Alex Petrov.  Ariel Weisberg; Reviewed by Blake Eggleston.  Marcus Eriksson.  Benedict Elliott Smith.  Alex Petrov.  Ariel Weisberg for CASSANDRA-14404\n\nCo-authored-by: Blake Eggleston <bdeggleston@gmail.com>\nCo-authored-by: Benedict Elliott Smith <benedict@apache.org>\nCo-authored-by: Marcus Eriksson <marcuse@apache.org>\nCo-authored-by: Alex Petrov <oleksandr.petrov@gmail.com>\n","date":"2018-09-01 09:34:22","modifiedFileCount":"230","status":"M","submitter":"Ariel Weisberg"}]
