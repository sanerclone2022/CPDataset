[{"authorTime":"2015-08-08 18:31:04","codes":[{"authorDate":"2015-08-08 18:31:04","commitOrder":1,"curCode":"    public void testDefaultBehaviorOfNextAndHasNext()\n    {\n\n        \r\n        \r\n        Iterator<Integer> iter = new AbstractIterator<Integer>()\n        {\n            private int rep;\n\n            @Override\n            public Integer computeNext()\n            {\n                switch (rep++)\n                {\n                    case 0:\n                        return 0;\n                    case 1:\n                        return 1;\n                    case 2:\n                        return endOfData();\n                    default:\n                        fail(\"Should not have been invoked again\");\n                        return null;\n                }\n            }\n        };\n\n        assertTrue(iter.hasNext());\n        assertEquals(0, (int) iter.next());\n\n        \r\n        assertTrue(iter.hasNext());\n        assertTrue(iter.hasNext());\n        assertTrue(iter.hasNext());\n        assertEquals(1, (int) iter.next());\n\n        assertFalse(iter.hasNext());\n\n        \r\n        assertFalse(iter.hasNext());\n\n        try\n        {\n            iter.next();\n            fail(\"no exception thrown\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n    }\n","date":"2015-08-08 18:31:04","endLine":84,"groupId":"18087","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDefaultBehaviorOfNextAndHasNext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b2/f94331318cf8648f9bb9b7347003037607a9b6.src","preCode":"    public void testDefaultBehaviorOfNextAndHasNext()\n    {\n\n        \r\n        \r\n        Iterator<Integer> iter = new AbstractIterator<Integer>()\n        {\n            private int rep;\n\n            @Override\n            public Integer computeNext()\n            {\n                switch (rep++)\n                {\n                    case 0:\n                        return 0;\n                    case 1:\n                        return 1;\n                    case 2:\n                        return endOfData();\n                    default:\n                        fail(\"Should not have been invoked again\");\n                        return null;\n                }\n            }\n        };\n\n        assertTrue(iter.hasNext());\n        assertEquals(0, (int) iter.next());\n\n        \r\n        assertTrue(iter.hasNext());\n        assertTrue(iter.hasNext());\n        assertTrue(iter.hasNext());\n        assertEquals(1, (int) iter.next());\n\n        assertFalse(iter.hasNext());\n\n        \r\n        assertFalse(iter.hasNext());\n\n        try\n        {\n            iter.next();\n            fail(\"no exception thrown\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/utils/AbstractIteratorTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"},{"authorDate":"2015-08-08 18:31:04","commitOrder":1,"curCode":"    public void testDefaultBehaviorOfPeek()\n    {\n    \r\n\r\n\r\n\n        AbstractIterator<Integer> iter = new AbstractIterator<Integer>()\n        {\n            private int rep;\n\n            @Override\n            public Integer computeNext()\n            {\n                switch (rep++)\n                {\n                    case 0:\n                        return 0;\n                    case 1:\n                        return 1;\n                    case 2:\n                        return endOfData();\n                    default:\n                        fail(\"Should not have been invoked again\");\n                        return null;\n                }\n            }\n        };\n\n        assertEquals(0, (int) iter.peek());\n        assertEquals(0, (int) iter.peek());\n        assertTrue(iter.hasNext());\n        assertEquals(0, (int) iter.peek());\n        assertEquals(0, (int) iter.next());\n\n        assertEquals(1, (int) iter.peek());\n        assertEquals(1, (int) iter.next());\n\n        try\n        {\n            iter.peek();\n            fail(\"peek() should throw NoSuchElementException at end\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n\n        try\n        {\n            iter.peek();\n            fail(\"peek() should continue to throw NoSuchElementException at end\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n\n        try\n        {\n            iter.next();\n            fail(\"next() should throw NoSuchElementException as usual\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n\n        try\n        {\n            iter.peek();\n            fail(\"peek() should still throw NoSuchElementException after next()\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n    }\n","date":"2015-08-08 18:31:04","endLine":158,"groupId":"18087","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDefaultBehaviorOfPeek","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b2/f94331318cf8648f9bb9b7347003037607a9b6.src","preCode":"    public void testDefaultBehaviorOfPeek()\n    {\n    \r\n\r\n\r\n\n        AbstractIterator<Integer> iter = new AbstractIterator<Integer>()\n        {\n            private int rep;\n\n            @Override\n            public Integer computeNext()\n            {\n                switch (rep++)\n                {\n                    case 0:\n                        return 0;\n                    case 1:\n                        return 1;\n                    case 2:\n                        return endOfData();\n                    default:\n                        fail(\"Should not have been invoked again\");\n                        return null;\n                }\n            }\n        };\n\n        assertEquals(0, (int) iter.peek());\n        assertEquals(0, (int) iter.peek());\n        assertTrue(iter.hasNext());\n        assertEquals(0, (int) iter.peek());\n        assertEquals(0, (int) iter.next());\n\n        assertEquals(1, (int) iter.peek());\n        assertEquals(1, (int) iter.next());\n\n        try\n        {\n            iter.peek();\n            fail(\"peek() should throw NoSuchElementException at end\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n\n        try\n        {\n            iter.peek();\n            fail(\"peek() should continue to throw NoSuchElementException at end\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n\n        try\n        {\n            iter.next();\n            fail(\"next() should throw NoSuchElementException as usual\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n\n        try\n        {\n            iter.peek();\n            fail(\"peek() should still throw NoSuchElementException after next()\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/utils/AbstractIteratorTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"05de664acd369d98154148dbf441accfa7f0552c","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-08-08 18:31:04","modifiedFileCount":"23","status":"B","submitter":"Benedict Elliott Smith"},{"authorTime":"2017-01-23 09:46:25","codes":[{"authorDate":"2017-01-23 09:46:25","commitOrder":2,"curCode":"    public void testDefaultBehaviorOfNextAndHasNext()\n    {\n\n        \r\n        \r\n        Iterator<Integer> iter = new AbstractIterator<Integer>()\n        {\n            private int rep;\n\n            @Override\n            public Integer computeNext()\n            {\n                switch (rep++)\n                {\n                    case 0:\n                        return 0;\n                    case 1:\n                        return 1;\n                    case 2:\n                        return endOfData();\n                    default:\n                        Assert.fail(\"Should not have been invoked again\");\n                        return null;\n                }\n            }\n        };\n\n        Assert.assertTrue(iter.hasNext());\n        Assert.assertEquals(0, (int) iter.next());\n\n        \r\n        Assert.assertTrue(iter.hasNext());\n        Assert.assertTrue(iter.hasNext());\n        Assert.assertTrue(iter.hasNext());\n        Assert.assertEquals(1, (int) iter.next());\n\n        Assert.assertFalse(iter.hasNext());\n\n        \r\n        Assert.assertFalse(iter.hasNext());\n\n        try\n        {\n            iter.next();\n            Assert.fail(\"no exception thrown\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n    }\n","date":"2017-01-23 09:46:25","endLine":85,"groupId":"101229","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testDefaultBehaviorOfNextAndHasNext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/81/19dcbabf29bf6a667e8489b30c7586519af790.src","preCode":"    public void testDefaultBehaviorOfNextAndHasNext()\n    {\n\n        \r\n        \r\n        Iterator<Integer> iter = new AbstractIterator<Integer>()\n        {\n            private int rep;\n\n            @Override\n            public Integer computeNext()\n            {\n                switch (rep++)\n                {\n                    case 0:\n                        return 0;\n                    case 1:\n                        return 1;\n                    case 2:\n                        return endOfData();\n                    default:\n                        fail(\"Should not have been invoked again\");\n                        return null;\n                }\n            }\n        };\n\n        assertTrue(iter.hasNext());\n        assertEquals(0, (int) iter.next());\n\n        \r\n        assertTrue(iter.hasNext());\n        assertTrue(iter.hasNext());\n        assertTrue(iter.hasNext());\n        assertEquals(1, (int) iter.next());\n\n        assertFalse(iter.hasNext());\n\n        \r\n        assertFalse(iter.hasNext());\n\n        try\n        {\n            iter.next();\n            fail(\"no exception thrown\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/utils/AbstractIteratorTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2017-01-23 09:46:25","commitOrder":2,"curCode":"    public void testDefaultBehaviorOfPeek()\n    {\n    \r\n\r\n\r\n\n        AbstractIterator<Integer> iter = new AbstractIterator<Integer>()\n        {\n            private int rep;\n\n            @Override\n            public Integer computeNext()\n            {\n                switch (rep++)\n                {\n                    case 0:\n                        return 0;\n                    case 1:\n                        return 1;\n                    case 2:\n                        return endOfData();\n                    default:\n                        Assert.fail(\"Should not have been invoked again\");\n                        return null;\n                }\n            }\n        };\n\n        Assert.assertEquals(0, (int) iter.peek());\n        Assert.assertEquals(0, (int) iter.peek());\n        Assert.assertTrue(iter.hasNext());\n        Assert.assertEquals(0, (int) iter.peek());\n        Assert.assertEquals(0, (int) iter.next());\n\n        Assert.assertEquals(1, (int) iter.peek());\n        Assert.assertEquals(1, (int) iter.next());\n\n        try\n        {\n            iter.peek();\n            Assert.fail(\"peek() should throw NoSuchElementException at end\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n\n        try\n        {\n            iter.peek();\n            Assert.fail(\"peek() should continue to throw NoSuchElementException at end\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n\n        try\n        {\n            iter.next();\n            Assert.fail(\"next() should throw NoSuchElementException as usual\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n\n        try\n        {\n            iter.peek();\n            Assert.fail(\"peek() should still throw NoSuchElementException after next()\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n    }\n","date":"2017-01-23 09:46:25","endLine":160,"groupId":"101229","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testDefaultBehaviorOfPeek","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/81/19dcbabf29bf6a667e8489b30c7586519af790.src","preCode":"    public void testDefaultBehaviorOfPeek()\n    {\n    \r\n\r\n\r\n\n        AbstractIterator<Integer> iter = new AbstractIterator<Integer>()\n        {\n            private int rep;\n\n            @Override\n            public Integer computeNext()\n            {\n                switch (rep++)\n                {\n                    case 0:\n                        return 0;\n                    case 1:\n                        return 1;\n                    case 2:\n                        return endOfData();\n                    default:\n                        fail(\"Should not have been invoked again\");\n                        return null;\n                }\n            }\n        };\n\n        assertEquals(0, (int) iter.peek());\n        assertEquals(0, (int) iter.peek());\n        assertTrue(iter.hasNext());\n        assertEquals(0, (int) iter.peek());\n        assertEquals(0, (int) iter.next());\n\n        assertEquals(1, (int) iter.peek());\n        assertEquals(1, (int) iter.next());\n\n        try\n        {\n            iter.peek();\n            fail(\"peek() should throw NoSuchElementException at end\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n\n        try\n        {\n            iter.peek();\n            fail(\"peek() should continue to throw NoSuchElementException at end\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n\n        try\n        {\n            iter.next();\n            fail(\"next() should throw NoSuchElementException as usual\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n\n        try\n        {\n            iter.peek();\n            fail(\"peek() should still throw NoSuchElementException after next()\");\n        }\n        catch (NoSuchElementException expected)\n        {\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/utils/AbstractIteratorTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"09dd72a8d61999d7d71bbc2a37e60f9cbdec7b80","commitMessage":"@@@use junit 4 (annotations)\n","date":"2017-01-23 09:46:25","modifiedFileCount":"1","status":"M","submitter":"Dave Brosius"}]
