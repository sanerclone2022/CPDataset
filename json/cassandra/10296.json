[{"authorTime":"2016-09-01 06:48:43","codes":[{"authorDate":"2016-09-01 06:48:43","commitOrder":1,"curCode":"    public void successCase()\n    {\n        InstrumentedCoordinatorSession coordinator = createInstrumentedSession();\n        Executor executor = MoreExecutors.directExecutor();\n        AtomicBoolean repairSubmitted = new AtomicBoolean(false);\n        SettableFuture<List<RepairSessionResult>> repairFuture = SettableFuture.create();\n        Supplier<ListenableFuture<List<RepairSessionResult>>> sessionSupplier = () ->\n        {\n            repairSubmitted.set(true);\n            return repairFuture;\n        };\n\n        \r\n        AtomicBoolean hasFailures = new AtomicBoolean(false);\n        Assert.assertFalse(repairSubmitted.get());\n        Assert.assertTrue(coordinator.sentMessages.isEmpty());\n        ListenableFuture sessionResult = coordinator.execute(executor, sessionSupplier, hasFailures);\n\n        for (InetAddress participant : PARTICIPANTS)\n        {\n\n            RepairMessage expected = new PrepareConsistentRequest(coordinator.sessionID, COORDINATOR, new HashSet<>(PARTICIPANTS));\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.setRepairingCalled);\n        coordinator.onSetRepairing = () -> Assert.assertEquals(PREPARED, coordinator.getState());\n        coordinator.handlePrepareResponse(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.setRepairingCalled);\n        Assert.assertTrue(repairSubmitted.get());\n\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        ArrayList<RepairSessionResult> results = Lists.newArrayList(createResult(coordinator),\n                                                                    createResult(coordinator),\n                                                                    createResult(coordinator));\n\n        coordinator.sentMessages.clear();\n        repairFuture.set(results);\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizePropose(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        coordinator.sentMessages.clear();\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        coordinator.onFinalizeCommit = () -> Assert.assertEquals(FINALIZE_PROMISED, coordinator.getState());\n        coordinator.handleFinalizePromise(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.finalizeCommitCalled);\n\n        Assert.assertEquals(ConsistentSession.State.FINALIZED, coordinator.getState());\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizeCommit(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        Assert.assertTrue(sessionResult.isDone());\n        Assert.assertFalse(hasFailures.get());\n    }\n","date":"2017-02-07 11:11:18","endLine":290,"groupId":"2703","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"successCase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b5/709203f433f8e7e9ff80f51b7afd92d85bae1d.src","preCode":"    public void successCase()\n    {\n        InstrumentedCoordinatorSession coordinator = createInstrumentedSession();\n        Executor executor = MoreExecutors.directExecutor();\n        AtomicBoolean repairSubmitted = new AtomicBoolean(false);\n        SettableFuture<List<RepairSessionResult>> repairFuture = SettableFuture.create();\n        Supplier<ListenableFuture<List<RepairSessionResult>>> sessionSupplier = () ->\n        {\n            repairSubmitted.set(true);\n            return repairFuture;\n        };\n\n        \r\n        AtomicBoolean hasFailures = new AtomicBoolean(false);\n        Assert.assertFalse(repairSubmitted.get());\n        Assert.assertTrue(coordinator.sentMessages.isEmpty());\n        ListenableFuture sessionResult = coordinator.execute(executor, sessionSupplier, hasFailures);\n\n        for (InetAddress participant : PARTICIPANTS)\n        {\n\n            RepairMessage expected = new PrepareConsistentRequest(coordinator.sessionID, COORDINATOR, new HashSet<>(PARTICIPANTS));\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.setRepairingCalled);\n        coordinator.onSetRepairing = () -> Assert.assertEquals(PREPARED, coordinator.getState());\n        coordinator.handlePrepareResponse(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.setRepairingCalled);\n        Assert.assertTrue(repairSubmitted.get());\n\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        ArrayList<RepairSessionResult> results = Lists.newArrayList(createResult(coordinator),\n                                                                    createResult(coordinator),\n                                                                    createResult(coordinator));\n\n        coordinator.sentMessages.clear();\n        repairFuture.set(results);\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizePropose(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        coordinator.sentMessages.clear();\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        coordinator.onFinalizeCommit = () -> Assert.assertEquals(FINALIZE_PROMISED, coordinator.getState());\n        coordinator.handleFinalizePromise(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.finalizeCommitCalled);\n\n        Assert.assertEquals(ConsistentSession.State.FINALIZED, coordinator.getState());\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizeCommit(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        Assert.assertTrue(sessionResult.isDone());\n        Assert.assertFalse(hasFailures.get());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/CoordinatorSessionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"B"},{"authorDate":"2016-09-01 06:48:43","commitOrder":1,"curCode":"    public void failedPropose()\n    {\n        InstrumentedCoordinatorSession coordinator = createInstrumentedSession();\n        Executor executor = MoreExecutors.directExecutor();\n        AtomicBoolean repairSubmitted = new AtomicBoolean(false);\n        SettableFuture<List<RepairSessionResult>> repairFuture = SettableFuture.create();\n        Supplier<ListenableFuture<List<RepairSessionResult>>> sessionSupplier = () ->\n        {\n            repairSubmitted.set(true);\n            return repairFuture;\n        };\n\n        \r\n        AtomicBoolean hasFailures = new AtomicBoolean(false);\n        Assert.assertFalse(repairSubmitted.get());\n        Assert.assertTrue(coordinator.sentMessages.isEmpty());\n        ListenableFuture sessionResult = coordinator.execute(executor, sessionSupplier, hasFailures);\n\n        for (InetAddress participant : PARTICIPANTS)\n        {\n\n            RepairMessage expected = new PrepareConsistentRequest(coordinator.sessionID, COORDINATOR, new HashSet<>(PARTICIPANTS));\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.setRepairingCalled);\n        coordinator.onSetRepairing = () -> Assert.assertEquals(PREPARED, coordinator.getState());\n        coordinator.handlePrepareResponse(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.setRepairingCalled);\n        Assert.assertTrue(repairSubmitted.get());\n\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        ArrayList<RepairSessionResult> results = Lists.newArrayList(createResult(coordinator),\n                                                                    createResult(coordinator),\n                                                                    createResult(coordinator));\n\n        coordinator.sentMessages.clear();\n        repairFuture.set(results);\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizePropose(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        coordinator.sentMessages.clear();\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        Assert.assertFalse(coordinator.failCalled);\n        coordinator.handleFinalizePromise(PARTICIPANT2, false);\n        Assert.assertEquals(ConsistentSession.State.FAILED, coordinator.getState());\n        Assert.assertTrue(coordinator.failCalled);\n\n        \r\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        coordinator.onFinalizeCommit = Assert::fail;\n        coordinator.handleFinalizePromise(PARTICIPANT3, true);\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        Assert.assertEquals(ConsistentSession.State.FAILED, coordinator.getState());\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FailSession(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        Assert.assertTrue(sessionResult.isDone());\n        Assert.assertTrue(hasFailures.get());\n    }\n","date":"2017-02-07 11:11:18","endLine":497,"groupId":"2703","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"failedPropose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b5/709203f433f8e7e9ff80f51b7afd92d85bae1d.src","preCode":"    public void failedPropose()\n    {\n        InstrumentedCoordinatorSession coordinator = createInstrumentedSession();\n        Executor executor = MoreExecutors.directExecutor();\n        AtomicBoolean repairSubmitted = new AtomicBoolean(false);\n        SettableFuture<List<RepairSessionResult>> repairFuture = SettableFuture.create();\n        Supplier<ListenableFuture<List<RepairSessionResult>>> sessionSupplier = () ->\n        {\n            repairSubmitted.set(true);\n            return repairFuture;\n        };\n\n        \r\n        AtomicBoolean hasFailures = new AtomicBoolean(false);\n        Assert.assertFalse(repairSubmitted.get());\n        Assert.assertTrue(coordinator.sentMessages.isEmpty());\n        ListenableFuture sessionResult = coordinator.execute(executor, sessionSupplier, hasFailures);\n\n        for (InetAddress participant : PARTICIPANTS)\n        {\n\n            RepairMessage expected = new PrepareConsistentRequest(coordinator.sessionID, COORDINATOR, new HashSet<>(PARTICIPANTS));\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.setRepairingCalled);\n        coordinator.onSetRepairing = () -> Assert.assertEquals(PREPARED, coordinator.getState());\n        coordinator.handlePrepareResponse(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.setRepairingCalled);\n        Assert.assertTrue(repairSubmitted.get());\n\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        ArrayList<RepairSessionResult> results = Lists.newArrayList(createResult(coordinator),\n                                                                    createResult(coordinator),\n                                                                    createResult(coordinator));\n\n        coordinator.sentMessages.clear();\n        repairFuture.set(results);\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizePropose(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        coordinator.sentMessages.clear();\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        Assert.assertFalse(coordinator.failCalled);\n        coordinator.handleFinalizePromise(PARTICIPANT2, false);\n        Assert.assertEquals(ConsistentSession.State.FAILED, coordinator.getState());\n        Assert.assertTrue(coordinator.failCalled);\n\n        \r\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        coordinator.onFinalizeCommit = Assert::fail;\n        coordinator.handleFinalizePromise(PARTICIPANT3, true);\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        Assert.assertEquals(ConsistentSession.State.FAILED, coordinator.getState());\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FailSession(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        Assert.assertTrue(sessionResult.isDone());\n        Assert.assertTrue(hasFailures.get());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/CoordinatorSessionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"B"}],"commitId":"98d74ed998706e9e047dc0f7886a1e9b18df3ce9","commitMessage":"@@@Fix consistency of incrementally repaired data\n\npatch by Blake Eggleston.  reviewed by Marcus Eriksson for CASSANDRA-9143\n","date":"2017-02-07 11:11:18","modifiedFileCount":"81","status":"B","submitter":"Blake Eggleston"},{"authorTime":"2017-07-06 04:20:32","codes":[{"authorDate":"2017-07-06 04:20:32","commitOrder":2,"curCode":"    public void successCase()\n    {\n        InstrumentedCoordinatorSession coordinator = createInstrumentedSession();\n        AtomicBoolean repairSubmitted = new AtomicBoolean(false);\n        SettableFuture<List<RepairSessionResult>> repairFuture = SettableFuture.create();\n        Supplier<ListenableFuture<List<RepairSessionResult>>> sessionSupplier = () ->\n        {\n            repairSubmitted.set(true);\n            return repairFuture;\n        };\n\n        \r\n        AtomicBoolean hasFailures = new AtomicBoolean(false);\n        Assert.assertFalse(repairSubmitted.get());\n        Assert.assertTrue(coordinator.sentMessages.isEmpty());\n        ListenableFuture sessionResult = coordinator.execute(sessionSupplier, hasFailures);\n\n        for (InetAddress participant : PARTICIPANTS)\n        {\n\n            RepairMessage expected = new PrepareConsistentRequest(coordinator.sessionID, COORDINATOR, new HashSet<>(PARTICIPANTS));\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.setRepairingCalled);\n        coordinator.onSetRepairing = () -> Assert.assertEquals(PREPARED, coordinator.getState());\n        coordinator.handlePrepareResponse(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.setRepairingCalled);\n        Assert.assertTrue(repairSubmitted.get());\n\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        ArrayList<RepairSessionResult> results = Lists.newArrayList(createResult(coordinator),\n                                                                    createResult(coordinator),\n                                                                    createResult(coordinator));\n\n        coordinator.sentMessages.clear();\n        repairFuture.set(results);\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizePropose(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        coordinator.sentMessages.clear();\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        coordinator.onFinalizeCommit = () -> Assert.assertEquals(FINALIZE_PROMISED, coordinator.getState());\n        coordinator.handleFinalizePromise(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.finalizeCommitCalled);\n\n        Assert.assertEquals(ConsistentSession.State.FINALIZED, coordinator.getState());\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizeCommit(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        Assert.assertTrue(sessionResult.isDone());\n        Assert.assertFalse(hasFailures.get());\n    }\n","date":"2017-07-07 01:31:37","endLine":288,"groupId":"2703","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"successCase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fb/312c38dfdfb3c99439a018dba650e7f59c3aaf.src","preCode":"    public void successCase()\n    {\n        InstrumentedCoordinatorSession coordinator = createInstrumentedSession();\n        Executor executor = MoreExecutors.directExecutor();\n        AtomicBoolean repairSubmitted = new AtomicBoolean(false);\n        SettableFuture<List<RepairSessionResult>> repairFuture = SettableFuture.create();\n        Supplier<ListenableFuture<List<RepairSessionResult>>> sessionSupplier = () ->\n        {\n            repairSubmitted.set(true);\n            return repairFuture;\n        };\n\n        \r\n        AtomicBoolean hasFailures = new AtomicBoolean(false);\n        Assert.assertFalse(repairSubmitted.get());\n        Assert.assertTrue(coordinator.sentMessages.isEmpty());\n        ListenableFuture sessionResult = coordinator.execute(executor, sessionSupplier, hasFailures);\n\n        for (InetAddress participant : PARTICIPANTS)\n        {\n\n            RepairMessage expected = new PrepareConsistentRequest(coordinator.sessionID, COORDINATOR, new HashSet<>(PARTICIPANTS));\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.setRepairingCalled);\n        coordinator.onSetRepairing = () -> Assert.assertEquals(PREPARED, coordinator.getState());\n        coordinator.handlePrepareResponse(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.setRepairingCalled);\n        Assert.assertTrue(repairSubmitted.get());\n\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        ArrayList<RepairSessionResult> results = Lists.newArrayList(createResult(coordinator),\n                                                                    createResult(coordinator),\n                                                                    createResult(coordinator));\n\n        coordinator.sentMessages.clear();\n        repairFuture.set(results);\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizePropose(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        coordinator.sentMessages.clear();\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        coordinator.onFinalizeCommit = () -> Assert.assertEquals(FINALIZE_PROMISED, coordinator.getState());\n        coordinator.handleFinalizePromise(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.finalizeCommitCalled);\n\n        Assert.assertEquals(ConsistentSession.State.FINALIZED, coordinator.getState());\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizeCommit(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        Assert.assertTrue(sessionResult.isDone());\n        Assert.assertFalse(hasFailures.get());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/CoordinatorSessionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2017-07-06 04:20:32","commitOrder":2,"curCode":"    public void failedPropose()\n    {\n        InstrumentedCoordinatorSession coordinator = createInstrumentedSession();\n        AtomicBoolean repairSubmitted = new AtomicBoolean(false);\n        SettableFuture<List<RepairSessionResult>> repairFuture = SettableFuture.create();\n        Supplier<ListenableFuture<List<RepairSessionResult>>> sessionSupplier = () ->\n        {\n            repairSubmitted.set(true);\n            return repairFuture;\n        };\n\n        \r\n        AtomicBoolean hasFailures = new AtomicBoolean(false);\n        Assert.assertFalse(repairSubmitted.get());\n        Assert.assertTrue(coordinator.sentMessages.isEmpty());\n        ListenableFuture sessionResult = coordinator.execute(sessionSupplier, hasFailures);\n\n        for (InetAddress participant : PARTICIPANTS)\n        {\n\n            RepairMessage expected = new PrepareConsistentRequest(coordinator.sessionID, COORDINATOR, new HashSet<>(PARTICIPANTS));\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.setRepairingCalled);\n        coordinator.onSetRepairing = () -> Assert.assertEquals(PREPARED, coordinator.getState());\n        coordinator.handlePrepareResponse(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.setRepairingCalled);\n        Assert.assertTrue(repairSubmitted.get());\n\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        ArrayList<RepairSessionResult> results = Lists.newArrayList(createResult(coordinator),\n                                                                    createResult(coordinator),\n                                                                    createResult(coordinator));\n\n        coordinator.sentMessages.clear();\n        repairFuture.set(results);\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizePropose(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        coordinator.sentMessages.clear();\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        Assert.assertFalse(coordinator.failCalled);\n        coordinator.handleFinalizePromise(PARTICIPANT2, false);\n        Assert.assertEquals(ConsistentSession.State.FAILED, coordinator.getState());\n        Assert.assertTrue(coordinator.failCalled);\n\n        \r\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        coordinator.onFinalizeCommit = Assert::fail;\n        coordinator.handleFinalizePromise(PARTICIPANT3, true);\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        Assert.assertEquals(ConsistentSession.State.FAILED, coordinator.getState());\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FailSession(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        Assert.assertTrue(sessionResult.isDone());\n        Assert.assertTrue(hasFailures.get());\n    }\n","date":"2017-07-07 01:31:37","endLine":492,"groupId":"2703","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"failedPropose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fb/312c38dfdfb3c99439a018dba650e7f59c3aaf.src","preCode":"    public void failedPropose()\n    {\n        InstrumentedCoordinatorSession coordinator = createInstrumentedSession();\n        Executor executor = MoreExecutors.directExecutor();\n        AtomicBoolean repairSubmitted = new AtomicBoolean(false);\n        SettableFuture<List<RepairSessionResult>> repairFuture = SettableFuture.create();\n        Supplier<ListenableFuture<List<RepairSessionResult>>> sessionSupplier = () ->\n        {\n            repairSubmitted.set(true);\n            return repairFuture;\n        };\n\n        \r\n        AtomicBoolean hasFailures = new AtomicBoolean(false);\n        Assert.assertFalse(repairSubmitted.get());\n        Assert.assertTrue(coordinator.sentMessages.isEmpty());\n        ListenableFuture sessionResult = coordinator.execute(executor, sessionSupplier, hasFailures);\n\n        for (InetAddress participant : PARTICIPANTS)\n        {\n\n            RepairMessage expected = new PrepareConsistentRequest(coordinator.sessionID, COORDINATOR, new HashSet<>(PARTICIPANTS));\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.setRepairingCalled);\n        coordinator.onSetRepairing = () -> Assert.assertEquals(PREPARED, coordinator.getState());\n        coordinator.handlePrepareResponse(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.setRepairingCalled);\n        Assert.assertTrue(repairSubmitted.get());\n\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        ArrayList<RepairSessionResult> results = Lists.newArrayList(createResult(coordinator),\n                                                                    createResult(coordinator),\n                                                                    createResult(coordinator));\n\n        coordinator.sentMessages.clear();\n        repairFuture.set(results);\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizePropose(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        coordinator.sentMessages.clear();\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        Assert.assertFalse(coordinator.failCalled);\n        coordinator.handleFinalizePromise(PARTICIPANT2, false);\n        Assert.assertEquals(ConsistentSession.State.FAILED, coordinator.getState());\n        Assert.assertTrue(coordinator.failCalled);\n\n        \r\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        coordinator.onFinalizeCommit = Assert::fail;\n        coordinator.handleFinalizePromise(PARTICIPANT3, true);\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        Assert.assertEquals(ConsistentSession.State.FAILED, coordinator.getState());\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FailSession(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        Assert.assertTrue(sessionResult.isDone());\n        Assert.assertTrue(hasFailures.get());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/CoordinatorSessionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"}],"commitId":"3234c0704a4fef08dedc4ff78f4ded3b9226fe80","commitMessage":"@@@Send IR coordinator messages synchronously\n\nPatch by Blake Eggleston; Reviewed by Marcus Eriksson for CASSANDRA-13673\n","date":"2017-07-07 01:31:37","modifiedFileCount":"5","status":"M","submitter":"Blake Eggleston"},{"authorTime":"2017-11-10 00:33:48","codes":[{"authorDate":"2017-11-10 00:33:48","commitOrder":3,"curCode":"    public void successCase()\n    {\n        InstrumentedCoordinatorSession coordinator = createInstrumentedSession();\n        AtomicBoolean repairSubmitted = new AtomicBoolean(false);\n        SettableFuture<List<RepairSessionResult>> repairFuture = SettableFuture.create();\n        Supplier<ListenableFuture<List<RepairSessionResult>>> sessionSupplier = () ->\n        {\n            repairSubmitted.set(true);\n            return repairFuture;\n        };\n\n        \r\n        AtomicBoolean hasFailures = new AtomicBoolean(false);\n        Assert.assertFalse(repairSubmitted.get());\n        Assert.assertTrue(coordinator.sentMessages.isEmpty());\n        ListenableFuture sessionResult = coordinator.execute(sessionSupplier, hasFailures);\n\n        for (InetAddressAndPort participant : PARTICIPANTS)\n        {\n\n            RepairMessage expected = new PrepareConsistentRequest(coordinator.sessionID, COORDINATOR, new HashSet<>(PARTICIPANTS));\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.setRepairingCalled);\n        coordinator.onSetRepairing = () -> Assert.assertEquals(PREPARED, coordinator.getState());\n        coordinator.handlePrepareResponse(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.setRepairingCalled);\n        Assert.assertTrue(repairSubmitted.get());\n\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        ArrayList<RepairSessionResult> results = Lists.newArrayList(createResult(coordinator),\n                                                                    createResult(coordinator),\n                                                                    createResult(coordinator));\n\n        coordinator.sentMessages.clear();\n        repairFuture.set(results);\n\n        \r\n        for (InetAddressAndPort participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizePropose(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        coordinator.sentMessages.clear();\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        coordinator.onFinalizeCommit = () -> Assert.assertEquals(FINALIZE_PROMISED, coordinator.getState());\n        coordinator.handleFinalizePromise(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.finalizeCommitCalled);\n\n        Assert.assertEquals(ConsistentSession.State.FINALIZED, coordinator.getState());\n        for (InetAddressAndPort participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizeCommit(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        Assert.assertTrue(sessionResult.isDone());\n        Assert.assertFalse(hasFailures.get());\n    }\n","date":"2018-01-26 03:32:24","endLine":288,"groupId":"10296","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"successCase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5d/054d3dfb1cd789a06837ec0c18b4d62a509dd9.src","preCode":"    public void successCase()\n    {\n        InstrumentedCoordinatorSession coordinator = createInstrumentedSession();\n        AtomicBoolean repairSubmitted = new AtomicBoolean(false);\n        SettableFuture<List<RepairSessionResult>> repairFuture = SettableFuture.create();\n        Supplier<ListenableFuture<List<RepairSessionResult>>> sessionSupplier = () ->\n        {\n            repairSubmitted.set(true);\n            return repairFuture;\n        };\n\n        \r\n        AtomicBoolean hasFailures = new AtomicBoolean(false);\n        Assert.assertFalse(repairSubmitted.get());\n        Assert.assertTrue(coordinator.sentMessages.isEmpty());\n        ListenableFuture sessionResult = coordinator.execute(sessionSupplier, hasFailures);\n\n        for (InetAddress participant : PARTICIPANTS)\n        {\n\n            RepairMessage expected = new PrepareConsistentRequest(coordinator.sessionID, COORDINATOR, new HashSet<>(PARTICIPANTS));\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.setRepairingCalled);\n        coordinator.onSetRepairing = () -> Assert.assertEquals(PREPARED, coordinator.getState());\n        coordinator.handlePrepareResponse(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.setRepairingCalled);\n        Assert.assertTrue(repairSubmitted.get());\n\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        ArrayList<RepairSessionResult> results = Lists.newArrayList(createResult(coordinator),\n                                                                    createResult(coordinator),\n                                                                    createResult(coordinator));\n\n        coordinator.sentMessages.clear();\n        repairFuture.set(results);\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizePropose(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        coordinator.sentMessages.clear();\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        coordinator.onFinalizeCommit = () -> Assert.assertEquals(FINALIZE_PROMISED, coordinator.getState());\n        coordinator.handleFinalizePromise(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.finalizeCommitCalled);\n\n        Assert.assertEquals(ConsistentSession.State.FINALIZED, coordinator.getState());\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizeCommit(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        Assert.assertTrue(sessionResult.isDone());\n        Assert.assertFalse(hasFailures.get());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/CoordinatorSessionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2017-11-10 00:33:48","commitOrder":3,"curCode":"    public void failedPropose()\n    {\n        InstrumentedCoordinatorSession coordinator = createInstrumentedSession();\n        AtomicBoolean repairSubmitted = new AtomicBoolean(false);\n        SettableFuture<List<RepairSessionResult>> repairFuture = SettableFuture.create();\n        Supplier<ListenableFuture<List<RepairSessionResult>>> sessionSupplier = () ->\n        {\n            repairSubmitted.set(true);\n            return repairFuture;\n        };\n\n        \r\n        AtomicBoolean hasFailures = new AtomicBoolean(false);\n        Assert.assertFalse(repairSubmitted.get());\n        Assert.assertTrue(coordinator.sentMessages.isEmpty());\n        ListenableFuture sessionResult = coordinator.execute(sessionSupplier, hasFailures);\n\n        for (InetAddressAndPort participant : PARTICIPANTS)\n        {\n\n            RepairMessage expected = new PrepareConsistentRequest(coordinator.sessionID, COORDINATOR, new HashSet<>(PARTICIPANTS));\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.setRepairingCalled);\n        coordinator.onSetRepairing = () -> Assert.assertEquals(PREPARED, coordinator.getState());\n        coordinator.handlePrepareResponse(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.setRepairingCalled);\n        Assert.assertTrue(repairSubmitted.get());\n\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        ArrayList<RepairSessionResult> results = Lists.newArrayList(createResult(coordinator),\n                                                                    createResult(coordinator),\n                                                                    createResult(coordinator));\n\n        coordinator.sentMessages.clear();\n        repairFuture.set(results);\n\n        \r\n        for (InetAddressAndPort participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizePropose(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        coordinator.sentMessages.clear();\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        Assert.assertFalse(coordinator.failCalled);\n        coordinator.handleFinalizePromise(PARTICIPANT2, false);\n        Assert.assertEquals(ConsistentSession.State.FAILED, coordinator.getState());\n        Assert.assertTrue(coordinator.failCalled);\n\n        \r\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        coordinator.onFinalizeCommit = Assert::fail;\n        coordinator.handleFinalizePromise(PARTICIPANT3, true);\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        Assert.assertEquals(ConsistentSession.State.FAILED, coordinator.getState());\n\n        \r\n        for (InetAddressAndPort participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FailSession(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        Assert.assertTrue(sessionResult.isDone());\n        Assert.assertTrue(hasFailures.get());\n    }\n","date":"2018-01-26 03:32:24","endLine":492,"groupId":"10296","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"failedPropose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5d/054d3dfb1cd789a06837ec0c18b4d62a509dd9.src","preCode":"    public void failedPropose()\n    {\n        InstrumentedCoordinatorSession coordinator = createInstrumentedSession();\n        AtomicBoolean repairSubmitted = new AtomicBoolean(false);\n        SettableFuture<List<RepairSessionResult>> repairFuture = SettableFuture.create();\n        Supplier<ListenableFuture<List<RepairSessionResult>>> sessionSupplier = () ->\n        {\n            repairSubmitted.set(true);\n            return repairFuture;\n        };\n\n        \r\n        AtomicBoolean hasFailures = new AtomicBoolean(false);\n        Assert.assertFalse(repairSubmitted.get());\n        Assert.assertTrue(coordinator.sentMessages.isEmpty());\n        ListenableFuture sessionResult = coordinator.execute(sessionSupplier, hasFailures);\n\n        for (InetAddress participant : PARTICIPANTS)\n        {\n\n            RepairMessage expected = new PrepareConsistentRequest(coordinator.sessionID, COORDINATOR, new HashSet<>(PARTICIPANTS));\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        coordinator.handlePrepareResponse(PARTICIPANT2, true);\n        Assert.assertEquals(ConsistentSession.State.PREPARING, coordinator.getState());\n\n        \r\n        Assert.assertFalse(coordinator.setRepairingCalled);\n        coordinator.onSetRepairing = () -> Assert.assertEquals(PREPARED, coordinator.getState());\n        coordinator.handlePrepareResponse(PARTICIPANT3, true);\n        Assert.assertTrue(coordinator.setRepairingCalled);\n        Assert.assertTrue(repairSubmitted.get());\n\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        ArrayList<RepairSessionResult> results = Lists.newArrayList(createResult(coordinator),\n                                                                    createResult(coordinator),\n                                                                    createResult(coordinator));\n\n        coordinator.sentMessages.clear();\n        repairFuture.set(results);\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FinalizePropose(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        \r\n        coordinator.sentMessages.clear();\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        coordinator.handleFinalizePromise(PARTICIPANT1, true);\n        Assert.assertEquals(ConsistentSession.State.REPAIRING, coordinator.getState());\n\n        Assert.assertFalse(coordinator.failCalled);\n        coordinator.handleFinalizePromise(PARTICIPANT2, false);\n        Assert.assertEquals(ConsistentSession.State.FAILED, coordinator.getState());\n        Assert.assertTrue(coordinator.failCalled);\n\n        \r\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        coordinator.onFinalizeCommit = Assert::fail;\n        coordinator.handleFinalizePromise(PARTICIPANT3, true);\n        Assert.assertFalse(coordinator.finalizeCommitCalled);\n        Assert.assertEquals(ConsistentSession.State.FAILED, coordinator.getState());\n\n        \r\n        for (InetAddress participant : PARTICIPANTS)\n        {\n            RepairMessage expected = new FailSession(coordinator.sessionID);\n            assertMessageSent(coordinator, participant, expected);\n        }\n\n        Assert.assertTrue(sessionResult.isDone());\n        Assert.assertTrue(hasFailures.get());\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/CoordinatorSessionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"}],"commitId":"59b5b6bef0fa76bf5740b688fcd4d9cf525760d0","commitMessage":"@@@Allow storage port to be configurable per node\n\nPatch by Ariel Weisberg; Reviewed by Jason Brown for CASSANDRA-7544\n","date":"2018-01-26 03:32:24","modifiedFileCount":"308","status":"M","submitter":"Ariel Weisberg"}]
