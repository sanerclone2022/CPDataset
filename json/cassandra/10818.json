[{"authorTime":"2018-05-22 19:43:22","codes":[{"authorDate":"2018-05-22 19:43:22","commitOrder":1,"curCode":"    public void testIndexedReaderRowDeletion() throws Throwable\n    {\n        \r\n        DatabaseDescriptor.setCorruptedTombstoneStrategy(Config.CorruptedTombstoneStrategy.exception);\n        int maxSizePre = DatabaseDescriptor.getColumnIndexSize();\n        DatabaseDescriptor.setColumnIndexSize(1024);\n        prepareWide();\n        RowUpdateBuilder.deleteRowAt(getCurrentColumnFamilyStore().metadata(), System.currentTimeMillis() * 1000, -1, 22, 33).apply();\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        readAndValidate(true);\n        readAndValidate(false);\n        DatabaseDescriptor.setColumnIndexSize(maxSizePre);\n    }\n","date":"2018-06-06 03:47:20","endLine":356,"groupId":"16808","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexedReaderRowDeletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ca/420dabd559b1bf905d25e7a4054bbc096ad92b.src","preCode":"    public void testIndexedReaderRowDeletion() throws Throwable\n    {\n        \r\n        DatabaseDescriptor.setCorruptedTombstoneStrategy(Config.CorruptedTombstoneStrategy.exception);\n        int maxSizePre = DatabaseDescriptor.getColumnIndexSize();\n        DatabaseDescriptor.setColumnIndexSize(1024);\n        prepareWide();\n        RowUpdateBuilder.deleteRowAt(getCurrentColumnFamilyStore().metadata(), System.currentTimeMillis() * 1000, -1, 22, 33).apply();\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        readAndValidate(true);\n        readAndValidate(false);\n        DatabaseDescriptor.setColumnIndexSize(maxSizePre);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/compaction/CompactionsCQLTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"B"},{"authorDate":"2018-05-22 19:43:22","commitOrder":1,"curCode":"    public void testIndexedReaderTombstone() throws Throwable\n    {\n        \r\n        DatabaseDescriptor.setCorruptedTombstoneStrategy(Config.CorruptedTombstoneStrategy.exception);\n        int maxSizePre = DatabaseDescriptor.getColumnIndexSize();\n        DatabaseDescriptor.setColumnIndexSize(1024);\n        prepareWide();\n        RowUpdateBuilder rub = new RowUpdateBuilder(getCurrentColumnFamilyStore().metadata(), -1, System.currentTimeMillis() * 1000, 22).clustering(33).delete(\"b\");\n        rub.build().apply();\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        readAndValidate(true);\n        readAndValidate(false);\n        DatabaseDescriptor.setColumnIndexSize(maxSizePre);\n    }\n","date":"2018-06-06 03:47:20","endLine":372,"groupId":"16808","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexedReaderTombstone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ca/420dabd559b1bf905d25e7a4054bbc096ad92b.src","preCode":"    public void testIndexedReaderTombstone() throws Throwable\n    {\n        \r\n        DatabaseDescriptor.setCorruptedTombstoneStrategy(Config.CorruptedTombstoneStrategy.exception);\n        int maxSizePre = DatabaseDescriptor.getColumnIndexSize();\n        DatabaseDescriptor.setColumnIndexSize(1024);\n        prepareWide();\n        RowUpdateBuilder rub = new RowUpdateBuilder(getCurrentColumnFamilyStore().metadata(), -1, System.currentTimeMillis() * 1000, 22).clustering(33).delete(\"b\");\n        rub.build().apply();\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        readAndValidate(true);\n        readAndValidate(false);\n        DatabaseDescriptor.setColumnIndexSize(maxSizePre);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/compaction/CompactionsCQLTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"B"}],"commitId":"5d8767765090cd968c39008f76b0cd795d6e5032","commitMessage":"@@@Add option to sanity check tombstones on reads/compaction\n\nPatch by marcuse; reviewed by Ariel Weisberg for CASSANDRA-14467\n","date":"2018-06-06 03:47:20","modifiedFileCount":"21","status":"B","submitter":"Marcus Eriksson"},{"authorTime":"2020-01-15 15:55:04","codes":[{"authorDate":"2020-01-15 15:55:04","commitOrder":2,"curCode":"    public void testIndexedReaderRowDeletion() throws Throwable\n    {\n        \r\n        DatabaseDescriptor.setCorruptedTombstoneStrategy(Config.CorruptedTombstoneStrategy.exception);\n        int maxSizePre = DatabaseDescriptor.getColumnIndexSizeInKB();\n        DatabaseDescriptor.setColumnIndexSize(1024);\n        prepareWide();\n        RowUpdateBuilder.deleteRowAt(getCurrentColumnFamilyStore().metadata(), System.currentTimeMillis() * 1000, -1, 22, 33).apply();\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        readAndValidate(true);\n        readAndValidate(false);\n        DatabaseDescriptor.setColumnIndexSize(maxSizePre);\n    }\n","date":"2020-02-06 03:57:21","endLine":360,"groupId":"10818","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexedReaderRowDeletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/14/b3d6da5d676987baca137527954f3ccec6ec53.src","preCode":"    public void testIndexedReaderRowDeletion() throws Throwable\n    {\n        \r\n        DatabaseDescriptor.setCorruptedTombstoneStrategy(Config.CorruptedTombstoneStrategy.exception);\n        int maxSizePre = DatabaseDescriptor.getColumnIndexSize();\n        DatabaseDescriptor.setColumnIndexSize(1024);\n        prepareWide();\n        RowUpdateBuilder.deleteRowAt(getCurrentColumnFamilyStore().metadata(), System.currentTimeMillis() * 1000, -1, 22, 33).apply();\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        readAndValidate(true);\n        readAndValidate(false);\n        DatabaseDescriptor.setColumnIndexSize(maxSizePre);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/compaction/CompactionsCQLTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"M"},{"authorDate":"2020-01-15 15:55:04","commitOrder":2,"curCode":"    public void testIndexedReaderTombstone() throws Throwable\n    {\n        \r\n        DatabaseDescriptor.setCorruptedTombstoneStrategy(Config.CorruptedTombstoneStrategy.exception);\n        int maxSizePre = DatabaseDescriptor.getColumnIndexSizeInKB();\n        DatabaseDescriptor.setColumnIndexSize(1024);\n        prepareWide();\n        RowUpdateBuilder rub = new RowUpdateBuilder(getCurrentColumnFamilyStore().metadata(), -1, System.currentTimeMillis() * 1000, 22).clustering(33).delete(\"b\");\n        rub.build().apply();\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        readAndValidate(true);\n        readAndValidate(false);\n        DatabaseDescriptor.setColumnIndexSize(maxSizePre);\n    }\n","date":"2020-02-06 03:57:21","endLine":376,"groupId":"10818","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexedReaderTombstone","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/14/b3d6da5d676987baca137527954f3ccec6ec53.src","preCode":"    public void testIndexedReaderTombstone() throws Throwable\n    {\n        \r\n        DatabaseDescriptor.setCorruptedTombstoneStrategy(Config.CorruptedTombstoneStrategy.exception);\n        int maxSizePre = DatabaseDescriptor.getColumnIndexSize();\n        DatabaseDescriptor.setColumnIndexSize(1024);\n        prepareWide();\n        RowUpdateBuilder rub = new RowUpdateBuilder(getCurrentColumnFamilyStore().metadata(), -1, System.currentTimeMillis() * 1000, 22).clustering(33).delete(\"b\");\n        rub.build().apply();\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        readAndValidate(true);\n        readAndValidate(false);\n        DatabaseDescriptor.setColumnIndexSize(maxSizePre);\n    }\n","realPath":"test/unit/org/apache/cassandra/db/compaction/CompactionsCQLTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"M"}],"commitId":"7b637d5c2dbfcb387fc24d4d7145f6eb1e2f2052","commitMessage":"@@@Potential Overflow in DatabaseDescriptor Functions That Convert Between KB/MB & Bytes\n\nPatch by Mallika Kulkarni; reviewed by Jordan West and Dinesh Joshi for CASSANDRA-15470\n","date":"2020-02-06 03:57:21","modifiedFileCount":"4","status":"M","submitter":"Mallika Kulkarni"}]
