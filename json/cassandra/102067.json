[{"authorTime":"2021-04-22 06:27:29","codes":[{"authorDate":"2021-04-22 06:27:29","commitOrder":1,"curCode":"    public void testBadAckInShadow()\n    {\n        final AtomicBoolean ackSend = new AtomicBoolean(false);\n        MockMessagingSpy spySyn = MockMessagingService.when(verb(Verb.GOSSIP_DIGEST_SYN))\n                .respondN((msgOut, to) ->\n                {\n                    \r\n                    if (!ackSend.compareAndSet(false, true))\n                    {\n                        while (!Gossiper.instance.isEnabled()) ;\n                    }\n                    InetAddressAndPort junkaddr;\n                    try\n                    {\n                        junkaddr = InetAddressAndPort.getByName(\"1.1.1.1\");\n                    }\n                    catch (UnknownHostException e)\n                    {\n                        throw new RuntimeException(e);\n                    }\n\n                    HeartBeatState hb = new HeartBeatState(123, 456);\n                    EndpointState state = new EndpointState(hb);\n                    List<GossipDigest> gDigests = new ArrayList<GossipDigest>();\n                    gDigests.add(new GossipDigest(FBUtilities.getBroadcastAddressAndPort(), hb.getGeneration(), hb.getHeartBeatVersion()));\n                    gDigests.add(new GossipDigest(junkaddr, hb.getGeneration(), hb.getHeartBeatVersion()));\n                    Map<InetAddressAndPort, EndpointState> smap = new HashMap<InetAddressAndPort, EndpointState>()\n                    {\n                        {\n                            put(FBUtilities.getBroadcastAddressAndPort(), state);\n                            put(junkaddr, state);\n                        }\n                    };\n                    GossipDigestAck payload = new GossipDigestAck(gDigests, smap);\n\n                    logger.debug(\"Simulating bad digest ACK reply\");\n                    return Message.builder(Verb.GOSSIP_DIGEST_ACK, payload)\n                                  .from(to)\n                                  .build();\n                }, 1);\n\n\n        System.setProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\", \"false\");\n        try\n        {\n            StorageService.instance.checkForEndpointCollision(SystemKeyspace.getLocalHostId(), SystemKeyspace.loadHostIds().keySet());\n        }\n        catch (Exception e)\n        {\n            assertEquals(\"Unable to gossip with any peers\", e.getMessage());\n        }\n        System.clearProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\");\n    }\n","date":"2021-04-22 06:29:04","endLine":184,"groupId":"19652","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadAckInShadow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/90/374726f57da8e1a320da0514c47a23be045ef8.src","preCode":"    public void testBadAckInShadow()\n    {\n        final AtomicBoolean ackSend = new AtomicBoolean(false);\n        MockMessagingSpy spySyn = MockMessagingService.when(verb(Verb.GOSSIP_DIGEST_SYN))\n                .respondN((msgOut, to) ->\n                {\n                    \r\n                    if (!ackSend.compareAndSet(false, true))\n                    {\n                        while (!Gossiper.instance.isEnabled()) ;\n                    }\n                    InetAddressAndPort junkaddr;\n                    try\n                    {\n                        junkaddr = InetAddressAndPort.getByName(\"1.1.1.1\");\n                    }\n                    catch (UnknownHostException e)\n                    {\n                        throw new RuntimeException(e);\n                    }\n\n                    HeartBeatState hb = new HeartBeatState(123, 456);\n                    EndpointState state = new EndpointState(hb);\n                    List<GossipDigest> gDigests = new ArrayList<GossipDigest>();\n                    gDigests.add(new GossipDigest(FBUtilities.getBroadcastAddressAndPort(), hb.getGeneration(), hb.getHeartBeatVersion()));\n                    gDigests.add(new GossipDigest(junkaddr, hb.getGeneration(), hb.getHeartBeatVersion()));\n                    Map<InetAddressAndPort, EndpointState> smap = new HashMap<InetAddressAndPort, EndpointState>()\n                    {\n                        {\n                            put(FBUtilities.getBroadcastAddressAndPort(), state);\n                            put(junkaddr, state);\n                        }\n                    };\n                    GossipDigestAck payload = new GossipDigestAck(gDigests, smap);\n\n                    logger.debug(\"Simulating bad digest ACK reply\");\n                    return Message.builder(Verb.GOSSIP_DIGEST_ACK, payload)\n                                  .from(to)\n                                  .build();\n                }, 1);\n\n\n        System.setProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\", \"false\");\n        try\n        {\n            StorageService.instance.checkForEndpointCollision(SystemKeyspace.getLocalHostId(), SystemKeyspace.loadHostIds().keySet());\n        }\n        catch (Exception e)\n        {\n            assertEquals(\"Unable to gossip with any peers\", e.getMessage());\n        }\n        System.clearProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\");\n    }\n","realPath":"test/unit/org/apache/cassandra/gms/ShadowRoundTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"B"},{"authorDate":"2021-04-22 06:27:29","commitOrder":1,"curCode":"    public void testPreviouslyAssassinatedInShadow()\n    {\n        final AtomicBoolean ackSend = new AtomicBoolean(false);\n        MockMessagingSpy spySyn = MockMessagingService.when(verb(Verb.GOSSIP_DIGEST_SYN))\n                .respondN((msgOut, to) ->\n                {\n                   \r\n                   if (!ackSend.compareAndSet(false, true))\n                   {\n                       while (!Gossiper.instance.isEnabled()) ;\n                   }\n                   HeartBeatState hb = new HeartBeatState(123, 456);\n                   EndpointState state = new EndpointState(hb);\n                   state.addApplicationState(ApplicationState.STATUS_WITH_PORT, VersionedValue.unsafeMakeVersionedValue(VersionedValue.STATUS_LEFT, 1));\n                   GossipDigestAck payload = new GossipDigestAck(\n                       Collections.singletonList(new GossipDigest(FBUtilities.getBroadcastAddressAndPort(), hb.getGeneration(), hb.getHeartBeatVersion())),\n                       Collections.singletonMap(FBUtilities.getBroadcastAddressAndPort(), state));\n\n                   logger.debug(\"Simulating bad digest ACK reply\");\n                   return Message.builder(Verb.GOSSIP_DIGEST_ACK, payload)\n                                 .from(to)\n                                 .build();\n                }, 1);\n\n\n        System.setProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\", \"false\");\n        StorageService.instance.checkForEndpointCollision(SystemKeyspace.getLocalHostId(), SystemKeyspace.loadHostIds().keySet());\n        System.clearProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\");\n    }\n","date":"2021-04-22 06:29:04","endLine":215,"groupId":"19653","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreviouslyAssassinatedInShadow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/90/374726f57da8e1a320da0514c47a23be045ef8.src","preCode":"    public void testPreviouslyAssassinatedInShadow()\n    {\n        final AtomicBoolean ackSend = new AtomicBoolean(false);\n        MockMessagingSpy spySyn = MockMessagingService.when(verb(Verb.GOSSIP_DIGEST_SYN))\n                .respondN((msgOut, to) ->\n                {\n                   \r\n                   if (!ackSend.compareAndSet(false, true))\n                   {\n                       while (!Gossiper.instance.isEnabled()) ;\n                   }\n                   HeartBeatState hb = new HeartBeatState(123, 456);\n                   EndpointState state = new EndpointState(hb);\n                   state.addApplicationState(ApplicationState.STATUS_WITH_PORT, VersionedValue.unsafeMakeVersionedValue(VersionedValue.STATUS_LEFT, 1));\n                   GossipDigestAck payload = new GossipDigestAck(\n                       Collections.singletonList(new GossipDigest(FBUtilities.getBroadcastAddressAndPort(), hb.getGeneration(), hb.getHeartBeatVersion())),\n                       Collections.singletonMap(FBUtilities.getBroadcastAddressAndPort(), state));\n\n                   logger.debug(\"Simulating bad digest ACK reply\");\n                   return Message.builder(Verb.GOSSIP_DIGEST_ACK, payload)\n                                 .from(to)\n                                 .build();\n                }, 1);\n\n\n        System.setProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\", \"false\");\n        StorageService.instance.checkForEndpointCollision(SystemKeyspace.getLocalHostId(), SystemKeyspace.loadHostIds().keySet());\n        System.clearProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\");\n    }\n","realPath":"test/unit/org/apache/cassandra/gms/ShadowRoundTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"B"}],"commitId":"6564fe39ac556aef6d6c93e47cc955c75be2df26","commitMessage":"@@@Merge branch 'cassandra-3.11' into trunk\n","date":"2021-04-22 06:29:04","modifiedFileCount":"3","status":"B","submitter":"Brandon Williams"},{"authorTime":"2021-05-06 17:46:21","codes":[{"authorDate":"2021-05-06 17:46:21","commitOrder":2,"curCode":"    public void testBadAckInShadow()\n    {\n        final AtomicBoolean ackSend = new AtomicBoolean(false);\n        MockMessagingSpy spySyn = MockMessagingService.when(verb(Verb.GOSSIP_DIGEST_SYN))\n                .respondN((msgOut, to) ->\n                {\n                    \r\n                    if (!ackSend.compareAndSet(false, true))\n                    {\n                        while (!Gossiper.instance.isEnabled()) ;\n                    }\n                    InetAddressAndPort junkaddr;\n                    try\n                    {\n                        junkaddr = InetAddressAndPort.getByName(\"1.1.1.1\");\n                    }\n                    catch (UnknownHostException e)\n                    {\n                        throw new RuntimeException(e);\n                    }\n\n                    HeartBeatState hb = new HeartBeatState(123, 456);\n                    EndpointState state = new EndpointState(hb);\n                    List<GossipDigest> gDigests = new ArrayList<GossipDigest>();\n                    gDigests.add(new GossipDigest(FBUtilities.getBroadcastAddressAndPort(), hb.getGeneration(), hb.getHeartBeatVersion()));\n                    gDigests.add(new GossipDigest(junkaddr, hb.getGeneration(), hb.getHeartBeatVersion()));\n                    Map<InetAddressAndPort, EndpointState> smap = new HashMap<InetAddressAndPort, EndpointState>()\n                    {\n                        {\n                            put(FBUtilities.getBroadcastAddressAndPort(), state);\n                            put(junkaddr, state);\n                        }\n                    };\n                    GossipDigestAck payload = new GossipDigestAck(gDigests, smap);\n\n                    logger.debug(\"Simulating bad digest ACK reply\");\n                    return Message.builder(Verb.GOSSIP_DIGEST_ACK, payload)\n                                  .from(to)\n                                  .build();\n                }, 1);\n\n\n        System.setProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\", \"false\");\n        try\n        {\n            StorageService.instance.checkForEndpointCollision(SystemKeyspace.getOrInitializeLocalHostId(), SystemKeyspace.loadHostIds().keySet());\n        }\n        catch (Exception e)\n        {\n            assertEquals(\"Unable to gossip with any peers\", e.getMessage());\n        }\n        System.clearProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\");\n    }\n","date":"2021-05-06 17:46:52","endLine":184,"groupId":"102067","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testBadAckInShadow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/38/1edb8a7ca9d75c58ceae2b10de179b1233075e.src","preCode":"    public void testBadAckInShadow()\n    {\n        final AtomicBoolean ackSend = new AtomicBoolean(false);\n        MockMessagingSpy spySyn = MockMessagingService.when(verb(Verb.GOSSIP_DIGEST_SYN))\n                .respondN((msgOut, to) ->\n                {\n                    \r\n                    if (!ackSend.compareAndSet(false, true))\n                    {\n                        while (!Gossiper.instance.isEnabled()) ;\n                    }\n                    InetAddressAndPort junkaddr;\n                    try\n                    {\n                        junkaddr = InetAddressAndPort.getByName(\"1.1.1.1\");\n                    }\n                    catch (UnknownHostException e)\n                    {\n                        throw new RuntimeException(e);\n                    }\n\n                    HeartBeatState hb = new HeartBeatState(123, 456);\n                    EndpointState state = new EndpointState(hb);\n                    List<GossipDigest> gDigests = new ArrayList<GossipDigest>();\n                    gDigests.add(new GossipDigest(FBUtilities.getBroadcastAddressAndPort(), hb.getGeneration(), hb.getHeartBeatVersion()));\n                    gDigests.add(new GossipDigest(junkaddr, hb.getGeneration(), hb.getHeartBeatVersion()));\n                    Map<InetAddressAndPort, EndpointState> smap = new HashMap<InetAddressAndPort, EndpointState>()\n                    {\n                        {\n                            put(FBUtilities.getBroadcastAddressAndPort(), state);\n                            put(junkaddr, state);\n                        }\n                    };\n                    GossipDigestAck payload = new GossipDigestAck(gDigests, smap);\n\n                    logger.debug(\"Simulating bad digest ACK reply\");\n                    return Message.builder(Verb.GOSSIP_DIGEST_ACK, payload)\n                                  .from(to)\n                                  .build();\n                }, 1);\n\n\n        System.setProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\", \"false\");\n        try\n        {\n            StorageService.instance.checkForEndpointCollision(SystemKeyspace.getLocalHostId(), SystemKeyspace.loadHostIds().keySet());\n        }\n        catch (Exception e)\n        {\n            assertEquals(\"Unable to gossip with any peers\", e.getMessage());\n        }\n        System.clearProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\");\n    }\n","realPath":"test/unit/org/apache/cassandra/gms/ShadowRoundTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2021-05-06 17:46:21","commitOrder":2,"curCode":"    public void testPreviouslyAssassinatedInShadow()\n    {\n        final AtomicBoolean ackSend = new AtomicBoolean(false);\n        MockMessagingSpy spySyn = MockMessagingService.when(verb(Verb.GOSSIP_DIGEST_SYN))\n                .respondN((msgOut, to) ->\n                {\n                   \r\n                   if (!ackSend.compareAndSet(false, true))\n                   {\n                       while (!Gossiper.instance.isEnabled()) ;\n                   }\n                   HeartBeatState hb = new HeartBeatState(123, 456);\n                   EndpointState state = new EndpointState(hb);\n                   state.addApplicationState(ApplicationState.STATUS_WITH_PORT, VersionedValue.unsafeMakeVersionedValue(VersionedValue.STATUS_LEFT, 1));\n                   GossipDigestAck payload = new GossipDigestAck(\n                       Collections.singletonList(new GossipDigest(FBUtilities.getBroadcastAddressAndPort(), hb.getGeneration(), hb.getHeartBeatVersion())),\n                       Collections.singletonMap(FBUtilities.getBroadcastAddressAndPort(), state));\n\n                   logger.debug(\"Simulating bad digest ACK reply\");\n                   return Message.builder(Verb.GOSSIP_DIGEST_ACK, payload)\n                                 .from(to)\n                                 .build();\n                }, 1);\n\n\n        System.setProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\", \"false\");\n        StorageService.instance.checkForEndpointCollision(SystemKeyspace.getOrInitializeLocalHostId(), SystemKeyspace.loadHostIds().keySet());\n        System.clearProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\");\n    }\n","date":"2021-05-06 17:46:52","endLine":215,"groupId":"102067","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testPreviouslyAssassinatedInShadow","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/38/1edb8a7ca9d75c58ceae2b10de179b1233075e.src","preCode":"    public void testPreviouslyAssassinatedInShadow()\n    {\n        final AtomicBoolean ackSend = new AtomicBoolean(false);\n        MockMessagingSpy spySyn = MockMessagingService.when(verb(Verb.GOSSIP_DIGEST_SYN))\n                .respondN((msgOut, to) ->\n                {\n                   \r\n                   if (!ackSend.compareAndSet(false, true))\n                   {\n                       while (!Gossiper.instance.isEnabled()) ;\n                   }\n                   HeartBeatState hb = new HeartBeatState(123, 456);\n                   EndpointState state = new EndpointState(hb);\n                   state.addApplicationState(ApplicationState.STATUS_WITH_PORT, VersionedValue.unsafeMakeVersionedValue(VersionedValue.STATUS_LEFT, 1));\n                   GossipDigestAck payload = new GossipDigestAck(\n                       Collections.singletonList(new GossipDigest(FBUtilities.getBroadcastAddressAndPort(), hb.getGeneration(), hb.getHeartBeatVersion())),\n                       Collections.singletonMap(FBUtilities.getBroadcastAddressAndPort(), state));\n\n                   logger.debug(\"Simulating bad digest ACK reply\");\n                   return Message.builder(Verb.GOSSIP_DIGEST_ACK, payload)\n                                 .from(to)\n                                 .build();\n                }, 1);\n\n\n        System.setProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\", \"false\");\n        StorageService.instance.checkForEndpointCollision(SystemKeyspace.getLocalHostId(), SystemKeyspace.loadHostIds().keySet());\n        System.clearProperty(Config.PROPERTY_PREFIX + \"auto_bootstrap\");\n    }\n","realPath":"test/unit/org/apache/cassandra/gms/ShadowRoundTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"e087afee057b132927795864efbc625e4a9e1561","commitMessage":"@@@Merge branch cassandra-4.0 into trunk\n","date":"2021-05-06 17:46:52","modifiedFileCount":"17","status":"M","submitter":"Benjamin Lerer"}]
