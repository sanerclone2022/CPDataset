[{"authorTime":"2016-08-20 05:04:39","codes":[{"authorDate":"2016-08-20 05:04:39","commitOrder":1,"curCode":"    public void testV5ReadFailureSerDeser()\n    {\n        int receivedBlockFor = 3;\n        ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;\n        boolean dataPresent = false;\n        ReadFailureException rfe = new ReadFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, dataPresent, failureReasonMap1);\n\n        ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(rfe), 5);\n        ReadFailureException deserializedRfe = (ReadFailureException) deserialized.error;\n\n        assertEquals(failureReasonMap1, deserializedRfe.failureReasonByEndpoint);\n        assertEquals(receivedBlockFor, deserializedRfe.received);\n        assertEquals(receivedBlockFor, deserializedRfe.blockFor);\n        assertEquals(consistencyLevel, deserializedRfe.consistency);\n        assertEquals(dataPresent, deserializedRfe.dataPresent);\n    }\n","date":"2016-08-20 05:04:39","endLine":74,"groupId":"13071","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testV5ReadFailureSerDeser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a1/45d18e35c3635a8b65016a1945d5aee0ced8a8.src","preCode":"    public void testV5ReadFailureSerDeser()\n    {\n        int receivedBlockFor = 3;\n        ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;\n        boolean dataPresent = false;\n        ReadFailureException rfe = new ReadFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, dataPresent, failureReasonMap1);\n\n        ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(rfe), 5);\n        ReadFailureException deserializedRfe = (ReadFailureException) deserialized.error;\n\n        assertEquals(failureReasonMap1, deserializedRfe.failureReasonByEndpoint);\n        assertEquals(receivedBlockFor, deserializedRfe.received);\n        assertEquals(receivedBlockFor, deserializedRfe.blockFor);\n        assertEquals(consistencyLevel, deserializedRfe.consistency);\n        assertEquals(dataPresent, deserializedRfe.dataPresent);\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/ErrorMessageTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"},{"authorDate":"2016-08-20 05:04:39","commitOrder":1,"curCode":"    public void testV5WriteFailureSerDeser()\n    {\n        int receivedBlockFor = 3;\n        ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;\n        WriteType writeType = WriteType.SIMPLE;\n        WriteFailureException wfe = new WriteFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, writeType, failureReasonMap2);\n\n        ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(wfe), 5);\n        WriteFailureException deserializedWfe = (WriteFailureException) deserialized.error;\n\n        assertEquals(failureReasonMap2, deserializedWfe.failureReasonByEndpoint);\n        assertEquals(receivedBlockFor, deserializedWfe.received);\n        assertEquals(receivedBlockFor, deserializedWfe.blockFor);\n        assertEquals(consistencyLevel, deserializedWfe.consistency);\n        assertEquals(writeType, deserializedWfe.writeType);\n    }\n","date":"2016-08-20 05:04:39","endLine":92,"groupId":"27323","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testV5WriteFailureSerDeser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a1/45d18e35c3635a8b65016a1945d5aee0ced8a8.src","preCode":"    public void testV5WriteFailureSerDeser()\n    {\n        int receivedBlockFor = 3;\n        ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;\n        WriteType writeType = WriteType.SIMPLE;\n        WriteFailureException wfe = new WriteFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, writeType, failureReasonMap2);\n\n        ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(wfe), 5);\n        WriteFailureException deserializedWfe = (WriteFailureException) deserialized.error;\n\n        assertEquals(failureReasonMap2, deserializedWfe.failureReasonByEndpoint);\n        assertEquals(receivedBlockFor, deserializedWfe.received);\n        assertEquals(receivedBlockFor, deserializedWfe.blockFor);\n        assertEquals(consistencyLevel, deserializedWfe.consistency);\n        assertEquals(writeType, deserializedWfe.writeType);\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/ErrorMessageTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"}],"commitId":"39df31a06a35b221f55f17ed20947a1a2e33ee1a","commitMessage":"@@@Add error code map to read/write failure responses\n\nPatch by Geoffrey Yu; reviewed by Tyler Hobbs for CASSANDRA-12311\n","date":"2016-08-20 05:04:39","modifiedFileCount":"18","status":"B","submitter":"Geoffrey Yu"},{"authorTime":"2016-10-31 21:16:40","codes":[{"authorDate":"2016-10-31 21:16:40","commitOrder":2,"curCode":"    public void testV5ReadFailureSerDeser()\n    {\n        int receivedBlockFor = 3;\n        ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;\n        boolean dataPresent = false;\n        ReadFailureException rfe = new ReadFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, dataPresent, failureReasonMap1);\n\n        ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(rfe), ProtocolVersion.V5);\n        ReadFailureException deserializedRfe = (ReadFailureException) deserialized.error;\n\n        assertEquals(failureReasonMap1, deserializedRfe.failureReasonByEndpoint);\n        assertEquals(receivedBlockFor, deserializedRfe.received);\n        assertEquals(receivedBlockFor, deserializedRfe.blockFor);\n        assertEquals(consistencyLevel, deserializedRfe.consistency);\n        assertEquals(dataPresent, deserializedRfe.dataPresent);\n    }\n","date":"2016-10-31 21:16:40","endLine":74,"groupId":"13071","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testV5ReadFailureSerDeser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/2d/cd2ac223250389a3e82016d72303dc10df30f5.src","preCode":"    public void testV5ReadFailureSerDeser()\n    {\n        int receivedBlockFor = 3;\n        ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;\n        boolean dataPresent = false;\n        ReadFailureException rfe = new ReadFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, dataPresent, failureReasonMap1);\n\n        ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(rfe), 5);\n        ReadFailureException deserializedRfe = (ReadFailureException) deserialized.error;\n\n        assertEquals(failureReasonMap1, deserializedRfe.failureReasonByEndpoint);\n        assertEquals(receivedBlockFor, deserializedRfe.received);\n        assertEquals(receivedBlockFor, deserializedRfe.blockFor);\n        assertEquals(consistencyLevel, deserializedRfe.consistency);\n        assertEquals(dataPresent, deserializedRfe.dataPresent);\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/ErrorMessageTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2016-10-31 21:16:40","commitOrder":2,"curCode":"    public void testV5WriteFailureSerDeser()\n    {\n        int receivedBlockFor = 3;\n        ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;\n        WriteType writeType = WriteType.SIMPLE;\n        WriteFailureException wfe = new WriteFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, writeType, failureReasonMap2);\n\n        ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(wfe), ProtocolVersion.V5);\n        WriteFailureException deserializedWfe = (WriteFailureException) deserialized.error;\n\n        assertEquals(failureReasonMap2, deserializedWfe.failureReasonByEndpoint);\n        assertEquals(receivedBlockFor, deserializedWfe.received);\n        assertEquals(receivedBlockFor, deserializedWfe.blockFor);\n        assertEquals(consistencyLevel, deserializedWfe.consistency);\n        assertEquals(writeType, deserializedWfe.writeType);\n    }\n","date":"2016-10-31 21:16:40","endLine":92,"groupId":"27323","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testV5WriteFailureSerDeser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/2d/cd2ac223250389a3e82016d72303dc10df30f5.src","preCode":"    public void testV5WriteFailureSerDeser()\n    {\n        int receivedBlockFor = 3;\n        ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;\n        WriteType writeType = WriteType.SIMPLE;\n        WriteFailureException wfe = new WriteFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, writeType, failureReasonMap2);\n\n        ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(wfe), 5);\n        WriteFailureException deserializedWfe = (WriteFailureException) deserialized.error;\n\n        assertEquals(failureReasonMap2, deserializedWfe.failureReasonByEndpoint);\n        assertEquals(receivedBlockFor, deserializedWfe.received);\n        assertEquals(receivedBlockFor, deserializedWfe.blockFor);\n        assertEquals(consistencyLevel, deserializedWfe.consistency);\n        assertEquals(writeType, deserializedWfe.writeType);\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/ErrorMessageTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"b4068ef00e9566ac5ecba9c67ddcf419fcd673a2","commitMessage":"@@@Merge branch 'cassandra-3.X' into trunk\n","date":"2016-10-31 21:16:40","modifiedFileCount":"163","status":"M","submitter":"Stefania Alborghetti"},{"authorTime":"2019-11-12 07:31:58","codes":[{"authorDate":"2019-11-12 07:31:58","commitOrder":3,"curCode":"    public void testV5ReadFailureSerDeser()\n    {\n        int receivedBlockFor = 3;\n        ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;\n        boolean dataPresent = false;\n        ReadFailureException rfe = new ReadFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, dataPresent, failureReasonMap1);\n\n        ErrorMessage deserialized = encodeThenDecode(ErrorMessage.fromException(rfe), ProtocolVersion.V5);\n        ReadFailureException deserializedRfe = (ReadFailureException) deserialized.error;\n\n        assertEquals(failureReasonMap1, deserializedRfe.failureReasonByEndpoint);\n        assertEquals(receivedBlockFor, deserializedRfe.received);\n        assertEquals(receivedBlockFor, deserializedRfe.blockFor);\n        assertEquals(consistencyLevel, deserializedRfe.consistency);\n        assertEquals(dataPresent, deserializedRfe.dataPresent);\n    }\n","date":"2019-11-20 00:06:03","endLine":73,"groupId":"101116","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testV5ReadFailureSerDeser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/84/9700522962ab43d075a3cbb92bc1f3ca6afc79.src","preCode":"    public void testV5ReadFailureSerDeser()\n    {\n        int receivedBlockFor = 3;\n        ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;\n        boolean dataPresent = false;\n        ReadFailureException rfe = new ReadFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, dataPresent, failureReasonMap1);\n\n        ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(rfe), ProtocolVersion.V5);\n        ReadFailureException deserializedRfe = (ReadFailureException) deserialized.error;\n\n        assertEquals(failureReasonMap1, deserializedRfe.failureReasonByEndpoint);\n        assertEquals(receivedBlockFor, deserializedRfe.received);\n        assertEquals(receivedBlockFor, deserializedRfe.blockFor);\n        assertEquals(consistencyLevel, deserializedRfe.consistency);\n        assertEquals(dataPresent, deserializedRfe.dataPresent);\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/ErrorMessageTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2019-11-12 07:31:58","commitOrder":3,"curCode":"    public void testV5WriteFailureSerDeser()\n    {\n        int receivedBlockFor = 3;\n        ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;\n        WriteType writeType = WriteType.SIMPLE;\n        WriteFailureException wfe = new WriteFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, writeType, failureReasonMap2);\n\n        ErrorMessage deserialized = encodeThenDecode(ErrorMessage.fromException(wfe), ProtocolVersion.V5);\n        WriteFailureException deserializedWfe = (WriteFailureException) deserialized.error;\n\n        assertEquals(failureReasonMap2, deserializedWfe.failureReasonByEndpoint);\n        assertEquals(receivedBlockFor, deserializedWfe.received);\n        assertEquals(receivedBlockFor, deserializedWfe.blockFor);\n        assertEquals(consistencyLevel, deserializedWfe.consistency);\n        assertEquals(writeType, deserializedWfe.writeType);\n    }\n","date":"2019-11-20 00:06:03","endLine":91,"groupId":"101116","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testV5WriteFailureSerDeser","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/84/9700522962ab43d075a3cbb92bc1f3ca6afc79.src","preCode":"    public void testV5WriteFailureSerDeser()\n    {\n        int receivedBlockFor = 3;\n        ConsistencyLevel consistencyLevel = ConsistencyLevel.ALL;\n        WriteType writeType = WriteType.SIMPLE;\n        WriteFailureException wfe = new WriteFailureException(consistencyLevel, receivedBlockFor, receivedBlockFor, writeType, failureReasonMap2);\n\n        ErrorMessage deserialized = serializeAndGetDeserializedErrorMessage(ErrorMessage.fromException(wfe), ProtocolVersion.V5);\n        WriteFailureException deserializedWfe = (WriteFailureException) deserialized.error;\n\n        assertEquals(failureReasonMap2, deserializedWfe.failureReasonByEndpoint);\n        assertEquals(receivedBlockFor, deserializedWfe.received);\n        assertEquals(receivedBlockFor, deserializedWfe.blockFor);\n        assertEquals(consistencyLevel, deserializedWfe.consistency);\n        assertEquals(writeType, deserializedWfe.writeType);\n    }\n","realPath":"test/unit/org/apache/cassandra/transport/ErrorMessageTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"647bdd6a11970f80666d7f20b53af76fbda4ff14","commitMessage":"@@@Optimise native protocol ASCII string encoding\n\npatch by Yifan Cai; reviewed by Aleksey Yeschenko for CASSANDRA-15410\n","date":"2019-11-20 00:06:03","modifiedFileCount":"11","status":"M","submitter":"yifan-c"}]
