[{"authorTime":"2016-11-10 09:16:59","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":4,"curCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","date":"2017-01-28 06:17:46","endLine":1201,"groupId":"31333","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"sstable","params":"(FiledataFolder@ColumnFamilyStorecfs@intgeneration@intsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/20/215386b1d2359d6646c13c7c8746d6b7d7bb62.src","preCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1166,"status":"MB"},{"authorDate":"2016-11-10 09:16:59","commitOrder":4,"curCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getColumnFamilyName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = reader.last = readerBounds(generation);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","date":"2017-01-28 06:17:46","endLine":130,"groupId":"8714","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"sstable","params":"(intgeneration@intsize@booleankeepRef@ColumnFamilyStorecfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/02/3015b5d98a00510da00fb2da11dbb3c3279051.src","preCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getColumnFamilyName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = reader.last = readerBounds(generation);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/schema/MockSchema.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"af3fe39dcabd9ef77a00309ce6741268423206df","commitMessage":"@@@Make TableMetadata immutable.  optimize Schema\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-9425\n","date":"2017-01-28 06:17:46","modifiedFileCount":"511","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2017-01-29 08:48:30","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":5,"curCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","date":"2017-01-28 06:17:46","endLine":1201,"groupId":"31333","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"sstable","params":"(FiledataFolder@ColumnFamilyStorecfs@intgeneration@intsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/20/215386b1d2359d6646c13c7c8746d6b7d7bb62.src","preCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1166,"status":"N"},{"authorDate":"2017-01-29 08:48:30","commitOrder":5,"curCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = reader.last = readerBounds(generation);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","date":"2017-01-29 08:48:30","endLine":130,"groupId":"8714","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"sstable","params":"(intgeneration@intsize@booleankeepRef@ColumnFamilyStorecfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b9/4b49cde7541e0c158d644d01aece44fea5aa83.src","preCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getColumnFamilyName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = reader.last = readerBounds(generation);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/schema/MockSchema.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"619178bc866f8908123631553270ae6393090d43","commitMessage":"@@@remove dead and deprecated use of code\n","date":"2017-01-29 08:48:30","modifiedFileCount":"11","status":"M","submitter":"Dave Brosius"},{"authorTime":"2016-09-01 06:48:43","codes":[{"authorDate":"2016-09-01 06:48:43","commitOrder":6,"curCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","date":"2017-02-07 11:11:18","endLine":1201,"groupId":"31333","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"sstable","params":"(FiledataFolder@ColumnFamilyStorecfs@intgeneration@intsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/53/6bdcae13085813c77d7ff1a667039496ea8b9a.src","preCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1166,"status":"M"},{"authorDate":"2016-09-01 06:48:43","commitOrder":6,"curCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = reader.last = readerBounds(generation);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","date":"2017-02-07 11:11:18","endLine":130,"groupId":"8714","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"sstable","params":"(intgeneration@intsize@booleankeepRef@ColumnFamilyStorecfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/99/fff32b675d135892080b5f54657426835609c3.src","preCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = reader.last = readerBounds(generation);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/schema/MockSchema.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"98d74ed998706e9e047dc0f7886a1e9b18df3ce9","commitMessage":"@@@Fix consistency of incrementally repaired data\n\npatch by Blake Eggleston.  reviewed by Marcus Eriksson for CASSANDRA-9143\n","date":"2017-02-07 11:11:18","modifiedFileCount":"81","status":"M","submitter":"Blake Eggleston"},{"authorTime":"2018-04-24 14:56:34","codes":[{"authorDate":"2016-09-01 06:48:43","commitOrder":7,"curCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","date":"2017-02-07 11:11:18","endLine":1201,"groupId":"31333","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"sstable","params":"(FiledataFolder@ColumnFamilyStorecfs@intgeneration@intsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/53/6bdcae13085813c77d7ff1a667039496ea8b9a.src","preCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1166,"status":"N"},{"authorDate":"2018-04-24 14:56:34","commitOrder":7,"curCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = readerBounds(firstToken);\n        reader.last = readerBounds(lastToken);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","date":"2018-04-24 14:56:34","endLine":140,"groupId":"8714","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"sstable","params":"(intgeneration@intsize@booleankeepRef@longfirstToken@longlastToken@ColumnFamilyStorecfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/05/de7ac5678fbd59cf6a1ffefdefb313b8876792.src","preCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = reader.last = readerBounds(generation);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/schema/MockSchema.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"1d387f5e7f688150c09b7eb14a036d153017ec02","commitMessage":"@@@Merge branch 'cassandra-3.11' into trunk\n","date":"2018-04-24 14:56:34","modifiedFileCount":"3","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2018-07-06 06:10:40","codes":[{"authorDate":"2018-07-06 06:10:40","commitOrder":8,"curCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","date":"2018-09-01 09:34:22","endLine":1201,"groupId":"31333","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"sstable","params":"(FiledataFolder@ColumnFamilyStorecfs@intgeneration@intsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/e5/ff1388e9311c84715f14c34e96e39df96c67f0.src","preCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1166,"status":"M"},{"authorDate":"2018-07-06 06:10:40","commitOrder":8,"curCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = readerBounds(firstToken);\n        reader.last = readerBounds(lastToken);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","date":"2018-09-01 09:34:22","endLine":140,"groupId":"8714","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"sstable","params":"(intgeneration@intsize@booleankeepRef@longfirstToken@longlastToken@ColumnFamilyStorecfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/7a/6b01154b3424bb0311f8293bd4917a837f93d0.src","preCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = readerBounds(firstToken);\n        reader.last = readerBounds(lastToken);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/schema/MockSchema.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"f7431b432875e334170ccdb19934d05545d2cebd","commitMessage":"@@@Transient Replication and Cheap Quorums\n\nPatch by Blake Eggleston.  Benedict Elliott Smith.  Marcus Eriksson.  Alex Petrov.  Ariel Weisberg; Reviewed by Blake Eggleston.  Marcus Eriksson.  Benedict Elliott Smith.  Alex Petrov.  Ariel Weisberg for CASSANDRA-14404\n\nCo-authored-by: Blake Eggleston <bdeggleston@gmail.com>\nCo-authored-by: Benedict Elliott Smith <benedict@apache.org>\nCo-authored-by: Marcus Eriksson <marcuse@apache.org>\nCo-authored-by: Alex Petrov <oleksandr.petrov@gmail.com>\n","date":"2018-09-01 09:34:22","modifiedFileCount":"230","status":"M","submitter":"Ariel Weisberg"},{"authorTime":"2018-12-19 00:01:02","codes":[{"authorDate":"2018-07-06 06:10:40","commitOrder":9,"curCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","date":"2018-09-01 09:34:22","endLine":1201,"groupId":"31333","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"sstable","params":"(FiledataFolder@ColumnFamilyStorecfs@intgeneration@intsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/e5/ff1388e9311c84715f14c34e96e39df96c67f0.src","preCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1166,"status":"N"},{"authorDate":"2018-12-19 00:01:02","commitOrder":9,"curCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, UNREPAIRED_SSTABLE, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = readerBounds(firstToken);\n        reader.last = readerBounds(lastToken);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","date":"2019-01-17 15:01:16","endLine":142,"groupId":"8714","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"sstable","params":"(intgeneration@intsize@booleankeepRef@longfirstToken@longlastToken@ColumnFamilyStorecfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/9c/a2d6ed80fa9fcd4b29148ac48caeea0ebce0f9.src","preCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = readerBounds(firstToken);\n        reader.last = readerBounds(lastToken);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/schema/MockSchema.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"6e27e65f150ed6cc6a7205b9d7c89a763f3256fa","commitMessage":"@@@Only cancel conflicting compactions when starting anticompactions and sub range compactions\n\nPatch by marcuse; reviewed by Blake Eggleston for CASSANDRA-14935\n","date":"2019-01-17 15:01:16","modifiedFileCount":"41","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2019-12-09 21:29:20","codes":[{"authorDate":"2018-07-06 06:10:40","commitOrder":10,"curCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","date":"2018-09-01 09:34:22","endLine":1201,"groupId":"31333","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"sstable","params":"(FiledataFolder@ColumnFamilyStorecfs@intgeneration@intsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/e5/ff1388e9311c84715f14c34e96e39df96c67f0.src","preCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1166,"status":"N"},{"authorDate":"2019-12-09 21:29:20","commitOrder":10,"curCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        \r\n        @SuppressWarnings(\"resource\")\n        FileHandle fileHandle = new FileHandle.Builder(new ChannelProxy(tempFile)).bufferSize(size).complete(size);\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, UNREPAIRED_SSTABLE, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          fileHandle.sharedCopy(), fileHandle.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = readerBounds(firstToken);\n        reader.last = readerBounds(lastToken);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","date":"2019-12-16 20:34:51","endLine":143,"groupId":"26003","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"sstable","params":"(intgeneration@intsize@booleankeepRef@longfirstToken@longlastToken@ColumnFamilyStorecfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/40/b0f87026a05d03bb50632beff681af0b0971fd.src","preCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, UNREPAIRED_SSTABLE, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          RANDOM_ACCESS_READER_FACTORY.sharedCopy(), RANDOM_ACCESS_READER_FACTORY.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = readerBounds(firstToken);\n        reader.last = readerBounds(lastToken);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/schema/MockSchema.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"546331037ee8218208b61a26ecbc12ab8dd7eace","commitMessage":"@@@Make it possible to disable STCS-in-L0 during runtime\n\nPatch by marcuse; reviewed by Jordan West for CASSANDRA-15445\n","date":"2019-12-16 20:34:51","modifiedFileCount":"5","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2019-12-09 21:29:20","codes":[{"authorDate":"2020-09-10 07:36:57","commitOrder":11,"curCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          iFile,\n                                                          dFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","date":"2020-09-10 10:59:24","endLine":1254,"groupId":"31333","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"sstable","params":"(FiledataFolder@ColumnFamilyStorecfs@intgeneration@intsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a4/1365b854b7459965942287bfcb30efb6837bff.src","preCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          dFile,\n                                                          iFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1219,"status":"M"},{"authorDate":"2019-12-09 21:29:20","commitOrder":11,"curCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        \r\n        @SuppressWarnings(\"resource\")\n        FileHandle fileHandle = new FileHandle.Builder(new ChannelProxy(tempFile)).bufferSize(size).complete(size);\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, UNREPAIRED_SSTABLE, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          fileHandle.sharedCopy(), fileHandle.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = readerBounds(firstToken);\n        reader.last = readerBounds(lastToken);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","date":"2019-12-16 20:34:51","endLine":143,"groupId":"26003","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"sstable","params":"(intgeneration@intsize@booleankeepRef@longfirstToken@longlastToken@ColumnFamilyStorecfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/40/b0f87026a05d03bb50632beff681af0b0971fd.src","preCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        \r\n        @SuppressWarnings(\"resource\")\n        FileHandle fileHandle = new FileHandle.Builder(new ChannelProxy(tempFile)).bufferSize(size).complete(size);\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, UNREPAIRED_SSTABLE, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          fileHandle.sharedCopy(), fileHandle.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = readerBounds(firstToken);\n        reader.last = readerBounds(lastToken);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/schema/MockSchema.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"}],"commitId":"f3bf0775a5a8bce228289c22b96d0c922cf2cb0d","commitMessage":"@@@Mutating sstable component may race with entire-sstable-streaming(ZCS) causing checksum validation failure\n\npatch by Zhao Yang; reviewed by Blake Eggleston.  Caleb Rackliffe.  David Capwell.  Benjamin Lerer for CASSANDRA-15861\n","date":"2020-09-10 10:59:24","modifiedFileCount":"38","status":"M","submitter":"Zhao Yang"},{"authorTime":"2020-09-10 05:35:38","codes":[{"authorDate":"2020-09-10 07:36:57","commitOrder":12,"curCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          iFile,\n                                                          dFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","date":"2020-09-10 10:59:24","endLine":1254,"groupId":"31333","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"sstable","params":"(FiledataFolder@ColumnFamilyStorecfs@intgeneration@intsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a4/1365b854b7459965942287bfcb30efb6837bff.src","preCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          iFile,\n                                                          dFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1219,"status":"N"},{"authorDate":"2020-09-10 05:35:38","commitOrder":12,"curCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        \r\n        try (FileHandle.Builder builder = new FileHandle.Builder(new ChannelProxy(tempFile)).bufferSize(size);\n             FileHandle fileHandle = builder.complete(size))\n        {\n            if (size > 0)\n            {\n                try\n                {\n                    File file = new File(descriptor.filenameFor(Component.DATA));\n                    try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                    {\n                        raf.setLength(size);\n                    }\n                }\n                catch (IOException e)\n                {\n                    throw new RuntimeException(e);\n                }\n            }\n            SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n            StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                     .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, UNREPAIRED_SSTABLE, null, false, header)\n                                                     .get(MetadataType.STATS);\n            SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                              fileHandle.sharedCopy(), fileHandle.sharedCopy(), indexSummary.sharedCopy(),\n                                                              new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n            reader.first = readerBounds(firstToken);\n            reader.last = readerBounds(lastToken);\n            if (!keepRef)\n                reader.selfRef().release();\n            return reader;\n        }\n    }\n","date":"2020-09-11 03:40:38","endLine":145,"groupId":"26003","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"sstable","params":"(intgeneration@intsize@booleankeepRef@longfirstToken@longlastToken@ColumnFamilyStorecfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5c/e85201c40dbe57f5d40dd49fb5ea58d71cdc0f.src","preCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        \r\n        @SuppressWarnings(\"resource\")\n        FileHandle fileHandle = new FileHandle.Builder(new ChannelProxy(tempFile)).bufferSize(size).complete(size);\n        if (size > 0)\n        {\n            try\n            {\n                File file = new File(descriptor.filenameFor(Component.DATA));\n                try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                {\n                    raf.setLength(size);\n                }\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, UNREPAIRED_SSTABLE, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                          fileHandle.sharedCopy(), fileHandle.sharedCopy(), indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n        reader.first = readerBounds(firstToken);\n        reader.last = readerBounds(lastToken);\n        if (!keepRef)\n            reader.selfRef().release();\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/schema/MockSchema.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"54d297a192ca452dab5640f33fd6c22fd31e2f9c","commitMessage":"@@@Make sure MockSchema.sstable() disposes of its FileHandles properly\n\nPatch by Caleb Rackcliffe; reviewed by Marcus Eriksson and Sam\nTunnicliffe for CASSANDRA-16119\n","date":"2020-09-11 03:40:38","modifiedFileCount":"1","status":"M","submitter":"Caleb Rackliffe"},{"authorTime":"2020-09-16 17:05:53","codes":[{"authorDate":"2020-09-10 07:36:57","commitOrder":13,"curCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          iFile,\n                                                          dFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","date":"2020-09-10 10:59:24","endLine":1254,"groupId":"31333","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"sstable","params":"(FiledataFolder@ColumnFamilyStorecfs@intgeneration@intsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a4/1365b854b7459965942287bfcb30efb6837bff.src","preCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          iFile,\n                                                          dFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1219,"status":"N"},{"authorDate":"2020-09-16 17:05:53","commitOrder":13,"curCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, int level, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        \r\n        try (FileHandle.Builder builder = new FileHandle.Builder(new ChannelProxy(tempFile)).bufferSize(size);\n             FileHandle fileHandle = builder.complete(size))\n        {\n            if (size > 0)\n            {\n                try\n                {\n                    File file = new File(descriptor.filenameFor(Component.DATA));\n                    try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                    {\n                        raf.setLength(size);\n                    }\n                }\n                catch (IOException e)\n                {\n                    throw new RuntimeException(e);\n                }\n            }\n            SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n            StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                     .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, UNREPAIRED_SSTABLE, null, false, header)\n                                                     .get(MetadataType.STATS);\n            SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                              fileHandle.sharedCopy(), fileHandle.sharedCopy(), indexSummary.sharedCopy(),\n                                                              new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n            reader.first = readerBounds(firstToken);\n            reader.last = readerBounds(lastToken);\n            if (!keepRef)\n                reader.selfRef().release();\n            return reader;\n        }\n\n    }\n","date":"2020-09-16 17:11:15","endLine":156,"groupId":"26003","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"sstable","params":"(intgeneration@intsize@booleankeepRef@longfirstToken@longlastToken@intlevel@ColumnFamilyStorecfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/7d/2d8741d845b575962caf6b0237add0f63b5016.src","preCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        \r\n        try (FileHandle.Builder builder = new FileHandle.Builder(new ChannelProxy(tempFile)).bufferSize(size);\n             FileHandle fileHandle = builder.complete(size))\n        {\n            if (size > 0)\n            {\n                try\n                {\n                    File file = new File(descriptor.filenameFor(Component.DATA));\n                    try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                    {\n                        raf.setLength(size);\n                    }\n                }\n                catch (IOException e)\n                {\n                    throw new RuntimeException(e);\n                }\n            }\n            SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n            StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                     .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, UNREPAIRED_SSTABLE, null, false, header)\n                                                     .get(MetadataType.STATS);\n            SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                              fileHandle.sharedCopy(), fileHandle.sharedCopy(), indexSummary.sharedCopy(),\n                                                              new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n            reader.first = readerBounds(firstToken);\n            reader.last = readerBounds(lastToken);\n            if (!keepRef)\n                reader.selfRef().release();\n            return reader;\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/schema/MockSchema.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"fa7659253f786284d33f840199dc26602d03363a","commitMessage":"@@@Merge branch 'cassandra-3.11' into trunk\n","date":"2020-09-16 17:11:15","modifiedFileCount":"9","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2020-09-17 03:34:52","codes":[{"authorDate":"2020-09-10 07:36:57","commitOrder":14,"curCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          iFile,\n                                                          dFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","date":"2020-09-10 10:59:24","endLine":1254,"groupId":"10632","id":21,"instanceNumber":1,"isCurCommit":1,"methodName":"sstable","params":"(FiledataFolder@ColumnFamilyStorecfs@intgeneration@intsize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a4/1365b854b7459965942287bfcb30efb6837bff.src","preCode":"    private static SSTableReader sstable(File dataFolder, ColumnFamilyStore cfs, int generation, int size) throws IOException\n    {\n        Descriptor descriptor = new Descriptor(dataFolder, cfs.keyspace.getName(), cfs.getTableName(), generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            if (!file.exists())\n                assertTrue(file.createNewFile());\n            try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n            {\n                raf.setLength(size);\n            }\n        }\n\n        FileHandle dFile = new FileHandle.Builder(descriptor.filenameFor(Component.DATA)).complete();\n        FileHandle iFile = new FileHandle.Builder(descriptor.filenameFor(Component.PRIMARY_INDEX)).complete();\n\n        SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n        StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                 .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, -1, null, false, header)\n                                                 .get(MetadataType.STATS);\n        SSTableReader reader = SSTableReader.internalOpen(descriptor,\n                                                          components,\n                                                          cfs.metadata,\n                                                          iFile,\n                                                          dFile,\n                                                          MockSchema.indexSummary.sharedCopy(),\n                                                          new AlwaysPresentFilter(),\n                                                          1L,\n                                                          metadata,\n                                                          SSTableReader.OpenReason.NORMAL,\n                                                          header);\n        reader.first = reader.last = MockSchema.readerBounds(generation);\n        return reader;\n    }\n","realPath":"test/unit/org/apache/cassandra/db/lifecycle/LogTransactionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1219,"status":"N"},{"authorDate":"2020-09-17 03:34:52","commitOrder":14,"curCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, int level, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        \r\n        try (FileHandle.Builder builder = new FileHandle.Builder(new ChannelProxy(tempFile)).bufferSize(size);\n             FileHandle fileHandle = builder.complete(size))\n        {\n            if (size > 0)\n            {\n                try\n                {\n                    File file = new File(descriptor.filenameFor(Component.DATA));\n                    try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                    {\n                        raf.setLength(size);\n                    }\n                }\n                catch (IOException e)\n                {\n                    throw new RuntimeException(e);\n                }\n            }\n            SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n            StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                     .sstableLevel(level)\n                                                     .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, UNREPAIRED_SSTABLE, null, false, header)\n                                                     .get(MetadataType.STATS);\n            SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                              fileHandle.sharedCopy(), fileHandle.sharedCopy(), indexSummary.sharedCopy(),\n                                                              new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n            reader.first = readerBounds(firstToken);\n            reader.last = readerBounds(lastToken);\n            if (!keepRef)\n                reader.selfRef().release();\n            return reader;\n        }\n\n    }\n","date":"2020-09-17 03:34:52","endLine":157,"groupId":"10632","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"sstable","params":"(intgeneration@intsize@booleankeepRef@longfirstToken@longlastToken@intlevel@ColumnFamilyStorecfs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/dc/207ee5b9f183f25555e149402828d6991571ef.src","preCode":"    public static SSTableReader sstable(int generation, int size, boolean keepRef, long firstToken, long lastToken, int level, ColumnFamilyStore cfs)\n    {\n        Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(),\n                                               cfs.keyspace.getName(),\n                                               cfs.getTableName(),\n                                               generation, SSTableFormat.Type.BIG);\n        Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC);\n        for (Component component : components)\n        {\n            File file = new File(descriptor.filenameFor(component));\n            try\n            {\n                file.createNewFile();\n            }\n            catch (IOException e)\n            {\n            }\n        }\n        \r\n        try (FileHandle.Builder builder = new FileHandle.Builder(new ChannelProxy(tempFile)).bufferSize(size);\n             FileHandle fileHandle = builder.complete(size))\n        {\n            if (size > 0)\n            {\n                try\n                {\n                    File file = new File(descriptor.filenameFor(Component.DATA));\n                    try (RandomAccessFile raf = new RandomAccessFile(file, \"rw\"))\n                    {\n                        raf.setLength(size);\n                    }\n                }\n                catch (IOException e)\n                {\n                    throw new RuntimeException(e);\n                }\n            }\n            SerializationHeader header = SerializationHeader.make(cfs.metadata(), Collections.emptyList());\n            StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata().comparator)\n                                                     .finalizeMetadata(cfs.metadata().partitioner.getClass().getCanonicalName(), 0.01f, UNREPAIRED_SSTABLE, null, false, header)\n                                                     .get(MetadataType.STATS);\n            SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata,\n                                                              fileHandle.sharedCopy(), fileHandle.sharedCopy(), indexSummary.sharedCopy(),\n                                                              new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header);\n            reader.first = readerBounds(firstToken);\n            reader.last = readerBounds(lastToken);\n            if (!keepRef)\n                reader.selfRef().release();\n            return reader;\n        }\n\n    }\n","realPath":"test/unit/org/apache/cassandra/schema/MockSchema.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"ea322bfaa78b662c95711e6579b480b4d0f741c6","commitMessage":"@@@ninja fix.  While merging up CASSANDRA-14103 the merge missed setting sstable level in MockSchema\n","date":"2020-09-17 03:34:52","modifiedFileCount":"1","status":"M","submitter":"David Capwell"}]
