[{"authorTime":"2013-03-22 17:27:43","codes":[{"authorDate":"2013-03-22 17:27:43","commitOrder":1,"curCode":"    public void testTrackMaxDeletionTime() throws ExecutionException, InterruptedException\n    {\n        Table table = Table.open(\"Keyspace1\");\n        ColumnFamilyStore store = table.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            RowMutation rm = new RowMutation(\"Keyspace1\", key.key);\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", ByteBufferUtil.bytes(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        RowMutation rm = new RowMutation(\"Keyspace1\", Util.dk(\"longttl\").key);\n        rm.add(\"Standard1\", ByteBufferUtil.bytes(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new RowMutation(\"Keyspace1\", Util.dk(\"longttl2\").key);\n        rm.add(\"Standard1\", ByteBufferUtil.bytes(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<SSTableReader>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","date":"2013-03-22 18:35:52","endLine":81,"groupId":"7697","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrackMaxDeletionTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/6a/b995fb88368c228fc83507dcf2901b337fd23a.src","preCode":"    public void testTrackMaxDeletionTime() throws ExecutionException, InterruptedException\n    {\n        Table table = Table.open(\"Keyspace1\");\n        ColumnFamilyStore store = table.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            RowMutation rm = new RowMutation(\"Keyspace1\", key.key);\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", ByteBufferUtil.bytes(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        RowMutation rm = new RowMutation(\"Keyspace1\", Util.dk(\"longttl\").key);\n        rm.add(\"Standard1\", ByteBufferUtil.bytes(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new RowMutation(\"Keyspace1\", Util.dk(\"longttl2\").key);\n        rm.add(\"Standard1\", ByteBufferUtil.bytes(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<SSTableReader>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":22,"status":"B"},{"authorDate":"2013-03-22 17:27:43","commitOrder":1,"curCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Table table = Table.open(\"Keyspace1\");\n        ColumnFamilyStore store = table.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        RowMutation rm = new RowMutation(\"Keyspace1\", key.key);\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", ByteBufferUtil.bytes(\"deletecolumn\"+i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", ByteBufferUtil.bytes(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new RowMutation(\"Keyspace1\", key.key);\n        rm.delete(\"Standard2\", ByteBufferUtil.bytes(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","date":"2013-03-22 18:35:52","endLine":142,"groupId":"14539","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/6a/b995fb88368c228fc83507dcf2901b337fd23a.src","preCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Table table = Table.open(\"Keyspace1\");\n        ColumnFamilyStore store = table.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        RowMutation rm = new RowMutation(\"Keyspace1\", key.key);\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", ByteBufferUtil.bytes(\"deletecolumn\"+i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", ByteBufferUtil.bytes(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new RowMutation(\"Keyspace1\", key.key);\n        rm.delete(\"Standard2\", ByteBufferUtil.bytes(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"}],"commitId":"4937ac7e5776cf72e4c3b266fbffb29ff97c807a","commitMessage":"@@@Track maximum ttl and use to expire entire sstables\n\npatch by krummas; reviewed by slebresne for CASSANDRA-5528\n","date":"2013-03-22 18:35:52","modifiedFileCount":"16","status":"B","submitter":"Sylvain Lebresne"},{"authorTime":"2013-06-28 02:35:18","codes":[{"authorDate":"2013-06-28 02:35:18","commitOrder":2,"curCode":"    public void testTrackMaxDeletionTime() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            RowMutation rm = new RowMutation(\"Keyspace1\", key.key);\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", ByteBufferUtil.bytes(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        RowMutation rm = new RowMutation(\"Keyspace1\", Util.dk(\"longttl\").key);\n        rm.add(\"Standard1\", ByteBufferUtil.bytes(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new RowMutation(\"Keyspace1\", Util.dk(\"longttl2\").key);\n        rm.add(\"Standard1\", ByteBufferUtil.bytes(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<SSTableReader>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","date":"2013-06-28 02:35:18","endLine":107,"groupId":"7697","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrackMaxDeletionTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/6b/d5f566d078fe927ee9c085d374451231f8003f.src","preCode":"    public void testTrackMaxDeletionTime() throws ExecutionException, InterruptedException\n    {\n        Table table = Table.open(\"Keyspace1\");\n        ColumnFamilyStore store = table.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            RowMutation rm = new RowMutation(\"Keyspace1\", key.key);\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", ByteBufferUtil.bytes(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        RowMutation rm = new RowMutation(\"Keyspace1\", Util.dk(\"longttl\").key);\n        rm.add(\"Standard1\", ByteBufferUtil.bytes(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new RowMutation(\"Keyspace1\", Util.dk(\"longttl2\").key);\n        rm.add(\"Standard1\", ByteBufferUtil.bytes(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<SSTableReader>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2013-06-28 02:35:18","commitOrder":2,"curCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        RowMutation rm = new RowMutation(\"Keyspace1\", key.key);\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", ByteBufferUtil.bytes(\"deletecolumn\"+i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", ByteBufferUtil.bytes(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new RowMutation(\"Keyspace1\", key.key);\n        rm.delete(\"Standard2\", ByteBufferUtil.bytes(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","date":"2013-06-28 02:35:18","endLine":168,"groupId":"14539","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/6b/d5f566d078fe927ee9c085d374451231f8003f.src","preCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Table table = Table.open(\"Keyspace1\");\n        ColumnFamilyStore store = table.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        RowMutation rm = new RowMutation(\"Keyspace1\", key.key);\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", ByteBufferUtil.bytes(\"deletecolumn\"+i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", ByteBufferUtil.bytes(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new RowMutation(\"Keyspace1\", key.key);\n        rm.delete(\"Standard2\", ByteBufferUtil.bytes(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"0e96e585837c277073779a5f004fbb1e245964af","commitMessage":"@@@Rename Table to Keyspace\n\npatch by Jeremiah Jordan; reviewed by Aleksey Yeschenko for\nCASSANDRA-5613\n","date":"2013-06-28 02:35:18","modifiedFileCount":"182","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2013-10-29 18:03:52","codes":[{"authorDate":"2013-10-29 18:03:52","commitOrder":3,"curCode":"    public void testTrackMaxDeletionTime() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            RowMutation rm = new RowMutation(\"Keyspace1\", key.key);\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", Util.cellname(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        RowMutation rm = new RowMutation(\"Keyspace1\", Util.dk(\"longttl\").key);\n        rm.add(\"Standard1\", Util.cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new RowMutation(\"Keyspace1\", Util.dk(\"longttl2\").key);\n        rm.add(\"Standard1\", Util.cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<SSTableReader>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","date":"2013-12-18 00:03:21","endLine":105,"groupId":"7697","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrackMaxDeletionTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/cf/44573330afe1856d498591fdcadec4d677d975.src","preCode":"    public void testTrackMaxDeletionTime() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            RowMutation rm = new RowMutation(\"Keyspace1\", key.key);\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", ByteBufferUtil.bytes(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        RowMutation rm = new RowMutation(\"Keyspace1\", Util.dk(\"longttl\").key);\n        rm.add(\"Standard1\", ByteBufferUtil.bytes(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new RowMutation(\"Keyspace1\", Util.dk(\"longttl2\").key);\n        rm.add(\"Standard1\", ByteBufferUtil.bytes(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<SSTableReader>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2013-10-29 18:03:52","commitOrder":3,"curCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        RowMutation rm = new RowMutation(\"Keyspace1\", key.key);\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", Util.cellname(\"deletecolumn\"+i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", Util.cellname(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new RowMutation(\"Keyspace1\", key.key);\n        rm.delete(\"Standard2\", Util.cellname(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","date":"2013-12-18 00:03:21","endLine":166,"groupId":"14539","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/cf/44573330afe1856d498591fdcadec4d677d975.src","preCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        RowMutation rm = new RowMutation(\"Keyspace1\", key.key);\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", ByteBufferUtil.bytes(\"deletecolumn\"+i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", ByteBufferUtil.bytes(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new RowMutation(\"Keyspace1\", key.key);\n        rm.delete(\"Standard2\", ByteBufferUtil.bytes(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"362cc05352ec67e707e0ac790732e96a15e63f6b","commitMessage":"@@@Push composites support in the storage engine\n\npatch by slebresne; reviewed by benedict for CASSANDRA-5417\n","date":"2013-12-18 00:03:21","modifiedFileCount":"205","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2013-12-22 05:37:43","codes":[{"authorDate":"2013-12-22 05:37:43","commitOrder":4,"curCode":"    public void testTrackMaxDeletionTime() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            Mutation rm = new Mutation(\"Keyspace1\", key.key);\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", Util.cellname(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        Mutation rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl\").key);\n        rm.add(\"Standard1\", Util.cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl2\").key);\n        rm.add(\"Standard1\", Util.cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<SSTableReader>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","date":"2013-12-22 05:37:43","endLine":102,"groupId":"7697","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrackMaxDeletionTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5c/801c6be7b02f169f5909da673b48182566517d.src","preCode":"    public void testTrackMaxDeletionTime() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            RowMutation rm = new RowMutation(\"Keyspace1\", key.key);\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", Util.cellname(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        RowMutation rm = new RowMutation(\"Keyspace1\", Util.dk(\"longttl\").key);\n        rm.add(\"Standard1\", Util.cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new RowMutation(\"Keyspace1\", Util.dk(\"longttl2\").key);\n        rm.add(\"Standard1\", Util.cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<SSTableReader>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2013-12-22 05:37:43","commitOrder":4,"curCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        Mutation rm = new Mutation(\"Keyspace1\", key.key);\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", Util.cellname(\"deletecolumn\"+i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", Util.cellname(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new Mutation(\"Keyspace1\", key.key);\n        rm.delete(\"Standard2\", Util.cellname(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","date":"2013-12-22 05:37:43","endLine":163,"groupId":"14539","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5c/801c6be7b02f169f5909da673b48182566517d.src","preCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        RowMutation rm = new RowMutation(\"Keyspace1\", key.key);\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", Util.cellname(\"deletecolumn\"+i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", Util.cellname(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new RowMutation(\"Keyspace1\", key.key);\n        rm.delete(\"Standard2\", Util.cellname(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"6bbb13b9b0fe62de2a2140055af2ea6968c73ccc","commitMessage":"@@@Rename RowMutation->Mutation in preparation for Row->Partition\n","date":"2013-12-22 05:37:43","modifiedFileCount":"91","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2013-12-22 05:37:43","codes":[{"authorDate":"2014-02-17 12:09:57","commitOrder":5,"curCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            Mutation rm = new Mutation(\"Keyspace1\", key.key);\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", Util.cellname(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        Mutation rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl\").key);\n        rm.add(\"Standard1\", Util.cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl2\").key);\n        rm.add(\"Standard1\", Util.cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<SSTableReader>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","date":"2014-02-17 12:09:57","endLine":102,"groupId":"7697","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrackMaxDeletionTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/78/f248bd20330acad34baa43c3acc4334124e210.src","preCode":"    public void testTrackMaxDeletionTime() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            Mutation rm = new Mutation(\"Keyspace1\", key.key);\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", Util.cellname(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        Mutation rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl\").key);\n        rm.add(\"Standard1\", Util.cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl2\").key);\n        rm.add(\"Standard1\", Util.cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<SSTableReader>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2013-12-22 05:37:43","commitOrder":5,"curCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        Mutation rm = new Mutation(\"Keyspace1\", key.key);\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", Util.cellname(\"deletecolumn\"+i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", Util.cellname(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new Mutation(\"Keyspace1\", key.key);\n        rm.delete(\"Standard2\", Util.cellname(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","date":"2013-12-22 05:37:43","endLine":163,"groupId":"14539","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5c/801c6be7b02f169f5909da673b48182566517d.src","preCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        Mutation rm = new Mutation(\"Keyspace1\", key.key);\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", Util.cellname(\"deletecolumn\"+i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", Util.cellname(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new Mutation(\"Keyspace1\", key.key);\n        rm.delete(\"Standard2\", Util.cellname(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"N"}],"commitId":"9639f95923233a1c8647da688d9f0fa4a15b12a7","commitMessage":"@@@minor cleanups in unit tests\n","date":"2014-02-17 12:09:57","modifiedFileCount":"52","status":"M","submitter":"Dave Brosius"},{"authorTime":"2014-04-04 22:39:20","codes":[{"authorDate":"2014-04-04 22:39:20","commitOrder":6,"curCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            Mutation rm = new Mutation(\"Keyspace1\", key.key);\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", cellname(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        Mutation rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl\").key);\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl2\").key);\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","date":"2014-04-04 22:39:20","endLine":106,"groupId":"7697","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrackMaxDeletionTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/16/24a6bcee6c47c49bd8d54b6f0c451cd8879d3b.src","preCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            Mutation rm = new Mutation(\"Keyspace1\", key.key);\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", Util.cellname(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        Mutation rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl\").key);\n        rm.add(\"Standard1\", Util.cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl2\").key);\n        rm.add(\"Standard1\", Util.cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<SSTableReader>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2014-04-04 22:39:20","commitOrder":6,"curCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        Mutation rm = new Mutation(\"Keyspace1\", key.key);\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", cellname(\"deletecolumn\" + i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", cellname(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new Mutation(\"Keyspace1\", key.key);\n        rm.delete(\"Standard2\", cellname(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","date":"2014-04-04 22:39:20","endLine":167,"groupId":"14539","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/16/24a6bcee6c47c49bd8d54b6f0c451cd8879d3b.src","preCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        Mutation rm = new Mutation(\"Keyspace1\", key.key);\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", Util.cellname(\"deletecolumn\"+i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", Util.cellname(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new Mutation(\"Keyspace1\", key.key);\n        rm.delete(\"Standard2\", Util.cellname(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"0015f37a3fa6ff34a63566e253433dbc4d3cf384","commitMessage":"@@@Merge branch 'cassandra-2.1' into trunk\n","date":"2014-04-04 22:39:20","modifiedFileCount":"11","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2014-04-29 20:07:34","codes":[{"authorDate":"2014-04-29 20:07:34","commitOrder":7,"curCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            Mutation rm = new Mutation(\"Keyspace1\", key.getKey());\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", cellname(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        Mutation rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl\").getKey());\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl2\").getKey());\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","date":"2014-04-29 20:07:34","endLine":106,"groupId":"7697","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrackMaxDeletionTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/72/307c556fe6ec55a765ea01929cba616ba1f08b.src","preCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            Mutation rm = new Mutation(\"Keyspace1\", key.key);\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", cellname(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        Mutation rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl\").key);\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl2\").key);\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2014-04-29 20:07:34","commitOrder":7,"curCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        Mutation rm = new Mutation(\"Keyspace1\", key.getKey());\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", cellname(\"deletecolumn\" + i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", cellname(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new Mutation(\"Keyspace1\", key.getKey());\n        rm.delete(\"Standard2\", cellname(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","date":"2014-04-29 20:07:34","endLine":167,"groupId":"14539","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/72/307c556fe6ec55a765ea01929cba616ba1f08b.src","preCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        Mutation rm = new Mutation(\"Keyspace1\", key.key);\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", cellname(\"deletecolumn\" + i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", cellname(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new Mutation(\"Keyspace1\", key.key);\n        rm.delete(\"Standard2\", cellname(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"7d7610fdb3fecda4868bb86a302d7e3707608300","commitMessage":"@@@Merge branch 'cassandra-2.1' into trunk\n\nConflicts:\n\tsrc/java/org/apache/cassandra/cql/QueryProcessor.java\n","date":"2014-04-29 20:07:34","modifiedFileCount":"161","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2014-06-21 01:55:35","codes":[{"authorDate":"2014-06-21 01:55:35","commitOrder":8,"curCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            Mutation rm = new Mutation(KEYSPACE1, key.getKey());\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", cellname(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        Mutation rm = new Mutation(KEYSPACE1, Util.dk(\"longttl\").getKey());\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new Mutation(KEYSPACE1, Util.dk(\"longttl2\").getKey());\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","date":"2014-06-21 01:55:35","endLine":135,"groupId":"7697","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrackMaxDeletionTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/19/d984a7b5f6a2ffa0eb380bd3b8f4c6c0076316.src","preCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            Mutation rm = new Mutation(\"Keyspace1\", key.getKey());\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", cellname(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        Mutation rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl\").getKey());\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new Mutation(\"Keyspace1\", Util.dk(\"longttl2\").getKey());\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2014-06-21 01:55:35","commitOrder":8,"curCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        Mutation rm = new Mutation(KEYSPACE1, key.getKey());\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", cellname(\"deletecolumn\" + i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", cellname(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new Mutation(KEYSPACE1, key.getKey());\n        rm.delete(\"Standard2\", cellname(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","date":"2014-06-21 01:55:35","endLine":196,"groupId":"14539","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/19/d984a7b5f6a2ffa0eb380bd3b8f4c6c0076316.src","preCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(\"Keyspace1\");\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        Mutation rm = new Mutation(\"Keyspace1\", key.getKey());\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", cellname(\"deletecolumn\" + i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", cellname(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new Mutation(\"Keyspace1\", key.getKey());\n        rm.delete(\"Standard2\", cellname(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"d2a3827a65f208eae7aed129dcb6dc582ac1f3d5","commitMessage":"@@@Reduce unit test times due to schema loading\n\nPatch by Lyuben Todorov; reviewed by Tyler Hobbs for CASSANDRA-6968\n","date":"2014-06-21 01:55:35","modifiedFileCount":"92","status":"M","submitter":"lyubent"},{"authorTime":"2014-07-10 04:41:13","codes":[{"authorDate":"2014-07-10 04:41:13","commitOrder":9,"curCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            Mutation rm = new Mutation(KEYSPACE1, key.getKey());\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", cellname(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.applyUnsafe();\n        }\n        Mutation rm = new Mutation(KEYSPACE1, Util.dk(\"longttl\").getKey());\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.applyUnsafe();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new Mutation(KEYSPACE1, Util.dk(\"longttl2\").getKey());\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.applyUnsafe();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","date":"2014-07-10 04:42:11","endLine":135,"groupId":"7697","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrackMaxDeletionTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/7a/f40fd1dc8ebb110871579445de5b886ffb5486.src","preCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            Mutation rm = new Mutation(KEYSPACE1, key.getKey());\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", cellname(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.apply();\n        }\n        Mutation rm = new Mutation(KEYSPACE1, Util.dk(\"longttl\").getKey());\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new Mutation(KEYSPACE1, Util.dk(\"longttl2\").getKey());\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.apply();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2014-07-10 04:41:13","commitOrder":9,"curCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        Mutation rm = new Mutation(KEYSPACE1, key.getKey());\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", cellname(\"deletecolumn\" + i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", cellname(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.applyUnsafe();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new Mutation(KEYSPACE1, key.getKey());\n        rm.delete(\"Standard2\", cellname(\"todelete\"), timestamp + 1);\n        rm.applyUnsafe();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","date":"2014-07-10 04:42:11","endLine":196,"groupId":"14539","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/7a/f40fd1dc8ebb110871579445de5b886ffb5486.src","preCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        Mutation rm = new Mutation(KEYSPACE1, key.getKey());\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", cellname(\"deletecolumn\" + i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", cellname(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new Mutation(KEYSPACE1, key.getKey());\n        rm.delete(\"Standard2\", cellname(\"todelete\"), timestamp + 1);\n        rm.apply();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"b453f0897bac7f8e928588d7b288ea3e65082353","commitMessage":"@@@Use unsafe mutations where possible in unit tests\n\nPatch by Lyuben Todorov; reviewed by Tyler Hobbs for CASSANDRA-6969\n","date":"2014-07-10 04:42:11","modifiedFileCount":"36","status":"M","submitter":"lyubent"},{"authorTime":"2014-09-02 00:54:46","codes":[{"authorDate":"2014-09-02 00:54:46","commitOrder":10,"curCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            for (int j = 0; j < 10; j++)\n                new RowUpdateBuilder(store.metadata, timestamp, 10 + j, Integer.toString(i))\n                    .clustering(Integer.toString(j))\n                    .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n                    .build()\n                    .applyUnsafe();\n\n        }\n\n        new RowUpdateBuilder(store.metadata, timestamp, 10000, \"longttl\")\n            .clustering(\"col\")\n            .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n            .build()\n            .applyUnsafe();\n\n\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n\n        new RowUpdateBuilder(store.metadata, timestamp, 20000, \"longttl2\")\n        .clustering(\"col\")\n        .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n        .build()\n        .applyUnsafe();\n\n\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","date":"2015-06-30 18:47:01","endLine":148,"groupId":"7697","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrackMaxDeletionTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/31/b03dbc0bcf78658a1f27326d2065fea60b2f3f.src","preCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            Mutation rm = new Mutation(KEYSPACE1, key.getKey());\n            for (int j = 0; j < 10; j++)\n                rm.add(\"Standard1\", cellname(Integer.toString(j)),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       10 + j);\n            rm.applyUnsafe();\n        }\n        Mutation rm = new Mutation(KEYSPACE1, Util.dk(\"longttl\").getKey());\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               10000);\n        rm.applyUnsafe();\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n        rm = new Mutation(KEYSPACE1, Util.dk(\"longttl2\").getKey());\n        rm.add(\"Standard1\", cellname(\"col\"),\n               ByteBufferUtil.EMPTY_BYTE_BUFFER,\n               timestamp,\n               20000);\n        rm.applyUnsafe();\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2014-09-02 00:54:46","commitOrder":10,"curCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        for (int i = 0; i<5; i++)\n            new RowUpdateBuilder(store.metadata, timestamp, 100, \"deletetest\")\n                .clustering(\"deletecolumn\" + i)\n                .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n                .build()\n                .applyUnsafe();\n\n\n        new RowUpdateBuilder(store.metadata, timestamp, 1000, \"deletetest\")\n        .clustering(\"todelete\")\n        .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n        .build()\n        .applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n\n        RowUpdateBuilder.deleteRow(store.metadata, timestamp + 1, \"deletetest\", \"todelete\").applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","date":"2015-06-30 18:47:01","endLine":212,"groupId":"4459","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/31/b03dbc0bcf78658a1f27326d2065fea60b2f3f.src","preCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        Mutation rm = new Mutation(KEYSPACE1, key.getKey());\n        for (int i = 0; i<5; i++)\n            rm.add(\"Standard2\", cellname(\"deletecolumn\" + i),\n                       ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                       timestamp,\n                       100);\n        rm.add(\"Standard2\", cellname(\"todelete\"),\n                   ByteBufferUtil.EMPTY_BYTE_BUFFER,\n                   timestamp,\n                   1000);\n        rm.applyUnsafe();\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n        rm = new Mutation(KEYSPACE1, key.getKey());\n        rm.delete(\"Standard2\", cellname(\"todelete\"), timestamp + 1);\n        rm.applyUnsafe();\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"a991b64811f4d6adb6c7b31c0df52288eb06cf19","commitMessage":"@@@Storage engine refactor.  a.k.a CASSANDRA-8099\n\nInitial patch.  see ticket for details\n","date":"2015-06-30 18:47:01","modifiedFileCount":"374","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2015-06-28 21:49:09","codes":[{"authorDate":"2015-06-28 21:49:09","commitOrder":11,"curCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            for (int j = 0; j < 10; j++)\n                new RowUpdateBuilder(store.metadata, timestamp, 10 + j, Integer.toString(i))\n                    .clustering(Integer.toString(j))\n                    .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n                    .build()\n                    .applyUnsafe();\n\n        }\n\n        new RowUpdateBuilder(store.metadata, timestamp, 10000, \"longttl\")\n            .clustering(\"col\")\n            .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n            .build()\n            .applyUnsafe();\n\n\n        store.forceBlockingFlush();\n        assertEquals(1, store.getLiveSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n\n        new RowUpdateBuilder(store.metadata, timestamp, 20000, \"longttl2\")\n        .clustering(\"col\")\n        .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n        .build()\n        .applyUnsafe();\n\n\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getLiveSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getLiveSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getLiveSSTables());\n        assertEquals(1, store.getLiveSSTables().size());\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","date":"2015-07-28 17:28:31","endLine":135,"groupId":"7697","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrackMaxDeletionTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ff/e7b06124f4f9e84f60b8e81b6a17d23df7b3da.src","preCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            for (int j = 0; j < 10; j++)\n                new RowUpdateBuilder(store.metadata, timestamp, 10 + j, Integer.toString(i))\n                    .clustering(Integer.toString(j))\n                    .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n                    .build()\n                    .applyUnsafe();\n\n        }\n\n        new RowUpdateBuilder(store.metadata, timestamp, 10000, \"longttl\")\n            .clustering(\"col\")\n            .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n            .build()\n            .applyUnsafe();\n\n\n        store.forceBlockingFlush();\n        assertEquals(1, store.getSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n\n        new RowUpdateBuilder(store.metadata, timestamp, 20000, \"longttl2\")\n        .clustering(\"col\")\n        .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n        .build()\n        .applyUnsafe();\n\n\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getSSTables());\n        assertEquals(1, store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2015-06-28 21:49:09","commitOrder":11,"curCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        for (int i = 0; i<5; i++)\n            new RowUpdateBuilder(store.metadata, timestamp, 100, \"deletetest\")\n                .clustering(\"deletecolumn\" + i)\n                .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n                .build()\n                .applyUnsafe();\n\n\n        new RowUpdateBuilder(store.metadata, timestamp, 1000, \"deletetest\")\n        .clustering(\"todelete\")\n        .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n        .build()\n        .applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(1,store.getLiveSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n\n        RowUpdateBuilder.deleteRow(store.metadata, timestamp + 1, \"deletetest\", \"todelete\").applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(2,store.getLiveSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getLiveSSTables());\n        assertEquals(1,store.getLiveSSTables().size());\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","date":"2015-07-28 17:28:31","endLine":199,"groupId":"4459","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ff/e7b06124f4f9e84f60b8e81b6a17d23df7b3da.src","preCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        for (int i = 0; i<5; i++)\n            new RowUpdateBuilder(store.metadata, timestamp, 100, \"deletetest\")\n                .clustering(\"deletecolumn\" + i)\n                .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n                .build()\n                .applyUnsafe();\n\n\n        new RowUpdateBuilder(store.metadata, timestamp, 1000, \"deletetest\")\n        .clustering(\"todelete\")\n        .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n        .build()\n        .applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(1,store.getSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n\n        RowUpdateBuilder.deleteRow(store.metadata, timestamp + 1, \"deletetest\", \"todelete\").applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(2,store.getSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getSSTables());\n        assertEquals(1,store.getSSTables().size());\n        for(SSTableReader sstable : store.getSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"ad8cad7c4d05fd5dea68fb274c81a102533ebe36","commitMessage":"@@@Make choice of SSTableReader types explicit\n\nAll accessors of a collection of SSTableReader must now\nspecify whether they desire the LIVE or CANONICAL set.  so\nthat no internal clients are accidentally exposed to a partial\nsstable they are not capable of safely handling.\n\npatch by benedict; reviewed by marcus for CASSANDRA-9699\n","date":"2015-07-28 17:28:31","modifiedFileCount":"60","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2016-11-10 09:16:59","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":12,"curCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            for (int j = 0; j < 10; j++)\n                new RowUpdateBuilder(store.metadata(), timestamp, 10 + j, Integer.toString(i))\n                    .clustering(Integer.toString(j))\n                    .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n                    .build()\n                    .applyUnsafe();\n\n        }\n\n        new RowUpdateBuilder(store.metadata(), timestamp, 10000, \"longttl\")\n            .clustering(\"col\")\n            .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n            .build()\n            .applyUnsafe();\n\n\n        store.forceBlockingFlush();\n        assertEquals(1, store.getLiveSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n\n        new RowUpdateBuilder(store.metadata(), timestamp, 20000, \"longttl2\")\n        .clustering(\"col\")\n        .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n        .build()\n        .applyUnsafe();\n\n\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getLiveSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getLiveSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getLiveSSTables());\n        assertEquals(1, store.getLiveSSTables().size());\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","date":"2017-01-28 06:17:46","endLine":135,"groupId":"7697","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testTrackMaxDeletionTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b9/22ca8f00e9de39b74f1cc93943917b84a67fc9.src","preCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            for (int j = 0; j < 10; j++)\n                new RowUpdateBuilder(store.metadata, timestamp, 10 + j, Integer.toString(i))\n                    .clustering(Integer.toString(j))\n                    .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n                    .build()\n                    .applyUnsafe();\n\n        }\n\n        new RowUpdateBuilder(store.metadata, timestamp, 10000, \"longttl\")\n            .clustering(\"col\")\n            .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n            .build()\n            .applyUnsafe();\n\n\n        store.forceBlockingFlush();\n        assertEquals(1, store.getLiveSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n\n        new RowUpdateBuilder(store.metadata, timestamp, 20000, \"longttl2\")\n        .clustering(\"col\")\n        .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n        .build()\n        .applyUnsafe();\n\n\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getLiveSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getLiveSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getLiveSSTables());\n        assertEquals(1, store.getLiveSSTables().size());\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2016-11-10 09:16:59","commitOrder":12,"curCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        for (int i = 0; i<5; i++)\n            new RowUpdateBuilder(store.metadata(), timestamp, 100, \"deletetest\")\n                .clustering(\"deletecolumn\" + i)\n                .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n                .build()\n                .applyUnsafe();\n\n\n        new RowUpdateBuilder(store.metadata(), timestamp, 1000, \"deletetest\")\n        .clustering(\"todelete\")\n        .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n        .build()\n        .applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(1,store.getLiveSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n\n        RowUpdateBuilder.deleteRow(store.metadata(), timestamp + 1, \"deletetest\", \"todelete\").applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(2,store.getLiveSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getLiveSSTables());\n        assertEquals(1,store.getLiveSSTables().size());\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","date":"2017-01-28 06:17:46","endLine":199,"groupId":"4459","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testWithDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b9/22ca8f00e9de39b74f1cc93943917b84a67fc9.src","preCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        for (int i = 0; i<5; i++)\n            new RowUpdateBuilder(store.metadata, timestamp, 100, \"deletetest\")\n                .clustering(\"deletecolumn\" + i)\n                .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n                .build()\n                .applyUnsafe();\n\n\n        new RowUpdateBuilder(store.metadata, timestamp, 1000, \"deletetest\")\n        .clustering(\"todelete\")\n        .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n        .build()\n        .applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(1,store.getLiveSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n\n        RowUpdateBuilder.deleteRow(store.metadata, timestamp + 1, \"deletetest\", \"todelete\").applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(2,store.getLiveSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getLiveSSTables());\n        assertEquals(1,store.getLiveSSTables().size());\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"af3fe39dcabd9ef77a00309ce6741268423206df","commitMessage":"@@@Make TableMetadata immutable.  optimize Schema\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-9425\n","date":"2017-01-28 06:17:46","modifiedFileCount":"511","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2021-03-26 23:13:22","codes":[{"authorDate":"2021-03-26 23:13:22","commitOrder":13,"curCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for (int i = 0; i < 10; i++)\n        {\n            for (int j = 0; j < 10; j++)\n                new RowUpdateBuilder(store.metadata(), timestamp, 10 + j, Integer.toString(i))\n                    .clustering(Integer.toString(j))\n                    .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n                    .build()\n                    .applyUnsafe();\n\n        }\n\n        new RowUpdateBuilder(store.metadata(), timestamp, 10000, \"longttl\")\n            .clustering(\"col\")\n            .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n            .build()\n            .applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(1, store.getLiveSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis() / 1000);\n        int firstDelTime = 0;\n        for (SSTableReader sstable : store.getLiveSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, DELTA);\n\n        }\n\n        new RowUpdateBuilder(store.metadata(), timestamp, 20000, \"longttl2\")\n        .clustering(\"col\")\n        .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n        .build()\n        .applyUnsafe();\n\n        ttltimestamp = (int) (System.currentTimeMillis() / 1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getLiveSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getLiveSSTables());\n        if (sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, DELTA);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, DELTA);\n        }\n\n        Util.compact(store, store.getLiveSSTables());\n        assertEquals(1, store.getLiveSSTables().size());\n        for (SSTableReader sstable : store.getLiveSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, DELTA);\n        }\n    }\n","date":"2021-03-27 04:26:10","endLine":136,"groupId":"101953","id":25,"instanceNumber":1,"isCurCommit":1,"methodName":"testTrackMaxDeletionTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ae/cddf9ca3da28de31ae4469d8ea811712035362.src","preCode":"    public void testTrackMaxDeletionTime()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard1\");\n        long timestamp = System.currentTimeMillis();\n        for(int i = 0; i < 10; i++)\n        {\n            DecoratedKey key = Util.dk(Integer.toString(i));\n            for (int j = 0; j < 10; j++)\n                new RowUpdateBuilder(store.metadata(), timestamp, 10 + j, Integer.toString(i))\n                    .clustering(Integer.toString(j))\n                    .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n                    .build()\n                    .applyUnsafe();\n\n        }\n\n        new RowUpdateBuilder(store.metadata(), timestamp, 10000, \"longttl\")\n            .clustering(\"col\")\n            .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n            .build()\n            .applyUnsafe();\n\n\n        store.forceBlockingFlush();\n        assertEquals(1, store.getLiveSSTables().size());\n        int ttltimestamp = (int)(System.currentTimeMillis()/1000);\n        int firstDelTime = 0;\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            firstDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 10000, firstDelTime, 10);\n\n        }\n\n        new RowUpdateBuilder(store.metadata(), timestamp, 20000, \"longttl2\")\n        .clustering(\"col\")\n        .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n        .build()\n        .applyUnsafe();\n\n\n        ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        store.forceBlockingFlush();\n        assertEquals(2, store.getLiveSSTables().size());\n        List<SSTableReader> sstables = new ArrayList<>(store.getLiveSSTables());\n        if(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime < sstables.get(1).getSSTableMetadata().maxLocalDeletionTime)\n        {\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n        else\n        {\n            assertEquals(sstables.get(1).getSSTableMetadata().maxLocalDeletionTime, firstDelTime);\n            assertEquals(sstables.get(0).getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n\n        Util.compact(store, store.getLiveSSTables());\n        assertEquals(1, store.getLiveSSTables().size());\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp + 20000, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2021-03-26 23:13:22","commitOrder":13,"curCode":"    public void testWithDeletes()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        for (int i = 0; i < 5; i++)\n            new RowUpdateBuilder(store.metadata(), timestamp, 100, \"deletetest\")\n                .clustering(\"deletecolumn\" + i)\n                .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n                .build()\n                .applyUnsafe();\n\n\n        new RowUpdateBuilder(store.metadata(), timestamp, 1000, \"deletetest\")\n        .clustering(\"todelete\")\n        .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n        .build()\n        .applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(1, store.getLiveSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis() / 1000);\n        int firstMaxDelTime = 0;\n        for (SSTableReader sstable : store.getLiveSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, DELTA);\n        }\n\n        RowUpdateBuilder.deleteRow(store.metadata(), timestamp + 1, \"deletetest\", \"todelete\").applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(2, store.getLiveSSTables().size());\n        boolean foundDelete = false;\n        for (SSTableReader sstable : store.getLiveSSTables())\n        {\n            if (sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, DELTA);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getLiveSSTables());\n        assertEquals(1, store.getLiveSSTables().size());\n        for (SSTableReader sstable : store.getLiveSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, DELTA);\n        }\n    }\n","date":"2021-03-27 04:26:10","endLine":196,"groupId":"101953","id":26,"instanceNumber":2,"isCurCommit":1,"methodName":"testWithDeletes","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ae/cddf9ca3da28de31ae4469d8ea811712035362.src","preCode":"    public void testWithDeletes() throws ExecutionException, InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE1);\n        ColumnFamilyStore store = keyspace.getColumnFamilyStore(\"Standard2\");\n        long timestamp = System.currentTimeMillis();\n        DecoratedKey key = Util.dk(\"deletetest\");\n        for (int i = 0; i<5; i++)\n            new RowUpdateBuilder(store.metadata(), timestamp, 100, \"deletetest\")\n                .clustering(\"deletecolumn\" + i)\n                .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n                .build()\n                .applyUnsafe();\n\n\n        new RowUpdateBuilder(store.metadata(), timestamp, 1000, \"deletetest\")\n        .clustering(\"todelete\")\n        .add(\"val\", ByteBufferUtil.EMPTY_BYTE_BUFFER)\n        .build()\n        .applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(1,store.getLiveSSTables().size());\n        int ttltimestamp = (int) (System.currentTimeMillis()/1000);\n        int firstMaxDelTime = 0;\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            firstMaxDelTime = sstable.getSSTableMetadata().maxLocalDeletionTime;\n            assertEquals(ttltimestamp + 1000, firstMaxDelTime, 10);\n        }\n\n        RowUpdateBuilder.deleteRow(store.metadata(), timestamp + 1, \"deletetest\", \"todelete\").applyUnsafe();\n\n        store.forceBlockingFlush();\n        assertEquals(2,store.getLiveSSTables().size());\n        boolean foundDelete = false;\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            if(sstable.getSSTableMetadata().maxLocalDeletionTime != firstMaxDelTime)\n            {\n                assertEquals(sstable.getSSTableMetadata().maxLocalDeletionTime, ttltimestamp, 10);\n                foundDelete = true;\n            }\n        }\n        assertTrue(foundDelete);\n        Util.compact(store, store.getLiveSSTables());\n        assertEquals(1,store.getLiveSSTables().size());\n        for(SSTableReader sstable : store.getLiveSSTables())\n        {\n            assertEquals(ttltimestamp + 100, sstable.getSSTableMetadata().maxLocalDeletionTime, 10);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableMetadataTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"9b32b8a4369049aec6e0848d21f524a40d2c93f1","commitMessage":"@@@Fix flaky SSTableMetadataTest and SSTableMetadataTrackingTest\n\npatch by Andr?s de la Pe?a; reviewed by Brandon Williams and Ekaterina Dimitrova for CASSANDRA-16236\n","date":"2021-03-27 04:26:10","modifiedFileCount":"2","status":"M","submitter":"Andr?s de la Pe?a"}]
