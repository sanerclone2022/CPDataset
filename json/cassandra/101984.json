[{"authorTime":"2014-12-17 15:50:55","codes":[{"authorDate":"2014-12-17 05:03:05","commitOrder":3,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n        }\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        Thread.sleep(100);\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","date":"2014-12-17 05:03:05","endLine":147,"groupId":"13131","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/24/a0091f3f26f985304cb122482636a93fd1c013.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n        }\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        Thread.sleep(100);\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"NB"},{"authorDate":"2014-12-17 15:50:55","commitOrder":3,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = sstables.iterator().next();\n                            long lastKeySize = sstable.getPosition(sstable.last, SSTableReader.Operator.GT).position - sstable.getPosition(sstable.last, SSTableReader.Operator.EQ).position;\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left + lastKeySize);\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n        }\n        assertTrue(checked);\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        Thread.sleep(100);\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        cfs.truncateBlocking();\n        validateCFS(cfs);\n    }\n","date":"2014-12-17 15:50:55","endLine":208,"groupId":"24801","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d5/e92dd4060341de8707ec8212b7227ba5f0084f.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = sstables.iterator().next();\n                            long lastKeySize = sstable.getPosition(sstable.last, SSTableReader.Operator.GT).position - sstable.getPosition(sstable.last, SSTableReader.Operator.EQ).position;\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left + lastKeySize);\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n        }\n        assertTrue(checked);\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        Thread.sleep(100);\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        cfs.truncateBlocking();\n        validateCFS(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"}],"commitId":"8a38ce88d58d9d49faf48cfadbb30eb236d79bcf","commitMessage":"@@@Merge branch 'cassandra-2.1' into trunk\n\nConflicts:\n\ttest/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java\n","date":"2014-12-17 15:50:55","modifiedFileCount":"2","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2015-01-15 01:08:51","codes":[{"authorDate":"2014-12-17 05:03:05","commitOrder":4,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n        }\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        Thread.sleep(100);\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","date":"2014-12-17 05:03:05","endLine":147,"groupId":"13131","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/24/a0091f3f26f985304cb122482636a93fd1c013.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n        }\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        Thread.sleep(100);\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"},{"authorDate":"2015-01-15 01:08:51","commitOrder":4,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = sstables.iterator().next();\n                            long lastKeySize = sstable.getPosition(sstable.last, SSTableReader.Operator.GT).position - sstable.getPosition(sstable.last, SSTableReader.Operator.EQ).position;\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left + lastKeySize);\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n        }\n        assertTrue(checked);\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        Thread.sleep(100);\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        cfs.truncateBlocking();\n        Thread.sleep(1000); \r\n        validateCFS(cfs);\n    }\n","date":"2015-01-15 01:08:51","endLine":205,"groupId":"24801","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/af/ad97953fcfe729e6a905c00802615f0b8a5439.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = sstables.iterator().next();\n                            long lastKeySize = sstable.getPosition(sstable.last, SSTableReader.Operator.GT).position - sstable.getPosition(sstable.last, SSTableReader.Operator.EQ).position;\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left + lastKeySize);\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n        }\n        assertTrue(checked);\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        Thread.sleep(100);\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        cfs.truncateBlocking();\n        validateCFS(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"30a5597ca2eb5b13330cb5843a9ee036beac63de","commitMessage":"@@@Merge branch 'cassandra-2.1' into trunk\n","date":"2015-01-15 01:08:51","modifiedFileCount":"1","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2015-02-11 23:31:01","codes":[{"authorDate":"2014-12-17 05:03:05","commitOrder":5,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n        }\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        Thread.sleep(100);\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","date":"2014-12-17 05:03:05","endLine":147,"groupId":"13131","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/24/a0091f3f26f985304cb122482636a93fd1c013.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n        }\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        Thread.sleep(100);\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"},{"authorDate":"2015-02-11 23:31:01","commitOrder":5,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = sstables.iterator().next();\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n        }\n        assertTrue(checked);\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        Thread.sleep(100);\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        cfs.truncateBlocking();\n        Thread.sleep(1000); \r\n        validateCFS(cfs);\n    }\n","date":"2015-02-11 23:31:01","endLine":200,"groupId":"24801","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/8e/3efd78144d2967605cdb5037160a32c3722577.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = sstables.iterator().next();\n                            long lastKeySize = sstable.getPosition(sstable.last, SSTableReader.Operator.GT).position - sstable.getPosition(sstable.last, SSTableReader.Operator.EQ).position;\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left + lastKeySize);\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n        }\n        assertTrue(checked);\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        Thread.sleep(100);\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        cfs.truncateBlocking();\n        Thread.sleep(1000); \r\n        validateCFS(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"96866ce53fb2750217305e881b284851958f4728","commitMessage":"@@@Merge branch 'cassandra-2.1' into trunk\n\nConflicts:\n\tsrc/java/org/apache/cassandra/io/sstable/format/SSTableReader.java\n","date":"2015-02-11 23:31:01","modifiedFileCount":"4","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2015-04-10 04:05:45","codes":[{"authorDate":"2015-04-10 04:05:45","commitOrder":6,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n        }\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        SSTableDeletingTask.waitForDeletions();\n\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","date":"2015-04-10 04:05:45","endLine":147,"groupId":"13131","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/17/f33926d1d38ee8ff51d4d8571b61331a702ed4.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n        }\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        Thread.sleep(100);\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2015-04-10 04:05:45","commitOrder":6,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = sstables.iterator().next();\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n        }\n        assertTrue(checked);\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        SSTableDeletingTask.waitForDeletions();\n\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        cfs.truncateBlocking();\n        SSTableDeletingTask.waitForDeletions();\n\n        validateCFS(cfs);\n    }\n","date":"2015-04-10 04:05:45","endLine":206,"groupId":"24801","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/17/f33926d1d38ee8ff51d4d8571b61331a702ed4.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = sstables.iterator().next();\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n        }\n        assertTrue(checked);\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        Thread.sleep(100);\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        cfs.truncateBlocking();\n        Thread.sleep(1000); \r\n        validateCFS(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"d908bf431af7abe68aa69e6fd0ab50e30f01e607","commitMessage":"@@@Fix SSTableRewriter test on Windows\n\nPatch by stefania; reviewed by jmckenzie for CASSANDRA-8962\n","date":"2015-04-10 04:05:45","modifiedFileCount":"2","status":"M","submitter":"Stefania Alborghetti"},{"authorTime":"2015-05-17 20:50:44","codes":[{"authorDate":"2015-05-17 20:50:44","commitOrder":7,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        try (SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n             AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n            Collection<SSTableReader> newsstables = writer.finish();\n            cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        }\n        SSTableDeletingTask.waitForDeletions();\n\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","date":"2015-05-17 20:50:44","endLine":149,"groupId":"22816","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d3/9da611e93a6284cc24af66de42d9b4b1a2c539.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n        }\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        SSTableDeletingTask.waitForDeletions();\n\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2015-05-17 20:50:44","commitOrder":7,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        boolean checked = false;\n        try (SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n             AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = sstables.iterator().next();\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            Collection<SSTableReader> newsstables = writer.finish();\n            cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        }\n        SSTableDeletingTask.waitForDeletions();\n\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        cfs.truncateBlocking();\n        SSTableDeletingTask.waitForDeletions();\n\n        validateCFS(cfs);\n    }\n","date":"2015-05-17 20:50:44","endLine":208,"groupId":"24801","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d3/9da611e93a6284cc24af66de42d9b4b1a2c539.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = sstables.iterator().next();\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n        }\n        assertTrue(checked);\n        Collection<SSTableReader> newsstables = writer.finish();\n        cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        SSTableDeletingTask.waitForDeletions();\n\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        cfs.truncateBlocking();\n        SSTableDeletingTask.waitForDeletions();\n\n        validateCFS(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"}],"commitId":"75a34879bb4aa01a6a65858c303f2a058af512a4","commitMessage":"@@@Merge branch 'cassandra-2.2' into trunk\n\nConflicts:\n\tCHANGES.txt\n","date":"2015-05-17 20:50:44","modifiedFileCount":"52","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2015-05-22 16:44:46","codes":[{"authorDate":"2015-05-22 16:44:46","commitOrder":8,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","date":"2015-05-22 16:44:46","endLine":152,"groupId":"5129","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fa/91d00527f3607435c9967b40b65baf4b544403.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        try (SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n             AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n            Collection<SSTableReader> newsstables = writer.finish();\n            cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        }\n        SSTableDeletingTask.waitForDeletions();\n\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2015-05-22 16:44:46","commitOrder":8,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n        assertEquals(0, cfs.metric.liveDiskSpaceUsed.getCount());\n        assertEquals(0, cfs.metric.totalDiskSpaceUsed.getCount());\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        truncate(cfs);\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n    }\n","date":"2015-05-22 16:44:46","endLine":211,"groupId":"13406","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fa/91d00527f3607435c9967b40b65baf4b544403.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        cfs.truncateBlocking();\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        boolean checked = false;\n        try (SSTableRewriter writer = new SSTableRewriter(cfs, sstables, 1000, false);\n             AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = sstables.iterator().next();\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            Collection<SSTableReader> newsstables = writer.finish();\n            cfs.getDataTracker().markCompactedSSTablesReplaced(sstables, newsstables, OperationType.COMPACTION);\n        }\n        SSTableDeletingTask.waitForDeletions();\n\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        cfs.truncateBlocking();\n        SSTableDeletingTask.waitForDeletions();\n\n        validateCFS(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"}],"commitId":"d96a02a12e20bc2e0b096904ebe7a1d68532d2f3","commitMessage":"@@@Merge branch 'cassandra-2.2' into trunk\n","date":"2015-05-22 16:44:46","modifiedFileCount":"48","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2015-05-29 15:58:49","codes":[{"authorDate":"2015-05-29 15:58:49","commitOrder":9,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","date":"2015-05-29 15:58:49","endLine":153,"groupId":"5130","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/9e/1cb91d579923f2a39acc23d7e542e27af8aca4.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2015-05-29 15:58:49","commitOrder":9,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n        assertEquals(0, cfs.metric.liveDiskSpaceUsed.getCount());\n        assertEquals(0, cfs.metric.totalDiskSpaceUsed.getCount());\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000))\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        truncate(cfs);\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n    }\n","date":"2015-05-29 15:58:49","endLine":212,"groupId":"13406","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/9e/1cb91d579923f2a39acc23d7e542e27af8aca4.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n        assertEquals(0, cfs.metric.liveDiskSpaceUsed.getCount());\n        assertEquals(0, cfs.metric.totalDiskSpaceUsed.getCount());\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n        SSTableRewriter.overrideOpenInterval(10000000);\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        truncate(cfs);\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"601944569cbe8f8aed5f1e3448828586ba3bc936","commitMessage":"@@@Merge branch 'cassandra-2.2' into trunk\n","date":"2015-05-29 15:58:49","modifiedFileCount":"4","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2015-05-11 19:43:13","codes":[{"authorDate":"2015-05-11 19:43:13","commitOrder":10,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","date":"2015-06-05 16:34:04","endLine":153,"groupId":"5130","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/8f/6ec168d19354fb0b7723e22f026ca0d2d09e8a.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2015-05-11 19:43:13","commitOrder":10,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n        assertEquals(0, cfs.metric.liveDiskSpaceUsed.getCount());\n        assertEquals(0, cfs.metric.totalDiskSpaceUsed.getCount());\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000))\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        truncate(cfs);\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n    }\n","date":"2015-06-05 16:34:04","endLine":212,"groupId":"13406","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/8f/6ec168d19354fb0b7723e22f026ca0d2d09e8a.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n        assertEquals(0, cfs.metric.liveDiskSpaceUsed.getCount());\n        assertEquals(0, cfs.metric.totalDiskSpaceUsed.getCount());\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategy().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000))\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        truncate(cfs);\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"7df3a5c99da4a352b3b8599b2965a86dec1777e5","commitMessage":"@@@Remove wrapping compaction strategy\n\nPatch by marcuse; reviewed by JoshuaMcKenzie for CASSANDRA-9342\n","date":"2015-06-05 16:34:04","modifiedFileCount":"20","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2014-09-02 00:54:46","codes":[{"authorDate":"2014-09-02 00:54:46","commitOrder":11,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","date":"2015-06-30 18:47:01","endLine":167,"groupId":"25777","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/9e/4c93910c03a2c8d186a765ff8a9c72c3705cc3.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);)\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n            }\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2014-09-02 00:54:46","commitOrder":11,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n        assertEquals(0, cfs.metric.liveDiskSpaceUsed.getCount());\n        assertEquals(0, cfs.metric.totalDiskSpaceUsed.getCount());\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        truncate(cfs);\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n    }\n","date":"2015-06-30 18:47:01","endLine":227,"groupId":"11008","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/9e/4c93910c03a2c8d186a765ff8a9c72c3705cc3.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n        assertEquals(0, cfs.metric.liveDiskSpaceUsed.getCount());\n        assertEquals(0, cfs.metric.totalDiskSpaceUsed.getCount());\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000))\n        {\n            ISSTableScanner scanner = scanners.scanners.get(0);\n            CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(System.currentTimeMillis()));\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (scanner.hasNext())\n            {\n                AbstractCompactedRow row = new LazilyCompactedRow(controller, Arrays.asList(scanner.next()));\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 15000000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        truncate(cfs);\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"a991b64811f4d6adb6c7b31c0df52288eb06cf19","commitMessage":"@@@Storage engine refactor.  a.k.a CASSANDRA-8099\n\nInitial patch.  see ticket for details\n","date":"2015-06-30 18:47:01","modifiedFileCount":"374","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2015-07-06 19:14:50","codes":[{"authorDate":"2014-09-02 00:54:46","commitOrder":12,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","date":"2015-06-30 18:47:01","endLine":167,"groupId":"25777","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/9e/4c93910c03a2c8d186a765ff8a9c72c3705cc3.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"N"},{"authorDate":"2015-07-06 19:14:50","commitOrder":12,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","date":"2015-07-06 19:14:50","endLine":238,"groupId":"11008","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/84/568c32a4fa0d3d8b4ff28f81d552154ce84388.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n        assertEquals(0, cfs.metric.liveDiskSpaceUsed.getCount());\n        assertEquals(0, cfs.metric.totalDiskSpaceUsed.getCount());\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        truncate(cfs);\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"2d7fec94f13dd8a7d2b14179fc89202413bdcbf7","commitMessage":"@@@Merge branch 'cassandra-2.2' into trunk\n\nConflicts:\n\ttest/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java\n","date":"2015-07-06 19:14:50","modifiedFileCount":"6","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2015-04-27 14:38:53","codes":[{"authorDate":"2015-04-27 14:38:53","commitOrder":13,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","date":"2015-07-24 21:41:51","endLine":182,"groupId":"25777","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/0e/533c27e3a8602e74cbd3971eba0ec2dda0ca4b.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2015-04-27 14:38:53","commitOrder":13,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","date":"2015-07-24 21:41:51","endLine":238,"groupId":"24066","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/0e/533c27e3a8602e74cbd3971eba0ec2dda0ca4b.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        SSTableDeletingTask.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list(), 0, 0);\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"b09e60f72bb2f37235d9e9190c25db36371b3c18","commitMessage":"@@@Introduce safer durable sstable membership management\n(and simplify cleanup of compaction leftovers)\n\nInstead of using temporary files and system tables. \nthis patch introduces a simple transaction log for sstable\nmembership edits that can be committed/aborted atomically\nand simply replayed on startup.\n\npatch by stefania; reviewed by benedict for CASSANDRA-7066\n","date":"2015-07-24 21:41:51","modifiedFileCount":"75","status":"M","submitter":"Stefania Alborghetti"},{"authorTime":"2015-06-28 21:49:09","codes":[{"authorDate":"2015-06-28 21:49:09","commitOrder":14,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","date":"2015-07-28 17:28:31","endLine":184,"groupId":"25777","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/cb/07d371630737e3fcf4c107b1e03696316428c5.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2015-06-28 21:49:09","commitOrder":14,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","date":"2015-07-28 17:28:31","endLine":240,"groupId":"24066","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/cb/07d371630737e3fcf4c107b1e03696316428c5.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"ad8cad7c4d05fd5dea68fb274c81a102533ebe36","commitMessage":"@@@Make choice of SSTableReader types explicit\n\nAll accessors of a collection of SSTableReader must now\nspecify whether they desire the LIVE or CANONICAL set.  so\nthat no internal clients are accidentally exposed to a partial\nsstable they are not capable of safely handling.\n\npatch by benedict; reviewed by marcus for CASSANDRA-9699\n","date":"2015-07-28 17:28:31","modifiedFileCount":"60","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2015-07-03 21:38:40","codes":[{"authorDate":"2015-06-28 21:49:09","commitOrder":15,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","date":"2015-07-28 17:28:31","endLine":184,"groupId":"25777","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/cb/07d371630737e3fcf4c107b1e03696316428c5.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"N"},{"authorDate":"2015-07-03 21:38:40","commitOrder":15,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","date":"2015-07-31 19:42:47","endLine":240,"groupId":"7622","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fd/229419086d09cc32bddf5d1e983814ab6ecbdb.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"69f77cbddd4c74448f227e9aceef84d345118184","commitMessage":"@@@Stop accessing the partitioner directly via StorageService\n\nChanges the way the partitioner is accessed. Partitioner is now stored\nand accessed according to the reason for needing it:\n* if it is to access a table / prepare a statement.  the partitioner\nrelevant to this table can be found in its CFMetaData.\n* if it is to route messages to the relevant member of the cluster.  the\npartitioner in TokenMetadata is to be used.\n\npatch by Branimir Lambov; reviewed by Aleksey Yeschenko for\nCASSANDRA-8143\n","date":"2015-07-31 19:42:47","modifiedFileCount":"125","status":"M","submitter":"Branimir Lambov"},{"authorTime":"2015-08-01 01:24:52","codes":[{"authorDate":"2015-06-28 21:49:09","commitOrder":16,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","date":"2015-07-28 17:28:31","endLine":184,"groupId":"25777","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/cb/07d371630737e3fcf4c107b1e03696316428c5.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"N"},{"authorDate":"2015-08-01 01:24:52","commitOrder":16,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","date":"2015-08-01 01:24:52","endLine":240,"groupId":"24066","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/cb/07d371630737e3fcf4c107b1e03696316428c5.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"a22ce89e868644ea04f0f3dacec05fff1673a345","commitMessage":"@@@Revert \"Stop accessing the partitioner directly via StorageService\"\n\nThis reverts commit 69f77cbddd4c74448f227e9aceef84d345118184.\n","date":"2015-08-01 01:24:52","modifiedFileCount":"125","status":"M","submitter":"Jonathan Ellis"},{"authorTime":"2015-08-01 06:33:20","codes":[{"authorDate":"2015-06-28 21:49:09","commitOrder":17,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","date":"2015-07-28 17:28:31","endLine":184,"groupId":"25777","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/cb/07d371630737e3fcf4c107b1e03696316428c5.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"N"},{"authorDate":"2015-08-01 06:33:20","commitOrder":17,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","date":"2015-08-01 06:33:51","endLine":240,"groupId":"7622","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/fd/229419086d09cc32bddf5d1e983814ab6ecbdb.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.partitioner.getMinimumToken(), cfs.partitioner.getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"0a08525ad236f78df05c854dead62f300eae271d","commitMessage":"@@@Revert \"Revert \"Stop accessing the partitioner directly via StorageService\"\"\n\nThis reverts commit a22ce89e868644ea04f0f3dacec05fff1673a345.\n","date":"2015-08-01 06:33:51","modifiedFileCount":"125","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2015-08-17 17:20:15","codes":[{"authorDate":"2015-08-17 17:20:15","commitOrder":18,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        TransactionLog.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","date":"2015-08-17 17:20:15","endLine":184,"groupId":"25777","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d9/516cb1f5c26f7cf4e9f37240eb4cc347f5d060.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2015-08-17 17:20:15","commitOrder":18,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        TransactionLog.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","date":"2015-08-17 17:20:15","endLine":240,"groupId":"7622","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/d9/516cb1f5c26f7cf4e9f37240eb4cc347f5d060.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        TransactionLogs.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"13ec86ce9e4fe6616bff85aa4730686212a347c1","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-08-17 17:20:15","modifiedFileCount":"41","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2015-09-08 18:53:45","codes":[{"authorDate":"2015-09-08 18:53:45","commitOrder":19,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","date":"2015-09-08 18:53:45","endLine":183,"groupId":"25777","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/94/2c7f95e50ab58a780dbe175044c7cd93923d63.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        TransactionLog.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2015-09-08 18:53:45","commitOrder":19,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","date":"2015-09-08 18:53:45","endLine":239,"groupId":"7622","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/94/2c7f95e50ab58a780dbe175044c7cd93923d63.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        TransactionLog.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"322e21ec4ec4200d155ea5eb8e7545c446c3c726","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-09-08 18:53:45","modifiedFileCount":"22","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2015-09-30 17:41:30","codes":[{"authorDate":"2015-09-30 17:41:30","commitOrder":20,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, false, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","date":"2015-10-08 02:04:02","endLine":183,"groupId":"17476","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/09/3bffd5ec59a3ca2ceae6bf5cb877cda1275117.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2015-09-30 17:41:30","commitOrder":20,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, false, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","date":"2015-10-08 02:04:02","endLine":239,"groupId":"7622","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/09/3bffd5ec59a3ca2ceae6bf5cb877cda1275117.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(cfs, txn, 1000, false, 10000000);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"127f7c5844f938649de0f3a5dec630b3c5cda256","commitMessage":"@@@Clean resource usage warnings.\n\nPatch by Branimir Lambov; reviewed by tjake for CASSANDRA-10385\n","date":"2015-10-08 02:04:02","modifiedFileCount":"40","status":"M","submitter":"Branimir Lambov"},{"authorTime":"2016-02-10 20:47:00","codes":[{"authorDate":"2016-02-10 20:47:00","commitOrder":21,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","date":"2016-02-16 14:22:40","endLine":143,"groupId":"4443","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/7d/bc45e6f9db88ae99f92eba335cb6ef1857887d.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, false, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2016-02-10 20:47:00","commitOrder":21,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","date":"2016-02-16 14:22:40","endLine":199,"groupId":"7622","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/7d/bc45e6f9db88ae99f92eba335cb6ef1857887d.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, false, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"f9a1a80af181e568240bb8a005cd53af8de00648","commitMessage":"@@@Remove duplicate offline compaction tracking\n\nPatch by marcuse; reviewed by Stefania for CASSANDRA-11148\n","date":"2016-02-16 14:22:40","modifiedFileCount":"12","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2016-08-02 10:07:46","codes":[{"authorDate":"2016-08-02 10:07:46","commitOrder":22,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        assertEquals(1, assertFileCounts(sstables.iterator().next().descriptor.directory.list()));\n\n        validateCFS(cfs);\n    }\n","date":"2016-08-02 10:07:46","endLine":137,"groupId":"4443","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/24/6a7f01cd15e93162ffc110bd5f2bb105e771a6.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2016-08-02 10:07:46","commitOrder":22,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        assertEquals(1, assertFileCounts(sstables.iterator().next().descriptor.directory.list()));\n\n        validateCFS(cfs);\n        truncate(cfs);\n    }\n","date":"2016-08-02 10:07:46","endLine":193,"groupId":"7622","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/24/6a7f01cd15e93162ffc110bd5f2bb105e771a6.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        validateCFS(cfs);\n        int filecounts = assertFileCounts(sstables.iterator().next().descriptor.directory.list());\n        assertEquals(1, filecounts);\n        truncate(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"}],"commitId":"c320f22a9260fc61e3547b89213e571284109233","commitMessage":"@@@Merge branch 'cassandra-3.9' into trunk\n","date":"2016-08-02 10:07:46","modifiedFileCount":"2","status":"M","submitter":"Stefania Alborghetti"},{"authorTime":"2018-04-11 23:24:40","codes":[{"authorDate":"2016-08-02 10:07:46","commitOrder":23,"curCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        assertEquals(1, assertFileCounts(sstables.iterator().next().descriptor.directory.list()));\n\n        validateCFS(cfs);\n    }\n","date":"2016-08-02 10:07:46","endLine":137,"groupId":"4443","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/24/6a7f01cd15e93162ffc110bd5f2bb105e771a6.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        assertEquals(1, assertFileCounts(sstables.iterator().next().descriptor.directory.list()));\n\n        validateCFS(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"N"},{"authorDate":"2018-04-11 23:24:40","commitOrder":23,"curCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<SSTableReader.PartitionPositionBounds> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<SSTableReader.PartitionPositionBounds> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).lowerPosition);\n                            \r\n                            assertEquals(tmplinkPositions.get(0).upperPosition, compactingPositions.get(0).lowerPosition);\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).upperPosition);\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        assertEquals(1, assertFileCounts(sstables.iterator().next().descriptor.directory.list()));\n\n        validateCFS(cfs);\n        truncate(cfs);\n    }\n","date":"2018-04-11 23:24:40","endLine":194,"groupId":"30250","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/64/12ef49bee67049d81a36b4778000294c9bb8d9.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<Pair<Long, Long>> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<Pair<Long, Long>> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).left.longValue());\n                            \r\n                            assertEquals(tmplinkPositions.get(0).right.longValue(), compactingPositions.get(0).left.longValue());\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).right.longValue());\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        assertEquals(1, assertFileCounts(sstables.iterator().next().descriptor.directory.list()));\n\n        validateCFS(cfs);\n        truncate(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"}],"commitId":"a831b99f9123d1c2bdfd70761aca3a05446c9a4c","commitMessage":"@@@Refactor Pair usage to avoid boxing ints/longs\n\nPatch by Jeff Jirsa; Reviewed by Dinesh Joshi for CASSANDRA-14260\n","date":"2018-04-11 23:24:40","modifiedFileCount":"24","status":"M","submitter":"Jeff Jirsa"},{"authorTime":"2020-12-15 04:42:50","codes":[{"authorDate":"2020-12-15 04:42:50","commitOrder":24,"curCode":"    public void basicTest2()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, 10000000, false, true);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        assertEquals(1, assertFileCounts(sstables.iterator().next().descriptor.directory.list()));\n\n        validateCFS(cfs);\n    }\n","date":"2021-01-21 06:22:42","endLine":137,"groupId":"101984","id":43,"instanceNumber":1,"isCurCommit":1,"methodName":"basicTest2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/18/95653ccd0b34f97ab70c32bc8d83728b4ddc54.src","preCode":"    public void basicTest2() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                writer.append(ci.next());\n            }\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        assertEquals(1, assertFileCounts(sstables.iterator().next().descriptor.directory.list()));\n\n        validateCFS(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2020-12-15 04:42:50","commitOrder":24,"curCode":"    public void getPositionsTest()\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, 10000000, false, true);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<SSTableReader.PartitionPositionBounds> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<SSTableReader.PartitionPositionBounds> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).lowerPosition);\n                            \r\n                            assertEquals(tmplinkPositions.get(0).upperPosition, compactingPositions.get(0).lowerPosition);\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).upperPosition);\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        assertEquals(1, assertFileCounts(sstables.iterator().next().descriptor.directory.list()));\n\n        validateCFS(cfs);\n        truncate(cfs);\n    }\n","date":"2021-01-21 06:22:42","endLine":193,"groupId":"101984","id":44,"instanceNumber":2,"isCurCommit":1,"methodName":"getPositionsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/18/95653ccd0b34f97ab70c32bc8d83728b4ddc54.src","preCode":"    public void getPositionsTest() throws InterruptedException\n    {\n        Keyspace keyspace = Keyspace.open(KEYSPACE);\n        ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF);\n        truncate(cfs);\n\n        SSTableReader s = writeFile(cfs, 1000);\n        cfs.addSSTable(s);\n        Set<SSTableReader> sstables = new HashSet<>(cfs.getLiveSSTables());\n        assertEquals(1, sstables.size());\n\n        int nowInSec = FBUtilities.nowInSeconds();\n        boolean checked = false;\n        try (AbstractCompactionStrategy.ScannerList scanners = cfs.getCompactionStrategyManager().getScanners(sstables);\n             LifecycleTransaction txn = cfs.getTracker().tryModify(sstables, OperationType.UNKNOWN);\n             SSTableRewriter writer = new SSTableRewriter(txn, 1000, 10000000, false);\n             CompactionController controller = new CompactionController(cfs, sstables, cfs.gcBefore(nowInSec));\n             CompactionIterator ci = new CompactionIterator(OperationType.COMPACTION, scanners.scanners, controller, nowInSec, UUIDGen.getTimeUUID()))\n        {\n            writer.switchWriter(getWriter(cfs, sstables.iterator().next().descriptor.directory, txn));\n            while (ci.hasNext())\n            {\n                UnfilteredRowIterator row = ci.next();\n                writer.append(row);\n                if (!checked && writer.currentWriter().getFilePointer() > 1500000)\n                {\n                    checked = true;\n                    for (SSTableReader sstable : cfs.getLiveSSTables())\n                    {\n                        if (sstable.openReason == SSTableReader.OpenReason.EARLY)\n                        {\n                            SSTableReader c = txn.current(sstables.iterator().next());\n                            Collection<Range<Token>> r = Arrays.asList(new Range<>(cfs.getPartitioner().getMinimumToken(), cfs.getPartitioner().getMinimumToken()));\n                            List<SSTableReader.PartitionPositionBounds> tmplinkPositions = sstable.getPositionsForRanges(r);\n                            List<SSTableReader.PartitionPositionBounds> compactingPositions = c.getPositionsForRanges(r);\n                            assertEquals(1, tmplinkPositions.size());\n                            assertEquals(1, compactingPositions.size());\n                            assertEquals(0, tmplinkPositions.get(0).lowerPosition);\n                            \r\n                            assertEquals(tmplinkPositions.get(0).upperPosition, compactingPositions.get(0).lowerPosition);\n                            assertEquals(c.uncompressedLength(), compactingPositions.get(0).upperPosition);\n                        }\n                    }\n                }\n            }\n            assertTrue(checked);\n            writer.finish();\n        }\n        LifecycleTransaction.waitForDeletions();\n        assertEquals(1, assertFileCounts(sstables.iterator().next().descriptor.directory.list()));\n\n        validateCFS(cfs);\n        truncate(cfs);\n    }\n","realPath":"test/unit/org/apache/cassandra/io/sstable/SSTableRewriterTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"}],"commitId":"5e8f7f591dfec5a61d8eb2e9e977ec29f3a2bbe4","commitMessage":"@@@Release StreamingTombstoneHistogramBuilder spool when switching writers\n\n patch by Adam Holmberg; reviewed by Berenguer Blasi.  Mick Semb Wever for CASSANDRA-14834\n","date":"2021-01-21 06:22:42","modifiedFileCount":"10","status":"M","submitter":"Adam Holmberg"}]
