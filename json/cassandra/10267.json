[{"authorTime":"2015-09-02 15:51:29","codes":[{"authorDate":"2015-09-02 15:51:29","commitOrder":1,"curCode":"    public void testAddBatch() throws IOException\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        CFMetaData cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata;\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SystemKeyspace.NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(1L, result.one().getLong(\"count\"));\n    }\n","date":"2015-09-02 15:51:29","endLine":422,"groupId":"23244","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/df/b17c3de86c96d1f067d2466d78b8b04cdfe839.src","preCode":"    public void testAddBatch() throws IOException\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        CFMetaData cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata;\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SystemKeyspace.NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(1L, result.one().getLong(\"count\"));\n    }\n","realPath":"test/unit/org/apache/cassandra/batchlog/BatchlogManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":393,"status":"B"},{"authorDate":"2015-09-02 15:51:29","commitOrder":1,"curCode":"    public void testRemoveBatch()\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        CFMetaData cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata;\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n        \r\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        \r\n        BatchlogManager.remove(uuid);\n\n        assertEquals(initialAllBatches, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SystemKeyspace.NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(0L, result.one().getLong(\"count\"));\n    }\n","date":"2015-09-02 15:51:29","endLine":459,"groupId":"23244","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/df/b17c3de86c96d1f067d2466d78b8b04cdfe839.src","preCode":"    public void testRemoveBatch()\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        CFMetaData cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata;\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n        \r\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        \r\n        BatchlogManager.remove(uuid);\n\n        assertEquals(initialAllBatches, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SystemKeyspace.NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(0L, result.one().getLong(\"count\"));\n    }\n","realPath":"test/unit/org/apache/cassandra/batchlog/BatchlogManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"B"}],"commitId":"79628dd7076c125c9b434e90689057cdf08bb87b","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-09-02 15:51:29","modifiedFileCount":"22","status":"B","submitter":"Aleksey Yeschenko"},{"authorTime":"2016-08-18 09:44:03","codes":[{"authorDate":"2016-08-18 09:44:03","commitOrder":2,"curCode":"    public void testAddBatch() throws IOException\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        CFMetaData cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata;\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SchemaConstants.SYSTEM_KEYSPACE_NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(1L, result.one().getLong(\"count\"));\n    }\n","date":"2016-08-18 09:44:03","endLine":425,"groupId":"23244","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/f1/92bcfed073aff7cc377a51b5f34f11ce3a0378.src","preCode":"    public void testAddBatch() throws IOException\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        CFMetaData cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata;\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SystemKeyspace.NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(1L, result.one().getLong(\"count\"));\n    }\n","realPath":"test/unit/org/apache/cassandra/batchlog/BatchlogManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"},{"authorDate":"2016-08-18 09:44:03","commitOrder":2,"curCode":"    public void testRemoveBatch()\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        CFMetaData cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata;\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n        \r\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        \r\n        BatchlogManager.remove(uuid);\n\n        assertEquals(initialAllBatches, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SchemaConstants.SYSTEM_KEYSPACE_NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(0L, result.one().getLong(\"count\"));\n    }\n","date":"2016-08-18 09:44:03","endLine":462,"groupId":"23244","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/f1/92bcfed073aff7cc377a51b5f34f11ce3a0378.src","preCode":"    public void testRemoveBatch()\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        CFMetaData cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata;\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n        \r\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        \r\n        BatchlogManager.remove(uuid);\n\n        assertEquals(initialAllBatches, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SystemKeyspace.NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(0L, result.one().getLong(\"count\"));\n    }\n","realPath":"test/unit/org/apache/cassandra/batchlog/BatchlogManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":428,"status":"M"}],"commitId":"9797511c56df4e9c7db964a6b83e67642df96c2d","commitMessage":"@@@Let DatabaseDescriptor not implicitly startup services\n\npatch by Robert Stupp; reviewed by Blake Eggleston for CASSANDRA-9054\n","date":"2016-08-18 09:44:03","modifiedFileCount":"185","status":"M","submitter":"Robert Stupp"},{"authorTime":"2016-11-10 09:16:59","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":3,"curCode":"    public void testAddBatch() throws IOException\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        TableMetadata cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata();\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SchemaConstants.SYSTEM_KEYSPACE_NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(1L, result.one().getLong(\"count\"));\n    }\n","date":"2017-01-28 06:17:46","endLine":304,"groupId":"23244","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/34/902fe131ed2648d81956159999ab5d8b6e5a39.src","preCode":"    public void testAddBatch() throws IOException\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        CFMetaData cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata;\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SchemaConstants.SYSTEM_KEYSPACE_NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(1L, result.one().getLong(\"count\"));\n    }\n","realPath":"test/unit/org/apache/cassandra/batchlog/BatchlogManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"},{"authorDate":"2016-11-10 09:16:59","commitOrder":3,"curCode":"    public void testRemoveBatch()\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        TableMetadata cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata();\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n        \r\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        \r\n        BatchlogManager.remove(uuid);\n\n        assertEquals(initialAllBatches, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SchemaConstants.SYSTEM_KEYSPACE_NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(0L, result.one().getLong(\"count\"));\n    }\n","date":"2017-01-28 06:17:46","endLine":341,"groupId":"23244","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/34/902fe131ed2648d81956159999ab5d8b6e5a39.src","preCode":"    public void testRemoveBatch()\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        CFMetaData cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata;\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n        \r\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        \r\n        BatchlogManager.remove(uuid);\n\n        assertEquals(initialAllBatches, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SchemaConstants.SYSTEM_KEYSPACE_NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(0L, result.one().getLong(\"count\"));\n    }\n","realPath":"test/unit/org/apache/cassandra/batchlog/BatchlogManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"af3fe39dcabd9ef77a00309ce6741268423206df","commitMessage":"@@@Make TableMetadata immutable.  optimize Schema\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-9425\n","date":"2017-01-28 06:17:46","modifiedFileCount":"511","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2019-06-12 23:26:54","codes":[{"authorDate":"2019-06-12 23:26:54","commitOrder":4,"curCode":"    public void testAddBatch() throws IOException\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        TableMetadata cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata();\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout(MILLISECONDS) * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SchemaConstants.SYSTEM_KEYSPACE_NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(1L, result.one().getLong(\"count\"));\n    }\n","date":"2019-06-12 23:26:54","endLine":305,"groupId":"23244","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/36/1759f11b9ad84eaad2139b7929de1d1b0ae3ef.src","preCode":"    public void testAddBatch() throws IOException\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        TableMetadata cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata();\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SchemaConstants.SYSTEM_KEYSPACE_NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(1L, result.one().getLong(\"count\"));\n    }\n","realPath":"test/unit/org/apache/cassandra/batchlog/BatchlogManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"},{"authorDate":"2019-06-12 23:26:54","commitOrder":4,"curCode":"    public void testRemoveBatch()\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        TableMetadata cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata();\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout(MILLISECONDS) * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n        \r\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        \r\n        BatchlogManager.remove(uuid);\n\n        assertEquals(initialAllBatches, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SchemaConstants.SYSTEM_KEYSPACE_NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(0L, result.one().getLong(\"count\"));\n    }\n","date":"2019-06-12 23:26:54","endLine":342,"groupId":"23244","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/36/1759f11b9ad84eaad2139b7929de1d1b0ae3ef.src","preCode":"    public void testRemoveBatch()\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        TableMetadata cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata();\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout() * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n        \r\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        \r\n        BatchlogManager.remove(uuid);\n\n        assertEquals(initialAllBatches, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SchemaConstants.SYSTEM_KEYSPACE_NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(0L, result.one().getLong(\"count\"));\n    }\n","realPath":"test/unit/org/apache/cassandra/batchlog/BatchlogManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"}],"commitId":"310a48efcfdc0fb77fbd5fd6e734bf17667f617d","commitMessage":"@@@Rewrite the internode messaging subsystem\n\npatch by Aleksey Yeschenko and Benedict Elliott Smith; reviewed by Alex\nPetrov.  Aleksey Yeschenko.  and Benedict Elliott Smith for CASSANDRA-15066\n\nCo-authored-by: Aleksey Yeschenko <aleksey@apache.org>\nCo-authored-by: Benedict Elliott Smith <benedict@apache.org>\n","date":"2019-06-12 23:26:54","modifiedFileCount":"253","status":"M","submitter":"Benedict Elliott Smith"},{"authorTime":"2019-06-12 23:26:54","codes":[{"authorDate":"2021-03-09 01:08:36","commitOrder":5,"curCode":"    public void testAddBatch()\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        TableMetadata cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata();\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout(MILLISECONDS) * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SchemaConstants.SYSTEM_KEYSPACE_NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(1L, result.one().getLong(\"count\"));\n    }\n","date":"2021-03-09 01:08:36","endLine":302,"groupId":"10267","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testAddBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b8/6b0d34dfa6b307f5b57b969c925acf030c133b.src","preCode":"    public void testAddBatch() throws IOException\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        TableMetadata cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata();\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout(MILLISECONDS) * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SchemaConstants.SYSTEM_KEYSPACE_NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(1L, result.one().getLong(\"count\"));\n    }\n","realPath":"test/unit/org/apache/cassandra/batchlog/BatchlogManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"},{"authorDate":"2019-06-12 23:26:54","commitOrder":5,"curCode":"    public void testRemoveBatch()\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        TableMetadata cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata();\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout(MILLISECONDS) * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n        \r\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        \r\n        BatchlogManager.remove(uuid);\n\n        assertEquals(initialAllBatches, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SchemaConstants.SYSTEM_KEYSPACE_NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(0L, result.one().getLong(\"count\"));\n    }\n","date":"2019-06-12 23:26:54","endLine":342,"groupId":"10267","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/36/1759f11b9ad84eaad2139b7929de1d1b0ae3ef.src","preCode":"    public void testRemoveBatch()\n    {\n        long initialAllBatches = BatchlogManager.instance.countAllBatches();\n        TableMetadata cfm = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD5).metadata();\n\n        long timestamp = (System.currentTimeMillis() - DatabaseDescriptor.getWriteRpcTimeout(MILLISECONDS) * 2) * 1000;\n        UUID uuid = UUIDGen.getTimeUUID();\n\n        \r\n        List<Mutation> mutations = new ArrayList<>(10);\n        for (int j = 0; j < 10; j++)\n        {\n            mutations.add(new RowUpdateBuilder(cfm, FBUtilities.timestampMicros(), ByteBufferUtil.bytes(j))\n                          .clustering(\"name\" + j)\n                          .add(\"val\", \"val\" + j)\n                          .build());\n        }\n\n        \r\n        BatchlogManager.store(Batch.createLocal(uuid, timestamp, mutations));\n        Assert.assertEquals(initialAllBatches + 1, BatchlogManager.instance.countAllBatches());\n\n        \r\n        BatchlogManager.remove(uuid);\n\n        assertEquals(initialAllBatches, BatchlogManager.instance.countAllBatches());\n\n        String query = String.format(\"SELECT count(*) FROM %s.%s where id = %s\",\n                                     SchemaConstants.SYSTEM_KEYSPACE_NAME,\n                                     SystemKeyspace.BATCHES,\n                                     uuid);\n        UntypedResultSet result = executeInternal(query);\n        assertNotNull(result);\n        assertEquals(0L, result.one().getLong(\"count\"));\n    }\n","realPath":"test/unit/org/apache/cassandra/batchlog/BatchlogManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"N"}],"commitId":"953c18df33ab3e009ced15a16785e2753843418a","commitMessage":"@@@Improve replication tests\n\npatch by Caleb Rackliffe; reviewed by Andr?s de la Pe?a and Ekaterina Dimitrova for CASSANDRA-16181\n","date":"2021-03-09 01:08:36","modifiedFileCount":"24","status":"M","submitter":"Caleb Rackliffe"}]
