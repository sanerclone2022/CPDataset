[{"authorTime":"2016-04-16 03:04:25","codes":[{"authorDate":"2016-04-16 03:04:25","commitOrder":1,"curCode":"    public void testBoundsAsClusteringWithNoRestrictions()\n    {\n        CFMetaData cfMetaData = newCFMetaData(Sort.ASC);\n\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(cfMetaData);\n\n        SortedSet<Slice.Bound> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n    }\n","date":"2016-04-16 03:13:52","endLine":58,"groupId":"4240","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBoundsAsClusteringWithNoRestrictions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5c/816da7a019d3592b0d2064b43ba9c4b987c4a1.src","preCode":"    public void testBoundsAsClusteringWithNoRestrictions()\n    {\n        CFMetaData cfMetaData = newCFMetaData(Sort.ASC);\n\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(cfMetaData);\n\n        SortedSet<Slice.Bound> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/restrictions/ClusteringColumnRestrictionsTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"},{"authorDate":"2016-04-16 03:04:25","commitOrder":1,"curCode":"    public void testBoundsAsClusteringWithSliceRestrictionsAndOneDescendingClusteringColumn()\n    {\n        CFMetaData cfMetaData = newCFMetaData(Sort.DESC, Sort.DESC);\n\n        ByteBuffer value1 = ByteBufferUtil.bytes(1);\n        ByteBuffer value2 = ByteBufferUtil.bytes(2);\n\n        Restriction slice = newSingleSlice(cfMetaData, 0, Bound.START, false, value1);\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        SortedSet<Slice.Bound> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, true, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.END, true, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.END, false, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, false, value1);\n        Restriction slice2 = newSingleSlice(cfMetaData, 0, Bound.END, false, value2);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, true, value1);\n        slice2 = newSingleSlice(cfMetaData, 0, Bound.END, true, value2);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n    }\n","date":"2016-04-16 03:13:52","endLine":306,"groupId":"4240","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBoundsAsClusteringWithSliceRestrictionsAndOneDescendingClusteringColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5c/816da7a019d3592b0d2064b43ba9c4b987c4a1.src","preCode":"    public void testBoundsAsClusteringWithSliceRestrictionsAndOneDescendingClusteringColumn()\n    {\n        CFMetaData cfMetaData = newCFMetaData(Sort.DESC, Sort.DESC);\n\n        ByteBuffer value1 = ByteBufferUtil.bytes(1);\n        ByteBuffer value2 = ByteBufferUtil.bytes(2);\n\n        Restriction slice = newSingleSlice(cfMetaData, 0, Bound.START, false, value1);\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        SortedSet<Slice.Bound> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, true, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.END, true, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.END, false, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, false, value1);\n        Restriction slice2 = newSingleSlice(cfMetaData, 0, Bound.END, false, value2);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, true, value1);\n        slice2 = newSingleSlice(cfMetaData, 0, Bound.END, true, value2);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/restrictions/ClusteringColumnRestrictionsTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"B"}],"commitId":"831bebdba86ac1956852bd216a4cc62d898c87d7","commitMessage":"@@@Refactor Restriction hierarchy\n\npatch by Benjamin Lerer; reviewed by Tyler Hobbs for CASSANDRA-11354\n","date":"2016-04-16 03:13:52","modifiedFileCount":"9","status":"B","submitter":"Benjamin Lerer"},{"authorTime":"2016-04-06 16:47:23","codes":[{"authorDate":"2016-04-06 16:47:23","commitOrder":2,"curCode":"    public void testBoundsAsClusteringWithNoRestrictions()\n    {\n        CFMetaData cfMetaData = newCFMetaData(Sort.ASC);\n\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(cfMetaData);\n\n        SortedSet<ClusteringBound> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n    }\n","date":"2016-04-28 20:32:36","endLine":58,"groupId":"4240","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBoundsAsClusteringWithNoRestrictions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/f7/8967d2c940910c7621bfc35696e06834f30e8c.src","preCode":"    public void testBoundsAsClusteringWithNoRestrictions()\n    {\n        CFMetaData cfMetaData = newCFMetaData(Sort.ASC);\n\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(cfMetaData);\n\n        SortedSet<Slice.Bound> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/restrictions/ClusteringColumnRestrictionsTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2016-04-06 16:47:23","commitOrder":2,"curCode":"    public void testBoundsAsClusteringWithSliceRestrictionsAndOneDescendingClusteringColumn()\n    {\n        CFMetaData cfMetaData = newCFMetaData(Sort.DESC, Sort.DESC);\n\n        ByteBuffer value1 = ByteBufferUtil.bytes(1);\n        ByteBuffer value2 = ByteBufferUtil.bytes(2);\n\n        Restriction slice = newSingleSlice(cfMetaData, 0, Bound.START, false, value1);\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        SortedSet<ClusteringBound> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, true, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.END, true, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.END, false, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, false, value1);\n        Restriction slice2 = newSingleSlice(cfMetaData, 0, Bound.END, false, value2);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, true, value1);\n        slice2 = newSingleSlice(cfMetaData, 0, Bound.END, true, value2);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n    }\n","date":"2016-04-28 20:32:36","endLine":306,"groupId":"4240","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBoundsAsClusteringWithSliceRestrictionsAndOneDescendingClusteringColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/f7/8967d2c940910c7621bfc35696e06834f30e8c.src","preCode":"    public void testBoundsAsClusteringWithSliceRestrictionsAndOneDescendingClusteringColumn()\n    {\n        CFMetaData cfMetaData = newCFMetaData(Sort.DESC, Sort.DESC);\n\n        ByteBuffer value1 = ByteBufferUtil.bytes(1);\n        ByteBuffer value2 = ByteBufferUtil.bytes(2);\n\n        Restriction slice = newSingleSlice(cfMetaData, 0, Bound.START, false, value1);\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        SortedSet<Slice.Bound> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, true, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.END, true, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.END, false, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, false, value1);\n        Restriction slice2 = newSingleSlice(cfMetaData, 0, Bound.END, false, value2);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, true, value1);\n        slice2 = newSingleSlice(cfMetaData, 0, Bound.END, true, value2);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/restrictions/ClusteringColumnRestrictionsTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"}],"commitId":"2cc26eba7a742eb23e95b027bc611c924c233e1e","commitMessage":"@@@Clarify ClusteringPrefix hierarchy\n\nPatch by Branimir Lambov; reviewed by Sylvain Lebresne for CASSANDRA-11213\n","date":"2016-04-28 20:32:36","modifiedFileCount":"43","status":"M","submitter":"Branimir Lambov"},{"authorTime":"2016-11-10 09:16:59","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":3,"curCode":"    public void testBoundsAsClusteringWithNoRestrictions()\n    {\n        TableMetadata tableMetadata = newTableMetadata(Sort.ASC);\n\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(tableMetadata);\n\n        SortedSet<ClusteringBound> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n    }\n","date":"2017-01-28 06:17:46","endLine":66,"groupId":"4240","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBoundsAsClusteringWithNoRestrictions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/35/adff3742bf66bcd0a364155da83498558052df.src","preCode":"    public void testBoundsAsClusteringWithNoRestrictions()\n    {\n        CFMetaData cfMetaData = newCFMetaData(Sort.ASC);\n\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(cfMetaData);\n\n        SortedSet<ClusteringBound> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/restrictions/ClusteringColumnRestrictionsTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2016-11-10 09:16:59","commitOrder":3,"curCode":"    public void testBoundsAsClusteringWithSliceRestrictionsAndOneDescendingClusteringColumn()\n    {\n        TableMetadata tableMetadata = newTableMetadata(Sort.DESC, Sort.DESC);\n\n        ByteBuffer value1 = ByteBufferUtil.bytes(1);\n        ByteBuffer value2 = ByteBufferUtil.bytes(2);\n\n        Restriction slice = newSingleSlice(tableMetadata, 0, Bound.START, false, value1);\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice);\n\n        SortedSet<ClusteringBound> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.START, true, value1);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.END, true, value1);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.END, false, value1);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.START, false, value1);\n        Restriction slice2 = newSingleSlice(tableMetadata, 0, Bound.END, false, value2);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.START, true, value1);\n        slice2 = newSingleSlice(tableMetadata, 0, Bound.END, true, value2);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n    }\n","date":"2017-01-28 06:17:46","endLine":314,"groupId":"4240","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBoundsAsClusteringWithSliceRestrictionsAndOneDescendingClusteringColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/35/adff3742bf66bcd0a364155da83498558052df.src","preCode":"    public void testBoundsAsClusteringWithSliceRestrictionsAndOneDescendingClusteringColumn()\n    {\n        CFMetaData cfMetaData = newCFMetaData(Sort.DESC, Sort.DESC);\n\n        ByteBuffer value1 = ByteBufferUtil.bytes(1);\n        ByteBuffer value2 = ByteBufferUtil.bytes(2);\n\n        Restriction slice = newSingleSlice(cfMetaData, 0, Bound.START, false, value1);\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        SortedSet<ClusteringBound> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, true, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.END, true, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.END, false, value1);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, false, value1);\n        Restriction slice2 = newSingleSlice(cfMetaData, 0, Bound.END, false, value2);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(cfMetaData, 0, Bound.START, true, value1);\n        slice2 = newSingleSlice(cfMetaData, 0, Bound.END, true, value2);\n        restrictions = new ClusteringColumnRestrictions(cfMetaData);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/restrictions/ClusteringColumnRestrictionsTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"}],"commitId":"af3fe39dcabd9ef77a00309ce6741268423206df","commitMessage":"@@@Make TableMetadata immutable.  optimize Schema\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-9425\n","date":"2017-01-28 06:17:46","modifiedFileCount":"511","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2019-10-16 04:04:26","codes":[{"authorDate":"2019-10-16 04:04:26","commitOrder":4,"curCode":"    public void testBoundsAsClusteringWithNoRestrictions()\n    {\n        TableMetadata tableMetadata = newTableMetadata(Sort.ASC);\n\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(tableMetadata);\n\n        SortedSet<ClusteringBound<?>> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n    }\n","date":"2020-09-14 23:32:44","endLine":66,"groupId":"101523","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testBoundsAsClusteringWithNoRestrictions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/02/9729fe78de1db8713165251673878c080fe83b.src","preCode":"    public void testBoundsAsClusteringWithNoRestrictions()\n    {\n        TableMetadata tableMetadata = newTableMetadata(Sort.ASC);\n\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(tableMetadata);\n\n        SortedSet<ClusteringBound> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/restrictions/ClusteringColumnRestrictionsTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2019-10-16 04:04:26","commitOrder":4,"curCode":"    public void testBoundsAsClusteringWithSliceRestrictionsAndOneDescendingClusteringColumn()\n    {\n        TableMetadata tableMetadata = newTableMetadata(Sort.DESC, Sort.DESC);\n\n        ByteBuffer value1 = ByteBufferUtil.bytes(1);\n        ByteBuffer value2 = ByteBufferUtil.bytes(2);\n\n        Restriction slice = newSingleSlice(tableMetadata, 0, Bound.START, false, value1);\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice);\n\n        SortedSet<ClusteringBound<?>> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.START, true, value1);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.END, true, value1);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.END, false, value1);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.START, false, value1);\n        Restriction slice2 = newSingleSlice(tableMetadata, 0, Bound.END, false, value2);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.START, true, value1);\n        slice2 = newSingleSlice(tableMetadata, 0, Bound.END, true, value2);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n    }\n","date":"2020-09-14 23:32:44","endLine":314,"groupId":"101523","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testBoundsAsClusteringWithSliceRestrictionsAndOneDescendingClusteringColumn","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/02/9729fe78de1db8713165251673878c080fe83b.src","preCode":"    public void testBoundsAsClusteringWithSliceRestrictionsAndOneDescendingClusteringColumn()\n    {\n        TableMetadata tableMetadata = newTableMetadata(Sort.DESC, Sort.DESC);\n\n        ByteBuffer value1 = ByteBufferUtil.bytes(1);\n        ByteBuffer value2 = ByteBufferUtil.bytes(2);\n\n        Restriction slice = newSingleSlice(tableMetadata, 0, Bound.START, false, value1);\n        ClusteringColumnRestrictions restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice);\n\n        SortedSet<ClusteringBound> bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.START, true, value1);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyStart(get(bounds, 0));\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.END, true, value1);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.END, false, value1);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value1);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEmptyEnd(get(bounds, 0));\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.START, false, value1);\n        Restriction slice2 = newSingleSlice(tableMetadata, 0, Bound.END, false, value2);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), false, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), false, value1);\n\n        slice = newSingleSlice(tableMetadata, 0, Bound.START, true, value1);\n        slice2 = newSingleSlice(tableMetadata, 0, Bound.END, true, value2);\n        restrictions = new ClusteringColumnRestrictions(tableMetadata);\n        restrictions = restrictions.mergeWith(slice).mergeWith(slice2);\n\n        bounds = restrictions.boundsAsClustering(Bound.START, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertStartBound(get(bounds, 0), true, value2);\n\n        bounds = restrictions.boundsAsClustering(Bound.END, QueryOptions.DEFAULT);\n        assertEquals(1, bounds.size());\n        assertEndBound(get(bounds, 0), true, value1);\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/restrictions/ClusteringColumnRestrictionsTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"}],"commitId":"ccab496d2d37c86341d364dea6c27513fda27331","commitMessage":"@@@Add byte array backed cells\n\nPatch by Blake Eggleston; reviewed by Caleb Rackliffe and Marcus Eriksson for CASSANDRA-15393\n","date":"2020-09-14 23:32:44","modifiedFileCount":"278","status":"M","submitter":"Blake Eggleston"}]
