[{"authorTime":"2015-09-17 04:00:57","codes":[{"authorDate":"2015-09-17 04:00:57","commitOrder":2,"curCode":"    public void test2iKeyCachePaths() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        int beforeSize = CacheService.instance.keyCache.size();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(beforeSize, CacheService.instance.keyCache.size());\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        \r\n        \r\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(\"foo\", \"bar\")));\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(KEYSPACE, \"bar\")));\n\n        dropTable(\"DROP TABLE %s\");\n\n        \r\n        CacheService.instance.keyCache.clear();\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(0, CacheService.instance.keyCache.size());\n    }\n","date":"2015-09-17 04:00:57","endLine":239,"groupId":"3603","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"test2iKeyCachePaths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/86/1e84028bb302b6e622521fdc7ec48bb7de0450.src","preCode":"    public void test2iKeyCachePaths() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        int beforeSize = CacheService.instance.keyCache.size();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(beforeSize, CacheService.instance.keyCache.size());\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        \r\n        \r\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(\"foo\", \"bar\")));\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(KEYSPACE, \"bar\")));\n\n        dropTable(\"DROP TABLE %s\");\n\n        \r\n        CacheService.instance.keyCache.clear();\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(0, CacheService.instance.keyCache.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/KeyCacheCqlTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"MB"},{"authorDate":"2015-09-17 04:00:57","commitOrder":2,"curCode":"    public void test2iKeyCachePathsSaveKeysForDroppedTable() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        \r\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        dropTable(\"DROP TABLE %s\");\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n        while(iter.hasNext())\n        {\n            KeyCacheKey key = iter.next();\n            Assert.assertFalse(key.ksAndCFName.left.equals(\"KEYSPACE\"));\n            Assert.assertFalse(key.ksAndCFName.right.startsWith(table));\n        }\n    }\n","date":"2015-09-17 04:00:57","endLine":299,"groupId":"15104","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"test2iKeyCachePathsSaveKeysForDroppedTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/86/1e84028bb302b6e622521fdc7ec48bb7de0450.src","preCode":"    public void test2iKeyCachePathsSaveKeysForDroppedTable() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        \r\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        dropTable(\"DROP TABLE %s\");\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n        while(iter.hasNext())\n        {\n            KeyCacheKey key = iter.next();\n            Assert.assertFalse(key.ksAndCFName.left.equals(\"KEYSPACE\"));\n            Assert.assertFalse(key.ksAndCFName.right.startsWith(table));\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/KeyCacheCqlTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"B"}],"commitId":"10b11835ac01d769a70c408a92eacca00d06ce47","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-09-17 04:00:57","modifiedFileCount":"25","status":"M","submitter":"Robert Stupp"},{"authorTime":"2015-09-17 04:00:57","codes":[{"authorDate":"2015-09-18 05:24:20","commitOrder":3,"curCode":"    public void test2iKeyCachePaths() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        int beforeSize = CacheService.instance.keyCache.size();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(beforeSize, CacheService.instance.keyCache.size());\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        \r\n        \r\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(\"foo\", \"bar\")));\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(KEYSPACE, \"bar\")));\n\n        dropTable(\"DROP TABLE %s\");\n        Schema.instance.updateVersion();\n\n        \r\n        CacheService.instance.keyCache.clear();\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(0, CacheService.instance.keyCache.size());\n    }\n","date":"2015-09-18 05:24:20","endLine":240,"groupId":"3603","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"test2iKeyCachePaths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/54/d39b106654cbad1803379eb904a4338bf8d6e0.src","preCode":"    public void test2iKeyCachePaths() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        int beforeSize = CacheService.instance.keyCache.size();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(beforeSize, CacheService.instance.keyCache.size());\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        \r\n        \r\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(\"foo\", \"bar\")));\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(KEYSPACE, \"bar\")));\n\n        dropTable(\"DROP TABLE %s\");\n\n        \r\n        CacheService.instance.keyCache.clear();\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(0, CacheService.instance.keyCache.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/KeyCacheCqlTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2015-09-17 04:00:57","commitOrder":3,"curCode":"    public void test2iKeyCachePathsSaveKeysForDroppedTable() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        \r\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        dropTable(\"DROP TABLE %s\");\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n        while(iter.hasNext())\n        {\n            KeyCacheKey key = iter.next();\n            Assert.assertFalse(key.ksAndCFName.left.equals(\"KEYSPACE\"));\n            Assert.assertFalse(key.ksAndCFName.right.startsWith(table));\n        }\n    }\n","date":"2015-09-17 04:00:57","endLine":299,"groupId":"15104","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"test2iKeyCachePathsSaveKeysForDroppedTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/86/1e84028bb302b6e622521fdc7ec48bb7de0450.src","preCode":"    public void test2iKeyCachePathsSaveKeysForDroppedTable() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        \r\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        dropTable(\"DROP TABLE %s\");\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n        while(iter.hasNext())\n        {\n            KeyCacheKey key = iter.next();\n            Assert.assertFalse(key.ksAndCFName.left.equals(\"KEYSPACE\"));\n            Assert.assertFalse(key.ksAndCFName.right.startsWith(table));\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/KeyCacheCqlTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"N"}],"commitId":"e75ebc4f6b92013f92d93abb56d1c1325d4f2c15","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-09-18 05:24:20","modifiedFileCount":"2","status":"M","submitter":"Robert Stupp"},{"authorTime":"2016-04-21 22:48:26","codes":[{"authorDate":"2016-04-21 22:48:26","commitOrder":4,"curCode":"    private void test2iKeyCachePaths() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        int beforeSize = CacheService.instance.keyCache.size();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(beforeSize, CacheService.instance.keyCache.size());\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        \r\n        \r\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(\"foo\", \"bar\")));\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(KEYSPACE, \"bar\")));\n\n        dropTable(\"DROP TABLE %s\");\n        Schema.instance.updateVersion();\n\n        \r\n        CacheService.instance.keyCache.clear();\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(0, CacheService.instance.keyCache.size());\n    }\n","date":"2016-04-21 22:48:26","endLine":269,"groupId":"3603","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"test2iKeyCachePaths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/21/a17faa0cefb2bbb0c1691f4e81ce5388410c1f.src","preCode":"    public void test2iKeyCachePaths() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        int beforeSize = CacheService.instance.keyCache.size();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(beforeSize, CacheService.instance.keyCache.size());\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        \r\n        \r\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(\"foo\", \"bar\")));\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(KEYSPACE, \"bar\")));\n\n        dropTable(\"DROP TABLE %s\");\n        Schema.instance.updateVersion();\n\n        \r\n        CacheService.instance.keyCache.clear();\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(0, CacheService.instance.keyCache.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/KeyCacheCqlTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"},{"authorDate":"2016-04-21 22:48:26","commitOrder":4,"curCode":"    private void test2iKeyCachePathsSaveKeysForDroppedTable() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        \r\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        dropTable(\"DROP TABLE %s\");\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n        while(iter.hasNext())\n        {\n            KeyCacheKey key = iter.next();\n            Assert.assertFalse(key.ksAndCFName.left.equals(\"KEYSPACE\"));\n            Assert.assertFalse(key.ksAndCFName.right.startsWith(table));\n        }\n    }\n","date":"2016-04-21 22:48:26","endLine":342,"groupId":"15104","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"test2iKeyCachePathsSaveKeysForDroppedTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/21/a17faa0cefb2bbb0c1691f4e81ce5388410c1f.src","preCode":"    public void test2iKeyCachePathsSaveKeysForDroppedTable() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        \r\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        dropTable(\"DROP TABLE %s\");\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n        while(iter.hasNext())\n        {\n            KeyCacheKey key = iter.next();\n            Assert.assertFalse(key.ksAndCFName.left.equals(\"KEYSPACE\"));\n            Assert.assertFalse(key.ksAndCFName.right.startsWith(table));\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/KeyCacheCqlTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":285,"status":"M"}],"commitId":"ef5bbedd687d75923e9a20fde9d2f78b4535241d","commitMessage":"@@@Support large partitions on the 3.0 sstable format\n\npatch by Robert Stupp; reviewed by T Jake Luciani for CASSANDRA-11206\n","date":"2016-04-21 22:48:26","modifiedFileCount":"31","status":"M","submitter":"Robert Stupp"},{"authorTime":"2016-10-25 09:57:48","codes":[{"authorDate":"2016-10-25 09:57:48","commitOrder":5,"curCode":"    private void test2iKeyCachePaths() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        int beforeSize = CacheService.instance.keyCache.size();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(beforeSize, CacheService.instance.keyCache.size());\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        \r\n        \r\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(\"foo\", \"bar\")));\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(KEYSPACE_PER_TEST, \"bar\")));\n\n        dropTable(\"DROP TABLE %s\");\n        Schema.instance.updateVersion();\n\n        \r\n        CacheService.instance.keyCache.clear();\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(0, CacheService.instance.keyCache.size());\n    }\n","date":"2016-10-25 09:57:48","endLine":319,"groupId":"3603","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"test2iKeyCachePaths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/32/e6aece9bd4360f46c3109a42b28c51e1ae70ef.src","preCode":"    private void test2iKeyCachePaths() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        int beforeSize = CacheService.instance.keyCache.size();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(beforeSize, CacheService.instance.keyCache.size());\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        \r\n        \r\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(\"foo\", \"bar\")));\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(KEYSPACE, \"bar\")));\n\n        dropTable(\"DROP TABLE %s\");\n        Schema.instance.updateVersion();\n\n        \r\n        CacheService.instance.keyCache.clear();\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(0, CacheService.instance.keyCache.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/KeyCacheCqlTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2016-10-25 09:57:48","commitOrder":5,"curCode":"    private void test2iKeyCachePathsSaveKeysForDroppedTable() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        \r\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        dropTable(\"DROP TABLE %s\");\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n        while(iter.hasNext())\n        {\n            KeyCacheKey key = iter.next();\n            Assert.assertFalse(key.ksAndCFName.left.equals(\"KEYSPACE_PER_TEST\"));\n            Assert.assertFalse(key.ksAndCFName.right.startsWith(table));\n        }\n    }\n","date":"2016-10-25 09:57:48","endLine":392,"groupId":"15104","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"test2iKeyCachePathsSaveKeysForDroppedTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/32/e6aece9bd4360f46c3109a42b28c51e1ae70ef.src","preCode":"    private void test2iKeyCachePathsSaveKeysForDroppedTable() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        \r\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        dropTable(\"DROP TABLE %s\");\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n        while(iter.hasNext())\n        {\n            KeyCacheKey key = iter.next();\n            Assert.assertFalse(key.ksAndCFName.left.equals(\"KEYSPACE\"));\n            Assert.assertFalse(key.ksAndCFName.right.startsWith(table));\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/KeyCacheCqlTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"}],"commitId":"b921ddf2fc44bc446f932195c433d87ea7179983","commitMessage":"@@@Merge branch 'cassandra-3.X' into trunk\n","date":"2016-10-25 09:57:48","modifiedFileCount":"3","status":"M","submitter":"Stefania Alborghetti"},{"authorTime":"2016-11-10 09:16:59","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":6,"curCode":"    private void test2iKeyCachePaths() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        int beforeSize = CacheService.instance.keyCache.size();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(beforeSize, CacheService.instance.keyCache.size());\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        dropTable(\"DROP TABLE %s\");\n        Schema.instance.updateVersion();\n\n        \r\n        CacheService.instance.keyCache.clear();\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(0, CacheService.instance.keyCache.size());\n    }\n","date":"2017-01-28 06:17:46","endLine":314,"groupId":"3603","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"test2iKeyCachePaths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/40/8d48962128e2b36d0d23a27408316a083c27a0.src","preCode":"    private void test2iKeyCachePaths() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        int beforeSize = CacheService.instance.keyCache.size();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(beforeSize, CacheService.instance.keyCache.size());\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        \r\n        \r\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(\"foo\", \"bar\")));\n        assertNull(Schema.instance.getColumnFamilyStoreIncludingIndexes(Pair.create(KEYSPACE_PER_TEST, \"bar\")));\n\n        dropTable(\"DROP TABLE %s\");\n        Schema.instance.updateVersion();\n\n        \r\n        CacheService.instance.keyCache.clear();\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(0, CacheService.instance.keyCache.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/KeyCacheCqlTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2016-11-10 09:16:59","commitOrder":6,"curCode":"    private void test2iKeyCachePathsSaveKeysForDroppedTable() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        \r\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        dropTable(\"DROP TABLE %s\");\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n        while(iter.hasNext())\n        {\n            KeyCacheKey key = iter.next();\n            TableMetadataRef tableMetadataRef = Schema.instance.getTableMetadataRef(key.tableId);\n            Assert.assertFalse(tableMetadataRef.keyspace.equals(\"KEYSPACE_PER_TEST\"));\n            Assert.assertFalse(tableMetadataRef.name.startsWith(table));\n        }\n    }\n","date":"2017-01-28 06:17:46","endLine":388,"groupId":"15104","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"test2iKeyCachePathsSaveKeysForDroppedTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/40/8d48962128e2b36d0d23a27408316a083c27a0.src","preCode":"    private void test2iKeyCachePathsSaveKeysForDroppedTable() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        \r\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        dropTable(\"DROP TABLE %s\");\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n        while(iter.hasNext())\n        {\n            KeyCacheKey key = iter.next();\n            Assert.assertFalse(key.ksAndCFName.left.equals(\"KEYSPACE_PER_TEST\"));\n            Assert.assertFalse(key.ksAndCFName.right.startsWith(table));\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/KeyCacheCqlTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"}],"commitId":"af3fe39dcabd9ef77a00309ce6741268423206df","commitMessage":"@@@Make TableMetadata immutable.  optimize Schema\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-9425\n","date":"2017-01-28 06:17:46","modifiedFileCount":"511","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2017-05-08 21:54:01","codes":[{"authorDate":"2017-05-08 21:54:01","commitOrder":7,"curCode":"    private void test2iKeyCachePaths() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (col_int)\");\n        insertData(table, indexName, true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        int beforeSize = CacheService.instance.keyCache.size();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(beforeSize, CacheService.instance.keyCache.size());\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        dropTable(\"DROP TABLE %s\");\n        Schema.instance.updateVersion();\n\n        \r\n        CacheService.instance.keyCache.clear();\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(0, CacheService.instance.keyCache.size());\n    }\n","date":"2017-05-08 21:54:01","endLine":313,"groupId":"3603","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"test2iKeyCachePaths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b7/6cc784396c7a8ffe8228783d3cf3f1a7f88356.src","preCode":"    private void test2iKeyCachePaths() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        int beforeSize = CacheService.instance.keyCache.size();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(beforeSize, CacheService.instance.keyCache.size());\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        dropTable(\"DROP TABLE %s\");\n        Schema.instance.updateVersion();\n\n        \r\n        CacheService.instance.keyCache.clear();\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(0, CacheService.instance.keyCache.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/KeyCacheCqlTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2017-05-08 21:54:01","commitOrder":7,"curCode":"    private void test2iKeyCachePathsSaveKeysForDroppedTable() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (col_int)\");\n        insertData(table, indexName, true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        \r\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        dropTable(\"DROP TABLE %s\");\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n        while(iter.hasNext())\n        {\n            KeyCacheKey key = iter.next();\n            TableMetadataRef tableMetadataRef = Schema.instance.getTableMetadataRef(key.tableId);\n            Assert.assertFalse(tableMetadataRef.keyspace.equals(\"KEYSPACE_PER_TEST\"));\n            Assert.assertFalse(tableMetadataRef.name.startsWith(table));\n        }\n    }\n","date":"2017-05-08 21:54:01","endLine":387,"groupId":"15104","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"test2iKeyCachePathsSaveKeysForDroppedTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b7/6cc784396c7a8ffe8228783d3cf3f1a7f88356.src","preCode":"    private void test2iKeyCachePathsSaveKeysForDroppedTable() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        createIndex(\"CREATE INDEX some_index ON %s (col_int)\");\n        insertData(table, \"some_index\", true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        \r\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        dropTable(\"DROP TABLE %s\");\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n        while(iter.hasNext())\n        {\n            KeyCacheKey key = iter.next();\n            TableMetadataRef tableMetadataRef = Schema.instance.getTableMetadataRef(key.tableId);\n            Assert.assertFalse(tableMetadataRef.keyspace.equals(\"KEYSPACE_PER_TEST\"));\n            Assert.assertFalse(tableMetadataRef.name.startsWith(table));\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/KeyCacheCqlTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"}],"commitId":"cff8dadbe853c43fc53a827fce965d85e30d5de7","commitMessage":"@@@Make CQLTester.createIndex return the index name\n\npatch by Andr?s de la Pe?a; reviewed by Benjamin Lerer for CASSANDRA-13385\n","date":"2017-05-08 21:54:01","modifiedFileCount":"4","status":"M","submitter":"Andr?s de la Pe?a"},{"authorTime":"2021-07-01 20:08:52","codes":[{"authorDate":"2021-07-01 20:08:52","commitOrder":8,"curCode":"    private void test2iKeyCachePaths() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (col_int)\");\n        insertData(table, indexName, true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        long expectedRequests = 0;\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n            \r\n            \r\n            expectedRequests += recentBloomFilterFalsePositives() + 20;\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(expectedRequests, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n            \r\n            \r\n            expectedRequests += recentBloomFilterFalsePositives() + 20;\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(expectedRequests, requests);\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        int beforeSize = CacheService.instance.keyCache.size();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(beforeSize, CacheService.instance.keyCache.size());\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        dropTable(\"DROP TABLE %s\");\n        Schema.instance.updateVersion();\n\n        \r\n        CacheService.instance.keyCache.clear();\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(0, CacheService.instance.keyCache.size());\n    }\n","date":"2021-07-01 20:08:52","endLine":321,"groupId":"101518","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"test2iKeyCachePaths","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b1/074b23bcd53afb383d235b1b59b2e0c7896c93.src","preCode":"    private void test2iKeyCachePaths() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (col_int)\");\n        insertData(table, indexName, true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        int beforeSize = CacheService.instance.keyCache.size();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(beforeSize, CacheService.instance.keyCache.size());\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        dropTable(\"DROP TABLE %s\");\n        Schema.instance.updateVersion();\n\n        \r\n        CacheService.instance.keyCache.clear();\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        assertEquals(0, CacheService.instance.keyCache.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/KeyCacheCqlTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2021-07-01 20:08:52","commitOrder":8,"curCode":"    private void test2iKeyCachePathsSaveKeysForDroppedTable() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (col_int)\");\n        insertData(table, indexName, true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        long expectedNumberOfRequests = 0;\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n\n            \r\n            \r\n            expectedNumberOfRequests += recentBloomFilterFalsePositives() + 20;\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(expectedNumberOfRequests, requests);\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n\n            \r\n            \r\n            expectedNumberOfRequests += recentBloomFilterFalsePositives() + 20;\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(expectedNumberOfRequests, requests);\n\n        dropTable(\"DROP TABLE %s\");\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n        while(iter.hasNext())\n        {\n            KeyCacheKey key = iter.next();\n            TableMetadataRef tableMetadataRef = Schema.instance.getTableMetadataRef(key.tableId);\n            Assert.assertFalse(tableMetadataRef.keyspace.equals(\"KEYSPACE_PER_TEST\"));\n            Assert.assertFalse(tableMetadataRef.name.startsWith(table));\n        }\n    }\n","date":"2021-07-01 20:08:52","endLine":403,"groupId":"101518","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"test2iKeyCachePathsSaveKeysForDroppedTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/b1/074b23bcd53afb383d235b1b59b2e0c7896c93.src","preCode":"    private void test2iKeyCachePathsSaveKeysForDroppedTable() throws Throwable\n    {\n        String table = createTable(\"CREATE TABLE %s (\"\n                                   + commonColumnsDef\n                                   + \"PRIMARY KEY ((part_key_a, part_key_b),clust_key_a,clust_key_b,clust_key_c))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (col_int)\");\n        insertData(table, indexName, true);\n        clearCache();\n\n        CacheMetrics metrics = CacheService.instance.keyCache.getMetrics();\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            assertEquals(500, result.size());\n        }\n\n        long hits = metrics.hits.getCount();\n        long requests = metrics.requests.getCount();\n        assertEquals(0, hits);\n        assertEquals(210, requests);\n\n        \r\n\n        for (int i = 0; i < 10; i++)\n        {\n            UntypedResultSet result = execute(\"SELECT part_key_a FROM %s WHERE col_int = ?\", i);\n            \r\n            \r\n            \r\n            assertEquals(500, result.size());\n        }\n\n        metrics = CacheService.instance.keyCache.getMetrics();\n        hits = metrics.hits.getCount();\n        requests = metrics.requests.getCount();\n        assertEquals(200, hits);\n        assertEquals(420, requests);\n\n        dropTable(\"DROP TABLE %s\");\n\n        CacheService.instance.keyCache.submitWrite(Integer.MAX_VALUE).get();\n\n        CacheService.instance.keyCache.clear();\n\n        Assert.assertEquals(0, CacheService.instance.keyCache.size());\n\n        \r\n        CacheService.instance.keyCache.loadSaved();\n\n        Iterator<KeyCacheKey> iter = CacheService.instance.keyCache.keyIterator();\n        while(iter.hasNext())\n        {\n            KeyCacheKey key = iter.next();\n            TableMetadataRef tableMetadataRef = Schema.instance.getTableMetadataRef(key.tableId);\n            Assert.assertFalse(tableMetadataRef.keyspace.equals(\"KEYSPACE_PER_TEST\"));\n            Assert.assertFalse(tableMetadataRef.name.startsWith(table));\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/KeyCacheCqlTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":337,"status":"M"}],"commitId":"dfc3dbc18d0f4b517847464e7fe5217f04efb119","commitMessage":"@@@Merge branch cassandra-4.0 into trunk\n","date":"2021-07-01 20:08:52","modifiedFileCount":"4","status":"M","submitter":"Benjamin Lerer"}]
