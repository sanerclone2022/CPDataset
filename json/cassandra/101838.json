[{"authorTime":"2015-09-05 03:13:18","codes":[{"authorDate":"2015-09-05 03:13:18","commitOrder":1,"curCode":"    private void testDeleteWithOneClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] {\"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 4, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 5, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (1, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n            flush(forceFlush);\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1),\n                           row(0, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) = (?)\", 0, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering = ?\", 0, 1, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3),\n                       row(0, 4, 4),\n                       row(0, 5, 5));\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) IN ((?), (?))\", 0, 4, 5);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering = ?\", 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering = ? \", 0, 1);\n\n            \r\n            assertInvalidMessage(\"clustering cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND clustering = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Unknown identifier value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined name partitionkey1 in where clause ('partitionkey1 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined name clustering_3 in where clause ('clustering_3 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_3 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering = ?\", 0, 1);\n\n            \r\n            String errorMsg = isEmpty(compactOption) ? \"Non PRIMARY KEY columns found in where clause: value\"\n                                                     : \"Predicates on the non-primary-key column (value) of a COMPACT table are not yet supported\";\n\n            assertInvalidMessage(errorMsg,\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND value = ?\", 0, 1, 3);\n        }\n    }\n","date":"2015-09-05 03:13:42","endLine":491,"groupId":"22808","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWithOneClusteringColumns","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5d/9ef8fe65abcbe2486327418075df1b578bd368.src","preCode":"    private void testDeleteWithOneClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] {\"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 4, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 5, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (1, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n            flush(forceFlush);\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1),\n                           row(0, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) = (?)\", 0, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering = ?\", 0, 1, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3),\n                       row(0, 4, 4),\n                       row(0, 5, 5));\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) IN ((?), (?))\", 0, 4, 5);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering = ?\", 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering = ? \", 0, 1);\n\n            \r\n            assertInvalidMessage(\"clustering cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND clustering = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Unknown identifier value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined name partitionkey1 in where clause ('partitionkey1 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined name clustering_3 in where clause ('clustering_3 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_3 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering = ?\", 0, 1);\n\n            \r\n            String errorMsg = isEmpty(compactOption) ? \"Non PRIMARY KEY columns found in where clause: value\"\n                                                     : \"Predicates on the non-primary-key column (value) of a COMPACT table are not yet supported\";\n\n            assertInvalidMessage(errorMsg,\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND value = ?\", 0, 1, 3);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":405,"status":"B"},{"authorDate":"2015-09-05 03:13:18","commitOrder":1,"curCode":"    private void testDeleteWithTwoClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] { \"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering_1 int,\" +\n                                      \"clustering_2 int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering_1, clustering_2))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 1, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 2, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (1, 0, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n            flush(forceFlush);\n\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1),\n                           row(0, 1, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) = (?, ?)\", 0, 1, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                0, 1, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 0, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1),\n                       row(0, 0, 2, 2),\n                       row(0, 0, 3, 3),\n                       row(0, 1, 2, 5));\n\n            Object[][] rows;\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 2, null),\n                                      row(0, 0, 3, null),\n                                      row(0, 1, 2, 5)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1), row(0, 1, 2, 5)};\n            }\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 IN (?, ?)\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 3, null)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1)};\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) IN ((?, ?), (?, ?))\", 0, 0, 2, 1, 2);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1) IN ((?), (?)) AND clustering_2 = ?\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering_1 = ? AND clustering_2 = ?\", 1, 1);\n\n            assertInvalidMessage(\"PRIMARY KEY column \\\"clustering_2\\\" cannot be restricted as preceding column \\\"clustering_1\\\" is not restricted\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_2 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"clustering_1 cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND clustering_1 = ?\", 0, 1, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Unknown identifier value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined name partitionkey1 in where clause ('partitionkey1 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined name clustering_3 in where clause ('clustering_3 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_3 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            String errorMsg = isEmpty(compactOption) ? \"Non PRIMARY KEY columns found in where clause: value\"\n                                                     : \"Predicates on the non-primary-key column (value) of a COMPACT table are not yet supported\";\n\n            assertInvalidMessage(errorMsg,\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND value = ?\", 0, 1, 1, 3);\n        }\n    }\n","date":"2015-09-05 03:13:42","endLine":624,"groupId":"14110","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteWithTwoClusteringColumns","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5d/9ef8fe65abcbe2486327418075df1b578bd368.src","preCode":"    private void testDeleteWithTwoClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] { \"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering_1 int,\" +\n                                      \"clustering_2 int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering_1, clustering_2))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 1, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 2, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (1, 0, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n            flush(forceFlush);\n\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1),\n                           row(0, 1, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) = (?, ?)\", 0, 1, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                0, 1, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 0, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1),\n                       row(0, 0, 2, 2),\n                       row(0, 0, 3, 3),\n                       row(0, 1, 2, 5));\n\n            Object[][] rows;\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 2, null),\n                                      row(0, 0, 3, null),\n                                      row(0, 1, 2, 5)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1), row(0, 1, 2, 5)};\n            }\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 IN (?, ?)\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 3, null)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1)};\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) IN ((?, ?), (?, ?))\", 0, 0, 2, 1, 2);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1) IN ((?), (?)) AND clustering_2 = ?\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering_1 = ? AND clustering_2 = ?\", 1, 1);\n\n            assertInvalidMessage(\"PRIMARY KEY column \\\"clustering_2\\\" cannot be restricted as preceding column \\\"clustering_1\\\" is not restricted\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_2 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"clustering_1 cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND clustering_1 = ?\", 0, 1, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Unknown identifier value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined name partitionkey1 in where clause ('partitionkey1 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined name clustering_3 in where clause ('clustering_3 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_3 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            String errorMsg = isEmpty(compactOption) ? \"Non PRIMARY KEY columns found in where clause: value\"\n                                                     : \"Predicates on the non-primary-key column (value) of a COMPACT table are not yet supported\";\n\n            assertInvalidMessage(errorMsg,\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND value = ?\", 0, 1, 1, 3);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"B"}],"commitId":"86faf8cb3ca2d193c7a5b9c2cfa2f098ff46070a","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-09-05 03:13:42","modifiedFileCount":"25","status":"B","submitter":"blerer"},{"authorTime":"2016-03-05 05:15:17","codes":[{"authorDate":"2016-03-05 05:15:17","commitOrder":2,"curCode":"    private void testDeleteWithOneClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] {\"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 4, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 5, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (1, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n            flush(forceFlush);\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1),\n                           row(0, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) = (?)\", 0, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering = ?\", 0, 1, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3),\n                       row(0, 4, 4),\n                       row(0, 5, 5));\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) IN ((?), (?))\", 0, 4, 5);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering = ?\", 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering = ? \", 0, 1);\n\n            \r\n            assertInvalidMessage(\"clustering cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND clustering = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Unknown identifier value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined name partitionkey1 in where clause ('partitionkey1 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined name clustering_3 in where clause ('clustering_3 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_3 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Non PRIMARY KEY columns found in where clause: value\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND value = ?\", 0, 1, 3);\n        }\n    }\n","date":"2016-03-05 05:15:29","endLine":509,"groupId":"22808","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWithOneClusteringColumns","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/89/b90a61f238e91a2a13eae5ddb41e278cbe2341.src","preCode":"    private void testDeleteWithOneClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] {\"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 4, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 5, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (1, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n            flush(forceFlush);\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1),\n                           row(0, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) = (?)\", 0, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering = ?\", 0, 1, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3),\n                       row(0, 4, 4),\n                       row(0, 5, 5));\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) IN ((?), (?))\", 0, 4, 5);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering = ?\", 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering = ? \", 0, 1);\n\n            \r\n            assertInvalidMessage(\"clustering cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND clustering = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Unknown identifier value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined name partitionkey1 in where clause ('partitionkey1 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined name clustering_3 in where clause ('clustering_3 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_3 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering = ?\", 0, 1);\n\n            \r\n            String errorMsg = isEmpty(compactOption) ? \"Non PRIMARY KEY columns found in where clause: value\"\n                                                     : \"Predicates on the non-primary-key column (value) of a COMPACT table are not yet supported\";\n\n            assertInvalidMessage(errorMsg,\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND value = ?\", 0, 1, 3);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"},{"authorDate":"2016-03-05 05:15:17","commitOrder":2,"curCode":"    private void testDeleteWithTwoClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] { \"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering_1 int,\" +\n                                      \"clustering_2 int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering_1, clustering_2))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 1, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 2, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (1, 0, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n            flush(forceFlush);\n\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1),\n                           row(0, 1, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) = (?, ?)\", 0, 1, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                0, 1, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 0, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1),\n                       row(0, 0, 2, 2),\n                       row(0, 0, 3, 3),\n                       row(0, 1, 2, 5));\n\n            Object[][] rows;\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 2, null),\n                                      row(0, 0, 3, null),\n                                      row(0, 1, 2, 5)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1), row(0, 1, 2, 5)};\n            }\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 IN (?, ?)\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 3, null)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1)};\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) IN ((?, ?), (?, ?))\", 0, 0, 2, 1, 2);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1) IN ((?), (?)) AND clustering_2 = ?\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering_1 = ? AND clustering_2 = ?\", 1, 1);\n\n            assertInvalidMessage(\"PRIMARY KEY column \\\"clustering_2\\\" cannot be restricted as preceding column \\\"clustering_1\\\" is not restricted\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_2 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"clustering_1 cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND clustering_1 = ?\", 0, 1, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Unknown identifier value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined name partitionkey1 in where clause ('partitionkey1 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined name clustering_3 in where clause ('clustering_3 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_3 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Non PRIMARY KEY columns found in where clause: value\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND value = ?\", 0, 1, 1, 3);\n        }\n    }\n","date":"2016-03-05 05:15:29","endLine":639,"groupId":"14110","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteWithTwoClusteringColumns","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/89/b90a61f238e91a2a13eae5ddb41e278cbe2341.src","preCode":"    private void testDeleteWithTwoClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] { \"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering_1 int,\" +\n                                      \"clustering_2 int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering_1, clustering_2))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 1, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 2, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (1, 0, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n            flush(forceFlush);\n\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1),\n                           row(0, 1, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) = (?, ?)\", 0, 1, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                0, 1, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 0, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1),\n                       row(0, 0, 2, 2),\n                       row(0, 0, 3, 3),\n                       row(0, 1, 2, 5));\n\n            Object[][] rows;\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 2, null),\n                                      row(0, 0, 3, null),\n                                      row(0, 1, 2, 5)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1), row(0, 1, 2, 5)};\n            }\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 IN (?, ?)\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 3, null)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1)};\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) IN ((?, ?), (?, ?))\", 0, 0, 2, 1, 2);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1) IN ((?), (?)) AND clustering_2 = ?\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering_1 = ? AND clustering_2 = ?\", 1, 1);\n\n            assertInvalidMessage(\"PRIMARY KEY column \\\"clustering_2\\\" cannot be restricted as preceding column \\\"clustering_1\\\" is not restricted\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_2 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"clustering_1 cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND clustering_1 = ?\", 0, 1, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Unknown identifier value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined name partitionkey1 in where clause ('partitionkey1 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined name clustering_3 in where clause ('clustering_3 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_3 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            String errorMsg = isEmpty(compactOption) ? \"Non PRIMARY KEY columns found in where clause: value\"\n                                                     : \"Predicates on the non-primary-key column (value) of a COMPACT table are not yet supported\";\n\n            assertInvalidMessage(errorMsg,\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND value = ?\", 0, 1, 1, 3);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"M"}],"commitId":"6e69c75900f3640195130085ad69daa1659184eb","commitMessage":"@@@Merge branch cassandra-3.5 into trunk\n","date":"2016-03-05 05:15:29","modifiedFileCount":"14","status":"M","submitter":"Benjamin Lerer"},{"authorTime":"2016-05-24 21:49:48","codes":[{"authorDate":"2016-05-24 21:49:48","commitOrder":3,"curCode":"    private void testDeleteWithOneClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] {\"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 4, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 5, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (1, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n            flush(forceFlush);\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1),\n                           row(0, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) = (?)\", 0, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering = ?\", 0, 1, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3),\n                       row(0, 4, 4),\n                       row(0, 5, 5));\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) IN ((?), (?))\", 0, 4, 5);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering = ?\", 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering = ? \", 0, 1);\n\n            \r\n            assertInvalidMessage(\"clustering cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND clustering = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Undefined column name value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined column name partitionkey1\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined column name clustering_3\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_3 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Non PRIMARY KEY columns found in where clause: value\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND value = ?\", 0, 1, 3);\n        }\n    }\n","date":"2016-06-15 15:33:06","endLine":509,"groupId":"22808","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWithOneClusteringColumns","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/9e/ad942ea1569b582aaa1a98124db9b4508da6f5.src","preCode":"    private void testDeleteWithOneClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] {\"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 4, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 5, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (1, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n            flush(forceFlush);\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1),\n                           row(0, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) = (?)\", 0, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering = ?\", 0, 1, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3),\n                       row(0, 4, 4),\n                       row(0, 5, 5));\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) IN ((?), (?))\", 0, 4, 5);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering = ?\", 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering = ? \", 0, 1);\n\n            \r\n            assertInvalidMessage(\"clustering cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND clustering = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Unknown identifier value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined name partitionkey1 in where clause ('partitionkey1 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined name clustering_3 in where clause ('clustering_3 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_3 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Non PRIMARY KEY columns found in where clause: value\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND value = ?\", 0, 1, 3);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"},{"authorDate":"2016-05-24 21:49:48","commitOrder":3,"curCode":"    private void testDeleteWithTwoClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] { \"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering_1 int,\" +\n                                      \"clustering_2 int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering_1, clustering_2))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 1, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 2, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (1, 0, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n            flush(forceFlush);\n\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1),\n                           row(0, 1, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) = (?, ?)\", 0, 1, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                0, 1, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 0, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1),\n                       row(0, 0, 2, 2),\n                       row(0, 0, 3, 3),\n                       row(0, 1, 2, 5));\n\n            Object[][] rows;\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 2, null),\n                                      row(0, 0, 3, null),\n                                      row(0, 1, 2, 5)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1), row(0, 1, 2, 5)};\n            }\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 IN (?, ?)\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 3, null)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1)};\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) IN ((?, ?), (?, ?))\", 0, 0, 2, 1, 2);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1) IN ((?), (?)) AND clustering_2 = ?\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering_1 = ? AND clustering_2 = ?\", 1, 1);\n\n            assertInvalidMessage(\"PRIMARY KEY column \\\"clustering_2\\\" cannot be restricted as preceding column \\\"clustering_1\\\" is not restricted\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_2 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"clustering_1 cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND clustering_1 = ?\", 0, 1, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Undefined column name value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined column name partitionkey1\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined column name clustering_3\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_3 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Non PRIMARY KEY columns found in where clause: value\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND value = ?\", 0, 1, 1, 3);\n        }\n    }\n","date":"2016-06-15 15:33:06","endLine":639,"groupId":"14110","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteWithTwoClusteringColumns","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/9e/ad942ea1569b582aaa1a98124db9b4508da6f5.src","preCode":"    private void testDeleteWithTwoClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] { \"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering_1 int,\" +\n                                      \"clustering_2 int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering_1, clustering_2))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 1, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 2, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (1, 0, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n            flush(forceFlush);\n\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1),\n                           row(0, 1, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) = (?, ?)\", 0, 1, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                0, 1, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 0, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1),\n                       row(0, 0, 2, 2),\n                       row(0, 0, 3, 3),\n                       row(0, 1, 2, 5));\n\n            Object[][] rows;\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 2, null),\n                                      row(0, 0, 3, null),\n                                      row(0, 1, 2, 5)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1), row(0, 1, 2, 5)};\n            }\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 IN (?, ?)\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 3, null)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1)};\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) IN ((?, ?), (?, ?))\", 0, 0, 2, 1, 2);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1) IN ((?), (?)) AND clustering_2 = ?\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering_1 = ? AND clustering_2 = ?\", 1, 1);\n\n            assertInvalidMessage(\"PRIMARY KEY column \\\"clustering_2\\\" cannot be restricted as preceding column \\\"clustering_1\\\" is not restricted\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_2 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"clustering_1 cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND clustering_1 = ?\", 0, 1, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Unknown identifier value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined name partitionkey1 in where clause ('partitionkey1 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined name clustering_3 in where clause ('clustering_3 = ?')\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_3 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Non PRIMARY KEY columns found in where clause: value\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND value = ?\", 0, 1, 1, 3);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"M"}],"commitId":"4ed00607df060a3cdcc685c4fc0c1967f62b37f1","commitMessage":"@@@Allow terms in selection clauses\n\npatch by slebresne; reviewed by blerer for CASSANDRA-10783\n","date":"2016-06-15 15:33:06","modifiedFileCount":"60","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2016-05-24 21:49:48","codes":[{"authorDate":"2017-04-07 18:20:02","commitOrder":4,"curCode":"    private void testDeleteWithOneClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] {\"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 4, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 5, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (1, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n            flush(forceFlush);\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1),\n                           row(0, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering = ?\", 0, 1, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3),\n                       row(0, 4, 4),\n                       row(0, 5, 5));\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) IN ((?), (?))\", 0, 4, 5);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering = ?\", 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering = ? \", 0, 1);\n\n            \r\n            assertInvalidMessage(\"clustering cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND clustering = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Undefined column name value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined column name partitionkey1\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined column name clustering_3\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_3 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Non PRIMARY KEY columns found in where clause: value\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND value = ?\", 0, 1, 3);\n        }\n    }\n","date":"2017-04-07 18:20:02","endLine":591,"groupId":"22808","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWithOneClusteringColumns","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ef/1b5acf25692588fec1f86fa33d496f45566b77.src","preCode":"    private void testDeleteWithOneClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] {\"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 4, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 5, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (1, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n            flush(forceFlush);\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1),\n                           row(0, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) = (?)\", 0, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering = ?\", 0, 1, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3),\n                       row(0, 4, 4),\n                       row(0, 5, 5));\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) IN ((?), (?))\", 0, 4, 5);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering = ?\", 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering = ? \", 0, 1);\n\n            \r\n            assertInvalidMessage(\"clustering cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND clustering = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Undefined column name value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined column name partitionkey1\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined column name clustering_3\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_3 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Non PRIMARY KEY columns found in where clause: value\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND value = ?\", 0, 1, 3);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"M"},{"authorDate":"2016-05-24 21:49:48","commitOrder":4,"curCode":"    private void testDeleteWithTwoClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] { \"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering_1 int,\" +\n                                      \"clustering_2 int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering_1, clustering_2))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 1, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 2, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (1, 0, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n            flush(forceFlush);\n\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1),\n                           row(0, 1, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) = (?, ?)\", 0, 1, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                0, 1, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 0, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1),\n                       row(0, 0, 2, 2),\n                       row(0, 0, 3, 3),\n                       row(0, 1, 2, 5));\n\n            Object[][] rows;\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 2, null),\n                                      row(0, 0, 3, null),\n                                      row(0, 1, 2, 5)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1), row(0, 1, 2, 5)};\n            }\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 IN (?, ?)\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 3, null)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1)};\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) IN ((?, ?), (?, ?))\", 0, 0, 2, 1, 2);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1) IN ((?), (?)) AND clustering_2 = ?\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering_1 = ? AND clustering_2 = ?\", 1, 1);\n\n            assertInvalidMessage(\"PRIMARY KEY column \\\"clustering_2\\\" cannot be restricted as preceding column \\\"clustering_1\\\" is not restricted\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_2 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"clustering_1 cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND clustering_1 = ?\", 0, 1, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Undefined column name value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined column name partitionkey1\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined column name clustering_3\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_3 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Non PRIMARY KEY columns found in where clause: value\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND value = ?\", 0, 1, 1, 3);\n        }\n    }\n","date":"2016-06-15 15:33:06","endLine":639,"groupId":"14110","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteWithTwoClusteringColumns","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/9e/ad942ea1569b582aaa1a98124db9b4508da6f5.src","preCode":"    private void testDeleteWithTwoClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] { \"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering_1 int,\" +\n                                      \"clustering_2 int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering_1, clustering_2))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 1, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 2, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (1, 0, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n            flush(forceFlush);\n\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1),\n                           row(0, 1, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) = (?, ?)\", 0, 1, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                0, 1, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 0, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1),\n                       row(0, 0, 2, 2),\n                       row(0, 0, 3, 3),\n                       row(0, 1, 2, 5));\n\n            Object[][] rows;\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 2, null),\n                                      row(0, 0, 3, null),\n                                      row(0, 1, 2, 5)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1), row(0, 1, 2, 5)};\n            }\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 IN (?, ?)\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 3, null)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1)};\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) IN ((?, ?), (?, ?))\", 0, 0, 2, 1, 2);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1) IN ((?), (?)) AND clustering_2 = ?\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering_1 = ? AND clustering_2 = ?\", 1, 1);\n\n            assertInvalidMessage(\"PRIMARY KEY column \\\"clustering_2\\\" cannot be restricted as preceding column \\\"clustering_1\\\" is not restricted\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_2 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"clustering_1 cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND clustering_1 = ?\", 0, 1, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Undefined column name value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined column name partitionkey1\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined column name clustering_3\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_3 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Non PRIMARY KEY columns found in where clause: value\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND value = ?\", 0, 1, 1, 3);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"N"}],"commitId":"a1cb8e5abc224623c35fe84969dc08894c91278a","commitMessage":"@@@Merge branch 'cassandra-3.11' into trunk\n","date":"2017-04-07 18:20:02","modifiedFileCount":"8","status":"M","submitter":"Alex Petrov"},{"authorTime":"2017-10-17 17:17:41","codes":[{"authorDate":"2017-10-17 17:17:41","commitOrder":5,"curCode":"    private void testDeleteWithOneClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                    \"clustering int,\" +\n                    \"value int,\" +\n                    \" PRIMARY KEY (partitionKey, clustering))\");\n\n        execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 0, 0)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 1, 1)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 2, 2)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 3, 3)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 4, 4)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 5, 5)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (1, 0, 6)\");\n        flush(forceFlush);\n\n        execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n        flush(forceFlush);\n        assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1),\n                   row(0, 1, null));\n\n        execute(\"DELETE FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n        flush(forceFlush);\n        assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n\n        execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering = ?\", 0, 1, 0);\n        flush(forceFlush);\n        assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                   row(0, 2, 2),\n                   row(0, 3, 3),\n                   row(0, 4, 4),\n                   row(0, 5, 5));\n\n        execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) IN ((?), (?))\", 0, 4, 5);\n        flush(forceFlush);\n        assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                   row(0, 2, 2),\n                   row(0, 3, 3));\n\n        \r\n\n        \r\n        assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                             \"DELETE FROM %s WHERE clustering = ?\", 1);\n\n        \r\n        assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                             \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering = ? \", 0, 1);\n\n        \r\n        assertInvalidMessage(\"clustering cannot be restricted by more than one relation if it includes an Equal\",\n                             \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND clustering = ?\", 0, 1, 1);\n\n        \r\n        assertInvalidMessage(\"Undefined column name value1\",\n                             \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n\n        assertInvalidMessage(\"Undefined column name partitionkey1\",\n                             \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering = ?\", 0, 1);\n\n        assertInvalidMessage(\"Undefined column name clustering_3\",\n                             \"DELETE FROM %s WHERE partitionKey = ? AND clustering_3 = ?\", 0, 1);\n\n        \r\n        assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                             \"DELETE FROM %s WHERE partitionKey > ? AND clustering = ?\", 0, 1);\n\n        assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                             \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering = ?\", 0, 1);\n\n        \r\n        assertInvalidMessage(\"Non PRIMARY KEY columns found in where clause: value\",\n                             \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND value = ?\", 0, 1, 3);\n    }\n","date":"2017-11-06 23:44:50","endLine":557,"groupId":"101838","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteWithOneClusteringColumns","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/0c/8804450ac583f5a1f51414313d694395eb6c02.src","preCode":"    private void testDeleteWithOneClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] {\"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 4, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 5, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (1, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n            flush(forceFlush);\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1),\n                           row(0, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering = ?\", 0, 1, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3),\n                       row(0, 4, 4),\n                       row(0, 5, 5));\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering) IN ((?), (?))\", 0, 4, 5);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 2, 2),\n                       row(0, 3, 3));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering = ?\", 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering = ? \", 0, 1);\n\n            \r\n            assertInvalidMessage(\"clustering cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND clustering = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Undefined column name value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined column name partitionkey1\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Undefined column name clustering_3\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_3 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering = ?\", 0, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"Non PRIMARY KEY columns found in where clause: value\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering = ? AND value = ?\", 0, 1, 3);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":484,"status":"M"},{"authorDate":"2017-10-17 17:17:41","commitOrder":5,"curCode":"    private void testDeleteWithTwoClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                    \"clustering_1 int,\" +\n                    \"clustering_2 int,\" +\n                    \"value int,\" +\n                    \" PRIMARY KEY (partitionKey, clustering_1, clustering_2))\");\n\n        execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 1, 1)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 2, 2)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 3, 3)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 1, 4)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 2, 5)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (1, 0, 0, 6)\");\n        flush(forceFlush);\n\n        execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n        flush(forceFlush);\n\n        assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                           0, 1, 1),\n                   row(0, 1, 1, null));\n\n        execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) = (?, ?)\", 0, 1, 1);\n        flush(forceFlush);\n        assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                            0, 1, 1));\n\n        execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 0, 0);\n        flush(forceFlush);\n        assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                   row(0, 0, 1, 1),\n                   row(0, 0, 2, 2),\n                   row(0, 0, 3, 3),\n                   row(0, 1, 2, 5));\n\n        execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 IN (?, ?)\", 0, 0, 2, 3);\n        flush(forceFlush);\n        assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), row(0, 0, 1, 1),\n                   row(0, 0, 2, null),\n                   row(0, 0, 3, null),\n                   row(0, 1, 2, 5));\n\n        execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) IN ((?, ?), (?, ?))\", 0, 0, 2, 1, 2);\n        flush(forceFlush);\n        assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                   row(0, 0, 1, 1),\n                   row(0, 0, 3, null));\n\n        execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1) IN ((?), (?)) AND clustering_2 = ?\", 0, 0, 2, 3);\n        flush(forceFlush);\n        assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                   row(0, 0, 1, 1));\n\n        \r\n\n        \r\n        assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                             \"DELETE FROM %s WHERE clustering_1 = ? AND clustering_2 = ?\", 1, 1);\n\n        assertInvalidMessage(\"PRIMARY KEY column \\\"clustering_2\\\" cannot be restricted as preceding column \\\"clustering_1\\\" is not restricted\",\n                             \"DELETE FROM %s WHERE partitionKey = ? AND clustering_2 = ?\", 0, 1);\n\n        \r\n        assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                             \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n        \r\n        assertInvalidMessage(\"clustering_1 cannot be restricted by more than one relation if it includes an Equal\",\n                             \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND clustering_1 = ?\", 0, 1, 1, 1);\n\n        \r\n        assertInvalidMessage(\"Undefined column name value1\",\n                             \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n        assertInvalidMessage(\"Undefined column name partitionkey1\",\n                             \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n        assertInvalidMessage(\"Undefined column name clustering_3\",\n                             \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_3 = ?\", 0, 1, 1);\n\n        \r\n        assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                             \"DELETE FROM %s WHERE partitionKey > ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n        assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                             \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n        \r\n        assertInvalidMessage(\"Non PRIMARY KEY columns found in where clause: value\",\n                             \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND value = ?\", 0, 1, 1, 3);\n    }\n","date":"2017-11-06 23:44:50","endLine":658,"groupId":"101838","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testDeleteWithTwoClusteringColumns","params":"(booleanforceFlush)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/0c/8804450ac583f5a1f51414313d694395eb6c02.src","preCode":"    private void testDeleteWithTwoClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        for (String compactOption : new String[] { \"\", \" WITH COMPACT STORAGE\" })\n        {\n            createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering_1 int,\" +\n                                      \"clustering_2 int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering_1, clustering_2))\" + compactOption);\n\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 1, 1)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 2, 2)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 3, 3)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 1, 4)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 1, 2, 5)\");\n            execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (1, 0, 0, 6)\");\n            flush(forceFlush);\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n            flush(forceFlush);\n\n            if (isEmpty(compactOption))\n            {\n                assertRows(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1),\n                           row(0, 1, 1, null));\n            }\n            else\n            {\n                assertEmpty(execute(\"SELECT * FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                   0, 1, 1));\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) = (?, ?)\", 0, 1, 1);\n            flush(forceFlush);\n            assertEmpty(execute(\"SELECT value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\",\n                                0, 1, 1));\n\n            execute(\"DELETE FROM %s WHERE partitionKey IN (?, ?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 0, 0);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1),\n                       row(0, 0, 2, 2),\n                       row(0, 0, 3, 3),\n                       row(0, 1, 2, 5));\n\n            Object[][] rows;\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 2, null),\n                                      row(0, 0, 3, null),\n                                      row(0, 1, 2, 5)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1), row(0, 1, 2, 5)};\n            }\n\n            execute(\"DELETE value FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 IN (?, ?)\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            if (isEmpty(compactOption))\n            {\n                rows = new Object[][]{row(0, 0, 1, 1),\n                                      row(0, 0, 3, null)};\n            }\n            else\n            {\n                rows = new Object[][]{row(0, 0, 1, 1)};\n            }\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1, clustering_2) IN ((?, ?), (?, ?))\", 0, 0, 2, 1, 2);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1), rows);\n\n            execute(\"DELETE FROM %s WHERE partitionKey = ? AND (clustering_1) IN ((?), (?)) AND clustering_2 = ?\", 0, 0, 2, 3);\n            flush(forceFlush);\n            assertRows(execute(\"SELECT * FROM %s WHERE partitionKey IN (?, ?)\", 0, 1),\n                       row(0, 0, 1, 1));\n\n            \r\n\n            \r\n            assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                                 \"DELETE FROM %s WHERE clustering_1 = ? AND clustering_2 = ?\", 1, 1);\n\n            assertInvalidMessage(\"PRIMARY KEY column \\\"clustering_2\\\" cannot be restricted as preceding column \\\"clustering_1\\\" is not restricted\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_2 = ?\", 0, 1);\n\n            \r\n            assertInvalidMessage(\"The token function cannot be used in WHERE clauses for DELETE statements\",\n                                 \"DELETE FROM %s WHERE token(partitionKey) = token(?) AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"clustering_1 cannot be restricted by more than one relation if it includes an Equal\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND clustering_1 = ?\", 0, 1, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Undefined column name value1\",\n                                 \"DELETE value1 FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined column name partitionkey1\",\n                                 \"DELETE FROM %s WHERE partitionKey1 = ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Undefined column name clustering_3\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_3 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Only EQ and IN relation are supported on the partition key (unless you use the token() function)\",\n                                 \"DELETE FROM %s WHERE partitionKey > ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            assertInvalidMessage(\"Cannot use CONTAINS on non-collection column partitionkey\",\n                                 \"DELETE FROM %s WHERE partitionKey CONTAINS ? AND clustering_1 = ? AND clustering_2 = ?\", 0, 1, 1);\n\n            \r\n            assertInvalidMessage(\"Non PRIMARY KEY columns found in where clause: value\",\n                                 \"DELETE FROM %s WHERE partitionKey = ? AND clustering_1 = ? AND clustering_2 = ? AND value = ?\", 0, 1, 1, 3);\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/operations/DeleteTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"M"}],"commitId":"07fbd8ee6042797aaade90357d625ba9d79c31e0","commitMessage":"@@@Disallow COMPACT STORAGE syntax.  avoid starting when compact tables are present\n\nPatch by Alex Petrov; reviewed by Sylvain Lebresne for CASSANDRA-10857","date":"2017-11-06 23:44:50","modifiedFileCount":"33","status":"M","submitter":"Alex Petrov"}]
