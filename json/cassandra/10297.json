[{"authorTime":"2016-09-01 06:48:43","codes":[{"authorDate":"2016-09-01 06:48:43","commitOrder":1,"curCode":"    public void prepareSuccessCase()\n    {\n        UUID sessionID = registerSession();\n        InstrumentedLocalSessions sessions = new InstrumentedLocalSessions();\n        sessions.start();\n\n        \r\n        sessions.pendingAntiCompactionFuture = SettableFuture.create();\n        Assert.assertFalse(sessions.submitPendingAntiCompactionCalled);\n        sessions.handlePrepareMessage(PARTICIPANT1, new PrepareConsistentRequest(sessionID, COORDINATOR, PARTICIPANTS));\n        Assert.assertTrue(sessions.submitPendingAntiCompactionCalled);\n        Assert.assertTrue(sessions.sentMessages.isEmpty());\n\n        \r\n        LocalSession session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARING, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        sessions.pendingAntiCompactionFuture.set(new Object());\n        session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARED, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        assertMessagesSent(sessions, COORDINATOR, new PrepareConsistentResponse(sessionID, PARTICIPANT1, true));\n    }\n","date":"2017-02-07 11:11:18","endLine":262,"groupId":"9471","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareSuccessCase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a8/5e01b16a234ad58969ee926405a17fa4b0b8a9.src","preCode":"    public void prepareSuccessCase()\n    {\n        UUID sessionID = registerSession();\n        InstrumentedLocalSessions sessions = new InstrumentedLocalSessions();\n        sessions.start();\n\n        \r\n        sessions.pendingAntiCompactionFuture = SettableFuture.create();\n        Assert.assertFalse(sessions.submitPendingAntiCompactionCalled);\n        sessions.handlePrepareMessage(PARTICIPANT1, new PrepareConsistentRequest(sessionID, COORDINATOR, PARTICIPANTS));\n        Assert.assertTrue(sessions.submitPendingAntiCompactionCalled);\n        Assert.assertTrue(sessions.sentMessages.isEmpty());\n\n        \r\n        LocalSession session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARING, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        sessions.pendingAntiCompactionFuture.set(new Object());\n        session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARED, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        assertMessagesSent(sessions, COORDINATOR, new PrepareConsistentResponse(sessionID, PARTICIPANT1, true));\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/LocalSessionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"B"},{"authorDate":"2016-09-01 06:48:43","commitOrder":1,"curCode":"    public void prepareAntiCompactFailure()\n    {\n        UUID sessionID = registerSession();\n        InstrumentedLocalSessions sessions = new InstrumentedLocalSessions();\n        sessions.start();\n\n        \r\n        sessions.pendingAntiCompactionFuture = SettableFuture.create();\n        Assert.assertFalse(sessions.submitPendingAntiCompactionCalled);\n        sessions.handlePrepareMessage(PARTICIPANT1, new PrepareConsistentRequest(sessionID, COORDINATOR, PARTICIPANTS));\n        Assert.assertTrue(sessions.submitPendingAntiCompactionCalled);\n        Assert.assertTrue(sessions.sentMessages.isEmpty());\n\n        \r\n        LocalSession session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARING, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        sessions.pendingAntiCompactionFuture.setException(new RuntimeException());\n        session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(FAILED, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        assertMessagesSent(sessions, COORDINATOR, new FailSession(sessionID));\n\n    }\n","date":"2017-02-07 11:11:18","endLine":298,"groupId":"1600","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareAntiCompactFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a8/5e01b16a234ad58969ee926405a17fa4b0b8a9.src","preCode":"    public void prepareAntiCompactFailure()\n    {\n        UUID sessionID = registerSession();\n        InstrumentedLocalSessions sessions = new InstrumentedLocalSessions();\n        sessions.start();\n\n        \r\n        sessions.pendingAntiCompactionFuture = SettableFuture.create();\n        Assert.assertFalse(sessions.submitPendingAntiCompactionCalled);\n        sessions.handlePrepareMessage(PARTICIPANT1, new PrepareConsistentRequest(sessionID, COORDINATOR, PARTICIPANTS));\n        Assert.assertTrue(sessions.submitPendingAntiCompactionCalled);\n        Assert.assertTrue(sessions.sentMessages.isEmpty());\n\n        \r\n        LocalSession session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARING, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        sessions.pendingAntiCompactionFuture.setException(new RuntimeException());\n        session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(FAILED, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        assertMessagesSent(sessions, COORDINATOR, new FailSession(sessionID));\n\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/LocalSessionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"B"}],"commitId":"98d74ed998706e9e047dc0f7886a1e9b18df3ce9","commitMessage":"@@@Fix consistency of incrementally repaired data\n\npatch by Blake Eggleston.  reviewed by Marcus Eriksson for CASSANDRA-9143\n","date":"2017-02-07 11:11:18","modifiedFileCount":"81","status":"B","submitter":"Blake Eggleston"},{"authorTime":"2017-07-06 04:28:04","codes":[{"authorDate":"2016-09-01 06:48:43","commitOrder":2,"curCode":"    public void prepareSuccessCase()\n    {\n        UUID sessionID = registerSession();\n        InstrumentedLocalSessions sessions = new InstrumentedLocalSessions();\n        sessions.start();\n\n        \r\n        sessions.pendingAntiCompactionFuture = SettableFuture.create();\n        Assert.assertFalse(sessions.submitPendingAntiCompactionCalled);\n        sessions.handlePrepareMessage(PARTICIPANT1, new PrepareConsistentRequest(sessionID, COORDINATOR, PARTICIPANTS));\n        Assert.assertTrue(sessions.submitPendingAntiCompactionCalled);\n        Assert.assertTrue(sessions.sentMessages.isEmpty());\n\n        \r\n        LocalSession session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARING, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        sessions.pendingAntiCompactionFuture.set(new Object());\n        session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARED, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        assertMessagesSent(sessions, COORDINATOR, new PrepareConsistentResponse(sessionID, PARTICIPANT1, true));\n    }\n","date":"2017-02-07 11:11:18","endLine":262,"groupId":"9471","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareSuccessCase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a8/5e01b16a234ad58969ee926405a17fa4b0b8a9.src","preCode":"    public void prepareSuccessCase()\n    {\n        UUID sessionID = registerSession();\n        InstrumentedLocalSessions sessions = new InstrumentedLocalSessions();\n        sessions.start();\n\n        \r\n        sessions.pendingAntiCompactionFuture = SettableFuture.create();\n        Assert.assertFalse(sessions.submitPendingAntiCompactionCalled);\n        sessions.handlePrepareMessage(PARTICIPANT1, new PrepareConsistentRequest(sessionID, COORDINATOR, PARTICIPANTS));\n        Assert.assertTrue(sessions.submitPendingAntiCompactionCalled);\n        Assert.assertTrue(sessions.sentMessages.isEmpty());\n\n        \r\n        LocalSession session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARING, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        sessions.pendingAntiCompactionFuture.set(new Object());\n        session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARED, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        assertMessagesSent(sessions, COORDINATOR, new PrepareConsistentResponse(sessionID, PARTICIPANT1, true));\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/LocalSessionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"N"},{"authorDate":"2017-07-06 04:28:04","commitOrder":2,"curCode":"    public void prepareAntiCompactFailure()\n    {\n        UUID sessionID = registerSession();\n        InstrumentedLocalSessions sessions = new InstrumentedLocalSessions();\n        sessions.start();\n\n        \r\n        sessions.pendingAntiCompactionFuture = SettableFuture.create();\n        Assert.assertFalse(sessions.submitPendingAntiCompactionCalled);\n        sessions.handlePrepareMessage(PARTICIPANT1, new PrepareConsistentRequest(sessionID, COORDINATOR, PARTICIPANTS));\n        Assert.assertTrue(sessions.submitPendingAntiCompactionCalled);\n        Assert.assertTrue(sessions.sentMessages.isEmpty());\n\n        \r\n        LocalSession session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARING, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        sessions.pendingAntiCompactionFuture.setException(new RuntimeException());\n        session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(FAILED, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        assertMessagesSent(sessions, COORDINATOR, new PrepareConsistentResponse(sessionID, PARTICIPANT1, false));\n\n    }\n","date":"2017-07-07 01:35:53","endLine":308,"groupId":"1600","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareAntiCompactFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c5/9462e0f719e67723662428c888b74960b6b005.src","preCode":"    public void prepareAntiCompactFailure()\n    {\n        UUID sessionID = registerSession();\n        InstrumentedLocalSessions sessions = new InstrumentedLocalSessions();\n        sessions.start();\n\n        \r\n        sessions.pendingAntiCompactionFuture = SettableFuture.create();\n        Assert.assertFalse(sessions.submitPendingAntiCompactionCalled);\n        sessions.handlePrepareMessage(PARTICIPANT1, new PrepareConsistentRequest(sessionID, COORDINATOR, PARTICIPANTS));\n        Assert.assertTrue(sessions.submitPendingAntiCompactionCalled);\n        Assert.assertTrue(sessions.sentMessages.isEmpty());\n\n        \r\n        LocalSession session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARING, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        sessions.pendingAntiCompactionFuture.setException(new RuntimeException());\n        session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(FAILED, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        assertMessagesSent(sessions, COORDINATOR, new FailSession(sessionID));\n\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/LocalSessionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"af37489092ca90bca336538adad02fb5ba859945","commitMessage":"@@@Improve handling of IR prepare failures\n\nPatch by Blake Eggleston; Reviewed by Marcus Eriksson for CASSANDRA-13672\n","date":"2017-07-07 01:35:53","modifiedFileCount":"4","status":"M","submitter":"Blake Eggleston"},{"authorTime":"2018-03-11 01:16:46","codes":[{"authorDate":"2018-03-11 01:16:46","commitOrder":3,"curCode":"    public void prepareSuccessCase()\n    {\n        UUID sessionID = registerSession();\n        InstrumentedLocalSessions sessions = new InstrumentedLocalSessions();\n        sessions.start();\n\n        \r\n        sessions.prepareSessionFuture = SettableFuture.create();\n        Assert.assertFalse(sessions.prepareSessionCalled);\n        sessions.handlePrepareMessage(PARTICIPANT1, new PrepareConsistentRequest(sessionID, COORDINATOR, PARTICIPANTS));\n        Assert.assertTrue(sessions.prepareSessionCalled);\n        Assert.assertTrue(sessions.sentMessages.isEmpty());\n\n        \r\n        LocalSession session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARING, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        sessions.prepareSessionFuture.set(new Object());\n        session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARED, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        assertMessagesSent(sessions, COORDINATOR, new PrepareConsistentResponse(sessionID, PARTICIPANT1, true));\n    }\n","date":"2018-04-07 07:11:14","endLine":284,"groupId":"10297","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareSuccessCase","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/df/514447364aa3805228e998789a59c9a4768c65.src","preCode":"    public void prepareSuccessCase()\n    {\n        UUID sessionID = registerSession();\n        InstrumentedLocalSessions sessions = new InstrumentedLocalSessions();\n        sessions.start();\n\n        \r\n        sessions.pendingAntiCompactionFuture = SettableFuture.create();\n        Assert.assertFalse(sessions.submitPendingAntiCompactionCalled);\n        sessions.handlePrepareMessage(PARTICIPANT1, new PrepareConsistentRequest(sessionID, COORDINATOR, PARTICIPANTS));\n        Assert.assertTrue(sessions.submitPendingAntiCompactionCalled);\n        Assert.assertTrue(sessions.sentMessages.isEmpty());\n\n        \r\n        LocalSession session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARING, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        sessions.pendingAntiCompactionFuture.set(new Object());\n        session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARED, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        assertMessagesSent(sessions, COORDINATOR, new PrepareConsistentResponse(sessionID, PARTICIPANT1, true));\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/LocalSessionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"},{"authorDate":"2018-03-11 01:16:46","commitOrder":3,"curCode":"    public void prepareAntiCompactFailure()\n    {\n        UUID sessionID = registerSession();\n        InstrumentedLocalSessions sessions = new InstrumentedLocalSessions();\n        sessions.start();\n\n        \r\n        sessions.prepareSessionFuture = SettableFuture.create();\n        Assert.assertFalse(sessions.prepareSessionCalled);\n        sessions.handlePrepareMessage(PARTICIPANT1, new PrepareConsistentRequest(sessionID, COORDINATOR, PARTICIPANTS));\n        Assert.assertTrue(sessions.prepareSessionCalled);\n        Assert.assertTrue(sessions.sentMessages.isEmpty());\n\n        \r\n        LocalSession session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARING, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        sessions.prepareSessionFuture.setException(new RuntimeException());\n        session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(FAILED, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        assertMessagesSent(sessions, COORDINATOR, new PrepareConsistentResponse(sessionID, PARTICIPANT1, false));\n\n    }\n","date":"2018-04-07 07:11:14","endLine":320,"groupId":"10297","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareAntiCompactFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/df/514447364aa3805228e998789a59c9a4768c65.src","preCode":"    public void prepareAntiCompactFailure()\n    {\n        UUID sessionID = registerSession();\n        InstrumentedLocalSessions sessions = new InstrumentedLocalSessions();\n        sessions.start();\n\n        \r\n        sessions.pendingAntiCompactionFuture = SettableFuture.create();\n        Assert.assertFalse(sessions.submitPendingAntiCompactionCalled);\n        sessions.handlePrepareMessage(PARTICIPANT1, new PrepareConsistentRequest(sessionID, COORDINATOR, PARTICIPANTS));\n        Assert.assertTrue(sessions.submitPendingAntiCompactionCalled);\n        Assert.assertTrue(sessions.sentMessages.isEmpty());\n\n        \r\n        LocalSession session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(PREPARING, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        sessions.pendingAntiCompactionFuture.setException(new RuntimeException());\n        session = sessions.getSession(sessionID);\n        Assert.assertNotNull(session);\n        Assert.assertEquals(FAILED, session.getState());\n        Assert.assertEquals(session, sessions.loadUnsafe(sessionID));\n\n        \r\n        assertMessagesSent(sessions, COORDINATOR, new PrepareConsistentResponse(sessionID, PARTICIPANT1, false));\n\n    }\n","realPath":"test/unit/org/apache/cassandra/repair/consistent/LocalSessionTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"M"}],"commitId":"c5a7fcaa8e00083d6f74967c40474aef07b0d21a","commitMessage":"@@@Abstract repair for pluggable storage\n\nPatch by Blake Eggleston; Reviewed by Jason Brown for CASSANDRA-14116\n","date":"2018-04-07 07:11:14","modifiedFileCount":"11","status":"M","submitter":"Blake Eggleston"}]
