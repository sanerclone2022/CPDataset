[{"authorTime":"2015-09-17 00:28:24","codes":[{"authorDate":"2015-09-17 00:28:24","commitOrder":10,"curCode":"    public void testRowWithRangeTombstonesUpdatesSecondaryIndex() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k5\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnDefinition cd = cfs.metadata.getColumnDefinition(indexedColumnName).copy();\n        IndexMetadata indexDef = IndexMetadata.singleTargetIndex(cfs.metadata,\n                                                                 new IndexTarget(cd.name, IndexTarget.Type.VALUES),\n                                                                 \"test_index\",\n                                                                 IndexMetadata.Kind.CUSTOM,\n                                                                 ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                                                 StubIndex.class.getName()));\n\n        if (!cfs.metadata.getIndexes().get(\"test_index\").isPresent())\n            cfs.metadata.indexes(cfs.metadata.getIndexes().with(indexDef));\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.listIndexes()\n                                                     .stream()\n                                                     .filter(i -> \"test_index\".equals(i.getIndexName()))\n                                                     .findFirst()\n                                                     .orElseThrow(() -> new RuntimeException(new AssertionError(\"Index not found\")));\n        index.reset();\n\n        UpdateBuilder builder = UpdateBuilder.create(cfs.metadata, key).withTimestamp(0);\n        for (int i = 0; i < 10; i++)\n            builder.newRow(i).add(\"val\", i);\n        builder.applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        new RowUpdateBuilder(cfs.metadata, 0, key).addRangeTombstone(0, 7).build().applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        assertEquals(10, index.rowsInserted.size());\n\n        CompactionManager.instance.performMaximal(cfs, false);\n\n        \r\n        assertEquals(1, cfs.getLiveSSTables().size());\n\n        assertEquals(8, index.rowsDeleted.size());\n    }\n","date":"2015-09-17 00:28:24","endLine":506,"groupId":"30353","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRowWithRangeTombstonesUpdatesSecondaryIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/e0/fc68a56f1561929fd3e98be5e90a40ea628825.src","preCode":"    public void testRowWithRangeTombstonesUpdatesSecondaryIndex() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k5\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnDefinition cd = cfs.metadata.getColumnDefinition(indexedColumnName).copy();\n        IndexMetadata indexDef = IndexMetadata.singleTargetIndex(cfs.metadata,\n                                                                 new IndexTarget(cd.name, IndexTarget.Type.VALUES),\n                                                                 \"test_index\",\n                                                                 IndexMetadata.Kind.CUSTOM,\n                                                                 ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                                                 StubIndex.class.getName()));\n\n        if (!cfs.metadata.getIndexes().get(\"test_index\").isPresent())\n            cfs.metadata.indexes(cfs.metadata.getIndexes().with(indexDef));\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.listIndexes()\n                                                     .stream()\n                                                     .filter(i -> \"test_index\".equals(i.getIndexName()))\n                                                     .findFirst()\n                                                     .orElseThrow(() -> new RuntimeException(new AssertionError(\"Index not found\")));\n        index.reset();\n\n        UpdateBuilder builder = UpdateBuilder.create(cfs.metadata, key).withTimestamp(0);\n        for (int i = 0; i < 10; i++)\n            builder.newRow(i).add(\"val\", i);\n        builder.applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        new RowUpdateBuilder(cfs.metadata, 0, key).addRangeTombstone(0, 7).build().applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        assertEquals(10, index.rowsInserted.size());\n\n        CompactionManager.instance.performMaximal(cfs, false);\n\n        \r\n        assertEquals(1, cfs.getLiveSSTables().size());\n\n        assertEquals(8, index.rowsDeleted.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RangeTombstoneTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":456,"status":"MB"},{"authorDate":"2015-09-17 00:28:24","commitOrder":10,"curCode":"    public void testOverwritesToDeletedColumns() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k6\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnDefinition cd = cfs.metadata.getColumnDefinition(indexedColumnName).copy();\n        IndexMetadata indexDef = IndexMetadata.singleTargetIndex(cfs.metadata,\n                                                                 new IndexTarget(cd.name,IndexTarget.Type.VALUES),\n                                                                 \"test_index\",\n                                                                 IndexMetadata.Kind.CUSTOM,\n                                                                 ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                                                 StubIndex.class.getName()));\n\n        if (!cfs.metadata.getIndexes().get(\"test_index\").isPresent())\n            cfs.metadata.indexes(cfs.metadata.getIndexes().with(indexDef));\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.getIndexByName(\"test_index\");\n        index.reset();\n\n        UpdateBuilder.create(cfs.metadata, key).withTimestamp(0).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        \r\n        new RowUpdateBuilder(cfs.metadata, 1, key).addRangeTombstone(0, 1).build().applyUnsafe();\n\n        \r\n        UpdateBuilder.create(cfs.metadata, key).withTimestamp(2).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        cfs.forceBlockingFlush();\n\n        \r\n        \r\n        assertEquals(1, index.rowsInserted.size());\n        assertEquals(1, index.rowsUpdated.size());\n    }\n","date":"2015-09-17 00:28:24","endLine":596,"groupId":"20761","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverwritesToDeletedColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/e0/fc68a56f1561929fd3e98be5e90a40ea628825.src","preCode":"    public void testOverwritesToDeletedColumns() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k6\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnDefinition cd = cfs.metadata.getColumnDefinition(indexedColumnName).copy();\n        IndexMetadata indexDef = IndexMetadata.singleTargetIndex(cfs.metadata,\n                                                                 new IndexTarget(cd.name,IndexTarget.Type.VALUES),\n                                                                 \"test_index\",\n                                                                 IndexMetadata.Kind.CUSTOM,\n                                                                 ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                                                 StubIndex.class.getName()));\n\n        if (!cfs.metadata.getIndexes().get(\"test_index\").isPresent())\n            cfs.metadata.indexes(cfs.metadata.getIndexes().with(indexDef));\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.getIndexByName(\"test_index\");\n        index.reset();\n\n        UpdateBuilder.create(cfs.metadata, key).withTimestamp(0).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        \r\n        new RowUpdateBuilder(cfs.metadata, 1, key).addRangeTombstone(0, 1).build().applyUnsafe();\n\n        \r\n        UpdateBuilder.create(cfs.metadata, key).withTimestamp(2).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        cfs.forceBlockingFlush();\n\n        \r\n        \r\n        assertEquals(1, index.rowsInserted.size());\n        assertEquals(1, index.rowsUpdated.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RangeTombstoneTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"MB"}],"commitId":"f5cf5716789b70f47868c8b47c540068b78c6a46","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-09-17 00:28:24","modifiedFileCount":"24","status":"M","submitter":"Sam Tunnicliffe"},{"authorTime":"2015-09-18 18:05:35","codes":[{"authorDate":"2015-09-18 18:05:35","commitOrder":11,"curCode":"    public void testRowWithRangeTombstonesUpdatesSecondaryIndex() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k5\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnDefinition cd = cfs.metadata.getColumnDefinition(indexedColumnName).copy();\n        IndexMetadata indexDef =\n            IndexMetadata.fromIndexTargets(cfs.metadata,\n                                           Collections.singletonList(new IndexTarget(cd.name, IndexTarget.Type.VALUES)),\n                                           \"test_index\",\n                                           IndexMetadata.Kind.CUSTOM,\n                                           ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                           StubIndex.class.getName()));\n\n        if (!cfs.metadata.getIndexes().get(\"test_index\").isPresent())\n            cfs.metadata.indexes(cfs.metadata.getIndexes().with(indexDef));\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.listIndexes()\n                                                     .stream()\n                                                     .filter(i -> \"test_index\".equals(i.getIndexName()))\n                                                     .findFirst()\n                                                     .orElseThrow(() -> new RuntimeException(new AssertionError(\"Index not found\")));\n        index.reset();\n\n        UpdateBuilder builder = UpdateBuilder.create(cfs.metadata, key).withTimestamp(0);\n        for (int i = 0; i < 10; i++)\n            builder.newRow(i).add(\"val\", i);\n        builder.applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        new RowUpdateBuilder(cfs.metadata, 0, key).addRangeTombstone(0, 7).build().applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        assertEquals(10, index.rowsInserted.size());\n\n        CompactionManager.instance.performMaximal(cfs, false);\n\n        \r\n        assertEquals(1, cfs.getLiveSSTables().size());\n\n        assertEquals(8, index.rowsDeleted.size());\n    }\n","date":"2015-09-18 18:05:35","endLine":505,"groupId":"30353","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRowWithRangeTombstonesUpdatesSecondaryIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/95/f38c12a5cc3c48069289c7663730a8113745f1.src","preCode":"    public void testRowWithRangeTombstonesUpdatesSecondaryIndex() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k5\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnDefinition cd = cfs.metadata.getColumnDefinition(indexedColumnName).copy();\n        IndexMetadata indexDef = IndexMetadata.singleTargetIndex(cfs.metadata,\n                                                                 new IndexTarget(cd.name, IndexTarget.Type.VALUES),\n                                                                 \"test_index\",\n                                                                 IndexMetadata.Kind.CUSTOM,\n                                                                 ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                                                 StubIndex.class.getName()));\n\n        if (!cfs.metadata.getIndexes().get(\"test_index\").isPresent())\n            cfs.metadata.indexes(cfs.metadata.getIndexes().with(indexDef));\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.listIndexes()\n                                                     .stream()\n                                                     .filter(i -> \"test_index\".equals(i.getIndexName()))\n                                                     .findFirst()\n                                                     .orElseThrow(() -> new RuntimeException(new AssertionError(\"Index not found\")));\n        index.reset();\n\n        UpdateBuilder builder = UpdateBuilder.create(cfs.metadata, key).withTimestamp(0);\n        for (int i = 0; i < 10; i++)\n            builder.newRow(i).add(\"val\", i);\n        builder.applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        new RowUpdateBuilder(cfs.metadata, 0, key).addRangeTombstone(0, 7).build().applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        assertEquals(10, index.rowsInserted.size());\n\n        CompactionManager.instance.performMaximal(cfs, false);\n\n        \r\n        assertEquals(1, cfs.getLiveSSTables().size());\n\n        assertEquals(8, index.rowsDeleted.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RangeTombstoneTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":454,"status":"M"},{"authorDate":"2015-09-18 18:05:35","commitOrder":11,"curCode":"    public void testOverwritesToDeletedColumns() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k6\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnDefinition cd = cfs.metadata.getColumnDefinition(indexedColumnName).copy();\n        IndexMetadata indexDef =\n            IndexMetadata.fromIndexTargets(cfs.metadata,\n                                           Collections.singletonList(new IndexTarget(cd.name, IndexTarget.Type.VALUES)),\n                                           \"test_index\",\n                                           IndexMetadata.Kind.CUSTOM,\n                                           ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                           StubIndex.class.getName()));\n\n        if (!cfs.metadata.getIndexes().get(\"test_index\").isPresent())\n            cfs.metadata.indexes(cfs.metadata.getIndexes().with(indexDef));\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.getIndexByName(\"test_index\");\n        index.reset();\n\n        UpdateBuilder.create(cfs.metadata, key).withTimestamp(0).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        \r\n        new RowUpdateBuilder(cfs.metadata, 1, key).addRangeTombstone(0, 1).build().applyUnsafe();\n\n        \r\n        UpdateBuilder.create(cfs.metadata, key).withTimestamp(2).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        cfs.forceBlockingFlush();\n\n        \r\n        \r\n        assertEquals(1, index.rowsInserted.size());\n        assertEquals(1, index.rowsUpdated.size());\n    }\n","date":"2015-09-18 18:05:35","endLine":596,"groupId":"20761","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverwritesToDeletedColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/95/f38c12a5cc3c48069289c7663730a8113745f1.src","preCode":"    public void testOverwritesToDeletedColumns() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k6\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnDefinition cd = cfs.metadata.getColumnDefinition(indexedColumnName).copy();\n        IndexMetadata indexDef = IndexMetadata.singleTargetIndex(cfs.metadata,\n                                                                 new IndexTarget(cd.name,IndexTarget.Type.VALUES),\n                                                                 \"test_index\",\n                                                                 IndexMetadata.Kind.CUSTOM,\n                                                                 ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                                                 StubIndex.class.getName()));\n\n        if (!cfs.metadata.getIndexes().get(\"test_index\").isPresent())\n            cfs.metadata.indexes(cfs.metadata.getIndexes().with(indexDef));\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.getIndexByName(\"test_index\");\n        index.reset();\n\n        UpdateBuilder.create(cfs.metadata, key).withTimestamp(0).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        \r\n        new RowUpdateBuilder(cfs.metadata, 1, key).addRangeTombstone(0, 1).build().applyUnsafe();\n\n        \r\n        UpdateBuilder.create(cfs.metadata, key).withTimestamp(2).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        cfs.forceBlockingFlush();\n\n        \r\n        \r\n        assertEquals(1, index.rowsInserted.size());\n        assertEquals(1, index.rowsUpdated.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RangeTombstoneTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"M"}],"commitId":"82dfc290db439cac73848dac2c3ff09adc02f4c5","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-09-18 18:05:35","modifiedFileCount":"9","status":"M","submitter":"Sam Tunnicliffe"},{"authorTime":"2015-09-18 18:05:35","codes":[{"authorDate":"2015-10-28 17:41:01","commitOrder":12,"curCode":"    public void testRowWithRangeTombstonesUpdatesSecondaryIndex() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k5\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnDefinition cd = cfs.metadata.getColumnDefinition(indexedColumnName).copy();\n        IndexMetadata indexDef =\n            IndexMetadata.fromIndexTargets(cfs.metadata,\n                                           Collections.singletonList(new IndexTarget(cd.name, IndexTarget.Type.VALUES)),\n                                           \"test_index\",\n                                           IndexMetadata.Kind.CUSTOM,\n                                           ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                           StubIndex.class.getName()));\n\n        if (!cfs.metadata.getIndexes().get(\"test_index\").isPresent())\n            cfs.metadata.indexes(cfs.metadata.getIndexes().with(indexDef));\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.listIndexes()\n                                                     .stream()\n                                                     .filter(i -> \"test_index\".equals(i.getIndexMetadata().name))\n                                                     .findFirst()\n                                                     .orElseThrow(() -> new RuntimeException(new AssertionError(\"Index not found\")));\n        index.reset();\n\n        UpdateBuilder builder = UpdateBuilder.create(cfs.metadata, key).withTimestamp(0);\n        for (int i = 0; i < 10; i++)\n            builder.newRow(i).add(\"val\", i);\n        builder.applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        new RowUpdateBuilder(cfs.metadata, 0, key).addRangeTombstone(0, 7).build().applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        assertEquals(10, index.rowsInserted.size());\n\n        CompactionManager.instance.performMaximal(cfs, false);\n\n        \r\n        assertEquals(1, cfs.getLiveSSTables().size());\n\n        assertEquals(8, index.rowsDeleted.size());\n    }\n","date":"2015-10-28 17:41:01","endLine":505,"groupId":"20758","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRowWithRangeTombstonesUpdatesSecondaryIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/a6/ee48fd2f69ba06fb356be88413ddcaa55c4eda.src","preCode":"    public void testRowWithRangeTombstonesUpdatesSecondaryIndex() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k5\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnDefinition cd = cfs.metadata.getColumnDefinition(indexedColumnName).copy();\n        IndexMetadata indexDef =\n            IndexMetadata.fromIndexTargets(cfs.metadata,\n                                           Collections.singletonList(new IndexTarget(cd.name, IndexTarget.Type.VALUES)),\n                                           \"test_index\",\n                                           IndexMetadata.Kind.CUSTOM,\n                                           ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                           StubIndex.class.getName()));\n\n        if (!cfs.metadata.getIndexes().get(\"test_index\").isPresent())\n            cfs.metadata.indexes(cfs.metadata.getIndexes().with(indexDef));\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.listIndexes()\n                                                     .stream()\n                                                     .filter(i -> \"test_index\".equals(i.getIndexName()))\n                                                     .findFirst()\n                                                     .orElseThrow(() -> new RuntimeException(new AssertionError(\"Index not found\")));\n        index.reset();\n\n        UpdateBuilder builder = UpdateBuilder.create(cfs.metadata, key).withTimestamp(0);\n        for (int i = 0; i < 10; i++)\n            builder.newRow(i).add(\"val\", i);\n        builder.applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        new RowUpdateBuilder(cfs.metadata, 0, key).addRangeTombstone(0, 7).build().applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        assertEquals(10, index.rowsInserted.size());\n\n        CompactionManager.instance.performMaximal(cfs, false);\n\n        \r\n        assertEquals(1, cfs.getLiveSSTables().size());\n\n        assertEquals(8, index.rowsDeleted.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RangeTombstoneTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":454,"status":"M"},{"authorDate":"2015-09-18 18:05:35","commitOrder":12,"curCode":"    public void testOverwritesToDeletedColumns() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k6\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnDefinition cd = cfs.metadata.getColumnDefinition(indexedColumnName).copy();\n        IndexMetadata indexDef =\n            IndexMetadata.fromIndexTargets(cfs.metadata,\n                                           Collections.singletonList(new IndexTarget(cd.name, IndexTarget.Type.VALUES)),\n                                           \"test_index\",\n                                           IndexMetadata.Kind.CUSTOM,\n                                           ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                           StubIndex.class.getName()));\n\n        if (!cfs.metadata.getIndexes().get(\"test_index\").isPresent())\n            cfs.metadata.indexes(cfs.metadata.getIndexes().with(indexDef));\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.getIndexByName(\"test_index\");\n        index.reset();\n\n        UpdateBuilder.create(cfs.metadata, key).withTimestamp(0).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        \r\n        new RowUpdateBuilder(cfs.metadata, 1, key).addRangeTombstone(0, 1).build().applyUnsafe();\n\n        \r\n        UpdateBuilder.create(cfs.metadata, key).withTimestamp(2).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        cfs.forceBlockingFlush();\n\n        \r\n        \r\n        assertEquals(1, index.rowsInserted.size());\n        assertEquals(1, index.rowsUpdated.size());\n    }\n","date":"2015-09-18 18:05:35","endLine":596,"groupId":"20761","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverwritesToDeletedColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/95/f38c12a5cc3c48069289c7663730a8113745f1.src","preCode":"    public void testOverwritesToDeletedColumns() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k6\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnDefinition cd = cfs.metadata.getColumnDefinition(indexedColumnName).copy();\n        IndexMetadata indexDef =\n            IndexMetadata.fromIndexTargets(cfs.metadata,\n                                           Collections.singletonList(new IndexTarget(cd.name, IndexTarget.Type.VALUES)),\n                                           \"test_index\",\n                                           IndexMetadata.Kind.CUSTOM,\n                                           ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                           StubIndex.class.getName()));\n\n        if (!cfs.metadata.getIndexes().get(\"test_index\").isPresent())\n            cfs.metadata.indexes(cfs.metadata.getIndexes().with(indexDef));\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.getIndexByName(\"test_index\");\n        index.reset();\n\n        UpdateBuilder.create(cfs.metadata, key).withTimestamp(0).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        \r\n        new RowUpdateBuilder(cfs.metadata, 1, key).addRangeTombstone(0, 1).build().applyUnsafe();\n\n        \r\n        UpdateBuilder.create(cfs.metadata, key).withTimestamp(2).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        cfs.forceBlockingFlush();\n\n        \r\n        \r\n        assertEquals(1, index.rowsInserted.size());\n        assertEquals(1, index.rowsUpdated.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RangeTombstoneTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"N"}],"commitId":"81183d6e2ff2501b43c68b0add16e7b4120cd2d4","commitMessage":"@@@Merge branch 'cassandra-3.0' into trunk\n","date":"2015-10-28 17:41:01","modifiedFileCount":"7","status":"M","submitter":"Sam Tunnicliffe"},{"authorTime":"2016-11-10 09:16:59","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":13,"curCode":"    public void testRowWithRangeTombstonesUpdatesSecondaryIndex() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k5\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnMetadata cd = cfs.metadata().getColumn(indexedColumnName).copy();\n        IndexMetadata indexDef =\n            IndexMetadata.fromIndexTargets(\n            Collections.singletonList(new IndexTarget(cd.name, IndexTarget.Type.VALUES)),\n                                           \"test_index\",\n                                           IndexMetadata.Kind.CUSTOM,\n                                           ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                           StubIndex.class.getName()));\n\n        TableMetadata current = cfs.metadata();\n\n        if (!current.indexes.get(\"test_index\").isPresent())\n        {\n            TableMetadata updated =\n                current.unbuild()\n                       .indexes(current.indexes.with(indexDef))\n                       .build();\n            MigrationManager.announceTableUpdate(updated, true);\n        }\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.listIndexes()\n                                                     .stream()\n                                                     .filter(i -> \"test_index\".equals(i.getIndexMetadata().name))\n                                                     .findFirst()\n                                                     .orElseThrow(() -> new RuntimeException(new AssertionError(\"Index not found\")));\n        index.reset();\n\n        UpdateBuilder builder = UpdateBuilder.create(cfs.metadata(), key).withTimestamp(0);\n        for (int i = 0; i < 10; i++)\n            builder.newRow(i).add(\"val\", i);\n        builder.applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        new RowUpdateBuilder(cfs.metadata(), 0, key).addRangeTombstone(0, 7).build().applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        assertEquals(10, index.rowsInserted.size());\n\n        CompactionManager.instance.performMaximal(cfs, false);\n\n        \r\n        assertEquals(1, cfs.getLiveSSTables().size());\n\n        assertEquals(8, index.rowsDeleted.size());\n    }\n","date":"2017-01-28 06:17:46","endLine":511,"groupId":"27212","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRowWithRangeTombstonesUpdatesSecondaryIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/4f/9b12ffa8aad9673c19dc72c1be4953d0e5cc72.src","preCode":"    public void testRowWithRangeTombstonesUpdatesSecondaryIndex() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k5\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnDefinition cd = cfs.metadata.getColumnDefinition(indexedColumnName).copy();\n        IndexMetadata indexDef =\n            IndexMetadata.fromIndexTargets(cfs.metadata,\n                                           Collections.singletonList(new IndexTarget(cd.name, IndexTarget.Type.VALUES)),\n                                           \"test_index\",\n                                           IndexMetadata.Kind.CUSTOM,\n                                           ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                           StubIndex.class.getName()));\n\n        if (!cfs.metadata.getIndexes().get(\"test_index\").isPresent())\n            cfs.metadata.indexes(cfs.metadata.getIndexes().with(indexDef));\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.listIndexes()\n                                                     .stream()\n                                                     .filter(i -> \"test_index\".equals(i.getIndexMetadata().name))\n                                                     .findFirst()\n                                                     .orElseThrow(() -> new RuntimeException(new AssertionError(\"Index not found\")));\n        index.reset();\n\n        UpdateBuilder builder = UpdateBuilder.create(cfs.metadata, key).withTimestamp(0);\n        for (int i = 0; i < 10; i++)\n            builder.newRow(i).add(\"val\", i);\n        builder.applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        new RowUpdateBuilder(cfs.metadata, 0, key).addRangeTombstone(0, 7).build().applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        assertEquals(10, index.rowsInserted.size());\n\n        CompactionManager.instance.performMaximal(cfs, false);\n\n        \r\n        assertEquals(1, cfs.getLiveSSTables().size());\n\n        assertEquals(8, index.rowsDeleted.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RangeTombstoneTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":452,"status":"M"},{"authorDate":"2016-11-10 09:16:59","commitOrder":13,"curCode":"    public void testOverwritesToDeletedColumns() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k6\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnMetadata cd = cfs.metadata().getColumn(indexedColumnName).copy();\n        IndexMetadata indexDef =\n            IndexMetadata.fromIndexTargets(\n            Collections.singletonList(new IndexTarget(cd.name, IndexTarget.Type.VALUES)),\n                                           \"test_index\",\n                                           IndexMetadata.Kind.CUSTOM,\n                                           ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                           StubIndex.class.getName()));\n\n        TableMetadata current = cfs.metadata();\n\n        if (!current.indexes.get(\"test_index\").isPresent())\n        {\n            TableMetadata updated =\n                current.unbuild()\n                       .indexes(current.indexes.with(indexDef))\n                       .build();\n            MigrationManager.announceTableUpdate(updated, true);\n        }\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.getIndexByName(\"test_index\");\n        index.reset();\n\n        UpdateBuilder.create(cfs.metadata(), key).withTimestamp(0).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        \r\n        new RowUpdateBuilder(cfs.metadata(), 1, key).addRangeTombstone(0, 1).build().applyUnsafe();\n\n        \r\n        UpdateBuilder.create(cfs.metadata(), key).withTimestamp(2).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        cfs.forceBlockingFlush();\n\n        \r\n        \r\n        assertEquals(1, index.rowsInserted.size());\n        assertEquals(1, index.rowsUpdated.size());\n    }\n","date":"2017-01-28 06:17:46","endLine":610,"groupId":"27213","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverwritesToDeletedColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/4f/9b12ffa8aad9673c19dc72c1be4953d0e5cc72.src","preCode":"    public void testOverwritesToDeletedColumns() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k6\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnDefinition cd = cfs.metadata.getColumnDefinition(indexedColumnName).copy();\n        IndexMetadata indexDef =\n            IndexMetadata.fromIndexTargets(cfs.metadata,\n                                           Collections.singletonList(new IndexTarget(cd.name, IndexTarget.Type.VALUES)),\n                                           \"test_index\",\n                                           IndexMetadata.Kind.CUSTOM,\n                                           ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                           StubIndex.class.getName()));\n\n        if (!cfs.metadata.getIndexes().get(\"test_index\").isPresent())\n            cfs.metadata.indexes(cfs.metadata.getIndexes().with(indexDef));\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.getIndexByName(\"test_index\");\n        index.reset();\n\n        UpdateBuilder.create(cfs.metadata, key).withTimestamp(0).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        \r\n        new RowUpdateBuilder(cfs.metadata, 1, key).addRangeTombstone(0, 1).build().applyUnsafe();\n\n        \r\n        UpdateBuilder.create(cfs.metadata, key).withTimestamp(2).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        cfs.forceBlockingFlush();\n\n        \r\n        \r\n        assertEquals(1, index.rowsInserted.size());\n        assertEquals(1, index.rowsUpdated.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RangeTombstoneTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":558,"status":"M"}],"commitId":"af3fe39dcabd9ef77a00309ce6741268423206df","commitMessage":"@@@Make TableMetadata immutable.  optimize Schema\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-9425\n","date":"2017-01-28 06:17:46","modifiedFileCount":"511","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2017-07-26 23:56:59","codes":[{"authorDate":"2017-07-26 23:56:59","commitOrder":14,"curCode":"    public void testRowWithRangeTombstonesUpdatesSecondaryIndex() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k5\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnMetadata cd = cfs.metadata().getColumn(indexedColumnName).copy();\n        IndexMetadata indexDef =\n            IndexMetadata.fromIndexTargets(\n            Collections.singletonList(new IndexTarget(cd.name, IndexTarget.Type.VALUES)),\n                                           \"test_index\",\n                                           IndexMetadata.Kind.CUSTOM,\n                                           ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                           StubIndex.class.getName()));\n\n        TableMetadata current = cfs.metadata();\n\n        if (!current.indexes.get(\"test_index\").isPresent())\n        {\n            TableMetadata updated =\n                current.unbuild()\n                       .indexes(current.indexes.with(indexDef))\n                       .build();\n            MigrationManager.announceTableUpdate(updated, true);\n        }\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef, false);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.listIndexes()\n                                                     .stream()\n                                                     .filter(i -> \"test_index\".equals(i.getIndexMetadata().name))\n                                                     .findFirst()\n                                                     .orElseThrow(() -> new RuntimeException(new AssertionError(\"Index not found\")));\n        index.reset();\n\n        UpdateBuilder builder = UpdateBuilder.create(cfs.metadata(), key).withTimestamp(0);\n        for (int i = 0; i < 10; i++)\n            builder.newRow(i).add(\"val\", i);\n        builder.applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        new RowUpdateBuilder(cfs.metadata(), 0, key).addRangeTombstone(0, 7).build().applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        assertEquals(10, index.rowsInserted.size());\n\n        CompactionManager.instance.performMaximal(cfs, false);\n\n        \r\n        assertEquals(1, cfs.getLiveSSTables().size());\n\n        assertEquals(8, index.rowsDeleted.size());\n    }\n","date":"2017-07-26 23:56:59","endLine":511,"groupId":"10751","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRowWithRangeTombstonesUpdatesSecondaryIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/44/9a613d34df416defa59b7ebb2896bc7c5121a1.src","preCode":"    public void testRowWithRangeTombstonesUpdatesSecondaryIndex() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k5\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnMetadata cd = cfs.metadata().getColumn(indexedColumnName).copy();\n        IndexMetadata indexDef =\n            IndexMetadata.fromIndexTargets(\n            Collections.singletonList(new IndexTarget(cd.name, IndexTarget.Type.VALUES)),\n                                           \"test_index\",\n                                           IndexMetadata.Kind.CUSTOM,\n                                           ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                           StubIndex.class.getName()));\n\n        TableMetadata current = cfs.metadata();\n\n        if (!current.indexes.get(\"test_index\").isPresent())\n        {\n            TableMetadata updated =\n                current.unbuild()\n                       .indexes(current.indexes.with(indexDef))\n                       .build();\n            MigrationManager.announceTableUpdate(updated, true);\n        }\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.listIndexes()\n                                                     .stream()\n                                                     .filter(i -> \"test_index\".equals(i.getIndexMetadata().name))\n                                                     .findFirst()\n                                                     .orElseThrow(() -> new RuntimeException(new AssertionError(\"Index not found\")));\n        index.reset();\n\n        UpdateBuilder builder = UpdateBuilder.create(cfs.metadata(), key).withTimestamp(0);\n        for (int i = 0; i < 10; i++)\n            builder.newRow(i).add(\"val\", i);\n        builder.applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        new RowUpdateBuilder(cfs.metadata(), 0, key).addRangeTombstone(0, 7).build().applyUnsafe();\n        cfs.forceBlockingFlush();\n\n        assertEquals(10, index.rowsInserted.size());\n\n        CompactionManager.instance.performMaximal(cfs, false);\n\n        \r\n        assertEquals(1, cfs.getLiveSSTables().size());\n\n        assertEquals(8, index.rowsDeleted.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RangeTombstoneTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":452,"status":"M"},{"authorDate":"2017-07-26 23:56:59","commitOrder":14,"curCode":"    public void testOverwritesToDeletedColumns() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k6\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnMetadata cd = cfs.metadata().getColumn(indexedColumnName).copy();\n        IndexMetadata indexDef =\n            IndexMetadata.fromIndexTargets(\n            Collections.singletonList(new IndexTarget(cd.name, IndexTarget.Type.VALUES)),\n                                           \"test_index\",\n                                           IndexMetadata.Kind.CUSTOM,\n                                           ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                           StubIndex.class.getName()));\n\n        TableMetadata current = cfs.metadata();\n\n        if (!current.indexes.get(\"test_index\").isPresent())\n        {\n            TableMetadata updated =\n                current.unbuild()\n                       .indexes(current.indexes.with(indexDef))\n                       .build();\n            MigrationManager.announceTableUpdate(updated, true);\n        }\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef, false);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.getIndexByName(\"test_index\");\n        index.reset();\n\n        UpdateBuilder.create(cfs.metadata(), key).withTimestamp(0).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        \r\n        new RowUpdateBuilder(cfs.metadata(), 1, key).addRangeTombstone(0, 1).build().applyUnsafe();\n\n        \r\n        UpdateBuilder.create(cfs.metadata(), key).withTimestamp(2).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        cfs.forceBlockingFlush();\n\n        \r\n        \r\n        assertEquals(1, index.rowsInserted.size());\n        assertEquals(1, index.rowsUpdated.size());\n    }\n","date":"2017-07-26 23:56:59","endLine":610,"groupId":"10751","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testOverwritesToDeletedColumns","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/44/9a613d34df416defa59b7ebb2896bc7c5121a1.src","preCode":"    public void testOverwritesToDeletedColumns() throws Exception\n    {\n        Keyspace table = Keyspace.open(KSNAME);\n        ColumnFamilyStore cfs = table.getColumnFamilyStore(CFNAME);\n        ByteBuffer key = ByteBufferUtil.bytes(\"k6\");\n        ByteBuffer indexedColumnName = ByteBufferUtil.bytes(\"val\");\n\n        cfs.truncateBlocking();\n        cfs.disableAutoCompaction();\n\n        ColumnMetadata cd = cfs.metadata().getColumn(indexedColumnName).copy();\n        IndexMetadata indexDef =\n            IndexMetadata.fromIndexTargets(\n            Collections.singletonList(new IndexTarget(cd.name, IndexTarget.Type.VALUES)),\n                                           \"test_index\",\n                                           IndexMetadata.Kind.CUSTOM,\n                                           ImmutableMap.of(IndexTarget.CUSTOM_INDEX_OPTION_NAME,\n                                                           StubIndex.class.getName()));\n\n        TableMetadata current = cfs.metadata();\n\n        if (!current.indexes.get(\"test_index\").isPresent())\n        {\n            TableMetadata updated =\n                current.unbuild()\n                       .indexes(current.indexes.with(indexDef))\n                       .build();\n            MigrationManager.announceTableUpdate(updated, true);\n        }\n\n        Future<?> rebuild = cfs.indexManager.addIndex(indexDef);\n        \r\n        if (rebuild != null)\n            rebuild.get();\n\n        StubIndex index = (StubIndex)cfs.indexManager.getIndexByName(\"test_index\");\n        index.reset();\n\n        UpdateBuilder.create(cfs.metadata(), key).withTimestamp(0).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        \r\n        new RowUpdateBuilder(cfs.metadata(), 1, key).addRangeTombstone(0, 1).build().applyUnsafe();\n\n        \r\n        UpdateBuilder.create(cfs.metadata(), key).withTimestamp(2).newRow(1).add(\"val\", 1).applyUnsafe();\n\n        cfs.forceBlockingFlush();\n\n        \r\n        \r\n        assertEquals(1, index.rowsInserted.size());\n        assertEquals(1, index.rowsUpdated.size());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RangeTombstoneTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":558,"status":"M"}],"commitId":"6e19e81db8e4c43bf5ef33308de1ae79916bb61c","commitMessage":"@@@Avoid always rebuilding secondary indexes at startup\n\npatch by Sergio Bossa; reviewed by Andres de la Pe?a for CASSANDRA-13725\n","date":"2017-07-26 23:56:59","modifiedFileCount":"4","status":"M","submitter":"Andre?s de la Pen?a"}]
