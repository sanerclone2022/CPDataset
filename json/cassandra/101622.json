[{"authorTime":"2017-03-24 00:45:54","codes":[{"authorDate":"2017-03-24 00:45:54","commitOrder":1,"curCode":"    public void testIndexOnFrozenCollectionOfUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v frozen<set<frozen<\" + type + \">>>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1, udt2));\n        assertInvalidMessage(\"Frozen collections only support full()\", \"CREATE INDEX idx ON %s (keys(v))\");\n        assertInvalidMessage(\"Frozen collections only support full()\", \"CREATE INDEX idx ON %s (values(v))\");\n        execute(\"CREATE INDEX idx ON %s (full(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        assertTrue(waitForIndex(keyspace(), tableName, \"idx\"));\n\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt1, udt2)), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 2\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.idx\");\n        assertInvalidMessage(\"Index 'idx' could not be found\", \"DROP INDEX \" + KEYSPACE + \".idx\");\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","date":"2017-03-24 00:45:54","endLine":1455,"groupId":"6494","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexOnFrozenCollectionOfUDT","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ff/e958108a187bd1da40c7b2314fc143824c26bc.src","preCode":"    public void testIndexOnFrozenCollectionOfUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v frozen<set<frozen<\" + type + \">>>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1, udt2));\n        assertInvalidMessage(\"Frozen collections only support full()\", \"CREATE INDEX idx ON %s (keys(v))\");\n        assertInvalidMessage(\"Frozen collections only support full()\", \"CREATE INDEX idx ON %s (values(v))\");\n        execute(\"CREATE INDEX idx ON %s (full(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        assertTrue(waitForIndex(keyspace(), tableName, \"idx\"));\n\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt1, udt2)), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 2\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.idx\");\n        assertInvalidMessage(\"Index 'idx' could not be found\", \"DROP INDEX \" + KEYSPACE + \".idx\");\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/entities/SecondaryIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1426,"status":"B"},{"authorDate":"2017-03-24 00:45:54","commitOrder":1,"curCode":"    public void testIndexOnNonFrozenCollectionOfFrozenUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v set<frozen<\" + type + \">>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1));\n        assertInvalidMessage(\"Cannot create index on keys of column v with non-map type\",\n                             \"CREATE INDEX idx ON %s (keys(v))\");\n        assertInvalidMessage(\"full() indexes can only be created on frozen collections\",\n                             \"CREATE INDEX idx ON %s (full(v))\");\n        execute(\"CREATE INDEX idx ON %s (values(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        execute(\"UPDATE %s SET v = v + ? WHERE k = ?\", set(udt2), 1);\n        assertTrue(waitForIndex(keyspace(), tableName, \"idx\"));\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(1, set(udt1, udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 1\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(2, set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.idx\");\n        assertInvalidMessage(\"Index 'idx' could not be found\", \"DROP INDEX \" + KEYSPACE + \".idx\");\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","date":"2017-03-24 00:45:54","endLine":1488,"groupId":"13360","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexOnNonFrozenCollectionOfFrozenUDT","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ff/e958108a187bd1da40c7b2314fc143824c26bc.src","preCode":"    public void testIndexOnNonFrozenCollectionOfFrozenUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v set<frozen<\" + type + \">>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1));\n        assertInvalidMessage(\"Cannot create index on keys of column v with non-map type\",\n                             \"CREATE INDEX idx ON %s (keys(v))\");\n        assertInvalidMessage(\"full() indexes can only be created on frozen collections\",\n                             \"CREATE INDEX idx ON %s (full(v))\");\n        execute(\"CREATE INDEX idx ON %s (values(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        execute(\"UPDATE %s SET v = v + ? WHERE k = ?\", set(udt2), 1);\n        assertTrue(waitForIndex(keyspace(), tableName, \"idx\"));\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(1, set(udt1, udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 1\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(2, set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.idx\");\n        assertInvalidMessage(\"Index 'idx' could not be found\", \"DROP INDEX \" + KEYSPACE + \".idx\");\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/entities/SecondaryIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1458,"status":"B"}],"commitId":"18c6ed25e30c0cc444d7cfda929ef7677309c57b","commitMessage":"@@@Merge branch cassandra-3.11 into trunk\n","date":"2017-03-24 00:45:54","modifiedFileCount":"4","status":"B","submitter":"Benjamin Lerer"},{"authorTime":"2017-05-08 21:54:01","codes":[{"authorDate":"2017-05-08 21:54:01","commitOrder":2,"curCode":"    public void testIndexOnFrozenCollectionOfUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v frozen<set<frozen<\" + type + \">>>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1, udt2));\n        assertInvalidMessage(\"Frozen collections only support full()\", \"CREATE INDEX idx ON %s (keys(v))\");\n        assertInvalidMessage(\"Frozen collections only support full()\", \"CREATE INDEX idx ON %s (values(v))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (full(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        assertTrue(waitForIndex(keyspace(), tableName, indexName));\n\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt1, udt2)), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 2\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.\" + indexName);\n        assertInvalidMessage(String.format(\"Index '%s' could not be found\", indexName),\n                             String.format(\"DROP INDEX %s.%s\", KEYSPACE, indexName));\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","date":"2017-05-08 21:54:01","endLine":1480,"groupId":"13359","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexOnFrozenCollectionOfUDT","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c5/fb45d3633b38c84382f4132a76d3a13523b18e.src","preCode":"    public void testIndexOnFrozenCollectionOfUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v frozen<set<frozen<\" + type + \">>>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1, udt2));\n        assertInvalidMessage(\"Frozen collections only support full()\", \"CREATE INDEX idx ON %s (keys(v))\");\n        assertInvalidMessage(\"Frozen collections only support full()\", \"CREATE INDEX idx ON %s (values(v))\");\n        execute(\"CREATE INDEX idx ON %s (full(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        assertTrue(waitForIndex(keyspace(), tableName, \"idx\"));\n\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt1, udt2)), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 2\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.idx\");\n        assertInvalidMessage(\"Index 'idx' could not be found\", \"DROP INDEX \" + KEYSPACE + \".idx\");\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/entities/SecondaryIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1450,"status":"M"},{"authorDate":"2017-05-08 21:54:01","commitOrder":2,"curCode":"    public void testIndexOnNonFrozenCollectionOfFrozenUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v set<frozen<\" + type + \">>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1));\n        assertInvalidMessage(\"Cannot create index on keys of column v with non-map type\",\n                             \"CREATE INDEX ON %s (keys(v))\");\n        assertInvalidMessage(\"full() indexes can only be created on frozen collections\",\n                             \"CREATE INDEX ON %s (full(v))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (values(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        execute(\"UPDATE %s SET v = v + ? WHERE k = ?\", set(udt2), 1);\n        assertTrue(waitForIndex(keyspace(), tableName, indexName));\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(1, set(udt1, udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 1\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(2, set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.\" + indexName);\n        assertInvalidMessage(String.format(\"Index '%s' could not be found\", indexName),\n                             String.format(\"DROP INDEX %s.%s\", KEYSPACE, indexName));\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","date":"2017-05-08 21:54:01","endLine":1514,"groupId":"13360","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexOnNonFrozenCollectionOfFrozenUDT","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c5/fb45d3633b38c84382f4132a76d3a13523b18e.src","preCode":"    public void testIndexOnNonFrozenCollectionOfFrozenUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v set<frozen<\" + type + \">>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1));\n        assertInvalidMessage(\"Cannot create index on keys of column v with non-map type\",\n                             \"CREATE INDEX idx ON %s (keys(v))\");\n        assertInvalidMessage(\"full() indexes can only be created on frozen collections\",\n                             \"CREATE INDEX idx ON %s (full(v))\");\n        execute(\"CREATE INDEX idx ON %s (values(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        execute(\"UPDATE %s SET v = v + ? WHERE k = ?\", set(udt2), 1);\n        assertTrue(waitForIndex(keyspace(), tableName, \"idx\"));\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(1, set(udt1, udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 1\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(2, set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.idx\");\n        assertInvalidMessage(\"Index 'idx' could not be found\", \"DROP INDEX \" + KEYSPACE + \".idx\");\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/entities/SecondaryIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1483,"status":"M"}],"commitId":"cff8dadbe853c43fc53a827fce965d85e30d5de7","commitMessage":"@@@Make CQLTester.createIndex return the index name\n\npatch by Andr?s de la Pe?a; reviewed by Benjamin Lerer for CASSANDRA-13385\n","date":"2017-05-08 21:54:01","modifiedFileCount":"4","status":"M","submitter":"Andr?s de la Pe?a"},{"authorTime":"2016-11-10 09:17:36","codes":[{"authorDate":"2016-11-10 09:17:36","commitOrder":3,"curCode":"    public void testIndexOnFrozenCollectionOfUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v frozen<set<frozen<\" + type + \">>>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1, udt2));\n        assertInvalidMessage(\"Frozen collections only support full()\", \"CREATE INDEX idx ON %s (keys(v))\");\n        assertInvalidMessage(\"Frozen collections only support full()\", \"CREATE INDEX idx ON %s (values(v))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (full(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        assertTrue(waitForIndex(keyspace(), tableName, indexName));\n\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt1, udt2)), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 2\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.\" + indexName);\n        assertInvalidMessage(format(\"Index '%s.%s' doesn't exist\", KEYSPACE, indexName),\n                             format(\"DROP INDEX %s.%s\", KEYSPACE, indexName));\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","date":"2018-07-17 23:39:41","endLine":1426,"groupId":"13359","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexOnFrozenCollectionOfUDT","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/2b/2880d935285ad042cc0452508d748e0a703bac.src","preCode":"    public void testIndexOnFrozenCollectionOfUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v frozen<set<frozen<\" + type + \">>>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1, udt2));\n        assertInvalidMessage(\"Frozen collections only support full()\", \"CREATE INDEX idx ON %s (keys(v))\");\n        assertInvalidMessage(\"Frozen collections only support full()\", \"CREATE INDEX idx ON %s (values(v))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (full(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        assertTrue(waitForIndex(keyspace(), tableName, indexName));\n\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt1, udt2)), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 2\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.\" + indexName);\n        assertInvalidMessage(String.format(\"Index '%s' could not be found\", indexName),\n                             String.format(\"DROP INDEX %s.%s\", KEYSPACE, indexName));\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/entities/SecondaryIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1396,"status":"M"},{"authorDate":"2016-11-10 09:17:36","commitOrder":3,"curCode":"    public void testIndexOnNonFrozenCollectionOfFrozenUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v set<frozen<\" + type + \">>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1));\n        assertInvalidMessage(\"Cannot create index on keys of column v with non-map type\",\n                             \"CREATE INDEX ON %s (keys(v))\");\n        assertInvalidMessage(\"full() indexes can only be created on frozen collections\",\n                             \"CREATE INDEX ON %s (full(v))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (values(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        execute(\"UPDATE %s SET v = v + ? WHERE k = ?\", set(udt2), 1);\n        assertTrue(waitForIndex(keyspace(), tableName, indexName));\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(1, set(udt1, udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 1\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(2, set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.\" + indexName);\n        assertInvalidMessage(format(\"Index '%s.%s' doesn't exist\", KEYSPACE, indexName),\n                             format(\"DROP INDEX %s.%s\", KEYSPACE, indexName));\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","date":"2018-07-17 23:39:41","endLine":1460,"groupId":"13360","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexOnNonFrozenCollectionOfFrozenUDT","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/2b/2880d935285ad042cc0452508d748e0a703bac.src","preCode":"    public void testIndexOnNonFrozenCollectionOfFrozenUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v set<frozen<\" + type + \">>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1));\n        assertInvalidMessage(\"Cannot create index on keys of column v with non-map type\",\n                             \"CREATE INDEX ON %s (keys(v))\");\n        assertInvalidMessage(\"full() indexes can only be created on frozen collections\",\n                             \"CREATE INDEX ON %s (full(v))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (values(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        execute(\"UPDATE %s SET v = v + ? WHERE k = ?\", set(udt2), 1);\n        assertTrue(waitForIndex(keyspace(), tableName, indexName));\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(1, set(udt1, udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 1\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(2, set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.\" + indexName);\n        assertInvalidMessage(String.format(\"Index '%s' could not be found\", indexName),\n                             String.format(\"DROP INDEX %s.%s\", KEYSPACE, indexName));\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/entities/SecondaryIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1429,"status":"M"}],"commitId":"207c80c1fd63dfbd8ca7e615ec8002ee8983c5d6","commitMessage":"@@@Make all DDL statements idempotent and not dependent on global state\n\npatch by Aleksey Yeschenko; reviewed by Sam Tunnicliffe for\nCASSANDRA-13426\n","date":"2018-07-17 23:39:41","modifiedFileCount":"165","status":"M","submitter":"Aleksey Yeschenko"},{"authorTime":"2016-11-10 09:17:36","codes":[{"authorDate":"2020-06-30 09:05:26","commitOrder":4,"curCode":"    public void testIndexOnFrozenCollectionOfUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v frozen<set<frozen<\" + type + \">>>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1, udt2));\n        assertInvalidMessage(\"Frozen collections are immutable and must be fully indexed\", \"CREATE INDEX idx ON %s (keys(v))\");\n        assertInvalidMessage(\"Frozen collections are immutable and must be fully indexed\", \"CREATE INDEX idx ON %s (values(v))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (full(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        assertTrue(waitForIndex(keyspace(), tableName, indexName));\n\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt1, udt2)), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 2\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.\" + indexName);\n        assertInvalidMessage(format(\"Index '%s.%s' doesn't exist\", KEYSPACE, indexName),\n                             format(\"DROP INDEX %s.%s\", KEYSPACE, indexName));\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","date":"2020-07-15 00:08:54","endLine":1507,"groupId":"101622","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testIndexOnFrozenCollectionOfUDT","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/94/7e8b5e29d16ac3827ada51a6b179a821e08c6b.src","preCode":"    public void testIndexOnFrozenCollectionOfUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v frozen<set<frozen<\" + type + \">>>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1, udt2));\n        assertInvalidMessage(\"Frozen collections only support full()\", \"CREATE INDEX idx ON %s (keys(v))\");\n        assertInvalidMessage(\"Frozen collections only support full()\", \"CREATE INDEX idx ON %s (values(v))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (full(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        assertTrue(waitForIndex(keyspace(), tableName, indexName));\n\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt1, udt2)), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 2\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v = ?\", set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.\" + indexName);\n        assertInvalidMessage(format(\"Index '%s.%s' doesn't exist\", KEYSPACE, indexName),\n                             format(\"DROP INDEX %s.%s\", KEYSPACE, indexName));\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/entities/SecondaryIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1477,"status":"M"},{"authorDate":"2016-11-10 09:17:36","commitOrder":4,"curCode":"    public void testIndexOnNonFrozenCollectionOfFrozenUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v set<frozen<\" + type + \">>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1));\n        assertInvalidMessage(\"Cannot create index on keys of column v with non-map type\",\n                             \"CREATE INDEX ON %s (keys(v))\");\n        assertInvalidMessage(\"full() indexes can only be created on frozen collections\",\n                             \"CREATE INDEX ON %s (full(v))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (values(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        execute(\"UPDATE %s SET v = v + ? WHERE k = ?\", set(udt2), 1);\n        assertTrue(waitForIndex(keyspace(), tableName, indexName));\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(1, set(udt1, udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 1\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(2, set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.\" + indexName);\n        assertInvalidMessage(format(\"Index '%s.%s' doesn't exist\", KEYSPACE, indexName),\n                             format(\"DROP INDEX %s.%s\", KEYSPACE, indexName));\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","date":"2018-07-17 23:39:41","endLine":1460,"groupId":"101622","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testIndexOnNonFrozenCollectionOfFrozenUDT","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/2b/2880d935285ad042cc0452508d748e0a703bac.src","preCode":"    public void testIndexOnNonFrozenCollectionOfFrozenUDT() throws Throwable\n    {\n        String type = createType(\"CREATE TYPE %s (a int)\");\n        String tableName = createTable(\"CREATE TABLE %s (k int PRIMARY KEY, v set<frozen<\" + type + \">>)\");\n\n        Object udt1 = userType(\"a\", 1);\n        Object udt2 = userType(\"a\", 2);\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 1, set(udt1));\n        assertInvalidMessage(\"Cannot create index on keys of column v with non-map type\",\n                             \"CREATE INDEX ON %s (keys(v))\");\n        assertInvalidMessage(\"full() indexes can only be created on frozen collections\",\n                             \"CREATE INDEX ON %s (full(v))\");\n        String indexName = createIndex(\"CREATE INDEX ON %s (values(v))\");\n\n        execute(\"INSERT INTO %s (k, v) VALUES (?, ?)\", 2, set(udt2));\n        execute(\"UPDATE %s SET v = v + ? WHERE k = ?\", set(udt2), 1);\n        assertTrue(waitForIndex(keyspace(), tableName, indexName));\n\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1), row(1, set(udt1, udt2)));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(1, set(udt1, udt2)), row(2, set(udt2)));\n\n        execute(\"DELETE FROM %s WHERE k = 1\");\n        assertEmpty(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt1));\n        assertRows(execute(\"SELECT * FROM %s WHERE v CONTAINS ?\", udt2), row(2, set(udt2)));\n\n        dropIndex(\"DROP INDEX %s.\" + indexName);\n        assertInvalidMessage(format(\"Index '%s.%s' doesn't exist\", KEYSPACE, indexName),\n                             format(\"DROP INDEX %s.%s\", KEYSPACE, indexName));\n        assertInvalidMessage(StatementRestrictions.REQUIRES_ALLOW_FILTERING_MESSAGE,\n                             \"SELECT * FROM %s WHERE v CONTAINS ?\", udt1);\n    }\n","realPath":"test/unit/org/apache/cassandra/cql3/validation/entities/SecondaryIndexTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":1429,"status":"N"}],"commitId":"9e74b670d8e680b87af4ce28103587cda1287bf8","commitMessage":"@@@Improve messaging on indexing frozen collections\n\nPatch by Rocco Varela.  reviewed by Bryn Cooke.  Zhao Yang.  and\nbrandonwilliams for CASSANDRA-15908\n","date":"2020-07-15 00:08:54","modifiedFileCount":"4","status":"M","submitter":"Rocco Varela"}]
