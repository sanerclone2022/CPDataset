[{"authorTime":"2015-06-30 21:58:02","codes":[{"authorDate":"2015-11-25 04:17:10","commitOrder":26,"curCode":"    public void testRecoverBlocksOnBytesOutstanding() throws Exception\n    {\n        long originalMaxOutstanding = CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES;\n        CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = 1;\n        CommitLogReplayer.MutationInitiator originalInitiator = CommitLogReplayer.mutationInitiator;\n        CommitLogReplayer.mutationInitiator = mockInitiator;\n        try\n        {\n            CommitLog.instance.resetUnsafe(true);\n            Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n            Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n            UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n                .clustering(\"col1\").add(\"val\", \"1\")\n                .build());\n\n            UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                           .clustering(\"col2\").add(\"val\", \"1\")\n                                           .build());\n\n            keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n            keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n            DecoratedKey dk = Util.dk(\"keymulti\");\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).isEmpty());\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).isEmpty());\n\n            final AtomicReference<Throwable> err = new AtomicReference<Throwable>();\n            Thread t = new Thread() {\n                @Override\n                public void run()\n                {\n                    try\n                    {\n                        CommitLog.instance.resetUnsafe(false); \r\n                    }\n                    catch (Throwable t)\n                    {\n                        err.set(t);\n                    }\n                }\n            };\n            t.start();\n            Assert.assertTrue(blocked.tryAcquire(1, 20, TimeUnit.SECONDS));\n            Thread.sleep(100);\n            Assert.assertTrue(t.isAlive());\n            blocker.release(Integer.MAX_VALUE);\n            t.join(20 * 1000);\n\n            if (err.get() != null)\n                throw new RuntimeException(err.get());\n\n            if (t.isAlive())\n            {\n                Throwable toPrint = new Throwable();\n                toPrint.setStackTrace(Thread.getAllStackTraces().get(t));\n                toPrint.printStackTrace(System.out);\n            }\n            Assert.assertFalse(t.isAlive());\n\n            Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n            Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n        }\n        finally\n        {\n            CommitLogReplayer.mutationInitiator = originalInitiator;\n            CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = originalMaxOutstanding;\n        }\n    }\n","date":"2015-12-05 00:49:41","endLine":222,"groupId":"30426","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecoverBlocksOnBytesOutstanding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/78/8757cb99ee099545e25ea7ea041475f6cbe79b.src","preCode":"    public void testRecoverBlocksOnBytesOutstanding() throws Exception\n    {\n        long originalMaxOutstanding = CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES;\n        CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = 1;\n        CommitLogReplayer.MutationInitiator originalInitiator = CommitLogReplayer.mutationInitiator;\n        CommitLogReplayer.mutationInitiator = mockInitiator;\n        try\n        {\n            CommitLog.instance.resetUnsafe(true);\n            Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n            Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n            UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n                .clustering(\"col1\").add(\"val\", \"1\")\n                .build());\n\n            UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                           .clustering(\"col2\").add(\"val\", \"1\")\n                                           .build());\n\n            keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n            keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n            DecoratedKey dk = Util.dk(\"keymulti\");\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).isEmpty());\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).isEmpty());\n\n            final AtomicReference<Throwable> err = new AtomicReference<Throwable>();\n            Thread t = new Thread() {\n                @Override\n                public void run()\n                {\n                    try\n                    {\n                        CommitLog.instance.resetUnsafe(false); \r\n                    }\n                    catch (Throwable t)\n                    {\n                        err.set(t);\n                    }\n                }\n            };\n            t.start();\n            Assert.assertTrue(blocked.tryAcquire(1, 20, TimeUnit.SECONDS));\n            Thread.sleep(100);\n            Assert.assertTrue(t.isAlive());\n            blocker.release(Integer.MAX_VALUE);\n            t.join(20 * 1000);\n\n            if (err.get() != null)\n                throw new RuntimeException(err.get());\n\n            if (t.isAlive())\n            {\n                Throwable toPrint = new Throwable();\n                toPrint.setStackTrace(Thread.getAllStackTraces().get(t));\n                toPrint.printStackTrace(System.out);\n            }\n            Assert.assertFalse(t.isAlive());\n\n            Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n            Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n        }\n        finally\n        {\n            CommitLogReplayer.mutationInitiator = originalInitiator;\n            CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = originalMaxOutstanding;\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RecoveryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"},{"authorDate":"2015-06-30 21:58:02","commitOrder":26,"curCode":"    public void testOne() throws IOException\n    {\n        CommitLog.instance.resetUnsafe(true);\n        Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n        Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n        UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n            .clustering(\"col1\").add(\"val\", \"1\")\n            .build());\n\n        UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                       .clustering(\"col2\").add(\"val\", \"1\")\n                                       .build());\n\n        keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n        keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n        CommitLog.instance.resetUnsafe(false);\n\n        DecoratedKey dk = Util.dk(\"keymulti\");\n        Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n        Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n    }\n","date":"2015-07-23 00:05:09","endLine":111,"groupId":"31225","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ba/f9466884dc81264e4ba20dcb62318be6edc72f.src","preCode":"    public void testOne() throws IOException\n    {\n        CommitLog.instance.resetUnsafe(true);\n        Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n        Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n        UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n            .clustering(\"col1\").add(\"val\", \"1\")\n            .build());\n\n        UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                       .clustering(\"col2\").add(\"val\", \"1\")\n                                       .build());\n\n        keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n        keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n        CommitLog.instance.resetUnsafe(false);\n\n        DecoratedKey dk = Util.dk(\"keymulti\");\n        Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n        Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RecoveryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"NB"}],"commitId":"1c41a9ac2c147ed111d9d8fba53652707dac7df0","commitMessage":"@@@bound maximum in-flight commit log replay mutation bytes to 64 megabytes (tunable via cassandra.commitlog_max_outstanding_replay_bytes)\n\nPatch by Ariel Weisberg; reviewed by tjake for CASSANDRA-8639\n","date":"2015-12-05 00:49:41","modifiedFileCount":"2","status":"M","submitter":"Ariel Weisberg"},{"authorTime":"2015-06-30 21:58:02","codes":[{"authorDate":"2016-06-02 18:51:58","commitOrder":27,"curCode":"    public void testRecoverBlocksOnBytesOutstanding() throws Exception\n    {\n        long originalMaxOutstanding = CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES;\n        CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = 1;\n        CommitLogReplayer.MutationInitiator originalInitiator = CommitLogReplayer.mutationInitiator;\n        MockInitiator mockInitiator = new MockInitiator();\n        CommitLogReplayer.mutationInitiator = mockInitiator;\n        try\n        {\n            CommitLog.instance.resetUnsafe(true);\n            Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n            Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n            UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n                .clustering(\"col1\").add(\"val\", \"1\")\n                .build());\n\n            UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                           .clustering(\"col2\").add(\"val\", \"1\")\n                                           .build());\n\n            keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n            keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n            DecoratedKey dk = Util.dk(\"keymulti\");\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).isEmpty());\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).isEmpty());\n\n            final AtomicReference<Throwable> err = new AtomicReference<Throwable>();\n            Thread t = new Thread() {\n                @Override\n                public void run()\n                {\n                    try\n                    {\n                        CommitLog.instance.resetUnsafe(false); \r\n                    }\n                    catch (Throwable t)\n                    {\n                        err.set(t);\n                    }\n                }\n            };\n            t.start();\n            Assert.assertTrue(mockInitiator.blocked.tryAcquire(1, 20, TimeUnit.SECONDS));\n            Thread.sleep(100);\n            Assert.assertTrue(t.isAlive());\n            mockInitiator.blocker.release(Integer.MAX_VALUE);\n            t.join(20 * 1000);\n\n            if (err.get() != null)\n                throw new RuntimeException(err.get());\n\n            if (t.isAlive())\n            {\n                Throwable toPrint = new Throwable();\n                toPrint.setStackTrace(Thread.getAllStackTraces().get(t));\n                toPrint.printStackTrace(System.out);\n            }\n            Assert.assertFalse(t.isAlive());\n\n            Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n            Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n        }\n        finally\n        {\n            CommitLogReplayer.mutationInitiator = originalInitiator;\n            CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = originalMaxOutstanding;\n        }\n    }\n","date":"2016-06-02 18:52:10","endLine":199,"groupId":"30426","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecoverBlocksOnBytesOutstanding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/37/d719eb2f6ebb787f2402eea71a718996b0d520.src","preCode":"    public void testRecoverBlocksOnBytesOutstanding() throws Exception\n    {\n        long originalMaxOutstanding = CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES;\n        CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = 1;\n        CommitLogReplayer.MutationInitiator originalInitiator = CommitLogReplayer.mutationInitiator;\n        CommitLogReplayer.mutationInitiator = mockInitiator;\n        try\n        {\n            CommitLog.instance.resetUnsafe(true);\n            Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n            Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n            UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n                .clustering(\"col1\").add(\"val\", \"1\")\n                .build());\n\n            UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                           .clustering(\"col2\").add(\"val\", \"1\")\n                                           .build());\n\n            keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n            keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n            DecoratedKey dk = Util.dk(\"keymulti\");\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).isEmpty());\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).isEmpty());\n\n            final AtomicReference<Throwable> err = new AtomicReference<Throwable>();\n            Thread t = new Thread() {\n                @Override\n                public void run()\n                {\n                    try\n                    {\n                        CommitLog.instance.resetUnsafe(false); \r\n                    }\n                    catch (Throwable t)\n                    {\n                        err.set(t);\n                    }\n                }\n            };\n            t.start();\n            Assert.assertTrue(blocked.tryAcquire(1, 20, TimeUnit.SECONDS));\n            Thread.sleep(100);\n            Assert.assertTrue(t.isAlive());\n            blocker.release(Integer.MAX_VALUE);\n            t.join(20 * 1000);\n\n            if (err.get() != null)\n                throw new RuntimeException(err.get());\n\n            if (t.isAlive())\n            {\n                Throwable toPrint = new Throwable();\n                toPrint.setStackTrace(Thread.getAllStackTraces().get(t));\n                toPrint.printStackTrace(System.out);\n            }\n            Assert.assertFalse(t.isAlive());\n\n            Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n            Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n        }\n        finally\n        {\n            CommitLogReplayer.mutationInitiator = originalInitiator;\n            CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = originalMaxOutstanding;\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RecoveryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2015-06-30 21:58:02","commitOrder":27,"curCode":"    public void testOne() throws IOException\n    {\n        CommitLog.instance.resetUnsafe(true);\n        Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n        Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n        UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n            .clustering(\"col1\").add(\"val\", \"1\")\n            .build());\n\n        UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                       .clustering(\"col2\").add(\"val\", \"1\")\n                                       .build());\n\n        keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n        keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n        CommitLog.instance.resetUnsafe(false);\n\n        DecoratedKey dk = Util.dk(\"keymulti\");\n        Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n        Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n    }\n","date":"2015-07-23 00:05:09","endLine":111,"groupId":"31225","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/ba/f9466884dc81264e4ba20dcb62318be6edc72f.src","preCode":"    public void testOne() throws IOException\n    {\n        CommitLog.instance.resetUnsafe(true);\n        Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n        Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n        UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n            .clustering(\"col1\").add(\"val\", \"1\")\n            .build());\n\n        UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                       .clustering(\"col2\").add(\"val\", \"1\")\n                                       .build());\n\n        keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n        keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n        CommitLog.instance.resetUnsafe(false);\n\n        DecoratedKey dk = Util.dk(\"keymulti\");\n        Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n        Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RecoveryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"}],"commitId":"adfbf518e041595a481cd902a033e6b081f50f82","commitMessage":"@@@Merge branch cassandra-3.7 into trunk\n","date":"2016-06-02 18:52:10","modifiedFileCount":"13","status":"M","submitter":"Benjamin Lerer"},{"authorTime":"2016-08-03 23:44:44","codes":[{"authorDate":"2016-08-03 23:44:44","commitOrder":28,"curCode":"    public void testRecoverBlocksOnBytesOutstanding() throws Exception\n    {\n        long originalMaxOutstanding = CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES;\n        CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = 1;\n        CommitLogReplayer.MutationInitiator originalInitiator = CommitLogReplayer.mutationInitiator;\n        MockInitiator mockInitiator = new MockInitiator();\n        CommitLogReplayer.mutationInitiator = mockInitiator;\n        try\n        {\n            CommitLog.instance.resetUnsafe(true);\n            Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n            Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n            UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n                .clustering(\"col1\").add(\"val\", \"1\")\n                .build());\n\n            UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                           .clustering(\"col2\").add(\"val\", \"1\")\n                                           .build());\n\n            keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n            keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n            DecoratedKey dk = Util.dk(\"keymulti\");\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).isEmpty());\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).isEmpty());\n\n            final AtomicReference<Throwable> err = new AtomicReference<Throwable>();\n            Thread t = new Thread() {\n                @Override\n                public void run()\n                {\n                    try\n                    {\n                        CommitLog.instance.resetUnsafe(false); \r\n                    }\n                    catch (Throwable t)\n                    {\n                        err.set(t);\n                    }\n                }\n            };\n            t.start();\n            Assert.assertTrue(mockInitiator.blocked.tryAcquire(1, 20, TimeUnit.SECONDS));\n            Thread.sleep(100);\n            Assert.assertTrue(t.isAlive());\n            mockInitiator.blocker.release(Integer.MAX_VALUE);\n            t.join(20 * 1000);\n\n            if (err.get() != null)\n                throw new RuntimeException(err.get());\n\n            if (t.isAlive())\n            {\n                Throwable toPrint = new Throwable();\n                toPrint.setStackTrace(Thread.getAllStackTraces().get(t));\n                toPrint.printStackTrace(System.out);\n            }\n            Assert.assertFalse(t.isAlive());\n\n            Assert.assertTrue(Util.sameContent(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n            Assert.assertTrue(Util.sameContent(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n        }\n        finally\n        {\n            CommitLogReplayer.mutationInitiator = originalInitiator;\n            CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = originalMaxOutstanding;\n        }\n    }\n","date":"2016-08-03 23:44:44","endLine":199,"groupId":"30426","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecoverBlocksOnBytesOutstanding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/cb/c412d7d21958c39cbbe6ed861623283e65cf8e.src","preCode":"    public void testRecoverBlocksOnBytesOutstanding() throws Exception\n    {\n        long originalMaxOutstanding = CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES;\n        CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = 1;\n        CommitLogReplayer.MutationInitiator originalInitiator = CommitLogReplayer.mutationInitiator;\n        MockInitiator mockInitiator = new MockInitiator();\n        CommitLogReplayer.mutationInitiator = mockInitiator;\n        try\n        {\n            CommitLog.instance.resetUnsafe(true);\n            Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n            Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n            UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n                .clustering(\"col1\").add(\"val\", \"1\")\n                .build());\n\n            UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                           .clustering(\"col2\").add(\"val\", \"1\")\n                                           .build());\n\n            keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n            keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n            DecoratedKey dk = Util.dk(\"keymulti\");\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).isEmpty());\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).isEmpty());\n\n            final AtomicReference<Throwable> err = new AtomicReference<Throwable>();\n            Thread t = new Thread() {\n                @Override\n                public void run()\n                {\n                    try\n                    {\n                        CommitLog.instance.resetUnsafe(false); \r\n                    }\n                    catch (Throwable t)\n                    {\n                        err.set(t);\n                    }\n                }\n            };\n            t.start();\n            Assert.assertTrue(mockInitiator.blocked.tryAcquire(1, 20, TimeUnit.SECONDS));\n            Thread.sleep(100);\n            Assert.assertTrue(t.isAlive());\n            mockInitiator.blocker.release(Integer.MAX_VALUE);\n            t.join(20 * 1000);\n\n            if (err.get() != null)\n                throw new RuntimeException(err.get());\n\n            if (t.isAlive())\n            {\n                Throwable toPrint = new Throwable();\n                toPrint.setStackTrace(Thread.getAllStackTraces().get(t));\n                toPrint.printStackTrace(System.out);\n            }\n            Assert.assertFalse(t.isAlive());\n\n            Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n            Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n        }\n        finally\n        {\n            CommitLogReplayer.mutationInitiator = originalInitiator;\n            CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = originalMaxOutstanding;\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RecoveryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2016-08-03 23:44:44","commitOrder":28,"curCode":"    public void testOne() throws IOException\n    {\n        CommitLog.instance.resetUnsafe(true);\n        Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n        Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n        UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n            .clustering(\"col1\").add(\"val\", \"1\")\n            .build());\n\n        UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                       .clustering(\"col2\").add(\"val\", \"1\")\n                                       .build());\n\n        keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n        keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n        CommitLog.instance.resetUnsafe(false);\n\n        DecoratedKey dk = Util.dk(\"keymulti\");\n        Assert.assertTrue(Util.sameContent(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n        Assert.assertTrue(Util.sameContent(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n    }\n","date":"2016-08-03 23:44:44","endLine":225,"groupId":"31225","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/cb/c412d7d21958c39cbbe6ed861623283e65cf8e.src","preCode":"    public void testOne() throws IOException\n    {\n        CommitLog.instance.resetUnsafe(true);\n        Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n        Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n        UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n            .clustering(\"col1\").add(\"val\", \"1\")\n            .build());\n\n        UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                       .clustering(\"col2\").add(\"val\", \"1\")\n                                       .build());\n\n        keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n        keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n        CommitLog.instance.resetUnsafe(false);\n\n        DecoratedKey dk = Util.dk(\"keymulti\");\n        Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n        Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RecoveryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"4e21f7267dc051fdd8214c67859e639ee5a9824f","commitMessage":"@@@Merge branch 'cassandra-3.9' into trunk\n\n* cassandra-3.9:\n  Fix RTE on mixed-version cluster due to CDC schema changes.\n","date":"2016-08-03 23:44:44","modifiedFileCount":"29","status":"M","submitter":"Sylvain Lebresne"},{"authorTime":"2016-08-03 23:44:44","codes":[{"authorDate":"2016-12-14 00:38:18","commitOrder":29,"curCode":"    public void testRecoverBlocksOnBytesOutstanding() throws Exception\n    {\n        long originalMaxOutstanding = CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES;\n        CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = 1;\n        CommitLogReplayer.MutationInitiator originalInitiator = CommitLogReplayer.mutationInitiator;\n        MockInitiator mockInitiator = new MockInitiator();\n        CommitLogReplayer.mutationInitiator = mockInitiator;\n        try\n        {\n            CommitLog.instance.resetUnsafe(true);\n            Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n            Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n            UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n                .clustering(\"col1\").add(\"val\", \"1\")\n                .build());\n\n            UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                           .clustering(\"col2\").add(\"val\", \"1\")\n                                           .build());\n\n            keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n            keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n            DecoratedKey dk = Util.dk(\"keymulti\");\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).isEmpty());\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).isEmpty());\n\n            final AtomicReference<Throwable> err = new AtomicReference<Throwable>();\n            Thread t = NamedThreadFactory.createThread(() ->\n            {\n                try\n                {\n                    CommitLog.instance.resetUnsafe(false); \r\n                }\n                catch (Throwable x)\n                {\n                    err.set(x);\n                }\n            });\n            t.start();\n            Assert.assertTrue(mockInitiator.blocked.tryAcquire(1, 20, TimeUnit.SECONDS));\n            Thread.sleep(100);\n            Assert.assertTrue(t.isAlive());\n            mockInitiator.blocker.release(Integer.MAX_VALUE);\n            t.join(20 * 1000);\n\n            if (err.get() != null)\n                throw new RuntimeException(err.get());\n\n            if (t.isAlive())\n            {\n                Throwable toPrint = new Throwable();\n                toPrint.setStackTrace(Thread.getAllStackTraces().get(t));\n                toPrint.printStackTrace(System.out);\n            }\n            Assert.assertFalse(t.isAlive());\n\n            Assert.assertTrue(Util.sameContent(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n            Assert.assertTrue(Util.sameContent(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n        }\n        finally\n        {\n            CommitLogReplayer.mutationInitiator = originalInitiator;\n            CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = originalMaxOutstanding;\n        }\n    }\n","date":"2016-12-14 00:38:18","endLine":197,"groupId":"30426","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecoverBlocksOnBytesOutstanding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/f5/bda4f3eb40658628f98be29e687a1a72c49527.src","preCode":"    public void testRecoverBlocksOnBytesOutstanding() throws Exception\n    {\n        long originalMaxOutstanding = CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES;\n        CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = 1;\n        CommitLogReplayer.MutationInitiator originalInitiator = CommitLogReplayer.mutationInitiator;\n        MockInitiator mockInitiator = new MockInitiator();\n        CommitLogReplayer.mutationInitiator = mockInitiator;\n        try\n        {\n            CommitLog.instance.resetUnsafe(true);\n            Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n            Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n            UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n                .clustering(\"col1\").add(\"val\", \"1\")\n                .build());\n\n            UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                           .clustering(\"col2\").add(\"val\", \"1\")\n                                           .build());\n\n            keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n            keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n            DecoratedKey dk = Util.dk(\"keymulti\");\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).isEmpty());\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).isEmpty());\n\n            final AtomicReference<Throwable> err = new AtomicReference<Throwable>();\n            Thread t = new Thread() {\n                @Override\n                public void run()\n                {\n                    try\n                    {\n                        CommitLog.instance.resetUnsafe(false); \r\n                    }\n                    catch (Throwable t)\n                    {\n                        err.set(t);\n                    }\n                }\n            };\n            t.start();\n            Assert.assertTrue(mockInitiator.blocked.tryAcquire(1, 20, TimeUnit.SECONDS));\n            Thread.sleep(100);\n            Assert.assertTrue(t.isAlive());\n            mockInitiator.blocker.release(Integer.MAX_VALUE);\n            t.join(20 * 1000);\n\n            if (err.get() != null)\n                throw new RuntimeException(err.get());\n\n            if (t.isAlive())\n            {\n                Throwable toPrint = new Throwable();\n                toPrint.setStackTrace(Thread.getAllStackTraces().get(t));\n                toPrint.printStackTrace(System.out);\n            }\n            Assert.assertFalse(t.isAlive());\n\n            Assert.assertTrue(Util.sameContent(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n            Assert.assertTrue(Util.sameContent(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n        }\n        finally\n        {\n            CommitLogReplayer.mutationInitiator = originalInitiator;\n            CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = originalMaxOutstanding;\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RecoveryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2016-08-03 23:44:44","commitOrder":29,"curCode":"    public void testOne() throws IOException\n    {\n        CommitLog.instance.resetUnsafe(true);\n        Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n        Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n        UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n            .clustering(\"col1\").add(\"val\", \"1\")\n            .build());\n\n        UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                       .clustering(\"col2\").add(\"val\", \"1\")\n                                       .build());\n\n        keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n        keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n        CommitLog.instance.resetUnsafe(false);\n\n        DecoratedKey dk = Util.dk(\"keymulti\");\n        Assert.assertTrue(Util.sameContent(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n        Assert.assertTrue(Util.sameContent(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n    }\n","date":"2016-08-03 23:44:44","endLine":225,"groupId":"31225","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/cb/c412d7d21958c39cbbe6ed861623283e65cf8e.src","preCode":"    public void testOne() throws IOException\n    {\n        CommitLog.instance.resetUnsafe(true);\n        Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n        Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n        UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n            .clustering(\"col1\").add(\"val\", \"1\")\n            .build());\n\n        UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                       .clustering(\"col2\").add(\"val\", \"1\")\n                                       .build());\n\n        keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n        keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n        CommitLog.instance.resetUnsafe(false);\n\n        DecoratedKey dk = Util.dk(\"keymulti\");\n        Assert.assertTrue(Util.sameContent(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n        Assert.assertTrue(Util.sameContent(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RecoveryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"N"}],"commitId":"d596a47cf1d2aaa8d1b4e98f886e0042a62cb9af","commitMessage":"@@@Merge branch 'cassandra-3.X' into trunk\n","date":"2016-12-14 00:38:18","modifiedFileCount":"29","status":"M","submitter":"Robert Stupp"},{"authorTime":"2016-11-10 09:16:59","codes":[{"authorDate":"2016-11-10 09:16:59","commitOrder":30,"curCode":"    public void testRecoverBlocksOnBytesOutstanding() throws Exception\n    {\n        long originalMaxOutstanding = CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES;\n        CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = 1;\n        CommitLogReplayer.MutationInitiator originalInitiator = CommitLogReplayer.mutationInitiator;\n        MockInitiator mockInitiator = new MockInitiator();\n        CommitLogReplayer.mutationInitiator = mockInitiator;\n        try\n        {\n            CommitLog.instance.resetUnsafe(true);\n            Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n            Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n            UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata(), 1L, 0, \"keymulti\")\n                .clustering(\"col1\").add(\"val\", \"1\")\n                .build());\n\n            UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata(), 1L, 0, \"keymulti\")\n                                           .clustering(\"col2\").add(\"val\", \"1\")\n                                           .build());\n\n            keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n            keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n            DecoratedKey dk = Util.dk(\"keymulti\");\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).isEmpty());\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).isEmpty());\n\n            final AtomicReference<Throwable> err = new AtomicReference<Throwable>();\n            Thread t = NamedThreadFactory.createThread(() ->\n            {\n                try\n                {\n                    CommitLog.instance.resetUnsafe(false); \r\n                }\n                catch (Throwable x)\n                {\n                    err.set(x);\n                }\n            });\n            t.start();\n            Assert.assertTrue(mockInitiator.blocked.tryAcquire(1, 20, TimeUnit.SECONDS));\n            Thread.sleep(100);\n            Assert.assertTrue(t.isAlive());\n            mockInitiator.blocker.release(Integer.MAX_VALUE);\n            t.join(20 * 1000);\n\n            if (err.get() != null)\n                throw new RuntimeException(err.get());\n\n            if (t.isAlive())\n            {\n                Throwable toPrint = new Throwable();\n                toPrint.setStackTrace(Thread.getAllStackTraces().get(t));\n                toPrint.printStackTrace(System.out);\n            }\n            Assert.assertFalse(t.isAlive());\n\n            Assert.assertTrue(Util.sameContent(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n            Assert.assertTrue(Util.sameContent(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n        }\n        finally\n        {\n            CommitLogReplayer.mutationInitiator = originalInitiator;\n            CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = originalMaxOutstanding;\n        }\n    }\n","date":"2017-01-28 06:17:46","endLine":196,"groupId":"10745","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRecoverBlocksOnBytesOutstanding","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/16/4253d1e1f6b425cbd358ced39840a15b5ba78d.src","preCode":"    public void testRecoverBlocksOnBytesOutstanding() throws Exception\n    {\n        long originalMaxOutstanding = CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES;\n        CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = 1;\n        CommitLogReplayer.MutationInitiator originalInitiator = CommitLogReplayer.mutationInitiator;\n        MockInitiator mockInitiator = new MockInitiator();\n        CommitLogReplayer.mutationInitiator = mockInitiator;\n        try\n        {\n            CommitLog.instance.resetUnsafe(true);\n            Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n            Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n            UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n                .clustering(\"col1\").add(\"val\", \"1\")\n                .build());\n\n            UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                           .clustering(\"col2\").add(\"val\", \"1\")\n                                           .build());\n\n            keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n            keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n            DecoratedKey dk = Util.dk(\"keymulti\");\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).isEmpty());\n            Assert.assertTrue(Util.getAllUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).isEmpty());\n\n            final AtomicReference<Throwable> err = new AtomicReference<Throwable>();\n            Thread t = NamedThreadFactory.createThread(() ->\n            {\n                try\n                {\n                    CommitLog.instance.resetUnsafe(false); \r\n                }\n                catch (Throwable x)\n                {\n                    err.set(x);\n                }\n            });\n            t.start();\n            Assert.assertTrue(mockInitiator.blocked.tryAcquire(1, 20, TimeUnit.SECONDS));\n            Thread.sleep(100);\n            Assert.assertTrue(t.isAlive());\n            mockInitiator.blocker.release(Integer.MAX_VALUE);\n            t.join(20 * 1000);\n\n            if (err.get() != null)\n                throw new RuntimeException(err.get());\n\n            if (t.isAlive())\n            {\n                Throwable toPrint = new Throwable();\n                toPrint.setStackTrace(Thread.getAllStackTraces().get(t));\n                toPrint.printStackTrace(System.out);\n            }\n            Assert.assertFalse(t.isAlive());\n\n            Assert.assertTrue(Util.sameContent(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n            Assert.assertTrue(Util.sameContent(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n        }\n        finally\n        {\n            CommitLogReplayer.mutationInitiator = originalInitiator;\n            CommitLogReplayer.MAX_OUTSTANDING_REPLAY_BYTES = originalMaxOutstanding;\n        }\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RecoveryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2016-11-10 09:16:59","commitOrder":30,"curCode":"    public void testOne() throws IOException\n    {\n        CommitLog.instance.resetUnsafe(true);\n        Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n        Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n        UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata(), 1L, 0, \"keymulti\")\n            .clustering(\"col1\").add(\"val\", \"1\")\n            .build());\n\n        UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata(), 1L, 0, \"keymulti\")\n                                       .clustering(\"col2\").add(\"val\", \"1\")\n                                       .build());\n\n        keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n        keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n        CommitLog.instance.resetUnsafe(false);\n\n        DecoratedKey dk = Util.dk(\"keymulti\");\n        Assert.assertTrue(Util.sameContent(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n        Assert.assertTrue(Util.sameContent(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n    }\n","date":"2017-01-28 06:17:46","endLine":222,"groupId":"10745","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testOne","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/16/4253d1e1f6b425cbd358ced39840a15b5ba78d.src","preCode":"    public void testOne() throws IOException\n    {\n        CommitLog.instance.resetUnsafe(true);\n        Keyspace keyspace1 = Keyspace.open(KEYSPACE1);\n        Keyspace keyspace2 = Keyspace.open(KEYSPACE2);\n\n        UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, \"keymulti\")\n            .clustering(\"col1\").add(\"val\", \"1\")\n            .build());\n\n        UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, \"keymulti\")\n                                       .clustering(\"col2\").add(\"val\", \"1\")\n                                       .build());\n\n        keyspace1.getColumnFamilyStore(\"Standard1\").clearUnsafe();\n        keyspace2.getColumnFamilyStore(\"Standard3\").clearUnsafe();\n\n        CommitLog.instance.resetUnsafe(false);\n\n        DecoratedKey dk = Util.dk(\"keymulti\");\n        Assert.assertTrue(Util.sameContent(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()));\n        Assert.assertTrue(Util.sameContent(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()));\n    }\n","realPath":"test/unit/org/apache/cassandra/db/RecoveryManagerTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"af3fe39dcabd9ef77a00309ce6741268423206df","commitMessage":"@@@Make TableMetadata immutable.  optimize Schema\n\npatch by Aleksey Yeschenko; reviewed by Sylvain Lebresne for\nCASSANDRA-9425\n","date":"2017-01-28 06:17:46","modifiedFileCount":"511","status":"M","submitter":"Aleksey Yeschenko"}]
