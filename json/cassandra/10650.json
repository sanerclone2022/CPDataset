[{"authorTime":"2018-02-16 22:46:58","codes":[{"authorDate":"2018-02-16 22:46:58","commitOrder":1,"curCode":"    public void importResetLevelTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateLevel(sstable.descriptor, 123);\n        File backupdir = moveToBackupDir(sstables);\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        getCurrentColumnFamilyStore().loadNewSSTables(backupdir.toString(), false, false, false, false, false, false);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertEquals(123, sstable.getSSTableLevel());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n        getCurrentColumnFamilyStore().loadNewSSTables(backupdir.toString(), true, false, false, false, false, false);\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertEquals(0, sstable.getSSTableLevel());\n    }\n","date":"2018-04-18 20:59:00","endLine":124,"groupId":"21756","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"importResetLevelTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/19/7d79d5d51ace1dbb67f4391f7b1615d6260a59.src","preCode":"    public void importResetLevelTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateLevel(sstable.descriptor, 123);\n        File backupdir = moveToBackupDir(sstables);\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        getCurrentColumnFamilyStore().loadNewSSTables(backupdir.toString(), false, false, false, false, false, false);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertEquals(123, sstable.getSSTableLevel());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n        getCurrentColumnFamilyStore().loadNewSSTables(backupdir.toString(), true, false, false, false, false, false);\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertEquals(0, sstable.getSSTableLevel());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ImportTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"},{"authorDate":"2018-02-16 22:46:58","commitOrder":1,"curCode":"    public void importClearRepairedTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateRepaired(sstable.descriptor, 111, null);\n\n        File backupdir = moveToBackupDir(sstables);\n\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        getCurrentColumnFamilyStore().loadNewSSTables(backupdir.toString(), false, false, false, false, false, false);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertTrue(sstable.isRepaired());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n        getCurrentColumnFamilyStore().loadNewSSTables(backupdir.toString(), false, true, false, false, false, false);\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertFalse(sstable.isRepaired());\n    }\n","date":"2018-04-18 20:59:00","endLine":158,"groupId":"13842","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"importClearRepairedTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/19/7d79d5d51ace1dbb67f4391f7b1615d6260a59.src","preCode":"    public void importClearRepairedTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateRepaired(sstable.descriptor, 111, null);\n\n        File backupdir = moveToBackupDir(sstables);\n\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        getCurrentColumnFamilyStore().loadNewSSTables(backupdir.toString(), false, false, false, false, false, false);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertTrue(sstable.isRepaired());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n        getCurrentColumnFamilyStore().loadNewSSTables(backupdir.toString(), false, true, false, false, false, false);\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertFalse(sstable.isRepaired());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ImportTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"}],"commitId":"127cfff26bbed97d2ae9cb3b0a65824d130ec78b","commitMessage":"@@@Add ability to load new SSTables from a separate directory\n\nPatch by marcuse; reviewed by Jordan West for CASSANDRA-6719\n","date":"2018-04-18 20:59:00","modifiedFileCount":"9","status":"B","submitter":"Marcus Eriksson"},{"authorTime":"2018-04-24 20:02:17","codes":[{"authorDate":"2018-04-24 20:02:17","commitOrder":2,"curCode":"    public void importResetLevelTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateLevel(sstable.descriptor, 8);\n        File backupdir = moveToBackupDir(sstables);\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        ColumnFamilyStore.ImportOptions options = ColumnFamilyStore.ImportOptions.options(backupdir.toString()).build();\n        getCurrentColumnFamilyStore().importNewSSTables(options);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertEquals(8, sstable.getSSTableLevel());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n\n        options = ColumnFamilyStore.ImportOptions.options(backupdir.toString()).resetLevel(true).build();\n        getCurrentColumnFamilyStore().importNewSSTables(options);\n\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertEquals(0, sstable.getSSTableLevel());\n    }\n","date":"2018-05-18 17:15:40","endLine":128,"groupId":"21756","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"importResetLevelTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c7/fc14efe8a935b8f3ee50d1faefcc68f173780b.src","preCode":"    public void importResetLevelTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateLevel(sstable.descriptor, 123);\n        File backupdir = moveToBackupDir(sstables);\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        getCurrentColumnFamilyStore().loadNewSSTables(backupdir.toString(), false, false, false, false, false, false);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertEquals(123, sstable.getSSTableLevel());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n        getCurrentColumnFamilyStore().loadNewSSTables(backupdir.toString(), true, false, false, false, false, false);\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertEquals(0, sstable.getSSTableLevel());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ImportTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2018-04-24 20:02:17","commitOrder":2,"curCode":"    public void importClearRepairedTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateRepaired(sstable.descriptor, 111, null);\n\n        File backupdir = moveToBackupDir(sstables);\n\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        ColumnFamilyStore.ImportOptions options = ColumnFamilyStore.ImportOptions.options(backupdir.toString()).build();\n        getCurrentColumnFamilyStore().importNewSSTables(options);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertTrue(sstable.isRepaired());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n\n        options = ColumnFamilyStore.ImportOptions.options(backupdir.toString()).clearRepaired(true).build();\n        getCurrentColumnFamilyStore().importNewSSTables(options);\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertFalse(sstable.isRepaired());\n    }\n","date":"2018-05-18 17:15:40","endLine":165,"groupId":"13842","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"importClearRepairedTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/c7/fc14efe8a935b8f3ee50d1faefcc68f173780b.src","preCode":"    public void importClearRepairedTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateRepaired(sstable.descriptor, 111, null);\n\n        File backupdir = moveToBackupDir(sstables);\n\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        getCurrentColumnFamilyStore().loadNewSSTables(backupdir.toString(), false, false, false, false, false, false);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertTrue(sstable.isRepaired());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n        getCurrentColumnFamilyStore().loadNewSSTables(backupdir.toString(), false, true, false, false, false, false);\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertFalse(sstable.isRepaired());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ImportTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"3b6c93828c2d90b7bdadb4ff199dd70660e73188","commitMessage":"@@@Cleanups and improvements to nodetool import\n\nPatch by marcuse; reviewed by Jordan West for CASSANDRA-14417\n","date":"2018-05-18 17:15:40","modifiedFileCount":"9","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2018-05-04 20:59:26","codes":[{"authorDate":"2018-05-04 20:59:26","commitOrder":3,"curCode":"    public void importResetLevelTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateLevel(sstable.descriptor, 8);\n        File backupdir = moveToBackupDir(sstables);\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        SSTableImporter.Options options = SSTableImporter.Options.options(backupdir.toString()).build();\n        SSTableImporter importer = new SSTableImporter(getCurrentColumnFamilyStore());\n        importer.importNewSSTables(options);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertEquals(8, sstable.getSSTableLevel());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n\n        options = SSTableImporter.Options.options(backupdir.toString()).resetLevel(true).build();\n        importer.importNewSSTables(options);\n\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertEquals(0, sstable.getSSTableLevel());\n    }\n","date":"2018-06-04 15:47:18","endLine":164,"groupId":"21756","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"importResetLevelTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/66/bbff33bd919ba222c8b9278d371f43c1bc6068.src","preCode":"    public void importResetLevelTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateLevel(sstable.descriptor, 8);\n        File backupdir = moveToBackupDir(sstables);\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        ColumnFamilyStore.ImportOptions options = ColumnFamilyStore.ImportOptions.options(backupdir.toString()).build();\n        getCurrentColumnFamilyStore().importNewSSTables(options);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertEquals(8, sstable.getSSTableLevel());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n\n        options = ColumnFamilyStore.ImportOptions.options(backupdir.toString()).resetLevel(true).build();\n        getCurrentColumnFamilyStore().importNewSSTables(options);\n\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertEquals(0, sstable.getSSTableLevel());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ImportTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2018-05-04 20:59:26","commitOrder":3,"curCode":"    public void importClearRepairedTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateRepaired(sstable.descriptor, 111, null);\n\n        File backupdir = moveToBackupDir(sstables);\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        SSTableImporter.Options options = SSTableImporter.Options.options(backupdir.toString()).build();\n        SSTableImporter importer = new SSTableImporter(getCurrentColumnFamilyStore());\n        importer.importNewSSTables(options);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertTrue(sstable.isRepaired());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n\n        options = SSTableImporter.Options.options(backupdir.toString()).clearRepaired(true).build();\n        importer.importNewSSTables(options);\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertFalse(sstable.isRepaired());\n    }\n","date":"2018-06-04 15:47:18","endLine":201,"groupId":"21758","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"importClearRepairedTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/66/bbff33bd919ba222c8b9278d371f43c1bc6068.src","preCode":"    public void importClearRepairedTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateRepaired(sstable.descriptor, 111, null);\n\n        File backupdir = moveToBackupDir(sstables);\n\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        ColumnFamilyStore.ImportOptions options = ColumnFamilyStore.ImportOptions.options(backupdir.toString()).build();\n        getCurrentColumnFamilyStore().importNewSSTables(options);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertTrue(sstable.isRepaired());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n\n        options = ColumnFamilyStore.ImportOptions.options(backupdir.toString()).clearRepaired(true).build();\n        getCurrentColumnFamilyStore().importNewSSTables(options);\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertFalse(sstable.isRepaired());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ImportTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"0f79427758c58cf9768898115c1da28fd71e3550","commitMessage":"@@@Let nodetool import take a list of directories to import\n\nPatch by marcuse; reviewed by Jordan West for CASSANDRA-14442\n","date":"2018-06-04 15:47:18","modifiedFileCount":"8","status":"M","submitter":"Marcus Eriksson"},{"authorTime":"2018-07-06 06:10:40","codes":[{"authorDate":"2018-05-04 20:59:26","commitOrder":4,"curCode":"    public void importResetLevelTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateLevel(sstable.descriptor, 8);\n        File backupdir = moveToBackupDir(sstables);\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        SSTableImporter.Options options = SSTableImporter.Options.options(backupdir.toString()).build();\n        SSTableImporter importer = new SSTableImporter(getCurrentColumnFamilyStore());\n        importer.importNewSSTables(options);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertEquals(8, sstable.getSSTableLevel());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n\n        options = SSTableImporter.Options.options(backupdir.toString()).resetLevel(true).build();\n        importer.importNewSSTables(options);\n\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertEquals(0, sstable.getSSTableLevel());\n    }\n","date":"2018-06-04 15:47:18","endLine":164,"groupId":"10650","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"importResetLevelTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/66/bbff33bd919ba222c8b9278d371f43c1bc6068.src","preCode":"    public void importResetLevelTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateLevel(sstable.descriptor, 8);\n        File backupdir = moveToBackupDir(sstables);\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        SSTableImporter.Options options = SSTableImporter.Options.options(backupdir.toString()).build();\n        SSTableImporter importer = new SSTableImporter(getCurrentColumnFamilyStore());\n        importer.importNewSSTables(options);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertEquals(8, sstable.getSSTableLevel());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n\n        options = SSTableImporter.Options.options(backupdir.toString()).resetLevel(true).build();\n        importer.importNewSSTables(options);\n\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertEquals(0, sstable.getSSTableLevel());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ImportTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"N"},{"authorDate":"2018-07-06 06:10:40","commitOrder":4,"curCode":"    public void importClearRepairedTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateRepairMetadata(sstable.descriptor, 111, null, false);\n\n        File backupdir = moveToBackupDir(sstables);\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        SSTableImporter.Options options = SSTableImporter.Options.options(backupdir.toString()).build();\n        SSTableImporter importer = new SSTableImporter(getCurrentColumnFamilyStore());\n        importer.importNewSSTables(options);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertTrue(sstable.isRepaired());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n\n        options = SSTableImporter.Options.options(backupdir.toString()).clearRepaired(true).build();\n        importer.importNewSSTables(options);\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertFalse(sstable.isRepaired());\n    }\n","date":"2018-09-01 09:34:22","endLine":201,"groupId":"10650","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"importClearRepairedTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-cassandra-10-0.7/blobInfo/CC_OUT/blobs/5c/eb233a56e4598ffaae15bfa325b596050960c3.src","preCode":"    public void importClearRepairedTest() throws Throwable\n    {\n        createTable(\"create table %s (id int primary key, d int)\");\n        for (int i = 0; i < 10; i++)\n            execute(\"insert into %s (id, d) values (?, ?)\", i, i);\n        getCurrentColumnFamilyStore().forceBlockingFlush();\n        Set<SSTableReader> sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        getCurrentColumnFamilyStore().clearUnsafe();\n        for (SSTableReader sstable : sstables)\n            sstable.descriptor.getMetadataSerializer().mutateRepaired(sstable.descriptor, 111, null);\n\n        File backupdir = moveToBackupDir(sstables);\n        assertEquals(0, execute(\"select * from %s\").size());\n\n        SSTableImporter.Options options = SSTableImporter.Options.options(backupdir.toString()).build();\n        SSTableImporter importer = new SSTableImporter(getCurrentColumnFamilyStore());\n        importer.importNewSSTables(options);\n\n        assertEquals(10, execute(\"select * from %s\").size());\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : sstables)\n            assertTrue(sstable.isRepaired());\n\n        getCurrentColumnFamilyStore().clearUnsafe();\n        backupdir = moveToBackupDir(sstables);\n\n        options = SSTableImporter.Options.options(backupdir.toString()).clearRepaired(true).build();\n        importer.importNewSSTables(options);\n        sstables = getCurrentColumnFamilyStore().getLiveSSTables();\n        assertEquals(1, sstables.size());\n        for (SSTableReader sstable : getCurrentColumnFamilyStore().getLiveSSTables())\n            assertFalse(sstable.isRepaired());\n    }\n","realPath":"test/unit/org/apache/cassandra/db/ImportTest.java","repoName":"cassandra","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"f7431b432875e334170ccdb19934d05545d2cebd","commitMessage":"@@@Transient Replication and Cheap Quorums\n\nPatch by Blake Eggleston.  Benedict Elliott Smith.  Marcus Eriksson.  Alex Petrov.  Ariel Weisberg; Reviewed by Blake Eggleston.  Marcus Eriksson.  Benedict Elliott Smith.  Alex Petrov.  Ariel Weisberg for CASSANDRA-14404\n\nCo-authored-by: Blake Eggleston <bdeggleston@gmail.com>\nCo-authored-by: Benedict Elliott Smith <benedict@apache.org>\nCo-authored-by: Marcus Eriksson <marcuse@apache.org>\nCo-authored-by: Alex Petrov <oleksandr.petrov@gmail.com>\n","date":"2018-09-01 09:34:22","modifiedFileCount":"230","status":"M","submitter":"Ariel Weisberg"}]
